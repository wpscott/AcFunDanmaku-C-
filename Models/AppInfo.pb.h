// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AppInfo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_AppInfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_AppInfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_AppInfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_AppInfo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_AppInfo_2eproto;
namespace AcFunDanmu {
class AppInfo;
struct AppInfoDefaultTypeInternal;
extern AppInfoDefaultTypeInternal _AppInfo_default_instance_;
class AppInfo_ExtensionInfoEntry_DoNotUse;
struct AppInfo_ExtensionInfoEntry_DoNotUseDefaultTypeInternal;
extern AppInfo_ExtensionInfoEntry_DoNotUseDefaultTypeInternal _AppInfo_ExtensionInfoEntry_DoNotUse_default_instance_;
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::AppInfo* Arena::CreateMaybeMessage<::AcFunDanmu::AppInfo>(Arena*);
template<> ::AcFunDanmu::AppInfo_ExtensionInfoEntry_DoNotUse* Arena::CreateMaybeMessage<::AcFunDanmu::AppInfo_ExtensionInfoEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {

// ===================================================================

class AppInfo_ExtensionInfoEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AppInfo_ExtensionInfoEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AppInfo_ExtensionInfoEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  AppInfo_ExtensionInfoEntry_DoNotUse();
  explicit constexpr AppInfo_ExtensionInfoEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit AppInfo_ExtensionInfoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AppInfo_ExtensionInfoEntry_DoNotUse& other);
  static const AppInfo_ExtensionInfoEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AppInfo_ExtensionInfoEntry_DoNotUse*>(&_AppInfo_ExtensionInfoEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "AcFunDanmu.AppInfo.ExtensionInfoEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "AcFunDanmu.AppInfo.ExtensionInfoEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class AppInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.AppInfo) */ {
 public:
  inline AppInfo() : AppInfo(nullptr) {}
  ~AppInfo() override;
  explicit constexpr AppInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppInfo(const AppInfo& from);
  AppInfo(AppInfo&& from) noexcept
    : AppInfo() {
    *this = ::std::move(from);
  }

  inline AppInfo& operator=(const AppInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppInfo& operator=(AppInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppInfo* internal_default_instance() {
    return reinterpret_cast<const AppInfo*>(
               &_AppInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AppInfo& a, AppInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AppInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppInfo* New() const final {
    return new AppInfo();
  }

  AppInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppInfo& from);
  void MergeFrom(const AppInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.AppInfo";
  }
  protected:
  explicit AppInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kExtensionInfoFieldNumber = 11,
    kAppNameFieldNumber = 1,
    kAppVersionFieldNumber = 2,
    kAppChannelFieldNumber = 3,
    kSdkVersionFieldNumber = 4,
    kLinkVersionFieldNumber = 5,
  };
  // map<string, string> extensionInfo = 11;
  int extensioninfo_size() const;
  private:
  int _internal_extensioninfo_size() const;
  public:
  void clear_extensioninfo();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_extensioninfo() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_extensioninfo();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      extensioninfo() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_extensioninfo();

  // string appName = 1;
  void clear_appname();
  const std::string& appname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_appname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_appname();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_appname();
  void set_allocated_appname(std::string* appname);
  private:
  const std::string& _internal_appname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_appname(const std::string& value);
  std::string* _internal_mutable_appname();
  public:

  // string appVersion = 2;
  void clear_appversion();
  const std::string& appversion() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_appversion(ArgT0&& arg0, ArgT... args);
  std::string* mutable_appversion();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_appversion();
  void set_allocated_appversion(std::string* appversion);
  private:
  const std::string& _internal_appversion() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_appversion(const std::string& value);
  std::string* _internal_mutable_appversion();
  public:

  // string appChannel = 3;
  void clear_appchannel();
  const std::string& appchannel() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_appchannel(ArgT0&& arg0, ArgT... args);
  std::string* mutable_appchannel();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_appchannel();
  void set_allocated_appchannel(std::string* appchannel);
  private:
  const std::string& _internal_appchannel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_appchannel(const std::string& value);
  std::string* _internal_mutable_appchannel();
  public:

  // string sdkVersion = 4;
  void clear_sdkversion();
  const std::string& sdkversion() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sdkversion(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sdkversion();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_sdkversion();
  void set_allocated_sdkversion(std::string* sdkversion);
  private:
  const std::string& _internal_sdkversion() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sdkversion(const std::string& value);
  std::string* _internal_mutable_sdkversion();
  public:

  // string linkVersion = 5;
  void clear_linkversion();
  const std::string& linkversion() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_linkversion(ArgT0&& arg0, ArgT... args);
  std::string* mutable_linkversion();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_linkversion();
  void set_allocated_linkversion(std::string* linkversion);
  private:
  const std::string& _internal_linkversion() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_linkversion(const std::string& value);
  std::string* _internal_mutable_linkversion();
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.AppInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      AppInfo_ExtensionInfoEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> extensioninfo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appversion_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appchannel_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sdkversion_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr linkversion_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AppInfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// AppInfo

// string appName = 1;
inline void AppInfo::clear_appname() {
  appname_.ClearToEmpty();
}
inline const std::string& AppInfo::appname() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.AppInfo.appName)
  return _internal_appname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppInfo::set_appname(ArgT0&& arg0, ArgT... args) {
 
 appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.AppInfo.appName)
}
inline std::string* AppInfo::mutable_appname() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.AppInfo.appName)
  return _internal_mutable_appname();
}
inline const std::string& AppInfo::_internal_appname() const {
  return appname_.Get();
}
inline void AppInfo::_internal_set_appname(const std::string& value) {
  
  appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AppInfo::_internal_mutable_appname() {
  
  return appname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AppInfo::release_appname() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.AppInfo.appName)
  return appname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AppInfo::set_allocated_appname(std::string* appname) {
  if (appname != nullptr) {
    
  } else {
    
  }
  appname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), appname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.AppInfo.appName)
}

// string appVersion = 2;
inline void AppInfo::clear_appversion() {
  appversion_.ClearToEmpty();
}
inline const std::string& AppInfo::appversion() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.AppInfo.appVersion)
  return _internal_appversion();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppInfo::set_appversion(ArgT0&& arg0, ArgT... args) {
 
 appversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.AppInfo.appVersion)
}
inline std::string* AppInfo::mutable_appversion() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.AppInfo.appVersion)
  return _internal_mutable_appversion();
}
inline const std::string& AppInfo::_internal_appversion() const {
  return appversion_.Get();
}
inline void AppInfo::_internal_set_appversion(const std::string& value) {
  
  appversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AppInfo::_internal_mutable_appversion() {
  
  return appversion_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AppInfo::release_appversion() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.AppInfo.appVersion)
  return appversion_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AppInfo::set_allocated_appversion(std::string* appversion) {
  if (appversion != nullptr) {
    
  } else {
    
  }
  appversion_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), appversion,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.AppInfo.appVersion)
}

// string appChannel = 3;
inline void AppInfo::clear_appchannel() {
  appchannel_.ClearToEmpty();
}
inline const std::string& AppInfo::appchannel() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.AppInfo.appChannel)
  return _internal_appchannel();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppInfo::set_appchannel(ArgT0&& arg0, ArgT... args) {
 
 appchannel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.AppInfo.appChannel)
}
inline std::string* AppInfo::mutable_appchannel() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.AppInfo.appChannel)
  return _internal_mutable_appchannel();
}
inline const std::string& AppInfo::_internal_appchannel() const {
  return appchannel_.Get();
}
inline void AppInfo::_internal_set_appchannel(const std::string& value) {
  
  appchannel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AppInfo::_internal_mutable_appchannel() {
  
  return appchannel_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AppInfo::release_appchannel() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.AppInfo.appChannel)
  return appchannel_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AppInfo::set_allocated_appchannel(std::string* appchannel) {
  if (appchannel != nullptr) {
    
  } else {
    
  }
  appchannel_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), appchannel,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.AppInfo.appChannel)
}

// string sdkVersion = 4;
inline void AppInfo::clear_sdkversion() {
  sdkversion_.ClearToEmpty();
}
inline const std::string& AppInfo::sdkversion() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.AppInfo.sdkVersion)
  return _internal_sdkversion();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppInfo::set_sdkversion(ArgT0&& arg0, ArgT... args) {
 
 sdkversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.AppInfo.sdkVersion)
}
inline std::string* AppInfo::mutable_sdkversion() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.AppInfo.sdkVersion)
  return _internal_mutable_sdkversion();
}
inline const std::string& AppInfo::_internal_sdkversion() const {
  return sdkversion_.Get();
}
inline void AppInfo::_internal_set_sdkversion(const std::string& value) {
  
  sdkversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AppInfo::_internal_mutable_sdkversion() {
  
  return sdkversion_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AppInfo::release_sdkversion() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.AppInfo.sdkVersion)
  return sdkversion_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AppInfo::set_allocated_sdkversion(std::string* sdkversion) {
  if (sdkversion != nullptr) {
    
  } else {
    
  }
  sdkversion_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sdkversion,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.AppInfo.sdkVersion)
}

// string linkVersion = 5;
inline void AppInfo::clear_linkversion() {
  linkversion_.ClearToEmpty();
}
inline const std::string& AppInfo::linkversion() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.AppInfo.linkVersion)
  return _internal_linkversion();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppInfo::set_linkversion(ArgT0&& arg0, ArgT... args) {
 
 linkversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.AppInfo.linkVersion)
}
inline std::string* AppInfo::mutable_linkversion() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.AppInfo.linkVersion)
  return _internal_mutable_linkversion();
}
inline const std::string& AppInfo::_internal_linkversion() const {
  return linkversion_.Get();
}
inline void AppInfo::_internal_set_linkversion(const std::string& value) {
  
  linkversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AppInfo::_internal_mutable_linkversion() {
  
  return linkversion_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AppInfo::release_linkversion() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.AppInfo.linkVersion)
  return linkversion_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AppInfo::set_allocated_linkversion(std::string* linkversion) {
  if (linkversion != nullptr) {
    
  } else {
    
  }
  linkversion_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), linkversion,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.AppInfo.linkVersion)
}

// map<string, string> extensionInfo = 11;
inline int AppInfo::_internal_extensioninfo_size() const {
  return extensioninfo_.size();
}
inline int AppInfo::extensioninfo_size() const {
  return _internal_extensioninfo_size();
}
inline void AppInfo::clear_extensioninfo() {
  extensioninfo_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AppInfo::_internal_extensioninfo() const {
  return extensioninfo_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AppInfo::extensioninfo() const {
  // @@protoc_insertion_point(field_map:AcFunDanmu.AppInfo.extensionInfo)
  return _internal_extensioninfo();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AppInfo::_internal_mutable_extensioninfo() {
  return extensioninfo_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AppInfo::mutable_extensioninfo() {
  // @@protoc_insertion_point(field_mutable_map:AcFunDanmu.AppInfo.extensionInfo)
  return _internal_mutable_extensioninfo();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace AcFunDanmu

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_AppInfo_2eproto
