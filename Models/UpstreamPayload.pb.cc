// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UpstreamPayload.proto

#include "UpstreamPayload.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace AcFunDanmu {
constexpr UpstreamPayload::UpstreamPayload(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : command_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , payloaddata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , subbiz_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , kpn_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , laneid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , userinstance_(nullptr)
  , settinginfo_(nullptr)
  , requestbasicinfo_(nullptr)
  , frontendinfo_(nullptr)
  , seqid_(int64_t{0})
  , retrycount_(0u)
  , errorcode_(0)
  , anonymouseuser_(false){}
struct UpstreamPayloadDefaultTypeInternal {
  constexpr UpstreamPayloadDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpstreamPayloadDefaultTypeInternal() {}
  union {
    UpstreamPayload _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpstreamPayloadDefaultTypeInternal _UpstreamPayload_default_instance_;
}  // namespace AcFunDanmu
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_UpstreamPayload_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_UpstreamPayload_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_UpstreamPayload_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_UpstreamPayload_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::UpstreamPayload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::UpstreamPayload, command_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::UpstreamPayload, seqid_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::UpstreamPayload, retrycount_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::UpstreamPayload, payloaddata_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::UpstreamPayload, userinstance_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::UpstreamPayload, errorcode_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::UpstreamPayload, settinginfo_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::UpstreamPayload, requestbasicinfo_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::UpstreamPayload, subbiz_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::UpstreamPayload, frontendinfo_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::UpstreamPayload, kpn_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::UpstreamPayload, anonymouseuser_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::UpstreamPayload, laneid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::AcFunDanmu::UpstreamPayload)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AcFunDanmu::_UpstreamPayload_default_instance_),
};

const char descriptor_table_protodef_UpstreamPayload_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025UpstreamPayload.proto\022\nAcFunDanmu\032\022Use"
  "rInstance.proto\032\021SettingInfo.proto\032\026Requ"
  "estBasicInfo.proto\032\022FrontendInfo.proto\"\370"
  "\002\n\017UpstreamPayload\022\017\n\007command\030\001 \001(\t\022\r\n\005s"
  "eqId\030\002 \001(\003\022\022\n\nretryCount\030\003 \001(\r\022\023\n\013payloa"
  "dData\030\004 \001(\014\022.\n\014userInstance\030\005 \001(\0132\030.AcFu"
  "nDanmu.UserInstance\022\021\n\terrorCode\030\006 \001(\005\022,"
  "\n\013settingInfo\030\007 \001(\0132\027.AcFunDanmu.Setting"
  "Info\0226\n\020requestBasicInfo\030\010 \001(\0132\034.AcFunDa"
  "nmu.RequestBasicInfo\022\016\n\006subBiz\030\t \001(\t\022.\n\014"
  "frontendInfo\030\n \001(\0132\030.AcFunDanmu.Frontend"
  "Info\022\013\n\003kpn\030\013 \001(\t\022\026\n\016anonymouseUser\030\014 \001("
  "\010\022\016\n\006laneId\030\r \001(\tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_UpstreamPayload_2eproto_deps[4] = {
  &::descriptor_table_FrontendInfo_2eproto,
  &::descriptor_table_RequestBasicInfo_2eproto,
  &::descriptor_table_SettingInfo_2eproto,
  &::descriptor_table_UserInstance_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_UpstreamPayload_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_UpstreamPayload_2eproto = {
  false, false, 505, descriptor_table_protodef_UpstreamPayload_2eproto, "UpstreamPayload.proto", 
  &descriptor_table_UpstreamPayload_2eproto_once, descriptor_table_UpstreamPayload_2eproto_deps, 4, 1,
  schemas, file_default_instances, TableStruct_UpstreamPayload_2eproto::offsets,
  file_level_metadata_UpstreamPayload_2eproto, file_level_enum_descriptors_UpstreamPayload_2eproto, file_level_service_descriptors_UpstreamPayload_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_UpstreamPayload_2eproto_getter() {
  return &descriptor_table_UpstreamPayload_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_UpstreamPayload_2eproto(&descriptor_table_UpstreamPayload_2eproto);
namespace AcFunDanmu {

// ===================================================================

class UpstreamPayload::_Internal {
 public:
  static const ::AcFunDanmu::UserInstance& userinstance(const UpstreamPayload* msg);
  static const ::AcFunDanmu::SettingInfo& settinginfo(const UpstreamPayload* msg);
  static const ::AcFunDanmu::RequestBasicInfo& requestbasicinfo(const UpstreamPayload* msg);
  static const ::AcFunDanmu::FrontendInfo& frontendinfo(const UpstreamPayload* msg);
};

const ::AcFunDanmu::UserInstance&
UpstreamPayload::_Internal::userinstance(const UpstreamPayload* msg) {
  return *msg->userinstance_;
}
const ::AcFunDanmu::SettingInfo&
UpstreamPayload::_Internal::settinginfo(const UpstreamPayload* msg) {
  return *msg->settinginfo_;
}
const ::AcFunDanmu::RequestBasicInfo&
UpstreamPayload::_Internal::requestbasicinfo(const UpstreamPayload* msg) {
  return *msg->requestbasicinfo_;
}
const ::AcFunDanmu::FrontendInfo&
UpstreamPayload::_Internal::frontendinfo(const UpstreamPayload* msg) {
  return *msg->frontendinfo_;
}
void UpstreamPayload::clear_userinstance() {
  if (GetArenaForAllocation() == nullptr && userinstance_ != nullptr) {
    delete userinstance_;
  }
  userinstance_ = nullptr;
}
void UpstreamPayload::clear_settinginfo() {
  if (GetArenaForAllocation() == nullptr && settinginfo_ != nullptr) {
    delete settinginfo_;
  }
  settinginfo_ = nullptr;
}
void UpstreamPayload::clear_requestbasicinfo() {
  if (GetArenaForAllocation() == nullptr && requestbasicinfo_ != nullptr) {
    delete requestbasicinfo_;
  }
  requestbasicinfo_ = nullptr;
}
void UpstreamPayload::clear_frontendinfo() {
  if (GetArenaForAllocation() == nullptr && frontendinfo_ != nullptr) {
    delete frontendinfo_;
  }
  frontendinfo_ = nullptr;
}
UpstreamPayload::UpstreamPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.UpstreamPayload)
}
UpstreamPayload::UpstreamPayload(const UpstreamPayload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_command().empty()) {
    command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_command(), 
      GetArenaForAllocation());
  }
  payloaddata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payloaddata().empty()) {
    payloaddata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payloaddata(), 
      GetArenaForAllocation());
  }
  subbiz_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_subbiz().empty()) {
    subbiz_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_subbiz(), 
      GetArenaForAllocation());
  }
  kpn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_kpn().empty()) {
    kpn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_kpn(), 
      GetArenaForAllocation());
  }
  laneid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_laneid().empty()) {
    laneid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_laneid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_userinstance()) {
    userinstance_ = new ::AcFunDanmu::UserInstance(*from.userinstance_);
  } else {
    userinstance_ = nullptr;
  }
  if (from._internal_has_settinginfo()) {
    settinginfo_ = new ::AcFunDanmu::SettingInfo(*from.settinginfo_);
  } else {
    settinginfo_ = nullptr;
  }
  if (from._internal_has_requestbasicinfo()) {
    requestbasicinfo_ = new ::AcFunDanmu::RequestBasicInfo(*from.requestbasicinfo_);
  } else {
    requestbasicinfo_ = nullptr;
  }
  if (from._internal_has_frontendinfo()) {
    frontendinfo_ = new ::AcFunDanmu::FrontendInfo(*from.frontendinfo_);
  } else {
    frontendinfo_ = nullptr;
  }
  ::memcpy(&seqid_, &from.seqid_,
    static_cast<size_t>(reinterpret_cast<char*>(&anonymouseuser_) -
    reinterpret_cast<char*>(&seqid_)) + sizeof(anonymouseuser_));
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.UpstreamPayload)
}

void UpstreamPayload::SharedCtor() {
command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
payloaddata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
subbiz_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
kpn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
laneid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&userinstance_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&anonymouseuser_) -
    reinterpret_cast<char*>(&userinstance_)) + sizeof(anonymouseuser_));
}

UpstreamPayload::~UpstreamPayload() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.UpstreamPayload)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpstreamPayload::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  command_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payloaddata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subbiz_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kpn_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  laneid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete userinstance_;
  if (this != internal_default_instance()) delete settinginfo_;
  if (this != internal_default_instance()) delete requestbasicinfo_;
  if (this != internal_default_instance()) delete frontendinfo_;
}

void UpstreamPayload::ArenaDtor(void* object) {
  UpstreamPayload* _this = reinterpret_cast< UpstreamPayload* >(object);
  (void)_this;
}
void UpstreamPayload::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpstreamPayload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpstreamPayload::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.UpstreamPayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  command_.ClearToEmpty();
  payloaddata_.ClearToEmpty();
  subbiz_.ClearToEmpty();
  kpn_.ClearToEmpty();
  laneid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && userinstance_ != nullptr) {
    delete userinstance_;
  }
  userinstance_ = nullptr;
  if (GetArenaForAllocation() == nullptr && settinginfo_ != nullptr) {
    delete settinginfo_;
  }
  settinginfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && requestbasicinfo_ != nullptr) {
    delete requestbasicinfo_;
  }
  requestbasicinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && frontendinfo_ != nullptr) {
    delete frontendinfo_;
  }
  frontendinfo_ = nullptr;
  ::memset(&seqid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&anonymouseuser_) -
      reinterpret_cast<char*>(&seqid_)) + sizeof(anonymouseuser_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpstreamPayload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_command();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AcFunDanmu.UpstreamPayload.command"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 seqId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          seqid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 retryCount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          retrycount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes payloadData = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_payloaddata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AcFunDanmu.UserInstance userInstance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_userinstance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 errorCode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          errorcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AcFunDanmu.SettingInfo settingInfo = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_settinginfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AcFunDanmu.RequestBasicInfo requestBasicInfo = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestbasicinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string subBiz = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_subbiz();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AcFunDanmu.UpstreamPayload.subBiz"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AcFunDanmu.FrontendInfo frontendInfo = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_frontendinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string kpn = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_kpn();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AcFunDanmu.UpstreamPayload.kpn"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool anonymouseUser = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          anonymouseuser_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string laneId = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_laneid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AcFunDanmu.UpstreamPayload.laneId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpstreamPayload::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.UpstreamPayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string command = 1;
  if (!this->command().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_command().data(), static_cast<int>(this->_internal_command().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.UpstreamPayload.command");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_command(), target);
  }

  // int64 seqId = 2;
  if (this->seqid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_seqid(), target);
  }

  // uint32 retryCount = 3;
  if (this->retrycount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_retrycount(), target);
  }

  // bytes payloadData = 4;
  if (!this->payloaddata().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_payloaddata(), target);
  }

  // .AcFunDanmu.UserInstance userInstance = 5;
  if (this->has_userinstance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::userinstance(this), target, stream);
  }

  // int32 errorCode = 6;
  if (this->errorcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_errorcode(), target);
  }

  // .AcFunDanmu.SettingInfo settingInfo = 7;
  if (this->has_settinginfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::settinginfo(this), target, stream);
  }

  // .AcFunDanmu.RequestBasicInfo requestBasicInfo = 8;
  if (this->has_requestbasicinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::requestbasicinfo(this), target, stream);
  }

  // string subBiz = 9;
  if (!this->subbiz().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subbiz().data(), static_cast<int>(this->_internal_subbiz().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.UpstreamPayload.subBiz");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_subbiz(), target);
  }

  // .AcFunDanmu.FrontendInfo frontendInfo = 10;
  if (this->has_frontendinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::frontendinfo(this), target, stream);
  }

  // string kpn = 11;
  if (!this->kpn().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_kpn().data(), static_cast<int>(this->_internal_kpn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.UpstreamPayload.kpn");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_kpn(), target);
  }

  // bool anonymouseUser = 12;
  if (this->anonymouseuser() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_anonymouseuser(), target);
  }

  // string laneId = 13;
  if (!this->laneid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_laneid().data(), static_cast<int>(this->_internal_laneid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.UpstreamPayload.laneId");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_laneid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.UpstreamPayload)
  return target;
}

size_t UpstreamPayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.UpstreamPayload)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string command = 1;
  if (!this->command().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_command());
  }

  // bytes payloadData = 4;
  if (!this->payloaddata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payloaddata());
  }

  // string subBiz = 9;
  if (!this->subbiz().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subbiz());
  }

  // string kpn = 11;
  if (!this->kpn().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_kpn());
  }

  // string laneId = 13;
  if (!this->laneid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_laneid());
  }

  // .AcFunDanmu.UserInstance userInstance = 5;
  if (this->has_userinstance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *userinstance_);
  }

  // .AcFunDanmu.SettingInfo settingInfo = 7;
  if (this->has_settinginfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *settinginfo_);
  }

  // .AcFunDanmu.RequestBasicInfo requestBasicInfo = 8;
  if (this->has_requestbasicinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestbasicinfo_);
  }

  // .AcFunDanmu.FrontendInfo frontendInfo = 10;
  if (this->has_frontendinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *frontendinfo_);
  }

  // int64 seqId = 2;
  if (this->seqid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_seqid());
  }

  // uint32 retryCount = 3;
  if (this->retrycount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retrycount());
  }

  // int32 errorCode = 6;
  if (this->errorcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_errorcode());
  }

  // bool anonymouseUser = 12;
  if (this->anonymouseuser() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpstreamPayload::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AcFunDanmu.UpstreamPayload)
  GOOGLE_DCHECK_NE(&from, this);
  const UpstreamPayload* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpstreamPayload>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AcFunDanmu.UpstreamPayload)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AcFunDanmu.UpstreamPayload)
    MergeFrom(*source);
  }
}

void UpstreamPayload::MergeFrom(const UpstreamPayload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.UpstreamPayload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.command().empty()) {
    _internal_set_command(from._internal_command());
  }
  if (!from.payloaddata().empty()) {
    _internal_set_payloaddata(from._internal_payloaddata());
  }
  if (!from.subbiz().empty()) {
    _internal_set_subbiz(from._internal_subbiz());
  }
  if (!from.kpn().empty()) {
    _internal_set_kpn(from._internal_kpn());
  }
  if (!from.laneid().empty()) {
    _internal_set_laneid(from._internal_laneid());
  }
  if (from.has_userinstance()) {
    _internal_mutable_userinstance()->::AcFunDanmu::UserInstance::MergeFrom(from._internal_userinstance());
  }
  if (from.has_settinginfo()) {
    _internal_mutable_settinginfo()->::AcFunDanmu::SettingInfo::MergeFrom(from._internal_settinginfo());
  }
  if (from.has_requestbasicinfo()) {
    _internal_mutable_requestbasicinfo()->::AcFunDanmu::RequestBasicInfo::MergeFrom(from._internal_requestbasicinfo());
  }
  if (from.has_frontendinfo()) {
    _internal_mutable_frontendinfo()->::AcFunDanmu::FrontendInfo::MergeFrom(from._internal_frontendinfo());
  }
  if (from.seqid() != 0) {
    _internal_set_seqid(from._internal_seqid());
  }
  if (from.retrycount() != 0) {
    _internal_set_retrycount(from._internal_retrycount());
  }
  if (from.errorcode() != 0) {
    _internal_set_errorcode(from._internal_errorcode());
  }
  if (from.anonymouseuser() != 0) {
    _internal_set_anonymouseuser(from._internal_anonymouseuser());
  }
}

void UpstreamPayload::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AcFunDanmu.UpstreamPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpstreamPayload::CopyFrom(const UpstreamPayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.UpstreamPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpstreamPayload::IsInitialized() const {
  return true;
}

void UpstreamPayload::InternalSwap(UpstreamPayload* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &command_, GetArenaForAllocation(),
      &other->command_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &payloaddata_, GetArenaForAllocation(),
      &other->payloaddata_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &subbiz_, GetArenaForAllocation(),
      &other->subbiz_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &kpn_, GetArenaForAllocation(),
      &other->kpn_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &laneid_, GetArenaForAllocation(),
      &other->laneid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpstreamPayload, anonymouseuser_)
      + sizeof(UpstreamPayload::anonymouseuser_)
      - PROTOBUF_FIELD_OFFSET(UpstreamPayload, userinstance_)>(
          reinterpret_cast<char*>(&userinstance_),
          reinterpret_cast<char*>(&other->userinstance_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpstreamPayload::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_UpstreamPayload_2eproto_getter, &descriptor_table_UpstreamPayload_2eproto_once,
      file_level_metadata_UpstreamPayload_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AcFunDanmu::UpstreamPayload* Arena::CreateMaybeMessage< ::AcFunDanmu::UpstreamPayload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::UpstreamPayload >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
