// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ZtLiveUserInfo.proto

#include "ZtLiveUserInfo.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace AcFunDanmu {
constexpr ZtLiveUserInfo::ZtLiveUserInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : avatar_()
  , nickname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , badge_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , useridentity_(nullptr)
  , userid_(int64_t{0}){}
struct ZtLiveUserInfoDefaultTypeInternal {
  constexpr ZtLiveUserInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ZtLiveUserInfoDefaultTypeInternal() {}
  union {
    ZtLiveUserInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ZtLiveUserInfoDefaultTypeInternal _ZtLiveUserInfo_default_instance_;
}  // namespace AcFunDanmu
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ZtLiveUserInfo_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ZtLiveUserInfo_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ZtLiveUserInfo_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ZtLiveUserInfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::ZtLiveUserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::ZtLiveUserInfo, userid_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::ZtLiveUserInfo, nickname_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::ZtLiveUserInfo, avatar_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::ZtLiveUserInfo, badge_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::ZtLiveUserInfo, useridentity_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::AcFunDanmu::ZtLiveUserInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AcFunDanmu::_ZtLiveUserInfo_default_instance_),
};

const char descriptor_table_protodef_ZtLiveUserInfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024ZtLiveUserInfo.proto\022\nAcFunDanmu\032\022Imag"
  "eCdnNode.proto\032\030ZtLiveUserIdentity.proto"
  "\"\241\001\n\016ZtLiveUserInfo\022\016\n\006userId\030\001 \001(\003\022\020\n\010n"
  "ickname\030\002 \001(\t\022(\n\006avatar\030\003 \003(\0132\030.AcFunDan"
  "mu.ImageCdnNode\022\r\n\005badge\030\004 \001(\t\0224\n\014userId"
  "entity\030\005 \001(\0132\036.AcFunDanmu.ZtLiveUserIden"
  "tityb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ZtLiveUserInfo_2eproto_deps[2] = {
  &::descriptor_table_ImageCdnNode_2eproto,
  &::descriptor_table_ZtLiveUserIdentity_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ZtLiveUserInfo_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ZtLiveUserInfo_2eproto = {
  false, false, 252, descriptor_table_protodef_ZtLiveUserInfo_2eproto, "ZtLiveUserInfo.proto", 
  &descriptor_table_ZtLiveUserInfo_2eproto_once, descriptor_table_ZtLiveUserInfo_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_ZtLiveUserInfo_2eproto::offsets,
  file_level_metadata_ZtLiveUserInfo_2eproto, file_level_enum_descriptors_ZtLiveUserInfo_2eproto, file_level_service_descriptors_ZtLiveUserInfo_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_ZtLiveUserInfo_2eproto_getter() {
  return &descriptor_table_ZtLiveUserInfo_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ZtLiveUserInfo_2eproto(&descriptor_table_ZtLiveUserInfo_2eproto);
namespace AcFunDanmu {

// ===================================================================

class ZtLiveUserInfo::_Internal {
 public:
  static const ::AcFunDanmu::ZtLiveUserIdentity& useridentity(const ZtLiveUserInfo* msg);
};

const ::AcFunDanmu::ZtLiveUserIdentity&
ZtLiveUserInfo::_Internal::useridentity(const ZtLiveUserInfo* msg) {
  return *msg->useridentity_;
}
void ZtLiveUserInfo::clear_avatar() {
  avatar_.Clear();
}
void ZtLiveUserInfo::clear_useridentity() {
  if (GetArenaForAllocation() == nullptr && useridentity_ != nullptr) {
    delete useridentity_;
  }
  useridentity_ = nullptr;
}
ZtLiveUserInfo::ZtLiveUserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  avatar_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.ZtLiveUserInfo)
}
ZtLiveUserInfo::ZtLiveUserInfo(const ZtLiveUserInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      avatar_(from.avatar_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nickname().empty()) {
    nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nickname(), 
      GetArenaForAllocation());
  }
  badge_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_badge().empty()) {
    badge_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_badge(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_useridentity()) {
    useridentity_ = new ::AcFunDanmu::ZtLiveUserIdentity(*from.useridentity_);
  } else {
    useridentity_ = nullptr;
  }
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.ZtLiveUserInfo)
}

void ZtLiveUserInfo::SharedCtor() {
nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
badge_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&useridentity_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&userid_) -
    reinterpret_cast<char*>(&useridentity_)) + sizeof(userid_));
}

ZtLiveUserInfo::~ZtLiveUserInfo() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.ZtLiveUserInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ZtLiveUserInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  nickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  badge_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete useridentity_;
}

void ZtLiveUserInfo::ArenaDtor(void* object) {
  ZtLiveUserInfo* _this = reinterpret_cast< ZtLiveUserInfo* >(object);
  (void)_this;
}
void ZtLiveUserInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ZtLiveUserInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ZtLiveUserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.ZtLiveUserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  avatar_.Clear();
  nickname_.ClearToEmpty();
  badge_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && useridentity_ != nullptr) {
    delete useridentity_;
  }
  useridentity_ = nullptr;
  userid_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ZtLiveUserInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 userId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nickname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_nickname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AcFunDanmu.ZtLiveUserInfo.nickname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .AcFunDanmu.ImageCdnNode avatar = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_avatar(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // string badge = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_badge();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AcFunDanmu.ZtLiveUserInfo.badge"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AcFunDanmu.ZtLiveUserIdentity userIdentity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_useridentity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ZtLiveUserInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.ZtLiveUserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 userId = 1;
  if (this->userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_userid(), target);
  }

  // string nickname = 2;
  if (!this->nickname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.ZtLiveUserInfo.nickname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nickname(), target);
  }

  // repeated .AcFunDanmu.ImageCdnNode avatar = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_avatar_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_avatar(i), target, stream);
  }

  // string badge = 4;
  if (!this->badge().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_badge().data(), static_cast<int>(this->_internal_badge().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.ZtLiveUserInfo.badge");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_badge(), target);
  }

  // .AcFunDanmu.ZtLiveUserIdentity userIdentity = 5;
  if (this->has_useridentity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::useridentity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.ZtLiveUserInfo)
  return target;
}

size_t ZtLiveUserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.ZtLiveUserInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .AcFunDanmu.ImageCdnNode avatar = 3;
  total_size += 1UL * this->_internal_avatar_size();
  for (const auto& msg : this->avatar_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string nickname = 2;
  if (!this->nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // string badge = 4;
  if (!this->badge().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_badge());
  }

  // .AcFunDanmu.ZtLiveUserIdentity userIdentity = 5;
  if (this->has_useridentity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *useridentity_);
  }

  // int64 userId = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_userid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ZtLiveUserInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AcFunDanmu.ZtLiveUserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ZtLiveUserInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ZtLiveUserInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AcFunDanmu.ZtLiveUserInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AcFunDanmu.ZtLiveUserInfo)
    MergeFrom(*source);
  }
}

void ZtLiveUserInfo::MergeFrom(const ZtLiveUserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.ZtLiveUserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  avatar_.MergeFrom(from.avatar_);
  if (!from.nickname().empty()) {
    _internal_set_nickname(from._internal_nickname());
  }
  if (!from.badge().empty()) {
    _internal_set_badge(from._internal_badge());
  }
  if (from.has_useridentity()) {
    _internal_mutable_useridentity()->::AcFunDanmu::ZtLiveUserIdentity::MergeFrom(from._internal_useridentity());
  }
  if (from.userid() != 0) {
    _internal_set_userid(from._internal_userid());
  }
}

void ZtLiveUserInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AcFunDanmu.ZtLiveUserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZtLiveUserInfo::CopyFrom(const ZtLiveUserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.ZtLiveUserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZtLiveUserInfo::IsInitialized() const {
  return true;
}

void ZtLiveUserInfo::InternalSwap(ZtLiveUserInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  avatar_.InternalSwap(&other->avatar_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nickname_, GetArenaForAllocation(),
      &other->nickname_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &badge_, GetArenaForAllocation(),
      &other->badge_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ZtLiveUserInfo, userid_)
      + sizeof(ZtLiveUserInfo::userid_)
      - PROTOBUF_FIELD_OFFSET(ZtLiveUserInfo, useridentity_)>(
          reinterpret_cast<char*>(&useridentity_),
          reinterpret_cast<char*>(&other->useridentity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ZtLiveUserInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ZtLiveUserInfo_2eproto_getter, &descriptor_table_ZtLiveUserInfo_2eproto_once,
      file_level_metadata_ZtLiveUserInfo_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AcFunDanmu::ZtLiveUserInfo* Arena::CreateMaybeMessage< ::AcFunDanmu::ZtLiveUserInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::ZtLiveUserInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
