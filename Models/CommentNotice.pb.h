// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommentNotice.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_CommentNotice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_CommentNotice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Button.pb.h"
#include "ClickEvent.pb.h"
#include "ImageCdnNode.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_CommentNotice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_CommentNotice_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_CommentNotice_2eproto;
namespace AcFunDanmu {
class CommentNotice;
struct CommentNoticeDefaultTypeInternal;
extern CommentNoticeDefaultTypeInternal _CommentNotice_default_instance_;
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::CommentNotice* Arena::CreateMaybeMessage<::AcFunDanmu::CommentNotice>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {

// ===================================================================

class CommentNotice final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.CommentNotice) */ {
 public:
  inline CommentNotice() : CommentNotice(nullptr) {}
  ~CommentNotice() override;
  explicit PROTOBUF_CONSTEXPR CommentNotice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommentNotice(const CommentNotice& from);
  CommentNotice(CommentNotice&& from) noexcept
    : CommentNotice() {
    *this = ::std::move(from);
  }

  inline CommentNotice& operator=(const CommentNotice& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommentNotice& operator=(CommentNotice&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommentNotice& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommentNotice* internal_default_instance() {
    return reinterpret_cast<const CommentNotice*>(
               &_CommentNotice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CommentNotice& a, CommentNotice& b) {
    a.Swap(&b);
  }
  inline void Swap(CommentNotice* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommentNotice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommentNotice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommentNotice>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommentNotice& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommentNotice& from) {
    CommentNotice::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommentNotice* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.CommentNotice";
  }
  protected:
  explicit CommentNotice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDFieldNumber = 4,
    kEFieldNumber = 5,
    kAFieldNumber = 1,
    kBFieldNumber = 2,
    kCFieldNumber = 3,
    kFFieldNumber = 6,
    kGFieldNumber = 7,
    kHFieldNumber = 8,
    kIFieldNumber = 9,
    kKFieldNumber = 11,
    kJFieldNumber = 10,
    kMFieldNumber = 13,
    kLFieldNumber = 12,
  };
  // repeated .AcFunDanmu.ImageCdnNode d = 4;
  int d_size() const;
  private:
  int _internal_d_size() const;
  public:
  void clear_d();
  ::AcFunDanmu::ImageCdnNode* mutable_d(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::ImageCdnNode >*
      mutable_d();
  private:
  const ::AcFunDanmu::ImageCdnNode& _internal_d(int index) const;
  ::AcFunDanmu::ImageCdnNode* _internal_add_d();
  public:
  const ::AcFunDanmu::ImageCdnNode& d(int index) const;
  ::AcFunDanmu::ImageCdnNode* add_d();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::ImageCdnNode >&
      d() const;

  // repeated .AcFunDanmu.ImageCdnNode e = 5;
  int e_size() const;
  private:
  int _internal_e_size() const;
  public:
  void clear_e();
  ::AcFunDanmu::ImageCdnNode* mutable_e(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::ImageCdnNode >*
      mutable_e();
  private:
  const ::AcFunDanmu::ImageCdnNode& _internal_e(int index) const;
  ::AcFunDanmu::ImageCdnNode* _internal_add_e();
  public:
  const ::AcFunDanmu::ImageCdnNode& e(int index) const;
  ::AcFunDanmu::ImageCdnNode* add_e();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::ImageCdnNode >&
      e() const;

  // string a = 1;
  void clear_a();
  const std::string& a() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_a(ArgT0&& arg0, ArgT... args);
  std::string* mutable_a();
  PROTOBUF_NODISCARD std::string* release_a();
  void set_allocated_a(std::string* a);
  private:
  const std::string& _internal_a() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_a(const std::string& value);
  std::string* _internal_mutable_a();
  public:

  // bytes b = 2;
  void clear_b();
  const std::string& b() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_b(ArgT0&& arg0, ArgT... args);
  std::string* mutable_b();
  PROTOBUF_NODISCARD std::string* release_b();
  void set_allocated_b(std::string* b);
  private:
  const std::string& _internal_b() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_b(const std::string& value);
  std::string* _internal_mutable_b();
  public:

  // string c = 3;
  void clear_c();
  const std::string& c() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_c(ArgT0&& arg0, ArgT... args);
  std::string* mutable_c();
  PROTOBUF_NODISCARD std::string* release_c();
  void set_allocated_c(std::string* c);
  private:
  const std::string& _internal_c() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_c(const std::string& value);
  std::string* _internal_mutable_c();
  public:

  // string f = 6;
  void clear_f();
  const std::string& f() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_f(ArgT0&& arg0, ArgT... args);
  std::string* mutable_f();
  PROTOBUF_NODISCARD std::string* release_f();
  void set_allocated_f(std::string* f);
  private:
  const std::string& _internal_f() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f(const std::string& value);
  std::string* _internal_mutable_f();
  public:

  // string g = 7;
  void clear_g();
  const std::string& g() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_g(ArgT0&& arg0, ArgT... args);
  std::string* mutable_g();
  PROTOBUF_NODISCARD std::string* release_g();
  void set_allocated_g(std::string* g);
  private:
  const std::string& _internal_g() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_g(const std::string& value);
  std::string* _internal_mutable_g();
  public:

  // .AcFunDanmu.Button h = 8;
  bool has_h() const;
  private:
  bool _internal_has_h() const;
  public:
  void clear_h();
  const ::AcFunDanmu::Button& h() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Button* release_h();
  ::AcFunDanmu::Button* mutable_h();
  void set_allocated_h(::AcFunDanmu::Button* h);
  private:
  const ::AcFunDanmu::Button& _internal_h() const;
  ::AcFunDanmu::Button* _internal_mutable_h();
  public:
  void unsafe_arena_set_allocated_h(
      ::AcFunDanmu::Button* h);
  ::AcFunDanmu::Button* unsafe_arena_release_h();

  // .AcFunDanmu.ClickEvent i = 9;
  bool has_i() const;
  private:
  bool _internal_has_i() const;
  public:
  void clear_i();
  const ::AcFunDanmu::ClickEvent& i() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::ClickEvent* release_i();
  ::AcFunDanmu::ClickEvent* mutable_i();
  void set_allocated_i(::AcFunDanmu::ClickEvent* i);
  private:
  const ::AcFunDanmu::ClickEvent& _internal_i() const;
  ::AcFunDanmu::ClickEvent* _internal_mutable_i();
  public:
  void unsafe_arena_set_allocated_i(
      ::AcFunDanmu::ClickEvent* i);
  ::AcFunDanmu::ClickEvent* unsafe_arena_release_i();

  // int64 k = 11;
  void clear_k();
  int64_t k() const;
  void set_k(int64_t value);
  private:
  int64_t _internal_k() const;
  void _internal_set_k(int64_t value);
  public:

  // int32 j = 10;
  void clear_j();
  int32_t j() const;
  void set_j(int32_t value);
  private:
  int32_t _internal_j() const;
  void _internal_set_j(int32_t value);
  public:

  // int32 m = 13;
  void clear_m();
  int32_t m() const;
  void set_m(int32_t value);
  private:
  int32_t _internal_m() const;
  void _internal_set_m(int32_t value);
  public:

  // int64 l = 12;
  void clear_l();
  int64_t l() const;
  void set_l(int64_t value);
  private:
  int64_t _internal_l() const;
  void _internal_set_l(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.CommentNotice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::ImageCdnNode > d_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::ImageCdnNode > e_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr a_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr b_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr c_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr g_;
    ::AcFunDanmu::Button* h_;
    ::AcFunDanmu::ClickEvent* i_;
    int64_t k_;
    int32_t j_;
    int32_t m_;
    int64_t l_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CommentNotice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CommentNotice

// string a = 1;
inline void CommentNotice::clear_a() {
  _impl_.a_.ClearToEmpty();
}
inline const std::string& CommentNotice::a() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommentNotice.a)
  return _internal_a();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommentNotice::set_a(ArgT0&& arg0, ArgT... args) {
 
 _impl_.a_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommentNotice.a)
}
inline std::string* CommentNotice::mutable_a() {
  std::string* _s = _internal_mutable_a();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.CommentNotice.a)
  return _s;
}
inline const std::string& CommentNotice::_internal_a() const {
  return _impl_.a_.Get();
}
inline void CommentNotice::_internal_set_a(const std::string& value) {
  
  _impl_.a_.Set(value, GetArenaForAllocation());
}
inline std::string* CommentNotice::_internal_mutable_a() {
  
  return _impl_.a_.Mutable(GetArenaForAllocation());
}
inline std::string* CommentNotice::release_a() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.CommentNotice.a)
  return _impl_.a_.Release();
}
inline void CommentNotice::set_allocated_a(std::string* a) {
  if (a != nullptr) {
    
  } else {
    
  }
  _impl_.a_.SetAllocated(a, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.a_.IsDefault()) {
    _impl_.a_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.CommentNotice.a)
}

// bytes b = 2;
inline void CommentNotice::clear_b() {
  _impl_.b_.ClearToEmpty();
}
inline const std::string& CommentNotice::b() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommentNotice.b)
  return _internal_b();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommentNotice::set_b(ArgT0&& arg0, ArgT... args) {
 
 _impl_.b_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommentNotice.b)
}
inline std::string* CommentNotice::mutable_b() {
  std::string* _s = _internal_mutable_b();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.CommentNotice.b)
  return _s;
}
inline const std::string& CommentNotice::_internal_b() const {
  return _impl_.b_.Get();
}
inline void CommentNotice::_internal_set_b(const std::string& value) {
  
  _impl_.b_.Set(value, GetArenaForAllocation());
}
inline std::string* CommentNotice::_internal_mutable_b() {
  
  return _impl_.b_.Mutable(GetArenaForAllocation());
}
inline std::string* CommentNotice::release_b() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.CommentNotice.b)
  return _impl_.b_.Release();
}
inline void CommentNotice::set_allocated_b(std::string* b) {
  if (b != nullptr) {
    
  } else {
    
  }
  _impl_.b_.SetAllocated(b, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.b_.IsDefault()) {
    _impl_.b_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.CommentNotice.b)
}

// string c = 3;
inline void CommentNotice::clear_c() {
  _impl_.c_.ClearToEmpty();
}
inline const std::string& CommentNotice::c() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommentNotice.c)
  return _internal_c();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommentNotice::set_c(ArgT0&& arg0, ArgT... args) {
 
 _impl_.c_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommentNotice.c)
}
inline std::string* CommentNotice::mutable_c() {
  std::string* _s = _internal_mutable_c();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.CommentNotice.c)
  return _s;
}
inline const std::string& CommentNotice::_internal_c() const {
  return _impl_.c_.Get();
}
inline void CommentNotice::_internal_set_c(const std::string& value) {
  
  _impl_.c_.Set(value, GetArenaForAllocation());
}
inline std::string* CommentNotice::_internal_mutable_c() {
  
  return _impl_.c_.Mutable(GetArenaForAllocation());
}
inline std::string* CommentNotice::release_c() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.CommentNotice.c)
  return _impl_.c_.Release();
}
inline void CommentNotice::set_allocated_c(std::string* c) {
  if (c != nullptr) {
    
  } else {
    
  }
  _impl_.c_.SetAllocated(c, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.c_.IsDefault()) {
    _impl_.c_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.CommentNotice.c)
}

// repeated .AcFunDanmu.ImageCdnNode d = 4;
inline int CommentNotice::_internal_d_size() const {
  return _impl_.d_.size();
}
inline int CommentNotice::d_size() const {
  return _internal_d_size();
}
inline ::AcFunDanmu::ImageCdnNode* CommentNotice::mutable_d(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.CommentNotice.d)
  return _impl_.d_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::ImageCdnNode >*
CommentNotice::mutable_d() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.CommentNotice.d)
  return &_impl_.d_;
}
inline const ::AcFunDanmu::ImageCdnNode& CommentNotice::_internal_d(int index) const {
  return _impl_.d_.Get(index);
}
inline const ::AcFunDanmu::ImageCdnNode& CommentNotice::d(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommentNotice.d)
  return _internal_d(index);
}
inline ::AcFunDanmu::ImageCdnNode* CommentNotice::_internal_add_d() {
  return _impl_.d_.Add();
}
inline ::AcFunDanmu::ImageCdnNode* CommentNotice::add_d() {
  ::AcFunDanmu::ImageCdnNode* _add = _internal_add_d();
  // @@protoc_insertion_point(field_add:AcFunDanmu.CommentNotice.d)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::ImageCdnNode >&
CommentNotice::d() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.CommentNotice.d)
  return _impl_.d_;
}

// repeated .AcFunDanmu.ImageCdnNode e = 5;
inline int CommentNotice::_internal_e_size() const {
  return _impl_.e_.size();
}
inline int CommentNotice::e_size() const {
  return _internal_e_size();
}
inline ::AcFunDanmu::ImageCdnNode* CommentNotice::mutable_e(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.CommentNotice.e)
  return _impl_.e_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::ImageCdnNode >*
CommentNotice::mutable_e() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.CommentNotice.e)
  return &_impl_.e_;
}
inline const ::AcFunDanmu::ImageCdnNode& CommentNotice::_internal_e(int index) const {
  return _impl_.e_.Get(index);
}
inline const ::AcFunDanmu::ImageCdnNode& CommentNotice::e(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommentNotice.e)
  return _internal_e(index);
}
inline ::AcFunDanmu::ImageCdnNode* CommentNotice::_internal_add_e() {
  return _impl_.e_.Add();
}
inline ::AcFunDanmu::ImageCdnNode* CommentNotice::add_e() {
  ::AcFunDanmu::ImageCdnNode* _add = _internal_add_e();
  // @@protoc_insertion_point(field_add:AcFunDanmu.CommentNotice.e)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::ImageCdnNode >&
CommentNotice::e() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.CommentNotice.e)
  return _impl_.e_;
}

// string f = 6;
inline void CommentNotice::clear_f() {
  _impl_.f_.ClearToEmpty();
}
inline const std::string& CommentNotice::f() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommentNotice.f)
  return _internal_f();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommentNotice::set_f(ArgT0&& arg0, ArgT... args) {
 
 _impl_.f_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommentNotice.f)
}
inline std::string* CommentNotice::mutable_f() {
  std::string* _s = _internal_mutable_f();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.CommentNotice.f)
  return _s;
}
inline const std::string& CommentNotice::_internal_f() const {
  return _impl_.f_.Get();
}
inline void CommentNotice::_internal_set_f(const std::string& value) {
  
  _impl_.f_.Set(value, GetArenaForAllocation());
}
inline std::string* CommentNotice::_internal_mutable_f() {
  
  return _impl_.f_.Mutable(GetArenaForAllocation());
}
inline std::string* CommentNotice::release_f() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.CommentNotice.f)
  return _impl_.f_.Release();
}
inline void CommentNotice::set_allocated_f(std::string* f) {
  if (f != nullptr) {
    
  } else {
    
  }
  _impl_.f_.SetAllocated(f, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.f_.IsDefault()) {
    _impl_.f_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.CommentNotice.f)
}

// string g = 7;
inline void CommentNotice::clear_g() {
  _impl_.g_.ClearToEmpty();
}
inline const std::string& CommentNotice::g() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommentNotice.g)
  return _internal_g();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommentNotice::set_g(ArgT0&& arg0, ArgT... args) {
 
 _impl_.g_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommentNotice.g)
}
inline std::string* CommentNotice::mutable_g() {
  std::string* _s = _internal_mutable_g();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.CommentNotice.g)
  return _s;
}
inline const std::string& CommentNotice::_internal_g() const {
  return _impl_.g_.Get();
}
inline void CommentNotice::_internal_set_g(const std::string& value) {
  
  _impl_.g_.Set(value, GetArenaForAllocation());
}
inline std::string* CommentNotice::_internal_mutable_g() {
  
  return _impl_.g_.Mutable(GetArenaForAllocation());
}
inline std::string* CommentNotice::release_g() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.CommentNotice.g)
  return _impl_.g_.Release();
}
inline void CommentNotice::set_allocated_g(std::string* g) {
  if (g != nullptr) {
    
  } else {
    
  }
  _impl_.g_.SetAllocated(g, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.g_.IsDefault()) {
    _impl_.g_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.CommentNotice.g)
}

// .AcFunDanmu.Button h = 8;
inline bool CommentNotice::_internal_has_h() const {
  return this != internal_default_instance() && _impl_.h_ != nullptr;
}
inline bool CommentNotice::has_h() const {
  return _internal_has_h();
}
inline const ::AcFunDanmu::Button& CommentNotice::_internal_h() const {
  const ::AcFunDanmu::Button* p = _impl_.h_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Button&>(
      ::AcFunDanmu::_Button_default_instance_);
}
inline const ::AcFunDanmu::Button& CommentNotice::h() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommentNotice.h)
  return _internal_h();
}
inline void CommentNotice::unsafe_arena_set_allocated_h(
    ::AcFunDanmu::Button* h) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.h_);
  }
  _impl_.h_ = h;
  if (h) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.CommentNotice.h)
}
inline ::AcFunDanmu::Button* CommentNotice::release_h() {
  
  ::AcFunDanmu::Button* temp = _impl_.h_;
  _impl_.h_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AcFunDanmu::Button* CommentNotice::unsafe_arena_release_h() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.CommentNotice.h)
  
  ::AcFunDanmu::Button* temp = _impl_.h_;
  _impl_.h_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Button* CommentNotice::_internal_mutable_h() {
  
  if (_impl_.h_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Button>(GetArenaForAllocation());
    _impl_.h_ = p;
  }
  return _impl_.h_;
}
inline ::AcFunDanmu::Button* CommentNotice::mutable_h() {
  ::AcFunDanmu::Button* _msg = _internal_mutable_h();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.CommentNotice.h)
  return _msg;
}
inline void CommentNotice::set_allocated_h(::AcFunDanmu::Button* h) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.h_);
  }
  if (h) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(h));
    if (message_arena != submessage_arena) {
      h = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, h, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.h_ = h;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.CommentNotice.h)
}

// .AcFunDanmu.ClickEvent i = 9;
inline bool CommentNotice::_internal_has_i() const {
  return this != internal_default_instance() && _impl_.i_ != nullptr;
}
inline bool CommentNotice::has_i() const {
  return _internal_has_i();
}
inline const ::AcFunDanmu::ClickEvent& CommentNotice::_internal_i() const {
  const ::AcFunDanmu::ClickEvent* p = _impl_.i_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::ClickEvent&>(
      ::AcFunDanmu::_ClickEvent_default_instance_);
}
inline const ::AcFunDanmu::ClickEvent& CommentNotice::i() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommentNotice.i)
  return _internal_i();
}
inline void CommentNotice::unsafe_arena_set_allocated_i(
    ::AcFunDanmu::ClickEvent* i) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.i_);
  }
  _impl_.i_ = i;
  if (i) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.CommentNotice.i)
}
inline ::AcFunDanmu::ClickEvent* CommentNotice::release_i() {
  
  ::AcFunDanmu::ClickEvent* temp = _impl_.i_;
  _impl_.i_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AcFunDanmu::ClickEvent* CommentNotice::unsafe_arena_release_i() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.CommentNotice.i)
  
  ::AcFunDanmu::ClickEvent* temp = _impl_.i_;
  _impl_.i_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::ClickEvent* CommentNotice::_internal_mutable_i() {
  
  if (_impl_.i_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::ClickEvent>(GetArenaForAllocation());
    _impl_.i_ = p;
  }
  return _impl_.i_;
}
inline ::AcFunDanmu::ClickEvent* CommentNotice::mutable_i() {
  ::AcFunDanmu::ClickEvent* _msg = _internal_mutable_i();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.CommentNotice.i)
  return _msg;
}
inline void CommentNotice::set_allocated_i(::AcFunDanmu::ClickEvent* i) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.i_);
  }
  if (i) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(i));
    if (message_arena != submessage_arena) {
      i = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, i, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.i_ = i;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.CommentNotice.i)
}

// int32 j = 10;
inline void CommentNotice::clear_j() {
  _impl_.j_ = 0;
}
inline int32_t CommentNotice::_internal_j() const {
  return _impl_.j_;
}
inline int32_t CommentNotice::j() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommentNotice.j)
  return _internal_j();
}
inline void CommentNotice::_internal_set_j(int32_t value) {
  
  _impl_.j_ = value;
}
inline void CommentNotice::set_j(int32_t value) {
  _internal_set_j(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommentNotice.j)
}

// int64 k = 11;
inline void CommentNotice::clear_k() {
  _impl_.k_ = int64_t{0};
}
inline int64_t CommentNotice::_internal_k() const {
  return _impl_.k_;
}
inline int64_t CommentNotice::k() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommentNotice.k)
  return _internal_k();
}
inline void CommentNotice::_internal_set_k(int64_t value) {
  
  _impl_.k_ = value;
}
inline void CommentNotice::set_k(int64_t value) {
  _internal_set_k(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommentNotice.k)
}

// int64 l = 12;
inline void CommentNotice::clear_l() {
  _impl_.l_ = int64_t{0};
}
inline int64_t CommentNotice::_internal_l() const {
  return _impl_.l_;
}
inline int64_t CommentNotice::l() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommentNotice.l)
  return _internal_l();
}
inline void CommentNotice::_internal_set_l(int64_t value) {
  
  _impl_.l_ = value;
}
inline void CommentNotice::set_l(int64_t value) {
  _internal_set_l(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommentNotice.l)
}

// int32 m = 13;
inline void CommentNotice::clear_m() {
  _impl_.m_ = 0;
}
inline int32_t CommentNotice::_internal_m() const {
  return _impl_.m_;
}
inline int32_t CommentNotice::m() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommentNotice.m)
  return _internal_m();
}
inline void CommentNotice::_internal_set_m(int32_t value) {
  
  _impl_.m_ = value;
}
inline void CommentNotice::set_m(int32_t value) {
  _internal_set_m(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommentNotice.m)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace AcFunDanmu

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_CommentNotice_2eproto
