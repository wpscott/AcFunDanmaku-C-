// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommonStateSignalPKReady.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_CommonStateSignalPKReady_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_CommonStateSignalPKReady_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "PkPlayerInfo.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_CommonStateSignalPKReady_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_CommonStateSignalPKReady_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_CommonStateSignalPKReady_2eproto;
namespace AcFunDanmu {
class CommonStateSignalPKReady;
struct CommonStateSignalPKReadyDefaultTypeInternal;
extern CommonStateSignalPKReadyDefaultTypeInternal _CommonStateSignalPKReady_default_instance_;
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::CommonStateSignalPKReady* Arena::CreateMaybeMessage<::AcFunDanmu::CommonStateSignalPKReady>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {

// ===================================================================

class CommonStateSignalPKReady final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.CommonStateSignalPKReady) */ {
 public:
  inline CommonStateSignalPKReady() : CommonStateSignalPKReady(nullptr) {}
  ~CommonStateSignalPKReady() override;
  explicit constexpr CommonStateSignalPKReady(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommonStateSignalPKReady(const CommonStateSignalPKReady& from);
  CommonStateSignalPKReady(CommonStateSignalPKReady&& from) noexcept
    : CommonStateSignalPKReady() {
    *this = ::std::move(from);
  }

  inline CommonStateSignalPKReady& operator=(const CommonStateSignalPKReady& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonStateSignalPKReady& operator=(CommonStateSignalPKReady&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommonStateSignalPKReady& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommonStateSignalPKReady* internal_default_instance() {
    return reinterpret_cast<const CommonStateSignalPKReady*>(
               &_CommonStateSignalPKReady_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CommonStateSignalPKReady& a, CommonStateSignalPKReady& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonStateSignalPKReady* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonStateSignalPKReady* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommonStateSignalPKReady* New() const final {
    return new CommonStateSignalPKReady();
  }

  CommonStateSignalPKReady* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommonStateSignalPKReady>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommonStateSignalPKReady& from);
  void MergeFrom(const CommonStateSignalPKReady& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonStateSignalPKReady* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.CommonStateSignalPKReady";
  }
  protected:
  explicit CommonStateSignalPKReady(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBFieldNumber = 2,
    kAFieldNumber = 1,
  };
  // repeated .AcFunDanmu.PkPlayerInfo b = 2;
  int b_size() const;
  private:
  int _internal_b_size() const;
  public:
  void clear_b();
  ::AcFunDanmu::PkPlayerInfo* mutable_b(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::PkPlayerInfo >*
      mutable_b();
  private:
  const ::AcFunDanmu::PkPlayerInfo& _internal_b(int index) const;
  ::AcFunDanmu::PkPlayerInfo* _internal_add_b();
  public:
  const ::AcFunDanmu::PkPlayerInfo& b(int index) const;
  ::AcFunDanmu::PkPlayerInfo* add_b();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::PkPlayerInfo >&
      b() const;

  // string a = 1;
  void clear_a();
  const std::string& a() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_a(ArgT0&& arg0, ArgT... args);
  std::string* mutable_a();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_a();
  void set_allocated_a(std::string* a);
  private:
  const std::string& _internal_a() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_a(const std::string& value);
  std::string* _internal_mutable_a();
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.CommonStateSignalPKReady)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::PkPlayerInfo > b_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr a_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CommonStateSignalPKReady_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CommonStateSignalPKReady

// string a = 1;
inline void CommonStateSignalPKReady::clear_a() {
  a_.ClearToEmpty();
}
inline const std::string& CommonStateSignalPKReady::a() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonStateSignalPKReady.a)
  return _internal_a();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommonStateSignalPKReady::set_a(ArgT0&& arg0, ArgT... args) {
 
 a_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommonStateSignalPKReady.a)
}
inline std::string* CommonStateSignalPKReady::mutable_a() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.CommonStateSignalPKReady.a)
  return _internal_mutable_a();
}
inline const std::string& CommonStateSignalPKReady::_internal_a() const {
  return a_.Get();
}
inline void CommonStateSignalPKReady::_internal_set_a(const std::string& value) {
  
  a_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CommonStateSignalPKReady::_internal_mutable_a() {
  
  return a_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CommonStateSignalPKReady::release_a() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.CommonStateSignalPKReady.a)
  return a_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CommonStateSignalPKReady::set_allocated_a(std::string* a) {
  if (a != nullptr) {
    
  } else {
    
  }
  a_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), a,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.CommonStateSignalPKReady.a)
}

// repeated .AcFunDanmu.PkPlayerInfo b = 2;
inline int CommonStateSignalPKReady::_internal_b_size() const {
  return b_.size();
}
inline int CommonStateSignalPKReady::b_size() const {
  return _internal_b_size();
}
inline ::AcFunDanmu::PkPlayerInfo* CommonStateSignalPKReady::mutable_b(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.CommonStateSignalPKReady.b)
  return b_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::PkPlayerInfo >*
CommonStateSignalPKReady::mutable_b() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.CommonStateSignalPKReady.b)
  return &b_;
}
inline const ::AcFunDanmu::PkPlayerInfo& CommonStateSignalPKReady::_internal_b(int index) const {
  return b_.Get(index);
}
inline const ::AcFunDanmu::PkPlayerInfo& CommonStateSignalPKReady::b(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonStateSignalPKReady.b)
  return _internal_b(index);
}
inline ::AcFunDanmu::PkPlayerInfo* CommonStateSignalPKReady::_internal_add_b() {
  return b_.Add();
}
inline ::AcFunDanmu::PkPlayerInfo* CommonStateSignalPKReady::add_b() {
  // @@protoc_insertion_point(field_add:AcFunDanmu.CommonStateSignalPKReady.b)
  return _internal_add_b();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::PkPlayerInfo >&
CommonStateSignalPKReady::b() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.CommonStateSignalPKReady.b)
  return b_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace AcFunDanmu

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_CommonStateSignalPKReady_2eproto
