// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PkPlayerStatistic.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_PkPlayerStatistic_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_PkPlayerStatistic_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ZtLiveUserInfo.pb.h"
#include "PkPlayerRoundStatistic.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_PkPlayerStatistic_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_PkPlayerStatistic_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_PkPlayerStatistic_2eproto;
namespace AcFunDanmu {
class PkPlayerStatistic;
struct PkPlayerStatisticDefaultTypeInternal;
extern PkPlayerStatisticDefaultTypeInternal _PkPlayerStatistic_default_instance_;
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::PkPlayerStatistic* Arena::CreateMaybeMessage<::AcFunDanmu::PkPlayerStatistic>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {

// ===================================================================

class PkPlayerStatistic final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.PkPlayerStatistic) */ {
 public:
  inline PkPlayerStatistic() : PkPlayerStatistic(nullptr) {}
  ~PkPlayerStatistic() override;
  explicit constexpr PkPlayerStatistic(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PkPlayerStatistic(const PkPlayerStatistic& from);
  PkPlayerStatistic(PkPlayerStatistic&& from) noexcept
    : PkPlayerStatistic() {
    *this = ::std::move(from);
  }

  inline PkPlayerStatistic& operator=(const PkPlayerStatistic& from) {
    CopyFrom(from);
    return *this;
  }
  inline PkPlayerStatistic& operator=(PkPlayerStatistic&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PkPlayerStatistic& default_instance() {
    return *internal_default_instance();
  }
  static inline const PkPlayerStatistic* internal_default_instance() {
    return reinterpret_cast<const PkPlayerStatistic*>(
               &_PkPlayerStatistic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PkPlayerStatistic& a, PkPlayerStatistic& b) {
    a.Swap(&b);
  }
  inline void Swap(PkPlayerStatistic* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PkPlayerStatistic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PkPlayerStatistic* New() const final {
    return new PkPlayerStatistic();
  }

  PkPlayerStatistic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PkPlayerStatistic>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PkPlayerStatistic& from);
  void MergeFrom(const PkPlayerStatistic& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PkPlayerStatistic* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.PkPlayerStatistic";
  }
  protected:
  explicit PkPlayerStatistic(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDFieldNumber = 4,
    kBFieldNumber = 2,
    kAFieldNumber = 1,
    kCFieldNumber = 3,
    kEFieldNumber = 5,
  };
  // repeated .AcFunDanmu.PkPlayerRoundStatistic d = 4;
  int d_size() const;
  private:
  int _internal_d_size() const;
  public:
  void clear_d();
  ::AcFunDanmu::PkPlayerRoundStatistic* mutable_d(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::PkPlayerRoundStatistic >*
      mutable_d();
  private:
  const ::AcFunDanmu::PkPlayerRoundStatistic& _internal_d(int index) const;
  ::AcFunDanmu::PkPlayerRoundStatistic* _internal_add_d();
  public:
  const ::AcFunDanmu::PkPlayerRoundStatistic& d(int index) const;
  ::AcFunDanmu::PkPlayerRoundStatistic* add_d();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::PkPlayerRoundStatistic >&
      d() const;

  // string b = 2;
  void clear_b();
  const std::string& b() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_b(ArgT0&& arg0, ArgT... args);
  std::string* mutable_b();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_b();
  void set_allocated_b(std::string* b);
  private:
  const std::string& _internal_b() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_b(const std::string& value);
  std::string* _internal_mutable_b();
  public:

  // .AcFunDanmu.ZtLiveUserInfo a = 1;
  bool has_a() const;
  private:
  bool _internal_has_a() const;
  public:
  void clear_a();
  const ::AcFunDanmu::ZtLiveUserInfo& a() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::AcFunDanmu::ZtLiveUserInfo* release_a();
  ::AcFunDanmu::ZtLiveUserInfo* mutable_a();
  void set_allocated_a(::AcFunDanmu::ZtLiveUserInfo* a);
  private:
  const ::AcFunDanmu::ZtLiveUserInfo& _internal_a() const;
  ::AcFunDanmu::ZtLiveUserInfo* _internal_mutable_a();
  public:
  void unsafe_arena_set_allocated_a(
      ::AcFunDanmu::ZtLiveUserInfo* a);
  ::AcFunDanmu::ZtLiveUserInfo* unsafe_arena_release_a();

  // int64 c = 3;
  void clear_c();
  ::PROTOBUF_NAMESPACE_ID::int64 c() const;
  void set_c(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_c() const;
  void _internal_set_c(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 e = 5;
  void clear_e();
  ::PROTOBUF_NAMESPACE_ID::int32 e() const;
  void set_e(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_e() const;
  void _internal_set_e(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.PkPlayerStatistic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::PkPlayerRoundStatistic > d_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr b_;
  ::AcFunDanmu::ZtLiveUserInfo* a_;
  ::PROTOBUF_NAMESPACE_ID::int64 c_;
  ::PROTOBUF_NAMESPACE_ID::int32 e_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PkPlayerStatistic_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PkPlayerStatistic

// .AcFunDanmu.ZtLiveUserInfo a = 1;
inline bool PkPlayerStatistic::_internal_has_a() const {
  return this != internal_default_instance() && a_ != nullptr;
}
inline bool PkPlayerStatistic::has_a() const {
  return _internal_has_a();
}
inline const ::AcFunDanmu::ZtLiveUserInfo& PkPlayerStatistic::_internal_a() const {
  const ::AcFunDanmu::ZtLiveUserInfo* p = a_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::ZtLiveUserInfo&>(
      ::AcFunDanmu::_ZtLiveUserInfo_default_instance_);
}
inline const ::AcFunDanmu::ZtLiveUserInfo& PkPlayerStatistic::a() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.PkPlayerStatistic.a)
  return _internal_a();
}
inline void PkPlayerStatistic::unsafe_arena_set_allocated_a(
    ::AcFunDanmu::ZtLiveUserInfo* a) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(a_);
  }
  a_ = a;
  if (a) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.PkPlayerStatistic.a)
}
inline ::AcFunDanmu::ZtLiveUserInfo* PkPlayerStatistic::release_a() {
  
  ::AcFunDanmu::ZtLiveUserInfo* temp = a_;
  a_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::ZtLiveUserInfo* PkPlayerStatistic::unsafe_arena_release_a() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.PkPlayerStatistic.a)
  
  ::AcFunDanmu::ZtLiveUserInfo* temp = a_;
  a_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::ZtLiveUserInfo* PkPlayerStatistic::_internal_mutable_a() {
  
  if (a_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::ZtLiveUserInfo>(GetArenaForAllocation());
    a_ = p;
  }
  return a_;
}
inline ::AcFunDanmu::ZtLiveUserInfo* PkPlayerStatistic::mutable_a() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.PkPlayerStatistic.a)
  return _internal_mutable_a();
}
inline void PkPlayerStatistic::set_allocated_a(::AcFunDanmu::ZtLiveUserInfo* a) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(a_);
  }
  if (a) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(a));
    if (message_arena != submessage_arena) {
      a = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, a, submessage_arena);
    }
    
  } else {
    
  }
  a_ = a;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.PkPlayerStatistic.a)
}

// string b = 2;
inline void PkPlayerStatistic::clear_b() {
  b_.ClearToEmpty();
}
inline const std::string& PkPlayerStatistic::b() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.PkPlayerStatistic.b)
  return _internal_b();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PkPlayerStatistic::set_b(ArgT0&& arg0, ArgT... args) {
 
 b_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.PkPlayerStatistic.b)
}
inline std::string* PkPlayerStatistic::mutable_b() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.PkPlayerStatistic.b)
  return _internal_mutable_b();
}
inline const std::string& PkPlayerStatistic::_internal_b() const {
  return b_.Get();
}
inline void PkPlayerStatistic::_internal_set_b(const std::string& value) {
  
  b_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PkPlayerStatistic::_internal_mutable_b() {
  
  return b_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PkPlayerStatistic::release_b() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.PkPlayerStatistic.b)
  return b_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PkPlayerStatistic::set_allocated_b(std::string* b) {
  if (b != nullptr) {
    
  } else {
    
  }
  b_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), b,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.PkPlayerStatistic.b)
}

// int64 c = 3;
inline void PkPlayerStatistic::clear_c() {
  c_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PkPlayerStatistic::_internal_c() const {
  return c_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PkPlayerStatistic::c() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.PkPlayerStatistic.c)
  return _internal_c();
}
inline void PkPlayerStatistic::_internal_set_c(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  c_ = value;
}
inline void PkPlayerStatistic::set_c(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_c(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.PkPlayerStatistic.c)
}

// repeated .AcFunDanmu.PkPlayerRoundStatistic d = 4;
inline int PkPlayerStatistic::_internal_d_size() const {
  return d_.size();
}
inline int PkPlayerStatistic::d_size() const {
  return _internal_d_size();
}
inline ::AcFunDanmu::PkPlayerRoundStatistic* PkPlayerStatistic::mutable_d(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.PkPlayerStatistic.d)
  return d_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::PkPlayerRoundStatistic >*
PkPlayerStatistic::mutable_d() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.PkPlayerStatistic.d)
  return &d_;
}
inline const ::AcFunDanmu::PkPlayerRoundStatistic& PkPlayerStatistic::_internal_d(int index) const {
  return d_.Get(index);
}
inline const ::AcFunDanmu::PkPlayerRoundStatistic& PkPlayerStatistic::d(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.PkPlayerStatistic.d)
  return _internal_d(index);
}
inline ::AcFunDanmu::PkPlayerRoundStatistic* PkPlayerStatistic::_internal_add_d() {
  return d_.Add();
}
inline ::AcFunDanmu::PkPlayerRoundStatistic* PkPlayerStatistic::add_d() {
  // @@protoc_insertion_point(field_add:AcFunDanmu.PkPlayerStatistic.d)
  return _internal_add_d();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::PkPlayerRoundStatistic >&
PkPlayerStatistic::d() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.PkPlayerStatistic.d)
  return d_;
}

// int32 e = 5;
inline void PkPlayerStatistic::clear_e() {
  e_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PkPlayerStatistic::_internal_e() const {
  return e_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PkPlayerStatistic::e() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.PkPlayerStatistic.e)
  return _internal_e();
}
inline void PkPlayerStatistic::_internal_set_e(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  e_ = value;
}
inline void PkPlayerStatistic::set_e(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_e(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.PkPlayerStatistic.e)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace AcFunDanmu

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_PkPlayerStatistic_2eproto
