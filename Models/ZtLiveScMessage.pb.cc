// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ZtLiveScMessage.proto

#include "ZtLiveScMessage.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace AcFunDanmu {
PROTOBUF_CONSTEXPR ZtLiveScMessage::ZtLiveScMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.messagetype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.payload_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.liveid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ticket_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.servertimestampms_)*/int64_t{0}
  , /*decltype(_impl_.compressiontype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ZtLiveScMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ZtLiveScMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ZtLiveScMessageDefaultTypeInternal() {}
  union {
    ZtLiveScMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ZtLiveScMessageDefaultTypeInternal _ZtLiveScMessage_default_instance_;
}  // namespace AcFunDanmu
static ::_pb::Metadata file_level_metadata_ZtLiveScMessage_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_ZtLiveScMessage_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ZtLiveScMessage_2eproto = nullptr;

const uint32_t TableStruct_ZtLiveScMessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::ZtLiveScMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::ZtLiveScMessage, _impl_.messagetype_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::ZtLiveScMessage, _impl_.compressiontype_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::ZtLiveScMessage, _impl_.payload_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::ZtLiveScMessage, _impl_.liveid_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::ZtLiveScMessage, _impl_.ticket_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::ZtLiveScMessage, _impl_.servertimestampms_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::AcFunDanmu::ZtLiveScMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::AcFunDanmu::_ZtLiveScMessage_default_instance_._instance,
};

const char descriptor_table_protodef_ZtLiveScMessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025ZtLiveScMessage.proto\022\nAcFunDanmu\"\354\001\n\017"
  "ZtLiveScMessage\022\023\n\013messageType\030\001 \001(\t\022D\n\017"
  "compressionType\030\002 \001(\0162+.AcFunDanmu.ZtLiv"
  "eScMessage.CompressionType\022\017\n\007payload\030\003 "
  "\001(\014\022\016\n\006liveId\030\004 \001(\t\022\016\n\006ticket\030\005 \001(\t\022\031\n\021s"
  "erverTimestampMs\030\006 \001(\003\"2\n\017CompressionTyp"
  "e\022\013\n\007UNKNOWN\020\000\022\010\n\004NONE\020\001\022\010\n\004GZIP\020\002b\006prot"
  "o3"
  ;
static ::_pbi::once_flag descriptor_table_ZtLiveScMessage_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ZtLiveScMessage_2eproto = {
    false, false, 282, descriptor_table_protodef_ZtLiveScMessage_2eproto,
    "ZtLiveScMessage.proto",
    &descriptor_table_ZtLiveScMessage_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_ZtLiveScMessage_2eproto::offsets,
    file_level_metadata_ZtLiveScMessage_2eproto, file_level_enum_descriptors_ZtLiveScMessage_2eproto,
    file_level_service_descriptors_ZtLiveScMessage_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ZtLiveScMessage_2eproto_getter() {
  return &descriptor_table_ZtLiveScMessage_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ZtLiveScMessage_2eproto(&descriptor_table_ZtLiveScMessage_2eproto);
namespace AcFunDanmu {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ZtLiveScMessage_CompressionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ZtLiveScMessage_2eproto);
  return file_level_enum_descriptors_ZtLiveScMessage_2eproto[0];
}
bool ZtLiveScMessage_CompressionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ZtLiveScMessage_CompressionType ZtLiveScMessage::UNKNOWN;
constexpr ZtLiveScMessage_CompressionType ZtLiveScMessage::NONE;
constexpr ZtLiveScMessage_CompressionType ZtLiveScMessage::GZIP;
constexpr ZtLiveScMessage_CompressionType ZtLiveScMessage::CompressionType_MIN;
constexpr ZtLiveScMessage_CompressionType ZtLiveScMessage::CompressionType_MAX;
constexpr int ZtLiveScMessage::CompressionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ZtLiveScMessage::_Internal {
 public:
};

ZtLiveScMessage::ZtLiveScMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.ZtLiveScMessage)
}
ZtLiveScMessage::ZtLiveScMessage(const ZtLiveScMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ZtLiveScMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.messagetype_){}
    , decltype(_impl_.payload_){}
    , decltype(_impl_.liveid_){}
    , decltype(_impl_.ticket_){}
    , decltype(_impl_.servertimestampms_){}
    , decltype(_impl_.compressiontype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.messagetype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.messagetype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_messagetype().empty()) {
    _this->_impl_.messagetype_.Set(from._internal_messagetype(), 
      _this->GetArenaForAllocation());
  }
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload().empty()) {
    _this->_impl_.payload_.Set(from._internal_payload(), 
      _this->GetArenaForAllocation());
  }
  _impl_.liveid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.liveid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_liveid().empty()) {
    _this->_impl_.liveid_.Set(from._internal_liveid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ticket_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ticket_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ticket().empty()) {
    _this->_impl_.ticket_.Set(from._internal_ticket(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.servertimestampms_, &from._impl_.servertimestampms_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.compressiontype_) -
    reinterpret_cast<char*>(&_impl_.servertimestampms_)) + sizeof(_impl_.compressiontype_));
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.ZtLiveScMessage)
}

inline void ZtLiveScMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.messagetype_){}
    , decltype(_impl_.payload_){}
    , decltype(_impl_.liveid_){}
    , decltype(_impl_.ticket_){}
    , decltype(_impl_.servertimestampms_){int64_t{0}}
    , decltype(_impl_.compressiontype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.messagetype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.messagetype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.liveid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.liveid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ticket_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ticket_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ZtLiveScMessage::~ZtLiveScMessage() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.ZtLiveScMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ZtLiveScMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.messagetype_.Destroy();
  _impl_.payload_.Destroy();
  _impl_.liveid_.Destroy();
  _impl_.ticket_.Destroy();
}

void ZtLiveScMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ZtLiveScMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.ZtLiveScMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.messagetype_.ClearToEmpty();
  _impl_.payload_.ClearToEmpty();
  _impl_.liveid_.ClearToEmpty();
  _impl_.ticket_.ClearToEmpty();
  ::memset(&_impl_.servertimestampms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.compressiontype_) -
      reinterpret_cast<char*>(&_impl_.servertimestampms_)) + sizeof(_impl_.compressiontype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ZtLiveScMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string messageType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_messagetype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.ZtLiveScMessage.messageType"));
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.ZtLiveScMessage.CompressionType compressionType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_compressiontype(static_cast<::AcFunDanmu::ZtLiveScMessage_CompressionType>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes payload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string liveId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_liveid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.ZtLiveScMessage.liveId"));
        } else
          goto handle_unusual;
        continue;
      // string ticket = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_ticket();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.ZtLiveScMessage.ticket"));
        } else
          goto handle_unusual;
        continue;
      // int64 serverTimestampMs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.servertimestampms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ZtLiveScMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.ZtLiveScMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string messageType = 1;
  if (!this->_internal_messagetype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_messagetype().data(), static_cast<int>(this->_internal_messagetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.ZtLiveScMessage.messageType");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_messagetype(), target);
  }

  // .AcFunDanmu.ZtLiveScMessage.CompressionType compressionType = 2;
  if (this->_internal_compressiontype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_compressiontype(), target);
  }

  // bytes payload = 3;
  if (!this->_internal_payload().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_payload(), target);
  }

  // string liveId = 4;
  if (!this->_internal_liveid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_liveid().data(), static_cast<int>(this->_internal_liveid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.ZtLiveScMessage.liveId");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_liveid(), target);
  }

  // string ticket = 5;
  if (!this->_internal_ticket().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ticket().data(), static_cast<int>(this->_internal_ticket().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.ZtLiveScMessage.ticket");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_ticket(), target);
  }

  // int64 serverTimestampMs = 6;
  if (this->_internal_servertimestampms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_servertimestampms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.ZtLiveScMessage)
  return target;
}

size_t ZtLiveScMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.ZtLiveScMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string messageType = 1;
  if (!this->_internal_messagetype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_messagetype());
  }

  // bytes payload = 3;
  if (!this->_internal_payload().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  // string liveId = 4;
  if (!this->_internal_liveid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_liveid());
  }

  // string ticket = 5;
  if (!this->_internal_ticket().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ticket());
  }

  // int64 serverTimestampMs = 6;
  if (this->_internal_servertimestampms() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_servertimestampms());
  }

  // .AcFunDanmu.ZtLiveScMessage.CompressionType compressionType = 2;
  if (this->_internal_compressiontype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_compressiontype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ZtLiveScMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ZtLiveScMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ZtLiveScMessage::GetClassData() const { return &_class_data_; }


void ZtLiveScMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ZtLiveScMessage*>(&to_msg);
  auto& from = static_cast<const ZtLiveScMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.ZtLiveScMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_messagetype().empty()) {
    _this->_internal_set_messagetype(from._internal_messagetype());
  }
  if (!from._internal_payload().empty()) {
    _this->_internal_set_payload(from._internal_payload());
  }
  if (!from._internal_liveid().empty()) {
    _this->_internal_set_liveid(from._internal_liveid());
  }
  if (!from._internal_ticket().empty()) {
    _this->_internal_set_ticket(from._internal_ticket());
  }
  if (from._internal_servertimestampms() != 0) {
    _this->_internal_set_servertimestampms(from._internal_servertimestampms());
  }
  if (from._internal_compressiontype() != 0) {
    _this->_internal_set_compressiontype(from._internal_compressiontype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ZtLiveScMessage::CopyFrom(const ZtLiveScMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.ZtLiveScMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZtLiveScMessage::IsInitialized() const {
  return true;
}

void ZtLiveScMessage::InternalSwap(ZtLiveScMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.messagetype_, lhs_arena,
      &other->_impl_.messagetype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.payload_, lhs_arena,
      &other->_impl_.payload_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.liveid_, lhs_arena,
      &other->_impl_.liveid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ticket_, lhs_arena,
      &other->_impl_.ticket_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ZtLiveScMessage, _impl_.compressiontype_)
      + sizeof(ZtLiveScMessage::_impl_.compressiontype_)
      - PROTOBUF_FIELD_OFFSET(ZtLiveScMessage, _impl_.servertimestampms_)>(
          reinterpret_cast<char*>(&_impl_.servertimestampms_),
          reinterpret_cast<char*>(&other->_impl_.servertimestampms_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ZtLiveScMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ZtLiveScMessage_2eproto_getter, &descriptor_table_ZtLiveScMessage_2eproto_once,
      file_level_metadata_ZtLiveScMessage_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AcFunDanmu::ZtLiveScMessage*
Arena::CreateMaybeMessage< ::AcFunDanmu::ZtLiveScMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::ZtLiveScMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
