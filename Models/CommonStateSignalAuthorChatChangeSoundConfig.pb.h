// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommonStateSignalAuthorChatChangeSoundConfig.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_CommonStateSignalAuthorChatChangeSoundConfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_CommonStateSignalAuthorChatChangeSoundConfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_CommonStateSignalAuthorChatChangeSoundConfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_CommonStateSignalAuthorChatChangeSoundConfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_CommonStateSignalAuthorChatChangeSoundConfig_2eproto;
namespace AcFunDanmu {
class CommonStateSignalAuthorChatChangeSoundConfig;
struct CommonStateSignalAuthorChatChangeSoundConfigDefaultTypeInternal;
extern CommonStateSignalAuthorChatChangeSoundConfigDefaultTypeInternal _CommonStateSignalAuthorChatChangeSoundConfig_default_instance_;
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::CommonStateSignalAuthorChatChangeSoundConfig* Arena::CreateMaybeMessage<::AcFunDanmu::CommonStateSignalAuthorChatChangeSoundConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {

enum CommonStateSignalAuthorChatChangeSoundConfig_SoundConfigChangeType : int {
  CommonStateSignalAuthorChatChangeSoundConfig_SoundConfigChangeType_UNKNOWN = 0,
  CommonStateSignalAuthorChatChangeSoundConfig_SoundConfigChangeType_OPEN_SOUND = 1,
  CommonStateSignalAuthorChatChangeSoundConfig_SoundConfigChangeType_CLOSE_SOUND = 2,
  CommonStateSignalAuthorChatChangeSoundConfig_SoundConfigChangeType_CommonStateSignalAuthorChatChangeSoundConfig_SoundConfigChangeType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CommonStateSignalAuthorChatChangeSoundConfig_SoundConfigChangeType_CommonStateSignalAuthorChatChangeSoundConfig_SoundConfigChangeType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CommonStateSignalAuthorChatChangeSoundConfig_SoundConfigChangeType_IsValid(int value);
constexpr CommonStateSignalAuthorChatChangeSoundConfig_SoundConfigChangeType CommonStateSignalAuthorChatChangeSoundConfig_SoundConfigChangeType_SoundConfigChangeType_MIN = CommonStateSignalAuthorChatChangeSoundConfig_SoundConfigChangeType_UNKNOWN;
constexpr CommonStateSignalAuthorChatChangeSoundConfig_SoundConfigChangeType CommonStateSignalAuthorChatChangeSoundConfig_SoundConfigChangeType_SoundConfigChangeType_MAX = CommonStateSignalAuthorChatChangeSoundConfig_SoundConfigChangeType_CLOSE_SOUND;
constexpr int CommonStateSignalAuthorChatChangeSoundConfig_SoundConfigChangeType_SoundConfigChangeType_ARRAYSIZE = CommonStateSignalAuthorChatChangeSoundConfig_SoundConfigChangeType_SoundConfigChangeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommonStateSignalAuthorChatChangeSoundConfig_SoundConfigChangeType_descriptor();
template<typename T>
inline const std::string& CommonStateSignalAuthorChatChangeSoundConfig_SoundConfigChangeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CommonStateSignalAuthorChatChangeSoundConfig_SoundConfigChangeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CommonStateSignalAuthorChatChangeSoundConfig_SoundConfigChangeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CommonStateSignalAuthorChatChangeSoundConfig_SoundConfigChangeType_descriptor(), enum_t_value);
}
inline bool CommonStateSignalAuthorChatChangeSoundConfig_SoundConfigChangeType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CommonStateSignalAuthorChatChangeSoundConfig_SoundConfigChangeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CommonStateSignalAuthorChatChangeSoundConfig_SoundConfigChangeType>(
    CommonStateSignalAuthorChatChangeSoundConfig_SoundConfigChangeType_descriptor(), name, value);
}
// ===================================================================

class CommonStateSignalAuthorChatChangeSoundConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.CommonStateSignalAuthorChatChangeSoundConfig) */ {
 public:
  inline CommonStateSignalAuthorChatChangeSoundConfig() : CommonStateSignalAuthorChatChangeSoundConfig(nullptr) {}
  ~CommonStateSignalAuthorChatChangeSoundConfig() override;
  explicit constexpr CommonStateSignalAuthorChatChangeSoundConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommonStateSignalAuthorChatChangeSoundConfig(const CommonStateSignalAuthorChatChangeSoundConfig& from);
  CommonStateSignalAuthorChatChangeSoundConfig(CommonStateSignalAuthorChatChangeSoundConfig&& from) noexcept
    : CommonStateSignalAuthorChatChangeSoundConfig() {
    *this = ::std::move(from);
  }

  inline CommonStateSignalAuthorChatChangeSoundConfig& operator=(const CommonStateSignalAuthorChatChangeSoundConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonStateSignalAuthorChatChangeSoundConfig& operator=(CommonStateSignalAuthorChatChangeSoundConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommonStateSignalAuthorChatChangeSoundConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommonStateSignalAuthorChatChangeSoundConfig* internal_default_instance() {
    return reinterpret_cast<const CommonStateSignalAuthorChatChangeSoundConfig*>(
               &_CommonStateSignalAuthorChatChangeSoundConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CommonStateSignalAuthorChatChangeSoundConfig& a, CommonStateSignalAuthorChatChangeSoundConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonStateSignalAuthorChatChangeSoundConfig* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonStateSignalAuthorChatChangeSoundConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommonStateSignalAuthorChatChangeSoundConfig* New() const final {
    return new CommonStateSignalAuthorChatChangeSoundConfig();
  }

  CommonStateSignalAuthorChatChangeSoundConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommonStateSignalAuthorChatChangeSoundConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommonStateSignalAuthorChatChangeSoundConfig& from);
  void MergeFrom(const CommonStateSignalAuthorChatChangeSoundConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonStateSignalAuthorChatChangeSoundConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.CommonStateSignalAuthorChatChangeSoundConfig";
  }
  protected:
  explicit CommonStateSignalAuthorChatChangeSoundConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CommonStateSignalAuthorChatChangeSoundConfig_SoundConfigChangeType SoundConfigChangeType;
  static constexpr SoundConfigChangeType UNKNOWN =
    CommonStateSignalAuthorChatChangeSoundConfig_SoundConfigChangeType_UNKNOWN;
  static constexpr SoundConfigChangeType OPEN_SOUND =
    CommonStateSignalAuthorChatChangeSoundConfig_SoundConfigChangeType_OPEN_SOUND;
  static constexpr SoundConfigChangeType CLOSE_SOUND =
    CommonStateSignalAuthorChatChangeSoundConfig_SoundConfigChangeType_CLOSE_SOUND;
  static inline bool SoundConfigChangeType_IsValid(int value) {
    return CommonStateSignalAuthorChatChangeSoundConfig_SoundConfigChangeType_IsValid(value);
  }
  static constexpr SoundConfigChangeType SoundConfigChangeType_MIN =
    CommonStateSignalAuthorChatChangeSoundConfig_SoundConfigChangeType_SoundConfigChangeType_MIN;
  static constexpr SoundConfigChangeType SoundConfigChangeType_MAX =
    CommonStateSignalAuthorChatChangeSoundConfig_SoundConfigChangeType_SoundConfigChangeType_MAX;
  static constexpr int SoundConfigChangeType_ARRAYSIZE =
    CommonStateSignalAuthorChatChangeSoundConfig_SoundConfigChangeType_SoundConfigChangeType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SoundConfigChangeType_descriptor() {
    return CommonStateSignalAuthorChatChangeSoundConfig_SoundConfigChangeType_descriptor();
  }
  template<typename T>
  static inline const std::string& SoundConfigChangeType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SoundConfigChangeType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SoundConfigChangeType_Name.");
    return CommonStateSignalAuthorChatChangeSoundConfig_SoundConfigChangeType_Name(enum_t_value);
  }
  static inline bool SoundConfigChangeType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SoundConfigChangeType* value) {
    return CommonStateSignalAuthorChatChangeSoundConfig_SoundConfigChangeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAuthorChatIdFieldNumber = 1,
    kSoundConfigChangeTypeFieldNumber = 2,
  };
  // string authorChatId = 1;
  void clear_authorchatid();
  const std::string& authorchatid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_authorchatid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_authorchatid();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_authorchatid();
  void set_allocated_authorchatid(std::string* authorchatid);
  private:
  const std::string& _internal_authorchatid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_authorchatid(const std::string& value);
  std::string* _internal_mutable_authorchatid();
  public:

  // .AcFunDanmu.CommonStateSignalAuthorChatChangeSoundConfig.SoundConfigChangeType soundConfigChangeType = 2;
  void clear_soundconfigchangetype();
  ::AcFunDanmu::CommonStateSignalAuthorChatChangeSoundConfig_SoundConfigChangeType soundconfigchangetype() const;
  void set_soundconfigchangetype(::AcFunDanmu::CommonStateSignalAuthorChatChangeSoundConfig_SoundConfigChangeType value);
  private:
  ::AcFunDanmu::CommonStateSignalAuthorChatChangeSoundConfig_SoundConfigChangeType _internal_soundconfigchangetype() const;
  void _internal_set_soundconfigchangetype(::AcFunDanmu::CommonStateSignalAuthorChatChangeSoundConfig_SoundConfigChangeType value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.CommonStateSignalAuthorChatChangeSoundConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authorchatid_;
  int soundconfigchangetype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CommonStateSignalAuthorChatChangeSoundConfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CommonStateSignalAuthorChatChangeSoundConfig

// string authorChatId = 1;
inline void CommonStateSignalAuthorChatChangeSoundConfig::clear_authorchatid() {
  authorchatid_.ClearToEmpty();
}
inline const std::string& CommonStateSignalAuthorChatChangeSoundConfig::authorchatid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonStateSignalAuthorChatChangeSoundConfig.authorChatId)
  return _internal_authorchatid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommonStateSignalAuthorChatChangeSoundConfig::set_authorchatid(ArgT0&& arg0, ArgT... args) {
 
 authorchatid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommonStateSignalAuthorChatChangeSoundConfig.authorChatId)
}
inline std::string* CommonStateSignalAuthorChatChangeSoundConfig::mutable_authorchatid() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.CommonStateSignalAuthorChatChangeSoundConfig.authorChatId)
  return _internal_mutable_authorchatid();
}
inline const std::string& CommonStateSignalAuthorChatChangeSoundConfig::_internal_authorchatid() const {
  return authorchatid_.Get();
}
inline void CommonStateSignalAuthorChatChangeSoundConfig::_internal_set_authorchatid(const std::string& value) {
  
  authorchatid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CommonStateSignalAuthorChatChangeSoundConfig::_internal_mutable_authorchatid() {
  
  return authorchatid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CommonStateSignalAuthorChatChangeSoundConfig::release_authorchatid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.CommonStateSignalAuthorChatChangeSoundConfig.authorChatId)
  return authorchatid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CommonStateSignalAuthorChatChangeSoundConfig::set_allocated_authorchatid(std::string* authorchatid) {
  if (authorchatid != nullptr) {
    
  } else {
    
  }
  authorchatid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), authorchatid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.CommonStateSignalAuthorChatChangeSoundConfig.authorChatId)
}

// .AcFunDanmu.CommonStateSignalAuthorChatChangeSoundConfig.SoundConfigChangeType soundConfigChangeType = 2;
inline void CommonStateSignalAuthorChatChangeSoundConfig::clear_soundconfigchangetype() {
  soundconfigchangetype_ = 0;
}
inline ::AcFunDanmu::CommonStateSignalAuthorChatChangeSoundConfig_SoundConfigChangeType CommonStateSignalAuthorChatChangeSoundConfig::_internal_soundconfigchangetype() const {
  return static_cast< ::AcFunDanmu::CommonStateSignalAuthorChatChangeSoundConfig_SoundConfigChangeType >(soundconfigchangetype_);
}
inline ::AcFunDanmu::CommonStateSignalAuthorChatChangeSoundConfig_SoundConfigChangeType CommonStateSignalAuthorChatChangeSoundConfig::soundconfigchangetype() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonStateSignalAuthorChatChangeSoundConfig.soundConfigChangeType)
  return _internal_soundconfigchangetype();
}
inline void CommonStateSignalAuthorChatChangeSoundConfig::_internal_set_soundconfigchangetype(::AcFunDanmu::CommonStateSignalAuthorChatChangeSoundConfig_SoundConfigChangeType value) {
  
  soundconfigchangetype_ = value;
}
inline void CommonStateSignalAuthorChatChangeSoundConfig::set_soundconfigchangetype(::AcFunDanmu::CommonStateSignalAuthorChatChangeSoundConfig_SoundConfigChangeType value) {
  _internal_set_soundconfigchangetype(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommonStateSignalAuthorChatChangeSoundConfig.soundConfigChangeType)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace AcFunDanmu

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::AcFunDanmu::CommonStateSignalAuthorChatChangeSoundConfig_SoundConfigChangeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::CommonStateSignalAuthorChatChangeSoundConfig_SoundConfigChangeType>() {
  return ::AcFunDanmu::CommonStateSignalAuthorChatChangeSoundConfig_SoundConfigChangeType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_CommonStateSignalAuthorChatChangeSoundConfig_2eproto
