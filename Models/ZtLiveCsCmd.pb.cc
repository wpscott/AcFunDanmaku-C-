// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ZtLiveCsCmd.proto

#include "ZtLiveCsCmd.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace AcFunDanmu {
PROTOBUF_CONSTEXPR ZtLiveCsCmd::ZtLiveCsCmd(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cmdtype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.payload_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ticket_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.liveid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ZtLiveCsCmdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ZtLiveCsCmdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ZtLiveCsCmdDefaultTypeInternal() {}
  union {
    ZtLiveCsCmd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ZtLiveCsCmdDefaultTypeInternal _ZtLiveCsCmd_default_instance_;
PROTOBUF_CONSTEXPR ZtLiveCsCmdAck::ZtLiveCsCmdAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cmdacktype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.errormsg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.payload_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.errorcode_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ZtLiveCsCmdAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ZtLiveCsCmdAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ZtLiveCsCmdAckDefaultTypeInternal() {}
  union {
    ZtLiveCsCmdAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ZtLiveCsCmdAckDefaultTypeInternal _ZtLiveCsCmdAck_default_instance_;
}  // namespace AcFunDanmu
static ::_pb::Metadata file_level_metadata_ZtLiveCsCmd_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_ZtLiveCsCmd_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ZtLiveCsCmd_2eproto = nullptr;

const uint32_t TableStruct_ZtLiveCsCmd_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::ZtLiveCsCmd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::ZtLiveCsCmd, _impl_.cmdtype_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::ZtLiveCsCmd, _impl_.payload_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::ZtLiveCsCmd, _impl_.ticket_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::ZtLiveCsCmd, _impl_.liveid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::ZtLiveCsCmdAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::ZtLiveCsCmdAck, _impl_.cmdacktype_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::ZtLiveCsCmdAck, _impl_.errorcode_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::ZtLiveCsCmdAck, _impl_.errormsg_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::ZtLiveCsCmdAck, _impl_.payload_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::AcFunDanmu::ZtLiveCsCmd)},
  { 10, -1, -1, sizeof(::AcFunDanmu::ZtLiveCsCmdAck)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::AcFunDanmu::_ZtLiveCsCmd_default_instance_._instance,
  &::AcFunDanmu::_ZtLiveCsCmdAck_default_instance_._instance,
};

const char descriptor_table_protodef_ZtLiveCsCmd_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021ZtLiveCsCmd.proto\022\nAcFunDanmu\"O\n\013ZtLiv"
  "eCsCmd\022\017\n\007cmdType\030\001 \001(\t\022\017\n\007payload\030\002 \001(\014"
  "\022\016\n\006ticket\030\003 \001(\t\022\016\n\006liveId\030\004 \001(\t\"Z\n\016ZtLi"
  "veCsCmdAck\022\022\n\ncmdAckType\030\001 \001(\t\022\021\n\terrorC"
  "ode\030\002 \001(\003\022\020\n\010errorMsg\030\003 \001(\t\022\017\n\007payload\030\004"
  " \001(\014b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_ZtLiveCsCmd_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ZtLiveCsCmd_2eproto = {
    false, false, 212, descriptor_table_protodef_ZtLiveCsCmd_2eproto,
    "ZtLiveCsCmd.proto",
    &descriptor_table_ZtLiveCsCmd_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_ZtLiveCsCmd_2eproto::offsets,
    file_level_metadata_ZtLiveCsCmd_2eproto, file_level_enum_descriptors_ZtLiveCsCmd_2eproto,
    file_level_service_descriptors_ZtLiveCsCmd_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ZtLiveCsCmd_2eproto_getter() {
  return &descriptor_table_ZtLiveCsCmd_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ZtLiveCsCmd_2eproto(&descriptor_table_ZtLiveCsCmd_2eproto);
namespace AcFunDanmu {

// ===================================================================

class ZtLiveCsCmd::_Internal {
 public:
};

ZtLiveCsCmd::ZtLiveCsCmd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.ZtLiveCsCmd)
}
ZtLiveCsCmd::ZtLiveCsCmd(const ZtLiveCsCmd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ZtLiveCsCmd* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cmdtype_){}
    , decltype(_impl_.payload_){}
    , decltype(_impl_.ticket_){}
    , decltype(_impl_.liveid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.cmdtype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cmdtype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cmdtype().empty()) {
    _this->_impl_.cmdtype_.Set(from._internal_cmdtype(), 
      _this->GetArenaForAllocation());
  }
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload().empty()) {
    _this->_impl_.payload_.Set(from._internal_payload(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ticket_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ticket_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ticket().empty()) {
    _this->_impl_.ticket_.Set(from._internal_ticket(), 
      _this->GetArenaForAllocation());
  }
  _impl_.liveid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.liveid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_liveid().empty()) {
    _this->_impl_.liveid_.Set(from._internal_liveid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.ZtLiveCsCmd)
}

inline void ZtLiveCsCmd::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cmdtype_){}
    , decltype(_impl_.payload_){}
    , decltype(_impl_.ticket_){}
    , decltype(_impl_.liveid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.cmdtype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cmdtype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ticket_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ticket_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.liveid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.liveid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ZtLiveCsCmd::~ZtLiveCsCmd() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.ZtLiveCsCmd)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ZtLiveCsCmd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cmdtype_.Destroy();
  _impl_.payload_.Destroy();
  _impl_.ticket_.Destroy();
  _impl_.liveid_.Destroy();
}

void ZtLiveCsCmd::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ZtLiveCsCmd::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.ZtLiveCsCmd)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cmdtype_.ClearToEmpty();
  _impl_.payload_.ClearToEmpty();
  _impl_.ticket_.ClearToEmpty();
  _impl_.liveid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ZtLiveCsCmd::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string cmdType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_cmdtype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.ZtLiveCsCmd.cmdType"));
        } else
          goto handle_unusual;
        continue;
      // bytes payload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ticket = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_ticket();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.ZtLiveCsCmd.ticket"));
        } else
          goto handle_unusual;
        continue;
      // string liveId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_liveid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.ZtLiveCsCmd.liveId"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ZtLiveCsCmd::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.ZtLiveCsCmd)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string cmdType = 1;
  if (!this->_internal_cmdtype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cmdtype().data(), static_cast<int>(this->_internal_cmdtype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.ZtLiveCsCmd.cmdType");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cmdtype(), target);
  }

  // bytes payload = 2;
  if (!this->_internal_payload().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_payload(), target);
  }

  // string ticket = 3;
  if (!this->_internal_ticket().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ticket().data(), static_cast<int>(this->_internal_ticket().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.ZtLiveCsCmd.ticket");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ticket(), target);
  }

  // string liveId = 4;
  if (!this->_internal_liveid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_liveid().data(), static_cast<int>(this->_internal_liveid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.ZtLiveCsCmd.liveId");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_liveid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.ZtLiveCsCmd)
  return target;
}

size_t ZtLiveCsCmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.ZtLiveCsCmd)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cmdType = 1;
  if (!this->_internal_cmdtype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cmdtype());
  }

  // bytes payload = 2;
  if (!this->_internal_payload().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  // string ticket = 3;
  if (!this->_internal_ticket().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ticket());
  }

  // string liveId = 4;
  if (!this->_internal_liveid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_liveid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ZtLiveCsCmd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ZtLiveCsCmd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ZtLiveCsCmd::GetClassData() const { return &_class_data_; }


void ZtLiveCsCmd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ZtLiveCsCmd*>(&to_msg);
  auto& from = static_cast<const ZtLiveCsCmd&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.ZtLiveCsCmd)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_cmdtype().empty()) {
    _this->_internal_set_cmdtype(from._internal_cmdtype());
  }
  if (!from._internal_payload().empty()) {
    _this->_internal_set_payload(from._internal_payload());
  }
  if (!from._internal_ticket().empty()) {
    _this->_internal_set_ticket(from._internal_ticket());
  }
  if (!from._internal_liveid().empty()) {
    _this->_internal_set_liveid(from._internal_liveid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ZtLiveCsCmd::CopyFrom(const ZtLiveCsCmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.ZtLiveCsCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZtLiveCsCmd::IsInitialized() const {
  return true;
}

void ZtLiveCsCmd::InternalSwap(ZtLiveCsCmd* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cmdtype_, lhs_arena,
      &other->_impl_.cmdtype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.payload_, lhs_arena,
      &other->_impl_.payload_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ticket_, lhs_arena,
      &other->_impl_.ticket_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.liveid_, lhs_arena,
      &other->_impl_.liveid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ZtLiveCsCmd::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ZtLiveCsCmd_2eproto_getter, &descriptor_table_ZtLiveCsCmd_2eproto_once,
      file_level_metadata_ZtLiveCsCmd_2eproto[0]);
}

// ===================================================================

class ZtLiveCsCmdAck::_Internal {
 public:
};

ZtLiveCsCmdAck::ZtLiveCsCmdAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.ZtLiveCsCmdAck)
}
ZtLiveCsCmdAck::ZtLiveCsCmdAck(const ZtLiveCsCmdAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ZtLiveCsCmdAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cmdacktype_){}
    , decltype(_impl_.errormsg_){}
    , decltype(_impl_.payload_){}
    , decltype(_impl_.errorcode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.cmdacktype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cmdacktype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cmdacktype().empty()) {
    _this->_impl_.cmdacktype_.Set(from._internal_cmdacktype(), 
      _this->GetArenaForAllocation());
  }
  _impl_.errormsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errormsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_errormsg().empty()) {
    _this->_impl_.errormsg_.Set(from._internal_errormsg(), 
      _this->GetArenaForAllocation());
  }
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload().empty()) {
    _this->_impl_.payload_.Set(from._internal_payload(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.errorcode_ = from._impl_.errorcode_;
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.ZtLiveCsCmdAck)
}

inline void ZtLiveCsCmdAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cmdacktype_){}
    , decltype(_impl_.errormsg_){}
    , decltype(_impl_.payload_){}
    , decltype(_impl_.errorcode_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.cmdacktype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cmdacktype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.errormsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errormsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ZtLiveCsCmdAck::~ZtLiveCsCmdAck() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.ZtLiveCsCmdAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ZtLiveCsCmdAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cmdacktype_.Destroy();
  _impl_.errormsg_.Destroy();
  _impl_.payload_.Destroy();
}

void ZtLiveCsCmdAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ZtLiveCsCmdAck::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.ZtLiveCsCmdAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cmdacktype_.ClearToEmpty();
  _impl_.errormsg_.ClearToEmpty();
  _impl_.payload_.ClearToEmpty();
  _impl_.errorcode_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ZtLiveCsCmdAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string cmdAckType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_cmdacktype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.ZtLiveCsCmdAck.cmdAckType"));
        } else
          goto handle_unusual;
        continue;
      // int64 errorCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.errorcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string errorMsg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_errormsg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.ZtLiveCsCmdAck.errorMsg"));
        } else
          goto handle_unusual;
        continue;
      // bytes payload = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ZtLiveCsCmdAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.ZtLiveCsCmdAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string cmdAckType = 1;
  if (!this->_internal_cmdacktype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cmdacktype().data(), static_cast<int>(this->_internal_cmdacktype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.ZtLiveCsCmdAck.cmdAckType");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cmdacktype(), target);
  }

  // int64 errorCode = 2;
  if (this->_internal_errorcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_errorcode(), target);
  }

  // string errorMsg = 3;
  if (!this->_internal_errormsg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errormsg().data(), static_cast<int>(this->_internal_errormsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.ZtLiveCsCmdAck.errorMsg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_errormsg(), target);
  }

  // bytes payload = 4;
  if (!this->_internal_payload().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.ZtLiveCsCmdAck)
  return target;
}

size_t ZtLiveCsCmdAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.ZtLiveCsCmdAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cmdAckType = 1;
  if (!this->_internal_cmdacktype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cmdacktype());
  }

  // string errorMsg = 3;
  if (!this->_internal_errormsg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errormsg());
  }

  // bytes payload = 4;
  if (!this->_internal_payload().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  // int64 errorCode = 2;
  if (this->_internal_errorcode() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_errorcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ZtLiveCsCmdAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ZtLiveCsCmdAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ZtLiveCsCmdAck::GetClassData() const { return &_class_data_; }


void ZtLiveCsCmdAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ZtLiveCsCmdAck*>(&to_msg);
  auto& from = static_cast<const ZtLiveCsCmdAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.ZtLiveCsCmdAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_cmdacktype().empty()) {
    _this->_internal_set_cmdacktype(from._internal_cmdacktype());
  }
  if (!from._internal_errormsg().empty()) {
    _this->_internal_set_errormsg(from._internal_errormsg());
  }
  if (!from._internal_payload().empty()) {
    _this->_internal_set_payload(from._internal_payload());
  }
  if (from._internal_errorcode() != 0) {
    _this->_internal_set_errorcode(from._internal_errorcode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ZtLiveCsCmdAck::CopyFrom(const ZtLiveCsCmdAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.ZtLiveCsCmdAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZtLiveCsCmdAck::IsInitialized() const {
  return true;
}

void ZtLiveCsCmdAck::InternalSwap(ZtLiveCsCmdAck* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cmdacktype_, lhs_arena,
      &other->_impl_.cmdacktype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.errormsg_, lhs_arena,
      &other->_impl_.errormsg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.payload_, lhs_arena,
      &other->_impl_.payload_, rhs_arena
  );
  swap(_impl_.errorcode_, other->_impl_.errorcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ZtLiveCsCmdAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ZtLiveCsCmd_2eproto_getter, &descriptor_table_ZtLiveCsCmd_2eproto_once,
      file_level_metadata_ZtLiveCsCmd_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AcFunDanmu::ZtLiveCsCmd*
Arena::CreateMaybeMessage< ::AcFunDanmu::ZtLiveCsCmd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::ZtLiveCsCmd >(arena);
}
template<> PROTOBUF_NOINLINE ::AcFunDanmu::ZtLiveCsCmdAck*
Arena::CreateMaybeMessage< ::AcFunDanmu::ZtLiveCsCmdAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::ZtLiveCsCmdAck >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
