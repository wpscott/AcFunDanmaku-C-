// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ZtLiveCsEnterRoom.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ZtLiveCsEnterRoom_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ZtLiveCsEnterRoom_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ZtLiveCsEnterRoom_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ZtLiveCsEnterRoom_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ZtLiveCsEnterRoom_2eproto;
namespace AcFunDanmu {
class ZtLiveCsEnterRoom;
struct ZtLiveCsEnterRoomDefaultTypeInternal;
extern ZtLiveCsEnterRoomDefaultTypeInternal _ZtLiveCsEnterRoom_default_instance_;
class ZtLiveCsEnterRoomAck;
struct ZtLiveCsEnterRoomAckDefaultTypeInternal;
extern ZtLiveCsEnterRoomAckDefaultTypeInternal _ZtLiveCsEnterRoomAck_default_instance_;
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::ZtLiveCsEnterRoom* Arena::CreateMaybeMessage<::AcFunDanmu::ZtLiveCsEnterRoom>(Arena*);
template<> ::AcFunDanmu::ZtLiveCsEnterRoomAck* Arena::CreateMaybeMessage<::AcFunDanmu::ZtLiveCsEnterRoomAck>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {

// ===================================================================

class ZtLiveCsEnterRoom final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.ZtLiveCsEnterRoom) */ {
 public:
  inline ZtLiveCsEnterRoom() : ZtLiveCsEnterRoom(nullptr) {}
  ~ZtLiveCsEnterRoom() override;
  explicit PROTOBUF_CONSTEXPR ZtLiveCsEnterRoom(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ZtLiveCsEnterRoom(const ZtLiveCsEnterRoom& from);
  ZtLiveCsEnterRoom(ZtLiveCsEnterRoom&& from) noexcept
    : ZtLiveCsEnterRoom() {
    *this = ::std::move(from);
  }

  inline ZtLiveCsEnterRoom& operator=(const ZtLiveCsEnterRoom& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZtLiveCsEnterRoom& operator=(ZtLiveCsEnterRoom&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ZtLiveCsEnterRoom& default_instance() {
    return *internal_default_instance();
  }
  static inline const ZtLiveCsEnterRoom* internal_default_instance() {
    return reinterpret_cast<const ZtLiveCsEnterRoom*>(
               &_ZtLiveCsEnterRoom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ZtLiveCsEnterRoom& a, ZtLiveCsEnterRoom& b) {
    a.Swap(&b);
  }
  inline void Swap(ZtLiveCsEnterRoom* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZtLiveCsEnterRoom* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ZtLiveCsEnterRoom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ZtLiveCsEnterRoom>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ZtLiveCsEnterRoom& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ZtLiveCsEnterRoom& from) {
    ZtLiveCsEnterRoom::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZtLiveCsEnterRoom* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.ZtLiveCsEnterRoom";
  }
  protected:
  explicit ZtLiveCsEnterRoom(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnterRoomAttachFieldNumber = 4,
    kClientLiveSdkVersionFieldNumber = 5,
    kIsAuthorFieldNumber = 1,
    kReconnectCountFieldNumber = 2,
    kLastErrorCodeFieldNumber = 3,
  };
  // string enterRoomAttach = 4;
  void clear_enterroomattach();
  const std::string& enterroomattach() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_enterroomattach(ArgT0&& arg0, ArgT... args);
  std::string* mutable_enterroomattach();
  PROTOBUF_NODISCARD std::string* release_enterroomattach();
  void set_allocated_enterroomattach(std::string* enterroomattach);
  private:
  const std::string& _internal_enterroomattach() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_enterroomattach(const std::string& value);
  std::string* _internal_mutable_enterroomattach();
  public:

  // string clientLiveSdkVersion = 5;
  void clear_clientlivesdkversion();
  const std::string& clientlivesdkversion() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clientlivesdkversion(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clientlivesdkversion();
  PROTOBUF_NODISCARD std::string* release_clientlivesdkversion();
  void set_allocated_clientlivesdkversion(std::string* clientlivesdkversion);
  private:
  const std::string& _internal_clientlivesdkversion() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clientlivesdkversion(const std::string& value);
  std::string* _internal_mutable_clientlivesdkversion();
  public:

  // bool isAuthor = 1;
  void clear_isauthor();
  bool isauthor() const;
  void set_isauthor(bool value);
  private:
  bool _internal_isauthor() const;
  void _internal_set_isauthor(bool value);
  public:

  // int32 reconnectCount = 2;
  void clear_reconnectcount();
  int32_t reconnectcount() const;
  void set_reconnectcount(int32_t value);
  private:
  int32_t _internal_reconnectcount() const;
  void _internal_set_reconnectcount(int32_t value);
  public:

  // int32 lastErrorCode = 3;
  void clear_lasterrorcode();
  int32_t lasterrorcode() const;
  void set_lasterrorcode(int32_t value);
  private:
  int32_t _internal_lasterrorcode() const;
  void _internal_set_lasterrorcode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.ZtLiveCsEnterRoom)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr enterroomattach_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientlivesdkversion_;
    bool isauthor_;
    int32_t reconnectcount_;
    int32_t lasterrorcode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ZtLiveCsEnterRoom_2eproto;
};
// -------------------------------------------------------------------

class ZtLiveCsEnterRoomAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.ZtLiveCsEnterRoomAck) */ {
 public:
  inline ZtLiveCsEnterRoomAck() : ZtLiveCsEnterRoomAck(nullptr) {}
  ~ZtLiveCsEnterRoomAck() override;
  explicit PROTOBUF_CONSTEXPR ZtLiveCsEnterRoomAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ZtLiveCsEnterRoomAck(const ZtLiveCsEnterRoomAck& from);
  ZtLiveCsEnterRoomAck(ZtLiveCsEnterRoomAck&& from) noexcept
    : ZtLiveCsEnterRoomAck() {
    *this = ::std::move(from);
  }

  inline ZtLiveCsEnterRoomAck& operator=(const ZtLiveCsEnterRoomAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZtLiveCsEnterRoomAck& operator=(ZtLiveCsEnterRoomAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ZtLiveCsEnterRoomAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const ZtLiveCsEnterRoomAck* internal_default_instance() {
    return reinterpret_cast<const ZtLiveCsEnterRoomAck*>(
               &_ZtLiveCsEnterRoomAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ZtLiveCsEnterRoomAck& a, ZtLiveCsEnterRoomAck& b) {
    a.Swap(&b);
  }
  inline void Swap(ZtLiveCsEnterRoomAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZtLiveCsEnterRoomAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ZtLiveCsEnterRoomAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ZtLiveCsEnterRoomAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ZtLiveCsEnterRoomAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ZtLiveCsEnterRoomAck& from) {
    ZtLiveCsEnterRoomAck::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZtLiveCsEnterRoomAck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.ZtLiveCsEnterRoomAck";
  }
  protected:
  explicit ZtLiveCsEnterRoomAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeartbeatIntervalMsFieldNumber = 1,
  };
  // int64 heartbeatIntervalMs = 1;
  void clear_heartbeatintervalms();
  int64_t heartbeatintervalms() const;
  void set_heartbeatintervalms(int64_t value);
  private:
  int64_t _internal_heartbeatintervalms() const;
  void _internal_set_heartbeatintervalms(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.ZtLiveCsEnterRoomAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t heartbeatintervalms_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ZtLiveCsEnterRoom_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ZtLiveCsEnterRoom

// bool isAuthor = 1;
inline void ZtLiveCsEnterRoom::clear_isauthor() {
  _impl_.isauthor_ = false;
}
inline bool ZtLiveCsEnterRoom::_internal_isauthor() const {
  return _impl_.isauthor_;
}
inline bool ZtLiveCsEnterRoom::isauthor() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.ZtLiveCsEnterRoom.isAuthor)
  return _internal_isauthor();
}
inline void ZtLiveCsEnterRoom::_internal_set_isauthor(bool value) {
  
  _impl_.isauthor_ = value;
}
inline void ZtLiveCsEnterRoom::set_isauthor(bool value) {
  _internal_set_isauthor(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.ZtLiveCsEnterRoom.isAuthor)
}

// int32 reconnectCount = 2;
inline void ZtLiveCsEnterRoom::clear_reconnectcount() {
  _impl_.reconnectcount_ = 0;
}
inline int32_t ZtLiveCsEnterRoom::_internal_reconnectcount() const {
  return _impl_.reconnectcount_;
}
inline int32_t ZtLiveCsEnterRoom::reconnectcount() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.ZtLiveCsEnterRoom.reconnectCount)
  return _internal_reconnectcount();
}
inline void ZtLiveCsEnterRoom::_internal_set_reconnectcount(int32_t value) {
  
  _impl_.reconnectcount_ = value;
}
inline void ZtLiveCsEnterRoom::set_reconnectcount(int32_t value) {
  _internal_set_reconnectcount(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.ZtLiveCsEnterRoom.reconnectCount)
}

// int32 lastErrorCode = 3;
inline void ZtLiveCsEnterRoom::clear_lasterrorcode() {
  _impl_.lasterrorcode_ = 0;
}
inline int32_t ZtLiveCsEnterRoom::_internal_lasterrorcode() const {
  return _impl_.lasterrorcode_;
}
inline int32_t ZtLiveCsEnterRoom::lasterrorcode() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.ZtLiveCsEnterRoom.lastErrorCode)
  return _internal_lasterrorcode();
}
inline void ZtLiveCsEnterRoom::_internal_set_lasterrorcode(int32_t value) {
  
  _impl_.lasterrorcode_ = value;
}
inline void ZtLiveCsEnterRoom::set_lasterrorcode(int32_t value) {
  _internal_set_lasterrorcode(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.ZtLiveCsEnterRoom.lastErrorCode)
}

// string enterRoomAttach = 4;
inline void ZtLiveCsEnterRoom::clear_enterroomattach() {
  _impl_.enterroomattach_.ClearToEmpty();
}
inline const std::string& ZtLiveCsEnterRoom::enterroomattach() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.ZtLiveCsEnterRoom.enterRoomAttach)
  return _internal_enterroomattach();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ZtLiveCsEnterRoom::set_enterroomattach(ArgT0&& arg0, ArgT... args) {
 
 _impl_.enterroomattach_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.ZtLiveCsEnterRoom.enterRoomAttach)
}
inline std::string* ZtLiveCsEnterRoom::mutable_enterroomattach() {
  std::string* _s = _internal_mutable_enterroomattach();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.ZtLiveCsEnterRoom.enterRoomAttach)
  return _s;
}
inline const std::string& ZtLiveCsEnterRoom::_internal_enterroomattach() const {
  return _impl_.enterroomattach_.Get();
}
inline void ZtLiveCsEnterRoom::_internal_set_enterroomattach(const std::string& value) {
  
  _impl_.enterroomattach_.Set(value, GetArenaForAllocation());
}
inline std::string* ZtLiveCsEnterRoom::_internal_mutable_enterroomattach() {
  
  return _impl_.enterroomattach_.Mutable(GetArenaForAllocation());
}
inline std::string* ZtLiveCsEnterRoom::release_enterroomattach() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.ZtLiveCsEnterRoom.enterRoomAttach)
  return _impl_.enterroomattach_.Release();
}
inline void ZtLiveCsEnterRoom::set_allocated_enterroomattach(std::string* enterroomattach) {
  if (enterroomattach != nullptr) {
    
  } else {
    
  }
  _impl_.enterroomattach_.SetAllocated(enterroomattach, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.enterroomattach_.IsDefault()) {
    _impl_.enterroomattach_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.ZtLiveCsEnterRoom.enterRoomAttach)
}

// string clientLiveSdkVersion = 5;
inline void ZtLiveCsEnterRoom::clear_clientlivesdkversion() {
  _impl_.clientlivesdkversion_.ClearToEmpty();
}
inline const std::string& ZtLiveCsEnterRoom::clientlivesdkversion() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.ZtLiveCsEnterRoom.clientLiveSdkVersion)
  return _internal_clientlivesdkversion();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ZtLiveCsEnterRoom::set_clientlivesdkversion(ArgT0&& arg0, ArgT... args) {
 
 _impl_.clientlivesdkversion_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.ZtLiveCsEnterRoom.clientLiveSdkVersion)
}
inline std::string* ZtLiveCsEnterRoom::mutable_clientlivesdkversion() {
  std::string* _s = _internal_mutable_clientlivesdkversion();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.ZtLiveCsEnterRoom.clientLiveSdkVersion)
  return _s;
}
inline const std::string& ZtLiveCsEnterRoom::_internal_clientlivesdkversion() const {
  return _impl_.clientlivesdkversion_.Get();
}
inline void ZtLiveCsEnterRoom::_internal_set_clientlivesdkversion(const std::string& value) {
  
  _impl_.clientlivesdkversion_.Set(value, GetArenaForAllocation());
}
inline std::string* ZtLiveCsEnterRoom::_internal_mutable_clientlivesdkversion() {
  
  return _impl_.clientlivesdkversion_.Mutable(GetArenaForAllocation());
}
inline std::string* ZtLiveCsEnterRoom::release_clientlivesdkversion() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.ZtLiveCsEnterRoom.clientLiveSdkVersion)
  return _impl_.clientlivesdkversion_.Release();
}
inline void ZtLiveCsEnterRoom::set_allocated_clientlivesdkversion(std::string* clientlivesdkversion) {
  if (clientlivesdkversion != nullptr) {
    
  } else {
    
  }
  _impl_.clientlivesdkversion_.SetAllocated(clientlivesdkversion, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.clientlivesdkversion_.IsDefault()) {
    _impl_.clientlivesdkversion_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.ZtLiveCsEnterRoom.clientLiveSdkVersion)
}

// -------------------------------------------------------------------

// ZtLiveCsEnterRoomAck

// int64 heartbeatIntervalMs = 1;
inline void ZtLiveCsEnterRoomAck::clear_heartbeatintervalms() {
  _impl_.heartbeatintervalms_ = int64_t{0};
}
inline int64_t ZtLiveCsEnterRoomAck::_internal_heartbeatintervalms() const {
  return _impl_.heartbeatintervalms_;
}
inline int64_t ZtLiveCsEnterRoomAck::heartbeatintervalms() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.ZtLiveCsEnterRoomAck.heartbeatIntervalMs)
  return _internal_heartbeatintervalms();
}
inline void ZtLiveCsEnterRoomAck::_internal_set_heartbeatintervalms(int64_t value) {
  
  _impl_.heartbeatintervalms_ = value;
}
inline void ZtLiveCsEnterRoomAck::set_heartbeatintervalms(int64_t value) {
  _internal_set_heartbeatintervalms(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.ZtLiveCsEnterRoomAck.heartbeatIntervalMs)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace AcFunDanmu

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ZtLiveCsEnterRoom_2eproto
