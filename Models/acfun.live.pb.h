// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: acfun.live.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_acfun_2elive_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_acfun_2elive_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_acfun_2elive_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_acfun_2elive_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_acfun_2elive_2eproto;
namespace AcFunDanmu {
class AcFunUserInfo;
struct AcFunUserInfoDefaultTypeInternal;
extern AcFunUserInfoDefaultTypeInternal _AcFunUserInfo_default_instance_;
class AcfunActionSignalJoinClub;
struct AcfunActionSignalJoinClubDefaultTypeInternal;
extern AcfunActionSignalJoinClubDefaultTypeInternal _AcfunActionSignalJoinClub_default_instance_;
class AcfunActionSignalThrowBanana;
struct AcfunActionSignalThrowBananaDefaultTypeInternal;
extern AcfunActionSignalThrowBananaDefaultTypeInternal _AcfunActionSignalThrowBanana_default_instance_;
class AcfunStateSignalDisplayInfo;
struct AcfunStateSignalDisplayInfoDefaultTypeInternal;
extern AcfunStateSignalDisplayInfoDefaultTypeInternal _AcfunStateSignalDisplayInfo_default_instance_;
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::AcFunUserInfo* Arena::CreateMaybeMessage<::AcFunDanmu::AcFunUserInfo>(Arena*);
template<> ::AcFunDanmu::AcfunActionSignalJoinClub* Arena::CreateMaybeMessage<::AcFunDanmu::AcfunActionSignalJoinClub>(Arena*);
template<> ::AcFunDanmu::AcfunActionSignalThrowBanana* Arena::CreateMaybeMessage<::AcFunDanmu::AcfunActionSignalThrowBanana>(Arena*);
template<> ::AcFunDanmu::AcfunStateSignalDisplayInfo* Arena::CreateMaybeMessage<::AcFunDanmu::AcfunStateSignalDisplayInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {

// ===================================================================

class AcFunUserInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.AcFunUserInfo) */ {
 public:
  inline AcFunUserInfo() : AcFunUserInfo(nullptr) {}
  ~AcFunUserInfo() override;
  explicit constexpr AcFunUserInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AcFunUserInfo(const AcFunUserInfo& from);
  AcFunUserInfo(AcFunUserInfo&& from) noexcept
    : AcFunUserInfo() {
    *this = ::std::move(from);
  }

  inline AcFunUserInfo& operator=(const AcFunUserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AcFunUserInfo& operator=(AcFunUserInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AcFunUserInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const AcFunUserInfo* internal_default_instance() {
    return reinterpret_cast<const AcFunUserInfo*>(
               &_AcFunUserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AcFunUserInfo& a, AcFunUserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AcFunUserInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AcFunUserInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AcFunUserInfo* New() const final {
    return new AcFunUserInfo();
  }

  AcFunUserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AcFunUserInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AcFunUserInfo& from);
  void MergeFrom(const AcFunUserInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AcFunUserInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.AcFunUserInfo";
  }
  protected:
  explicit AcFunUserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kUserIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 userId = 1;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int64 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.AcFunUserInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int64 userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_acfun_2elive_2eproto;
};
// -------------------------------------------------------------------

class AcfunActionSignalThrowBanana final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.AcfunActionSignalThrowBanana) */ {
 public:
  inline AcfunActionSignalThrowBanana() : AcfunActionSignalThrowBanana(nullptr) {}
  ~AcfunActionSignalThrowBanana() override;
  explicit constexpr AcfunActionSignalThrowBanana(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AcfunActionSignalThrowBanana(const AcfunActionSignalThrowBanana& from);
  AcfunActionSignalThrowBanana(AcfunActionSignalThrowBanana&& from) noexcept
    : AcfunActionSignalThrowBanana() {
    *this = ::std::move(from);
  }

  inline AcfunActionSignalThrowBanana& operator=(const AcfunActionSignalThrowBanana& from) {
    CopyFrom(from);
    return *this;
  }
  inline AcfunActionSignalThrowBanana& operator=(AcfunActionSignalThrowBanana&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AcfunActionSignalThrowBanana& default_instance() {
    return *internal_default_instance();
  }
  static inline const AcfunActionSignalThrowBanana* internal_default_instance() {
    return reinterpret_cast<const AcfunActionSignalThrowBanana*>(
               &_AcfunActionSignalThrowBanana_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AcfunActionSignalThrowBanana& a, AcfunActionSignalThrowBanana& b) {
    a.Swap(&b);
  }
  inline void Swap(AcfunActionSignalThrowBanana* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AcfunActionSignalThrowBanana* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AcfunActionSignalThrowBanana* New() const final {
    return new AcfunActionSignalThrowBanana();
  }

  AcfunActionSignalThrowBanana* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AcfunActionSignalThrowBanana>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AcfunActionSignalThrowBanana& from);
  void MergeFrom(const AcfunActionSignalThrowBanana& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AcfunActionSignalThrowBanana* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.AcfunActionSignalThrowBanana";
  }
  protected:
  explicit AcfunActionSignalThrowBanana(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVisitorFieldNumber = 1,
    kSendTimeMsFieldNumber = 3,
    kCountFieldNumber = 2,
  };
  // .AcFunDanmu.AcFunUserInfo visitor = 1;
  bool has_visitor() const;
  private:
  bool _internal_has_visitor() const;
  public:
  void clear_visitor();
  const ::AcFunDanmu::AcFunUserInfo& visitor() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::AcFunDanmu::AcFunUserInfo* release_visitor();
  ::AcFunDanmu::AcFunUserInfo* mutable_visitor();
  void set_allocated_visitor(::AcFunDanmu::AcFunUserInfo* visitor);
  private:
  const ::AcFunDanmu::AcFunUserInfo& _internal_visitor() const;
  ::AcFunDanmu::AcFunUserInfo* _internal_mutable_visitor();
  public:
  void unsafe_arena_set_allocated_visitor(
      ::AcFunDanmu::AcFunUserInfo* visitor);
  ::AcFunDanmu::AcFunUserInfo* unsafe_arena_release_visitor();

  // int64 sendTimeMs = 3;
  void clear_sendtimems();
  ::PROTOBUF_NAMESPACE_ID::int64 sendtimems() const;
  void set_sendtimems(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sendtimems() const;
  void _internal_set_sendtimems(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.AcfunActionSignalThrowBanana)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::AcFunDanmu::AcFunUserInfo* visitor_;
  ::PROTOBUF_NAMESPACE_ID::int64 sendtimems_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_acfun_2elive_2eproto;
};
// -------------------------------------------------------------------

class AcfunStateSignalDisplayInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.AcfunStateSignalDisplayInfo) */ {
 public:
  inline AcfunStateSignalDisplayInfo() : AcfunStateSignalDisplayInfo(nullptr) {}
  ~AcfunStateSignalDisplayInfo() override;
  explicit constexpr AcfunStateSignalDisplayInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AcfunStateSignalDisplayInfo(const AcfunStateSignalDisplayInfo& from);
  AcfunStateSignalDisplayInfo(AcfunStateSignalDisplayInfo&& from) noexcept
    : AcfunStateSignalDisplayInfo() {
    *this = ::std::move(from);
  }

  inline AcfunStateSignalDisplayInfo& operator=(const AcfunStateSignalDisplayInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AcfunStateSignalDisplayInfo& operator=(AcfunStateSignalDisplayInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AcfunStateSignalDisplayInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const AcfunStateSignalDisplayInfo* internal_default_instance() {
    return reinterpret_cast<const AcfunStateSignalDisplayInfo*>(
               &_AcfunStateSignalDisplayInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AcfunStateSignalDisplayInfo& a, AcfunStateSignalDisplayInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AcfunStateSignalDisplayInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AcfunStateSignalDisplayInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AcfunStateSignalDisplayInfo* New() const final {
    return new AcfunStateSignalDisplayInfo();
  }

  AcfunStateSignalDisplayInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AcfunStateSignalDisplayInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AcfunStateSignalDisplayInfo& from);
  void MergeFrom(const AcfunStateSignalDisplayInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AcfunStateSignalDisplayInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.AcfunStateSignalDisplayInfo";
  }
  protected:
  explicit AcfunStateSignalDisplayInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBananaCountFieldNumber = 1,
  };
  // string bananaCount = 1;
  void clear_bananacount();
  const std::string& bananacount() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bananacount(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bananacount();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_bananacount();
  void set_allocated_bananacount(std::string* bananacount);
  private:
  const std::string& _internal_bananacount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bananacount(const std::string& value);
  std::string* _internal_mutable_bananacount();
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.AcfunStateSignalDisplayInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bananacount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_acfun_2elive_2eproto;
};
// -------------------------------------------------------------------

class AcfunActionSignalJoinClub final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.AcfunActionSignalJoinClub) */ {
 public:
  inline AcfunActionSignalJoinClub() : AcfunActionSignalJoinClub(nullptr) {}
  ~AcfunActionSignalJoinClub() override;
  explicit constexpr AcfunActionSignalJoinClub(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AcfunActionSignalJoinClub(const AcfunActionSignalJoinClub& from);
  AcfunActionSignalJoinClub(AcfunActionSignalJoinClub&& from) noexcept
    : AcfunActionSignalJoinClub() {
    *this = ::std::move(from);
  }

  inline AcfunActionSignalJoinClub& operator=(const AcfunActionSignalJoinClub& from) {
    CopyFrom(from);
    return *this;
  }
  inline AcfunActionSignalJoinClub& operator=(AcfunActionSignalJoinClub&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AcfunActionSignalJoinClub& default_instance() {
    return *internal_default_instance();
  }
  static inline const AcfunActionSignalJoinClub* internal_default_instance() {
    return reinterpret_cast<const AcfunActionSignalJoinClub*>(
               &_AcfunActionSignalJoinClub_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AcfunActionSignalJoinClub& a, AcfunActionSignalJoinClub& b) {
    a.Swap(&b);
  }
  inline void Swap(AcfunActionSignalJoinClub* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AcfunActionSignalJoinClub* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AcfunActionSignalJoinClub* New() const final {
    return new AcfunActionSignalJoinClub();
  }

  AcfunActionSignalJoinClub* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AcfunActionSignalJoinClub>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AcfunActionSignalJoinClub& from);
  void MergeFrom(const AcfunActionSignalJoinClub& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AcfunActionSignalJoinClub* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.AcfunActionSignalJoinClub";
  }
  protected:
  explicit AcfunActionSignalJoinClub(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFansInfoFieldNumber = 1,
    kUperInfoFieldNumber = 2,
    kJoinTimeMsFieldNumber = 3,
  };
  // .AcFunDanmu.AcFunUserInfo fansInfo = 1;
  bool has_fansinfo() const;
  private:
  bool _internal_has_fansinfo() const;
  public:
  void clear_fansinfo();
  const ::AcFunDanmu::AcFunUserInfo& fansinfo() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::AcFunDanmu::AcFunUserInfo* release_fansinfo();
  ::AcFunDanmu::AcFunUserInfo* mutable_fansinfo();
  void set_allocated_fansinfo(::AcFunDanmu::AcFunUserInfo* fansinfo);
  private:
  const ::AcFunDanmu::AcFunUserInfo& _internal_fansinfo() const;
  ::AcFunDanmu::AcFunUserInfo* _internal_mutable_fansinfo();
  public:
  void unsafe_arena_set_allocated_fansinfo(
      ::AcFunDanmu::AcFunUserInfo* fansinfo);
  ::AcFunDanmu::AcFunUserInfo* unsafe_arena_release_fansinfo();

  // .AcFunDanmu.AcFunUserInfo uperInfo = 2;
  bool has_uperinfo() const;
  private:
  bool _internal_has_uperinfo() const;
  public:
  void clear_uperinfo();
  const ::AcFunDanmu::AcFunUserInfo& uperinfo() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::AcFunDanmu::AcFunUserInfo* release_uperinfo();
  ::AcFunDanmu::AcFunUserInfo* mutable_uperinfo();
  void set_allocated_uperinfo(::AcFunDanmu::AcFunUserInfo* uperinfo);
  private:
  const ::AcFunDanmu::AcFunUserInfo& _internal_uperinfo() const;
  ::AcFunDanmu::AcFunUserInfo* _internal_mutable_uperinfo();
  public:
  void unsafe_arena_set_allocated_uperinfo(
      ::AcFunDanmu::AcFunUserInfo* uperinfo);
  ::AcFunDanmu::AcFunUserInfo* unsafe_arena_release_uperinfo();

  // int64 joinTimeMs = 3;
  void clear_jointimems();
  ::PROTOBUF_NAMESPACE_ID::int64 jointimems() const;
  void set_jointimems(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_jointimems() const;
  void _internal_set_jointimems(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.AcfunActionSignalJoinClub)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::AcFunDanmu::AcFunUserInfo* fansinfo_;
  ::AcFunDanmu::AcFunUserInfo* uperinfo_;
  ::PROTOBUF_NAMESPACE_ID::int64 jointimems_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_acfun_2elive_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AcFunUserInfo

// int64 userId = 1;
inline void AcFunUserInfo::clear_userid() {
  userid_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AcFunUserInfo::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AcFunUserInfo::userid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.AcFunUserInfo.userId)
  return _internal_userid();
}
inline void AcFunUserInfo::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  userid_ = value;
}
inline void AcFunUserInfo::set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.AcFunUserInfo.userId)
}

// string name = 2;
inline void AcFunUserInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& AcFunUserInfo::name() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.AcFunUserInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AcFunUserInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.AcFunUserInfo.name)
}
inline std::string* AcFunUserInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.AcFunUserInfo.name)
  return _internal_mutable_name();
}
inline const std::string& AcFunUserInfo::_internal_name() const {
  return name_.Get();
}
inline void AcFunUserInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AcFunUserInfo::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AcFunUserInfo::release_name() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.AcFunUserInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AcFunUserInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.AcFunUserInfo.name)
}

// -------------------------------------------------------------------

// AcfunActionSignalThrowBanana

// .AcFunDanmu.AcFunUserInfo visitor = 1;
inline bool AcfunActionSignalThrowBanana::_internal_has_visitor() const {
  return this != internal_default_instance() && visitor_ != nullptr;
}
inline bool AcfunActionSignalThrowBanana::has_visitor() const {
  return _internal_has_visitor();
}
inline void AcfunActionSignalThrowBanana::clear_visitor() {
  if (GetArenaForAllocation() == nullptr && visitor_ != nullptr) {
    delete visitor_;
  }
  visitor_ = nullptr;
}
inline const ::AcFunDanmu::AcFunUserInfo& AcfunActionSignalThrowBanana::_internal_visitor() const {
  const ::AcFunDanmu::AcFunUserInfo* p = visitor_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::AcFunUserInfo&>(
      ::AcFunDanmu::_AcFunUserInfo_default_instance_);
}
inline const ::AcFunDanmu::AcFunUserInfo& AcfunActionSignalThrowBanana::visitor() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.AcfunActionSignalThrowBanana.visitor)
  return _internal_visitor();
}
inline void AcfunActionSignalThrowBanana::unsafe_arena_set_allocated_visitor(
    ::AcFunDanmu::AcFunUserInfo* visitor) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(visitor_);
  }
  visitor_ = visitor;
  if (visitor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.AcfunActionSignalThrowBanana.visitor)
}
inline ::AcFunDanmu::AcFunUserInfo* AcfunActionSignalThrowBanana::release_visitor() {
  
  ::AcFunDanmu::AcFunUserInfo* temp = visitor_;
  visitor_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::AcFunUserInfo* AcfunActionSignalThrowBanana::unsafe_arena_release_visitor() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.AcfunActionSignalThrowBanana.visitor)
  
  ::AcFunDanmu::AcFunUserInfo* temp = visitor_;
  visitor_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::AcFunUserInfo* AcfunActionSignalThrowBanana::_internal_mutable_visitor() {
  
  if (visitor_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::AcFunUserInfo>(GetArenaForAllocation());
    visitor_ = p;
  }
  return visitor_;
}
inline ::AcFunDanmu::AcFunUserInfo* AcfunActionSignalThrowBanana::mutable_visitor() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.AcfunActionSignalThrowBanana.visitor)
  return _internal_mutable_visitor();
}
inline void AcfunActionSignalThrowBanana::set_allocated_visitor(::AcFunDanmu::AcFunUserInfo* visitor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete visitor_;
  }
  if (visitor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::AcFunDanmu::AcFunUserInfo>::GetOwningArena(visitor);
    if (message_arena != submessage_arena) {
      visitor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, visitor, submessage_arena);
    }
    
  } else {
    
  }
  visitor_ = visitor;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.AcfunActionSignalThrowBanana.visitor)
}

// int32 count = 2;
inline void AcfunActionSignalThrowBanana::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AcfunActionSignalThrowBanana::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AcfunActionSignalThrowBanana::count() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.AcfunActionSignalThrowBanana.count)
  return _internal_count();
}
inline void AcfunActionSignalThrowBanana::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void AcfunActionSignalThrowBanana::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.AcfunActionSignalThrowBanana.count)
}

// int64 sendTimeMs = 3;
inline void AcfunActionSignalThrowBanana::clear_sendtimems() {
  sendtimems_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AcfunActionSignalThrowBanana::_internal_sendtimems() const {
  return sendtimems_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AcfunActionSignalThrowBanana::sendtimems() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.AcfunActionSignalThrowBanana.sendTimeMs)
  return _internal_sendtimems();
}
inline void AcfunActionSignalThrowBanana::_internal_set_sendtimems(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  sendtimems_ = value;
}
inline void AcfunActionSignalThrowBanana::set_sendtimems(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sendtimems(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.AcfunActionSignalThrowBanana.sendTimeMs)
}

// -------------------------------------------------------------------

// AcfunStateSignalDisplayInfo

// string bananaCount = 1;
inline void AcfunStateSignalDisplayInfo::clear_bananacount() {
  bananacount_.ClearToEmpty();
}
inline const std::string& AcfunStateSignalDisplayInfo::bananacount() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.AcfunStateSignalDisplayInfo.bananaCount)
  return _internal_bananacount();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AcfunStateSignalDisplayInfo::set_bananacount(ArgT0&& arg0, ArgT... args) {
 
 bananacount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.AcfunStateSignalDisplayInfo.bananaCount)
}
inline std::string* AcfunStateSignalDisplayInfo::mutable_bananacount() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.AcfunStateSignalDisplayInfo.bananaCount)
  return _internal_mutable_bananacount();
}
inline const std::string& AcfunStateSignalDisplayInfo::_internal_bananacount() const {
  return bananacount_.Get();
}
inline void AcfunStateSignalDisplayInfo::_internal_set_bananacount(const std::string& value) {
  
  bananacount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AcfunStateSignalDisplayInfo::_internal_mutable_bananacount() {
  
  return bananacount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AcfunStateSignalDisplayInfo::release_bananacount() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.AcfunStateSignalDisplayInfo.bananaCount)
  return bananacount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AcfunStateSignalDisplayInfo::set_allocated_bananacount(std::string* bananacount) {
  if (bananacount != nullptr) {
    
  } else {
    
  }
  bananacount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bananacount,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.AcfunStateSignalDisplayInfo.bananaCount)
}

// -------------------------------------------------------------------

// AcfunActionSignalJoinClub

// .AcFunDanmu.AcFunUserInfo fansInfo = 1;
inline bool AcfunActionSignalJoinClub::_internal_has_fansinfo() const {
  return this != internal_default_instance() && fansinfo_ != nullptr;
}
inline bool AcfunActionSignalJoinClub::has_fansinfo() const {
  return _internal_has_fansinfo();
}
inline void AcfunActionSignalJoinClub::clear_fansinfo() {
  if (GetArenaForAllocation() == nullptr && fansinfo_ != nullptr) {
    delete fansinfo_;
  }
  fansinfo_ = nullptr;
}
inline const ::AcFunDanmu::AcFunUserInfo& AcfunActionSignalJoinClub::_internal_fansinfo() const {
  const ::AcFunDanmu::AcFunUserInfo* p = fansinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::AcFunUserInfo&>(
      ::AcFunDanmu::_AcFunUserInfo_default_instance_);
}
inline const ::AcFunDanmu::AcFunUserInfo& AcfunActionSignalJoinClub::fansinfo() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.AcfunActionSignalJoinClub.fansInfo)
  return _internal_fansinfo();
}
inline void AcfunActionSignalJoinClub::unsafe_arena_set_allocated_fansinfo(
    ::AcFunDanmu::AcFunUserInfo* fansinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fansinfo_);
  }
  fansinfo_ = fansinfo;
  if (fansinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.AcfunActionSignalJoinClub.fansInfo)
}
inline ::AcFunDanmu::AcFunUserInfo* AcfunActionSignalJoinClub::release_fansinfo() {
  
  ::AcFunDanmu::AcFunUserInfo* temp = fansinfo_;
  fansinfo_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::AcFunUserInfo* AcfunActionSignalJoinClub::unsafe_arena_release_fansinfo() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.AcfunActionSignalJoinClub.fansInfo)
  
  ::AcFunDanmu::AcFunUserInfo* temp = fansinfo_;
  fansinfo_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::AcFunUserInfo* AcfunActionSignalJoinClub::_internal_mutable_fansinfo() {
  
  if (fansinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::AcFunUserInfo>(GetArenaForAllocation());
    fansinfo_ = p;
  }
  return fansinfo_;
}
inline ::AcFunDanmu::AcFunUserInfo* AcfunActionSignalJoinClub::mutable_fansinfo() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.AcfunActionSignalJoinClub.fansInfo)
  return _internal_mutable_fansinfo();
}
inline void AcfunActionSignalJoinClub::set_allocated_fansinfo(::AcFunDanmu::AcFunUserInfo* fansinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete fansinfo_;
  }
  if (fansinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::AcFunDanmu::AcFunUserInfo>::GetOwningArena(fansinfo);
    if (message_arena != submessage_arena) {
      fansinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fansinfo, submessage_arena);
    }
    
  } else {
    
  }
  fansinfo_ = fansinfo;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.AcfunActionSignalJoinClub.fansInfo)
}

// .AcFunDanmu.AcFunUserInfo uperInfo = 2;
inline bool AcfunActionSignalJoinClub::_internal_has_uperinfo() const {
  return this != internal_default_instance() && uperinfo_ != nullptr;
}
inline bool AcfunActionSignalJoinClub::has_uperinfo() const {
  return _internal_has_uperinfo();
}
inline void AcfunActionSignalJoinClub::clear_uperinfo() {
  if (GetArenaForAllocation() == nullptr && uperinfo_ != nullptr) {
    delete uperinfo_;
  }
  uperinfo_ = nullptr;
}
inline const ::AcFunDanmu::AcFunUserInfo& AcfunActionSignalJoinClub::_internal_uperinfo() const {
  const ::AcFunDanmu::AcFunUserInfo* p = uperinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::AcFunUserInfo&>(
      ::AcFunDanmu::_AcFunUserInfo_default_instance_);
}
inline const ::AcFunDanmu::AcFunUserInfo& AcfunActionSignalJoinClub::uperinfo() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.AcfunActionSignalJoinClub.uperInfo)
  return _internal_uperinfo();
}
inline void AcfunActionSignalJoinClub::unsafe_arena_set_allocated_uperinfo(
    ::AcFunDanmu::AcFunUserInfo* uperinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uperinfo_);
  }
  uperinfo_ = uperinfo;
  if (uperinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.AcfunActionSignalJoinClub.uperInfo)
}
inline ::AcFunDanmu::AcFunUserInfo* AcfunActionSignalJoinClub::release_uperinfo() {
  
  ::AcFunDanmu::AcFunUserInfo* temp = uperinfo_;
  uperinfo_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::AcFunUserInfo* AcfunActionSignalJoinClub::unsafe_arena_release_uperinfo() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.AcfunActionSignalJoinClub.uperInfo)
  
  ::AcFunDanmu::AcFunUserInfo* temp = uperinfo_;
  uperinfo_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::AcFunUserInfo* AcfunActionSignalJoinClub::_internal_mutable_uperinfo() {
  
  if (uperinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::AcFunUserInfo>(GetArenaForAllocation());
    uperinfo_ = p;
  }
  return uperinfo_;
}
inline ::AcFunDanmu::AcFunUserInfo* AcfunActionSignalJoinClub::mutable_uperinfo() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.AcfunActionSignalJoinClub.uperInfo)
  return _internal_mutable_uperinfo();
}
inline void AcfunActionSignalJoinClub::set_allocated_uperinfo(::AcFunDanmu::AcFunUserInfo* uperinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete uperinfo_;
  }
  if (uperinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::AcFunDanmu::AcFunUserInfo>::GetOwningArena(uperinfo);
    if (message_arena != submessage_arena) {
      uperinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uperinfo, submessage_arena);
    }
    
  } else {
    
  }
  uperinfo_ = uperinfo;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.AcfunActionSignalJoinClub.uperInfo)
}

// int64 joinTimeMs = 3;
inline void AcfunActionSignalJoinClub::clear_jointimems() {
  jointimems_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AcfunActionSignalJoinClub::_internal_jointimems() const {
  return jointimems_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AcfunActionSignalJoinClub::jointimems() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.AcfunActionSignalJoinClub.joinTimeMs)
  return _internal_jointimems();
}
inline void AcfunActionSignalJoinClub::_internal_set_jointimems(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  jointimems_ = value;
}
inline void AcfunActionSignalJoinClub::set_jointimems(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_jointimems(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.AcfunActionSignalJoinClub.joinTimeMs)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace AcFunDanmu

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_acfun_2elive_2eproto
