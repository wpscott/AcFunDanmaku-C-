// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommonActionSignalGift.proto

#include "CommonActionSignalGift.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace AcFunDanmu {
PROTOBUF_CONSTEXPR CommonActionSignalGift::CommonActionSignalGift(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.combokey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.userinfo_)*/nullptr
  , /*decltype(_impl_.drawgiftinfo_)*/nullptr
  , /*decltype(_impl_.sendtimems_)*/int64_t{0}
  , /*decltype(_impl_.giftid_)*/int64_t{0}
  , /*decltype(_impl_.batchsize_)*/0
  , /*decltype(_impl_.combocount_)*/0
  , /*decltype(_impl_.rank_)*/int64_t{0}
  , /*decltype(_impl_.slotdisplaydurationms_)*/int64_t{0}
  , /*decltype(_impl_.expiredurationms_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CommonActionSignalGiftDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommonActionSignalGiftDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommonActionSignalGiftDefaultTypeInternal() {}
  union {
    CommonActionSignalGift _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommonActionSignalGiftDefaultTypeInternal _CommonActionSignalGift_default_instance_;
}  // namespace AcFunDanmu
static ::_pb::Metadata file_level_metadata_CommonActionSignalGift_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_CommonActionSignalGift_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_CommonActionSignalGift_2eproto = nullptr;

const uint32_t TableStruct_CommonActionSignalGift_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonActionSignalGift, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonActionSignalGift, _impl_.userinfo_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonActionSignalGift, _impl_.sendtimems_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonActionSignalGift, _impl_.giftid_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonActionSignalGift, _impl_.batchsize_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonActionSignalGift, _impl_.combocount_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonActionSignalGift, _impl_.rank_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonActionSignalGift, _impl_.combokey_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonActionSignalGift, _impl_.slotdisplaydurationms_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonActionSignalGift, _impl_.expiredurationms_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonActionSignalGift, _impl_.drawgiftinfo_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::AcFunDanmu::CommonActionSignalGift)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::AcFunDanmu::_CommonActionSignalGift_default_instance_._instance,
};

const char descriptor_table_protodef_CommonActionSignalGift_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034CommonActionSignalGift.proto\022\nAcFunDan"
  "mu\032\024ZtLiveUserInfo.proto\032\024ZtDrawGiftInfo"
  ".proto\"\234\002\n\026CommonActionSignalGift\022,\n\010use"
  "rInfo\030\001 \001(\0132\032.AcFunDanmu.ZtLiveUserInfo\022"
  "\022\n\nsendTimeMs\030\002 \001(\003\022\016\n\006giftId\030\003 \001(\003\022\021\n\tb"
  "atchSize\030\004 \001(\005\022\022\n\ncomboCount\030\005 \001(\005\022\014\n\004ra"
  "nk\030\006 \001(\003\022\020\n\010comboKey\030\007 \001(\t\022\035\n\025slotDispla"
  "yDurationMs\030\010 \001(\003\022\030\n\020expireDurationMs\030\t "
  "\001(\003\0220\n\014drawGiftInfo\030\n \001(\0132\032.AcFunDanmu.Z"
  "tDrawGiftInfob\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_CommonActionSignalGift_2eproto_deps[2] = {
  &::descriptor_table_ZtDrawGiftInfo_2eproto,
  &::descriptor_table_ZtLiveUserInfo_2eproto,
};
static ::_pbi::once_flag descriptor_table_CommonActionSignalGift_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_CommonActionSignalGift_2eproto = {
    false, false, 381, descriptor_table_protodef_CommonActionSignalGift_2eproto,
    "CommonActionSignalGift.proto",
    &descriptor_table_CommonActionSignalGift_2eproto_once, descriptor_table_CommonActionSignalGift_2eproto_deps, 2, 1,
    schemas, file_default_instances, TableStruct_CommonActionSignalGift_2eproto::offsets,
    file_level_metadata_CommonActionSignalGift_2eproto, file_level_enum_descriptors_CommonActionSignalGift_2eproto,
    file_level_service_descriptors_CommonActionSignalGift_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_CommonActionSignalGift_2eproto_getter() {
  return &descriptor_table_CommonActionSignalGift_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_CommonActionSignalGift_2eproto(&descriptor_table_CommonActionSignalGift_2eproto);
namespace AcFunDanmu {

// ===================================================================

class CommonActionSignalGift::_Internal {
 public:
  static const ::AcFunDanmu::ZtLiveUserInfo& userinfo(const CommonActionSignalGift* msg);
  static const ::AcFunDanmu::ZtDrawGiftInfo& drawgiftinfo(const CommonActionSignalGift* msg);
};

const ::AcFunDanmu::ZtLiveUserInfo&
CommonActionSignalGift::_Internal::userinfo(const CommonActionSignalGift* msg) {
  return *msg->_impl_.userinfo_;
}
const ::AcFunDanmu::ZtDrawGiftInfo&
CommonActionSignalGift::_Internal::drawgiftinfo(const CommonActionSignalGift* msg) {
  return *msg->_impl_.drawgiftinfo_;
}
void CommonActionSignalGift::clear_userinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.userinfo_ != nullptr) {
    delete _impl_.userinfo_;
  }
  _impl_.userinfo_ = nullptr;
}
void CommonActionSignalGift::clear_drawgiftinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.drawgiftinfo_ != nullptr) {
    delete _impl_.drawgiftinfo_;
  }
  _impl_.drawgiftinfo_ = nullptr;
}
CommonActionSignalGift::CommonActionSignalGift(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.CommonActionSignalGift)
}
CommonActionSignalGift::CommonActionSignalGift(const CommonActionSignalGift& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommonActionSignalGift* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.combokey_){}
    , decltype(_impl_.userinfo_){nullptr}
    , decltype(_impl_.drawgiftinfo_){nullptr}
    , decltype(_impl_.sendtimems_){}
    , decltype(_impl_.giftid_){}
    , decltype(_impl_.batchsize_){}
    , decltype(_impl_.combocount_){}
    , decltype(_impl_.rank_){}
    , decltype(_impl_.slotdisplaydurationms_){}
    , decltype(_impl_.expiredurationms_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.combokey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.combokey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_combokey().empty()) {
    _this->_impl_.combokey_.Set(from._internal_combokey(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_userinfo()) {
    _this->_impl_.userinfo_ = new ::AcFunDanmu::ZtLiveUserInfo(*from._impl_.userinfo_);
  }
  if (from._internal_has_drawgiftinfo()) {
    _this->_impl_.drawgiftinfo_ = new ::AcFunDanmu::ZtDrawGiftInfo(*from._impl_.drawgiftinfo_);
  }
  ::memcpy(&_impl_.sendtimems_, &from._impl_.sendtimems_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.expiredurationms_) -
    reinterpret_cast<char*>(&_impl_.sendtimems_)) + sizeof(_impl_.expiredurationms_));
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.CommonActionSignalGift)
}

inline void CommonActionSignalGift::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.combokey_){}
    , decltype(_impl_.userinfo_){nullptr}
    , decltype(_impl_.drawgiftinfo_){nullptr}
    , decltype(_impl_.sendtimems_){int64_t{0}}
    , decltype(_impl_.giftid_){int64_t{0}}
    , decltype(_impl_.batchsize_){0}
    , decltype(_impl_.combocount_){0}
    , decltype(_impl_.rank_){int64_t{0}}
    , decltype(_impl_.slotdisplaydurationms_){int64_t{0}}
    , decltype(_impl_.expiredurationms_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.combokey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.combokey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CommonActionSignalGift::~CommonActionSignalGift() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.CommonActionSignalGift)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommonActionSignalGift::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.combokey_.Destroy();
  if (this != internal_default_instance()) delete _impl_.userinfo_;
  if (this != internal_default_instance()) delete _impl_.drawgiftinfo_;
}

void CommonActionSignalGift::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommonActionSignalGift::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.CommonActionSignalGift)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.combokey_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.userinfo_ != nullptr) {
    delete _impl_.userinfo_;
  }
  _impl_.userinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.drawgiftinfo_ != nullptr) {
    delete _impl_.drawgiftinfo_;
  }
  _impl_.drawgiftinfo_ = nullptr;
  ::memset(&_impl_.sendtimems_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.expiredurationms_) -
      reinterpret_cast<char*>(&_impl_.sendtimems_)) + sizeof(_impl_.expiredurationms_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommonActionSignalGift::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .AcFunDanmu.ZtLiveUserInfo userInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_userinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 sendTimeMs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.sendtimems_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 giftId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.giftid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 batchSize = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.batchsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 comboCount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.combocount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 rank = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string comboKey = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_combokey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.CommonActionSignalGift.comboKey"));
        } else
          goto handle_unusual;
        continue;
      // int64 slotDisplayDurationMs = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.slotdisplaydurationms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 expireDurationMs = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.expiredurationms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.ZtDrawGiftInfo drawGiftInfo = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_drawgiftinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommonActionSignalGift::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.CommonActionSignalGift)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .AcFunDanmu.ZtLiveUserInfo userInfo = 1;
  if (this->_internal_has_userinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::userinfo(this),
        _Internal::userinfo(this).GetCachedSize(), target, stream);
  }

  // int64 sendTimeMs = 2;
  if (this->_internal_sendtimems() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_sendtimems(), target);
  }

  // int64 giftId = 3;
  if (this->_internal_giftid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_giftid(), target);
  }

  // int32 batchSize = 4;
  if (this->_internal_batchsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_batchsize(), target);
  }

  // int32 comboCount = 5;
  if (this->_internal_combocount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_combocount(), target);
  }

  // int64 rank = 6;
  if (this->_internal_rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_rank(), target);
  }

  // string comboKey = 7;
  if (!this->_internal_combokey().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_combokey().data(), static_cast<int>(this->_internal_combokey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.CommonActionSignalGift.comboKey");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_combokey(), target);
  }

  // int64 slotDisplayDurationMs = 8;
  if (this->_internal_slotdisplaydurationms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_slotdisplaydurationms(), target);
  }

  // int64 expireDurationMs = 9;
  if (this->_internal_expiredurationms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_expiredurationms(), target);
  }

  // .AcFunDanmu.ZtDrawGiftInfo drawGiftInfo = 10;
  if (this->_internal_has_drawgiftinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::drawgiftinfo(this),
        _Internal::drawgiftinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.CommonActionSignalGift)
  return target;
}

size_t CommonActionSignalGift::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.CommonActionSignalGift)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string comboKey = 7;
  if (!this->_internal_combokey().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_combokey());
  }

  // .AcFunDanmu.ZtLiveUserInfo userInfo = 1;
  if (this->_internal_has_userinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.userinfo_);
  }

  // .AcFunDanmu.ZtDrawGiftInfo drawGiftInfo = 10;
  if (this->_internal_has_drawgiftinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.drawgiftinfo_);
  }

  // int64 sendTimeMs = 2;
  if (this->_internal_sendtimems() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_sendtimems());
  }

  // int64 giftId = 3;
  if (this->_internal_giftid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_giftid());
  }

  // int32 batchSize = 4;
  if (this->_internal_batchsize() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_batchsize());
  }

  // int32 comboCount = 5;
  if (this->_internal_combocount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_combocount());
  }

  // int64 rank = 6;
  if (this->_internal_rank() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_rank());
  }

  // int64 slotDisplayDurationMs = 8;
  if (this->_internal_slotdisplaydurationms() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_slotdisplaydurationms());
  }

  // int64 expireDurationMs = 9;
  if (this->_internal_expiredurationms() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_expiredurationms());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommonActionSignalGift::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommonActionSignalGift::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommonActionSignalGift::GetClassData() const { return &_class_data_; }


void CommonActionSignalGift::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommonActionSignalGift*>(&to_msg);
  auto& from = static_cast<const CommonActionSignalGift&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.CommonActionSignalGift)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_combokey().empty()) {
    _this->_internal_set_combokey(from._internal_combokey());
  }
  if (from._internal_has_userinfo()) {
    _this->_internal_mutable_userinfo()->::AcFunDanmu::ZtLiveUserInfo::MergeFrom(
        from._internal_userinfo());
  }
  if (from._internal_has_drawgiftinfo()) {
    _this->_internal_mutable_drawgiftinfo()->::AcFunDanmu::ZtDrawGiftInfo::MergeFrom(
        from._internal_drawgiftinfo());
  }
  if (from._internal_sendtimems() != 0) {
    _this->_internal_set_sendtimems(from._internal_sendtimems());
  }
  if (from._internal_giftid() != 0) {
    _this->_internal_set_giftid(from._internal_giftid());
  }
  if (from._internal_batchsize() != 0) {
    _this->_internal_set_batchsize(from._internal_batchsize());
  }
  if (from._internal_combocount() != 0) {
    _this->_internal_set_combocount(from._internal_combocount());
  }
  if (from._internal_rank() != 0) {
    _this->_internal_set_rank(from._internal_rank());
  }
  if (from._internal_slotdisplaydurationms() != 0) {
    _this->_internal_set_slotdisplaydurationms(from._internal_slotdisplaydurationms());
  }
  if (from._internal_expiredurationms() != 0) {
    _this->_internal_set_expiredurationms(from._internal_expiredurationms());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommonActionSignalGift::CopyFrom(const CommonActionSignalGift& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.CommonActionSignalGift)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonActionSignalGift::IsInitialized() const {
  return true;
}

void CommonActionSignalGift::InternalSwap(CommonActionSignalGift* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.combokey_, lhs_arena,
      &other->_impl_.combokey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommonActionSignalGift, _impl_.expiredurationms_)
      + sizeof(CommonActionSignalGift::_impl_.expiredurationms_)
      - PROTOBUF_FIELD_OFFSET(CommonActionSignalGift, _impl_.userinfo_)>(
          reinterpret_cast<char*>(&_impl_.userinfo_),
          reinterpret_cast<char*>(&other->_impl_.userinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommonActionSignalGift::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CommonActionSignalGift_2eproto_getter, &descriptor_table_CommonActionSignalGift_2eproto_once,
      file_level_metadata_CommonActionSignalGift_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AcFunDanmu::CommonActionSignalGift*
Arena::CreateMaybeMessage< ::AcFunDanmu::CommonActionSignalGift >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::CommonActionSignalGift >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
