// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VoiceCallEventPush.proto

#include "VoiceCallEventPush.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Voice {
namespace Call {
PROTOBUF_CONSTEXPR VoiceCallEventPush::VoiceCallEventPush(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.roomid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.operator__)*/nullptr
  , /*decltype(_impl_.voiceCallEvent_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct VoiceCallEventPushDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VoiceCallEventPushDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VoiceCallEventPushDefaultTypeInternal() {}
  union {
    VoiceCallEventPush _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VoiceCallEventPushDefaultTypeInternal _VoiceCallEventPush_default_instance_;
}  // namespace Call
}  // namespace Voice
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu
static ::_pb::Metadata file_level_metadata_VoiceCallEventPush_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_VoiceCallEventPush_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_VoiceCallEventPush_2eproto = nullptr;

const uint32_t TableStruct_VoiceCallEventPush_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallEventPush, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallEventPush, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallEventPush, _impl_.roomid_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallEventPush, _impl_.operator__),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallEventPush, _impl_.voiceCallEvent_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallEventPush)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::AcFunDanmu::Im::Cloud::Voice::Call::_VoiceCallEventPush_default_instance_._instance,
};

const char descriptor_table_protodef_VoiceCallEventPush_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030VoiceCallEventPush.proto\022\036AcFunDanmu.I"
  "m.Cloud.Voice.Call\032\nUser.proto\032\034VoiceCal"
  "lAcceptedEvent.proto\032$VoiceCallAlreadyPr"
  "ocessedEvent.proto\032\035VoiceCallCancelledEv"
  "ent.proto\032\032VoiceCallClosedEvent.proto\032 V"
  "oiceCallDetailUpdateEvent.proto\032\034VoiceCa"
  "llRejectedEvent.proto\032\033VoiceCallRequestE"
  "vent.proto\032\033VoiceCallTimeoutEvent.proto\""
  "\375\005\n\022VoiceCallEventPush\022M\n\014requestEvent\030\024"
  " \001(\01325.AcFunDanmu.Im.Cloud.Voice.Call.Vo"
  "iceCallRequestEventH\000\022O\n\racceptedEvent\030\025"
  " \001(\01326.AcFunDanmu.Im.Cloud.Voice.Call.Vo"
  "iceCallAcceptedEventH\000\022O\n\rrejectedEvent\030"
  "\026 \001(\01326.AcFunDanmu.Im.Cloud.Voice.Call.V"
  "oiceCallRejectedEventH\000\022K\n\013closedEvent\030\027"
  " \001(\01324.AcFunDanmu.Im.Cloud.Voice.Call.Vo"
  "iceCallClosedEventH\000\022Q\n\016cancelledEvent\030\030"
  " \001(\01327.AcFunDanmu.Im.Cloud.Voice.Call.Vo"
  "iceCallCancelledEventH\000\022_\n\025alreadyProces"
  "sedEvent\030\031 \001(\0132>.AcFunDanmu.Im.Cloud.Voi"
  "ce.Call.VoiceCallAlreadyProcessedEventH\000"
  "\022M\n\014timeoutEvent\030\032 \001(\01325.AcFunDanmu.Im.C"
  "loud.Voice.Call.VoiceCallTimeoutEventH\000\022"
  "W\n\021detailUpdateEvent\030\033 \001(\0132:.AcFunDanmu."
  "Im.Cloud.Voice.Call.VoiceCallDetailUpdat"
  "eEventH\000\022\016\n\006roomId\030\001 \001(\t\022+\n\010operator\030\002 \001"
  "(\0132\031.AcFunDanmu.Im.Basic.UserB\020\n\016voiceCa"
  "llEventb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_VoiceCallEventPush_2eproto_deps[9] = {
  &::descriptor_table_User_2eproto,
  &::descriptor_table_VoiceCallAcceptedEvent_2eproto,
  &::descriptor_table_VoiceCallAlreadyProcessedEvent_2eproto,
  &::descriptor_table_VoiceCallCancelledEvent_2eproto,
  &::descriptor_table_VoiceCallClosedEvent_2eproto,
  &::descriptor_table_VoiceCallDetailUpdateEvent_2eproto,
  &::descriptor_table_VoiceCallRejectedEvent_2eproto,
  &::descriptor_table_VoiceCallRequestEvent_2eproto,
  &::descriptor_table_VoiceCallTimeoutEvent_2eproto,
};
static ::_pbi::once_flag descriptor_table_VoiceCallEventPush_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_VoiceCallEventPush_2eproto = {
    false, false, 1095, descriptor_table_protodef_VoiceCallEventPush_2eproto,
    "VoiceCallEventPush.proto",
    &descriptor_table_VoiceCallEventPush_2eproto_once, descriptor_table_VoiceCallEventPush_2eproto_deps, 9, 1,
    schemas, file_default_instances, TableStruct_VoiceCallEventPush_2eproto::offsets,
    file_level_metadata_VoiceCallEventPush_2eproto, file_level_enum_descriptors_VoiceCallEventPush_2eproto,
    file_level_service_descriptors_VoiceCallEventPush_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_VoiceCallEventPush_2eproto_getter() {
  return &descriptor_table_VoiceCallEventPush_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_VoiceCallEventPush_2eproto(&descriptor_table_VoiceCallEventPush_2eproto);
namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Voice {
namespace Call {

// ===================================================================

class VoiceCallEventPush::_Internal {
 public:
  static const ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallRequestEvent& requestevent(const VoiceCallEventPush* msg);
  static const ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallAcceptedEvent& acceptedevent(const VoiceCallEventPush* msg);
  static const ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallRejectedEvent& rejectedevent(const VoiceCallEventPush* msg);
  static const ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallClosedEvent& closedevent(const VoiceCallEventPush* msg);
  static const ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallCancelledEvent& cancelledevent(const VoiceCallEventPush* msg);
  static const ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallAlreadyProcessedEvent& alreadyprocessedevent(const VoiceCallEventPush* msg);
  static const ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallTimeoutEvent& timeoutevent(const VoiceCallEventPush* msg);
  static const ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallDetailUpdateEvent& detailupdateevent(const VoiceCallEventPush* msg);
  static const ::AcFunDanmu::Im::Basic::User& operator_(const VoiceCallEventPush* msg);
};

const ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallRequestEvent&
VoiceCallEventPush::_Internal::requestevent(const VoiceCallEventPush* msg) {
  return *msg->_impl_.voiceCallEvent_.requestevent_;
}
const ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallAcceptedEvent&
VoiceCallEventPush::_Internal::acceptedevent(const VoiceCallEventPush* msg) {
  return *msg->_impl_.voiceCallEvent_.acceptedevent_;
}
const ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallRejectedEvent&
VoiceCallEventPush::_Internal::rejectedevent(const VoiceCallEventPush* msg) {
  return *msg->_impl_.voiceCallEvent_.rejectedevent_;
}
const ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallClosedEvent&
VoiceCallEventPush::_Internal::closedevent(const VoiceCallEventPush* msg) {
  return *msg->_impl_.voiceCallEvent_.closedevent_;
}
const ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallCancelledEvent&
VoiceCallEventPush::_Internal::cancelledevent(const VoiceCallEventPush* msg) {
  return *msg->_impl_.voiceCallEvent_.cancelledevent_;
}
const ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallAlreadyProcessedEvent&
VoiceCallEventPush::_Internal::alreadyprocessedevent(const VoiceCallEventPush* msg) {
  return *msg->_impl_.voiceCallEvent_.alreadyprocessedevent_;
}
const ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallTimeoutEvent&
VoiceCallEventPush::_Internal::timeoutevent(const VoiceCallEventPush* msg) {
  return *msg->_impl_.voiceCallEvent_.timeoutevent_;
}
const ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallDetailUpdateEvent&
VoiceCallEventPush::_Internal::detailupdateevent(const VoiceCallEventPush* msg) {
  return *msg->_impl_.voiceCallEvent_.detailupdateevent_;
}
const ::AcFunDanmu::Im::Basic::User&
VoiceCallEventPush::_Internal::operator_(const VoiceCallEventPush* msg) {
  return *msg->_impl_.operator__;
}
void VoiceCallEventPush::set_allocated_requestevent(::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallRequestEvent* requestevent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_voiceCallEvent();
  if (requestevent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestevent));
    if (message_arena != submessage_arena) {
      requestevent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestevent, submessage_arena);
    }
    set_has_requestevent();
    _impl_.voiceCallEvent_.requestevent_ = requestevent;
  }
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush.requestEvent)
}
void VoiceCallEventPush::clear_requestevent() {
  if (_internal_has_requestevent()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.voiceCallEvent_.requestevent_;
    }
    clear_has_voiceCallEvent();
  }
}
void VoiceCallEventPush::set_allocated_acceptedevent(::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallAcceptedEvent* acceptedevent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_voiceCallEvent();
  if (acceptedevent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acceptedevent));
    if (message_arena != submessage_arena) {
      acceptedevent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acceptedevent, submessage_arena);
    }
    set_has_acceptedevent();
    _impl_.voiceCallEvent_.acceptedevent_ = acceptedevent;
  }
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush.acceptedEvent)
}
void VoiceCallEventPush::clear_acceptedevent() {
  if (_internal_has_acceptedevent()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.voiceCallEvent_.acceptedevent_;
    }
    clear_has_voiceCallEvent();
  }
}
void VoiceCallEventPush::set_allocated_rejectedevent(::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallRejectedEvent* rejectedevent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_voiceCallEvent();
  if (rejectedevent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rejectedevent));
    if (message_arena != submessage_arena) {
      rejectedevent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rejectedevent, submessage_arena);
    }
    set_has_rejectedevent();
    _impl_.voiceCallEvent_.rejectedevent_ = rejectedevent;
  }
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush.rejectedEvent)
}
void VoiceCallEventPush::clear_rejectedevent() {
  if (_internal_has_rejectedevent()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.voiceCallEvent_.rejectedevent_;
    }
    clear_has_voiceCallEvent();
  }
}
void VoiceCallEventPush::set_allocated_closedevent(::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallClosedEvent* closedevent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_voiceCallEvent();
  if (closedevent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(closedevent));
    if (message_arena != submessage_arena) {
      closedevent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, closedevent, submessage_arena);
    }
    set_has_closedevent();
    _impl_.voiceCallEvent_.closedevent_ = closedevent;
  }
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush.closedEvent)
}
void VoiceCallEventPush::clear_closedevent() {
  if (_internal_has_closedevent()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.voiceCallEvent_.closedevent_;
    }
    clear_has_voiceCallEvent();
  }
}
void VoiceCallEventPush::set_allocated_cancelledevent(::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallCancelledEvent* cancelledevent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_voiceCallEvent();
  if (cancelledevent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cancelledevent));
    if (message_arena != submessage_arena) {
      cancelledevent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cancelledevent, submessage_arena);
    }
    set_has_cancelledevent();
    _impl_.voiceCallEvent_.cancelledevent_ = cancelledevent;
  }
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush.cancelledEvent)
}
void VoiceCallEventPush::clear_cancelledevent() {
  if (_internal_has_cancelledevent()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.voiceCallEvent_.cancelledevent_;
    }
    clear_has_voiceCallEvent();
  }
}
void VoiceCallEventPush::set_allocated_alreadyprocessedevent(::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallAlreadyProcessedEvent* alreadyprocessedevent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_voiceCallEvent();
  if (alreadyprocessedevent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alreadyprocessedevent));
    if (message_arena != submessage_arena) {
      alreadyprocessedevent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alreadyprocessedevent, submessage_arena);
    }
    set_has_alreadyprocessedevent();
    _impl_.voiceCallEvent_.alreadyprocessedevent_ = alreadyprocessedevent;
  }
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush.alreadyProcessedEvent)
}
void VoiceCallEventPush::clear_alreadyprocessedevent() {
  if (_internal_has_alreadyprocessedevent()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.voiceCallEvent_.alreadyprocessedevent_;
    }
    clear_has_voiceCallEvent();
  }
}
void VoiceCallEventPush::set_allocated_timeoutevent(::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallTimeoutEvent* timeoutevent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_voiceCallEvent();
  if (timeoutevent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timeoutevent));
    if (message_arena != submessage_arena) {
      timeoutevent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timeoutevent, submessage_arena);
    }
    set_has_timeoutevent();
    _impl_.voiceCallEvent_.timeoutevent_ = timeoutevent;
  }
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush.timeoutEvent)
}
void VoiceCallEventPush::clear_timeoutevent() {
  if (_internal_has_timeoutevent()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.voiceCallEvent_.timeoutevent_;
    }
    clear_has_voiceCallEvent();
  }
}
void VoiceCallEventPush::set_allocated_detailupdateevent(::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallDetailUpdateEvent* detailupdateevent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_voiceCallEvent();
  if (detailupdateevent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(detailupdateevent));
    if (message_arena != submessage_arena) {
      detailupdateevent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detailupdateevent, submessage_arena);
    }
    set_has_detailupdateevent();
    _impl_.voiceCallEvent_.detailupdateevent_ = detailupdateevent;
  }
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush.detailUpdateEvent)
}
void VoiceCallEventPush::clear_detailupdateevent() {
  if (_internal_has_detailupdateevent()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.voiceCallEvent_.detailupdateevent_;
    }
    clear_has_voiceCallEvent();
  }
}
void VoiceCallEventPush::clear_operator_() {
  if (GetArenaForAllocation() == nullptr && _impl_.operator__ != nullptr) {
    delete _impl_.operator__;
  }
  _impl_.operator__ = nullptr;
}
VoiceCallEventPush::VoiceCallEventPush(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush)
}
VoiceCallEventPush::VoiceCallEventPush(const VoiceCallEventPush& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VoiceCallEventPush* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.roomid_){}
    , decltype(_impl_.operator__){nullptr}
    , decltype(_impl_.voiceCallEvent_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.roomid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.roomid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_roomid().empty()) {
    _this->_impl_.roomid_.Set(from._internal_roomid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_operator_()) {
    _this->_impl_.operator__ = new ::AcFunDanmu::Im::Basic::User(*from._impl_.operator__);
  }
  clear_has_voiceCallEvent();
  switch (from.voiceCallEvent_case()) {
    case kRequestEvent: {
      _this->_internal_mutable_requestevent()->::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallRequestEvent::MergeFrom(
          from._internal_requestevent());
      break;
    }
    case kAcceptedEvent: {
      _this->_internal_mutable_acceptedevent()->::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallAcceptedEvent::MergeFrom(
          from._internal_acceptedevent());
      break;
    }
    case kRejectedEvent: {
      _this->_internal_mutable_rejectedevent()->::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallRejectedEvent::MergeFrom(
          from._internal_rejectedevent());
      break;
    }
    case kClosedEvent: {
      _this->_internal_mutable_closedevent()->::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallClosedEvent::MergeFrom(
          from._internal_closedevent());
      break;
    }
    case kCancelledEvent: {
      _this->_internal_mutable_cancelledevent()->::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallCancelledEvent::MergeFrom(
          from._internal_cancelledevent());
      break;
    }
    case kAlreadyProcessedEvent: {
      _this->_internal_mutable_alreadyprocessedevent()->::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallAlreadyProcessedEvent::MergeFrom(
          from._internal_alreadyprocessedevent());
      break;
    }
    case kTimeoutEvent: {
      _this->_internal_mutable_timeoutevent()->::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallTimeoutEvent::MergeFrom(
          from._internal_timeoutevent());
      break;
    }
    case kDetailUpdateEvent: {
      _this->_internal_mutable_detailupdateevent()->::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallDetailUpdateEvent::MergeFrom(
          from._internal_detailupdateevent());
      break;
    }
    case VOICECALLEVENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush)
}

inline void VoiceCallEventPush::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.roomid_){}
    , decltype(_impl_.operator__){nullptr}
    , decltype(_impl_.voiceCallEvent_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.roomid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.roomid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_voiceCallEvent();
}

VoiceCallEventPush::~VoiceCallEventPush() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VoiceCallEventPush::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.roomid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.operator__;
  if (has_voiceCallEvent()) {
    clear_voiceCallEvent();
  }
}

void VoiceCallEventPush::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VoiceCallEventPush::clear_voiceCallEvent() {
// @@protoc_insertion_point(one_of_clear_start:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush)
  switch (voiceCallEvent_case()) {
    case kRequestEvent: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.voiceCallEvent_.requestevent_;
      }
      break;
    }
    case kAcceptedEvent: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.voiceCallEvent_.acceptedevent_;
      }
      break;
    }
    case kRejectedEvent: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.voiceCallEvent_.rejectedevent_;
      }
      break;
    }
    case kClosedEvent: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.voiceCallEvent_.closedevent_;
      }
      break;
    }
    case kCancelledEvent: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.voiceCallEvent_.cancelledevent_;
      }
      break;
    }
    case kAlreadyProcessedEvent: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.voiceCallEvent_.alreadyprocessedevent_;
      }
      break;
    }
    case kTimeoutEvent: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.voiceCallEvent_.timeoutevent_;
      }
      break;
    }
    case kDetailUpdateEvent: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.voiceCallEvent_.detailupdateevent_;
      }
      break;
    }
    case VOICECALLEVENT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VOICECALLEVENT_NOT_SET;
}


void VoiceCallEventPush::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.roomid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.operator__ != nullptr) {
    delete _impl_.operator__;
  }
  _impl_.operator__ = nullptr;
  clear_voiceCallEvent();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VoiceCallEventPush::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string roomId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_roomid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush.roomId"));
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Basic.User operator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_operator_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallRequestEvent requestEvent = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestevent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallAcceptedEvent acceptedEvent = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_acceptedevent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallRejectedEvent rejectedEvent = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_rejectedevent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallClosedEvent closedEvent = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_closedevent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallCancelledEvent cancelledEvent = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_cancelledevent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallAlreadyProcessedEvent alreadyProcessedEvent = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_alreadyprocessedevent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallTimeoutEvent timeoutEvent = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_timeoutevent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallDetailUpdateEvent detailUpdateEvent = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_detailupdateevent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VoiceCallEventPush::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string roomId = 1;
  if (!this->_internal_roomid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roomid().data(), static_cast<int>(this->_internal_roomid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush.roomId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_roomid(), target);
  }

  // .AcFunDanmu.Im.Basic.User operator = 2;
  if (this->_internal_has_operator_()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::operator_(this),
        _Internal::operator_(this).GetCachedSize(), target, stream);
  }

  // .AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallRequestEvent requestEvent = 20;
  if (_internal_has_requestevent()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::requestevent(this),
        _Internal::requestevent(this).GetCachedSize(), target, stream);
  }

  // .AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallAcceptedEvent acceptedEvent = 21;
  if (_internal_has_acceptedevent()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::acceptedevent(this),
        _Internal::acceptedevent(this).GetCachedSize(), target, stream);
  }

  // .AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallRejectedEvent rejectedEvent = 22;
  if (_internal_has_rejectedevent()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::rejectedevent(this),
        _Internal::rejectedevent(this).GetCachedSize(), target, stream);
  }

  // .AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallClosedEvent closedEvent = 23;
  if (_internal_has_closedevent()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::closedevent(this),
        _Internal::closedevent(this).GetCachedSize(), target, stream);
  }

  // .AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallCancelledEvent cancelledEvent = 24;
  if (_internal_has_cancelledevent()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::cancelledevent(this),
        _Internal::cancelledevent(this).GetCachedSize(), target, stream);
  }

  // .AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallAlreadyProcessedEvent alreadyProcessedEvent = 25;
  if (_internal_has_alreadyprocessedevent()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::alreadyprocessedevent(this),
        _Internal::alreadyprocessedevent(this).GetCachedSize(), target, stream);
  }

  // .AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallTimeoutEvent timeoutEvent = 26;
  if (_internal_has_timeoutevent()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, _Internal::timeoutevent(this),
        _Internal::timeoutevent(this).GetCachedSize(), target, stream);
  }

  // .AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallDetailUpdateEvent detailUpdateEvent = 27;
  if (_internal_has_detailupdateevent()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, _Internal::detailupdateevent(this),
        _Internal::detailupdateevent(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush)
  return target;
}

size_t VoiceCallEventPush::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string roomId = 1;
  if (!this->_internal_roomid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roomid());
  }

  // .AcFunDanmu.Im.Basic.User operator = 2;
  if (this->_internal_has_operator_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.operator__);
  }

  switch (voiceCallEvent_case()) {
    // .AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallRequestEvent requestEvent = 20;
    case kRequestEvent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.voiceCallEvent_.requestevent_);
      break;
    }
    // .AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallAcceptedEvent acceptedEvent = 21;
    case kAcceptedEvent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.voiceCallEvent_.acceptedevent_);
      break;
    }
    // .AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallRejectedEvent rejectedEvent = 22;
    case kRejectedEvent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.voiceCallEvent_.rejectedevent_);
      break;
    }
    // .AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallClosedEvent closedEvent = 23;
    case kClosedEvent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.voiceCallEvent_.closedevent_);
      break;
    }
    // .AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallCancelledEvent cancelledEvent = 24;
    case kCancelledEvent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.voiceCallEvent_.cancelledevent_);
      break;
    }
    // .AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallAlreadyProcessedEvent alreadyProcessedEvent = 25;
    case kAlreadyProcessedEvent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.voiceCallEvent_.alreadyprocessedevent_);
      break;
    }
    // .AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallTimeoutEvent timeoutEvent = 26;
    case kTimeoutEvent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.voiceCallEvent_.timeoutevent_);
      break;
    }
    // .AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallDetailUpdateEvent detailUpdateEvent = 27;
    case kDetailUpdateEvent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.voiceCallEvent_.detailupdateevent_);
      break;
    }
    case VOICECALLEVENT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VoiceCallEventPush::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VoiceCallEventPush::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VoiceCallEventPush::GetClassData() const { return &_class_data_; }


void VoiceCallEventPush::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VoiceCallEventPush*>(&to_msg);
  auto& from = static_cast<const VoiceCallEventPush&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_roomid().empty()) {
    _this->_internal_set_roomid(from._internal_roomid());
  }
  if (from._internal_has_operator_()) {
    _this->_internal_mutable_operator_()->::AcFunDanmu::Im::Basic::User::MergeFrom(
        from._internal_operator_());
  }
  switch (from.voiceCallEvent_case()) {
    case kRequestEvent: {
      _this->_internal_mutable_requestevent()->::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallRequestEvent::MergeFrom(
          from._internal_requestevent());
      break;
    }
    case kAcceptedEvent: {
      _this->_internal_mutable_acceptedevent()->::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallAcceptedEvent::MergeFrom(
          from._internal_acceptedevent());
      break;
    }
    case kRejectedEvent: {
      _this->_internal_mutable_rejectedevent()->::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallRejectedEvent::MergeFrom(
          from._internal_rejectedevent());
      break;
    }
    case kClosedEvent: {
      _this->_internal_mutable_closedevent()->::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallClosedEvent::MergeFrom(
          from._internal_closedevent());
      break;
    }
    case kCancelledEvent: {
      _this->_internal_mutable_cancelledevent()->::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallCancelledEvent::MergeFrom(
          from._internal_cancelledevent());
      break;
    }
    case kAlreadyProcessedEvent: {
      _this->_internal_mutable_alreadyprocessedevent()->::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallAlreadyProcessedEvent::MergeFrom(
          from._internal_alreadyprocessedevent());
      break;
    }
    case kTimeoutEvent: {
      _this->_internal_mutable_timeoutevent()->::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallTimeoutEvent::MergeFrom(
          from._internal_timeoutevent());
      break;
    }
    case kDetailUpdateEvent: {
      _this->_internal_mutable_detailupdateevent()->::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallDetailUpdateEvent::MergeFrom(
          from._internal_detailupdateevent());
      break;
    }
    case VOICECALLEVENT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VoiceCallEventPush::CopyFrom(const VoiceCallEventPush& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoiceCallEventPush::IsInitialized() const {
  return true;
}

void VoiceCallEventPush::InternalSwap(VoiceCallEventPush* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.roomid_, lhs_arena,
      &other->_impl_.roomid_, rhs_arena
  );
  swap(_impl_.operator__, other->_impl_.operator__);
  swap(_impl_.voiceCallEvent_, other->_impl_.voiceCallEvent_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata VoiceCallEventPush::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_VoiceCallEventPush_2eproto_getter, &descriptor_table_VoiceCallEventPush_2eproto_once,
      file_level_metadata_VoiceCallEventPush_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Call
}  // namespace Voice
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallEventPush*
Arena::CreateMaybeMessage< ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallEventPush >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallEventPush >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
