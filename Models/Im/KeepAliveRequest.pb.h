// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KeepAliveRequest.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_KeepAliveRequest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_KeepAliveRequest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "PushServiceToken.pb.h"
#include "RegisterRequest.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_KeepAliveRequest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_KeepAliveRequest_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_KeepAliveRequest_2eproto;
namespace AcFunDanmu {
namespace Im {
namespace Basic {
class KeepAliveRequest;
struct KeepAliveRequestDefaultTypeInternal;
extern KeepAliveRequestDefaultTypeInternal _KeepAliveRequest_default_instance_;
}  // namespace Basic
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::Im::Basic::KeepAliveRequest* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Basic::KeepAliveRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {
namespace Im {
namespace Basic {

// ===================================================================

class KeepAliveRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Basic.KeepAliveRequest) */ {
 public:
  inline KeepAliveRequest() : KeepAliveRequest(nullptr) {}
  ~KeepAliveRequest() override;
  explicit PROTOBUF_CONSTEXPR KeepAliveRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeepAliveRequest(const KeepAliveRequest& from);
  KeepAliveRequest(KeepAliveRequest&& from) noexcept
    : KeepAliveRequest() {
    *this = ::std::move(from);
  }

  inline KeepAliveRequest& operator=(const KeepAliveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeepAliveRequest& operator=(KeepAliveRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeepAliveRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeepAliveRequest* internal_default_instance() {
    return reinterpret_cast<const KeepAliveRequest*>(
               &_KeepAliveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KeepAliveRequest& a, KeepAliveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(KeepAliveRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeepAliveRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KeepAliveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KeepAliveRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KeepAliveRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KeepAliveRequest& from) {
    KeepAliveRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeepAliveRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Basic.KeepAliveRequest";
  }
  protected:
  explicit KeepAliveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPushServiceTokenListFieldNumber = 4,
    kPushServiceTokenFieldNumber = 3,
    kPresenceStatusFieldNumber = 1,
    kAppActiveStatusFieldNumber = 2,
    kKeepaliveIntervalSecFieldNumber = 5,
    kIpv6AvailableFieldNumber = 6,
  };
  // repeated .AcFunDanmu.Im.Basic.PushServiceToken pushServiceTokenList = 4;
  int pushservicetokenlist_size() const;
  private:
  int _internal_pushservicetokenlist_size() const;
  public:
  void clear_pushservicetokenlist();
  ::AcFunDanmu::Im::Basic::PushServiceToken* mutable_pushservicetokenlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic::PushServiceToken >*
      mutable_pushservicetokenlist();
  private:
  const ::AcFunDanmu::Im::Basic::PushServiceToken& _internal_pushservicetokenlist(int index) const;
  ::AcFunDanmu::Im::Basic::PushServiceToken* _internal_add_pushservicetokenlist();
  public:
  const ::AcFunDanmu::Im::Basic::PushServiceToken& pushservicetokenlist(int index) const;
  ::AcFunDanmu::Im::Basic::PushServiceToken* add_pushservicetokenlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic::PushServiceToken >&
      pushservicetokenlist() const;

  // .AcFunDanmu.Im.Basic.PushServiceToken pushServiceToken = 3;
  bool has_pushservicetoken() const;
  private:
  bool _internal_has_pushservicetoken() const;
  public:
  void clear_pushservicetoken();
  const ::AcFunDanmu::Im::Basic::PushServiceToken& pushservicetoken() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Basic::PushServiceToken* release_pushservicetoken();
  ::AcFunDanmu::Im::Basic::PushServiceToken* mutable_pushservicetoken();
  void set_allocated_pushservicetoken(::AcFunDanmu::Im::Basic::PushServiceToken* pushservicetoken);
  private:
  const ::AcFunDanmu::Im::Basic::PushServiceToken& _internal_pushservicetoken() const;
  ::AcFunDanmu::Im::Basic::PushServiceToken* _internal_mutable_pushservicetoken();
  public:
  void unsafe_arena_set_allocated_pushservicetoken(
      ::AcFunDanmu::Im::Basic::PushServiceToken* pushservicetoken);
  ::AcFunDanmu::Im::Basic::PushServiceToken* unsafe_arena_release_pushservicetoken();

  // .AcFunDanmu.Im.Basic.RegisterRequest.PresenceStatus presenceStatus = 1;
  void clear_presencestatus();
  ::AcFunDanmu::Im::Basic::RegisterRequest_PresenceStatus presencestatus() const;
  void set_presencestatus(::AcFunDanmu::Im::Basic::RegisterRequest_PresenceStatus value);
  private:
  ::AcFunDanmu::Im::Basic::RegisterRequest_PresenceStatus _internal_presencestatus() const;
  void _internal_set_presencestatus(::AcFunDanmu::Im::Basic::RegisterRequest_PresenceStatus value);
  public:

  // .AcFunDanmu.Im.Basic.RegisterRequest.ActiveStatus appActiveStatus = 2;
  void clear_appactivestatus();
  ::AcFunDanmu::Im::Basic::RegisterRequest_ActiveStatus appactivestatus() const;
  void set_appactivestatus(::AcFunDanmu::Im::Basic::RegisterRequest_ActiveStatus value);
  private:
  ::AcFunDanmu::Im::Basic::RegisterRequest_ActiveStatus _internal_appactivestatus() const;
  void _internal_set_appactivestatus(::AcFunDanmu::Im::Basic::RegisterRequest_ActiveStatus value);
  public:

  // int32 keepaliveIntervalSec = 5;
  void clear_keepaliveintervalsec();
  int32_t keepaliveintervalsec() const;
  void set_keepaliveintervalsec(int32_t value);
  private:
  int32_t _internal_keepaliveintervalsec() const;
  void _internal_set_keepaliveintervalsec(int32_t value);
  public:

  // bool ipv6Available = 6;
  void clear_ipv6available();
  bool ipv6available() const;
  void set_ipv6available(bool value);
  private:
  bool _internal_ipv6available() const;
  void _internal_set_ipv6available(bool value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Basic.KeepAliveRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic::PushServiceToken > pushservicetokenlist_;
    ::AcFunDanmu::Im::Basic::PushServiceToken* pushservicetoken_;
    int presencestatus_;
    int appactivestatus_;
    int32_t keepaliveintervalsec_;
    bool ipv6available_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KeepAliveRequest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KeepAliveRequest

// .AcFunDanmu.Im.Basic.RegisterRequest.PresenceStatus presenceStatus = 1;
inline void KeepAliveRequest::clear_presencestatus() {
  _impl_.presencestatus_ = 0;
}
inline ::AcFunDanmu::Im::Basic::RegisterRequest_PresenceStatus KeepAliveRequest::_internal_presencestatus() const {
  return static_cast< ::AcFunDanmu::Im::Basic::RegisterRequest_PresenceStatus >(_impl_.presencestatus_);
}
inline ::AcFunDanmu::Im::Basic::RegisterRequest_PresenceStatus KeepAliveRequest::presencestatus() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.KeepAliveRequest.presenceStatus)
  return _internal_presencestatus();
}
inline void KeepAliveRequest::_internal_set_presencestatus(::AcFunDanmu::Im::Basic::RegisterRequest_PresenceStatus value) {
  
  _impl_.presencestatus_ = value;
}
inline void KeepAliveRequest::set_presencestatus(::AcFunDanmu::Im::Basic::RegisterRequest_PresenceStatus value) {
  _internal_set_presencestatus(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.KeepAliveRequest.presenceStatus)
}

// .AcFunDanmu.Im.Basic.RegisterRequest.ActiveStatus appActiveStatus = 2;
inline void KeepAliveRequest::clear_appactivestatus() {
  _impl_.appactivestatus_ = 0;
}
inline ::AcFunDanmu::Im::Basic::RegisterRequest_ActiveStatus KeepAliveRequest::_internal_appactivestatus() const {
  return static_cast< ::AcFunDanmu::Im::Basic::RegisterRequest_ActiveStatus >(_impl_.appactivestatus_);
}
inline ::AcFunDanmu::Im::Basic::RegisterRequest_ActiveStatus KeepAliveRequest::appactivestatus() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.KeepAliveRequest.appActiveStatus)
  return _internal_appactivestatus();
}
inline void KeepAliveRequest::_internal_set_appactivestatus(::AcFunDanmu::Im::Basic::RegisterRequest_ActiveStatus value) {
  
  _impl_.appactivestatus_ = value;
}
inline void KeepAliveRequest::set_appactivestatus(::AcFunDanmu::Im::Basic::RegisterRequest_ActiveStatus value) {
  _internal_set_appactivestatus(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.KeepAliveRequest.appActiveStatus)
}

// .AcFunDanmu.Im.Basic.PushServiceToken pushServiceToken = 3;
inline bool KeepAliveRequest::_internal_has_pushservicetoken() const {
  return this != internal_default_instance() && _impl_.pushservicetoken_ != nullptr;
}
inline bool KeepAliveRequest::has_pushservicetoken() const {
  return _internal_has_pushservicetoken();
}
inline const ::AcFunDanmu::Im::Basic::PushServiceToken& KeepAliveRequest::_internal_pushservicetoken() const {
  const ::AcFunDanmu::Im::Basic::PushServiceToken* p = _impl_.pushservicetoken_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic::PushServiceToken&>(
      ::AcFunDanmu::Im::Basic::_PushServiceToken_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic::PushServiceToken& KeepAliveRequest::pushservicetoken() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.KeepAliveRequest.pushServiceToken)
  return _internal_pushservicetoken();
}
inline void KeepAliveRequest::unsafe_arena_set_allocated_pushservicetoken(
    ::AcFunDanmu::Im::Basic::PushServiceToken* pushservicetoken) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pushservicetoken_);
  }
  _impl_.pushservicetoken_ = pushservicetoken;
  if (pushservicetoken) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Basic.KeepAliveRequest.pushServiceToken)
}
inline ::AcFunDanmu::Im::Basic::PushServiceToken* KeepAliveRequest::release_pushservicetoken() {
  
  ::AcFunDanmu::Im::Basic::PushServiceToken* temp = _impl_.pushservicetoken_;
  _impl_.pushservicetoken_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AcFunDanmu::Im::Basic::PushServiceToken* KeepAliveRequest::unsafe_arena_release_pushservicetoken() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.KeepAliveRequest.pushServiceToken)
  
  ::AcFunDanmu::Im::Basic::PushServiceToken* temp = _impl_.pushservicetoken_;
  _impl_.pushservicetoken_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic::PushServiceToken* KeepAliveRequest::_internal_mutable_pushservicetoken() {
  
  if (_impl_.pushservicetoken_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic::PushServiceToken>(GetArenaForAllocation());
    _impl_.pushservicetoken_ = p;
  }
  return _impl_.pushservicetoken_;
}
inline ::AcFunDanmu::Im::Basic::PushServiceToken* KeepAliveRequest::mutable_pushservicetoken() {
  ::AcFunDanmu::Im::Basic::PushServiceToken* _msg = _internal_mutable_pushservicetoken();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.KeepAliveRequest.pushServiceToken)
  return _msg;
}
inline void KeepAliveRequest::set_allocated_pushservicetoken(::AcFunDanmu::Im::Basic::PushServiceToken* pushservicetoken) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pushservicetoken_);
  }
  if (pushservicetoken) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pushservicetoken));
    if (message_arena != submessage_arena) {
      pushservicetoken = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pushservicetoken, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pushservicetoken_ = pushservicetoken;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.KeepAliveRequest.pushServiceToken)
}

// repeated .AcFunDanmu.Im.Basic.PushServiceToken pushServiceTokenList = 4;
inline int KeepAliveRequest::_internal_pushservicetokenlist_size() const {
  return _impl_.pushservicetokenlist_.size();
}
inline int KeepAliveRequest::pushservicetokenlist_size() const {
  return _internal_pushservicetokenlist_size();
}
inline ::AcFunDanmu::Im::Basic::PushServiceToken* KeepAliveRequest::mutable_pushservicetokenlist(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.KeepAliveRequest.pushServiceTokenList)
  return _impl_.pushservicetokenlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic::PushServiceToken >*
KeepAliveRequest::mutable_pushservicetokenlist() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Basic.KeepAliveRequest.pushServiceTokenList)
  return &_impl_.pushservicetokenlist_;
}
inline const ::AcFunDanmu::Im::Basic::PushServiceToken& KeepAliveRequest::_internal_pushservicetokenlist(int index) const {
  return _impl_.pushservicetokenlist_.Get(index);
}
inline const ::AcFunDanmu::Im::Basic::PushServiceToken& KeepAliveRequest::pushservicetokenlist(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.KeepAliveRequest.pushServiceTokenList)
  return _internal_pushservicetokenlist(index);
}
inline ::AcFunDanmu::Im::Basic::PushServiceToken* KeepAliveRequest::_internal_add_pushservicetokenlist() {
  return _impl_.pushservicetokenlist_.Add();
}
inline ::AcFunDanmu::Im::Basic::PushServiceToken* KeepAliveRequest::add_pushservicetokenlist() {
  ::AcFunDanmu::Im::Basic::PushServiceToken* _add = _internal_add_pushservicetokenlist();
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Basic.KeepAliveRequest.pushServiceTokenList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic::PushServiceToken >&
KeepAliveRequest::pushservicetokenlist() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Basic.KeepAliveRequest.pushServiceTokenList)
  return _impl_.pushservicetokenlist_;
}

// int32 keepaliveIntervalSec = 5;
inline void KeepAliveRequest::clear_keepaliveintervalsec() {
  _impl_.keepaliveintervalsec_ = 0;
}
inline int32_t KeepAliveRequest::_internal_keepaliveintervalsec() const {
  return _impl_.keepaliveintervalsec_;
}
inline int32_t KeepAliveRequest::keepaliveintervalsec() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.KeepAliveRequest.keepaliveIntervalSec)
  return _internal_keepaliveintervalsec();
}
inline void KeepAliveRequest::_internal_set_keepaliveintervalsec(int32_t value) {
  
  _impl_.keepaliveintervalsec_ = value;
}
inline void KeepAliveRequest::set_keepaliveintervalsec(int32_t value) {
  _internal_set_keepaliveintervalsec(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.KeepAliveRequest.keepaliveIntervalSec)
}

// bool ipv6Available = 6;
inline void KeepAliveRequest::clear_ipv6available() {
  _impl_.ipv6available_ = false;
}
inline bool KeepAliveRequest::_internal_ipv6available() const {
  return _impl_.ipv6available_;
}
inline bool KeepAliveRequest::ipv6available() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.KeepAliveRequest.ipv6Available)
  return _internal_ipv6available();
}
inline void KeepAliveRequest::_internal_set_ipv6available(bool value) {
  
  _impl_.ipv6available_ = value;
}
inline void KeepAliveRequest::set_ipv6available(bool value) {
  _internal_set_ipv6available(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.KeepAliveRequest.ipv6Available)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Basic
}  // namespace Im
}  // namespace AcFunDanmu

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_KeepAliveRequest_2eproto
