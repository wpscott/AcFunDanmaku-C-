// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Reminder.pb.h"
#include "User.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Message_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Message_2eproto;
namespace AcFunDanmu {
namespace Im {
namespace Message {
class Message;
struct MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
}  // namespace Message
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::Im::Message::Message* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Message::Message>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {
namespace Im {
namespace Message {

// ===================================================================

class Message final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Message.Message) */ {
 public:
  inline Message() : Message(nullptr) {}
  ~Message() override;
  explicit PROTOBUF_CONSTEXPR Message(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Message& from) {
    Message::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Message.Message";
  }
  protected:
  explicit Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReceiversFieldNumber = 11,
    kExcludeReceiversFieldNumber = 19,
    kTitleFieldNumber = 7,
    kContentFieldNumber = 9,
    kBackupTipsFieldNumber = 10,
    kStrTargetIdFieldNumber = 18,
    kExtraFieldNumber = 22,
    kCsExtraFieldNumber = 25,
    kFromUserFieldNumber = 4,
    kToUserFieldNumber = 6,
    kReminderFieldNumber = 21,
    kRealFromUserFieldNumber = 24,
    kSeqIdFieldNumber = 1,
    kClientSeqIdFieldNumber = 2,
    kTimestampMsFieldNumber = 3,
    kTargetIdFieldNumber = 5,
    kContentTypeFieldNumber = 8,
    kSessionPriorityFieldNumber = 13,
    kSessionCategoryIdFieldNumber = 14,
    kSessionAccountTypeFieldNumber = 15,
    kUserRelationshipFieldNumber = 17,
    kNotCountUnreadFieldNumber = 12,
    kNotAutoCreateSessionFieldNumber = 16,
    kMarkDeleteFieldNumber = 20,
    kReceiptRequiredFieldNumber = 23,
    kSessionInvisibleFieldNumber = 26,
  };
  // repeated .AcFunDanmu.Im.Basic.User receivers = 11;
  int receivers_size() const;
  private:
  int _internal_receivers_size() const;
  public:
  void clear_receivers();
  ::AcFunDanmu::Im::Basic::User* mutable_receivers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic::User >*
      mutable_receivers();
  private:
  const ::AcFunDanmu::Im::Basic::User& _internal_receivers(int index) const;
  ::AcFunDanmu::Im::Basic::User* _internal_add_receivers();
  public:
  const ::AcFunDanmu::Im::Basic::User& receivers(int index) const;
  ::AcFunDanmu::Im::Basic::User* add_receivers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic::User >&
      receivers() const;

  // repeated .AcFunDanmu.Im.Basic.User excludeReceivers = 19;
  int excludereceivers_size() const;
  private:
  int _internal_excludereceivers_size() const;
  public:
  void clear_excludereceivers();
  ::AcFunDanmu::Im::Basic::User* mutable_excludereceivers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic::User >*
      mutable_excludereceivers();
  private:
  const ::AcFunDanmu::Im::Basic::User& _internal_excludereceivers(int index) const;
  ::AcFunDanmu::Im::Basic::User* _internal_add_excludereceivers();
  public:
  const ::AcFunDanmu::Im::Basic::User& excludereceivers(int index) const;
  ::AcFunDanmu::Im::Basic::User* add_excludereceivers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic::User >&
      excludereceivers() const;

  // string title = 7;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // bytes content = 9;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // string backupTips = 10;
  void clear_backuptips();
  const std::string& backuptips() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_backuptips(ArgT0&& arg0, ArgT... args);
  std::string* mutable_backuptips();
  PROTOBUF_NODISCARD std::string* release_backuptips();
  void set_allocated_backuptips(std::string* backuptips);
  private:
  const std::string& _internal_backuptips() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_backuptips(const std::string& value);
  std::string* _internal_mutable_backuptips();
  public:

  // string strTargetId = 18;
  void clear_strtargetid();
  const std::string& strtargetid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strtargetid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strtargetid();
  PROTOBUF_NODISCARD std::string* release_strtargetid();
  void set_allocated_strtargetid(std::string* strtargetid);
  private:
  const std::string& _internal_strtargetid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strtargetid(const std::string& value);
  std::string* _internal_mutable_strtargetid();
  public:

  // bytes extra = 22;
  void clear_extra();
  const std::string& extra() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_extra(ArgT0&& arg0, ArgT... args);
  std::string* mutable_extra();
  PROTOBUF_NODISCARD std::string* release_extra();
  void set_allocated_extra(std::string* extra);
  private:
  const std::string& _internal_extra() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_extra(const std::string& value);
  std::string* _internal_mutable_extra();
  public:

  // bytes csExtra = 25;
  void clear_csextra();
  const std::string& csextra() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_csextra(ArgT0&& arg0, ArgT... args);
  std::string* mutable_csextra();
  PROTOBUF_NODISCARD std::string* release_csextra();
  void set_allocated_csextra(std::string* csextra);
  private:
  const std::string& _internal_csextra() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_csextra(const std::string& value);
  std::string* _internal_mutable_csextra();
  public:

  // .AcFunDanmu.Im.Basic.User fromUser = 4;
  bool has_fromuser() const;
  private:
  bool _internal_has_fromuser() const;
  public:
  void clear_fromuser();
  const ::AcFunDanmu::Im::Basic::User& fromuser() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Basic::User* release_fromuser();
  ::AcFunDanmu::Im::Basic::User* mutable_fromuser();
  void set_allocated_fromuser(::AcFunDanmu::Im::Basic::User* fromuser);
  private:
  const ::AcFunDanmu::Im::Basic::User& _internal_fromuser() const;
  ::AcFunDanmu::Im::Basic::User* _internal_mutable_fromuser();
  public:
  void unsafe_arena_set_allocated_fromuser(
      ::AcFunDanmu::Im::Basic::User* fromuser);
  ::AcFunDanmu::Im::Basic::User* unsafe_arena_release_fromuser();

  // .AcFunDanmu.Im.Basic.User toUser = 6;
  bool has_touser() const;
  private:
  bool _internal_has_touser() const;
  public:
  void clear_touser();
  const ::AcFunDanmu::Im::Basic::User& touser() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Basic::User* release_touser();
  ::AcFunDanmu::Im::Basic::User* mutable_touser();
  void set_allocated_touser(::AcFunDanmu::Im::Basic::User* touser);
  private:
  const ::AcFunDanmu::Im::Basic::User& _internal_touser() const;
  ::AcFunDanmu::Im::Basic::User* _internal_mutable_touser();
  public:
  void unsafe_arena_set_allocated_touser(
      ::AcFunDanmu::Im::Basic::User* touser);
  ::AcFunDanmu::Im::Basic::User* unsafe_arena_release_touser();

  // .AcFunDanmu.Im.Message.Reminder reminder = 21;
  bool has_reminder() const;
  private:
  bool _internal_has_reminder() const;
  public:
  void clear_reminder();
  const ::AcFunDanmu::Im::Message::Reminder& reminder() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Message::Reminder* release_reminder();
  ::AcFunDanmu::Im::Message::Reminder* mutable_reminder();
  void set_allocated_reminder(::AcFunDanmu::Im::Message::Reminder* reminder);
  private:
  const ::AcFunDanmu::Im::Message::Reminder& _internal_reminder() const;
  ::AcFunDanmu::Im::Message::Reminder* _internal_mutable_reminder();
  public:
  void unsafe_arena_set_allocated_reminder(
      ::AcFunDanmu::Im::Message::Reminder* reminder);
  ::AcFunDanmu::Im::Message::Reminder* unsafe_arena_release_reminder();

  // .AcFunDanmu.Im.Basic.User realFromUser = 24;
  bool has_realfromuser() const;
  private:
  bool _internal_has_realfromuser() const;
  public:
  void clear_realfromuser();
  const ::AcFunDanmu::Im::Basic::User& realfromuser() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Basic::User* release_realfromuser();
  ::AcFunDanmu::Im::Basic::User* mutable_realfromuser();
  void set_allocated_realfromuser(::AcFunDanmu::Im::Basic::User* realfromuser);
  private:
  const ::AcFunDanmu::Im::Basic::User& _internal_realfromuser() const;
  ::AcFunDanmu::Im::Basic::User* _internal_mutable_realfromuser();
  public:
  void unsafe_arena_set_allocated_realfromuser(
      ::AcFunDanmu::Im::Basic::User* realfromuser);
  ::AcFunDanmu::Im::Basic::User* unsafe_arena_release_realfromuser();

  // int64 seqId = 1;
  void clear_seqid();
  int64_t seqid() const;
  void set_seqid(int64_t value);
  private:
  int64_t _internal_seqid() const;
  void _internal_set_seqid(int64_t value);
  public:

  // int64 clientSeqId = 2;
  void clear_clientseqid();
  int64_t clientseqid() const;
  void set_clientseqid(int64_t value);
  private:
  int64_t _internal_clientseqid() const;
  void _internal_set_clientseqid(int64_t value);
  public:

  // int64 timestampMs = 3;
  void clear_timestampms();
  int64_t timestampms() const;
  void set_timestampms(int64_t value);
  private:
  int64_t _internal_timestampms() const;
  void _internal_set_timestampms(int64_t value);
  public:

  // int64 targetId = 5;
  void clear_targetid();
  int64_t targetid() const;
  void set_targetid(int64_t value);
  private:
  int64_t _internal_targetid() const;
  void _internal_set_targetid(int64_t value);
  public:

  // int32 contentType = 8;
  void clear_contenttype();
  int32_t contenttype() const;
  void set_contenttype(int32_t value);
  private:
  int32_t _internal_contenttype() const;
  void _internal_set_contenttype(int32_t value);
  public:

  // int32 sessionPriority = 13;
  void clear_sessionpriority();
  int32_t sessionpriority() const;
  void set_sessionpriority(int32_t value);
  private:
  int32_t _internal_sessionpriority() const;
  void _internal_set_sessionpriority(int32_t value);
  public:

  // int32 sessionCategoryId = 14;
  void clear_sessioncategoryid();
  int32_t sessioncategoryid() const;
  void set_sessioncategoryid(int32_t value);
  private:
  int32_t _internal_sessioncategoryid() const;
  void _internal_set_sessioncategoryid(int32_t value);
  public:

  // int32 sessionAccountType = 15;
  void clear_sessionaccounttype();
  int32_t sessionaccounttype() const;
  void set_sessionaccounttype(int32_t value);
  private:
  int32_t _internal_sessionaccounttype() const;
  void _internal_set_sessionaccounttype(int32_t value);
  public:

  // int32 userRelationship = 17;
  void clear_userrelationship();
  int32_t userrelationship() const;
  void set_userrelationship(int32_t value);
  private:
  int32_t _internal_userrelationship() const;
  void _internal_set_userrelationship(int32_t value);
  public:

  // bool notCountUnread = 12;
  void clear_notcountunread();
  bool notcountunread() const;
  void set_notcountunread(bool value);
  private:
  bool _internal_notcountunread() const;
  void _internal_set_notcountunread(bool value);
  public:

  // bool notAutoCreateSession = 16;
  void clear_notautocreatesession();
  bool notautocreatesession() const;
  void set_notautocreatesession(bool value);
  private:
  bool _internal_notautocreatesession() const;
  void _internal_set_notautocreatesession(bool value);
  public:

  // bool markDelete = 20;
  void clear_markdelete();
  bool markdelete() const;
  void set_markdelete(bool value);
  private:
  bool _internal_markdelete() const;
  void _internal_set_markdelete(bool value);
  public:

  // bool receiptRequired = 23;
  void clear_receiptrequired();
  bool receiptrequired() const;
  void set_receiptrequired(bool value);
  private:
  bool _internal_receiptrequired() const;
  void _internal_set_receiptrequired(bool value);
  public:

  // bool sessionInvisible = 26;
  void clear_sessioninvisible();
  bool sessioninvisible() const;
  void set_sessioninvisible(bool value);
  private:
  bool _internal_sessioninvisible() const;
  void _internal_set_sessioninvisible(bool value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Message.Message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic::User > receivers_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic::User > excludereceivers_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr backuptips_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strtargetid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extra_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr csextra_;
    ::AcFunDanmu::Im::Basic::User* fromuser_;
    ::AcFunDanmu::Im::Basic::User* touser_;
    ::AcFunDanmu::Im::Message::Reminder* reminder_;
    ::AcFunDanmu::Im::Basic::User* realfromuser_;
    int64_t seqid_;
    int64_t clientseqid_;
    int64_t timestampms_;
    int64_t targetid_;
    int32_t contenttype_;
    int32_t sessionpriority_;
    int32_t sessioncategoryid_;
    int32_t sessionaccounttype_;
    int32_t userrelationship_;
    bool notcountunread_;
    bool notautocreatesession_;
    bool markdelete_;
    bool receiptrequired_;
    bool sessioninvisible_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Message

// int64 seqId = 1;
inline void Message::clear_seqid() {
  _impl_.seqid_ = int64_t{0};
}
inline int64_t Message::_internal_seqid() const {
  return _impl_.seqid_;
}
inline int64_t Message::seqid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.Message.seqId)
  return _internal_seqid();
}
inline void Message::_internal_set_seqid(int64_t value) {
  
  _impl_.seqid_ = value;
}
inline void Message::set_seqid(int64_t value) {
  _internal_set_seqid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Message.Message.seqId)
}

// int64 clientSeqId = 2;
inline void Message::clear_clientseqid() {
  _impl_.clientseqid_ = int64_t{0};
}
inline int64_t Message::_internal_clientseqid() const {
  return _impl_.clientseqid_;
}
inline int64_t Message::clientseqid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.Message.clientSeqId)
  return _internal_clientseqid();
}
inline void Message::_internal_set_clientseqid(int64_t value) {
  
  _impl_.clientseqid_ = value;
}
inline void Message::set_clientseqid(int64_t value) {
  _internal_set_clientseqid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Message.Message.clientSeqId)
}

// int64 timestampMs = 3;
inline void Message::clear_timestampms() {
  _impl_.timestampms_ = int64_t{0};
}
inline int64_t Message::_internal_timestampms() const {
  return _impl_.timestampms_;
}
inline int64_t Message::timestampms() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.Message.timestampMs)
  return _internal_timestampms();
}
inline void Message::_internal_set_timestampms(int64_t value) {
  
  _impl_.timestampms_ = value;
}
inline void Message::set_timestampms(int64_t value) {
  _internal_set_timestampms(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Message.Message.timestampMs)
}

// .AcFunDanmu.Im.Basic.User fromUser = 4;
inline bool Message::_internal_has_fromuser() const {
  return this != internal_default_instance() && _impl_.fromuser_ != nullptr;
}
inline bool Message::has_fromuser() const {
  return _internal_has_fromuser();
}
inline const ::AcFunDanmu::Im::Basic::User& Message::_internal_fromuser() const {
  const ::AcFunDanmu::Im::Basic::User* p = _impl_.fromuser_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic::User&>(
      ::AcFunDanmu::Im::Basic::_User_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic::User& Message::fromuser() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.Message.fromUser)
  return _internal_fromuser();
}
inline void Message::unsafe_arena_set_allocated_fromuser(
    ::AcFunDanmu::Im::Basic::User* fromuser) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fromuser_);
  }
  _impl_.fromuser_ = fromuser;
  if (fromuser) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Message.Message.fromUser)
}
inline ::AcFunDanmu::Im::Basic::User* Message::release_fromuser() {
  
  ::AcFunDanmu::Im::Basic::User* temp = _impl_.fromuser_;
  _impl_.fromuser_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AcFunDanmu::Im::Basic::User* Message::unsafe_arena_release_fromuser() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Message.Message.fromUser)
  
  ::AcFunDanmu::Im::Basic::User* temp = _impl_.fromuser_;
  _impl_.fromuser_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic::User* Message::_internal_mutable_fromuser() {
  
  if (_impl_.fromuser_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic::User>(GetArenaForAllocation());
    _impl_.fromuser_ = p;
  }
  return _impl_.fromuser_;
}
inline ::AcFunDanmu::Im::Basic::User* Message::mutable_fromuser() {
  ::AcFunDanmu::Im::Basic::User* _msg = _internal_mutable_fromuser();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Message.Message.fromUser)
  return _msg;
}
inline void Message::set_allocated_fromuser(::AcFunDanmu::Im::Basic::User* fromuser) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fromuser_);
  }
  if (fromuser) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fromuser));
    if (message_arena != submessage_arena) {
      fromuser = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fromuser, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.fromuser_ = fromuser;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Message.Message.fromUser)
}

// int64 targetId = 5;
inline void Message::clear_targetid() {
  _impl_.targetid_ = int64_t{0};
}
inline int64_t Message::_internal_targetid() const {
  return _impl_.targetid_;
}
inline int64_t Message::targetid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.Message.targetId)
  return _internal_targetid();
}
inline void Message::_internal_set_targetid(int64_t value) {
  
  _impl_.targetid_ = value;
}
inline void Message::set_targetid(int64_t value) {
  _internal_set_targetid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Message.Message.targetId)
}

// .AcFunDanmu.Im.Basic.User toUser = 6;
inline bool Message::_internal_has_touser() const {
  return this != internal_default_instance() && _impl_.touser_ != nullptr;
}
inline bool Message::has_touser() const {
  return _internal_has_touser();
}
inline const ::AcFunDanmu::Im::Basic::User& Message::_internal_touser() const {
  const ::AcFunDanmu::Im::Basic::User* p = _impl_.touser_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic::User&>(
      ::AcFunDanmu::Im::Basic::_User_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic::User& Message::touser() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.Message.toUser)
  return _internal_touser();
}
inline void Message::unsafe_arena_set_allocated_touser(
    ::AcFunDanmu::Im::Basic::User* touser) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.touser_);
  }
  _impl_.touser_ = touser;
  if (touser) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Message.Message.toUser)
}
inline ::AcFunDanmu::Im::Basic::User* Message::release_touser() {
  
  ::AcFunDanmu::Im::Basic::User* temp = _impl_.touser_;
  _impl_.touser_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AcFunDanmu::Im::Basic::User* Message::unsafe_arena_release_touser() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Message.Message.toUser)
  
  ::AcFunDanmu::Im::Basic::User* temp = _impl_.touser_;
  _impl_.touser_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic::User* Message::_internal_mutable_touser() {
  
  if (_impl_.touser_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic::User>(GetArenaForAllocation());
    _impl_.touser_ = p;
  }
  return _impl_.touser_;
}
inline ::AcFunDanmu::Im::Basic::User* Message::mutable_touser() {
  ::AcFunDanmu::Im::Basic::User* _msg = _internal_mutable_touser();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Message.Message.toUser)
  return _msg;
}
inline void Message::set_allocated_touser(::AcFunDanmu::Im::Basic::User* touser) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.touser_);
  }
  if (touser) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(touser));
    if (message_arena != submessage_arena) {
      touser = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, touser, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.touser_ = touser;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Message.Message.toUser)
}

// string title = 7;
inline void Message::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& Message::title() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.Message.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Message.Message.title)
}
inline std::string* Message::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Message.Message.title)
  return _s;
}
inline const std::string& Message::_internal_title() const {
  return _impl_.title_.Get();
}
inline void Message::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* Message::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* Message::release_title() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Message.Message.title)
  return _impl_.title_.Release();
}
inline void Message::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Message.Message.title)
}

// int32 contentType = 8;
inline void Message::clear_contenttype() {
  _impl_.contenttype_ = 0;
}
inline int32_t Message::_internal_contenttype() const {
  return _impl_.contenttype_;
}
inline int32_t Message::contenttype() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.Message.contentType)
  return _internal_contenttype();
}
inline void Message::_internal_set_contenttype(int32_t value) {
  
  _impl_.contenttype_ = value;
}
inline void Message::set_contenttype(int32_t value) {
  _internal_set_contenttype(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Message.Message.contentType)
}

// bytes content = 9;
inline void Message::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& Message::content() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.Message.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Message.Message.content)
}
inline std::string* Message::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Message.Message.content)
  return _s;
}
inline const std::string& Message::_internal_content() const {
  return _impl_.content_.Get();
}
inline void Message::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* Message::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* Message::release_content() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Message.Message.content)
  return _impl_.content_.Release();
}
inline void Message::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Message.Message.content)
}

// string backupTips = 10;
inline void Message::clear_backuptips() {
  _impl_.backuptips_.ClearToEmpty();
}
inline const std::string& Message::backuptips() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.Message.backupTips)
  return _internal_backuptips();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message::set_backuptips(ArgT0&& arg0, ArgT... args) {
 
 _impl_.backuptips_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Message.Message.backupTips)
}
inline std::string* Message::mutable_backuptips() {
  std::string* _s = _internal_mutable_backuptips();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Message.Message.backupTips)
  return _s;
}
inline const std::string& Message::_internal_backuptips() const {
  return _impl_.backuptips_.Get();
}
inline void Message::_internal_set_backuptips(const std::string& value) {
  
  _impl_.backuptips_.Set(value, GetArenaForAllocation());
}
inline std::string* Message::_internal_mutable_backuptips() {
  
  return _impl_.backuptips_.Mutable(GetArenaForAllocation());
}
inline std::string* Message::release_backuptips() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Message.Message.backupTips)
  return _impl_.backuptips_.Release();
}
inline void Message::set_allocated_backuptips(std::string* backuptips) {
  if (backuptips != nullptr) {
    
  } else {
    
  }
  _impl_.backuptips_.SetAllocated(backuptips, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.backuptips_.IsDefault()) {
    _impl_.backuptips_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Message.Message.backupTips)
}

// repeated .AcFunDanmu.Im.Basic.User receivers = 11;
inline int Message::_internal_receivers_size() const {
  return _impl_.receivers_.size();
}
inline int Message::receivers_size() const {
  return _internal_receivers_size();
}
inline ::AcFunDanmu::Im::Basic::User* Message::mutable_receivers(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Message.Message.receivers)
  return _impl_.receivers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic::User >*
Message::mutable_receivers() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Message.Message.receivers)
  return &_impl_.receivers_;
}
inline const ::AcFunDanmu::Im::Basic::User& Message::_internal_receivers(int index) const {
  return _impl_.receivers_.Get(index);
}
inline const ::AcFunDanmu::Im::Basic::User& Message::receivers(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.Message.receivers)
  return _internal_receivers(index);
}
inline ::AcFunDanmu::Im::Basic::User* Message::_internal_add_receivers() {
  return _impl_.receivers_.Add();
}
inline ::AcFunDanmu::Im::Basic::User* Message::add_receivers() {
  ::AcFunDanmu::Im::Basic::User* _add = _internal_add_receivers();
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Message.Message.receivers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic::User >&
Message::receivers() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Message.Message.receivers)
  return _impl_.receivers_;
}

// bool notCountUnread = 12;
inline void Message::clear_notcountunread() {
  _impl_.notcountunread_ = false;
}
inline bool Message::_internal_notcountunread() const {
  return _impl_.notcountunread_;
}
inline bool Message::notcountunread() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.Message.notCountUnread)
  return _internal_notcountunread();
}
inline void Message::_internal_set_notcountunread(bool value) {
  
  _impl_.notcountunread_ = value;
}
inline void Message::set_notcountunread(bool value) {
  _internal_set_notcountunread(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Message.Message.notCountUnread)
}

// int32 sessionPriority = 13;
inline void Message::clear_sessionpriority() {
  _impl_.sessionpriority_ = 0;
}
inline int32_t Message::_internal_sessionpriority() const {
  return _impl_.sessionpriority_;
}
inline int32_t Message::sessionpriority() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.Message.sessionPriority)
  return _internal_sessionpriority();
}
inline void Message::_internal_set_sessionpriority(int32_t value) {
  
  _impl_.sessionpriority_ = value;
}
inline void Message::set_sessionpriority(int32_t value) {
  _internal_set_sessionpriority(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Message.Message.sessionPriority)
}

// int32 sessionCategoryId = 14;
inline void Message::clear_sessioncategoryid() {
  _impl_.sessioncategoryid_ = 0;
}
inline int32_t Message::_internal_sessioncategoryid() const {
  return _impl_.sessioncategoryid_;
}
inline int32_t Message::sessioncategoryid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.Message.sessionCategoryId)
  return _internal_sessioncategoryid();
}
inline void Message::_internal_set_sessioncategoryid(int32_t value) {
  
  _impl_.sessioncategoryid_ = value;
}
inline void Message::set_sessioncategoryid(int32_t value) {
  _internal_set_sessioncategoryid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Message.Message.sessionCategoryId)
}

// int32 sessionAccountType = 15;
inline void Message::clear_sessionaccounttype() {
  _impl_.sessionaccounttype_ = 0;
}
inline int32_t Message::_internal_sessionaccounttype() const {
  return _impl_.sessionaccounttype_;
}
inline int32_t Message::sessionaccounttype() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.Message.sessionAccountType)
  return _internal_sessionaccounttype();
}
inline void Message::_internal_set_sessionaccounttype(int32_t value) {
  
  _impl_.sessionaccounttype_ = value;
}
inline void Message::set_sessionaccounttype(int32_t value) {
  _internal_set_sessionaccounttype(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Message.Message.sessionAccountType)
}

// bool notAutoCreateSession = 16;
inline void Message::clear_notautocreatesession() {
  _impl_.notautocreatesession_ = false;
}
inline bool Message::_internal_notautocreatesession() const {
  return _impl_.notautocreatesession_;
}
inline bool Message::notautocreatesession() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.Message.notAutoCreateSession)
  return _internal_notautocreatesession();
}
inline void Message::_internal_set_notautocreatesession(bool value) {
  
  _impl_.notautocreatesession_ = value;
}
inline void Message::set_notautocreatesession(bool value) {
  _internal_set_notautocreatesession(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Message.Message.notAutoCreateSession)
}

// int32 userRelationship = 17;
inline void Message::clear_userrelationship() {
  _impl_.userrelationship_ = 0;
}
inline int32_t Message::_internal_userrelationship() const {
  return _impl_.userrelationship_;
}
inline int32_t Message::userrelationship() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.Message.userRelationship)
  return _internal_userrelationship();
}
inline void Message::_internal_set_userrelationship(int32_t value) {
  
  _impl_.userrelationship_ = value;
}
inline void Message::set_userrelationship(int32_t value) {
  _internal_set_userrelationship(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Message.Message.userRelationship)
}

// string strTargetId = 18;
inline void Message::clear_strtargetid() {
  _impl_.strtargetid_.ClearToEmpty();
}
inline const std::string& Message::strtargetid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.Message.strTargetId)
  return _internal_strtargetid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message::set_strtargetid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.strtargetid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Message.Message.strTargetId)
}
inline std::string* Message::mutable_strtargetid() {
  std::string* _s = _internal_mutable_strtargetid();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Message.Message.strTargetId)
  return _s;
}
inline const std::string& Message::_internal_strtargetid() const {
  return _impl_.strtargetid_.Get();
}
inline void Message::_internal_set_strtargetid(const std::string& value) {
  
  _impl_.strtargetid_.Set(value, GetArenaForAllocation());
}
inline std::string* Message::_internal_mutable_strtargetid() {
  
  return _impl_.strtargetid_.Mutable(GetArenaForAllocation());
}
inline std::string* Message::release_strtargetid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Message.Message.strTargetId)
  return _impl_.strtargetid_.Release();
}
inline void Message::set_allocated_strtargetid(std::string* strtargetid) {
  if (strtargetid != nullptr) {
    
  } else {
    
  }
  _impl_.strtargetid_.SetAllocated(strtargetid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.strtargetid_.IsDefault()) {
    _impl_.strtargetid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Message.Message.strTargetId)
}

// repeated .AcFunDanmu.Im.Basic.User excludeReceivers = 19;
inline int Message::_internal_excludereceivers_size() const {
  return _impl_.excludereceivers_.size();
}
inline int Message::excludereceivers_size() const {
  return _internal_excludereceivers_size();
}
inline ::AcFunDanmu::Im::Basic::User* Message::mutable_excludereceivers(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Message.Message.excludeReceivers)
  return _impl_.excludereceivers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic::User >*
Message::mutable_excludereceivers() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Message.Message.excludeReceivers)
  return &_impl_.excludereceivers_;
}
inline const ::AcFunDanmu::Im::Basic::User& Message::_internal_excludereceivers(int index) const {
  return _impl_.excludereceivers_.Get(index);
}
inline const ::AcFunDanmu::Im::Basic::User& Message::excludereceivers(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.Message.excludeReceivers)
  return _internal_excludereceivers(index);
}
inline ::AcFunDanmu::Im::Basic::User* Message::_internal_add_excludereceivers() {
  return _impl_.excludereceivers_.Add();
}
inline ::AcFunDanmu::Im::Basic::User* Message::add_excludereceivers() {
  ::AcFunDanmu::Im::Basic::User* _add = _internal_add_excludereceivers();
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Message.Message.excludeReceivers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic::User >&
Message::excludereceivers() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Message.Message.excludeReceivers)
  return _impl_.excludereceivers_;
}

// bool markDelete = 20;
inline void Message::clear_markdelete() {
  _impl_.markdelete_ = false;
}
inline bool Message::_internal_markdelete() const {
  return _impl_.markdelete_;
}
inline bool Message::markdelete() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.Message.markDelete)
  return _internal_markdelete();
}
inline void Message::_internal_set_markdelete(bool value) {
  
  _impl_.markdelete_ = value;
}
inline void Message::set_markdelete(bool value) {
  _internal_set_markdelete(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Message.Message.markDelete)
}

// .AcFunDanmu.Im.Message.Reminder reminder = 21;
inline bool Message::_internal_has_reminder() const {
  return this != internal_default_instance() && _impl_.reminder_ != nullptr;
}
inline bool Message::has_reminder() const {
  return _internal_has_reminder();
}
inline const ::AcFunDanmu::Im::Message::Reminder& Message::_internal_reminder() const {
  const ::AcFunDanmu::Im::Message::Reminder* p = _impl_.reminder_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Message::Reminder&>(
      ::AcFunDanmu::Im::Message::_Reminder_default_instance_);
}
inline const ::AcFunDanmu::Im::Message::Reminder& Message::reminder() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.Message.reminder)
  return _internal_reminder();
}
inline void Message::unsafe_arena_set_allocated_reminder(
    ::AcFunDanmu::Im::Message::Reminder* reminder) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reminder_);
  }
  _impl_.reminder_ = reminder;
  if (reminder) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Message.Message.reminder)
}
inline ::AcFunDanmu::Im::Message::Reminder* Message::release_reminder() {
  
  ::AcFunDanmu::Im::Message::Reminder* temp = _impl_.reminder_;
  _impl_.reminder_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AcFunDanmu::Im::Message::Reminder* Message::unsafe_arena_release_reminder() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Message.Message.reminder)
  
  ::AcFunDanmu::Im::Message::Reminder* temp = _impl_.reminder_;
  _impl_.reminder_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Message::Reminder* Message::_internal_mutable_reminder() {
  
  if (_impl_.reminder_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Message::Reminder>(GetArenaForAllocation());
    _impl_.reminder_ = p;
  }
  return _impl_.reminder_;
}
inline ::AcFunDanmu::Im::Message::Reminder* Message::mutable_reminder() {
  ::AcFunDanmu::Im::Message::Reminder* _msg = _internal_mutable_reminder();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Message.Message.reminder)
  return _msg;
}
inline void Message::set_allocated_reminder(::AcFunDanmu::Im::Message::Reminder* reminder) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reminder_);
  }
  if (reminder) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reminder));
    if (message_arena != submessage_arena) {
      reminder = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reminder, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.reminder_ = reminder;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Message.Message.reminder)
}

// bytes extra = 22;
inline void Message::clear_extra() {
  _impl_.extra_.ClearToEmpty();
}
inline const std::string& Message::extra() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.Message.extra)
  return _internal_extra();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message::set_extra(ArgT0&& arg0, ArgT... args) {
 
 _impl_.extra_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Message.Message.extra)
}
inline std::string* Message::mutable_extra() {
  std::string* _s = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Message.Message.extra)
  return _s;
}
inline const std::string& Message::_internal_extra() const {
  return _impl_.extra_.Get();
}
inline void Message::_internal_set_extra(const std::string& value) {
  
  _impl_.extra_.Set(value, GetArenaForAllocation());
}
inline std::string* Message::_internal_mutable_extra() {
  
  return _impl_.extra_.Mutable(GetArenaForAllocation());
}
inline std::string* Message::release_extra() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Message.Message.extra)
  return _impl_.extra_.Release();
}
inline void Message::set_allocated_extra(std::string* extra) {
  if (extra != nullptr) {
    
  } else {
    
  }
  _impl_.extra_.SetAllocated(extra, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.extra_.IsDefault()) {
    _impl_.extra_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Message.Message.extra)
}

// bool receiptRequired = 23;
inline void Message::clear_receiptrequired() {
  _impl_.receiptrequired_ = false;
}
inline bool Message::_internal_receiptrequired() const {
  return _impl_.receiptrequired_;
}
inline bool Message::receiptrequired() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.Message.receiptRequired)
  return _internal_receiptrequired();
}
inline void Message::_internal_set_receiptrequired(bool value) {
  
  _impl_.receiptrequired_ = value;
}
inline void Message::set_receiptrequired(bool value) {
  _internal_set_receiptrequired(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Message.Message.receiptRequired)
}

// .AcFunDanmu.Im.Basic.User realFromUser = 24;
inline bool Message::_internal_has_realfromuser() const {
  return this != internal_default_instance() && _impl_.realfromuser_ != nullptr;
}
inline bool Message::has_realfromuser() const {
  return _internal_has_realfromuser();
}
inline const ::AcFunDanmu::Im::Basic::User& Message::_internal_realfromuser() const {
  const ::AcFunDanmu::Im::Basic::User* p = _impl_.realfromuser_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic::User&>(
      ::AcFunDanmu::Im::Basic::_User_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic::User& Message::realfromuser() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.Message.realFromUser)
  return _internal_realfromuser();
}
inline void Message::unsafe_arena_set_allocated_realfromuser(
    ::AcFunDanmu::Im::Basic::User* realfromuser) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.realfromuser_);
  }
  _impl_.realfromuser_ = realfromuser;
  if (realfromuser) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Message.Message.realFromUser)
}
inline ::AcFunDanmu::Im::Basic::User* Message::release_realfromuser() {
  
  ::AcFunDanmu::Im::Basic::User* temp = _impl_.realfromuser_;
  _impl_.realfromuser_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AcFunDanmu::Im::Basic::User* Message::unsafe_arena_release_realfromuser() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Message.Message.realFromUser)
  
  ::AcFunDanmu::Im::Basic::User* temp = _impl_.realfromuser_;
  _impl_.realfromuser_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic::User* Message::_internal_mutable_realfromuser() {
  
  if (_impl_.realfromuser_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic::User>(GetArenaForAllocation());
    _impl_.realfromuser_ = p;
  }
  return _impl_.realfromuser_;
}
inline ::AcFunDanmu::Im::Basic::User* Message::mutable_realfromuser() {
  ::AcFunDanmu::Im::Basic::User* _msg = _internal_mutable_realfromuser();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Message.Message.realFromUser)
  return _msg;
}
inline void Message::set_allocated_realfromuser(::AcFunDanmu::Im::Basic::User* realfromuser) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.realfromuser_);
  }
  if (realfromuser) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(realfromuser));
    if (message_arena != submessage_arena) {
      realfromuser = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, realfromuser, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.realfromuser_ = realfromuser;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Message.Message.realFromUser)
}

// bytes csExtra = 25;
inline void Message::clear_csextra() {
  _impl_.csextra_.ClearToEmpty();
}
inline const std::string& Message::csextra() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.Message.csExtra)
  return _internal_csextra();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message::set_csextra(ArgT0&& arg0, ArgT... args) {
 
 _impl_.csextra_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Message.Message.csExtra)
}
inline std::string* Message::mutable_csextra() {
  std::string* _s = _internal_mutable_csextra();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Message.Message.csExtra)
  return _s;
}
inline const std::string& Message::_internal_csextra() const {
  return _impl_.csextra_.Get();
}
inline void Message::_internal_set_csextra(const std::string& value) {
  
  _impl_.csextra_.Set(value, GetArenaForAllocation());
}
inline std::string* Message::_internal_mutable_csextra() {
  
  return _impl_.csextra_.Mutable(GetArenaForAllocation());
}
inline std::string* Message::release_csextra() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Message.Message.csExtra)
  return _impl_.csextra_.Release();
}
inline void Message::set_allocated_csextra(std::string* csextra) {
  if (csextra != nullptr) {
    
  } else {
    
  }
  _impl_.csextra_.SetAllocated(csextra, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.csextra_.IsDefault()) {
    _impl_.csextra_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Message.Message.csExtra)
}

// bool sessionInvisible = 26;
inline void Message::clear_sessioninvisible() {
  _impl_.sessioninvisible_ = false;
}
inline bool Message::_internal_sessioninvisible() const {
  return _impl_.sessioninvisible_;
}
inline bool Message::sessioninvisible() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.Message.sessionInvisible)
  return _internal_sessioninvisible();
}
inline void Message::_internal_set_sessioninvisible(bool value) {
  
  _impl_.sessioninvisible_ = value;
}
inline void Message::set_sessioninvisible(bool value) {
  _internal_set_sessioninvisible(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Message.Message.sessionInvisible)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Message
}  // namespace Im
}  // namespace AcFunDanmu

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Message_2eproto
