// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Invitation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Invitation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Invitation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "InvitationOperator.pb.h"
#include "JoinRequestStatus.pb.h"
#include "User.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Invitation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Invitation_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Invitation_2eproto;
namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Message {
class Invitation;
struct InvitationDefaultTypeInternal;
extern InvitationDefaultTypeInternal _Invitation_default_instance_;
}  // namespace Message
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::Im::Cloud::Message::Invitation* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud::Message::Invitation>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Message {

// ===================================================================

class Invitation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.Invitation) */ {
 public:
  inline Invitation() : Invitation(nullptr) {}
  ~Invitation() override;
  explicit PROTOBUF_CONSTEXPR Invitation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Invitation(const Invitation& from);
  Invitation(Invitation&& from) noexcept
    : Invitation() {
    *this = ::std::move(from);
  }

  inline Invitation& operator=(const Invitation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Invitation& operator=(Invitation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Invitation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Invitation* internal_default_instance() {
    return reinterpret_cast<const Invitation*>(
               &_Invitation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Invitation& a, Invitation& b) {
    a.Swap(&b);
  }
  inline void Swap(Invitation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Invitation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Invitation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Invitation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Invitation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Invitation& from) {
    Invitation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Invitation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.Invitation";
  }
  protected:
  explicit Invitation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 2,
    kGroupNameFieldNumber = 4,
    kDescContentFieldNumber = 6,
    kAuditCommentsFieldNumber = 7,
    kGroupNumberFieldNumber = 10,
    kGroupHeadUrlFieldNumber = 11,
    kRequestUserFieldNumber = 3,
    kOperatorFieldNumber = 9,
    kReqSeqFieldNumber = 1,
    kFindTypeFieldNumber = 5,
    kStatusFieldNumber = 8,
  };
  // string groupId = 2;
  void clear_groupid();
  const std::string& groupid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_groupid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_groupid();
  PROTOBUF_NODISCARD std::string* release_groupid();
  void set_allocated_groupid(std::string* groupid);
  private:
  const std::string& _internal_groupid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_groupid(const std::string& value);
  std::string* _internal_mutable_groupid();
  public:

  // string groupName = 4;
  void clear_groupname();
  const std::string& groupname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_groupname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_groupname();
  PROTOBUF_NODISCARD std::string* release_groupname();
  void set_allocated_groupname(std::string* groupname);
  private:
  const std::string& _internal_groupname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_groupname(const std::string& value);
  std::string* _internal_mutable_groupname();
  public:

  // string descContent = 6;
  void clear_desccontent();
  const std::string& desccontent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_desccontent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_desccontent();
  PROTOBUF_NODISCARD std::string* release_desccontent();
  void set_allocated_desccontent(std::string* desccontent);
  private:
  const std::string& _internal_desccontent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_desccontent(const std::string& value);
  std::string* _internal_mutable_desccontent();
  public:

  // string auditComments = 7;
  void clear_auditcomments();
  const std::string& auditcomments() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_auditcomments(ArgT0&& arg0, ArgT... args);
  std::string* mutable_auditcomments();
  PROTOBUF_NODISCARD std::string* release_auditcomments();
  void set_allocated_auditcomments(std::string* auditcomments);
  private:
  const std::string& _internal_auditcomments() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_auditcomments(const std::string& value);
  std::string* _internal_mutable_auditcomments();
  public:

  // string groupNumber = 10;
  void clear_groupnumber();
  const std::string& groupnumber() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_groupnumber(ArgT0&& arg0, ArgT... args);
  std::string* mutable_groupnumber();
  PROTOBUF_NODISCARD std::string* release_groupnumber();
  void set_allocated_groupnumber(std::string* groupnumber);
  private:
  const std::string& _internal_groupnumber() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_groupnumber(const std::string& value);
  std::string* _internal_mutable_groupnumber();
  public:

  // string groupHeadUrl = 11;
  void clear_groupheadurl();
  const std::string& groupheadurl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_groupheadurl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_groupheadurl();
  PROTOBUF_NODISCARD std::string* release_groupheadurl();
  void set_allocated_groupheadurl(std::string* groupheadurl);
  private:
  const std::string& _internal_groupheadurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_groupheadurl(const std::string& value);
  std::string* _internal_mutable_groupheadurl();
  public:

  // .AcFunDanmu.Im.Basic.User requestUser = 3;
  bool has_requestuser() const;
  private:
  bool _internal_has_requestuser() const;
  public:
  void clear_requestuser();
  const ::AcFunDanmu::Im::Basic::User& requestuser() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Basic::User* release_requestuser();
  ::AcFunDanmu::Im::Basic::User* mutable_requestuser();
  void set_allocated_requestuser(::AcFunDanmu::Im::Basic::User* requestuser);
  private:
  const ::AcFunDanmu::Im::Basic::User& _internal_requestuser() const;
  ::AcFunDanmu::Im::Basic::User* _internal_mutable_requestuser();
  public:
  void unsafe_arena_set_allocated_requestuser(
      ::AcFunDanmu::Im::Basic::User* requestuser);
  ::AcFunDanmu::Im::Basic::User* unsafe_arena_release_requestuser();

  // .AcFunDanmu.Im.Cloud.Message.InvitationOperator operator = 9;
  bool has_operator_() const;
  private:
  bool _internal_has_operator_() const;
  public:
  void clear_operator_();
  const ::AcFunDanmu::Im::Cloud::Message::InvitationOperator& operator_() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Cloud::Message::InvitationOperator* release_operator_();
  ::AcFunDanmu::Im::Cloud::Message::InvitationOperator* mutable_operator_();
  void set_allocated_operator_(::AcFunDanmu::Im::Cloud::Message::InvitationOperator* operator_);
  private:
  const ::AcFunDanmu::Im::Cloud::Message::InvitationOperator& _internal_operator_() const;
  ::AcFunDanmu::Im::Cloud::Message::InvitationOperator* _internal_mutable_operator_();
  public:
  void unsafe_arena_set_allocated_operator_(
      ::AcFunDanmu::Im::Cloud::Message::InvitationOperator* operator_);
  ::AcFunDanmu::Im::Cloud::Message::InvitationOperator* unsafe_arena_release_operator_();

  // int64 reqSeq = 1;
  void clear_reqseq();
  int64_t reqseq() const;
  void set_reqseq(int64_t value);
  private:
  int64_t _internal_reqseq() const;
  void _internal_set_reqseq(int64_t value);
  public:

  // int32 findType = 5;
  void clear_findtype();
  int32_t findtype() const;
  void set_findtype(int32_t value);
  private:
  int32_t _internal_findtype() const;
  void _internal_set_findtype(int32_t value);
  public:

  // .AcFunDanmu.Im.Cloud.Message.JoinRequestStatus status = 8;
  void clear_status();
  ::AcFunDanmu::Im::Cloud::Message::JoinRequestStatus status() const;
  void set_status(::AcFunDanmu::Im::Cloud::Message::JoinRequestStatus value);
  private:
  ::AcFunDanmu::Im::Cloud::Message::JoinRequestStatus _internal_status() const;
  void _internal_set_status(::AcFunDanmu::Im::Cloud::Message::JoinRequestStatus value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.Invitation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desccontent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auditcomments_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupnumber_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupheadurl_;
    ::AcFunDanmu::Im::Basic::User* requestuser_;
    ::AcFunDanmu::Im::Cloud::Message::InvitationOperator* operator__;
    int64_t reqseq_;
    int32_t findtype_;
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Invitation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Invitation

// int64 reqSeq = 1;
inline void Invitation::clear_reqseq() {
  _impl_.reqseq_ = int64_t{0};
}
inline int64_t Invitation::_internal_reqseq() const {
  return _impl_.reqseq_;
}
inline int64_t Invitation::reqseq() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.Invitation.reqSeq)
  return _internal_reqseq();
}
inline void Invitation::_internal_set_reqseq(int64_t value) {
  
  _impl_.reqseq_ = value;
}
inline void Invitation::set_reqseq(int64_t value) {
  _internal_set_reqseq(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.Invitation.reqSeq)
}

// string groupId = 2;
inline void Invitation::clear_groupid() {
  _impl_.groupid_.ClearToEmpty();
}
inline const std::string& Invitation::groupid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.Invitation.groupId)
  return _internal_groupid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Invitation::set_groupid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.groupid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.Invitation.groupId)
}
inline std::string* Invitation::mutable_groupid() {
  std::string* _s = _internal_mutable_groupid();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.Invitation.groupId)
  return _s;
}
inline const std::string& Invitation::_internal_groupid() const {
  return _impl_.groupid_.Get();
}
inline void Invitation::_internal_set_groupid(const std::string& value) {
  
  _impl_.groupid_.Set(value, GetArenaForAllocation());
}
inline std::string* Invitation::_internal_mutable_groupid() {
  
  return _impl_.groupid_.Mutable(GetArenaForAllocation());
}
inline std::string* Invitation::release_groupid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.Invitation.groupId)
  return _impl_.groupid_.Release();
}
inline void Invitation::set_allocated_groupid(std::string* groupid) {
  if (groupid != nullptr) {
    
  } else {
    
  }
  _impl_.groupid_.SetAllocated(groupid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.groupid_.IsDefault()) {
    _impl_.groupid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.Invitation.groupId)
}

// .AcFunDanmu.Im.Basic.User requestUser = 3;
inline bool Invitation::_internal_has_requestuser() const {
  return this != internal_default_instance() && _impl_.requestuser_ != nullptr;
}
inline bool Invitation::has_requestuser() const {
  return _internal_has_requestuser();
}
inline const ::AcFunDanmu::Im::Basic::User& Invitation::_internal_requestuser() const {
  const ::AcFunDanmu::Im::Basic::User* p = _impl_.requestuser_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic::User&>(
      ::AcFunDanmu::Im::Basic::_User_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic::User& Invitation::requestuser() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.Invitation.requestUser)
  return _internal_requestuser();
}
inline void Invitation::unsafe_arena_set_allocated_requestuser(
    ::AcFunDanmu::Im::Basic::User* requestuser) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.requestuser_);
  }
  _impl_.requestuser_ = requestuser;
  if (requestuser) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Message.Invitation.requestUser)
}
inline ::AcFunDanmu::Im::Basic::User* Invitation::release_requestuser() {
  
  ::AcFunDanmu::Im::Basic::User* temp = _impl_.requestuser_;
  _impl_.requestuser_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AcFunDanmu::Im::Basic::User* Invitation::unsafe_arena_release_requestuser() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.Invitation.requestUser)
  
  ::AcFunDanmu::Im::Basic::User* temp = _impl_.requestuser_;
  _impl_.requestuser_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic::User* Invitation::_internal_mutable_requestuser() {
  
  if (_impl_.requestuser_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic::User>(GetArenaForAllocation());
    _impl_.requestuser_ = p;
  }
  return _impl_.requestuser_;
}
inline ::AcFunDanmu::Im::Basic::User* Invitation::mutable_requestuser() {
  ::AcFunDanmu::Im::Basic::User* _msg = _internal_mutable_requestuser();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.Invitation.requestUser)
  return _msg;
}
inline void Invitation::set_allocated_requestuser(::AcFunDanmu::Im::Basic::User* requestuser) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.requestuser_);
  }
  if (requestuser) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestuser));
    if (message_arena != submessage_arena) {
      requestuser = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestuser, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.requestuser_ = requestuser;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.Invitation.requestUser)
}

// string groupName = 4;
inline void Invitation::clear_groupname() {
  _impl_.groupname_.ClearToEmpty();
}
inline const std::string& Invitation::groupname() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.Invitation.groupName)
  return _internal_groupname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Invitation::set_groupname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.groupname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.Invitation.groupName)
}
inline std::string* Invitation::mutable_groupname() {
  std::string* _s = _internal_mutable_groupname();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.Invitation.groupName)
  return _s;
}
inline const std::string& Invitation::_internal_groupname() const {
  return _impl_.groupname_.Get();
}
inline void Invitation::_internal_set_groupname(const std::string& value) {
  
  _impl_.groupname_.Set(value, GetArenaForAllocation());
}
inline std::string* Invitation::_internal_mutable_groupname() {
  
  return _impl_.groupname_.Mutable(GetArenaForAllocation());
}
inline std::string* Invitation::release_groupname() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.Invitation.groupName)
  return _impl_.groupname_.Release();
}
inline void Invitation::set_allocated_groupname(std::string* groupname) {
  if (groupname != nullptr) {
    
  } else {
    
  }
  _impl_.groupname_.SetAllocated(groupname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.groupname_.IsDefault()) {
    _impl_.groupname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.Invitation.groupName)
}

// int32 findType = 5;
inline void Invitation::clear_findtype() {
  _impl_.findtype_ = 0;
}
inline int32_t Invitation::_internal_findtype() const {
  return _impl_.findtype_;
}
inline int32_t Invitation::findtype() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.Invitation.findType)
  return _internal_findtype();
}
inline void Invitation::_internal_set_findtype(int32_t value) {
  
  _impl_.findtype_ = value;
}
inline void Invitation::set_findtype(int32_t value) {
  _internal_set_findtype(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.Invitation.findType)
}

// string descContent = 6;
inline void Invitation::clear_desccontent() {
  _impl_.desccontent_.ClearToEmpty();
}
inline const std::string& Invitation::desccontent() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.Invitation.descContent)
  return _internal_desccontent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Invitation::set_desccontent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.desccontent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.Invitation.descContent)
}
inline std::string* Invitation::mutable_desccontent() {
  std::string* _s = _internal_mutable_desccontent();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.Invitation.descContent)
  return _s;
}
inline const std::string& Invitation::_internal_desccontent() const {
  return _impl_.desccontent_.Get();
}
inline void Invitation::_internal_set_desccontent(const std::string& value) {
  
  _impl_.desccontent_.Set(value, GetArenaForAllocation());
}
inline std::string* Invitation::_internal_mutable_desccontent() {
  
  return _impl_.desccontent_.Mutable(GetArenaForAllocation());
}
inline std::string* Invitation::release_desccontent() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.Invitation.descContent)
  return _impl_.desccontent_.Release();
}
inline void Invitation::set_allocated_desccontent(std::string* desccontent) {
  if (desccontent != nullptr) {
    
  } else {
    
  }
  _impl_.desccontent_.SetAllocated(desccontent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.desccontent_.IsDefault()) {
    _impl_.desccontent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.Invitation.descContent)
}

// string auditComments = 7;
inline void Invitation::clear_auditcomments() {
  _impl_.auditcomments_.ClearToEmpty();
}
inline const std::string& Invitation::auditcomments() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.Invitation.auditComments)
  return _internal_auditcomments();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Invitation::set_auditcomments(ArgT0&& arg0, ArgT... args) {
 
 _impl_.auditcomments_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.Invitation.auditComments)
}
inline std::string* Invitation::mutable_auditcomments() {
  std::string* _s = _internal_mutable_auditcomments();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.Invitation.auditComments)
  return _s;
}
inline const std::string& Invitation::_internal_auditcomments() const {
  return _impl_.auditcomments_.Get();
}
inline void Invitation::_internal_set_auditcomments(const std::string& value) {
  
  _impl_.auditcomments_.Set(value, GetArenaForAllocation());
}
inline std::string* Invitation::_internal_mutable_auditcomments() {
  
  return _impl_.auditcomments_.Mutable(GetArenaForAllocation());
}
inline std::string* Invitation::release_auditcomments() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.Invitation.auditComments)
  return _impl_.auditcomments_.Release();
}
inline void Invitation::set_allocated_auditcomments(std::string* auditcomments) {
  if (auditcomments != nullptr) {
    
  } else {
    
  }
  _impl_.auditcomments_.SetAllocated(auditcomments, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.auditcomments_.IsDefault()) {
    _impl_.auditcomments_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.Invitation.auditComments)
}

// .AcFunDanmu.Im.Cloud.Message.JoinRequestStatus status = 8;
inline void Invitation::clear_status() {
  _impl_.status_ = 0;
}
inline ::AcFunDanmu::Im::Cloud::Message::JoinRequestStatus Invitation::_internal_status() const {
  return static_cast< ::AcFunDanmu::Im::Cloud::Message::JoinRequestStatus >(_impl_.status_);
}
inline ::AcFunDanmu::Im::Cloud::Message::JoinRequestStatus Invitation::status() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.Invitation.status)
  return _internal_status();
}
inline void Invitation::_internal_set_status(::AcFunDanmu::Im::Cloud::Message::JoinRequestStatus value) {
  
  _impl_.status_ = value;
}
inline void Invitation::set_status(::AcFunDanmu::Im::Cloud::Message::JoinRequestStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.Invitation.status)
}

// .AcFunDanmu.Im.Cloud.Message.InvitationOperator operator = 9;
inline bool Invitation::_internal_has_operator_() const {
  return this != internal_default_instance() && _impl_.operator__ != nullptr;
}
inline bool Invitation::has_operator_() const {
  return _internal_has_operator_();
}
inline const ::AcFunDanmu::Im::Cloud::Message::InvitationOperator& Invitation::_internal_operator_() const {
  const ::AcFunDanmu::Im::Cloud::Message::InvitationOperator* p = _impl_.operator__;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Cloud::Message::InvitationOperator&>(
      ::AcFunDanmu::Im::Cloud::Message::_InvitationOperator_default_instance_);
}
inline const ::AcFunDanmu::Im::Cloud::Message::InvitationOperator& Invitation::operator_() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.Invitation.operator)
  return _internal_operator_();
}
inline void Invitation::unsafe_arena_set_allocated_operator_(
    ::AcFunDanmu::Im::Cloud::Message::InvitationOperator* operator_) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.operator__);
  }
  _impl_.operator__ = operator_;
  if (operator_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Message.Invitation.operator)
}
inline ::AcFunDanmu::Im::Cloud::Message::InvitationOperator* Invitation::release_operator_() {
  
  ::AcFunDanmu::Im::Cloud::Message::InvitationOperator* temp = _impl_.operator__;
  _impl_.operator__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AcFunDanmu::Im::Cloud::Message::InvitationOperator* Invitation::unsafe_arena_release_operator_() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.Invitation.operator)
  
  ::AcFunDanmu::Im::Cloud::Message::InvitationOperator* temp = _impl_.operator__;
  _impl_.operator__ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Cloud::Message::InvitationOperator* Invitation::_internal_mutable_operator_() {
  
  if (_impl_.operator__ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Cloud::Message::InvitationOperator>(GetArenaForAllocation());
    _impl_.operator__ = p;
  }
  return _impl_.operator__;
}
inline ::AcFunDanmu::Im::Cloud::Message::InvitationOperator* Invitation::mutable_operator_() {
  ::AcFunDanmu::Im::Cloud::Message::InvitationOperator* _msg = _internal_mutable_operator_();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.Invitation.operator)
  return _msg;
}
inline void Invitation::set_allocated_operator_(::AcFunDanmu::Im::Cloud::Message::InvitationOperator* operator_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.operator__);
  }
  if (operator_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(operator_));
    if (message_arena != submessage_arena) {
      operator_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, operator_, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.operator__ = operator_;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.Invitation.operator)
}

// string groupNumber = 10;
inline void Invitation::clear_groupnumber() {
  _impl_.groupnumber_.ClearToEmpty();
}
inline const std::string& Invitation::groupnumber() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.Invitation.groupNumber)
  return _internal_groupnumber();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Invitation::set_groupnumber(ArgT0&& arg0, ArgT... args) {
 
 _impl_.groupnumber_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.Invitation.groupNumber)
}
inline std::string* Invitation::mutable_groupnumber() {
  std::string* _s = _internal_mutable_groupnumber();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.Invitation.groupNumber)
  return _s;
}
inline const std::string& Invitation::_internal_groupnumber() const {
  return _impl_.groupnumber_.Get();
}
inline void Invitation::_internal_set_groupnumber(const std::string& value) {
  
  _impl_.groupnumber_.Set(value, GetArenaForAllocation());
}
inline std::string* Invitation::_internal_mutable_groupnumber() {
  
  return _impl_.groupnumber_.Mutable(GetArenaForAllocation());
}
inline std::string* Invitation::release_groupnumber() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.Invitation.groupNumber)
  return _impl_.groupnumber_.Release();
}
inline void Invitation::set_allocated_groupnumber(std::string* groupnumber) {
  if (groupnumber != nullptr) {
    
  } else {
    
  }
  _impl_.groupnumber_.SetAllocated(groupnumber, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.groupnumber_.IsDefault()) {
    _impl_.groupnumber_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.Invitation.groupNumber)
}

// string groupHeadUrl = 11;
inline void Invitation::clear_groupheadurl() {
  _impl_.groupheadurl_.ClearToEmpty();
}
inline const std::string& Invitation::groupheadurl() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.Invitation.groupHeadUrl)
  return _internal_groupheadurl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Invitation::set_groupheadurl(ArgT0&& arg0, ArgT... args) {
 
 _impl_.groupheadurl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.Invitation.groupHeadUrl)
}
inline std::string* Invitation::mutable_groupheadurl() {
  std::string* _s = _internal_mutable_groupheadurl();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.Invitation.groupHeadUrl)
  return _s;
}
inline const std::string& Invitation::_internal_groupheadurl() const {
  return _impl_.groupheadurl_.Get();
}
inline void Invitation::_internal_set_groupheadurl(const std::string& value) {
  
  _impl_.groupheadurl_.Set(value, GetArenaForAllocation());
}
inline std::string* Invitation::_internal_mutable_groupheadurl() {
  
  return _impl_.groupheadurl_.Mutable(GetArenaForAllocation());
}
inline std::string* Invitation::release_groupheadurl() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.Invitation.groupHeadUrl)
  return _impl_.groupheadurl_.Release();
}
inline void Invitation::set_allocated_groupheadurl(std::string* groupheadurl) {
  if (groupheadurl != nullptr) {
    
  } else {
    
  }
  _impl_.groupheadurl_.SetAllocated(groupheadurl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.groupheadurl_.IsDefault()) {
    _impl_.groupheadurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.Invitation.groupHeadUrl)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Message
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Invitation_2eproto
