// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Media.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Media_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Media_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Audio.pb.h"
#include "Emoticon.pb.h"
#include "File.pb.h"
#include "Image.pb.h"
#include "Video.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Media_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Media_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Media_2eproto;
namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Message {
class Media;
struct MediaDefaultTypeInternal;
extern MediaDefaultTypeInternal _Media_default_instance_;
}  // namespace Message
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::Im::Cloud::Message::Media* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud::Message::Media>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Message {

// ===================================================================

class Media final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.Media) */ {
 public:
  inline Media() : Media(nullptr) {}
  ~Media() override;
  explicit PROTOBUF_CONSTEXPR Media(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Media(const Media& from);
  Media(Media&& from) noexcept
    : Media() {
    *this = ::std::move(from);
  }

  inline Media& operator=(const Media& from) {
    CopyFrom(from);
    return *this;
  }
  inline Media& operator=(Media&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Media& default_instance() {
    return *internal_default_instance();
  }
  enum ResourceCase {
    kImage = 1,
    kAudio = 2,
    kVideo = 3,
    kFile = 4,
    kEmoticon = 5,
    RESOURCE_NOT_SET = 0,
  };

  static inline const Media* internal_default_instance() {
    return reinterpret_cast<const Media*>(
               &_Media_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Media& a, Media& b) {
    a.Swap(&b);
  }
  inline void Swap(Media* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Media* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Media* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Media>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Media& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Media& from) {
    Media::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Media* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.Media";
  }
  protected:
  explicit Media(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 21,
    kPosFieldNumber = 20,
    kImageFieldNumber = 1,
    kAudioFieldNumber = 2,
    kVideoFieldNumber = 3,
    kFileFieldNumber = 4,
    kEmoticonFieldNumber = 5,
  };
  // string name = 21;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 pos = 20;
  void clear_pos();
  int32_t pos() const;
  void set_pos(int32_t value);
  private:
  int32_t _internal_pos() const;
  void _internal_set_pos(int32_t value);
  public:

  // .AcFunDanmu.Im.Cloud.Message.Image image = 1;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::AcFunDanmu::Im::Cloud::Message::Image& image() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Cloud::Message::Image* release_image();
  ::AcFunDanmu::Im::Cloud::Message::Image* mutable_image();
  void set_allocated_image(::AcFunDanmu::Im::Cloud::Message::Image* image);
  private:
  const ::AcFunDanmu::Im::Cloud::Message::Image& _internal_image() const;
  ::AcFunDanmu::Im::Cloud::Message::Image* _internal_mutable_image();
  public:
  void unsafe_arena_set_allocated_image(
      ::AcFunDanmu::Im::Cloud::Message::Image* image);
  ::AcFunDanmu::Im::Cloud::Message::Image* unsafe_arena_release_image();

  // .AcFunDanmu.Im.Cloud.Message.Audio audio = 2;
  bool has_audio() const;
  private:
  bool _internal_has_audio() const;
  public:
  void clear_audio();
  const ::AcFunDanmu::Im::Cloud::Message::Audio& audio() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Cloud::Message::Audio* release_audio();
  ::AcFunDanmu::Im::Cloud::Message::Audio* mutable_audio();
  void set_allocated_audio(::AcFunDanmu::Im::Cloud::Message::Audio* audio);
  private:
  const ::AcFunDanmu::Im::Cloud::Message::Audio& _internal_audio() const;
  ::AcFunDanmu::Im::Cloud::Message::Audio* _internal_mutable_audio();
  public:
  void unsafe_arena_set_allocated_audio(
      ::AcFunDanmu::Im::Cloud::Message::Audio* audio);
  ::AcFunDanmu::Im::Cloud::Message::Audio* unsafe_arena_release_audio();

  // .AcFunDanmu.Im.Cloud.Message.Video video = 3;
  bool has_video() const;
  private:
  bool _internal_has_video() const;
  public:
  void clear_video();
  const ::AcFunDanmu::Im::Cloud::Message::Video& video() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Cloud::Message::Video* release_video();
  ::AcFunDanmu::Im::Cloud::Message::Video* mutable_video();
  void set_allocated_video(::AcFunDanmu::Im::Cloud::Message::Video* video);
  private:
  const ::AcFunDanmu::Im::Cloud::Message::Video& _internal_video() const;
  ::AcFunDanmu::Im::Cloud::Message::Video* _internal_mutable_video();
  public:
  void unsafe_arena_set_allocated_video(
      ::AcFunDanmu::Im::Cloud::Message::Video* video);
  ::AcFunDanmu::Im::Cloud::Message::Video* unsafe_arena_release_video();

  // .AcFunDanmu.Im.Cloud.Message.File file = 4;
  bool has_file() const;
  private:
  bool _internal_has_file() const;
  public:
  void clear_file();
  const ::AcFunDanmu::Im::Cloud::Message::File& file() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Cloud::Message::File* release_file();
  ::AcFunDanmu::Im::Cloud::Message::File* mutable_file();
  void set_allocated_file(::AcFunDanmu::Im::Cloud::Message::File* file);
  private:
  const ::AcFunDanmu::Im::Cloud::Message::File& _internal_file() const;
  ::AcFunDanmu::Im::Cloud::Message::File* _internal_mutable_file();
  public:
  void unsafe_arena_set_allocated_file(
      ::AcFunDanmu::Im::Cloud::Message::File* file);
  ::AcFunDanmu::Im::Cloud::Message::File* unsafe_arena_release_file();

  // .AcFunDanmu.Im.Cloud.Message.Emoticon emoticon = 5;
  bool has_emoticon() const;
  private:
  bool _internal_has_emoticon() const;
  public:
  void clear_emoticon();
  const ::AcFunDanmu::Im::Cloud::Message::Emoticon& emoticon() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Cloud::Message::Emoticon* release_emoticon();
  ::AcFunDanmu::Im::Cloud::Message::Emoticon* mutable_emoticon();
  void set_allocated_emoticon(::AcFunDanmu::Im::Cloud::Message::Emoticon* emoticon);
  private:
  const ::AcFunDanmu::Im::Cloud::Message::Emoticon& _internal_emoticon() const;
  ::AcFunDanmu::Im::Cloud::Message::Emoticon* _internal_mutable_emoticon();
  public:
  void unsafe_arena_set_allocated_emoticon(
      ::AcFunDanmu::Im::Cloud::Message::Emoticon* emoticon);
  ::AcFunDanmu::Im::Cloud::Message::Emoticon* unsafe_arena_release_emoticon();

  void clear_resource();
  ResourceCase resource_case() const;
  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.Media)
 private:
  class _Internal;
  void set_has_image();
  void set_has_audio();
  void set_has_video();
  void set_has_file();
  void set_has_emoticon();

  inline bool has_resource() const;
  inline void clear_has_resource();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t pos_;
    union ResourceUnion {
      constexpr ResourceUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::AcFunDanmu::Im::Cloud::Message::Image* image_;
      ::AcFunDanmu::Im::Cloud::Message::Audio* audio_;
      ::AcFunDanmu::Im::Cloud::Message::Video* video_;
      ::AcFunDanmu::Im::Cloud::Message::File* file_;
      ::AcFunDanmu::Im::Cloud::Message::Emoticon* emoticon_;
    } resource_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Media_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Media

// .AcFunDanmu.Im.Cloud.Message.Image image = 1;
inline bool Media::_internal_has_image() const {
  return resource_case() == kImage;
}
inline bool Media::has_image() const {
  return _internal_has_image();
}
inline void Media::set_has_image() {
  _impl_._oneof_case_[0] = kImage;
}
inline ::AcFunDanmu::Im::Cloud::Message::Image* Media::release_image() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.Media.image)
  if (_internal_has_image()) {
    clear_has_resource();
    ::AcFunDanmu::Im::Cloud::Message::Image* temp = _impl_.resource_.image_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.resource_.image_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::AcFunDanmu::Im::Cloud::Message::Image& Media::_internal_image() const {
  return _internal_has_image()
      ? *_impl_.resource_.image_
      : reinterpret_cast< ::AcFunDanmu::Im::Cloud::Message::Image&>(::AcFunDanmu::Im::Cloud::Message::_Image_default_instance_);
}
inline const ::AcFunDanmu::Im::Cloud::Message::Image& Media::image() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.Media.image)
  return _internal_image();
}
inline ::AcFunDanmu::Im::Cloud::Message::Image* Media::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AcFunDanmu.Im.Cloud.Message.Media.image)
  if (_internal_has_image()) {
    clear_has_resource();
    ::AcFunDanmu::Im::Cloud::Message::Image* temp = _impl_.resource_.image_;
    _impl_.resource_.image_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Media::unsafe_arena_set_allocated_image(::AcFunDanmu::Im::Cloud::Message::Image* image) {
  clear_resource();
  if (image) {
    set_has_image();
    _impl_.resource_.image_ = image;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Message.Media.image)
}
inline ::AcFunDanmu::Im::Cloud::Message::Image* Media::_internal_mutable_image() {
  if (!_internal_has_image()) {
    clear_resource();
    set_has_image();
    _impl_.resource_.image_ = CreateMaybeMessage< ::AcFunDanmu::Im::Cloud::Message::Image >(GetArenaForAllocation());
  }
  return _impl_.resource_.image_;
}
inline ::AcFunDanmu::Im::Cloud::Message::Image* Media::mutable_image() {
  ::AcFunDanmu::Im::Cloud::Message::Image* _msg = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.Media.image)
  return _msg;
}

// .AcFunDanmu.Im.Cloud.Message.Audio audio = 2;
inline bool Media::_internal_has_audio() const {
  return resource_case() == kAudio;
}
inline bool Media::has_audio() const {
  return _internal_has_audio();
}
inline void Media::set_has_audio() {
  _impl_._oneof_case_[0] = kAudio;
}
inline ::AcFunDanmu::Im::Cloud::Message::Audio* Media::release_audio() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.Media.audio)
  if (_internal_has_audio()) {
    clear_has_resource();
    ::AcFunDanmu::Im::Cloud::Message::Audio* temp = _impl_.resource_.audio_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.resource_.audio_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::AcFunDanmu::Im::Cloud::Message::Audio& Media::_internal_audio() const {
  return _internal_has_audio()
      ? *_impl_.resource_.audio_
      : reinterpret_cast< ::AcFunDanmu::Im::Cloud::Message::Audio&>(::AcFunDanmu::Im::Cloud::Message::_Audio_default_instance_);
}
inline const ::AcFunDanmu::Im::Cloud::Message::Audio& Media::audio() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.Media.audio)
  return _internal_audio();
}
inline ::AcFunDanmu::Im::Cloud::Message::Audio* Media::unsafe_arena_release_audio() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AcFunDanmu.Im.Cloud.Message.Media.audio)
  if (_internal_has_audio()) {
    clear_has_resource();
    ::AcFunDanmu::Im::Cloud::Message::Audio* temp = _impl_.resource_.audio_;
    _impl_.resource_.audio_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Media::unsafe_arena_set_allocated_audio(::AcFunDanmu::Im::Cloud::Message::Audio* audio) {
  clear_resource();
  if (audio) {
    set_has_audio();
    _impl_.resource_.audio_ = audio;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Message.Media.audio)
}
inline ::AcFunDanmu::Im::Cloud::Message::Audio* Media::_internal_mutable_audio() {
  if (!_internal_has_audio()) {
    clear_resource();
    set_has_audio();
    _impl_.resource_.audio_ = CreateMaybeMessage< ::AcFunDanmu::Im::Cloud::Message::Audio >(GetArenaForAllocation());
  }
  return _impl_.resource_.audio_;
}
inline ::AcFunDanmu::Im::Cloud::Message::Audio* Media::mutable_audio() {
  ::AcFunDanmu::Im::Cloud::Message::Audio* _msg = _internal_mutable_audio();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.Media.audio)
  return _msg;
}

// .AcFunDanmu.Im.Cloud.Message.Video video = 3;
inline bool Media::_internal_has_video() const {
  return resource_case() == kVideo;
}
inline bool Media::has_video() const {
  return _internal_has_video();
}
inline void Media::set_has_video() {
  _impl_._oneof_case_[0] = kVideo;
}
inline ::AcFunDanmu::Im::Cloud::Message::Video* Media::release_video() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.Media.video)
  if (_internal_has_video()) {
    clear_has_resource();
    ::AcFunDanmu::Im::Cloud::Message::Video* temp = _impl_.resource_.video_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.resource_.video_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::AcFunDanmu::Im::Cloud::Message::Video& Media::_internal_video() const {
  return _internal_has_video()
      ? *_impl_.resource_.video_
      : reinterpret_cast< ::AcFunDanmu::Im::Cloud::Message::Video&>(::AcFunDanmu::Im::Cloud::Message::_Video_default_instance_);
}
inline const ::AcFunDanmu::Im::Cloud::Message::Video& Media::video() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.Media.video)
  return _internal_video();
}
inline ::AcFunDanmu::Im::Cloud::Message::Video* Media::unsafe_arena_release_video() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AcFunDanmu.Im.Cloud.Message.Media.video)
  if (_internal_has_video()) {
    clear_has_resource();
    ::AcFunDanmu::Im::Cloud::Message::Video* temp = _impl_.resource_.video_;
    _impl_.resource_.video_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Media::unsafe_arena_set_allocated_video(::AcFunDanmu::Im::Cloud::Message::Video* video) {
  clear_resource();
  if (video) {
    set_has_video();
    _impl_.resource_.video_ = video;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Message.Media.video)
}
inline ::AcFunDanmu::Im::Cloud::Message::Video* Media::_internal_mutable_video() {
  if (!_internal_has_video()) {
    clear_resource();
    set_has_video();
    _impl_.resource_.video_ = CreateMaybeMessage< ::AcFunDanmu::Im::Cloud::Message::Video >(GetArenaForAllocation());
  }
  return _impl_.resource_.video_;
}
inline ::AcFunDanmu::Im::Cloud::Message::Video* Media::mutable_video() {
  ::AcFunDanmu::Im::Cloud::Message::Video* _msg = _internal_mutable_video();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.Media.video)
  return _msg;
}

// .AcFunDanmu.Im.Cloud.Message.File file = 4;
inline bool Media::_internal_has_file() const {
  return resource_case() == kFile;
}
inline bool Media::has_file() const {
  return _internal_has_file();
}
inline void Media::set_has_file() {
  _impl_._oneof_case_[0] = kFile;
}
inline ::AcFunDanmu::Im::Cloud::Message::File* Media::release_file() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.Media.file)
  if (_internal_has_file()) {
    clear_has_resource();
    ::AcFunDanmu::Im::Cloud::Message::File* temp = _impl_.resource_.file_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.resource_.file_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::AcFunDanmu::Im::Cloud::Message::File& Media::_internal_file() const {
  return _internal_has_file()
      ? *_impl_.resource_.file_
      : reinterpret_cast< ::AcFunDanmu::Im::Cloud::Message::File&>(::AcFunDanmu::Im::Cloud::Message::_File_default_instance_);
}
inline const ::AcFunDanmu::Im::Cloud::Message::File& Media::file() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.Media.file)
  return _internal_file();
}
inline ::AcFunDanmu::Im::Cloud::Message::File* Media::unsafe_arena_release_file() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AcFunDanmu.Im.Cloud.Message.Media.file)
  if (_internal_has_file()) {
    clear_has_resource();
    ::AcFunDanmu::Im::Cloud::Message::File* temp = _impl_.resource_.file_;
    _impl_.resource_.file_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Media::unsafe_arena_set_allocated_file(::AcFunDanmu::Im::Cloud::Message::File* file) {
  clear_resource();
  if (file) {
    set_has_file();
    _impl_.resource_.file_ = file;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Message.Media.file)
}
inline ::AcFunDanmu::Im::Cloud::Message::File* Media::_internal_mutable_file() {
  if (!_internal_has_file()) {
    clear_resource();
    set_has_file();
    _impl_.resource_.file_ = CreateMaybeMessage< ::AcFunDanmu::Im::Cloud::Message::File >(GetArenaForAllocation());
  }
  return _impl_.resource_.file_;
}
inline ::AcFunDanmu::Im::Cloud::Message::File* Media::mutable_file() {
  ::AcFunDanmu::Im::Cloud::Message::File* _msg = _internal_mutable_file();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.Media.file)
  return _msg;
}

// .AcFunDanmu.Im.Cloud.Message.Emoticon emoticon = 5;
inline bool Media::_internal_has_emoticon() const {
  return resource_case() == kEmoticon;
}
inline bool Media::has_emoticon() const {
  return _internal_has_emoticon();
}
inline void Media::set_has_emoticon() {
  _impl_._oneof_case_[0] = kEmoticon;
}
inline ::AcFunDanmu::Im::Cloud::Message::Emoticon* Media::release_emoticon() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.Media.emoticon)
  if (_internal_has_emoticon()) {
    clear_has_resource();
    ::AcFunDanmu::Im::Cloud::Message::Emoticon* temp = _impl_.resource_.emoticon_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.resource_.emoticon_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::AcFunDanmu::Im::Cloud::Message::Emoticon& Media::_internal_emoticon() const {
  return _internal_has_emoticon()
      ? *_impl_.resource_.emoticon_
      : reinterpret_cast< ::AcFunDanmu::Im::Cloud::Message::Emoticon&>(::AcFunDanmu::Im::Cloud::Message::_Emoticon_default_instance_);
}
inline const ::AcFunDanmu::Im::Cloud::Message::Emoticon& Media::emoticon() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.Media.emoticon)
  return _internal_emoticon();
}
inline ::AcFunDanmu::Im::Cloud::Message::Emoticon* Media::unsafe_arena_release_emoticon() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AcFunDanmu.Im.Cloud.Message.Media.emoticon)
  if (_internal_has_emoticon()) {
    clear_has_resource();
    ::AcFunDanmu::Im::Cloud::Message::Emoticon* temp = _impl_.resource_.emoticon_;
    _impl_.resource_.emoticon_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Media::unsafe_arena_set_allocated_emoticon(::AcFunDanmu::Im::Cloud::Message::Emoticon* emoticon) {
  clear_resource();
  if (emoticon) {
    set_has_emoticon();
    _impl_.resource_.emoticon_ = emoticon;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Message.Media.emoticon)
}
inline ::AcFunDanmu::Im::Cloud::Message::Emoticon* Media::_internal_mutable_emoticon() {
  if (!_internal_has_emoticon()) {
    clear_resource();
    set_has_emoticon();
    _impl_.resource_.emoticon_ = CreateMaybeMessage< ::AcFunDanmu::Im::Cloud::Message::Emoticon >(GetArenaForAllocation());
  }
  return _impl_.resource_.emoticon_;
}
inline ::AcFunDanmu::Im::Cloud::Message::Emoticon* Media::mutable_emoticon() {
  ::AcFunDanmu::Im::Cloud::Message::Emoticon* _msg = _internal_mutable_emoticon();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.Media.emoticon)
  return _msg;
}

// int32 pos = 20;
inline void Media::clear_pos() {
  _impl_.pos_ = 0;
}
inline int32_t Media::_internal_pos() const {
  return _impl_.pos_;
}
inline int32_t Media::pos() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.Media.pos)
  return _internal_pos();
}
inline void Media::_internal_set_pos(int32_t value) {
  
  _impl_.pos_ = value;
}
inline void Media::set_pos(int32_t value) {
  _internal_set_pos(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.Media.pos)
}

// string name = 21;
inline void Media::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Media::name() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.Media.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Media::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.Media.name)
}
inline std::string* Media::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.Media.name)
  return _s;
}
inline const std::string& Media::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Media::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Media::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Media::release_name() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.Media.name)
  return _impl_.name_.Release();
}
inline void Media::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.Media.name)
}

inline bool Media::has_resource() const {
  return resource_case() != RESOURCE_NOT_SET;
}
inline void Media::clear_has_resource() {
  _impl_._oneof_case_[0] = RESOURCE_NOT_SET;
}
inline Media::ResourceCase Media::resource_case() const {
  return Media::ResourceCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Message
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Media_2eproto
