// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: InvitationOperator.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_InvitationOperator_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_InvitationOperator_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "User.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_InvitationOperator_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_InvitationOperator_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_InvitationOperator_2eproto;
namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Message {
class InvitationOperator;
struct InvitationOperatorDefaultTypeInternal;
extern InvitationOperatorDefaultTypeInternal _InvitationOperator_default_instance_;
}  // namespace Message
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::Im::Cloud::Message::InvitationOperator* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud::Message::InvitationOperator>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Message {

enum InvitationOperator_OperatorRole : int {
  InvitationOperator_OperatorRole_UNKNOWN_ROLE = 0,
  InvitationOperator_OperatorRole_COMMON = 1,
  InvitationOperator_OperatorRole_ADMIN = 2,
  InvitationOperator_OperatorRole_MANAGER = 3,
  InvitationOperator_OperatorRole_InvitationOperator_OperatorRole_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  InvitationOperator_OperatorRole_InvitationOperator_OperatorRole_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool InvitationOperator_OperatorRole_IsValid(int value);
constexpr InvitationOperator_OperatorRole InvitationOperator_OperatorRole_OperatorRole_MIN = InvitationOperator_OperatorRole_UNKNOWN_ROLE;
constexpr InvitationOperator_OperatorRole InvitationOperator_OperatorRole_OperatorRole_MAX = InvitationOperator_OperatorRole_MANAGER;
constexpr int InvitationOperator_OperatorRole_OperatorRole_ARRAYSIZE = InvitationOperator_OperatorRole_OperatorRole_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InvitationOperator_OperatorRole_descriptor();
template<typename T>
inline const std::string& InvitationOperator_OperatorRole_Name(T enum_t_value) {
  static_assert(::std::is_same<T, InvitationOperator_OperatorRole>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function InvitationOperator_OperatorRole_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    InvitationOperator_OperatorRole_descriptor(), enum_t_value);
}
inline bool InvitationOperator_OperatorRole_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, InvitationOperator_OperatorRole* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<InvitationOperator_OperatorRole>(
    InvitationOperator_OperatorRole_descriptor(), name, value);
}
// ===================================================================

class InvitationOperator final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.InvitationOperator) */ {
 public:
  inline InvitationOperator() : InvitationOperator(nullptr) {}
  ~InvitationOperator() override;
  explicit PROTOBUF_CONSTEXPR InvitationOperator(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InvitationOperator(const InvitationOperator& from);
  InvitationOperator(InvitationOperator&& from) noexcept
    : InvitationOperator() {
    *this = ::std::move(from);
  }

  inline InvitationOperator& operator=(const InvitationOperator& from) {
    CopyFrom(from);
    return *this;
  }
  inline InvitationOperator& operator=(InvitationOperator&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InvitationOperator& default_instance() {
    return *internal_default_instance();
  }
  static inline const InvitationOperator* internal_default_instance() {
    return reinterpret_cast<const InvitationOperator*>(
               &_InvitationOperator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InvitationOperator& a, InvitationOperator& b) {
    a.Swap(&b);
  }
  inline void Swap(InvitationOperator* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InvitationOperator* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InvitationOperator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InvitationOperator>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InvitationOperator& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InvitationOperator& from) {
    InvitationOperator::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InvitationOperator* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.InvitationOperator";
  }
  protected:
  explicit InvitationOperator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef InvitationOperator_OperatorRole OperatorRole;
  static constexpr OperatorRole UNKNOWN_ROLE =
    InvitationOperator_OperatorRole_UNKNOWN_ROLE;
  static constexpr OperatorRole COMMON =
    InvitationOperator_OperatorRole_COMMON;
  static constexpr OperatorRole ADMIN =
    InvitationOperator_OperatorRole_ADMIN;
  static constexpr OperatorRole MANAGER =
    InvitationOperator_OperatorRole_MANAGER;
  static inline bool OperatorRole_IsValid(int value) {
    return InvitationOperator_OperatorRole_IsValid(value);
  }
  static constexpr OperatorRole OperatorRole_MIN =
    InvitationOperator_OperatorRole_OperatorRole_MIN;
  static constexpr OperatorRole OperatorRole_MAX =
    InvitationOperator_OperatorRole_OperatorRole_MAX;
  static constexpr int OperatorRole_ARRAYSIZE =
    InvitationOperator_OperatorRole_OperatorRole_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  OperatorRole_descriptor() {
    return InvitationOperator_OperatorRole_descriptor();
  }
  template<typename T>
  static inline const std::string& OperatorRole_Name(T enum_t_value) {
    static_assert(::std::is_same<T, OperatorRole>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function OperatorRole_Name.");
    return InvitationOperator_OperatorRole_Name(enum_t_value);
  }
  static inline bool OperatorRole_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      OperatorRole* value) {
    return InvitationOperator_OperatorRole_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kOperatorFieldNumber = 1,
    kOperatorRoleFieldNumber = 2,
  };
  // .AcFunDanmu.Im.Basic.User operator = 1;
  bool has_operator_() const;
  private:
  bool _internal_has_operator_() const;
  public:
  void clear_operator_();
  const ::AcFunDanmu::Im::Basic::User& operator_() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Basic::User* release_operator_();
  ::AcFunDanmu::Im::Basic::User* mutable_operator_();
  void set_allocated_operator_(::AcFunDanmu::Im::Basic::User* operator_);
  private:
  const ::AcFunDanmu::Im::Basic::User& _internal_operator_() const;
  ::AcFunDanmu::Im::Basic::User* _internal_mutable_operator_();
  public:
  void unsafe_arena_set_allocated_operator_(
      ::AcFunDanmu::Im::Basic::User* operator_);
  ::AcFunDanmu::Im::Basic::User* unsafe_arena_release_operator_();

  // .AcFunDanmu.Im.Cloud.Message.InvitationOperator.OperatorRole operatorRole = 2;
  void clear_operatorrole();
  ::AcFunDanmu::Im::Cloud::Message::InvitationOperator_OperatorRole operatorrole() const;
  void set_operatorrole(::AcFunDanmu::Im::Cloud::Message::InvitationOperator_OperatorRole value);
  private:
  ::AcFunDanmu::Im::Cloud::Message::InvitationOperator_OperatorRole _internal_operatorrole() const;
  void _internal_set_operatorrole(::AcFunDanmu::Im::Cloud::Message::InvitationOperator_OperatorRole value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.InvitationOperator)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::AcFunDanmu::Im::Basic::User* operator__;
    int operatorrole_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_InvitationOperator_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InvitationOperator

// .AcFunDanmu.Im.Basic.User operator = 1;
inline bool InvitationOperator::_internal_has_operator_() const {
  return this != internal_default_instance() && _impl_.operator__ != nullptr;
}
inline bool InvitationOperator::has_operator_() const {
  return _internal_has_operator_();
}
inline const ::AcFunDanmu::Im::Basic::User& InvitationOperator::_internal_operator_() const {
  const ::AcFunDanmu::Im::Basic::User* p = _impl_.operator__;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic::User&>(
      ::AcFunDanmu::Im::Basic::_User_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic::User& InvitationOperator::operator_() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.InvitationOperator.operator)
  return _internal_operator_();
}
inline void InvitationOperator::unsafe_arena_set_allocated_operator_(
    ::AcFunDanmu::Im::Basic::User* operator_) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.operator__);
  }
  _impl_.operator__ = operator_;
  if (operator_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Message.InvitationOperator.operator)
}
inline ::AcFunDanmu::Im::Basic::User* InvitationOperator::release_operator_() {
  
  ::AcFunDanmu::Im::Basic::User* temp = _impl_.operator__;
  _impl_.operator__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AcFunDanmu::Im::Basic::User* InvitationOperator::unsafe_arena_release_operator_() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.InvitationOperator.operator)
  
  ::AcFunDanmu::Im::Basic::User* temp = _impl_.operator__;
  _impl_.operator__ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic::User* InvitationOperator::_internal_mutable_operator_() {
  
  if (_impl_.operator__ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic::User>(GetArenaForAllocation());
    _impl_.operator__ = p;
  }
  return _impl_.operator__;
}
inline ::AcFunDanmu::Im::Basic::User* InvitationOperator::mutable_operator_() {
  ::AcFunDanmu::Im::Basic::User* _msg = _internal_mutable_operator_();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.InvitationOperator.operator)
  return _msg;
}
inline void InvitationOperator::set_allocated_operator_(::AcFunDanmu::Im::Basic::User* operator_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.operator__);
  }
  if (operator_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(operator_));
    if (message_arena != submessage_arena) {
      operator_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, operator_, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.operator__ = operator_;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.InvitationOperator.operator)
}

// .AcFunDanmu.Im.Cloud.Message.InvitationOperator.OperatorRole operatorRole = 2;
inline void InvitationOperator::clear_operatorrole() {
  _impl_.operatorrole_ = 0;
}
inline ::AcFunDanmu::Im::Cloud::Message::InvitationOperator_OperatorRole InvitationOperator::_internal_operatorrole() const {
  return static_cast< ::AcFunDanmu::Im::Cloud::Message::InvitationOperator_OperatorRole >(_impl_.operatorrole_);
}
inline ::AcFunDanmu::Im::Cloud::Message::InvitationOperator_OperatorRole InvitationOperator::operatorrole() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.InvitationOperator.operatorRole)
  return _internal_operatorrole();
}
inline void InvitationOperator::_internal_set_operatorrole(::AcFunDanmu::Im::Cloud::Message::InvitationOperator_OperatorRole value) {
  
  _impl_.operatorrole_ = value;
}
inline void InvitationOperator::set_operatorrole(::AcFunDanmu::Im::Cloud::Message::InvitationOperator_OperatorRole value) {
  _internal_set_operatorrole(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.InvitationOperator.operatorRole)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Message
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::AcFunDanmu::Im::Cloud::Message::InvitationOperator_OperatorRole> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::Im::Cloud::Message::InvitationOperator_OperatorRole>() {
  return ::AcFunDanmu::Im::Cloud::Message::InvitationOperator_OperatorRole_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_InvitationOperator_2eproto
