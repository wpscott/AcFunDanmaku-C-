// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SessionFolderUpdateRequest.proto

#include "SessionFolderUpdateRequest.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace SessionFolder {
PROTOBUF_CONSTEXPR SessionFolderUpdateRequest::SessionFolderUpdateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fields_)*/{}
  , /*decltype(_impl_._fields_cached_byte_size_)*/{0}
  , /*decltype(_impl_.sessionfolderid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.foldername_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.iconurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.extra_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SessionFolderUpdateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SessionFolderUpdateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SessionFolderUpdateRequestDefaultTypeInternal() {}
  union {
    SessionFolderUpdateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SessionFolderUpdateRequestDefaultTypeInternal _SessionFolderUpdateRequest_default_instance_;
}  // namespace SessionFolder
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu
static ::_pb::Metadata file_level_metadata_SessionFolderUpdateRequest_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_SessionFolderUpdateRequest_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_SessionFolderUpdateRequest_2eproto = nullptr;

const uint32_t TableStruct_SessionFolderUpdateRequest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::SessionFolder::SessionFolderUpdateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::SessionFolder::SessionFolderUpdateRequest, _impl_.sessionfolderid_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::SessionFolder::SessionFolderUpdateRequest, _impl_.fields_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::SessionFolder::SessionFolderUpdateRequest, _impl_.foldername_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::SessionFolder::SessionFolderUpdateRequest, _impl_.iconurl_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::SessionFolder::SessionFolderUpdateRequest, _impl_.extra_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::AcFunDanmu::Im::Cloud::SessionFolder::SessionFolderUpdateRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::AcFunDanmu::Im::Cloud::SessionFolder::_SessionFolderUpdateRequest_default_instance_._instance,
};

const char descriptor_table_protodef_SessionFolderUpdateRequest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n SessionFolderUpdateRequest.proto\022!AcFu"
  "nDanmu.Im.Cloud.SessionFolder\"\221\002\n\032Sessio"
  "nFolderUpdateRequest\022\027\n\017sessionFolderId\030"
  "\001 \001(\t\022Y\n\006fields\030\002 \003(\0162I.AcFunDanmu.Im.Cl"
  "oud.SessionFolder.SessionFolderUpdateReq"
  "uest.UpdateField\022\022\n\nfolderName\030\003 \001(\t\022\017\n\007"
  "iconUrl\030\004 \001(\t\022\r\n\005extra\030\005 \001(\014\"K\n\013UpdateFi"
  "eld\022\022\n\016UN_KNOWN_FIELD\020\000\022\017\n\013FOLDER_NAME\020\001"
  "\022\014\n\010ICON_URL\020\002\022\t\n\005EXTRA\020\003b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_SessionFolderUpdateRequest_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_SessionFolderUpdateRequest_2eproto = {
    false, false, 353, descriptor_table_protodef_SessionFolderUpdateRequest_2eproto,
    "SessionFolderUpdateRequest.proto",
    &descriptor_table_SessionFolderUpdateRequest_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_SessionFolderUpdateRequest_2eproto::offsets,
    file_level_metadata_SessionFolderUpdateRequest_2eproto, file_level_enum_descriptors_SessionFolderUpdateRequest_2eproto,
    file_level_service_descriptors_SessionFolderUpdateRequest_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_SessionFolderUpdateRequest_2eproto_getter() {
  return &descriptor_table_SessionFolderUpdateRequest_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_SessionFolderUpdateRequest_2eproto(&descriptor_table_SessionFolderUpdateRequest_2eproto);
namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace SessionFolder {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SessionFolderUpdateRequest_UpdateField_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SessionFolderUpdateRequest_2eproto);
  return file_level_enum_descriptors_SessionFolderUpdateRequest_2eproto[0];
}
bool SessionFolderUpdateRequest_UpdateField_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SessionFolderUpdateRequest_UpdateField SessionFolderUpdateRequest::UN_KNOWN_FIELD;
constexpr SessionFolderUpdateRequest_UpdateField SessionFolderUpdateRequest::FOLDER_NAME;
constexpr SessionFolderUpdateRequest_UpdateField SessionFolderUpdateRequest::ICON_URL;
constexpr SessionFolderUpdateRequest_UpdateField SessionFolderUpdateRequest::EXTRA;
constexpr SessionFolderUpdateRequest_UpdateField SessionFolderUpdateRequest::UpdateField_MIN;
constexpr SessionFolderUpdateRequest_UpdateField SessionFolderUpdateRequest::UpdateField_MAX;
constexpr int SessionFolderUpdateRequest::UpdateField_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class SessionFolderUpdateRequest::_Internal {
 public:
};

SessionFolderUpdateRequest::SessionFolderUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.Im.Cloud.SessionFolder.SessionFolderUpdateRequest)
}
SessionFolderUpdateRequest::SessionFolderUpdateRequest(const SessionFolderUpdateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SessionFolderUpdateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fields_){from._impl_.fields_}
    , /*decltype(_impl_._fields_cached_byte_size_)*/{0}
    , decltype(_impl_.sessionfolderid_){}
    , decltype(_impl_.foldername_){}
    , decltype(_impl_.iconurl_){}
    , decltype(_impl_.extra_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sessionfolderid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sessionfolderid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sessionfolderid().empty()) {
    _this->_impl_.sessionfolderid_.Set(from._internal_sessionfolderid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.foldername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.foldername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_foldername().empty()) {
    _this->_impl_.foldername_.Set(from._internal_foldername(), 
      _this->GetArenaForAllocation());
  }
  _impl_.iconurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.iconurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_iconurl().empty()) {
    _this->_impl_.iconurl_.Set(from._internal_iconurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.extra_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extra_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_extra().empty()) {
    _this->_impl_.extra_.Set(from._internal_extra(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.Im.Cloud.SessionFolder.SessionFolderUpdateRequest)
}

inline void SessionFolderUpdateRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fields_){arena}
    , /*decltype(_impl_._fields_cached_byte_size_)*/{0}
    , decltype(_impl_.sessionfolderid_){}
    , decltype(_impl_.foldername_){}
    , decltype(_impl_.iconurl_){}
    , decltype(_impl_.extra_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sessionfolderid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sessionfolderid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.foldername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.foldername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.iconurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.iconurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.extra_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extra_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SessionFolderUpdateRequest::~SessionFolderUpdateRequest() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.Im.Cloud.SessionFolder.SessionFolderUpdateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SessionFolderUpdateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.fields_.~RepeatedField();
  _impl_.sessionfolderid_.Destroy();
  _impl_.foldername_.Destroy();
  _impl_.iconurl_.Destroy();
  _impl_.extra_.Destroy();
}

void SessionFolderUpdateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SessionFolderUpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.Im.Cloud.SessionFolder.SessionFolderUpdateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fields_.Clear();
  _impl_.sessionfolderid_.ClearToEmpty();
  _impl_.foldername_.ClearToEmpty();
  _impl_.iconurl_.ClearToEmpty();
  _impl_.extra_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionFolderUpdateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sessionFolderId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sessionfolderid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Cloud.SessionFolder.SessionFolderUpdateRequest.sessionFolderId"));
        } else
          goto handle_unusual;
        continue;
      // repeated .AcFunDanmu.Im.Cloud.SessionFolder.SessionFolderUpdateRequest.UpdateField fields = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_fields(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_fields(static_cast<::AcFunDanmu::Im::Cloud::SessionFolder::SessionFolderUpdateRequest_UpdateField>(val));
        } else
          goto handle_unusual;
        continue;
      // string folderName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_foldername();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Cloud.SessionFolder.SessionFolderUpdateRequest.folderName"));
        } else
          goto handle_unusual;
        continue;
      // string iconUrl = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_iconurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Cloud.SessionFolder.SessionFolderUpdateRequest.iconUrl"));
        } else
          goto handle_unusual;
        continue;
      // bytes extra = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_extra();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SessionFolderUpdateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.Im.Cloud.SessionFolder.SessionFolderUpdateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sessionFolderId = 1;
  if (!this->_internal_sessionfolderid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sessionfolderid().data(), static_cast<int>(this->_internal_sessionfolderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Cloud.SessionFolder.SessionFolderUpdateRequest.sessionFolderId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sessionfolderid(), target);
  }

  // repeated .AcFunDanmu.Im.Cloud.SessionFolder.SessionFolderUpdateRequest.UpdateField fields = 2;
  {
    int byte_size = _impl_._fields_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          2, _impl_.fields_, byte_size, target);
    }
  }

  // string folderName = 3;
  if (!this->_internal_foldername().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_foldername().data(), static_cast<int>(this->_internal_foldername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Cloud.SessionFolder.SessionFolderUpdateRequest.folderName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_foldername(), target);
  }

  // string iconUrl = 4;
  if (!this->_internal_iconurl().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_iconurl().data(), static_cast<int>(this->_internal_iconurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Cloud.SessionFolder.SessionFolderUpdateRequest.iconUrl");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_iconurl(), target);
  }

  // bytes extra = 5;
  if (!this->_internal_extra().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_extra(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.Im.Cloud.SessionFolder.SessionFolderUpdateRequest)
  return target;
}

size_t SessionFolderUpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.Im.Cloud.SessionFolder.SessionFolderUpdateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .AcFunDanmu.Im.Cloud.SessionFolder.SessionFolderUpdateRequest.UpdateField fields = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_fields_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_fields(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._fields_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string sessionFolderId = 1;
  if (!this->_internal_sessionfolderid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sessionfolderid());
  }

  // string folderName = 3;
  if (!this->_internal_foldername().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_foldername());
  }

  // string iconUrl = 4;
  if (!this->_internal_iconurl().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_iconurl());
  }

  // bytes extra = 5;
  if (!this->_internal_extra().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_extra());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SessionFolderUpdateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SessionFolderUpdateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SessionFolderUpdateRequest::GetClassData() const { return &_class_data_; }


void SessionFolderUpdateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SessionFolderUpdateRequest*>(&to_msg);
  auto& from = static_cast<const SessionFolderUpdateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.Im.Cloud.SessionFolder.SessionFolderUpdateRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.fields_.MergeFrom(from._impl_.fields_);
  if (!from._internal_sessionfolderid().empty()) {
    _this->_internal_set_sessionfolderid(from._internal_sessionfolderid());
  }
  if (!from._internal_foldername().empty()) {
    _this->_internal_set_foldername(from._internal_foldername());
  }
  if (!from._internal_iconurl().empty()) {
    _this->_internal_set_iconurl(from._internal_iconurl());
  }
  if (!from._internal_extra().empty()) {
    _this->_internal_set_extra(from._internal_extra());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SessionFolderUpdateRequest::CopyFrom(const SessionFolderUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.Im.Cloud.SessionFolder.SessionFolderUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionFolderUpdateRequest::IsInitialized() const {
  return true;
}

void SessionFolderUpdateRequest::InternalSwap(SessionFolderUpdateRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.fields_.InternalSwap(&other->_impl_.fields_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sessionfolderid_, lhs_arena,
      &other->_impl_.sessionfolderid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.foldername_, lhs_arena,
      &other->_impl_.foldername_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.iconurl_, lhs_arena,
      &other->_impl_.iconurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.extra_, lhs_arena,
      &other->_impl_.extra_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionFolderUpdateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_SessionFolderUpdateRequest_2eproto_getter, &descriptor_table_SessionFolderUpdateRequest_2eproto_once,
      file_level_metadata_SessionFolderUpdateRequest_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace SessionFolder
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AcFunDanmu::Im::Cloud::SessionFolder::SessionFolderUpdateRequest*
Arena::CreateMaybeMessage< ::AcFunDanmu::Im::Cloud::SessionFolder::SessionFolderUpdateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::Im::Cloud::SessionFolder::SessionFolderUpdateRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
