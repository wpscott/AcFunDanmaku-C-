// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GroupCreateRequest.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_GroupCreateRequest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_GroupCreateRequest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "GroupLabel.pb.h"
#include "GroupType.pb.h"
#include "Location.pb.h"
#include "User.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_GroupCreateRequest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_GroupCreateRequest_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_GroupCreateRequest_2eproto;
namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Message {
class GroupCreateRequest;
struct GroupCreateRequestDefaultTypeInternal;
extern GroupCreateRequestDefaultTypeInternal _GroupCreateRequest_default_instance_;
}  // namespace Message
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::Im::Cloud::Message::GroupCreateRequest* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud::Message::GroupCreateRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Message {

// ===================================================================

class GroupCreateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.GroupCreateRequest) */ {
 public:
  inline GroupCreateRequest() : GroupCreateRequest(nullptr) {}
  ~GroupCreateRequest() override;
  explicit PROTOBUF_CONSTEXPR GroupCreateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupCreateRequest(const GroupCreateRequest& from);
  GroupCreateRequest(GroupCreateRequest&& from) noexcept
    : GroupCreateRequest() {
    *this = ::std::move(from);
  }

  inline GroupCreateRequest& operator=(const GroupCreateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupCreateRequest& operator=(GroupCreateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupCreateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupCreateRequest* internal_default_instance() {
    return reinterpret_cast<const GroupCreateRequest*>(
               &_GroupCreateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GroupCreateRequest& a, GroupCreateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupCreateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupCreateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupCreateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupCreateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupCreateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupCreateRequest& from) {
    GroupCreateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupCreateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.GroupCreateRequest";
  }
  protected:
  explicit GroupCreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 1,
    kLabelFieldNumber = 9,
    kGroupNameFieldNumber = 2,
    kGroupHeadUrlFieldNumber = 3,
    kTagFieldNumber = 5,
    kIntroductionFieldNumber = 7,
    kOriginalTargetFieldNumber = 8,
    kLocationFieldNumber = 4,
    kGroupTypeFieldNumber = 6,
  };
  // repeated .AcFunDanmu.Im.Basic.User members = 1;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  ::AcFunDanmu::Im::Basic::User* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic::User >*
      mutable_members();
  private:
  const ::AcFunDanmu::Im::Basic::User& _internal_members(int index) const;
  ::AcFunDanmu::Im::Basic::User* _internal_add_members();
  public:
  const ::AcFunDanmu::Im::Basic::User& members(int index) const;
  ::AcFunDanmu::Im::Basic::User* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic::User >&
      members() const;

  // repeated .AcFunDanmu.Im.Cloud.Message.GroupLabel label = 9;
  int label_size() const;
  private:
  int _internal_label_size() const;
  public:
  void clear_label();
  ::AcFunDanmu::Im::Cloud::Message::GroupLabel* mutable_label(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud::Message::GroupLabel >*
      mutable_label();
  private:
  const ::AcFunDanmu::Im::Cloud::Message::GroupLabel& _internal_label(int index) const;
  ::AcFunDanmu::Im::Cloud::Message::GroupLabel* _internal_add_label();
  public:
  const ::AcFunDanmu::Im::Cloud::Message::GroupLabel& label(int index) const;
  ::AcFunDanmu::Im::Cloud::Message::GroupLabel* add_label();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud::Message::GroupLabel >&
      label() const;

  // string groupName = 2;
  void clear_groupname();
  const std::string& groupname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_groupname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_groupname();
  PROTOBUF_NODISCARD std::string* release_groupname();
  void set_allocated_groupname(std::string* groupname);
  private:
  const std::string& _internal_groupname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_groupname(const std::string& value);
  std::string* _internal_mutable_groupname();
  public:

  // string groupHeadUrl = 3;
  void clear_groupheadurl();
  const std::string& groupheadurl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_groupheadurl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_groupheadurl();
  PROTOBUF_NODISCARD std::string* release_groupheadurl();
  void set_allocated_groupheadurl(std::string* groupheadurl);
  private:
  const std::string& _internal_groupheadurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_groupheadurl(const std::string& value);
  std::string* _internal_mutable_groupheadurl();
  public:

  // string tag = 5;
  void clear_tag();
  const std::string& tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tag();
  PROTOBUF_NODISCARD std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // string introduction = 7;
  void clear_introduction();
  const std::string& introduction() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_introduction(ArgT0&& arg0, ArgT... args);
  std::string* mutable_introduction();
  PROTOBUF_NODISCARD std::string* release_introduction();
  void set_allocated_introduction(std::string* introduction);
  private:
  const std::string& _internal_introduction() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_introduction(const std::string& value);
  std::string* _internal_mutable_introduction();
  public:

  // string originalTarget = 8;
  void clear_originaltarget();
  const std::string& originaltarget() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_originaltarget(ArgT0&& arg0, ArgT... args);
  std::string* mutable_originaltarget();
  PROTOBUF_NODISCARD std::string* release_originaltarget();
  void set_allocated_originaltarget(std::string* originaltarget);
  private:
  const std::string& _internal_originaltarget() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_originaltarget(const std::string& value);
  std::string* _internal_mutable_originaltarget();
  public:

  // .AcFunDanmu.Im.Cloud.Message.Location location = 4;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::AcFunDanmu::Im::Cloud::Message::Location& location() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Cloud::Message::Location* release_location();
  ::AcFunDanmu::Im::Cloud::Message::Location* mutable_location();
  void set_allocated_location(::AcFunDanmu::Im::Cloud::Message::Location* location);
  private:
  const ::AcFunDanmu::Im::Cloud::Message::Location& _internal_location() const;
  ::AcFunDanmu::Im::Cloud::Message::Location* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::AcFunDanmu::Im::Cloud::Message::Location* location);
  ::AcFunDanmu::Im::Cloud::Message::Location* unsafe_arena_release_location();

  // .AcFunDanmu.Im.Cloud.Message.GroupType groupType = 6;
  void clear_grouptype();
  ::AcFunDanmu::Im::Cloud::Message::GroupType grouptype() const;
  void set_grouptype(::AcFunDanmu::Im::Cloud::Message::GroupType value);
  private:
  ::AcFunDanmu::Im::Cloud::Message::GroupType _internal_grouptype() const;
  void _internal_set_grouptype(::AcFunDanmu::Im::Cloud::Message::GroupType value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.GroupCreateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic::User > members_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud::Message::GroupLabel > label_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupheadurl_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr introduction_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr originaltarget_;
    ::AcFunDanmu::Im::Cloud::Message::Location* location_;
    int grouptype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GroupCreateRequest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GroupCreateRequest

// repeated .AcFunDanmu.Im.Basic.User members = 1;
inline int GroupCreateRequest::_internal_members_size() const {
  return _impl_.members_.size();
}
inline int GroupCreateRequest::members_size() const {
  return _internal_members_size();
}
inline ::AcFunDanmu::Im::Basic::User* GroupCreateRequest::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupCreateRequest.members)
  return _impl_.members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic::User >*
GroupCreateRequest::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Cloud.Message.GroupCreateRequest.members)
  return &_impl_.members_;
}
inline const ::AcFunDanmu::Im::Basic::User& GroupCreateRequest::_internal_members(int index) const {
  return _impl_.members_.Get(index);
}
inline const ::AcFunDanmu::Im::Basic::User& GroupCreateRequest::members(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupCreateRequest.members)
  return _internal_members(index);
}
inline ::AcFunDanmu::Im::Basic::User* GroupCreateRequest::_internal_add_members() {
  return _impl_.members_.Add();
}
inline ::AcFunDanmu::Im::Basic::User* GroupCreateRequest::add_members() {
  ::AcFunDanmu::Im::Basic::User* _add = _internal_add_members();
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Cloud.Message.GroupCreateRequest.members)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic::User >&
GroupCreateRequest::members() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Cloud.Message.GroupCreateRequest.members)
  return _impl_.members_;
}

// string groupName = 2;
inline void GroupCreateRequest::clear_groupname() {
  _impl_.groupname_.ClearToEmpty();
}
inline const std::string& GroupCreateRequest::groupname() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupCreateRequest.groupName)
  return _internal_groupname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupCreateRequest::set_groupname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.groupname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupCreateRequest.groupName)
}
inline std::string* GroupCreateRequest::mutable_groupname() {
  std::string* _s = _internal_mutable_groupname();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupCreateRequest.groupName)
  return _s;
}
inline const std::string& GroupCreateRequest::_internal_groupname() const {
  return _impl_.groupname_.Get();
}
inline void GroupCreateRequest::_internal_set_groupname(const std::string& value) {
  
  _impl_.groupname_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupCreateRequest::_internal_mutable_groupname() {
  
  return _impl_.groupname_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupCreateRequest::release_groupname() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupCreateRequest.groupName)
  return _impl_.groupname_.Release();
}
inline void GroupCreateRequest::set_allocated_groupname(std::string* groupname) {
  if (groupname != nullptr) {
    
  } else {
    
  }
  _impl_.groupname_.SetAllocated(groupname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.groupname_.IsDefault()) {
    _impl_.groupname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupCreateRequest.groupName)
}

// string groupHeadUrl = 3;
inline void GroupCreateRequest::clear_groupheadurl() {
  _impl_.groupheadurl_.ClearToEmpty();
}
inline const std::string& GroupCreateRequest::groupheadurl() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupCreateRequest.groupHeadUrl)
  return _internal_groupheadurl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupCreateRequest::set_groupheadurl(ArgT0&& arg0, ArgT... args) {
 
 _impl_.groupheadurl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupCreateRequest.groupHeadUrl)
}
inline std::string* GroupCreateRequest::mutable_groupheadurl() {
  std::string* _s = _internal_mutable_groupheadurl();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupCreateRequest.groupHeadUrl)
  return _s;
}
inline const std::string& GroupCreateRequest::_internal_groupheadurl() const {
  return _impl_.groupheadurl_.Get();
}
inline void GroupCreateRequest::_internal_set_groupheadurl(const std::string& value) {
  
  _impl_.groupheadurl_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupCreateRequest::_internal_mutable_groupheadurl() {
  
  return _impl_.groupheadurl_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupCreateRequest::release_groupheadurl() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupCreateRequest.groupHeadUrl)
  return _impl_.groupheadurl_.Release();
}
inline void GroupCreateRequest::set_allocated_groupheadurl(std::string* groupheadurl) {
  if (groupheadurl != nullptr) {
    
  } else {
    
  }
  _impl_.groupheadurl_.SetAllocated(groupheadurl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.groupheadurl_.IsDefault()) {
    _impl_.groupheadurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupCreateRequest.groupHeadUrl)
}

// .AcFunDanmu.Im.Cloud.Message.Location location = 4;
inline bool GroupCreateRequest::_internal_has_location() const {
  return this != internal_default_instance() && _impl_.location_ != nullptr;
}
inline bool GroupCreateRequest::has_location() const {
  return _internal_has_location();
}
inline const ::AcFunDanmu::Im::Cloud::Message::Location& GroupCreateRequest::_internal_location() const {
  const ::AcFunDanmu::Im::Cloud::Message::Location* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Cloud::Message::Location&>(
      ::AcFunDanmu::Im::Cloud::Message::_Location_default_instance_);
}
inline const ::AcFunDanmu::Im::Cloud::Message::Location& GroupCreateRequest::location() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupCreateRequest.location)
  return _internal_location();
}
inline void GroupCreateRequest::unsafe_arena_set_allocated_location(
    ::AcFunDanmu::Im::Cloud::Message::Location* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupCreateRequest.location)
}
inline ::AcFunDanmu::Im::Cloud::Message::Location* GroupCreateRequest::release_location() {
  
  ::AcFunDanmu::Im::Cloud::Message::Location* temp = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AcFunDanmu::Im::Cloud::Message::Location* GroupCreateRequest::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupCreateRequest.location)
  
  ::AcFunDanmu::Im::Cloud::Message::Location* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Cloud::Message::Location* GroupCreateRequest::_internal_mutable_location() {
  
  if (_impl_.location_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Cloud::Message::Location>(GetArenaForAllocation());
    _impl_.location_ = p;
  }
  return _impl_.location_;
}
inline ::AcFunDanmu::Im::Cloud::Message::Location* GroupCreateRequest::mutable_location() {
  ::AcFunDanmu::Im::Cloud::Message::Location* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupCreateRequest.location)
  return _msg;
}
inline void GroupCreateRequest::set_allocated_location(::AcFunDanmu::Im::Cloud::Message::Location* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location));
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.location_ = location;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupCreateRequest.location)
}

// string tag = 5;
inline void GroupCreateRequest::clear_tag() {
  _impl_.tag_.ClearToEmpty();
}
inline const std::string& GroupCreateRequest::tag() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupCreateRequest.tag)
  return _internal_tag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupCreateRequest::set_tag(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupCreateRequest.tag)
}
inline std::string* GroupCreateRequest::mutable_tag() {
  std::string* _s = _internal_mutable_tag();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupCreateRequest.tag)
  return _s;
}
inline const std::string& GroupCreateRequest::_internal_tag() const {
  return _impl_.tag_.Get();
}
inline void GroupCreateRequest::_internal_set_tag(const std::string& value) {
  
  _impl_.tag_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupCreateRequest::_internal_mutable_tag() {
  
  return _impl_.tag_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupCreateRequest::release_tag() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupCreateRequest.tag)
  return _impl_.tag_.Release();
}
inline void GroupCreateRequest::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    
  } else {
    
  }
  _impl_.tag_.SetAllocated(tag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tag_.IsDefault()) {
    _impl_.tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupCreateRequest.tag)
}

// .AcFunDanmu.Im.Cloud.Message.GroupType groupType = 6;
inline void GroupCreateRequest::clear_grouptype() {
  _impl_.grouptype_ = 0;
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupType GroupCreateRequest::_internal_grouptype() const {
  return static_cast< ::AcFunDanmu::Im::Cloud::Message::GroupType >(_impl_.grouptype_);
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupType GroupCreateRequest::grouptype() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupCreateRequest.groupType)
  return _internal_grouptype();
}
inline void GroupCreateRequest::_internal_set_grouptype(::AcFunDanmu::Im::Cloud::Message::GroupType value) {
  
  _impl_.grouptype_ = value;
}
inline void GroupCreateRequest::set_grouptype(::AcFunDanmu::Im::Cloud::Message::GroupType value) {
  _internal_set_grouptype(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupCreateRequest.groupType)
}

// string introduction = 7;
inline void GroupCreateRequest::clear_introduction() {
  _impl_.introduction_.ClearToEmpty();
}
inline const std::string& GroupCreateRequest::introduction() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupCreateRequest.introduction)
  return _internal_introduction();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupCreateRequest::set_introduction(ArgT0&& arg0, ArgT... args) {
 
 _impl_.introduction_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupCreateRequest.introduction)
}
inline std::string* GroupCreateRequest::mutable_introduction() {
  std::string* _s = _internal_mutable_introduction();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupCreateRequest.introduction)
  return _s;
}
inline const std::string& GroupCreateRequest::_internal_introduction() const {
  return _impl_.introduction_.Get();
}
inline void GroupCreateRequest::_internal_set_introduction(const std::string& value) {
  
  _impl_.introduction_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupCreateRequest::_internal_mutable_introduction() {
  
  return _impl_.introduction_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupCreateRequest::release_introduction() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupCreateRequest.introduction)
  return _impl_.introduction_.Release();
}
inline void GroupCreateRequest::set_allocated_introduction(std::string* introduction) {
  if (introduction != nullptr) {
    
  } else {
    
  }
  _impl_.introduction_.SetAllocated(introduction, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.introduction_.IsDefault()) {
    _impl_.introduction_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupCreateRequest.introduction)
}

// string originalTarget = 8;
inline void GroupCreateRequest::clear_originaltarget() {
  _impl_.originaltarget_.ClearToEmpty();
}
inline const std::string& GroupCreateRequest::originaltarget() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupCreateRequest.originalTarget)
  return _internal_originaltarget();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupCreateRequest::set_originaltarget(ArgT0&& arg0, ArgT... args) {
 
 _impl_.originaltarget_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupCreateRequest.originalTarget)
}
inline std::string* GroupCreateRequest::mutable_originaltarget() {
  std::string* _s = _internal_mutable_originaltarget();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupCreateRequest.originalTarget)
  return _s;
}
inline const std::string& GroupCreateRequest::_internal_originaltarget() const {
  return _impl_.originaltarget_.Get();
}
inline void GroupCreateRequest::_internal_set_originaltarget(const std::string& value) {
  
  _impl_.originaltarget_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupCreateRequest::_internal_mutable_originaltarget() {
  
  return _impl_.originaltarget_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupCreateRequest::release_originaltarget() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupCreateRequest.originalTarget)
  return _impl_.originaltarget_.Release();
}
inline void GroupCreateRequest::set_allocated_originaltarget(std::string* originaltarget) {
  if (originaltarget != nullptr) {
    
  } else {
    
  }
  _impl_.originaltarget_.SetAllocated(originaltarget, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.originaltarget_.IsDefault()) {
    _impl_.originaltarget_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupCreateRequest.originalTarget)
}

// repeated .AcFunDanmu.Im.Cloud.Message.GroupLabel label = 9;
inline int GroupCreateRequest::_internal_label_size() const {
  return _impl_.label_.size();
}
inline int GroupCreateRequest::label_size() const {
  return _internal_label_size();
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupLabel* GroupCreateRequest::mutable_label(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupCreateRequest.label)
  return _impl_.label_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud::Message::GroupLabel >*
GroupCreateRequest::mutable_label() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Cloud.Message.GroupCreateRequest.label)
  return &_impl_.label_;
}
inline const ::AcFunDanmu::Im::Cloud::Message::GroupLabel& GroupCreateRequest::_internal_label(int index) const {
  return _impl_.label_.Get(index);
}
inline const ::AcFunDanmu::Im::Cloud::Message::GroupLabel& GroupCreateRequest::label(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupCreateRequest.label)
  return _internal_label(index);
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupLabel* GroupCreateRequest::_internal_add_label() {
  return _impl_.label_.Add();
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupLabel* GroupCreateRequest::add_label() {
  ::AcFunDanmu::Im::Cloud::Message::GroupLabel* _add = _internal_add_label();
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Cloud.Message.GroupCreateRequest.label)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud::Message::GroupLabel >&
GroupCreateRequest::label() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Cloud.Message.GroupCreateRequest.label)
  return _impl_.label_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Message
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_GroupCreateRequest_2eproto
