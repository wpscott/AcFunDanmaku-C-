// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VoiceCallUserStatus.proto

#include "VoiceCallUserStatus.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Voice {
namespace Call {
PROTOBUF_CONSTEXPR VoiceCallUserStatus::VoiceCallUserStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_)*/nullptr
  , /*decltype(_impl_.callparam_)*/nullptr
  , /*decltype(_impl_.accepttimems_)*/int64_t{0}
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VoiceCallUserStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VoiceCallUserStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VoiceCallUserStatusDefaultTypeInternal() {}
  union {
    VoiceCallUserStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VoiceCallUserStatusDefaultTypeInternal _VoiceCallUserStatus_default_instance_;
}  // namespace Call
}  // namespace Voice
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu
static ::_pb::Metadata file_level_metadata_VoiceCallUserStatus_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_VoiceCallUserStatus_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_VoiceCallUserStatus_2eproto = nullptr;

const uint32_t TableStruct_VoiceCallUserStatus_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallUserStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallUserStatus, _impl_.user_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallUserStatus, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallUserStatus, _impl_.accepttimems_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallUserStatus, _impl_.callparam_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallUserStatus)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::AcFunDanmu::Im::Cloud::Voice::Call::_VoiceCallUserStatus_default_instance_._instance,
};

const char descriptor_table_protodef_VoiceCallUserStatus_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031VoiceCallUserStatus.proto\022\036AcFunDanmu."
  "Im.Cloud.Voice.Call\032\017CallParam.proto\032\nUs"
  "er.proto\"\367\002\n\023VoiceCallUserStatus\022\'\n\004user"
  "\030\001 \001(\0132\031.AcFunDanmu.Im.Basic.User\022R\n\006sta"
  "tus\030\002 \001(\0162B.AcFunDanmu.Im.Cloud.Voice.Ca"
  "ll.VoiceCallUserStatus.UserCallStatus\022\024\n"
  "\014acceptTimeMs\030\003 \001(\003\022<\n\tcallParam\030\004 \001(\0132)"
  ".AcFunDanmu.Im.Cloud.Voice.Call.CallPara"
  "m\"\216\001\n\016UserCallStatus\022\016\n\nUS_UNKNOWN\020\000\022\014\n\010"
  "ACCEPTED\020\001\022\014\n\010REJECTED\020\002\022\016\n\nREQUESTING\020\003"
  "\022\021\n\rNORMAL_CLOSED\020\004\022\022\n\016TIMEOUT_CLOSED\020\005\022"
  "\013\n\007BUSYING\020\006\022\014\n\010FINISHED\020\007b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_VoiceCallUserStatus_2eproto_deps[2] = {
  &::descriptor_table_CallParam_2eproto,
  &::descriptor_table_User_2eproto,
};
static ::_pbi::once_flag descriptor_table_VoiceCallUserStatus_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_VoiceCallUserStatus_2eproto = {
    false, false, 474, descriptor_table_protodef_VoiceCallUserStatus_2eproto,
    "VoiceCallUserStatus.proto",
    &descriptor_table_VoiceCallUserStatus_2eproto_once, descriptor_table_VoiceCallUserStatus_2eproto_deps, 2, 1,
    schemas, file_default_instances, TableStruct_VoiceCallUserStatus_2eproto::offsets,
    file_level_metadata_VoiceCallUserStatus_2eproto, file_level_enum_descriptors_VoiceCallUserStatus_2eproto,
    file_level_service_descriptors_VoiceCallUserStatus_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_VoiceCallUserStatus_2eproto_getter() {
  return &descriptor_table_VoiceCallUserStatus_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_VoiceCallUserStatus_2eproto(&descriptor_table_VoiceCallUserStatus_2eproto);
namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Voice {
namespace Call {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VoiceCallUserStatus_UserCallStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_VoiceCallUserStatus_2eproto);
  return file_level_enum_descriptors_VoiceCallUserStatus_2eproto[0];
}
bool VoiceCallUserStatus_UserCallStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr VoiceCallUserStatus_UserCallStatus VoiceCallUserStatus::US_UNKNOWN;
constexpr VoiceCallUserStatus_UserCallStatus VoiceCallUserStatus::ACCEPTED;
constexpr VoiceCallUserStatus_UserCallStatus VoiceCallUserStatus::REJECTED;
constexpr VoiceCallUserStatus_UserCallStatus VoiceCallUserStatus::REQUESTING;
constexpr VoiceCallUserStatus_UserCallStatus VoiceCallUserStatus::NORMAL_CLOSED;
constexpr VoiceCallUserStatus_UserCallStatus VoiceCallUserStatus::TIMEOUT_CLOSED;
constexpr VoiceCallUserStatus_UserCallStatus VoiceCallUserStatus::BUSYING;
constexpr VoiceCallUserStatus_UserCallStatus VoiceCallUserStatus::FINISHED;
constexpr VoiceCallUserStatus_UserCallStatus VoiceCallUserStatus::UserCallStatus_MIN;
constexpr VoiceCallUserStatus_UserCallStatus VoiceCallUserStatus::UserCallStatus_MAX;
constexpr int VoiceCallUserStatus::UserCallStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class VoiceCallUserStatus::_Internal {
 public:
  static const ::AcFunDanmu::Im::Basic::User& user(const VoiceCallUserStatus* msg);
  static const ::AcFunDanmu::Im::Cloud::Voice::Call::CallParam& callparam(const VoiceCallUserStatus* msg);
};

const ::AcFunDanmu::Im::Basic::User&
VoiceCallUserStatus::_Internal::user(const VoiceCallUserStatus* msg) {
  return *msg->_impl_.user_;
}
const ::AcFunDanmu::Im::Cloud::Voice::Call::CallParam&
VoiceCallUserStatus::_Internal::callparam(const VoiceCallUserStatus* msg) {
  return *msg->_impl_.callparam_;
}
void VoiceCallUserStatus::clear_user() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_ != nullptr) {
    delete _impl_.user_;
  }
  _impl_.user_ = nullptr;
}
void VoiceCallUserStatus::clear_callparam() {
  if (GetArenaForAllocation() == nullptr && _impl_.callparam_ != nullptr) {
    delete _impl_.callparam_;
  }
  _impl_.callparam_ = nullptr;
}
VoiceCallUserStatus::VoiceCallUserStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallUserStatus)
}
VoiceCallUserStatus::VoiceCallUserStatus(const VoiceCallUserStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VoiceCallUserStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_){nullptr}
    , decltype(_impl_.callparam_){nullptr}
    , decltype(_impl_.accepttimems_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user()) {
    _this->_impl_.user_ = new ::AcFunDanmu::Im::Basic::User(*from._impl_.user_);
  }
  if (from._internal_has_callparam()) {
    _this->_impl_.callparam_ = new ::AcFunDanmu::Im::Cloud::Voice::Call::CallParam(*from._impl_.callparam_);
  }
  ::memcpy(&_impl_.accepttimems_, &from._impl_.accepttimems_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.accepttimems_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallUserStatus)
}

inline void VoiceCallUserStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_){nullptr}
    , decltype(_impl_.callparam_){nullptr}
    , decltype(_impl_.accepttimems_){int64_t{0}}
    , decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VoiceCallUserStatus::~VoiceCallUserStatus() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallUserStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VoiceCallUserStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_;
  if (this != internal_default_instance()) delete _impl_.callparam_;
}

void VoiceCallUserStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VoiceCallUserStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallUserStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.user_ != nullptr) {
    delete _impl_.user_;
  }
  _impl_.user_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.callparam_ != nullptr) {
    delete _impl_.callparam_;
  }
  _impl_.callparam_ = nullptr;
  ::memset(&_impl_.accepttimems_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.accepttimems_)) + sizeof(_impl_.status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VoiceCallUserStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .AcFunDanmu.Im.Basic.User user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallUserStatus.UserCallStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallUserStatus_UserCallStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 acceptTimeMs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.accepttimems_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Cloud.Voice.Call.CallParam callParam = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_callparam(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VoiceCallUserStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallUserStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .AcFunDanmu.Im.Basic.User user = 1;
  if (this->_internal_has_user()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user(this),
        _Internal::user(this).GetCachedSize(), target, stream);
  }

  // .AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallUserStatus.UserCallStatus status = 2;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  // int64 acceptTimeMs = 3;
  if (this->_internal_accepttimems() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_accepttimems(), target);
  }

  // .AcFunDanmu.Im.Cloud.Voice.Call.CallParam callParam = 4;
  if (this->_internal_has_callparam()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::callparam(this),
        _Internal::callparam(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallUserStatus)
  return target;
}

size_t VoiceCallUserStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallUserStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .AcFunDanmu.Im.Basic.User user = 1;
  if (this->_internal_has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_);
  }

  // .AcFunDanmu.Im.Cloud.Voice.Call.CallParam callParam = 4;
  if (this->_internal_has_callparam()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.callparam_);
  }

  // int64 acceptTimeMs = 3;
  if (this->_internal_accepttimems() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_accepttimems());
  }

  // .AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallUserStatus.UserCallStatus status = 2;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VoiceCallUserStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VoiceCallUserStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VoiceCallUserStatus::GetClassData() const { return &_class_data_; }


void VoiceCallUserStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VoiceCallUserStatus*>(&to_msg);
  auto& from = static_cast<const VoiceCallUserStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallUserStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user()) {
    _this->_internal_mutable_user()->::AcFunDanmu::Im::Basic::User::MergeFrom(
        from._internal_user());
  }
  if (from._internal_has_callparam()) {
    _this->_internal_mutable_callparam()->::AcFunDanmu::Im::Cloud::Voice::Call::CallParam::MergeFrom(
        from._internal_callparam());
  }
  if (from._internal_accepttimems() != 0) {
    _this->_internal_set_accepttimems(from._internal_accepttimems());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VoiceCallUserStatus::CopyFrom(const VoiceCallUserStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallUserStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoiceCallUserStatus::IsInitialized() const {
  return true;
}

void VoiceCallUserStatus::InternalSwap(VoiceCallUserStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VoiceCallUserStatus, _impl_.status_)
      + sizeof(VoiceCallUserStatus::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(VoiceCallUserStatus, _impl_.user_)>(
          reinterpret_cast<char*>(&_impl_.user_),
          reinterpret_cast<char*>(&other->_impl_.user_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VoiceCallUserStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_VoiceCallUserStatus_2eproto_getter, &descriptor_table_VoiceCallUserStatus_2eproto_once,
      file_level_metadata_VoiceCallUserStatus_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Call
}  // namespace Voice
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallUserStatus*
Arena::CreateMaybeMessage< ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallUserStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallUserStatus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
