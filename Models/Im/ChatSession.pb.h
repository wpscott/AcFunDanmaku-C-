// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChatSession.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ChatSession_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ChatSession_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ChatTargetType.pb.h"
#include "Message.pb.h"
#include "MessageReceiveStatus.pb.h"
#include "RemindBody.pb.h"
#include "SessionStatus.pb.h"
#include "User.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ChatSession_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ChatSession_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ChatSession_2eproto;
namespace AcFunDanmu {
namespace Im {
namespace Message {
class ChatSession;
struct ChatSessionDefaultTypeInternal;
extern ChatSessionDefaultTypeInternal _ChatSession_default_instance_;
}  // namespace Message
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::Im::Message::ChatSession* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Message::ChatSession>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {
namespace Im {
namespace Message {

// ===================================================================

class ChatSession final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Message.ChatSession) */ {
 public:
  inline ChatSession() : ChatSession(nullptr) {}
  ~ChatSession() override;
  explicit PROTOBUF_CONSTEXPR ChatSession(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatSession(const ChatSession& from);
  ChatSession(ChatSession&& from) noexcept
    : ChatSession() {
    *this = ::std::move(from);
  }

  inline ChatSession& operator=(const ChatSession& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatSession& operator=(ChatSession&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatSession& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatSession* internal_default_instance() {
    return reinterpret_cast<const ChatSession*>(
               &_ChatSession_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChatSession& a, ChatSession& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatSession* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatSession* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatSession* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatSession>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatSession& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChatSession& from) {
    ChatSession::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatSession* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Message.ChatSession";
  }
  protected:
  explicit ChatSession(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatestMessageFieldNumber = 5,
    kRemindBodyFieldNumber = 20,
    kCursorFieldNumber = 13,
    kStrTargetIdFieldNumber = 19,
    kExtraFieldNumber = 25,
    kTargetFieldNumber = 1,
    kMaxSeqIdFieldNumber = 2,
    kReadSeqIdFieldNumber = 3,
    kUnreadMsgCountFieldNumber = 4,
    kChatTargetTypeFieldNumber = 8,
    kTargetIdFieldNumber = 9,
    kActiveTimeFieldNumber = 10,
    kPriorityFieldNumber = 11,
    kCategoryIdFieldNumber = 12,
    kAccountTypeFieldNumber = 14,
    kJumpCategoryIdFieldNumber = 16,
    kExpireAtFieldNumber = 17,
    kEffectiveFromFieldNumber = 18,
    kTargetReadSeqIdFieldNumber = 21,
    kAggregateSessionFieldNumber = 15,
    kMuteFieldNumber = 22,
    kMarkedUnreadFieldNumber = 26,
    kStatusFieldNumber = 23,
    kMessageReceiveStatusFieldNumber = 24,
  };
  // repeated .AcFunDanmu.Im.Message.Message latestMessage = 5;
  int latestmessage_size() const;
  private:
  int _internal_latestmessage_size() const;
  public:
  void clear_latestmessage();
  ::AcFunDanmu::Im::Message::Message* mutable_latestmessage(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Message::Message >*
      mutable_latestmessage();
  private:
  const ::AcFunDanmu::Im::Message::Message& _internal_latestmessage(int index) const;
  ::AcFunDanmu::Im::Message::Message* _internal_add_latestmessage();
  public:
  const ::AcFunDanmu::Im::Message::Message& latestmessage(int index) const;
  ::AcFunDanmu::Im::Message::Message* add_latestmessage();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Message::Message >&
      latestmessage() const;

  // repeated .AcFunDanmu.Im.Message.RemindBody remindBody = 20;
  int remindbody_size() const;
  private:
  int _internal_remindbody_size() const;
  public:
  void clear_remindbody();
  ::AcFunDanmu::Im::Message::RemindBody* mutable_remindbody(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Message::RemindBody >*
      mutable_remindbody();
  private:
  const ::AcFunDanmu::Im::Message::RemindBody& _internal_remindbody(int index) const;
  ::AcFunDanmu::Im::Message::RemindBody* _internal_add_remindbody();
  public:
  const ::AcFunDanmu::Im::Message::RemindBody& remindbody(int index) const;
  ::AcFunDanmu::Im::Message::RemindBody* add_remindbody();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Message::RemindBody >&
      remindbody() const;

  // string cursor = 13;
  void clear_cursor();
  const std::string& cursor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cursor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cursor();
  PROTOBUF_NODISCARD std::string* release_cursor();
  void set_allocated_cursor(std::string* cursor);
  private:
  const std::string& _internal_cursor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cursor(const std::string& value);
  std::string* _internal_mutable_cursor();
  public:

  // string strTargetId = 19;
  void clear_strtargetid();
  const std::string& strtargetid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strtargetid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strtargetid();
  PROTOBUF_NODISCARD std::string* release_strtargetid();
  void set_allocated_strtargetid(std::string* strtargetid);
  private:
  const std::string& _internal_strtargetid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strtargetid(const std::string& value);
  std::string* _internal_mutable_strtargetid();
  public:

  // bytes extra = 25;
  void clear_extra();
  const std::string& extra() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_extra(ArgT0&& arg0, ArgT... args);
  std::string* mutable_extra();
  PROTOBUF_NODISCARD std::string* release_extra();
  void set_allocated_extra(std::string* extra);
  private:
  const std::string& _internal_extra() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_extra(const std::string& value);
  std::string* _internal_mutable_extra();
  public:

  // .AcFunDanmu.Im.Basic.User target = 1;
  bool has_target() const;
  private:
  bool _internal_has_target() const;
  public:
  void clear_target();
  const ::AcFunDanmu::Im::Basic::User& target() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Basic::User* release_target();
  ::AcFunDanmu::Im::Basic::User* mutable_target();
  void set_allocated_target(::AcFunDanmu::Im::Basic::User* target);
  private:
  const ::AcFunDanmu::Im::Basic::User& _internal_target() const;
  ::AcFunDanmu::Im::Basic::User* _internal_mutable_target();
  public:
  void unsafe_arena_set_allocated_target(
      ::AcFunDanmu::Im::Basic::User* target);
  ::AcFunDanmu::Im::Basic::User* unsafe_arena_release_target();

  // int64 maxSeqId = 2;
  void clear_maxseqid();
  int64_t maxseqid() const;
  void set_maxseqid(int64_t value);
  private:
  int64_t _internal_maxseqid() const;
  void _internal_set_maxseqid(int64_t value);
  public:

  // int64 readSeqId = 3;
  void clear_readseqid();
  int64_t readseqid() const;
  void set_readseqid(int64_t value);
  private:
  int64_t _internal_readseqid() const;
  void _internal_set_readseqid(int64_t value);
  public:

  // int32 unreadMsgCount = 4;
  void clear_unreadmsgcount();
  int32_t unreadmsgcount() const;
  void set_unreadmsgcount(int32_t value);
  private:
  int32_t _internal_unreadmsgcount() const;
  void _internal_set_unreadmsgcount(int32_t value);
  public:

  // .AcFunDanmu.Im.Message.ChatTargetType chatTargetType = 8;
  void clear_chattargettype();
  ::AcFunDanmu::Im::Message::ChatTargetType chattargettype() const;
  void set_chattargettype(::AcFunDanmu::Im::Message::ChatTargetType value);
  private:
  ::AcFunDanmu::Im::Message::ChatTargetType _internal_chattargettype() const;
  void _internal_set_chattargettype(::AcFunDanmu::Im::Message::ChatTargetType value);
  public:

  // int64 targetId = 9;
  void clear_targetid();
  int64_t targetid() const;
  void set_targetid(int64_t value);
  private:
  int64_t _internal_targetid() const;
  void _internal_set_targetid(int64_t value);
  public:

  // int64 activeTime = 10;
  void clear_activetime();
  int64_t activetime() const;
  void set_activetime(int64_t value);
  private:
  int64_t _internal_activetime() const;
  void _internal_set_activetime(int64_t value);
  public:

  // int32 priority = 11;
  void clear_priority();
  int32_t priority() const;
  void set_priority(int32_t value);
  private:
  int32_t _internal_priority() const;
  void _internal_set_priority(int32_t value);
  public:

  // int32 categoryId = 12;
  void clear_categoryid();
  int32_t categoryid() const;
  void set_categoryid(int32_t value);
  private:
  int32_t _internal_categoryid() const;
  void _internal_set_categoryid(int32_t value);
  public:

  // int32 accountType = 14;
  void clear_accounttype();
  int32_t accounttype() const;
  void set_accounttype(int32_t value);
  private:
  int32_t _internal_accounttype() const;
  void _internal_set_accounttype(int32_t value);
  public:

  // int32 jumpCategoryId = 16;
  void clear_jumpcategoryid();
  int32_t jumpcategoryid() const;
  void set_jumpcategoryid(int32_t value);
  private:
  int32_t _internal_jumpcategoryid() const;
  void _internal_set_jumpcategoryid(int32_t value);
  public:

  // int64 expireAt = 17;
  void clear_expireat();
  int64_t expireat() const;
  void set_expireat(int64_t value);
  private:
  int64_t _internal_expireat() const;
  void _internal_set_expireat(int64_t value);
  public:

  // int64 effectiveFrom = 18;
  void clear_effectivefrom();
  int64_t effectivefrom() const;
  void set_effectivefrom(int64_t value);
  private:
  int64_t _internal_effectivefrom() const;
  void _internal_set_effectivefrom(int64_t value);
  public:

  // int64 targetReadSeqId = 21;
  void clear_targetreadseqid();
  int64_t targetreadseqid() const;
  void set_targetreadseqid(int64_t value);
  private:
  int64_t _internal_targetreadseqid() const;
  void _internal_set_targetreadseqid(int64_t value);
  public:

  // bool aggregateSession = 15;
  void clear_aggregatesession();
  bool aggregatesession() const;
  void set_aggregatesession(bool value);
  private:
  bool _internal_aggregatesession() const;
  void _internal_set_aggregatesession(bool value);
  public:

  // bool mute = 22;
  void clear_mute();
  bool mute() const;
  void set_mute(bool value);
  private:
  bool _internal_mute() const;
  void _internal_set_mute(bool value);
  public:

  // bool markedUnread = 26;
  void clear_markedunread();
  bool markedunread() const;
  void set_markedunread(bool value);
  private:
  bool _internal_markedunread() const;
  void _internal_set_markedunread(bool value);
  public:

  // .AcFunDanmu.Im.Message.SessionStatus status = 23;
  void clear_status();
  ::AcFunDanmu::Im::Message::SessionStatus status() const;
  void set_status(::AcFunDanmu::Im::Message::SessionStatus value);
  private:
  ::AcFunDanmu::Im::Message::SessionStatus _internal_status() const;
  void _internal_set_status(::AcFunDanmu::Im::Message::SessionStatus value);
  public:

  // .AcFunDanmu.Im.Message.MessageReceiveStatus messageReceiveStatus = 24;
  void clear_messagereceivestatus();
  ::AcFunDanmu::Im::Message::MessageReceiveStatus messagereceivestatus() const;
  void set_messagereceivestatus(::AcFunDanmu::Im::Message::MessageReceiveStatus value);
  private:
  ::AcFunDanmu::Im::Message::MessageReceiveStatus _internal_messagereceivestatus() const;
  void _internal_set_messagereceivestatus(::AcFunDanmu::Im::Message::MessageReceiveStatus value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Message.ChatSession)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Message::Message > latestmessage_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Message::RemindBody > remindbody_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cursor_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strtargetid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extra_;
    ::AcFunDanmu::Im::Basic::User* target_;
    int64_t maxseqid_;
    int64_t readseqid_;
    int32_t unreadmsgcount_;
    int chattargettype_;
    int64_t targetid_;
    int64_t activetime_;
    int32_t priority_;
    int32_t categoryid_;
    int32_t accounttype_;
    int32_t jumpcategoryid_;
    int64_t expireat_;
    int64_t effectivefrom_;
    int64_t targetreadseqid_;
    bool aggregatesession_;
    bool mute_;
    bool markedunread_;
    int status_;
    int messagereceivestatus_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ChatSession_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChatSession

// .AcFunDanmu.Im.Basic.User target = 1;
inline bool ChatSession::_internal_has_target() const {
  return this != internal_default_instance() && _impl_.target_ != nullptr;
}
inline bool ChatSession::has_target() const {
  return _internal_has_target();
}
inline const ::AcFunDanmu::Im::Basic::User& ChatSession::_internal_target() const {
  const ::AcFunDanmu::Im::Basic::User* p = _impl_.target_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic::User&>(
      ::AcFunDanmu::Im::Basic::_User_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic::User& ChatSession::target() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.ChatSession.target)
  return _internal_target();
}
inline void ChatSession::unsafe_arena_set_allocated_target(
    ::AcFunDanmu::Im::Basic::User* target) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.target_);
  }
  _impl_.target_ = target;
  if (target) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Message.ChatSession.target)
}
inline ::AcFunDanmu::Im::Basic::User* ChatSession::release_target() {
  
  ::AcFunDanmu::Im::Basic::User* temp = _impl_.target_;
  _impl_.target_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AcFunDanmu::Im::Basic::User* ChatSession::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Message.ChatSession.target)
  
  ::AcFunDanmu::Im::Basic::User* temp = _impl_.target_;
  _impl_.target_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic::User* ChatSession::_internal_mutable_target() {
  
  if (_impl_.target_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic::User>(GetArenaForAllocation());
    _impl_.target_ = p;
  }
  return _impl_.target_;
}
inline ::AcFunDanmu::Im::Basic::User* ChatSession::mutable_target() {
  ::AcFunDanmu::Im::Basic::User* _msg = _internal_mutable_target();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Message.ChatSession.target)
  return _msg;
}
inline void ChatSession::set_allocated_target(::AcFunDanmu::Im::Basic::User* target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.target_);
  }
  if (target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target));
    if (message_arena != submessage_arena) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.target_ = target;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Message.ChatSession.target)
}

// int64 maxSeqId = 2;
inline void ChatSession::clear_maxseqid() {
  _impl_.maxseqid_ = int64_t{0};
}
inline int64_t ChatSession::_internal_maxseqid() const {
  return _impl_.maxseqid_;
}
inline int64_t ChatSession::maxseqid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.ChatSession.maxSeqId)
  return _internal_maxseqid();
}
inline void ChatSession::_internal_set_maxseqid(int64_t value) {
  
  _impl_.maxseqid_ = value;
}
inline void ChatSession::set_maxseqid(int64_t value) {
  _internal_set_maxseqid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Message.ChatSession.maxSeqId)
}

// int64 readSeqId = 3;
inline void ChatSession::clear_readseqid() {
  _impl_.readseqid_ = int64_t{0};
}
inline int64_t ChatSession::_internal_readseqid() const {
  return _impl_.readseqid_;
}
inline int64_t ChatSession::readseqid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.ChatSession.readSeqId)
  return _internal_readseqid();
}
inline void ChatSession::_internal_set_readseqid(int64_t value) {
  
  _impl_.readseqid_ = value;
}
inline void ChatSession::set_readseqid(int64_t value) {
  _internal_set_readseqid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Message.ChatSession.readSeqId)
}

// int32 unreadMsgCount = 4;
inline void ChatSession::clear_unreadmsgcount() {
  _impl_.unreadmsgcount_ = 0;
}
inline int32_t ChatSession::_internal_unreadmsgcount() const {
  return _impl_.unreadmsgcount_;
}
inline int32_t ChatSession::unreadmsgcount() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.ChatSession.unreadMsgCount)
  return _internal_unreadmsgcount();
}
inline void ChatSession::_internal_set_unreadmsgcount(int32_t value) {
  
  _impl_.unreadmsgcount_ = value;
}
inline void ChatSession::set_unreadmsgcount(int32_t value) {
  _internal_set_unreadmsgcount(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Message.ChatSession.unreadMsgCount)
}

// repeated .AcFunDanmu.Im.Message.Message latestMessage = 5;
inline int ChatSession::_internal_latestmessage_size() const {
  return _impl_.latestmessage_.size();
}
inline int ChatSession::latestmessage_size() const {
  return _internal_latestmessage_size();
}
inline ::AcFunDanmu::Im::Message::Message* ChatSession::mutable_latestmessage(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Message.ChatSession.latestMessage)
  return _impl_.latestmessage_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Message::Message >*
ChatSession::mutable_latestmessage() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Message.ChatSession.latestMessage)
  return &_impl_.latestmessage_;
}
inline const ::AcFunDanmu::Im::Message::Message& ChatSession::_internal_latestmessage(int index) const {
  return _impl_.latestmessage_.Get(index);
}
inline const ::AcFunDanmu::Im::Message::Message& ChatSession::latestmessage(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.ChatSession.latestMessage)
  return _internal_latestmessage(index);
}
inline ::AcFunDanmu::Im::Message::Message* ChatSession::_internal_add_latestmessage() {
  return _impl_.latestmessage_.Add();
}
inline ::AcFunDanmu::Im::Message::Message* ChatSession::add_latestmessage() {
  ::AcFunDanmu::Im::Message::Message* _add = _internal_add_latestmessage();
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Message.ChatSession.latestMessage)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Message::Message >&
ChatSession::latestmessage() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Message.ChatSession.latestMessage)
  return _impl_.latestmessage_;
}

// .AcFunDanmu.Im.Message.ChatTargetType chatTargetType = 8;
inline void ChatSession::clear_chattargettype() {
  _impl_.chattargettype_ = 0;
}
inline ::AcFunDanmu::Im::Message::ChatTargetType ChatSession::_internal_chattargettype() const {
  return static_cast< ::AcFunDanmu::Im::Message::ChatTargetType >(_impl_.chattargettype_);
}
inline ::AcFunDanmu::Im::Message::ChatTargetType ChatSession::chattargettype() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.ChatSession.chatTargetType)
  return _internal_chattargettype();
}
inline void ChatSession::_internal_set_chattargettype(::AcFunDanmu::Im::Message::ChatTargetType value) {
  
  _impl_.chattargettype_ = value;
}
inline void ChatSession::set_chattargettype(::AcFunDanmu::Im::Message::ChatTargetType value) {
  _internal_set_chattargettype(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Message.ChatSession.chatTargetType)
}

// int64 targetId = 9;
inline void ChatSession::clear_targetid() {
  _impl_.targetid_ = int64_t{0};
}
inline int64_t ChatSession::_internal_targetid() const {
  return _impl_.targetid_;
}
inline int64_t ChatSession::targetid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.ChatSession.targetId)
  return _internal_targetid();
}
inline void ChatSession::_internal_set_targetid(int64_t value) {
  
  _impl_.targetid_ = value;
}
inline void ChatSession::set_targetid(int64_t value) {
  _internal_set_targetid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Message.ChatSession.targetId)
}

// int64 activeTime = 10;
inline void ChatSession::clear_activetime() {
  _impl_.activetime_ = int64_t{0};
}
inline int64_t ChatSession::_internal_activetime() const {
  return _impl_.activetime_;
}
inline int64_t ChatSession::activetime() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.ChatSession.activeTime)
  return _internal_activetime();
}
inline void ChatSession::_internal_set_activetime(int64_t value) {
  
  _impl_.activetime_ = value;
}
inline void ChatSession::set_activetime(int64_t value) {
  _internal_set_activetime(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Message.ChatSession.activeTime)
}

// int32 priority = 11;
inline void ChatSession::clear_priority() {
  _impl_.priority_ = 0;
}
inline int32_t ChatSession::_internal_priority() const {
  return _impl_.priority_;
}
inline int32_t ChatSession::priority() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.ChatSession.priority)
  return _internal_priority();
}
inline void ChatSession::_internal_set_priority(int32_t value) {
  
  _impl_.priority_ = value;
}
inline void ChatSession::set_priority(int32_t value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Message.ChatSession.priority)
}

// int32 categoryId = 12;
inline void ChatSession::clear_categoryid() {
  _impl_.categoryid_ = 0;
}
inline int32_t ChatSession::_internal_categoryid() const {
  return _impl_.categoryid_;
}
inline int32_t ChatSession::categoryid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.ChatSession.categoryId)
  return _internal_categoryid();
}
inline void ChatSession::_internal_set_categoryid(int32_t value) {
  
  _impl_.categoryid_ = value;
}
inline void ChatSession::set_categoryid(int32_t value) {
  _internal_set_categoryid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Message.ChatSession.categoryId)
}

// string cursor = 13;
inline void ChatSession::clear_cursor() {
  _impl_.cursor_.ClearToEmpty();
}
inline const std::string& ChatSession::cursor() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.ChatSession.cursor)
  return _internal_cursor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatSession::set_cursor(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cursor_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Message.ChatSession.cursor)
}
inline std::string* ChatSession::mutable_cursor() {
  std::string* _s = _internal_mutable_cursor();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Message.ChatSession.cursor)
  return _s;
}
inline const std::string& ChatSession::_internal_cursor() const {
  return _impl_.cursor_.Get();
}
inline void ChatSession::_internal_set_cursor(const std::string& value) {
  
  _impl_.cursor_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatSession::_internal_mutable_cursor() {
  
  return _impl_.cursor_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatSession::release_cursor() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Message.ChatSession.cursor)
  return _impl_.cursor_.Release();
}
inline void ChatSession::set_allocated_cursor(std::string* cursor) {
  if (cursor != nullptr) {
    
  } else {
    
  }
  _impl_.cursor_.SetAllocated(cursor, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cursor_.IsDefault()) {
    _impl_.cursor_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Message.ChatSession.cursor)
}

// int32 accountType = 14;
inline void ChatSession::clear_accounttype() {
  _impl_.accounttype_ = 0;
}
inline int32_t ChatSession::_internal_accounttype() const {
  return _impl_.accounttype_;
}
inline int32_t ChatSession::accounttype() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.ChatSession.accountType)
  return _internal_accounttype();
}
inline void ChatSession::_internal_set_accounttype(int32_t value) {
  
  _impl_.accounttype_ = value;
}
inline void ChatSession::set_accounttype(int32_t value) {
  _internal_set_accounttype(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Message.ChatSession.accountType)
}

// bool aggregateSession = 15;
inline void ChatSession::clear_aggregatesession() {
  _impl_.aggregatesession_ = false;
}
inline bool ChatSession::_internal_aggregatesession() const {
  return _impl_.aggregatesession_;
}
inline bool ChatSession::aggregatesession() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.ChatSession.aggregateSession)
  return _internal_aggregatesession();
}
inline void ChatSession::_internal_set_aggregatesession(bool value) {
  
  _impl_.aggregatesession_ = value;
}
inline void ChatSession::set_aggregatesession(bool value) {
  _internal_set_aggregatesession(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Message.ChatSession.aggregateSession)
}

// int32 jumpCategoryId = 16;
inline void ChatSession::clear_jumpcategoryid() {
  _impl_.jumpcategoryid_ = 0;
}
inline int32_t ChatSession::_internal_jumpcategoryid() const {
  return _impl_.jumpcategoryid_;
}
inline int32_t ChatSession::jumpcategoryid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.ChatSession.jumpCategoryId)
  return _internal_jumpcategoryid();
}
inline void ChatSession::_internal_set_jumpcategoryid(int32_t value) {
  
  _impl_.jumpcategoryid_ = value;
}
inline void ChatSession::set_jumpcategoryid(int32_t value) {
  _internal_set_jumpcategoryid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Message.ChatSession.jumpCategoryId)
}

// int64 expireAt = 17;
inline void ChatSession::clear_expireat() {
  _impl_.expireat_ = int64_t{0};
}
inline int64_t ChatSession::_internal_expireat() const {
  return _impl_.expireat_;
}
inline int64_t ChatSession::expireat() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.ChatSession.expireAt)
  return _internal_expireat();
}
inline void ChatSession::_internal_set_expireat(int64_t value) {
  
  _impl_.expireat_ = value;
}
inline void ChatSession::set_expireat(int64_t value) {
  _internal_set_expireat(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Message.ChatSession.expireAt)
}

// int64 effectiveFrom = 18;
inline void ChatSession::clear_effectivefrom() {
  _impl_.effectivefrom_ = int64_t{0};
}
inline int64_t ChatSession::_internal_effectivefrom() const {
  return _impl_.effectivefrom_;
}
inline int64_t ChatSession::effectivefrom() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.ChatSession.effectiveFrom)
  return _internal_effectivefrom();
}
inline void ChatSession::_internal_set_effectivefrom(int64_t value) {
  
  _impl_.effectivefrom_ = value;
}
inline void ChatSession::set_effectivefrom(int64_t value) {
  _internal_set_effectivefrom(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Message.ChatSession.effectiveFrom)
}

// string strTargetId = 19;
inline void ChatSession::clear_strtargetid() {
  _impl_.strtargetid_.ClearToEmpty();
}
inline const std::string& ChatSession::strtargetid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.ChatSession.strTargetId)
  return _internal_strtargetid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatSession::set_strtargetid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.strtargetid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Message.ChatSession.strTargetId)
}
inline std::string* ChatSession::mutable_strtargetid() {
  std::string* _s = _internal_mutable_strtargetid();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Message.ChatSession.strTargetId)
  return _s;
}
inline const std::string& ChatSession::_internal_strtargetid() const {
  return _impl_.strtargetid_.Get();
}
inline void ChatSession::_internal_set_strtargetid(const std::string& value) {
  
  _impl_.strtargetid_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatSession::_internal_mutable_strtargetid() {
  
  return _impl_.strtargetid_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatSession::release_strtargetid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Message.ChatSession.strTargetId)
  return _impl_.strtargetid_.Release();
}
inline void ChatSession::set_allocated_strtargetid(std::string* strtargetid) {
  if (strtargetid != nullptr) {
    
  } else {
    
  }
  _impl_.strtargetid_.SetAllocated(strtargetid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.strtargetid_.IsDefault()) {
    _impl_.strtargetid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Message.ChatSession.strTargetId)
}

// repeated .AcFunDanmu.Im.Message.RemindBody remindBody = 20;
inline int ChatSession::_internal_remindbody_size() const {
  return _impl_.remindbody_.size();
}
inline int ChatSession::remindbody_size() const {
  return _internal_remindbody_size();
}
inline ::AcFunDanmu::Im::Message::RemindBody* ChatSession::mutable_remindbody(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Message.ChatSession.remindBody)
  return _impl_.remindbody_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Message::RemindBody >*
ChatSession::mutable_remindbody() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Message.ChatSession.remindBody)
  return &_impl_.remindbody_;
}
inline const ::AcFunDanmu::Im::Message::RemindBody& ChatSession::_internal_remindbody(int index) const {
  return _impl_.remindbody_.Get(index);
}
inline const ::AcFunDanmu::Im::Message::RemindBody& ChatSession::remindbody(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.ChatSession.remindBody)
  return _internal_remindbody(index);
}
inline ::AcFunDanmu::Im::Message::RemindBody* ChatSession::_internal_add_remindbody() {
  return _impl_.remindbody_.Add();
}
inline ::AcFunDanmu::Im::Message::RemindBody* ChatSession::add_remindbody() {
  ::AcFunDanmu::Im::Message::RemindBody* _add = _internal_add_remindbody();
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Message.ChatSession.remindBody)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Message::RemindBody >&
ChatSession::remindbody() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Message.ChatSession.remindBody)
  return _impl_.remindbody_;
}

// int64 targetReadSeqId = 21;
inline void ChatSession::clear_targetreadseqid() {
  _impl_.targetreadseqid_ = int64_t{0};
}
inline int64_t ChatSession::_internal_targetreadseqid() const {
  return _impl_.targetreadseqid_;
}
inline int64_t ChatSession::targetreadseqid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.ChatSession.targetReadSeqId)
  return _internal_targetreadseqid();
}
inline void ChatSession::_internal_set_targetreadseqid(int64_t value) {
  
  _impl_.targetreadseqid_ = value;
}
inline void ChatSession::set_targetreadseqid(int64_t value) {
  _internal_set_targetreadseqid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Message.ChatSession.targetReadSeqId)
}

// bool mute = 22;
inline void ChatSession::clear_mute() {
  _impl_.mute_ = false;
}
inline bool ChatSession::_internal_mute() const {
  return _impl_.mute_;
}
inline bool ChatSession::mute() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.ChatSession.mute)
  return _internal_mute();
}
inline void ChatSession::_internal_set_mute(bool value) {
  
  _impl_.mute_ = value;
}
inline void ChatSession::set_mute(bool value) {
  _internal_set_mute(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Message.ChatSession.mute)
}

// .AcFunDanmu.Im.Message.SessionStatus status = 23;
inline void ChatSession::clear_status() {
  _impl_.status_ = 0;
}
inline ::AcFunDanmu::Im::Message::SessionStatus ChatSession::_internal_status() const {
  return static_cast< ::AcFunDanmu::Im::Message::SessionStatus >(_impl_.status_);
}
inline ::AcFunDanmu::Im::Message::SessionStatus ChatSession::status() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.ChatSession.status)
  return _internal_status();
}
inline void ChatSession::_internal_set_status(::AcFunDanmu::Im::Message::SessionStatus value) {
  
  _impl_.status_ = value;
}
inline void ChatSession::set_status(::AcFunDanmu::Im::Message::SessionStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Message.ChatSession.status)
}

// .AcFunDanmu.Im.Message.MessageReceiveStatus messageReceiveStatus = 24;
inline void ChatSession::clear_messagereceivestatus() {
  _impl_.messagereceivestatus_ = 0;
}
inline ::AcFunDanmu::Im::Message::MessageReceiveStatus ChatSession::_internal_messagereceivestatus() const {
  return static_cast< ::AcFunDanmu::Im::Message::MessageReceiveStatus >(_impl_.messagereceivestatus_);
}
inline ::AcFunDanmu::Im::Message::MessageReceiveStatus ChatSession::messagereceivestatus() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.ChatSession.messageReceiveStatus)
  return _internal_messagereceivestatus();
}
inline void ChatSession::_internal_set_messagereceivestatus(::AcFunDanmu::Im::Message::MessageReceiveStatus value) {
  
  _impl_.messagereceivestatus_ = value;
}
inline void ChatSession::set_messagereceivestatus(::AcFunDanmu::Im::Message::MessageReceiveStatus value) {
  _internal_set_messagereceivestatus(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Message.ChatSession.messageReceiveStatus)
}

// bytes extra = 25;
inline void ChatSession::clear_extra() {
  _impl_.extra_.ClearToEmpty();
}
inline const std::string& ChatSession::extra() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.ChatSession.extra)
  return _internal_extra();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatSession::set_extra(ArgT0&& arg0, ArgT... args) {
 
 _impl_.extra_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Message.ChatSession.extra)
}
inline std::string* ChatSession::mutable_extra() {
  std::string* _s = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Message.ChatSession.extra)
  return _s;
}
inline const std::string& ChatSession::_internal_extra() const {
  return _impl_.extra_.Get();
}
inline void ChatSession::_internal_set_extra(const std::string& value) {
  
  _impl_.extra_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatSession::_internal_mutable_extra() {
  
  return _impl_.extra_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatSession::release_extra() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Message.ChatSession.extra)
  return _impl_.extra_.Release();
}
inline void ChatSession::set_allocated_extra(std::string* extra) {
  if (extra != nullptr) {
    
  } else {
    
  }
  _impl_.extra_.SetAllocated(extra, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.extra_.IsDefault()) {
    _impl_.extra_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Message.ChatSession.extra)
}

// bool markedUnread = 26;
inline void ChatSession::clear_markedunread() {
  _impl_.markedunread_ = false;
}
inline bool ChatSession::_internal_markedunread() const {
  return _impl_.markedunread_;
}
inline bool ChatSession::markedunread() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.ChatSession.markedUnread)
  return _internal_markedunread();
}
inline void ChatSession::_internal_set_markedunread(bool value) {
  
  _impl_.markedunread_ = value;
}
inline void ChatSession::set_markedunread(bool value) {
  _internal_set_markedunread(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Message.ChatSession.markedUnread)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Message
}  // namespace Im
}  // namespace AcFunDanmu

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ChatSession_2eproto
