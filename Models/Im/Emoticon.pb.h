// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Emoticon.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Emoticon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Emoticon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "PicUrl.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Emoticon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Emoticon_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Emoticon_2eproto;
namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Message {
class Emoticon;
struct EmoticonDefaultTypeInternal;
extern EmoticonDefaultTypeInternal _Emoticon_default_instance_;
class Emoticon_Code;
struct Emoticon_CodeDefaultTypeInternal;
extern Emoticon_CodeDefaultTypeInternal _Emoticon_Code_default_instance_;
}  // namespace Message
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::Im::Cloud::Message::Emoticon* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud::Message::Emoticon>(Arena*);
template<> ::AcFunDanmu::Im::Cloud::Message::Emoticon_Code* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud::Message::Emoticon_Code>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Message {

enum Emoticon_Type : int {
  Emoticon_Type_UNKNOWN = 0,
  Emoticon_Type_BASIC = 1,
  Emoticon_Type_IMAGE = 2,
  Emoticon_Type_GIF = 3,
  Emoticon_Type_SPECIAL_EFFECT = 4,
  Emoticon_Type_SCRIPT = 5,
  Emoticon_Type_Emoticon_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Emoticon_Type_Emoticon_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Emoticon_Type_IsValid(int value);
constexpr Emoticon_Type Emoticon_Type_Type_MIN = Emoticon_Type_UNKNOWN;
constexpr Emoticon_Type Emoticon_Type_Type_MAX = Emoticon_Type_SCRIPT;
constexpr int Emoticon_Type_Type_ARRAYSIZE = Emoticon_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Emoticon_Type_descriptor();
template<typename T>
inline const std::string& Emoticon_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Emoticon_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Emoticon_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Emoticon_Type_descriptor(), enum_t_value);
}
inline bool Emoticon_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Emoticon_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Emoticon_Type>(
    Emoticon_Type_descriptor(), name, value);
}
// ===================================================================

class Emoticon_Code final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.Emoticon.Code) */ {
 public:
  inline Emoticon_Code() : Emoticon_Code(nullptr) {}
  ~Emoticon_Code() override;
  explicit PROTOBUF_CONSTEXPR Emoticon_Code(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Emoticon_Code(const Emoticon_Code& from);
  Emoticon_Code(Emoticon_Code&& from) noexcept
    : Emoticon_Code() {
    *this = ::std::move(from);
  }

  inline Emoticon_Code& operator=(const Emoticon_Code& from) {
    CopyFrom(from);
    return *this;
  }
  inline Emoticon_Code& operator=(Emoticon_Code&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Emoticon_Code& default_instance() {
    return *internal_default_instance();
  }
  static inline const Emoticon_Code* internal_default_instance() {
    return reinterpret_cast<const Emoticon_Code*>(
               &_Emoticon_Code_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Emoticon_Code& a, Emoticon_Code& b) {
    a.Swap(&b);
  }
  inline void Swap(Emoticon_Code* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Emoticon_Code* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Emoticon_Code* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Emoticon_Code>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Emoticon_Code& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Emoticon_Code& from) {
    Emoticon_Code::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Emoticon_Code* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.Emoticon.Code";
  }
  protected:
  explicit Emoticon_Code(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 2,
    kLanguageFieldNumber = 1,
  };
  // repeated string code = 2;
  int code_size() const;
  private:
  int _internal_code_size() const;
  public:
  void clear_code();
  const std::string& code(int index) const;
  std::string* mutable_code(int index);
  void set_code(int index, const std::string& value);
  void set_code(int index, std::string&& value);
  void set_code(int index, const char* value);
  void set_code(int index, const char* value, size_t size);
  std::string* add_code();
  void add_code(const std::string& value);
  void add_code(std::string&& value);
  void add_code(const char* value);
  void add_code(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& code() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_code();
  private:
  const std::string& _internal_code(int index) const;
  std::string* _internal_add_code();
  public:

  // string language = 1;
  void clear_language();
  const std::string& language() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language();
  PROTOBUF_NODISCARD std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.Emoticon.Code)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> code_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Emoticon_2eproto;
};
// -------------------------------------------------------------------

class Emoticon final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.Emoticon) */ {
 public:
  inline Emoticon() : Emoticon(nullptr) {}
  ~Emoticon() override;
  explicit PROTOBUF_CONSTEXPR Emoticon(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Emoticon(const Emoticon& from);
  Emoticon(Emoticon&& from) noexcept
    : Emoticon() {
    *this = ::std::move(from);
  }

  inline Emoticon& operator=(const Emoticon& from) {
    CopyFrom(from);
    return *this;
  }
  inline Emoticon& operator=(Emoticon&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Emoticon& default_instance() {
    return *internal_default_instance();
  }
  static inline const Emoticon* internal_default_instance() {
    return reinterpret_cast<const Emoticon*>(
               &_Emoticon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Emoticon& a, Emoticon& b) {
    a.Swap(&b);
  }
  inline void Swap(Emoticon* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Emoticon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Emoticon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Emoticon>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Emoticon& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Emoticon& from) {
    Emoticon::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Emoticon* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.Emoticon";
  }
  protected:
  explicit Emoticon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Emoticon_Code Code;

  typedef Emoticon_Type Type;
  static constexpr Type UNKNOWN =
    Emoticon_Type_UNKNOWN;
  static constexpr Type BASIC =
    Emoticon_Type_BASIC;
  static constexpr Type IMAGE =
    Emoticon_Type_IMAGE;
  static constexpr Type GIF =
    Emoticon_Type_GIF;
  static constexpr Type SPECIAL_EFFECT =
    Emoticon_Type_SPECIAL_EFFECT;
  static constexpr Type SCRIPT =
    Emoticon_Type_SCRIPT;
  static inline bool Type_IsValid(int value) {
    return Emoticon_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Emoticon_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Emoticon_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Emoticon_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Emoticon_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Emoticon_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return Emoticon_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBigUrlFieldNumber = 5,
    kEmoticonCodeFieldNumber = 8,
    kIdFieldNumber = 1,
    kPackageIdFieldNumber = 2,
    kNameFieldNumber = 3,
    kTypeFieldNumber = 4,
    kWidthFieldNumber = 6,
    kHeightFieldNumber = 7,
  };
  // repeated .AcFunDanmu.Im.Cloud.Message.PicUrl bigUrl = 5;
  int bigurl_size() const;
  private:
  int _internal_bigurl_size() const;
  public:
  void clear_bigurl();
  ::AcFunDanmu::Im::Cloud::Message::PicUrl* mutable_bigurl(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud::Message::PicUrl >*
      mutable_bigurl();
  private:
  const ::AcFunDanmu::Im::Cloud::Message::PicUrl& _internal_bigurl(int index) const;
  ::AcFunDanmu::Im::Cloud::Message::PicUrl* _internal_add_bigurl();
  public:
  const ::AcFunDanmu::Im::Cloud::Message::PicUrl& bigurl(int index) const;
  ::AcFunDanmu::Im::Cloud::Message::PicUrl* add_bigurl();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud::Message::PicUrl >&
      bigurl() const;

  // repeated .AcFunDanmu.Im.Cloud.Message.Emoticon.Code emoticonCode = 8;
  int emoticoncode_size() const;
  private:
  int _internal_emoticoncode_size() const;
  public:
  void clear_emoticoncode();
  ::AcFunDanmu::Im::Cloud::Message::Emoticon_Code* mutable_emoticoncode(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud::Message::Emoticon_Code >*
      mutable_emoticoncode();
  private:
  const ::AcFunDanmu::Im::Cloud::Message::Emoticon_Code& _internal_emoticoncode(int index) const;
  ::AcFunDanmu::Im::Cloud::Message::Emoticon_Code* _internal_add_emoticoncode();
  public:
  const ::AcFunDanmu::Im::Cloud::Message::Emoticon_Code& emoticoncode(int index) const;
  ::AcFunDanmu::Im::Cloud::Message::Emoticon_Code* add_emoticoncode();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud::Message::Emoticon_Code >&
      emoticoncode() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string packageId = 2;
  void clear_packageid();
  const std::string& packageid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_packageid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_packageid();
  PROTOBUF_NODISCARD std::string* release_packageid();
  void set_allocated_packageid(std::string* packageid);
  private:
  const std::string& _internal_packageid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_packageid(const std::string& value);
  std::string* _internal_mutable_packageid();
  public:

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .AcFunDanmu.Im.Cloud.Message.Emoticon.Type type = 4;
  void clear_type();
  ::AcFunDanmu::Im::Cloud::Message::Emoticon_Type type() const;
  void set_type(::AcFunDanmu::Im::Cloud::Message::Emoticon_Type value);
  private:
  ::AcFunDanmu::Im::Cloud::Message::Emoticon_Type _internal_type() const;
  void _internal_set_type(::AcFunDanmu::Im::Cloud::Message::Emoticon_Type value);
  public:

  // int32 width = 6;
  void clear_width();
  int32_t width() const;
  void set_width(int32_t value);
  private:
  int32_t _internal_width() const;
  void _internal_set_width(int32_t value);
  public:

  // int32 height = 7;
  void clear_height();
  int32_t height() const;
  void set_height(int32_t value);
  private:
  int32_t _internal_height() const;
  void _internal_set_height(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.Emoticon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud::Message::PicUrl > bigurl_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud::Message::Emoticon_Code > emoticoncode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr packageid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int type_;
    int32_t width_;
    int32_t height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Emoticon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Emoticon_Code

// string language = 1;
inline void Emoticon_Code::clear_language() {
  _impl_.language_.ClearToEmpty();
}
inline const std::string& Emoticon_Code::language() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.Emoticon.Code.language)
  return _internal_language();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Emoticon_Code::set_language(ArgT0&& arg0, ArgT... args) {
 
 _impl_.language_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.Emoticon.Code.language)
}
inline std::string* Emoticon_Code::mutable_language() {
  std::string* _s = _internal_mutable_language();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.Emoticon.Code.language)
  return _s;
}
inline const std::string& Emoticon_Code::_internal_language() const {
  return _impl_.language_.Get();
}
inline void Emoticon_Code::_internal_set_language(const std::string& value) {
  
  _impl_.language_.Set(value, GetArenaForAllocation());
}
inline std::string* Emoticon_Code::_internal_mutable_language() {
  
  return _impl_.language_.Mutable(GetArenaForAllocation());
}
inline std::string* Emoticon_Code::release_language() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.Emoticon.Code.language)
  return _impl_.language_.Release();
}
inline void Emoticon_Code::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    
  } else {
    
  }
  _impl_.language_.SetAllocated(language, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.language_.IsDefault()) {
    _impl_.language_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.Emoticon.Code.language)
}

// repeated string code = 2;
inline int Emoticon_Code::_internal_code_size() const {
  return _impl_.code_.size();
}
inline int Emoticon_Code::code_size() const {
  return _internal_code_size();
}
inline void Emoticon_Code::clear_code() {
  _impl_.code_.Clear();
}
inline std::string* Emoticon_Code::add_code() {
  std::string* _s = _internal_add_code();
  // @@protoc_insertion_point(field_add_mutable:AcFunDanmu.Im.Cloud.Message.Emoticon.Code.code)
  return _s;
}
inline const std::string& Emoticon_Code::_internal_code(int index) const {
  return _impl_.code_.Get(index);
}
inline const std::string& Emoticon_Code::code(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.Emoticon.Code.code)
  return _internal_code(index);
}
inline std::string* Emoticon_Code::mutable_code(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.Emoticon.Code.code)
  return _impl_.code_.Mutable(index);
}
inline void Emoticon_Code::set_code(int index, const std::string& value) {
  _impl_.code_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.Emoticon.Code.code)
}
inline void Emoticon_Code::set_code(int index, std::string&& value) {
  _impl_.code_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.Emoticon.Code.code)
}
inline void Emoticon_Code::set_code(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.code_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Message.Emoticon.Code.code)
}
inline void Emoticon_Code::set_code(int index, const char* value, size_t size) {
  _impl_.code_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Message.Emoticon.Code.code)
}
inline std::string* Emoticon_Code::_internal_add_code() {
  return _impl_.code_.Add();
}
inline void Emoticon_Code::add_code(const std::string& value) {
  _impl_.code_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Cloud.Message.Emoticon.Code.code)
}
inline void Emoticon_Code::add_code(std::string&& value) {
  _impl_.code_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Cloud.Message.Emoticon.Code.code)
}
inline void Emoticon_Code::add_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.code_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AcFunDanmu.Im.Cloud.Message.Emoticon.Code.code)
}
inline void Emoticon_Code::add_code(const char* value, size_t size) {
  _impl_.code_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AcFunDanmu.Im.Cloud.Message.Emoticon.Code.code)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Emoticon_Code::code() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Cloud.Message.Emoticon.Code.code)
  return _impl_.code_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Emoticon_Code::mutable_code() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Cloud.Message.Emoticon.Code.code)
  return &_impl_.code_;
}

// -------------------------------------------------------------------

// Emoticon

// string id = 1;
inline void Emoticon::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& Emoticon::id() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.Emoticon.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Emoticon::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.Emoticon.id)
}
inline std::string* Emoticon::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.Emoticon.id)
  return _s;
}
inline const std::string& Emoticon::_internal_id() const {
  return _impl_.id_.Get();
}
inline void Emoticon::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* Emoticon::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* Emoticon::release_id() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.Emoticon.id)
  return _impl_.id_.Release();
}
inline void Emoticon::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.Emoticon.id)
}

// string packageId = 2;
inline void Emoticon::clear_packageid() {
  _impl_.packageid_.ClearToEmpty();
}
inline const std::string& Emoticon::packageid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.Emoticon.packageId)
  return _internal_packageid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Emoticon::set_packageid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.packageid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.Emoticon.packageId)
}
inline std::string* Emoticon::mutable_packageid() {
  std::string* _s = _internal_mutable_packageid();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.Emoticon.packageId)
  return _s;
}
inline const std::string& Emoticon::_internal_packageid() const {
  return _impl_.packageid_.Get();
}
inline void Emoticon::_internal_set_packageid(const std::string& value) {
  
  _impl_.packageid_.Set(value, GetArenaForAllocation());
}
inline std::string* Emoticon::_internal_mutable_packageid() {
  
  return _impl_.packageid_.Mutable(GetArenaForAllocation());
}
inline std::string* Emoticon::release_packageid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.Emoticon.packageId)
  return _impl_.packageid_.Release();
}
inline void Emoticon::set_allocated_packageid(std::string* packageid) {
  if (packageid != nullptr) {
    
  } else {
    
  }
  _impl_.packageid_.SetAllocated(packageid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.packageid_.IsDefault()) {
    _impl_.packageid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.Emoticon.packageId)
}

// string name = 3;
inline void Emoticon::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Emoticon::name() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.Emoticon.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Emoticon::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.Emoticon.name)
}
inline std::string* Emoticon::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.Emoticon.name)
  return _s;
}
inline const std::string& Emoticon::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Emoticon::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Emoticon::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Emoticon::release_name() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.Emoticon.name)
  return _impl_.name_.Release();
}
inline void Emoticon::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.Emoticon.name)
}

// .AcFunDanmu.Im.Cloud.Message.Emoticon.Type type = 4;
inline void Emoticon::clear_type() {
  _impl_.type_ = 0;
}
inline ::AcFunDanmu::Im::Cloud::Message::Emoticon_Type Emoticon::_internal_type() const {
  return static_cast< ::AcFunDanmu::Im::Cloud::Message::Emoticon_Type >(_impl_.type_);
}
inline ::AcFunDanmu::Im::Cloud::Message::Emoticon_Type Emoticon::type() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.Emoticon.type)
  return _internal_type();
}
inline void Emoticon::_internal_set_type(::AcFunDanmu::Im::Cloud::Message::Emoticon_Type value) {
  
  _impl_.type_ = value;
}
inline void Emoticon::set_type(::AcFunDanmu::Im::Cloud::Message::Emoticon_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.Emoticon.type)
}

// repeated .AcFunDanmu.Im.Cloud.Message.PicUrl bigUrl = 5;
inline int Emoticon::_internal_bigurl_size() const {
  return _impl_.bigurl_.size();
}
inline int Emoticon::bigurl_size() const {
  return _internal_bigurl_size();
}
inline ::AcFunDanmu::Im::Cloud::Message::PicUrl* Emoticon::mutable_bigurl(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.Emoticon.bigUrl)
  return _impl_.bigurl_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud::Message::PicUrl >*
Emoticon::mutable_bigurl() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Cloud.Message.Emoticon.bigUrl)
  return &_impl_.bigurl_;
}
inline const ::AcFunDanmu::Im::Cloud::Message::PicUrl& Emoticon::_internal_bigurl(int index) const {
  return _impl_.bigurl_.Get(index);
}
inline const ::AcFunDanmu::Im::Cloud::Message::PicUrl& Emoticon::bigurl(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.Emoticon.bigUrl)
  return _internal_bigurl(index);
}
inline ::AcFunDanmu::Im::Cloud::Message::PicUrl* Emoticon::_internal_add_bigurl() {
  return _impl_.bigurl_.Add();
}
inline ::AcFunDanmu::Im::Cloud::Message::PicUrl* Emoticon::add_bigurl() {
  ::AcFunDanmu::Im::Cloud::Message::PicUrl* _add = _internal_add_bigurl();
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Cloud.Message.Emoticon.bigUrl)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud::Message::PicUrl >&
Emoticon::bigurl() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Cloud.Message.Emoticon.bigUrl)
  return _impl_.bigurl_;
}

// int32 width = 6;
inline void Emoticon::clear_width() {
  _impl_.width_ = 0;
}
inline int32_t Emoticon::_internal_width() const {
  return _impl_.width_;
}
inline int32_t Emoticon::width() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.Emoticon.width)
  return _internal_width();
}
inline void Emoticon::_internal_set_width(int32_t value) {
  
  _impl_.width_ = value;
}
inline void Emoticon::set_width(int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.Emoticon.width)
}

// int32 height = 7;
inline void Emoticon::clear_height() {
  _impl_.height_ = 0;
}
inline int32_t Emoticon::_internal_height() const {
  return _impl_.height_;
}
inline int32_t Emoticon::height() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.Emoticon.height)
  return _internal_height();
}
inline void Emoticon::_internal_set_height(int32_t value) {
  
  _impl_.height_ = value;
}
inline void Emoticon::set_height(int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.Emoticon.height)
}

// repeated .AcFunDanmu.Im.Cloud.Message.Emoticon.Code emoticonCode = 8;
inline int Emoticon::_internal_emoticoncode_size() const {
  return _impl_.emoticoncode_.size();
}
inline int Emoticon::emoticoncode_size() const {
  return _internal_emoticoncode_size();
}
inline void Emoticon::clear_emoticoncode() {
  _impl_.emoticoncode_.Clear();
}
inline ::AcFunDanmu::Im::Cloud::Message::Emoticon_Code* Emoticon::mutable_emoticoncode(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.Emoticon.emoticonCode)
  return _impl_.emoticoncode_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud::Message::Emoticon_Code >*
Emoticon::mutable_emoticoncode() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Cloud.Message.Emoticon.emoticonCode)
  return &_impl_.emoticoncode_;
}
inline const ::AcFunDanmu::Im::Cloud::Message::Emoticon_Code& Emoticon::_internal_emoticoncode(int index) const {
  return _impl_.emoticoncode_.Get(index);
}
inline const ::AcFunDanmu::Im::Cloud::Message::Emoticon_Code& Emoticon::emoticoncode(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.Emoticon.emoticonCode)
  return _internal_emoticoncode(index);
}
inline ::AcFunDanmu::Im::Cloud::Message::Emoticon_Code* Emoticon::_internal_add_emoticoncode() {
  return _impl_.emoticoncode_.Add();
}
inline ::AcFunDanmu::Im::Cloud::Message::Emoticon_Code* Emoticon::add_emoticoncode() {
  ::AcFunDanmu::Im::Cloud::Message::Emoticon_Code* _add = _internal_add_emoticoncode();
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Cloud.Message.Emoticon.emoticonCode)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud::Message::Emoticon_Code >&
Emoticon::emoticoncode() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Cloud.Message.Emoticon.emoticonCode)
  return _impl_.emoticoncode_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Message
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::AcFunDanmu::Im::Cloud::Message::Emoticon_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::Im::Cloud::Message::Emoticon_Type>() {
  return ::AcFunDanmu::Im::Cloud::Message::Emoticon_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Emoticon_2eproto
