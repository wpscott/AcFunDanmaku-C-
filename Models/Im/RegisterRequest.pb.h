// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RegisterRequest.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_RegisterRequest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_RegisterRequest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "AppInfo.pb.h"
#include "DeviceInfo.pb.h"
#include "EnvInfo.pb.h"
#include "PushServiceToken.pb.h"
#include "ZtCommonInfo.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_RegisterRequest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_RegisterRequest_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_RegisterRequest_2eproto;
namespace AcFunDanmu {
namespace Im {
namespace Basic {
class RegisterRequest;
struct RegisterRequestDefaultTypeInternal;
extern RegisterRequestDefaultTypeInternal _RegisterRequest_default_instance_;
}  // namespace Basic
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::Im::Basic::RegisterRequest* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Basic::RegisterRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {
namespace Im {
namespace Basic {

enum RegisterRequest_PresenceStatus : int {
  RegisterRequest_PresenceStatus_kPresenceOffline = 0,
  RegisterRequest_PresenceStatus_kPresenceOnline = 1,
  RegisterRequest_PresenceStatus_RegisterRequest_PresenceStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RegisterRequest_PresenceStatus_RegisterRequest_PresenceStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RegisterRequest_PresenceStatus_IsValid(int value);
constexpr RegisterRequest_PresenceStatus RegisterRequest_PresenceStatus_PresenceStatus_MIN = RegisterRequest_PresenceStatus_kPresenceOffline;
constexpr RegisterRequest_PresenceStatus RegisterRequest_PresenceStatus_PresenceStatus_MAX = RegisterRequest_PresenceStatus_kPresenceOnline;
constexpr int RegisterRequest_PresenceStatus_PresenceStatus_ARRAYSIZE = RegisterRequest_PresenceStatus_PresenceStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RegisterRequest_PresenceStatus_descriptor();
template<typename T>
inline const std::string& RegisterRequest_PresenceStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RegisterRequest_PresenceStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RegisterRequest_PresenceStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RegisterRequest_PresenceStatus_descriptor(), enum_t_value);
}
inline bool RegisterRequest_PresenceStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RegisterRequest_PresenceStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RegisterRequest_PresenceStatus>(
    RegisterRequest_PresenceStatus_descriptor(), name, value);
}
enum RegisterRequest_ActiveStatus : int {
  RegisterRequest_ActiveStatus_kInvalid = 0,
  RegisterRequest_ActiveStatus_kAppInForeground = 1,
  RegisterRequest_ActiveStatus_kAppInBackground = 2,
  RegisterRequest_ActiveStatus_RegisterRequest_ActiveStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RegisterRequest_ActiveStatus_RegisterRequest_ActiveStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RegisterRequest_ActiveStatus_IsValid(int value);
constexpr RegisterRequest_ActiveStatus RegisterRequest_ActiveStatus_ActiveStatus_MIN = RegisterRequest_ActiveStatus_kInvalid;
constexpr RegisterRequest_ActiveStatus RegisterRequest_ActiveStatus_ActiveStatus_MAX = RegisterRequest_ActiveStatus_kAppInBackground;
constexpr int RegisterRequest_ActiveStatus_ActiveStatus_ARRAYSIZE = RegisterRequest_ActiveStatus_ActiveStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RegisterRequest_ActiveStatus_descriptor();
template<typename T>
inline const std::string& RegisterRequest_ActiveStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RegisterRequest_ActiveStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RegisterRequest_ActiveStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RegisterRequest_ActiveStatus_descriptor(), enum_t_value);
}
inline bool RegisterRequest_ActiveStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RegisterRequest_ActiveStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RegisterRequest_ActiveStatus>(
    RegisterRequest_ActiveStatus_descriptor(), name, value);
}
// ===================================================================

class RegisterRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Basic.RegisterRequest) */ {
 public:
  inline RegisterRequest() : RegisterRequest(nullptr) {}
  ~RegisterRequest() override;
  explicit PROTOBUF_CONSTEXPR RegisterRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterRequest(const RegisterRequest& from);
  RegisterRequest(RegisterRequest&& from) noexcept
    : RegisterRequest() {
    *this = ::std::move(from);
  }

  inline RegisterRequest& operator=(const RegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterRequest& operator=(RegisterRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterRequest*>(
               &_RegisterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RegisterRequest& a, RegisterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RegisterRequest& from) {
    RegisterRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Basic.RegisterRequest";
  }
  protected:
  explicit RegisterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RegisterRequest_PresenceStatus PresenceStatus;
  static constexpr PresenceStatus kPresenceOffline =
    RegisterRequest_PresenceStatus_kPresenceOffline;
  static constexpr PresenceStatus kPresenceOnline =
    RegisterRequest_PresenceStatus_kPresenceOnline;
  static inline bool PresenceStatus_IsValid(int value) {
    return RegisterRequest_PresenceStatus_IsValid(value);
  }
  static constexpr PresenceStatus PresenceStatus_MIN =
    RegisterRequest_PresenceStatus_PresenceStatus_MIN;
  static constexpr PresenceStatus PresenceStatus_MAX =
    RegisterRequest_PresenceStatus_PresenceStatus_MAX;
  static constexpr int PresenceStatus_ARRAYSIZE =
    RegisterRequest_PresenceStatus_PresenceStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PresenceStatus_descriptor() {
    return RegisterRequest_PresenceStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& PresenceStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PresenceStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PresenceStatus_Name.");
    return RegisterRequest_PresenceStatus_Name(enum_t_value);
  }
  static inline bool PresenceStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PresenceStatus* value) {
    return RegisterRequest_PresenceStatus_Parse(name, value);
  }

  typedef RegisterRequest_ActiveStatus ActiveStatus;
  static constexpr ActiveStatus kInvalid =
    RegisterRequest_ActiveStatus_kInvalid;
  static constexpr ActiveStatus kAppInForeground =
    RegisterRequest_ActiveStatus_kAppInForeground;
  static constexpr ActiveStatus kAppInBackground =
    RegisterRequest_ActiveStatus_kAppInBackground;
  static inline bool ActiveStatus_IsValid(int value) {
    return RegisterRequest_ActiveStatus_IsValid(value);
  }
  static constexpr ActiveStatus ActiveStatus_MIN =
    RegisterRequest_ActiveStatus_ActiveStatus_MIN;
  static constexpr ActiveStatus ActiveStatus_MAX =
    RegisterRequest_ActiveStatus_ActiveStatus_MAX;
  static constexpr int ActiveStatus_ARRAYSIZE =
    RegisterRequest_ActiveStatus_ActiveStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ActiveStatus_descriptor() {
    return RegisterRequest_ActiveStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& ActiveStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ActiveStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ActiveStatus_Name.");
    return RegisterRequest_ActiveStatus_Name(enum_t_value);
  }
  static inline bool ActiveStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ActiveStatus* value) {
    return RegisterRequest_ActiveStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPushServiceTokenListFieldNumber = 9,
    kAppCustomStatusFieldNumber = 6,
    kAppInfoFieldNumber = 1,
    kDeviceInfoFieldNumber = 2,
    kEnvInfoFieldNumber = 3,
    kPushServiceTokenFieldNumber = 7,
    kZtCommonInfoFieldNumber = 11,
    kPresenceStatusFieldNumber = 4,
    kAppActiveStatusFieldNumber = 5,
    kInstanceIdFieldNumber = 8,
    kKeepaliveIntervalSecFieldNumber = 10,
    kIpv6AvailableFieldNumber = 12,
  };
  // repeated .AcFunDanmu.Im.Basic.PushServiceToken pushServiceTokenList = 9;
  int pushservicetokenlist_size() const;
  private:
  int _internal_pushservicetokenlist_size() const;
  public:
  void clear_pushservicetokenlist();
  ::AcFunDanmu::Im::Basic::PushServiceToken* mutable_pushservicetokenlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic::PushServiceToken >*
      mutable_pushservicetokenlist();
  private:
  const ::AcFunDanmu::Im::Basic::PushServiceToken& _internal_pushservicetokenlist(int index) const;
  ::AcFunDanmu::Im::Basic::PushServiceToken* _internal_add_pushservicetokenlist();
  public:
  const ::AcFunDanmu::Im::Basic::PushServiceToken& pushservicetokenlist(int index) const;
  ::AcFunDanmu::Im::Basic::PushServiceToken* add_pushservicetokenlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic::PushServiceToken >&
      pushservicetokenlist() const;

  // bytes appCustomStatus = 6;
  void clear_appcustomstatus();
  const std::string& appcustomstatus() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_appcustomstatus(ArgT0&& arg0, ArgT... args);
  std::string* mutable_appcustomstatus();
  PROTOBUF_NODISCARD std::string* release_appcustomstatus();
  void set_allocated_appcustomstatus(std::string* appcustomstatus);
  private:
  const std::string& _internal_appcustomstatus() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_appcustomstatus(const std::string& value);
  std::string* _internal_mutable_appcustomstatus();
  public:

  // .AcFunDanmu.Im.Basic.AppInfo appInfo = 1;
  bool has_appinfo() const;
  private:
  bool _internal_has_appinfo() const;
  public:
  void clear_appinfo();
  const ::AcFunDanmu::Im::Basic::AppInfo& appinfo() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Basic::AppInfo* release_appinfo();
  ::AcFunDanmu::Im::Basic::AppInfo* mutable_appinfo();
  void set_allocated_appinfo(::AcFunDanmu::Im::Basic::AppInfo* appinfo);
  private:
  const ::AcFunDanmu::Im::Basic::AppInfo& _internal_appinfo() const;
  ::AcFunDanmu::Im::Basic::AppInfo* _internal_mutable_appinfo();
  public:
  void unsafe_arena_set_allocated_appinfo(
      ::AcFunDanmu::Im::Basic::AppInfo* appinfo);
  ::AcFunDanmu::Im::Basic::AppInfo* unsafe_arena_release_appinfo();

  // .AcFunDanmu.Im.Basic.DeviceInfo deviceInfo = 2;
  bool has_deviceinfo() const;
  private:
  bool _internal_has_deviceinfo() const;
  public:
  void clear_deviceinfo();
  const ::AcFunDanmu::Im::Basic::DeviceInfo& deviceinfo() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Basic::DeviceInfo* release_deviceinfo();
  ::AcFunDanmu::Im::Basic::DeviceInfo* mutable_deviceinfo();
  void set_allocated_deviceinfo(::AcFunDanmu::Im::Basic::DeviceInfo* deviceinfo);
  private:
  const ::AcFunDanmu::Im::Basic::DeviceInfo& _internal_deviceinfo() const;
  ::AcFunDanmu::Im::Basic::DeviceInfo* _internal_mutable_deviceinfo();
  public:
  void unsafe_arena_set_allocated_deviceinfo(
      ::AcFunDanmu::Im::Basic::DeviceInfo* deviceinfo);
  ::AcFunDanmu::Im::Basic::DeviceInfo* unsafe_arena_release_deviceinfo();

  // .AcFunDanmu.Im.Basic.EnvInfo envInfo = 3;
  bool has_envinfo() const;
  private:
  bool _internal_has_envinfo() const;
  public:
  void clear_envinfo();
  const ::AcFunDanmu::Im::Basic::EnvInfo& envinfo() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Basic::EnvInfo* release_envinfo();
  ::AcFunDanmu::Im::Basic::EnvInfo* mutable_envinfo();
  void set_allocated_envinfo(::AcFunDanmu::Im::Basic::EnvInfo* envinfo);
  private:
  const ::AcFunDanmu::Im::Basic::EnvInfo& _internal_envinfo() const;
  ::AcFunDanmu::Im::Basic::EnvInfo* _internal_mutable_envinfo();
  public:
  void unsafe_arena_set_allocated_envinfo(
      ::AcFunDanmu::Im::Basic::EnvInfo* envinfo);
  ::AcFunDanmu::Im::Basic::EnvInfo* unsafe_arena_release_envinfo();

  // .AcFunDanmu.Im.Basic.PushServiceToken pushServiceToken = 7;
  bool has_pushservicetoken() const;
  private:
  bool _internal_has_pushservicetoken() const;
  public:
  void clear_pushservicetoken();
  const ::AcFunDanmu::Im::Basic::PushServiceToken& pushservicetoken() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Basic::PushServiceToken* release_pushservicetoken();
  ::AcFunDanmu::Im::Basic::PushServiceToken* mutable_pushservicetoken();
  void set_allocated_pushservicetoken(::AcFunDanmu::Im::Basic::PushServiceToken* pushservicetoken);
  private:
  const ::AcFunDanmu::Im::Basic::PushServiceToken& _internal_pushservicetoken() const;
  ::AcFunDanmu::Im::Basic::PushServiceToken* _internal_mutable_pushservicetoken();
  public:
  void unsafe_arena_set_allocated_pushservicetoken(
      ::AcFunDanmu::Im::Basic::PushServiceToken* pushservicetoken);
  ::AcFunDanmu::Im::Basic::PushServiceToken* unsafe_arena_release_pushservicetoken();

  // .AcFunDanmu.Im.Basic.ZtCommonInfo ztCommonInfo = 11;
  bool has_ztcommoninfo() const;
  private:
  bool _internal_has_ztcommoninfo() const;
  public:
  void clear_ztcommoninfo();
  const ::AcFunDanmu::Im::Basic::ZtCommonInfo& ztcommoninfo() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Basic::ZtCommonInfo* release_ztcommoninfo();
  ::AcFunDanmu::Im::Basic::ZtCommonInfo* mutable_ztcommoninfo();
  void set_allocated_ztcommoninfo(::AcFunDanmu::Im::Basic::ZtCommonInfo* ztcommoninfo);
  private:
  const ::AcFunDanmu::Im::Basic::ZtCommonInfo& _internal_ztcommoninfo() const;
  ::AcFunDanmu::Im::Basic::ZtCommonInfo* _internal_mutable_ztcommoninfo();
  public:
  void unsafe_arena_set_allocated_ztcommoninfo(
      ::AcFunDanmu::Im::Basic::ZtCommonInfo* ztcommoninfo);
  ::AcFunDanmu::Im::Basic::ZtCommonInfo* unsafe_arena_release_ztcommoninfo();

  // .AcFunDanmu.Im.Basic.RegisterRequest.PresenceStatus presenceStatus = 4;
  void clear_presencestatus();
  ::AcFunDanmu::Im::Basic::RegisterRequest_PresenceStatus presencestatus() const;
  void set_presencestatus(::AcFunDanmu::Im::Basic::RegisterRequest_PresenceStatus value);
  private:
  ::AcFunDanmu::Im::Basic::RegisterRequest_PresenceStatus _internal_presencestatus() const;
  void _internal_set_presencestatus(::AcFunDanmu::Im::Basic::RegisterRequest_PresenceStatus value);
  public:

  // .AcFunDanmu.Im.Basic.RegisterRequest.ActiveStatus appActiveStatus = 5;
  void clear_appactivestatus();
  ::AcFunDanmu::Im::Basic::RegisterRequest_ActiveStatus appactivestatus() const;
  void set_appactivestatus(::AcFunDanmu::Im::Basic::RegisterRequest_ActiveStatus value);
  private:
  ::AcFunDanmu::Im::Basic::RegisterRequest_ActiveStatus _internal_appactivestatus() const;
  void _internal_set_appactivestatus(::AcFunDanmu::Im::Basic::RegisterRequest_ActiveStatus value);
  public:

  // int64 instanceId = 8;
  void clear_instanceid();
  int64_t instanceid() const;
  void set_instanceid(int64_t value);
  private:
  int64_t _internal_instanceid() const;
  void _internal_set_instanceid(int64_t value);
  public:

  // int32 keepaliveIntervalSec = 10;
  void clear_keepaliveintervalsec();
  int32_t keepaliveintervalsec() const;
  void set_keepaliveintervalsec(int32_t value);
  private:
  int32_t _internal_keepaliveintervalsec() const;
  void _internal_set_keepaliveintervalsec(int32_t value);
  public:

  // bool ipv6Available = 12;
  void clear_ipv6available();
  bool ipv6available() const;
  void set_ipv6available(bool value);
  private:
  bool _internal_ipv6available() const;
  void _internal_set_ipv6available(bool value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Basic.RegisterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic::PushServiceToken > pushservicetokenlist_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appcustomstatus_;
    ::AcFunDanmu::Im::Basic::AppInfo* appinfo_;
    ::AcFunDanmu::Im::Basic::DeviceInfo* deviceinfo_;
    ::AcFunDanmu::Im::Basic::EnvInfo* envinfo_;
    ::AcFunDanmu::Im::Basic::PushServiceToken* pushservicetoken_;
    ::AcFunDanmu::Im::Basic::ZtCommonInfo* ztcommoninfo_;
    int presencestatus_;
    int appactivestatus_;
    int64_t instanceid_;
    int32_t keepaliveintervalsec_;
    bool ipv6available_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RegisterRequest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RegisterRequest

// .AcFunDanmu.Im.Basic.AppInfo appInfo = 1;
inline bool RegisterRequest::_internal_has_appinfo() const {
  return this != internal_default_instance() && _impl_.appinfo_ != nullptr;
}
inline bool RegisterRequest::has_appinfo() const {
  return _internal_has_appinfo();
}
inline const ::AcFunDanmu::Im::Basic::AppInfo& RegisterRequest::_internal_appinfo() const {
  const ::AcFunDanmu::Im::Basic::AppInfo* p = _impl_.appinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic::AppInfo&>(
      ::AcFunDanmu::Im::Basic::_AppInfo_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic::AppInfo& RegisterRequest::appinfo() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.RegisterRequest.appInfo)
  return _internal_appinfo();
}
inline void RegisterRequest::unsafe_arena_set_allocated_appinfo(
    ::AcFunDanmu::Im::Basic::AppInfo* appinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.appinfo_);
  }
  _impl_.appinfo_ = appinfo;
  if (appinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Basic.RegisterRequest.appInfo)
}
inline ::AcFunDanmu::Im::Basic::AppInfo* RegisterRequest::release_appinfo() {
  
  ::AcFunDanmu::Im::Basic::AppInfo* temp = _impl_.appinfo_;
  _impl_.appinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AcFunDanmu::Im::Basic::AppInfo* RegisterRequest::unsafe_arena_release_appinfo() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.RegisterRequest.appInfo)
  
  ::AcFunDanmu::Im::Basic::AppInfo* temp = _impl_.appinfo_;
  _impl_.appinfo_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic::AppInfo* RegisterRequest::_internal_mutable_appinfo() {
  
  if (_impl_.appinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic::AppInfo>(GetArenaForAllocation());
    _impl_.appinfo_ = p;
  }
  return _impl_.appinfo_;
}
inline ::AcFunDanmu::Im::Basic::AppInfo* RegisterRequest::mutable_appinfo() {
  ::AcFunDanmu::Im::Basic::AppInfo* _msg = _internal_mutable_appinfo();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.RegisterRequest.appInfo)
  return _msg;
}
inline void RegisterRequest::set_allocated_appinfo(::AcFunDanmu::Im::Basic::AppInfo* appinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.appinfo_);
  }
  if (appinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(appinfo));
    if (message_arena != submessage_arena) {
      appinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, appinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.appinfo_ = appinfo;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.RegisterRequest.appInfo)
}

// .AcFunDanmu.Im.Basic.DeviceInfo deviceInfo = 2;
inline bool RegisterRequest::_internal_has_deviceinfo() const {
  return this != internal_default_instance() && _impl_.deviceinfo_ != nullptr;
}
inline bool RegisterRequest::has_deviceinfo() const {
  return _internal_has_deviceinfo();
}
inline const ::AcFunDanmu::Im::Basic::DeviceInfo& RegisterRequest::_internal_deviceinfo() const {
  const ::AcFunDanmu::Im::Basic::DeviceInfo* p = _impl_.deviceinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic::DeviceInfo&>(
      ::AcFunDanmu::Im::Basic::_DeviceInfo_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic::DeviceInfo& RegisterRequest::deviceinfo() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.RegisterRequest.deviceInfo)
  return _internal_deviceinfo();
}
inline void RegisterRequest::unsafe_arena_set_allocated_deviceinfo(
    ::AcFunDanmu::Im::Basic::DeviceInfo* deviceinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.deviceinfo_);
  }
  _impl_.deviceinfo_ = deviceinfo;
  if (deviceinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Basic.RegisterRequest.deviceInfo)
}
inline ::AcFunDanmu::Im::Basic::DeviceInfo* RegisterRequest::release_deviceinfo() {
  
  ::AcFunDanmu::Im::Basic::DeviceInfo* temp = _impl_.deviceinfo_;
  _impl_.deviceinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AcFunDanmu::Im::Basic::DeviceInfo* RegisterRequest::unsafe_arena_release_deviceinfo() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.RegisterRequest.deviceInfo)
  
  ::AcFunDanmu::Im::Basic::DeviceInfo* temp = _impl_.deviceinfo_;
  _impl_.deviceinfo_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic::DeviceInfo* RegisterRequest::_internal_mutable_deviceinfo() {
  
  if (_impl_.deviceinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic::DeviceInfo>(GetArenaForAllocation());
    _impl_.deviceinfo_ = p;
  }
  return _impl_.deviceinfo_;
}
inline ::AcFunDanmu::Im::Basic::DeviceInfo* RegisterRequest::mutable_deviceinfo() {
  ::AcFunDanmu::Im::Basic::DeviceInfo* _msg = _internal_mutable_deviceinfo();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.RegisterRequest.deviceInfo)
  return _msg;
}
inline void RegisterRequest::set_allocated_deviceinfo(::AcFunDanmu::Im::Basic::DeviceInfo* deviceinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.deviceinfo_);
  }
  if (deviceinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deviceinfo));
    if (message_arena != submessage_arena) {
      deviceinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deviceinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.deviceinfo_ = deviceinfo;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.RegisterRequest.deviceInfo)
}

// .AcFunDanmu.Im.Basic.EnvInfo envInfo = 3;
inline bool RegisterRequest::_internal_has_envinfo() const {
  return this != internal_default_instance() && _impl_.envinfo_ != nullptr;
}
inline bool RegisterRequest::has_envinfo() const {
  return _internal_has_envinfo();
}
inline const ::AcFunDanmu::Im::Basic::EnvInfo& RegisterRequest::_internal_envinfo() const {
  const ::AcFunDanmu::Im::Basic::EnvInfo* p = _impl_.envinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic::EnvInfo&>(
      ::AcFunDanmu::Im::Basic::_EnvInfo_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic::EnvInfo& RegisterRequest::envinfo() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.RegisterRequest.envInfo)
  return _internal_envinfo();
}
inline void RegisterRequest::unsafe_arena_set_allocated_envinfo(
    ::AcFunDanmu::Im::Basic::EnvInfo* envinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.envinfo_);
  }
  _impl_.envinfo_ = envinfo;
  if (envinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Basic.RegisterRequest.envInfo)
}
inline ::AcFunDanmu::Im::Basic::EnvInfo* RegisterRequest::release_envinfo() {
  
  ::AcFunDanmu::Im::Basic::EnvInfo* temp = _impl_.envinfo_;
  _impl_.envinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AcFunDanmu::Im::Basic::EnvInfo* RegisterRequest::unsafe_arena_release_envinfo() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.RegisterRequest.envInfo)
  
  ::AcFunDanmu::Im::Basic::EnvInfo* temp = _impl_.envinfo_;
  _impl_.envinfo_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic::EnvInfo* RegisterRequest::_internal_mutable_envinfo() {
  
  if (_impl_.envinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic::EnvInfo>(GetArenaForAllocation());
    _impl_.envinfo_ = p;
  }
  return _impl_.envinfo_;
}
inline ::AcFunDanmu::Im::Basic::EnvInfo* RegisterRequest::mutable_envinfo() {
  ::AcFunDanmu::Im::Basic::EnvInfo* _msg = _internal_mutable_envinfo();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.RegisterRequest.envInfo)
  return _msg;
}
inline void RegisterRequest::set_allocated_envinfo(::AcFunDanmu::Im::Basic::EnvInfo* envinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.envinfo_);
  }
  if (envinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(envinfo));
    if (message_arena != submessage_arena) {
      envinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, envinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.envinfo_ = envinfo;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.RegisterRequest.envInfo)
}

// .AcFunDanmu.Im.Basic.RegisterRequest.PresenceStatus presenceStatus = 4;
inline void RegisterRequest::clear_presencestatus() {
  _impl_.presencestatus_ = 0;
}
inline ::AcFunDanmu::Im::Basic::RegisterRequest_PresenceStatus RegisterRequest::_internal_presencestatus() const {
  return static_cast< ::AcFunDanmu::Im::Basic::RegisterRequest_PresenceStatus >(_impl_.presencestatus_);
}
inline ::AcFunDanmu::Im::Basic::RegisterRequest_PresenceStatus RegisterRequest::presencestatus() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.RegisterRequest.presenceStatus)
  return _internal_presencestatus();
}
inline void RegisterRequest::_internal_set_presencestatus(::AcFunDanmu::Im::Basic::RegisterRequest_PresenceStatus value) {
  
  _impl_.presencestatus_ = value;
}
inline void RegisterRequest::set_presencestatus(::AcFunDanmu::Im::Basic::RegisterRequest_PresenceStatus value) {
  _internal_set_presencestatus(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.RegisterRequest.presenceStatus)
}

// .AcFunDanmu.Im.Basic.RegisterRequest.ActiveStatus appActiveStatus = 5;
inline void RegisterRequest::clear_appactivestatus() {
  _impl_.appactivestatus_ = 0;
}
inline ::AcFunDanmu::Im::Basic::RegisterRequest_ActiveStatus RegisterRequest::_internal_appactivestatus() const {
  return static_cast< ::AcFunDanmu::Im::Basic::RegisterRequest_ActiveStatus >(_impl_.appactivestatus_);
}
inline ::AcFunDanmu::Im::Basic::RegisterRequest_ActiveStatus RegisterRequest::appactivestatus() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.RegisterRequest.appActiveStatus)
  return _internal_appactivestatus();
}
inline void RegisterRequest::_internal_set_appactivestatus(::AcFunDanmu::Im::Basic::RegisterRequest_ActiveStatus value) {
  
  _impl_.appactivestatus_ = value;
}
inline void RegisterRequest::set_appactivestatus(::AcFunDanmu::Im::Basic::RegisterRequest_ActiveStatus value) {
  _internal_set_appactivestatus(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.RegisterRequest.appActiveStatus)
}

// bytes appCustomStatus = 6;
inline void RegisterRequest::clear_appcustomstatus() {
  _impl_.appcustomstatus_.ClearToEmpty();
}
inline const std::string& RegisterRequest::appcustomstatus() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.RegisterRequest.appCustomStatus)
  return _internal_appcustomstatus();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterRequest::set_appcustomstatus(ArgT0&& arg0, ArgT... args) {
 
 _impl_.appcustomstatus_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.RegisterRequest.appCustomStatus)
}
inline std::string* RegisterRequest::mutable_appcustomstatus() {
  std::string* _s = _internal_mutable_appcustomstatus();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.RegisterRequest.appCustomStatus)
  return _s;
}
inline const std::string& RegisterRequest::_internal_appcustomstatus() const {
  return _impl_.appcustomstatus_.Get();
}
inline void RegisterRequest::_internal_set_appcustomstatus(const std::string& value) {
  
  _impl_.appcustomstatus_.Set(value, GetArenaForAllocation());
}
inline std::string* RegisterRequest::_internal_mutable_appcustomstatus() {
  
  return _impl_.appcustomstatus_.Mutable(GetArenaForAllocation());
}
inline std::string* RegisterRequest::release_appcustomstatus() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.RegisterRequest.appCustomStatus)
  return _impl_.appcustomstatus_.Release();
}
inline void RegisterRequest::set_allocated_appcustomstatus(std::string* appcustomstatus) {
  if (appcustomstatus != nullptr) {
    
  } else {
    
  }
  _impl_.appcustomstatus_.SetAllocated(appcustomstatus, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.appcustomstatus_.IsDefault()) {
    _impl_.appcustomstatus_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.RegisterRequest.appCustomStatus)
}

// .AcFunDanmu.Im.Basic.PushServiceToken pushServiceToken = 7;
inline bool RegisterRequest::_internal_has_pushservicetoken() const {
  return this != internal_default_instance() && _impl_.pushservicetoken_ != nullptr;
}
inline bool RegisterRequest::has_pushservicetoken() const {
  return _internal_has_pushservicetoken();
}
inline const ::AcFunDanmu::Im::Basic::PushServiceToken& RegisterRequest::_internal_pushservicetoken() const {
  const ::AcFunDanmu::Im::Basic::PushServiceToken* p = _impl_.pushservicetoken_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic::PushServiceToken&>(
      ::AcFunDanmu::Im::Basic::_PushServiceToken_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic::PushServiceToken& RegisterRequest::pushservicetoken() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.RegisterRequest.pushServiceToken)
  return _internal_pushservicetoken();
}
inline void RegisterRequest::unsafe_arena_set_allocated_pushservicetoken(
    ::AcFunDanmu::Im::Basic::PushServiceToken* pushservicetoken) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pushservicetoken_);
  }
  _impl_.pushservicetoken_ = pushservicetoken;
  if (pushservicetoken) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Basic.RegisterRequest.pushServiceToken)
}
inline ::AcFunDanmu::Im::Basic::PushServiceToken* RegisterRequest::release_pushservicetoken() {
  
  ::AcFunDanmu::Im::Basic::PushServiceToken* temp = _impl_.pushservicetoken_;
  _impl_.pushservicetoken_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AcFunDanmu::Im::Basic::PushServiceToken* RegisterRequest::unsafe_arena_release_pushservicetoken() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.RegisterRequest.pushServiceToken)
  
  ::AcFunDanmu::Im::Basic::PushServiceToken* temp = _impl_.pushservicetoken_;
  _impl_.pushservicetoken_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic::PushServiceToken* RegisterRequest::_internal_mutable_pushservicetoken() {
  
  if (_impl_.pushservicetoken_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic::PushServiceToken>(GetArenaForAllocation());
    _impl_.pushservicetoken_ = p;
  }
  return _impl_.pushservicetoken_;
}
inline ::AcFunDanmu::Im::Basic::PushServiceToken* RegisterRequest::mutable_pushservicetoken() {
  ::AcFunDanmu::Im::Basic::PushServiceToken* _msg = _internal_mutable_pushservicetoken();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.RegisterRequest.pushServiceToken)
  return _msg;
}
inline void RegisterRequest::set_allocated_pushservicetoken(::AcFunDanmu::Im::Basic::PushServiceToken* pushservicetoken) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pushservicetoken_);
  }
  if (pushservicetoken) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pushservicetoken));
    if (message_arena != submessage_arena) {
      pushservicetoken = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pushservicetoken, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pushservicetoken_ = pushservicetoken;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.RegisterRequest.pushServiceToken)
}

// int64 instanceId = 8;
inline void RegisterRequest::clear_instanceid() {
  _impl_.instanceid_ = int64_t{0};
}
inline int64_t RegisterRequest::_internal_instanceid() const {
  return _impl_.instanceid_;
}
inline int64_t RegisterRequest::instanceid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.RegisterRequest.instanceId)
  return _internal_instanceid();
}
inline void RegisterRequest::_internal_set_instanceid(int64_t value) {
  
  _impl_.instanceid_ = value;
}
inline void RegisterRequest::set_instanceid(int64_t value) {
  _internal_set_instanceid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.RegisterRequest.instanceId)
}

// repeated .AcFunDanmu.Im.Basic.PushServiceToken pushServiceTokenList = 9;
inline int RegisterRequest::_internal_pushservicetokenlist_size() const {
  return _impl_.pushservicetokenlist_.size();
}
inline int RegisterRequest::pushservicetokenlist_size() const {
  return _internal_pushservicetokenlist_size();
}
inline ::AcFunDanmu::Im::Basic::PushServiceToken* RegisterRequest::mutable_pushservicetokenlist(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.RegisterRequest.pushServiceTokenList)
  return _impl_.pushservicetokenlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic::PushServiceToken >*
RegisterRequest::mutable_pushservicetokenlist() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Basic.RegisterRequest.pushServiceTokenList)
  return &_impl_.pushservicetokenlist_;
}
inline const ::AcFunDanmu::Im::Basic::PushServiceToken& RegisterRequest::_internal_pushservicetokenlist(int index) const {
  return _impl_.pushservicetokenlist_.Get(index);
}
inline const ::AcFunDanmu::Im::Basic::PushServiceToken& RegisterRequest::pushservicetokenlist(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.RegisterRequest.pushServiceTokenList)
  return _internal_pushservicetokenlist(index);
}
inline ::AcFunDanmu::Im::Basic::PushServiceToken* RegisterRequest::_internal_add_pushservicetokenlist() {
  return _impl_.pushservicetokenlist_.Add();
}
inline ::AcFunDanmu::Im::Basic::PushServiceToken* RegisterRequest::add_pushservicetokenlist() {
  ::AcFunDanmu::Im::Basic::PushServiceToken* _add = _internal_add_pushservicetokenlist();
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Basic.RegisterRequest.pushServiceTokenList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic::PushServiceToken >&
RegisterRequest::pushservicetokenlist() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Basic.RegisterRequest.pushServiceTokenList)
  return _impl_.pushservicetokenlist_;
}

// int32 keepaliveIntervalSec = 10;
inline void RegisterRequest::clear_keepaliveintervalsec() {
  _impl_.keepaliveintervalsec_ = 0;
}
inline int32_t RegisterRequest::_internal_keepaliveintervalsec() const {
  return _impl_.keepaliveintervalsec_;
}
inline int32_t RegisterRequest::keepaliveintervalsec() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.RegisterRequest.keepaliveIntervalSec)
  return _internal_keepaliveintervalsec();
}
inline void RegisterRequest::_internal_set_keepaliveintervalsec(int32_t value) {
  
  _impl_.keepaliveintervalsec_ = value;
}
inline void RegisterRequest::set_keepaliveintervalsec(int32_t value) {
  _internal_set_keepaliveintervalsec(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.RegisterRequest.keepaliveIntervalSec)
}

// .AcFunDanmu.Im.Basic.ZtCommonInfo ztCommonInfo = 11;
inline bool RegisterRequest::_internal_has_ztcommoninfo() const {
  return this != internal_default_instance() && _impl_.ztcommoninfo_ != nullptr;
}
inline bool RegisterRequest::has_ztcommoninfo() const {
  return _internal_has_ztcommoninfo();
}
inline const ::AcFunDanmu::Im::Basic::ZtCommonInfo& RegisterRequest::_internal_ztcommoninfo() const {
  const ::AcFunDanmu::Im::Basic::ZtCommonInfo* p = _impl_.ztcommoninfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic::ZtCommonInfo&>(
      ::AcFunDanmu::Im::Basic::_ZtCommonInfo_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic::ZtCommonInfo& RegisterRequest::ztcommoninfo() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.RegisterRequest.ztCommonInfo)
  return _internal_ztcommoninfo();
}
inline void RegisterRequest::unsafe_arena_set_allocated_ztcommoninfo(
    ::AcFunDanmu::Im::Basic::ZtCommonInfo* ztcommoninfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ztcommoninfo_);
  }
  _impl_.ztcommoninfo_ = ztcommoninfo;
  if (ztcommoninfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Basic.RegisterRequest.ztCommonInfo)
}
inline ::AcFunDanmu::Im::Basic::ZtCommonInfo* RegisterRequest::release_ztcommoninfo() {
  
  ::AcFunDanmu::Im::Basic::ZtCommonInfo* temp = _impl_.ztcommoninfo_;
  _impl_.ztcommoninfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AcFunDanmu::Im::Basic::ZtCommonInfo* RegisterRequest::unsafe_arena_release_ztcommoninfo() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.RegisterRequest.ztCommonInfo)
  
  ::AcFunDanmu::Im::Basic::ZtCommonInfo* temp = _impl_.ztcommoninfo_;
  _impl_.ztcommoninfo_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic::ZtCommonInfo* RegisterRequest::_internal_mutable_ztcommoninfo() {
  
  if (_impl_.ztcommoninfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic::ZtCommonInfo>(GetArenaForAllocation());
    _impl_.ztcommoninfo_ = p;
  }
  return _impl_.ztcommoninfo_;
}
inline ::AcFunDanmu::Im::Basic::ZtCommonInfo* RegisterRequest::mutable_ztcommoninfo() {
  ::AcFunDanmu::Im::Basic::ZtCommonInfo* _msg = _internal_mutable_ztcommoninfo();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.RegisterRequest.ztCommonInfo)
  return _msg;
}
inline void RegisterRequest::set_allocated_ztcommoninfo(::AcFunDanmu::Im::Basic::ZtCommonInfo* ztcommoninfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ztcommoninfo_);
  }
  if (ztcommoninfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ztcommoninfo));
    if (message_arena != submessage_arena) {
      ztcommoninfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ztcommoninfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ztcommoninfo_ = ztcommoninfo;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.RegisterRequest.ztCommonInfo)
}

// bool ipv6Available = 12;
inline void RegisterRequest::clear_ipv6available() {
  _impl_.ipv6available_ = false;
}
inline bool RegisterRequest::_internal_ipv6available() const {
  return _impl_.ipv6available_;
}
inline bool RegisterRequest::ipv6available() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.RegisterRequest.ipv6Available)
  return _internal_ipv6available();
}
inline void RegisterRequest::_internal_set_ipv6available(bool value) {
  
  _impl_.ipv6available_ = value;
}
inline void RegisterRequest::set_ipv6available(bool value) {
  _internal_set_ipv6available(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.RegisterRequest.ipv6Available)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Basic
}  // namespace Im
}  // namespace AcFunDanmu

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::AcFunDanmu::Im::Basic::RegisterRequest_PresenceStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::Im::Basic::RegisterRequest_PresenceStatus>() {
  return ::AcFunDanmu::Im::Basic::RegisterRequest_PresenceStatus_descriptor();
}
template <> struct is_proto_enum< ::AcFunDanmu::Im::Basic::RegisterRequest_ActiveStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::Im::Basic::RegisterRequest_ActiveStatus>() {
  return ::AcFunDanmu::Im::Basic::RegisterRequest_ActiveStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_RegisterRequest_2eproto
