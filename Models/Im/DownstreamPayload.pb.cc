// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DownstreamPayload.proto

#include "DownstreamPayload.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace AcFunDanmu {
namespace Im {
namespace Basic {
PROTOBUF_CONSTEXPR DownstreamPayload::DownstreamPayload(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.command_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.payloaddata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.errormsg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.errordata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.subbiz_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.seqid_)*/int64_t{0}
  , /*decltype(_impl_.klinkpushid_)*/int64_t{0}
  , /*decltype(_impl_.errorcode_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DownstreamPayloadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DownstreamPayloadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DownstreamPayloadDefaultTypeInternal() {}
  union {
    DownstreamPayload _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DownstreamPayloadDefaultTypeInternal _DownstreamPayload_default_instance_;
}  // namespace Basic
}  // namespace Im
}  // namespace AcFunDanmu
static ::_pb::Metadata file_level_metadata_DownstreamPayload_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_DownstreamPayload_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_DownstreamPayload_2eproto = nullptr;

const uint32_t TableStruct_DownstreamPayload_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::DownstreamPayload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::DownstreamPayload, _impl_.command_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::DownstreamPayload, _impl_.seqid_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::DownstreamPayload, _impl_.errorcode_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::DownstreamPayload, _impl_.payloaddata_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::DownstreamPayload, _impl_.errormsg_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::DownstreamPayload, _impl_.errordata_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::DownstreamPayload, _impl_.subbiz_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::DownstreamPayload, _impl_.klinkpushid_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::AcFunDanmu::Im::Basic::DownstreamPayload)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::AcFunDanmu::Im::Basic::_DownstreamPayload_default_instance_._instance,
};

const char descriptor_table_protodef_DownstreamPayload_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027DownstreamPayload.proto\022\023AcFunDanmu.Im"
  ".Basic\"\245\001\n\021DownstreamPayload\022\017\n\007command\030"
  "\001 \001(\t\022\r\n\005seqId\030\002 \001(\003\022\021\n\terrorCode\030\003 \001(\005\022"
  "\023\n\013payloadData\030\004 \001(\014\022\020\n\010errorMsg\030\005 \001(\t\022\021"
  "\n\terrorData\030\006 \001(\014\022\016\n\006subBiz\030\007 \001(\t\022\023\n\013kli"
  "nkPushId\030\010 \001(\003b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_DownstreamPayload_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_DownstreamPayload_2eproto = {
    false, false, 222, descriptor_table_protodef_DownstreamPayload_2eproto,
    "DownstreamPayload.proto",
    &descriptor_table_DownstreamPayload_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_DownstreamPayload_2eproto::offsets,
    file_level_metadata_DownstreamPayload_2eproto, file_level_enum_descriptors_DownstreamPayload_2eproto,
    file_level_service_descriptors_DownstreamPayload_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_DownstreamPayload_2eproto_getter() {
  return &descriptor_table_DownstreamPayload_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_DownstreamPayload_2eproto(&descriptor_table_DownstreamPayload_2eproto);
namespace AcFunDanmu {
namespace Im {
namespace Basic {

// ===================================================================

class DownstreamPayload::_Internal {
 public:
};

DownstreamPayload::DownstreamPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.Im.Basic.DownstreamPayload)
}
DownstreamPayload::DownstreamPayload(const DownstreamPayload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DownstreamPayload* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.command_){}
    , decltype(_impl_.payloaddata_){}
    , decltype(_impl_.errormsg_){}
    , decltype(_impl_.errordata_){}
    , decltype(_impl_.subbiz_){}
    , decltype(_impl_.seqid_){}
    , decltype(_impl_.klinkpushid_){}
    , decltype(_impl_.errorcode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.command_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.command_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_command().empty()) {
    _this->_impl_.command_.Set(from._internal_command(), 
      _this->GetArenaForAllocation());
  }
  _impl_.payloaddata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payloaddata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payloaddata().empty()) {
    _this->_impl_.payloaddata_.Set(from._internal_payloaddata(), 
      _this->GetArenaForAllocation());
  }
  _impl_.errormsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errormsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_errormsg().empty()) {
    _this->_impl_.errormsg_.Set(from._internal_errormsg(), 
      _this->GetArenaForAllocation());
  }
  _impl_.errordata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errordata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_errordata().empty()) {
    _this->_impl_.errordata_.Set(from._internal_errordata(), 
      _this->GetArenaForAllocation());
  }
  _impl_.subbiz_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subbiz_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subbiz().empty()) {
    _this->_impl_.subbiz_.Set(from._internal_subbiz(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.seqid_, &from._impl_.seqid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.errorcode_) -
    reinterpret_cast<char*>(&_impl_.seqid_)) + sizeof(_impl_.errorcode_));
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.Im.Basic.DownstreamPayload)
}

inline void DownstreamPayload::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.command_){}
    , decltype(_impl_.payloaddata_){}
    , decltype(_impl_.errormsg_){}
    , decltype(_impl_.errordata_){}
    , decltype(_impl_.subbiz_){}
    , decltype(_impl_.seqid_){int64_t{0}}
    , decltype(_impl_.klinkpushid_){int64_t{0}}
    , decltype(_impl_.errorcode_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.command_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.command_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.payloaddata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payloaddata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.errormsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errormsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.errordata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errordata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subbiz_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subbiz_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DownstreamPayload::~DownstreamPayload() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.Im.Basic.DownstreamPayload)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DownstreamPayload::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.command_.Destroy();
  _impl_.payloaddata_.Destroy();
  _impl_.errormsg_.Destroy();
  _impl_.errordata_.Destroy();
  _impl_.subbiz_.Destroy();
}

void DownstreamPayload::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DownstreamPayload::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.Im.Basic.DownstreamPayload)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.command_.ClearToEmpty();
  _impl_.payloaddata_.ClearToEmpty();
  _impl_.errormsg_.ClearToEmpty();
  _impl_.errordata_.ClearToEmpty();
  _impl_.subbiz_.ClearToEmpty();
  ::memset(&_impl_.seqid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.errorcode_) -
      reinterpret_cast<char*>(&_impl_.seqid_)) + sizeof(_impl_.errorcode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DownstreamPayload::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_command();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Basic.DownstreamPayload.command"));
        } else
          goto handle_unusual;
        continue;
      // int64 seqId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.seqid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 errorCode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.errorcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes payloadData = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_payloaddata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string errorMsg = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_errormsg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Basic.DownstreamPayload.errorMsg"));
        } else
          goto handle_unusual;
        continue;
      // bytes errorData = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_errordata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string subBiz = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_subbiz();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Basic.DownstreamPayload.subBiz"));
        } else
          goto handle_unusual;
        continue;
      // int64 klinkPushId = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.klinkpushid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DownstreamPayload::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.Im.Basic.DownstreamPayload)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string command = 1;
  if (!this->_internal_command().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_command().data(), static_cast<int>(this->_internal_command().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Basic.DownstreamPayload.command");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_command(), target);
  }

  // int64 seqId = 2;
  if (this->_internal_seqid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_seqid(), target);
  }

  // int32 errorCode = 3;
  if (this->_internal_errorcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_errorcode(), target);
  }

  // bytes payloadData = 4;
  if (!this->_internal_payloaddata().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_payloaddata(), target);
  }

  // string errorMsg = 5;
  if (!this->_internal_errormsg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errormsg().data(), static_cast<int>(this->_internal_errormsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Basic.DownstreamPayload.errorMsg");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_errormsg(), target);
  }

  // bytes errorData = 6;
  if (!this->_internal_errordata().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_errordata(), target);
  }

  // string subBiz = 7;
  if (!this->_internal_subbiz().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subbiz().data(), static_cast<int>(this->_internal_subbiz().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Basic.DownstreamPayload.subBiz");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_subbiz(), target);
  }

  // int64 klinkPushId = 8;
  if (this->_internal_klinkpushid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_klinkpushid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.Im.Basic.DownstreamPayload)
  return target;
}

size_t DownstreamPayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.Im.Basic.DownstreamPayload)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string command = 1;
  if (!this->_internal_command().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_command());
  }

  // bytes payloadData = 4;
  if (!this->_internal_payloaddata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payloaddata());
  }

  // string errorMsg = 5;
  if (!this->_internal_errormsg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errormsg());
  }

  // bytes errorData = 6;
  if (!this->_internal_errordata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_errordata());
  }

  // string subBiz = 7;
  if (!this->_internal_subbiz().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subbiz());
  }

  // int64 seqId = 2;
  if (this->_internal_seqid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqid());
  }

  // int64 klinkPushId = 8;
  if (this->_internal_klinkpushid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_klinkpushid());
  }

  // int32 errorCode = 3;
  if (this->_internal_errorcode() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_errorcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DownstreamPayload::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DownstreamPayload::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DownstreamPayload::GetClassData() const { return &_class_data_; }


void DownstreamPayload::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DownstreamPayload*>(&to_msg);
  auto& from = static_cast<const DownstreamPayload&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.Im.Basic.DownstreamPayload)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_command().empty()) {
    _this->_internal_set_command(from._internal_command());
  }
  if (!from._internal_payloaddata().empty()) {
    _this->_internal_set_payloaddata(from._internal_payloaddata());
  }
  if (!from._internal_errormsg().empty()) {
    _this->_internal_set_errormsg(from._internal_errormsg());
  }
  if (!from._internal_errordata().empty()) {
    _this->_internal_set_errordata(from._internal_errordata());
  }
  if (!from._internal_subbiz().empty()) {
    _this->_internal_set_subbiz(from._internal_subbiz());
  }
  if (from._internal_seqid() != 0) {
    _this->_internal_set_seqid(from._internal_seqid());
  }
  if (from._internal_klinkpushid() != 0) {
    _this->_internal_set_klinkpushid(from._internal_klinkpushid());
  }
  if (from._internal_errorcode() != 0) {
    _this->_internal_set_errorcode(from._internal_errorcode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DownstreamPayload::CopyFrom(const DownstreamPayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.Im.Basic.DownstreamPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownstreamPayload::IsInitialized() const {
  return true;
}

void DownstreamPayload::InternalSwap(DownstreamPayload* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.command_, lhs_arena,
      &other->_impl_.command_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.payloaddata_, lhs_arena,
      &other->_impl_.payloaddata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.errormsg_, lhs_arena,
      &other->_impl_.errormsg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.errordata_, lhs_arena,
      &other->_impl_.errordata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subbiz_, lhs_arena,
      &other->_impl_.subbiz_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DownstreamPayload, _impl_.errorcode_)
      + sizeof(DownstreamPayload::_impl_.errorcode_)
      - PROTOBUF_FIELD_OFFSET(DownstreamPayload, _impl_.seqid_)>(
          reinterpret_cast<char*>(&_impl_.seqid_),
          reinterpret_cast<char*>(&other->_impl_.seqid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DownstreamPayload::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DownstreamPayload_2eproto_getter, &descriptor_table_DownstreamPayload_2eproto_once,
      file_level_metadata_DownstreamPayload_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Basic
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AcFunDanmu::Im::Basic::DownstreamPayload*
Arena::CreateMaybeMessage< ::AcFunDanmu::Im::Basic::DownstreamPayload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::Im::Basic::DownstreamPayload >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
