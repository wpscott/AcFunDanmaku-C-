// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SessionEventReportRequest.proto

#include "SessionEventReportRequest.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace AcFunDanmu {
namespace Im {
namespace Message {
PROTOBUF_CONSTEXPR SessionEventReportRequest::SessionEventReportRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.event_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct SessionEventReportRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SessionEventReportRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SessionEventReportRequestDefaultTypeInternal() {}
  union {
    SessionEventReportRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SessionEventReportRequestDefaultTypeInternal _SessionEventReportRequest_default_instance_;
}  // namespace Message
}  // namespace Im
}  // namespace AcFunDanmu
static ::_pb::Metadata file_level_metadata_SessionEventReportRequest_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_SessionEventReportRequest_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_SessionEventReportRequest_2eproto = nullptr;

const uint32_t TableStruct_SessionEventReportRequest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::SessionEventReportRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::SessionEventReportRequest, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::SessionEventReportRequest, _impl_.event_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::AcFunDanmu::Im::Message::SessionEventReportRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::AcFunDanmu::Im::Message::_SessionEventReportRequest_default_instance_._instance,
};

const char descriptor_table_protodef_SessionEventReportRequest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037SessionEventReportRequest.proto\022\025AcFun"
  "Danmu.Im.Message\032\022EnterSession.proto\032\022Le"
  "aveSession.proto\"\236\001\n\031SessionEventReportR"
  "equest\022;\n\014enterSession\030\001 \001(\0132#.AcFunDanm"
  "u.Im.Message.EnterSessionH\000\022;\n\014leaveSess"
  "ion\030\002 \001(\0132#.AcFunDanmu.Im.Message.LeaveS"
  "essionH\000B\007\n\005eventb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_SessionEventReportRequest_2eproto_deps[2] = {
  &::descriptor_table_EnterSession_2eproto,
  &::descriptor_table_LeaveSession_2eproto,
};
static ::_pbi::once_flag descriptor_table_SessionEventReportRequest_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_SessionEventReportRequest_2eproto = {
    false, false, 265, descriptor_table_protodef_SessionEventReportRequest_2eproto,
    "SessionEventReportRequest.proto",
    &descriptor_table_SessionEventReportRequest_2eproto_once, descriptor_table_SessionEventReportRequest_2eproto_deps, 2, 1,
    schemas, file_default_instances, TableStruct_SessionEventReportRequest_2eproto::offsets,
    file_level_metadata_SessionEventReportRequest_2eproto, file_level_enum_descriptors_SessionEventReportRequest_2eproto,
    file_level_service_descriptors_SessionEventReportRequest_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_SessionEventReportRequest_2eproto_getter() {
  return &descriptor_table_SessionEventReportRequest_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_SessionEventReportRequest_2eproto(&descriptor_table_SessionEventReportRequest_2eproto);
namespace AcFunDanmu {
namespace Im {
namespace Message {

// ===================================================================

class SessionEventReportRequest::_Internal {
 public:
  static const ::AcFunDanmu::Im::Message::EnterSession& entersession(const SessionEventReportRequest* msg);
  static const ::AcFunDanmu::Im::Message::LeaveSession& leavesession(const SessionEventReportRequest* msg);
};

const ::AcFunDanmu::Im::Message::EnterSession&
SessionEventReportRequest::_Internal::entersession(const SessionEventReportRequest* msg) {
  return *msg->_impl_.event_.entersession_;
}
const ::AcFunDanmu::Im::Message::LeaveSession&
SessionEventReportRequest::_Internal::leavesession(const SessionEventReportRequest* msg) {
  return *msg->_impl_.event_.leavesession_;
}
void SessionEventReportRequest::set_allocated_entersession(::AcFunDanmu::Im::Message::EnterSession* entersession) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (entersession) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(entersession));
    if (message_arena != submessage_arena) {
      entersession = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entersession, submessage_arena);
    }
    set_has_entersession();
    _impl_.event_.entersession_ = entersession;
  }
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Message.SessionEventReportRequest.enterSession)
}
void SessionEventReportRequest::clear_entersession() {
  if (_internal_has_entersession()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.entersession_;
    }
    clear_has_event();
  }
}
void SessionEventReportRequest::set_allocated_leavesession(::AcFunDanmu::Im::Message::LeaveSession* leavesession) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (leavesession) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leavesession));
    if (message_arena != submessage_arena) {
      leavesession = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leavesession, submessage_arena);
    }
    set_has_leavesession();
    _impl_.event_.leavesession_ = leavesession;
  }
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Message.SessionEventReportRequest.leaveSession)
}
void SessionEventReportRequest::clear_leavesession() {
  if (_internal_has_leavesession()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.leavesession_;
    }
    clear_has_event();
  }
}
SessionEventReportRequest::SessionEventReportRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.Im.Message.SessionEventReportRequest)
}
SessionEventReportRequest::SessionEventReportRequest(const SessionEventReportRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SessionEventReportRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.event_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_event();
  switch (from.event_case()) {
    case kEnterSession: {
      _this->_internal_mutable_entersession()->::AcFunDanmu::Im::Message::EnterSession::MergeFrom(
          from._internal_entersession());
      break;
    }
    case kLeaveSession: {
      _this->_internal_mutable_leavesession()->::AcFunDanmu::Im::Message::LeaveSession::MergeFrom(
          from._internal_leavesession());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.Im.Message.SessionEventReportRequest)
}

inline void SessionEventReportRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.event_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_event();
}

SessionEventReportRequest::~SessionEventReportRequest() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.Im.Message.SessionEventReportRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SessionEventReportRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_event()) {
    clear_event();
  }
}

void SessionEventReportRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SessionEventReportRequest::clear_event() {
// @@protoc_insertion_point(one_of_clear_start:AcFunDanmu.Im.Message.SessionEventReportRequest)
  switch (event_case()) {
    case kEnterSession: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.entersession_;
      }
      break;
    }
    case kLeaveSession: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.leavesession_;
      }
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = EVENT_NOT_SET;
}


void SessionEventReportRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.Im.Message.SessionEventReportRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_event();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionEventReportRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .AcFunDanmu.Im.Message.EnterSession enterSession = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_entersession(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Message.LeaveSession leaveSession = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_leavesession(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SessionEventReportRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.Im.Message.SessionEventReportRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .AcFunDanmu.Im.Message.EnterSession enterSession = 1;
  if (_internal_has_entersession()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::entersession(this),
        _Internal::entersession(this).GetCachedSize(), target, stream);
  }

  // .AcFunDanmu.Im.Message.LeaveSession leaveSession = 2;
  if (_internal_has_leavesession()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::leavesession(this),
        _Internal::leavesession(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.Im.Message.SessionEventReportRequest)
  return target;
}

size_t SessionEventReportRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.Im.Message.SessionEventReportRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (event_case()) {
    // .AcFunDanmu.Im.Message.EnterSession enterSession = 1;
    case kEnterSession: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.entersession_);
      break;
    }
    // .AcFunDanmu.Im.Message.LeaveSession leaveSession = 2;
    case kLeaveSession: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.leavesession_);
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SessionEventReportRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SessionEventReportRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SessionEventReportRequest::GetClassData() const { return &_class_data_; }


void SessionEventReportRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SessionEventReportRequest*>(&to_msg);
  auto& from = static_cast<const SessionEventReportRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.Im.Message.SessionEventReportRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.event_case()) {
    case kEnterSession: {
      _this->_internal_mutable_entersession()->::AcFunDanmu::Im::Message::EnterSession::MergeFrom(
          from._internal_entersession());
      break;
    }
    case kLeaveSession: {
      _this->_internal_mutable_leavesession()->::AcFunDanmu::Im::Message::LeaveSession::MergeFrom(
          from._internal_leavesession());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SessionEventReportRequest::CopyFrom(const SessionEventReportRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.Im.Message.SessionEventReportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionEventReportRequest::IsInitialized() const {
  return true;
}

void SessionEventReportRequest::InternalSwap(SessionEventReportRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.event_, other->_impl_.event_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionEventReportRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_SessionEventReportRequest_2eproto_getter, &descriptor_table_SessionEventReportRequest_2eproto_once,
      file_level_metadata_SessionEventReportRequest_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Message
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AcFunDanmu::Im::Message::SessionEventReportRequest*
Arena::CreateMaybeMessage< ::AcFunDanmu::Im::Message::SessionEventReportRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::Im::Message::SessionEventReportRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
