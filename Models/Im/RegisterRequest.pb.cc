// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RegisterRequest.proto

#include "RegisterRequest.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace AcFunDanmu {
namespace Im {
namespace Basic {
PROTOBUF_CONSTEXPR RegisterRequest::RegisterRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pushservicetokenlist_)*/{}
  , /*decltype(_impl_.appcustomstatus_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.appinfo_)*/nullptr
  , /*decltype(_impl_.deviceinfo_)*/nullptr
  , /*decltype(_impl_.envinfo_)*/nullptr
  , /*decltype(_impl_.pushservicetoken_)*/nullptr
  , /*decltype(_impl_.ztcommoninfo_)*/nullptr
  , /*decltype(_impl_.presencestatus_)*/0
  , /*decltype(_impl_.appactivestatus_)*/0
  , /*decltype(_impl_.instanceid_)*/int64_t{0}
  , /*decltype(_impl_.keepaliveintervalsec_)*/0
  , /*decltype(_impl_.ipv6available_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegisterRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterRequestDefaultTypeInternal() {}
  union {
    RegisterRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterRequestDefaultTypeInternal _RegisterRequest_default_instance_;
}  // namespace Basic
}  // namespace Im
}  // namespace AcFunDanmu
static ::_pb::Metadata file_level_metadata_RegisterRequest_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_RegisterRequest_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_RegisterRequest_2eproto = nullptr;

const uint32_t TableStruct_RegisterRequest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::RegisterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::RegisterRequest, _impl_.appinfo_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::RegisterRequest, _impl_.deviceinfo_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::RegisterRequest, _impl_.envinfo_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::RegisterRequest, _impl_.presencestatus_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::RegisterRequest, _impl_.appactivestatus_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::RegisterRequest, _impl_.appcustomstatus_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::RegisterRequest, _impl_.pushservicetoken_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::RegisterRequest, _impl_.instanceid_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::RegisterRequest, _impl_.pushservicetokenlist_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::RegisterRequest, _impl_.keepaliveintervalsec_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::RegisterRequest, _impl_.ztcommoninfo_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::RegisterRequest, _impl_.ipv6available_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::AcFunDanmu::Im::Basic::RegisterRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::AcFunDanmu::Im::Basic::_RegisterRequest_default_instance_._instance,
};

const char descriptor_table_protodef_RegisterRequest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025RegisterRequest.proto\022\023AcFunDanmu.Im.B"
  "asic\032\rAppInfo.proto\032\020DeviceInfo.proto\032\rE"
  "nvInfo.proto\032\026PushServiceToken.proto\032\022Zt"
  "CommonInfo.proto\"\345\005\n\017RegisterRequest\022-\n\007"
  "appInfo\030\001 \001(\0132\034.AcFunDanmu.Im.Basic.AppI"
  "nfo\0223\n\ndeviceInfo\030\002 \001(\0132\037.AcFunDanmu.Im."
  "Basic.DeviceInfo\022-\n\007envInfo\030\003 \001(\0132\034.AcFu"
  "nDanmu.Im.Basic.EnvInfo\022K\n\016presenceStatu"
  "s\030\004 \001(\01623.AcFunDanmu.Im.Basic.RegisterRe"
  "quest.PresenceStatus\022J\n\017appActiveStatus\030"
  "\005 \001(\01621.AcFunDanmu.Im.Basic.RegisterRequ"
  "est.ActiveStatus\022\027\n\017appCustomStatus\030\006 \001("
  "\014\022\?\n\020pushServiceToken\030\007 \001(\0132%.AcFunDanmu"
  ".Im.Basic.PushServiceToken\022\022\n\ninstanceId"
  "\030\010 \001(\003\022C\n\024pushServiceTokenList\030\t \003(\0132%.A"
  "cFunDanmu.Im.Basic.PushServiceToken\022\034\n\024k"
  "eepaliveIntervalSec\030\n \001(\005\0227\n\014ztCommonInf"
  "o\030\013 \001(\0132!.AcFunDanmu.Im.Basic.ZtCommonIn"
  "fo\022\025\n\ripv6Available\030\014 \001(\010\";\n\016PresenceSta"
  "tus\022\024\n\020kPresenceOffline\020\000\022\023\n\017kPresenceOn"
  "line\020\001\"H\n\014ActiveStatus\022\014\n\010kInvalid\020\000\022\024\n\020"
  "kAppInForeground\020\001\022\024\n\020kAppInBackground\020\002"
  "b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_RegisterRequest_2eproto_deps[5] = {
  &::descriptor_table_AppInfo_2eproto,
  &::descriptor_table_DeviceInfo_2eproto,
  &::descriptor_table_EnvInfo_2eproto,
  &::descriptor_table_PushServiceToken_2eproto,
  &::descriptor_table_ZtCommonInfo_2eproto,
};
static ::_pbi::once_flag descriptor_table_RegisterRequest_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_RegisterRequest_2eproto = {
    false, false, 888, descriptor_table_protodef_RegisterRequest_2eproto,
    "RegisterRequest.proto",
    &descriptor_table_RegisterRequest_2eproto_once, descriptor_table_RegisterRequest_2eproto_deps, 5, 1,
    schemas, file_default_instances, TableStruct_RegisterRequest_2eproto::offsets,
    file_level_metadata_RegisterRequest_2eproto, file_level_enum_descriptors_RegisterRequest_2eproto,
    file_level_service_descriptors_RegisterRequest_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_RegisterRequest_2eproto_getter() {
  return &descriptor_table_RegisterRequest_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_RegisterRequest_2eproto(&descriptor_table_RegisterRequest_2eproto);
namespace AcFunDanmu {
namespace Im {
namespace Basic {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RegisterRequest_PresenceStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_RegisterRequest_2eproto);
  return file_level_enum_descriptors_RegisterRequest_2eproto[0];
}
bool RegisterRequest_PresenceStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr RegisterRequest_PresenceStatus RegisterRequest::kPresenceOffline;
constexpr RegisterRequest_PresenceStatus RegisterRequest::kPresenceOnline;
constexpr RegisterRequest_PresenceStatus RegisterRequest::PresenceStatus_MIN;
constexpr RegisterRequest_PresenceStatus RegisterRequest::PresenceStatus_MAX;
constexpr int RegisterRequest::PresenceStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RegisterRequest_ActiveStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_RegisterRequest_2eproto);
  return file_level_enum_descriptors_RegisterRequest_2eproto[1];
}
bool RegisterRequest_ActiveStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr RegisterRequest_ActiveStatus RegisterRequest::kInvalid;
constexpr RegisterRequest_ActiveStatus RegisterRequest::kAppInForeground;
constexpr RegisterRequest_ActiveStatus RegisterRequest::kAppInBackground;
constexpr RegisterRequest_ActiveStatus RegisterRequest::ActiveStatus_MIN;
constexpr RegisterRequest_ActiveStatus RegisterRequest::ActiveStatus_MAX;
constexpr int RegisterRequest::ActiveStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class RegisterRequest::_Internal {
 public:
  static const ::AcFunDanmu::Im::Basic::AppInfo& appinfo(const RegisterRequest* msg);
  static const ::AcFunDanmu::Im::Basic::DeviceInfo& deviceinfo(const RegisterRequest* msg);
  static const ::AcFunDanmu::Im::Basic::EnvInfo& envinfo(const RegisterRequest* msg);
  static const ::AcFunDanmu::Im::Basic::PushServiceToken& pushservicetoken(const RegisterRequest* msg);
  static const ::AcFunDanmu::Im::Basic::ZtCommonInfo& ztcommoninfo(const RegisterRequest* msg);
};

const ::AcFunDanmu::Im::Basic::AppInfo&
RegisterRequest::_Internal::appinfo(const RegisterRequest* msg) {
  return *msg->_impl_.appinfo_;
}
const ::AcFunDanmu::Im::Basic::DeviceInfo&
RegisterRequest::_Internal::deviceinfo(const RegisterRequest* msg) {
  return *msg->_impl_.deviceinfo_;
}
const ::AcFunDanmu::Im::Basic::EnvInfo&
RegisterRequest::_Internal::envinfo(const RegisterRequest* msg) {
  return *msg->_impl_.envinfo_;
}
const ::AcFunDanmu::Im::Basic::PushServiceToken&
RegisterRequest::_Internal::pushservicetoken(const RegisterRequest* msg) {
  return *msg->_impl_.pushservicetoken_;
}
const ::AcFunDanmu::Im::Basic::ZtCommonInfo&
RegisterRequest::_Internal::ztcommoninfo(const RegisterRequest* msg) {
  return *msg->_impl_.ztcommoninfo_;
}
void RegisterRequest::clear_appinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.appinfo_ != nullptr) {
    delete _impl_.appinfo_;
  }
  _impl_.appinfo_ = nullptr;
}
void RegisterRequest::clear_deviceinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.deviceinfo_ != nullptr) {
    delete _impl_.deviceinfo_;
  }
  _impl_.deviceinfo_ = nullptr;
}
void RegisterRequest::clear_envinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.envinfo_ != nullptr) {
    delete _impl_.envinfo_;
  }
  _impl_.envinfo_ = nullptr;
}
void RegisterRequest::clear_pushservicetoken() {
  if (GetArenaForAllocation() == nullptr && _impl_.pushservicetoken_ != nullptr) {
    delete _impl_.pushservicetoken_;
  }
  _impl_.pushservicetoken_ = nullptr;
}
void RegisterRequest::clear_pushservicetokenlist() {
  _impl_.pushservicetokenlist_.Clear();
}
void RegisterRequest::clear_ztcommoninfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.ztcommoninfo_ != nullptr) {
    delete _impl_.ztcommoninfo_;
  }
  _impl_.ztcommoninfo_ = nullptr;
}
RegisterRequest::RegisterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.Im.Basic.RegisterRequest)
}
RegisterRequest::RegisterRequest(const RegisterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisterRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pushservicetokenlist_){from._impl_.pushservicetokenlist_}
    , decltype(_impl_.appcustomstatus_){}
    , decltype(_impl_.appinfo_){nullptr}
    , decltype(_impl_.deviceinfo_){nullptr}
    , decltype(_impl_.envinfo_){nullptr}
    , decltype(_impl_.pushservicetoken_){nullptr}
    , decltype(_impl_.ztcommoninfo_){nullptr}
    , decltype(_impl_.presencestatus_){}
    , decltype(_impl_.appactivestatus_){}
    , decltype(_impl_.instanceid_){}
    , decltype(_impl_.keepaliveintervalsec_){}
    , decltype(_impl_.ipv6available_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.appcustomstatus_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.appcustomstatus_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_appcustomstatus().empty()) {
    _this->_impl_.appcustomstatus_.Set(from._internal_appcustomstatus(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_appinfo()) {
    _this->_impl_.appinfo_ = new ::AcFunDanmu::Im::Basic::AppInfo(*from._impl_.appinfo_);
  }
  if (from._internal_has_deviceinfo()) {
    _this->_impl_.deviceinfo_ = new ::AcFunDanmu::Im::Basic::DeviceInfo(*from._impl_.deviceinfo_);
  }
  if (from._internal_has_envinfo()) {
    _this->_impl_.envinfo_ = new ::AcFunDanmu::Im::Basic::EnvInfo(*from._impl_.envinfo_);
  }
  if (from._internal_has_pushservicetoken()) {
    _this->_impl_.pushservicetoken_ = new ::AcFunDanmu::Im::Basic::PushServiceToken(*from._impl_.pushservicetoken_);
  }
  if (from._internal_has_ztcommoninfo()) {
    _this->_impl_.ztcommoninfo_ = new ::AcFunDanmu::Im::Basic::ZtCommonInfo(*from._impl_.ztcommoninfo_);
  }
  ::memcpy(&_impl_.presencestatus_, &from._impl_.presencestatus_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ipv6available_) -
    reinterpret_cast<char*>(&_impl_.presencestatus_)) + sizeof(_impl_.ipv6available_));
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.Im.Basic.RegisterRequest)
}

inline void RegisterRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pushservicetokenlist_){arena}
    , decltype(_impl_.appcustomstatus_){}
    , decltype(_impl_.appinfo_){nullptr}
    , decltype(_impl_.deviceinfo_){nullptr}
    , decltype(_impl_.envinfo_){nullptr}
    , decltype(_impl_.pushservicetoken_){nullptr}
    , decltype(_impl_.ztcommoninfo_){nullptr}
    , decltype(_impl_.presencestatus_){0}
    , decltype(_impl_.appactivestatus_){0}
    , decltype(_impl_.instanceid_){int64_t{0}}
    , decltype(_impl_.keepaliveintervalsec_){0}
    , decltype(_impl_.ipv6available_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.appcustomstatus_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.appcustomstatus_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RegisterRequest::~RegisterRequest() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.Im.Basic.RegisterRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisterRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pushservicetokenlist_.~RepeatedPtrField();
  _impl_.appcustomstatus_.Destroy();
  if (this != internal_default_instance()) delete _impl_.appinfo_;
  if (this != internal_default_instance()) delete _impl_.deviceinfo_;
  if (this != internal_default_instance()) delete _impl_.envinfo_;
  if (this != internal_default_instance()) delete _impl_.pushservicetoken_;
  if (this != internal_default_instance()) delete _impl_.ztcommoninfo_;
}

void RegisterRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.Im.Basic.RegisterRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pushservicetokenlist_.Clear();
  _impl_.appcustomstatus_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.appinfo_ != nullptr) {
    delete _impl_.appinfo_;
  }
  _impl_.appinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.deviceinfo_ != nullptr) {
    delete _impl_.deviceinfo_;
  }
  _impl_.deviceinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.envinfo_ != nullptr) {
    delete _impl_.envinfo_;
  }
  _impl_.envinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pushservicetoken_ != nullptr) {
    delete _impl_.pushservicetoken_;
  }
  _impl_.pushservicetoken_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.ztcommoninfo_ != nullptr) {
    delete _impl_.ztcommoninfo_;
  }
  _impl_.ztcommoninfo_ = nullptr;
  ::memset(&_impl_.presencestatus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ipv6available_) -
      reinterpret_cast<char*>(&_impl_.presencestatus_)) + sizeof(_impl_.ipv6available_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .AcFunDanmu.Im.Basic.AppInfo appInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_appinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Basic.DeviceInfo deviceInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_deviceinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Basic.EnvInfo envInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_envinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Basic.RegisterRequest.PresenceStatus presenceStatus = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_presencestatus(static_cast<::AcFunDanmu::Im::Basic::RegisterRequest_PresenceStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Basic.RegisterRequest.ActiveStatus appActiveStatus = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_appactivestatus(static_cast<::AcFunDanmu::Im::Basic::RegisterRequest_ActiveStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes appCustomStatus = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_appcustomstatus();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Basic.PushServiceToken pushServiceToken = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_pushservicetoken(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 instanceId = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.instanceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .AcFunDanmu.Im.Basic.PushServiceToken pushServiceTokenList = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pushservicetokenlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 keepaliveIntervalSec = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.keepaliveintervalsec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Basic.ZtCommonInfo ztCommonInfo = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_ztcommoninfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool ipv6Available = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.ipv6available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.Im.Basic.RegisterRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .AcFunDanmu.Im.Basic.AppInfo appInfo = 1;
  if (this->_internal_has_appinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::appinfo(this),
        _Internal::appinfo(this).GetCachedSize(), target, stream);
  }

  // .AcFunDanmu.Im.Basic.DeviceInfo deviceInfo = 2;
  if (this->_internal_has_deviceinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::deviceinfo(this),
        _Internal::deviceinfo(this).GetCachedSize(), target, stream);
  }

  // .AcFunDanmu.Im.Basic.EnvInfo envInfo = 3;
  if (this->_internal_has_envinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::envinfo(this),
        _Internal::envinfo(this).GetCachedSize(), target, stream);
  }

  // .AcFunDanmu.Im.Basic.RegisterRequest.PresenceStatus presenceStatus = 4;
  if (this->_internal_presencestatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_presencestatus(), target);
  }

  // .AcFunDanmu.Im.Basic.RegisterRequest.ActiveStatus appActiveStatus = 5;
  if (this->_internal_appactivestatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_appactivestatus(), target);
  }

  // bytes appCustomStatus = 6;
  if (!this->_internal_appcustomstatus().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_appcustomstatus(), target);
  }

  // .AcFunDanmu.Im.Basic.PushServiceToken pushServiceToken = 7;
  if (this->_internal_has_pushservicetoken()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::pushservicetoken(this),
        _Internal::pushservicetoken(this).GetCachedSize(), target, stream);
  }

  // int64 instanceId = 8;
  if (this->_internal_instanceid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_instanceid(), target);
  }

  // repeated .AcFunDanmu.Im.Basic.PushServiceToken pushServiceTokenList = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pushservicetokenlist_size()); i < n; i++) {
    const auto& repfield = this->_internal_pushservicetokenlist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 keepaliveIntervalSec = 10;
  if (this->_internal_keepaliveintervalsec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_keepaliveintervalsec(), target);
  }

  // .AcFunDanmu.Im.Basic.ZtCommonInfo ztCommonInfo = 11;
  if (this->_internal_has_ztcommoninfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::ztcommoninfo(this),
        _Internal::ztcommoninfo(this).GetCachedSize(), target, stream);
  }

  // bool ipv6Available = 12;
  if (this->_internal_ipv6available() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_ipv6available(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.Im.Basic.RegisterRequest)
  return target;
}

size_t RegisterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.Im.Basic.RegisterRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .AcFunDanmu.Im.Basic.PushServiceToken pushServiceTokenList = 9;
  total_size += 1UL * this->_internal_pushservicetokenlist_size();
  for (const auto& msg : this->_impl_.pushservicetokenlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes appCustomStatus = 6;
  if (!this->_internal_appcustomstatus().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_appcustomstatus());
  }

  // .AcFunDanmu.Im.Basic.AppInfo appInfo = 1;
  if (this->_internal_has_appinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.appinfo_);
  }

  // .AcFunDanmu.Im.Basic.DeviceInfo deviceInfo = 2;
  if (this->_internal_has_deviceinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.deviceinfo_);
  }

  // .AcFunDanmu.Im.Basic.EnvInfo envInfo = 3;
  if (this->_internal_has_envinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.envinfo_);
  }

  // .AcFunDanmu.Im.Basic.PushServiceToken pushServiceToken = 7;
  if (this->_internal_has_pushservicetoken()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pushservicetoken_);
  }

  // .AcFunDanmu.Im.Basic.ZtCommonInfo ztCommonInfo = 11;
  if (this->_internal_has_ztcommoninfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ztcommoninfo_);
  }

  // .AcFunDanmu.Im.Basic.RegisterRequest.PresenceStatus presenceStatus = 4;
  if (this->_internal_presencestatus() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_presencestatus());
  }

  // .AcFunDanmu.Im.Basic.RegisterRequest.ActiveStatus appActiveStatus = 5;
  if (this->_internal_appactivestatus() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_appactivestatus());
  }

  // int64 instanceId = 8;
  if (this->_internal_instanceid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_instanceid());
  }

  // int32 keepaliveIntervalSec = 10;
  if (this->_internal_keepaliveintervalsec() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_keepaliveintervalsec());
  }

  // bool ipv6Available = 12;
  if (this->_internal_ipv6available() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisterRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterRequest::GetClassData() const { return &_class_data_; }


void RegisterRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisterRequest*>(&to_msg);
  auto& from = static_cast<const RegisterRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.Im.Basic.RegisterRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.pushservicetokenlist_.MergeFrom(from._impl_.pushservicetokenlist_);
  if (!from._internal_appcustomstatus().empty()) {
    _this->_internal_set_appcustomstatus(from._internal_appcustomstatus());
  }
  if (from._internal_has_appinfo()) {
    _this->_internal_mutable_appinfo()->::AcFunDanmu::Im::Basic::AppInfo::MergeFrom(
        from._internal_appinfo());
  }
  if (from._internal_has_deviceinfo()) {
    _this->_internal_mutable_deviceinfo()->::AcFunDanmu::Im::Basic::DeviceInfo::MergeFrom(
        from._internal_deviceinfo());
  }
  if (from._internal_has_envinfo()) {
    _this->_internal_mutable_envinfo()->::AcFunDanmu::Im::Basic::EnvInfo::MergeFrom(
        from._internal_envinfo());
  }
  if (from._internal_has_pushservicetoken()) {
    _this->_internal_mutable_pushservicetoken()->::AcFunDanmu::Im::Basic::PushServiceToken::MergeFrom(
        from._internal_pushservicetoken());
  }
  if (from._internal_has_ztcommoninfo()) {
    _this->_internal_mutable_ztcommoninfo()->::AcFunDanmu::Im::Basic::ZtCommonInfo::MergeFrom(
        from._internal_ztcommoninfo());
  }
  if (from._internal_presencestatus() != 0) {
    _this->_internal_set_presencestatus(from._internal_presencestatus());
  }
  if (from._internal_appactivestatus() != 0) {
    _this->_internal_set_appactivestatus(from._internal_appactivestatus());
  }
  if (from._internal_instanceid() != 0) {
    _this->_internal_set_instanceid(from._internal_instanceid());
  }
  if (from._internal_keepaliveintervalsec() != 0) {
    _this->_internal_set_keepaliveintervalsec(from._internal_keepaliveintervalsec());
  }
  if (from._internal_ipv6available() != 0) {
    _this->_internal_set_ipv6available(from._internal_ipv6available());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterRequest::CopyFrom(const RegisterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.Im.Basic.RegisterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterRequest::IsInitialized() const {
  return true;
}

void RegisterRequest::InternalSwap(RegisterRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.pushservicetokenlist_.InternalSwap(&other->_impl_.pushservicetokenlist_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.appcustomstatus_, lhs_arena,
      &other->_impl_.appcustomstatus_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegisterRequest, _impl_.ipv6available_)
      + sizeof(RegisterRequest::_impl_.ipv6available_)
      - PROTOBUF_FIELD_OFFSET(RegisterRequest, _impl_.appinfo_)>(
          reinterpret_cast<char*>(&_impl_.appinfo_),
          reinterpret_cast<char*>(&other->_impl_.appinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_RegisterRequest_2eproto_getter, &descriptor_table_RegisterRequest_2eproto_once,
      file_level_metadata_RegisterRequest_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Basic
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AcFunDanmu::Im::Basic::RegisterRequest*
Arena::CreateMaybeMessage< ::AcFunDanmu::Im::Basic::RegisterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::Im::Basic::RegisterRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
