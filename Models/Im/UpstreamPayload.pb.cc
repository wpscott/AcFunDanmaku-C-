// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UpstreamPayload.proto

#include "UpstreamPayload.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace AcFunDanmu {
namespace Im {
namespace Basic {
PROTOBUF_CONSTEXPR UpstreamPayload::UpstreamPayload(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.command_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.payloaddata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.subbiz_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.kpn_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.laneid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.userinstance_)*/nullptr
  , /*decltype(_impl_.settinginfo_)*/nullptr
  , /*decltype(_impl_.requestbasicinfo_)*/nullptr
  , /*decltype(_impl_.frontendinfo_)*/nullptr
  , /*decltype(_impl_.seqid_)*/int64_t{0}
  , /*decltype(_impl_.retrycount_)*/0u
  , /*decltype(_impl_.errorcode_)*/0
  , /*decltype(_impl_.anonymouseuser_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpstreamPayloadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpstreamPayloadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpstreamPayloadDefaultTypeInternal() {}
  union {
    UpstreamPayload _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpstreamPayloadDefaultTypeInternal _UpstreamPayload_default_instance_;
}  // namespace Basic
}  // namespace Im
}  // namespace AcFunDanmu
static ::_pb::Metadata file_level_metadata_UpstreamPayload_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_UpstreamPayload_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_UpstreamPayload_2eproto = nullptr;

const uint32_t TableStruct_UpstreamPayload_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::UpstreamPayload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::UpstreamPayload, _impl_.command_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::UpstreamPayload, _impl_.seqid_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::UpstreamPayload, _impl_.retrycount_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::UpstreamPayload, _impl_.payloaddata_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::UpstreamPayload, _impl_.userinstance_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::UpstreamPayload, _impl_.errorcode_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::UpstreamPayload, _impl_.settinginfo_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::UpstreamPayload, _impl_.requestbasicinfo_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::UpstreamPayload, _impl_.subbiz_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::UpstreamPayload, _impl_.frontendinfo_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::UpstreamPayload, _impl_.kpn_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::UpstreamPayload, _impl_.anonymouseuser_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::UpstreamPayload, _impl_.laneid_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::AcFunDanmu::Im::Basic::UpstreamPayload)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::AcFunDanmu::Im::Basic::_UpstreamPayload_default_instance_._instance,
};

const char descriptor_table_protodef_UpstreamPayload_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025UpstreamPayload.proto\022\023AcFunDanmu.Im.B"
  "asic\032\022FrontendInfo.proto\032\026RequsetBasicIn"
  "fo.proto\032\021SettingInfo.proto\032\022UserInstanc"
  "e.proto\"\234\003\n\017UpstreamPayload\022\017\n\007command\030\001"
  " \001(\t\022\r\n\005seqId\030\002 \001(\003\022\022\n\nretryCount\030\003 \001(\r\022"
  "\023\n\013payloadData\030\004 \001(\014\0227\n\014userInstance\030\005 \001"
  "(\0132!.AcFunDanmu.Im.Basic.UserInstance\022\021\n"
  "\terrorCode\030\006 \001(\005\0225\n\013settingInfo\030\007 \001(\0132 ."
  "AcFunDanmu.Im.Basic.SettingInfo\022\?\n\020reque"
  "stBasicInfo\030\010 \001(\0132%.AcFunDanmu.Im.Basic."
  "RequsetBasicInfo\022\016\n\006subBiz\030\t \001(\t\0227\n\014fron"
  "tendInfo\030\n \001(\0132!.AcFunDanmu.Im.Basic.Fro"
  "ntendInfo\022\013\n\003kpn\030\013 \001(\t\022\026\n\016anonymouseUser"
  "\030\014 \001(\010\022\016\n\006laneId\030\r \001(\tb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_UpstreamPayload_2eproto_deps[4] = {
  &::descriptor_table_FrontendInfo_2eproto,
  &::descriptor_table_RequsetBasicInfo_2eproto,
  &::descriptor_table_SettingInfo_2eproto,
  &::descriptor_table_UserInstance_2eproto,
};
static ::_pbi::once_flag descriptor_table_UpstreamPayload_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_UpstreamPayload_2eproto = {
    false, false, 550, descriptor_table_protodef_UpstreamPayload_2eproto,
    "UpstreamPayload.proto",
    &descriptor_table_UpstreamPayload_2eproto_once, descriptor_table_UpstreamPayload_2eproto_deps, 4, 1,
    schemas, file_default_instances, TableStruct_UpstreamPayload_2eproto::offsets,
    file_level_metadata_UpstreamPayload_2eproto, file_level_enum_descriptors_UpstreamPayload_2eproto,
    file_level_service_descriptors_UpstreamPayload_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_UpstreamPayload_2eproto_getter() {
  return &descriptor_table_UpstreamPayload_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_UpstreamPayload_2eproto(&descriptor_table_UpstreamPayload_2eproto);
namespace AcFunDanmu {
namespace Im {
namespace Basic {

// ===================================================================

class UpstreamPayload::_Internal {
 public:
  static const ::AcFunDanmu::Im::Basic::UserInstance& userinstance(const UpstreamPayload* msg);
  static const ::AcFunDanmu::Im::Basic::SettingInfo& settinginfo(const UpstreamPayload* msg);
  static const ::AcFunDanmu::Im::Basic::RequsetBasicInfo& requestbasicinfo(const UpstreamPayload* msg);
  static const ::AcFunDanmu::Im::Basic::FrontendInfo& frontendinfo(const UpstreamPayload* msg);
};

const ::AcFunDanmu::Im::Basic::UserInstance&
UpstreamPayload::_Internal::userinstance(const UpstreamPayload* msg) {
  return *msg->_impl_.userinstance_;
}
const ::AcFunDanmu::Im::Basic::SettingInfo&
UpstreamPayload::_Internal::settinginfo(const UpstreamPayload* msg) {
  return *msg->_impl_.settinginfo_;
}
const ::AcFunDanmu::Im::Basic::RequsetBasicInfo&
UpstreamPayload::_Internal::requestbasicinfo(const UpstreamPayload* msg) {
  return *msg->_impl_.requestbasicinfo_;
}
const ::AcFunDanmu::Im::Basic::FrontendInfo&
UpstreamPayload::_Internal::frontendinfo(const UpstreamPayload* msg) {
  return *msg->_impl_.frontendinfo_;
}
void UpstreamPayload::clear_userinstance() {
  if (GetArenaForAllocation() == nullptr && _impl_.userinstance_ != nullptr) {
    delete _impl_.userinstance_;
  }
  _impl_.userinstance_ = nullptr;
}
void UpstreamPayload::clear_settinginfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.settinginfo_ != nullptr) {
    delete _impl_.settinginfo_;
  }
  _impl_.settinginfo_ = nullptr;
}
void UpstreamPayload::clear_requestbasicinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.requestbasicinfo_ != nullptr) {
    delete _impl_.requestbasicinfo_;
  }
  _impl_.requestbasicinfo_ = nullptr;
}
void UpstreamPayload::clear_frontendinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.frontendinfo_ != nullptr) {
    delete _impl_.frontendinfo_;
  }
  _impl_.frontendinfo_ = nullptr;
}
UpstreamPayload::UpstreamPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.Im.Basic.UpstreamPayload)
}
UpstreamPayload::UpstreamPayload(const UpstreamPayload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpstreamPayload* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.command_){}
    , decltype(_impl_.payloaddata_){}
    , decltype(_impl_.subbiz_){}
    , decltype(_impl_.kpn_){}
    , decltype(_impl_.laneid_){}
    , decltype(_impl_.userinstance_){nullptr}
    , decltype(_impl_.settinginfo_){nullptr}
    , decltype(_impl_.requestbasicinfo_){nullptr}
    , decltype(_impl_.frontendinfo_){nullptr}
    , decltype(_impl_.seqid_){}
    , decltype(_impl_.retrycount_){}
    , decltype(_impl_.errorcode_){}
    , decltype(_impl_.anonymouseuser_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.command_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.command_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_command().empty()) {
    _this->_impl_.command_.Set(from._internal_command(), 
      _this->GetArenaForAllocation());
  }
  _impl_.payloaddata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payloaddata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payloaddata().empty()) {
    _this->_impl_.payloaddata_.Set(from._internal_payloaddata(), 
      _this->GetArenaForAllocation());
  }
  _impl_.subbiz_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subbiz_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subbiz().empty()) {
    _this->_impl_.subbiz_.Set(from._internal_subbiz(), 
      _this->GetArenaForAllocation());
  }
  _impl_.kpn_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.kpn_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_kpn().empty()) {
    _this->_impl_.kpn_.Set(from._internal_kpn(), 
      _this->GetArenaForAllocation());
  }
  _impl_.laneid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.laneid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_laneid().empty()) {
    _this->_impl_.laneid_.Set(from._internal_laneid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_userinstance()) {
    _this->_impl_.userinstance_ = new ::AcFunDanmu::Im::Basic::UserInstance(*from._impl_.userinstance_);
  }
  if (from._internal_has_settinginfo()) {
    _this->_impl_.settinginfo_ = new ::AcFunDanmu::Im::Basic::SettingInfo(*from._impl_.settinginfo_);
  }
  if (from._internal_has_requestbasicinfo()) {
    _this->_impl_.requestbasicinfo_ = new ::AcFunDanmu::Im::Basic::RequsetBasicInfo(*from._impl_.requestbasicinfo_);
  }
  if (from._internal_has_frontendinfo()) {
    _this->_impl_.frontendinfo_ = new ::AcFunDanmu::Im::Basic::FrontendInfo(*from._impl_.frontendinfo_);
  }
  ::memcpy(&_impl_.seqid_, &from._impl_.seqid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.anonymouseuser_) -
    reinterpret_cast<char*>(&_impl_.seqid_)) + sizeof(_impl_.anonymouseuser_));
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.Im.Basic.UpstreamPayload)
}

inline void UpstreamPayload::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.command_){}
    , decltype(_impl_.payloaddata_){}
    , decltype(_impl_.subbiz_){}
    , decltype(_impl_.kpn_){}
    , decltype(_impl_.laneid_){}
    , decltype(_impl_.userinstance_){nullptr}
    , decltype(_impl_.settinginfo_){nullptr}
    , decltype(_impl_.requestbasicinfo_){nullptr}
    , decltype(_impl_.frontendinfo_){nullptr}
    , decltype(_impl_.seqid_){int64_t{0}}
    , decltype(_impl_.retrycount_){0u}
    , decltype(_impl_.errorcode_){0}
    , decltype(_impl_.anonymouseuser_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.command_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.command_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.payloaddata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payloaddata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subbiz_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subbiz_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.kpn_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.kpn_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.laneid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.laneid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UpstreamPayload::~UpstreamPayload() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.Im.Basic.UpstreamPayload)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpstreamPayload::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.command_.Destroy();
  _impl_.payloaddata_.Destroy();
  _impl_.subbiz_.Destroy();
  _impl_.kpn_.Destroy();
  _impl_.laneid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.userinstance_;
  if (this != internal_default_instance()) delete _impl_.settinginfo_;
  if (this != internal_default_instance()) delete _impl_.requestbasicinfo_;
  if (this != internal_default_instance()) delete _impl_.frontendinfo_;
}

void UpstreamPayload::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpstreamPayload::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.Im.Basic.UpstreamPayload)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.command_.ClearToEmpty();
  _impl_.payloaddata_.ClearToEmpty();
  _impl_.subbiz_.ClearToEmpty();
  _impl_.kpn_.ClearToEmpty();
  _impl_.laneid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.userinstance_ != nullptr) {
    delete _impl_.userinstance_;
  }
  _impl_.userinstance_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.settinginfo_ != nullptr) {
    delete _impl_.settinginfo_;
  }
  _impl_.settinginfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.requestbasicinfo_ != nullptr) {
    delete _impl_.requestbasicinfo_;
  }
  _impl_.requestbasicinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.frontendinfo_ != nullptr) {
    delete _impl_.frontendinfo_;
  }
  _impl_.frontendinfo_ = nullptr;
  ::memset(&_impl_.seqid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.anonymouseuser_) -
      reinterpret_cast<char*>(&_impl_.seqid_)) + sizeof(_impl_.anonymouseuser_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpstreamPayload::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_command();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Basic.UpstreamPayload.command"));
        } else
          goto handle_unusual;
        continue;
      // int64 seqId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.seqid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 retryCount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.retrycount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes payloadData = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_payloaddata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Basic.UserInstance userInstance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_userinstance(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 errorCode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.errorcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Basic.SettingInfo settingInfo = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_settinginfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Basic.RequsetBasicInfo requestBasicInfo = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestbasicinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string subBiz = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_subbiz();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Basic.UpstreamPayload.subBiz"));
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Basic.FrontendInfo frontendInfo = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_frontendinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string kpn = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_kpn();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Basic.UpstreamPayload.kpn"));
        } else
          goto handle_unusual;
        continue;
      // bool anonymouseUser = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.anonymouseuser_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string laneId = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_laneid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Basic.UpstreamPayload.laneId"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpstreamPayload::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.Im.Basic.UpstreamPayload)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string command = 1;
  if (!this->_internal_command().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_command().data(), static_cast<int>(this->_internal_command().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Basic.UpstreamPayload.command");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_command(), target);
  }

  // int64 seqId = 2;
  if (this->_internal_seqid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_seqid(), target);
  }

  // uint32 retryCount = 3;
  if (this->_internal_retrycount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_retrycount(), target);
  }

  // bytes payloadData = 4;
  if (!this->_internal_payloaddata().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_payloaddata(), target);
  }

  // .AcFunDanmu.Im.Basic.UserInstance userInstance = 5;
  if (this->_internal_has_userinstance()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::userinstance(this),
        _Internal::userinstance(this).GetCachedSize(), target, stream);
  }

  // int32 errorCode = 6;
  if (this->_internal_errorcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_errorcode(), target);
  }

  // .AcFunDanmu.Im.Basic.SettingInfo settingInfo = 7;
  if (this->_internal_has_settinginfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::settinginfo(this),
        _Internal::settinginfo(this).GetCachedSize(), target, stream);
  }

  // .AcFunDanmu.Im.Basic.RequsetBasicInfo requestBasicInfo = 8;
  if (this->_internal_has_requestbasicinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::requestbasicinfo(this),
        _Internal::requestbasicinfo(this).GetCachedSize(), target, stream);
  }

  // string subBiz = 9;
  if (!this->_internal_subbiz().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subbiz().data(), static_cast<int>(this->_internal_subbiz().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Basic.UpstreamPayload.subBiz");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_subbiz(), target);
  }

  // .AcFunDanmu.Im.Basic.FrontendInfo frontendInfo = 10;
  if (this->_internal_has_frontendinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::frontendinfo(this),
        _Internal::frontendinfo(this).GetCachedSize(), target, stream);
  }

  // string kpn = 11;
  if (!this->_internal_kpn().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_kpn().data(), static_cast<int>(this->_internal_kpn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Basic.UpstreamPayload.kpn");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_kpn(), target);
  }

  // bool anonymouseUser = 12;
  if (this->_internal_anonymouseuser() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_anonymouseuser(), target);
  }

  // string laneId = 13;
  if (!this->_internal_laneid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_laneid().data(), static_cast<int>(this->_internal_laneid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Basic.UpstreamPayload.laneId");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_laneid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.Im.Basic.UpstreamPayload)
  return target;
}

size_t UpstreamPayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.Im.Basic.UpstreamPayload)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string command = 1;
  if (!this->_internal_command().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_command());
  }

  // bytes payloadData = 4;
  if (!this->_internal_payloaddata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payloaddata());
  }

  // string subBiz = 9;
  if (!this->_internal_subbiz().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subbiz());
  }

  // string kpn = 11;
  if (!this->_internal_kpn().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_kpn());
  }

  // string laneId = 13;
  if (!this->_internal_laneid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_laneid());
  }

  // .AcFunDanmu.Im.Basic.UserInstance userInstance = 5;
  if (this->_internal_has_userinstance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.userinstance_);
  }

  // .AcFunDanmu.Im.Basic.SettingInfo settingInfo = 7;
  if (this->_internal_has_settinginfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.settinginfo_);
  }

  // .AcFunDanmu.Im.Basic.RequsetBasicInfo requestBasicInfo = 8;
  if (this->_internal_has_requestbasicinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.requestbasicinfo_);
  }

  // .AcFunDanmu.Im.Basic.FrontendInfo frontendInfo = 10;
  if (this->_internal_has_frontendinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.frontendinfo_);
  }

  // int64 seqId = 2;
  if (this->_internal_seqid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqid());
  }

  // uint32 retryCount = 3;
  if (this->_internal_retrycount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_retrycount());
  }

  // int32 errorCode = 6;
  if (this->_internal_errorcode() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_errorcode());
  }

  // bool anonymouseUser = 12;
  if (this->_internal_anonymouseuser() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpstreamPayload::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpstreamPayload::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpstreamPayload::GetClassData() const { return &_class_data_; }


void UpstreamPayload::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpstreamPayload*>(&to_msg);
  auto& from = static_cast<const UpstreamPayload&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.Im.Basic.UpstreamPayload)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_command().empty()) {
    _this->_internal_set_command(from._internal_command());
  }
  if (!from._internal_payloaddata().empty()) {
    _this->_internal_set_payloaddata(from._internal_payloaddata());
  }
  if (!from._internal_subbiz().empty()) {
    _this->_internal_set_subbiz(from._internal_subbiz());
  }
  if (!from._internal_kpn().empty()) {
    _this->_internal_set_kpn(from._internal_kpn());
  }
  if (!from._internal_laneid().empty()) {
    _this->_internal_set_laneid(from._internal_laneid());
  }
  if (from._internal_has_userinstance()) {
    _this->_internal_mutable_userinstance()->::AcFunDanmu::Im::Basic::UserInstance::MergeFrom(
        from._internal_userinstance());
  }
  if (from._internal_has_settinginfo()) {
    _this->_internal_mutable_settinginfo()->::AcFunDanmu::Im::Basic::SettingInfo::MergeFrom(
        from._internal_settinginfo());
  }
  if (from._internal_has_requestbasicinfo()) {
    _this->_internal_mutable_requestbasicinfo()->::AcFunDanmu::Im::Basic::RequsetBasicInfo::MergeFrom(
        from._internal_requestbasicinfo());
  }
  if (from._internal_has_frontendinfo()) {
    _this->_internal_mutable_frontendinfo()->::AcFunDanmu::Im::Basic::FrontendInfo::MergeFrom(
        from._internal_frontendinfo());
  }
  if (from._internal_seqid() != 0) {
    _this->_internal_set_seqid(from._internal_seqid());
  }
  if (from._internal_retrycount() != 0) {
    _this->_internal_set_retrycount(from._internal_retrycount());
  }
  if (from._internal_errorcode() != 0) {
    _this->_internal_set_errorcode(from._internal_errorcode());
  }
  if (from._internal_anonymouseuser() != 0) {
    _this->_internal_set_anonymouseuser(from._internal_anonymouseuser());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpstreamPayload::CopyFrom(const UpstreamPayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.Im.Basic.UpstreamPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpstreamPayload::IsInitialized() const {
  return true;
}

void UpstreamPayload::InternalSwap(UpstreamPayload* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.command_, lhs_arena,
      &other->_impl_.command_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.payloaddata_, lhs_arena,
      &other->_impl_.payloaddata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subbiz_, lhs_arena,
      &other->_impl_.subbiz_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.kpn_, lhs_arena,
      &other->_impl_.kpn_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.laneid_, lhs_arena,
      &other->_impl_.laneid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpstreamPayload, _impl_.anonymouseuser_)
      + sizeof(UpstreamPayload::_impl_.anonymouseuser_)
      - PROTOBUF_FIELD_OFFSET(UpstreamPayload, _impl_.userinstance_)>(
          reinterpret_cast<char*>(&_impl_.userinstance_),
          reinterpret_cast<char*>(&other->_impl_.userinstance_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpstreamPayload::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_UpstreamPayload_2eproto_getter, &descriptor_table_UpstreamPayload_2eproto_once,
      file_level_metadata_UpstreamPayload_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Basic
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AcFunDanmu::Im::Basic::UpstreamPayload*
Arena::CreateMaybeMessage< ::AcFunDanmu::Im::Basic::UpstreamPayload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::Im::Basic::UpstreamPayload >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
