// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GroupSettingBatchUpdate.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_GroupSettingBatchUpdate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_GroupSettingBatchUpdate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Location.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_GroupSettingBatchUpdate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_GroupSettingBatchUpdate_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_GroupSettingBatchUpdate_2eproto;
namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Message {
class GroupSettingBatchUpdate;
struct GroupSettingBatchUpdateDefaultTypeInternal;
extern GroupSettingBatchUpdateDefaultTypeInternal _GroupSettingBatchUpdate_default_instance_;
}  // namespace Message
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::Im::Cloud::Message::GroupSettingBatchUpdate* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud::Message::GroupSettingBatchUpdate>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Message {

enum GroupSettingBatchUpdate_UpdateField : int {
  GroupSettingBatchUpdate_UpdateField_UN_KNOWN_FIELD = 0,
  GroupSettingBatchUpdate_UpdateField_GROUP_NAME = 1,
  GroupSettingBatchUpdate_UpdateField_GROUP_HEAD_URL = 2,
  GroupSettingBatchUpdate_UpdateField_LOCATION = 3,
  GroupSettingBatchUpdate_UpdateField_TAG = 4,
  GroupSettingBatchUpdate_UpdateField_INTRODUCTION = 5,
  GroupSettingBatchUpdate_UpdateField_GroupSettingBatchUpdate_UpdateField_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  GroupSettingBatchUpdate_UpdateField_GroupSettingBatchUpdate_UpdateField_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool GroupSettingBatchUpdate_UpdateField_IsValid(int value);
constexpr GroupSettingBatchUpdate_UpdateField GroupSettingBatchUpdate_UpdateField_UpdateField_MIN = GroupSettingBatchUpdate_UpdateField_UN_KNOWN_FIELD;
constexpr GroupSettingBatchUpdate_UpdateField GroupSettingBatchUpdate_UpdateField_UpdateField_MAX = GroupSettingBatchUpdate_UpdateField_INTRODUCTION;
constexpr int GroupSettingBatchUpdate_UpdateField_UpdateField_ARRAYSIZE = GroupSettingBatchUpdate_UpdateField_UpdateField_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GroupSettingBatchUpdate_UpdateField_descriptor();
template<typename T>
inline const std::string& GroupSettingBatchUpdate_UpdateField_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GroupSettingBatchUpdate_UpdateField>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GroupSettingBatchUpdate_UpdateField_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GroupSettingBatchUpdate_UpdateField_descriptor(), enum_t_value);
}
inline bool GroupSettingBatchUpdate_UpdateField_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GroupSettingBatchUpdate_UpdateField* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GroupSettingBatchUpdate_UpdateField>(
    GroupSettingBatchUpdate_UpdateField_descriptor(), name, value);
}
// ===================================================================

class GroupSettingBatchUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.GroupSettingBatchUpdate) */ {
 public:
  inline GroupSettingBatchUpdate() : GroupSettingBatchUpdate(nullptr) {}
  ~GroupSettingBatchUpdate() override;
  explicit PROTOBUF_CONSTEXPR GroupSettingBatchUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupSettingBatchUpdate(const GroupSettingBatchUpdate& from);
  GroupSettingBatchUpdate(GroupSettingBatchUpdate&& from) noexcept
    : GroupSettingBatchUpdate() {
    *this = ::std::move(from);
  }

  inline GroupSettingBatchUpdate& operator=(const GroupSettingBatchUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupSettingBatchUpdate& operator=(GroupSettingBatchUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupSettingBatchUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupSettingBatchUpdate* internal_default_instance() {
    return reinterpret_cast<const GroupSettingBatchUpdate*>(
               &_GroupSettingBatchUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GroupSettingBatchUpdate& a, GroupSettingBatchUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupSettingBatchUpdate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupSettingBatchUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupSettingBatchUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupSettingBatchUpdate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupSettingBatchUpdate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupSettingBatchUpdate& from) {
    GroupSettingBatchUpdate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupSettingBatchUpdate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.GroupSettingBatchUpdate";
  }
  protected:
  explicit GroupSettingBatchUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GroupSettingBatchUpdate_UpdateField UpdateField;
  static constexpr UpdateField UN_KNOWN_FIELD =
    GroupSettingBatchUpdate_UpdateField_UN_KNOWN_FIELD;
  static constexpr UpdateField GROUP_NAME =
    GroupSettingBatchUpdate_UpdateField_GROUP_NAME;
  static constexpr UpdateField GROUP_HEAD_URL =
    GroupSettingBatchUpdate_UpdateField_GROUP_HEAD_URL;
  static constexpr UpdateField LOCATION =
    GroupSettingBatchUpdate_UpdateField_LOCATION;
  static constexpr UpdateField TAG =
    GroupSettingBatchUpdate_UpdateField_TAG;
  static constexpr UpdateField INTRODUCTION =
    GroupSettingBatchUpdate_UpdateField_INTRODUCTION;
  static inline bool UpdateField_IsValid(int value) {
    return GroupSettingBatchUpdate_UpdateField_IsValid(value);
  }
  static constexpr UpdateField UpdateField_MIN =
    GroupSettingBatchUpdate_UpdateField_UpdateField_MIN;
  static constexpr UpdateField UpdateField_MAX =
    GroupSettingBatchUpdate_UpdateField_UpdateField_MAX;
  static constexpr int UpdateField_ARRAYSIZE =
    GroupSettingBatchUpdate_UpdateField_UpdateField_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  UpdateField_descriptor() {
    return GroupSettingBatchUpdate_UpdateField_descriptor();
  }
  template<typename T>
  static inline const std::string& UpdateField_Name(T enum_t_value) {
    static_assert(::std::is_same<T, UpdateField>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function UpdateField_Name.");
    return GroupSettingBatchUpdate_UpdateField_Name(enum_t_value);
  }
  static inline bool UpdateField_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      UpdateField* value) {
    return GroupSettingBatchUpdate_UpdateField_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 1,
    kGroupNameFieldNumber = 2,
    kGroupHeadUrlFieldNumber = 3,
    kTagFieldNumber = 5,
    kIntroductionFieldNumber = 6,
    kLocationFieldNumber = 4,
  };
  // repeated .AcFunDanmu.Im.Cloud.Message.GroupSettingBatchUpdate.UpdateField fields = 1;
  int fields_size() const;
  private:
  int _internal_fields_size() const;
  public:
  void clear_fields();
  private:
  ::AcFunDanmu::Im::Cloud::Message::GroupSettingBatchUpdate_UpdateField _internal_fields(int index) const;
  void _internal_add_fields(::AcFunDanmu::Im::Cloud::Message::GroupSettingBatchUpdate_UpdateField value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_fields();
  public:
  ::AcFunDanmu::Im::Cloud::Message::GroupSettingBatchUpdate_UpdateField fields(int index) const;
  void set_fields(int index, ::AcFunDanmu::Im::Cloud::Message::GroupSettingBatchUpdate_UpdateField value);
  void add_fields(::AcFunDanmu::Im::Cloud::Message::GroupSettingBatchUpdate_UpdateField value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& fields() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_fields();

  // string groupName = 2;
  void clear_groupname();
  const std::string& groupname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_groupname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_groupname();
  PROTOBUF_NODISCARD std::string* release_groupname();
  void set_allocated_groupname(std::string* groupname);
  private:
  const std::string& _internal_groupname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_groupname(const std::string& value);
  std::string* _internal_mutable_groupname();
  public:

  // string groupHeadUrl = 3;
  void clear_groupheadurl();
  const std::string& groupheadurl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_groupheadurl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_groupheadurl();
  PROTOBUF_NODISCARD std::string* release_groupheadurl();
  void set_allocated_groupheadurl(std::string* groupheadurl);
  private:
  const std::string& _internal_groupheadurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_groupheadurl(const std::string& value);
  std::string* _internal_mutable_groupheadurl();
  public:

  // string tag = 5;
  void clear_tag();
  const std::string& tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tag();
  PROTOBUF_NODISCARD std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // string introduction = 6;
  void clear_introduction();
  const std::string& introduction() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_introduction(ArgT0&& arg0, ArgT... args);
  std::string* mutable_introduction();
  PROTOBUF_NODISCARD std::string* release_introduction();
  void set_allocated_introduction(std::string* introduction);
  private:
  const std::string& _internal_introduction() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_introduction(const std::string& value);
  std::string* _internal_mutable_introduction();
  public:

  // .AcFunDanmu.Im.Cloud.Message.Location location = 4;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::AcFunDanmu::Im::Cloud::Message::Location& location() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Cloud::Message::Location* release_location();
  ::AcFunDanmu::Im::Cloud::Message::Location* mutable_location();
  void set_allocated_location(::AcFunDanmu::Im::Cloud::Message::Location* location);
  private:
  const ::AcFunDanmu::Im::Cloud::Message::Location& _internal_location() const;
  ::AcFunDanmu::Im::Cloud::Message::Location* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::AcFunDanmu::Im::Cloud::Message::Location* location);
  ::AcFunDanmu::Im::Cloud::Message::Location* unsafe_arena_release_location();

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.GroupSettingBatchUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> fields_;
    mutable std::atomic<int> _fields_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupheadurl_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr introduction_;
    ::AcFunDanmu::Im::Cloud::Message::Location* location_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GroupSettingBatchUpdate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GroupSettingBatchUpdate

// repeated .AcFunDanmu.Im.Cloud.Message.GroupSettingBatchUpdate.UpdateField fields = 1;
inline int GroupSettingBatchUpdate::_internal_fields_size() const {
  return _impl_.fields_.size();
}
inline int GroupSettingBatchUpdate::fields_size() const {
  return _internal_fields_size();
}
inline void GroupSettingBatchUpdate::clear_fields() {
  _impl_.fields_.Clear();
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupSettingBatchUpdate_UpdateField GroupSettingBatchUpdate::_internal_fields(int index) const {
  return static_cast< ::AcFunDanmu::Im::Cloud::Message::GroupSettingBatchUpdate_UpdateField >(_impl_.fields_.Get(index));
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupSettingBatchUpdate_UpdateField GroupSettingBatchUpdate::fields(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupSettingBatchUpdate.fields)
  return _internal_fields(index);
}
inline void GroupSettingBatchUpdate::set_fields(int index, ::AcFunDanmu::Im::Cloud::Message::GroupSettingBatchUpdate_UpdateField value) {
  _impl_.fields_.Set(index, value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupSettingBatchUpdate.fields)
}
inline void GroupSettingBatchUpdate::_internal_add_fields(::AcFunDanmu::Im::Cloud::Message::GroupSettingBatchUpdate_UpdateField value) {
  _impl_.fields_.Add(value);
}
inline void GroupSettingBatchUpdate::add_fields(::AcFunDanmu::Im::Cloud::Message::GroupSettingBatchUpdate_UpdateField value) {
  _internal_add_fields(value);
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Cloud.Message.GroupSettingBatchUpdate.fields)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
GroupSettingBatchUpdate::fields() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Cloud.Message.GroupSettingBatchUpdate.fields)
  return _impl_.fields_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
GroupSettingBatchUpdate::_internal_mutable_fields() {
  return &_impl_.fields_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
GroupSettingBatchUpdate::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Cloud.Message.GroupSettingBatchUpdate.fields)
  return _internal_mutable_fields();
}

// string groupName = 2;
inline void GroupSettingBatchUpdate::clear_groupname() {
  _impl_.groupname_.ClearToEmpty();
}
inline const std::string& GroupSettingBatchUpdate::groupname() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupSettingBatchUpdate.groupName)
  return _internal_groupname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupSettingBatchUpdate::set_groupname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.groupname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupSettingBatchUpdate.groupName)
}
inline std::string* GroupSettingBatchUpdate::mutable_groupname() {
  std::string* _s = _internal_mutable_groupname();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupSettingBatchUpdate.groupName)
  return _s;
}
inline const std::string& GroupSettingBatchUpdate::_internal_groupname() const {
  return _impl_.groupname_.Get();
}
inline void GroupSettingBatchUpdate::_internal_set_groupname(const std::string& value) {
  
  _impl_.groupname_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupSettingBatchUpdate::_internal_mutable_groupname() {
  
  return _impl_.groupname_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupSettingBatchUpdate::release_groupname() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupSettingBatchUpdate.groupName)
  return _impl_.groupname_.Release();
}
inline void GroupSettingBatchUpdate::set_allocated_groupname(std::string* groupname) {
  if (groupname != nullptr) {
    
  } else {
    
  }
  _impl_.groupname_.SetAllocated(groupname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.groupname_.IsDefault()) {
    _impl_.groupname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupSettingBatchUpdate.groupName)
}

// string groupHeadUrl = 3;
inline void GroupSettingBatchUpdate::clear_groupheadurl() {
  _impl_.groupheadurl_.ClearToEmpty();
}
inline const std::string& GroupSettingBatchUpdate::groupheadurl() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupSettingBatchUpdate.groupHeadUrl)
  return _internal_groupheadurl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupSettingBatchUpdate::set_groupheadurl(ArgT0&& arg0, ArgT... args) {
 
 _impl_.groupheadurl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupSettingBatchUpdate.groupHeadUrl)
}
inline std::string* GroupSettingBatchUpdate::mutable_groupheadurl() {
  std::string* _s = _internal_mutable_groupheadurl();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupSettingBatchUpdate.groupHeadUrl)
  return _s;
}
inline const std::string& GroupSettingBatchUpdate::_internal_groupheadurl() const {
  return _impl_.groupheadurl_.Get();
}
inline void GroupSettingBatchUpdate::_internal_set_groupheadurl(const std::string& value) {
  
  _impl_.groupheadurl_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupSettingBatchUpdate::_internal_mutable_groupheadurl() {
  
  return _impl_.groupheadurl_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupSettingBatchUpdate::release_groupheadurl() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupSettingBatchUpdate.groupHeadUrl)
  return _impl_.groupheadurl_.Release();
}
inline void GroupSettingBatchUpdate::set_allocated_groupheadurl(std::string* groupheadurl) {
  if (groupheadurl != nullptr) {
    
  } else {
    
  }
  _impl_.groupheadurl_.SetAllocated(groupheadurl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.groupheadurl_.IsDefault()) {
    _impl_.groupheadurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupSettingBatchUpdate.groupHeadUrl)
}

// .AcFunDanmu.Im.Cloud.Message.Location location = 4;
inline bool GroupSettingBatchUpdate::_internal_has_location() const {
  return this != internal_default_instance() && _impl_.location_ != nullptr;
}
inline bool GroupSettingBatchUpdate::has_location() const {
  return _internal_has_location();
}
inline const ::AcFunDanmu::Im::Cloud::Message::Location& GroupSettingBatchUpdate::_internal_location() const {
  const ::AcFunDanmu::Im::Cloud::Message::Location* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Cloud::Message::Location&>(
      ::AcFunDanmu::Im::Cloud::Message::_Location_default_instance_);
}
inline const ::AcFunDanmu::Im::Cloud::Message::Location& GroupSettingBatchUpdate::location() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupSettingBatchUpdate.location)
  return _internal_location();
}
inline void GroupSettingBatchUpdate::unsafe_arena_set_allocated_location(
    ::AcFunDanmu::Im::Cloud::Message::Location* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupSettingBatchUpdate.location)
}
inline ::AcFunDanmu::Im::Cloud::Message::Location* GroupSettingBatchUpdate::release_location() {
  
  ::AcFunDanmu::Im::Cloud::Message::Location* temp = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AcFunDanmu::Im::Cloud::Message::Location* GroupSettingBatchUpdate::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupSettingBatchUpdate.location)
  
  ::AcFunDanmu::Im::Cloud::Message::Location* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Cloud::Message::Location* GroupSettingBatchUpdate::_internal_mutable_location() {
  
  if (_impl_.location_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Cloud::Message::Location>(GetArenaForAllocation());
    _impl_.location_ = p;
  }
  return _impl_.location_;
}
inline ::AcFunDanmu::Im::Cloud::Message::Location* GroupSettingBatchUpdate::mutable_location() {
  ::AcFunDanmu::Im::Cloud::Message::Location* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupSettingBatchUpdate.location)
  return _msg;
}
inline void GroupSettingBatchUpdate::set_allocated_location(::AcFunDanmu::Im::Cloud::Message::Location* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location));
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.location_ = location;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupSettingBatchUpdate.location)
}

// string tag = 5;
inline void GroupSettingBatchUpdate::clear_tag() {
  _impl_.tag_.ClearToEmpty();
}
inline const std::string& GroupSettingBatchUpdate::tag() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupSettingBatchUpdate.tag)
  return _internal_tag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupSettingBatchUpdate::set_tag(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupSettingBatchUpdate.tag)
}
inline std::string* GroupSettingBatchUpdate::mutable_tag() {
  std::string* _s = _internal_mutable_tag();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupSettingBatchUpdate.tag)
  return _s;
}
inline const std::string& GroupSettingBatchUpdate::_internal_tag() const {
  return _impl_.tag_.Get();
}
inline void GroupSettingBatchUpdate::_internal_set_tag(const std::string& value) {
  
  _impl_.tag_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupSettingBatchUpdate::_internal_mutable_tag() {
  
  return _impl_.tag_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupSettingBatchUpdate::release_tag() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupSettingBatchUpdate.tag)
  return _impl_.tag_.Release();
}
inline void GroupSettingBatchUpdate::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    
  } else {
    
  }
  _impl_.tag_.SetAllocated(tag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tag_.IsDefault()) {
    _impl_.tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupSettingBatchUpdate.tag)
}

// string introduction = 6;
inline void GroupSettingBatchUpdate::clear_introduction() {
  _impl_.introduction_.ClearToEmpty();
}
inline const std::string& GroupSettingBatchUpdate::introduction() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupSettingBatchUpdate.introduction)
  return _internal_introduction();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupSettingBatchUpdate::set_introduction(ArgT0&& arg0, ArgT... args) {
 
 _impl_.introduction_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupSettingBatchUpdate.introduction)
}
inline std::string* GroupSettingBatchUpdate::mutable_introduction() {
  std::string* _s = _internal_mutable_introduction();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupSettingBatchUpdate.introduction)
  return _s;
}
inline const std::string& GroupSettingBatchUpdate::_internal_introduction() const {
  return _impl_.introduction_.Get();
}
inline void GroupSettingBatchUpdate::_internal_set_introduction(const std::string& value) {
  
  _impl_.introduction_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupSettingBatchUpdate::_internal_mutable_introduction() {
  
  return _impl_.introduction_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupSettingBatchUpdate::release_introduction() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupSettingBatchUpdate.introduction)
  return _impl_.introduction_.Release();
}
inline void GroupSettingBatchUpdate::set_allocated_introduction(std::string* introduction) {
  if (introduction != nullptr) {
    
  } else {
    
  }
  _impl_.introduction_.SetAllocated(introduction, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.introduction_.IsDefault()) {
    _impl_.introduction_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupSettingBatchUpdate.introduction)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Message
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::AcFunDanmu::Im::Cloud::Message::GroupSettingBatchUpdate_UpdateField> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::Im::Cloud::Message::GroupSettingBatchUpdate_UpdateField>() {
  return ::AcFunDanmu::Im::Cloud::Message::GroupSettingBatchUpdate_UpdateField_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_GroupSettingBatchUpdate_2eproto
