// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ZtCommonInfo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ZtCommonInfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ZtCommonInfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ZtCommonInfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ZtCommonInfo_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ZtCommonInfo_2eproto;
namespace AcFunDanmu {
namespace Im {
namespace Basic {
class ZtCommonInfo;
struct ZtCommonInfoDefaultTypeInternal;
extern ZtCommonInfoDefaultTypeInternal _ZtCommonInfo_default_instance_;
}  // namespace Basic
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::Im::Basic::ZtCommonInfo* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Basic::ZtCommonInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {
namespace Im {
namespace Basic {

// ===================================================================

class ZtCommonInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Basic.ZtCommonInfo) */ {
 public:
  inline ZtCommonInfo() : ZtCommonInfo(nullptr) {}
  ~ZtCommonInfo() override;
  explicit PROTOBUF_CONSTEXPR ZtCommonInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ZtCommonInfo(const ZtCommonInfo& from);
  ZtCommonInfo(ZtCommonInfo&& from) noexcept
    : ZtCommonInfo() {
    *this = ::std::move(from);
  }

  inline ZtCommonInfo& operator=(const ZtCommonInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZtCommonInfo& operator=(ZtCommonInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ZtCommonInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ZtCommonInfo* internal_default_instance() {
    return reinterpret_cast<const ZtCommonInfo*>(
               &_ZtCommonInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ZtCommonInfo& a, ZtCommonInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ZtCommonInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZtCommonInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ZtCommonInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ZtCommonInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ZtCommonInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ZtCommonInfo& from) {
    ZtCommonInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZtCommonInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Basic.ZtCommonInfo";
  }
  protected:
  explicit ZtCommonInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKpnFieldNumber = 1,
    kKpfFieldNumber = 2,
    kSubBizFieldNumber = 3,
    kDidFieldNumber = 5,
    kAppVerFieldNumber = 7,
    kVerFieldNumber = 8,
    kLatFieldNumber = 9,
    kLonFieldNumber = 10,
    kModFieldNumber = 11,
    kNetFieldNumber = 12,
    kSysFieldNumber = 13,
    kCFieldNumber = 14,
    kLanguageFieldNumber = 15,
    kCountryCodeFieldNumber = 16,
    kUidFieldNumber = 4,
    kClientIpFieldNumber = 6,
  };
  // string kpn = 1;
  void clear_kpn();
  const std::string& kpn() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_kpn(ArgT0&& arg0, ArgT... args);
  std::string* mutable_kpn();
  PROTOBUF_NODISCARD std::string* release_kpn();
  void set_allocated_kpn(std::string* kpn);
  private:
  const std::string& _internal_kpn() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_kpn(const std::string& value);
  std::string* _internal_mutable_kpn();
  public:

  // string kpf = 2;
  void clear_kpf();
  const std::string& kpf() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_kpf(ArgT0&& arg0, ArgT... args);
  std::string* mutable_kpf();
  PROTOBUF_NODISCARD std::string* release_kpf();
  void set_allocated_kpf(std::string* kpf);
  private:
  const std::string& _internal_kpf() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_kpf(const std::string& value);
  std::string* _internal_mutable_kpf();
  public:

  // string subBiz = 3;
  void clear_subbiz();
  const std::string& subbiz() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subbiz(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subbiz();
  PROTOBUF_NODISCARD std::string* release_subbiz();
  void set_allocated_subbiz(std::string* subbiz);
  private:
  const std::string& _internal_subbiz() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subbiz(const std::string& value);
  std::string* _internal_mutable_subbiz();
  public:

  // string did = 5;
  void clear_did();
  const std::string& did() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_did(ArgT0&& arg0, ArgT... args);
  std::string* mutable_did();
  PROTOBUF_NODISCARD std::string* release_did();
  void set_allocated_did(std::string* did);
  private:
  const std::string& _internal_did() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_did(const std::string& value);
  std::string* _internal_mutable_did();
  public:

  // string appVer = 7;
  void clear_appver();
  const std::string& appver() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_appver(ArgT0&& arg0, ArgT... args);
  std::string* mutable_appver();
  PROTOBUF_NODISCARD std::string* release_appver();
  void set_allocated_appver(std::string* appver);
  private:
  const std::string& _internal_appver() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_appver(const std::string& value);
  std::string* _internal_mutable_appver();
  public:

  // string ver = 8;
  void clear_ver();
  const std::string& ver() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ver(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ver();
  PROTOBUF_NODISCARD std::string* release_ver();
  void set_allocated_ver(std::string* ver);
  private:
  const std::string& _internal_ver() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ver(const std::string& value);
  std::string* _internal_mutable_ver();
  public:

  // string lat = 9;
  void clear_lat();
  const std::string& lat() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lat(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lat();
  PROTOBUF_NODISCARD std::string* release_lat();
  void set_allocated_lat(std::string* lat);
  private:
  const std::string& _internal_lat() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lat(const std::string& value);
  std::string* _internal_mutable_lat();
  public:

  // string lon = 10;
  void clear_lon();
  const std::string& lon() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lon(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lon();
  PROTOBUF_NODISCARD std::string* release_lon();
  void set_allocated_lon(std::string* lon);
  private:
  const std::string& _internal_lon() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lon(const std::string& value);
  std::string* _internal_mutable_lon();
  public:

  // string mod = 11;
  void clear_mod();
  const std::string& mod() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mod(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mod();
  PROTOBUF_NODISCARD std::string* release_mod();
  void set_allocated_mod(std::string* mod);
  private:
  const std::string& _internal_mod() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mod(const std::string& value);
  std::string* _internal_mutable_mod();
  public:

  // string net = 12;
  void clear_net();
  const std::string& net() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_net(ArgT0&& arg0, ArgT... args);
  std::string* mutable_net();
  PROTOBUF_NODISCARD std::string* release_net();
  void set_allocated_net(std::string* net);
  private:
  const std::string& _internal_net() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_net(const std::string& value);
  std::string* _internal_mutable_net();
  public:

  // string sys = 13;
  void clear_sys();
  const std::string& sys() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sys(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sys();
  PROTOBUF_NODISCARD std::string* release_sys();
  void set_allocated_sys(std::string* sys);
  private:
  const std::string& _internal_sys() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sys(const std::string& value);
  std::string* _internal_mutable_sys();
  public:

  // string c = 14;
  void clear_c();
  const std::string& c() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_c(ArgT0&& arg0, ArgT... args);
  std::string* mutable_c();
  PROTOBUF_NODISCARD std::string* release_c();
  void set_allocated_c(std::string* c);
  private:
  const std::string& _internal_c() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_c(const std::string& value);
  std::string* _internal_mutable_c();
  public:

  // string language = 15;
  void clear_language();
  const std::string& language() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language();
  PROTOBUF_NODISCARD std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // string countryCode = 16;
  void clear_countrycode();
  const std::string& countrycode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_countrycode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_countrycode();
  PROTOBUF_NODISCARD std::string* release_countrycode();
  void set_allocated_countrycode(std::string* countrycode);
  private:
  const std::string& _internal_countrycode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_countrycode(const std::string& value);
  std::string* _internal_mutable_countrycode();
  public:

  // int64 uid = 4;
  void clear_uid();
  int64_t uid() const;
  void set_uid(int64_t value);
  private:
  int64_t _internal_uid() const;
  void _internal_set_uid(int64_t value);
  public:

  // int64 clientIp = 6;
  void clear_clientip();
  int64_t clientip() const;
  void set_clientip(int64_t value);
  private:
  int64_t _internal_clientip() const;
  void _internal_set_clientip(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Basic.ZtCommonInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kpn_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kpf_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subbiz_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr did_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appver_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ver_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lat_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lon_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mod_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr net_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sys_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr c_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr countrycode_;
    int64_t uid_;
    int64_t clientip_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ZtCommonInfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ZtCommonInfo

// string kpn = 1;
inline void ZtCommonInfo::clear_kpn() {
  _impl_.kpn_.ClearToEmpty();
}
inline const std::string& ZtCommonInfo::kpn() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.ZtCommonInfo.kpn)
  return _internal_kpn();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ZtCommonInfo::set_kpn(ArgT0&& arg0, ArgT... args) {
 
 _impl_.kpn_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.ZtCommonInfo.kpn)
}
inline std::string* ZtCommonInfo::mutable_kpn() {
  std::string* _s = _internal_mutable_kpn();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.ZtCommonInfo.kpn)
  return _s;
}
inline const std::string& ZtCommonInfo::_internal_kpn() const {
  return _impl_.kpn_.Get();
}
inline void ZtCommonInfo::_internal_set_kpn(const std::string& value) {
  
  _impl_.kpn_.Set(value, GetArenaForAllocation());
}
inline std::string* ZtCommonInfo::_internal_mutable_kpn() {
  
  return _impl_.kpn_.Mutable(GetArenaForAllocation());
}
inline std::string* ZtCommonInfo::release_kpn() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.ZtCommonInfo.kpn)
  return _impl_.kpn_.Release();
}
inline void ZtCommonInfo::set_allocated_kpn(std::string* kpn) {
  if (kpn != nullptr) {
    
  } else {
    
  }
  _impl_.kpn_.SetAllocated(kpn, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.kpn_.IsDefault()) {
    _impl_.kpn_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.ZtCommonInfo.kpn)
}

// string kpf = 2;
inline void ZtCommonInfo::clear_kpf() {
  _impl_.kpf_.ClearToEmpty();
}
inline const std::string& ZtCommonInfo::kpf() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.ZtCommonInfo.kpf)
  return _internal_kpf();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ZtCommonInfo::set_kpf(ArgT0&& arg0, ArgT... args) {
 
 _impl_.kpf_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.ZtCommonInfo.kpf)
}
inline std::string* ZtCommonInfo::mutable_kpf() {
  std::string* _s = _internal_mutable_kpf();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.ZtCommonInfo.kpf)
  return _s;
}
inline const std::string& ZtCommonInfo::_internal_kpf() const {
  return _impl_.kpf_.Get();
}
inline void ZtCommonInfo::_internal_set_kpf(const std::string& value) {
  
  _impl_.kpf_.Set(value, GetArenaForAllocation());
}
inline std::string* ZtCommonInfo::_internal_mutable_kpf() {
  
  return _impl_.kpf_.Mutable(GetArenaForAllocation());
}
inline std::string* ZtCommonInfo::release_kpf() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.ZtCommonInfo.kpf)
  return _impl_.kpf_.Release();
}
inline void ZtCommonInfo::set_allocated_kpf(std::string* kpf) {
  if (kpf != nullptr) {
    
  } else {
    
  }
  _impl_.kpf_.SetAllocated(kpf, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.kpf_.IsDefault()) {
    _impl_.kpf_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.ZtCommonInfo.kpf)
}

// string subBiz = 3;
inline void ZtCommonInfo::clear_subbiz() {
  _impl_.subbiz_.ClearToEmpty();
}
inline const std::string& ZtCommonInfo::subbiz() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.ZtCommonInfo.subBiz)
  return _internal_subbiz();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ZtCommonInfo::set_subbiz(ArgT0&& arg0, ArgT... args) {
 
 _impl_.subbiz_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.ZtCommonInfo.subBiz)
}
inline std::string* ZtCommonInfo::mutable_subbiz() {
  std::string* _s = _internal_mutable_subbiz();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.ZtCommonInfo.subBiz)
  return _s;
}
inline const std::string& ZtCommonInfo::_internal_subbiz() const {
  return _impl_.subbiz_.Get();
}
inline void ZtCommonInfo::_internal_set_subbiz(const std::string& value) {
  
  _impl_.subbiz_.Set(value, GetArenaForAllocation());
}
inline std::string* ZtCommonInfo::_internal_mutable_subbiz() {
  
  return _impl_.subbiz_.Mutable(GetArenaForAllocation());
}
inline std::string* ZtCommonInfo::release_subbiz() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.ZtCommonInfo.subBiz)
  return _impl_.subbiz_.Release();
}
inline void ZtCommonInfo::set_allocated_subbiz(std::string* subbiz) {
  if (subbiz != nullptr) {
    
  } else {
    
  }
  _impl_.subbiz_.SetAllocated(subbiz, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.subbiz_.IsDefault()) {
    _impl_.subbiz_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.ZtCommonInfo.subBiz)
}

// int64 uid = 4;
inline void ZtCommonInfo::clear_uid() {
  _impl_.uid_ = int64_t{0};
}
inline int64_t ZtCommonInfo::_internal_uid() const {
  return _impl_.uid_;
}
inline int64_t ZtCommonInfo::uid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.ZtCommonInfo.uid)
  return _internal_uid();
}
inline void ZtCommonInfo::_internal_set_uid(int64_t value) {
  
  _impl_.uid_ = value;
}
inline void ZtCommonInfo::set_uid(int64_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.ZtCommonInfo.uid)
}

// string did = 5;
inline void ZtCommonInfo::clear_did() {
  _impl_.did_.ClearToEmpty();
}
inline const std::string& ZtCommonInfo::did() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.ZtCommonInfo.did)
  return _internal_did();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ZtCommonInfo::set_did(ArgT0&& arg0, ArgT... args) {
 
 _impl_.did_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.ZtCommonInfo.did)
}
inline std::string* ZtCommonInfo::mutable_did() {
  std::string* _s = _internal_mutable_did();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.ZtCommonInfo.did)
  return _s;
}
inline const std::string& ZtCommonInfo::_internal_did() const {
  return _impl_.did_.Get();
}
inline void ZtCommonInfo::_internal_set_did(const std::string& value) {
  
  _impl_.did_.Set(value, GetArenaForAllocation());
}
inline std::string* ZtCommonInfo::_internal_mutable_did() {
  
  return _impl_.did_.Mutable(GetArenaForAllocation());
}
inline std::string* ZtCommonInfo::release_did() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.ZtCommonInfo.did)
  return _impl_.did_.Release();
}
inline void ZtCommonInfo::set_allocated_did(std::string* did) {
  if (did != nullptr) {
    
  } else {
    
  }
  _impl_.did_.SetAllocated(did, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.did_.IsDefault()) {
    _impl_.did_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.ZtCommonInfo.did)
}

// int64 clientIp = 6;
inline void ZtCommonInfo::clear_clientip() {
  _impl_.clientip_ = int64_t{0};
}
inline int64_t ZtCommonInfo::_internal_clientip() const {
  return _impl_.clientip_;
}
inline int64_t ZtCommonInfo::clientip() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.ZtCommonInfo.clientIp)
  return _internal_clientip();
}
inline void ZtCommonInfo::_internal_set_clientip(int64_t value) {
  
  _impl_.clientip_ = value;
}
inline void ZtCommonInfo::set_clientip(int64_t value) {
  _internal_set_clientip(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.ZtCommonInfo.clientIp)
}

// string appVer = 7;
inline void ZtCommonInfo::clear_appver() {
  _impl_.appver_.ClearToEmpty();
}
inline const std::string& ZtCommonInfo::appver() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.ZtCommonInfo.appVer)
  return _internal_appver();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ZtCommonInfo::set_appver(ArgT0&& arg0, ArgT... args) {
 
 _impl_.appver_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.ZtCommonInfo.appVer)
}
inline std::string* ZtCommonInfo::mutable_appver() {
  std::string* _s = _internal_mutable_appver();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.ZtCommonInfo.appVer)
  return _s;
}
inline const std::string& ZtCommonInfo::_internal_appver() const {
  return _impl_.appver_.Get();
}
inline void ZtCommonInfo::_internal_set_appver(const std::string& value) {
  
  _impl_.appver_.Set(value, GetArenaForAllocation());
}
inline std::string* ZtCommonInfo::_internal_mutable_appver() {
  
  return _impl_.appver_.Mutable(GetArenaForAllocation());
}
inline std::string* ZtCommonInfo::release_appver() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.ZtCommonInfo.appVer)
  return _impl_.appver_.Release();
}
inline void ZtCommonInfo::set_allocated_appver(std::string* appver) {
  if (appver != nullptr) {
    
  } else {
    
  }
  _impl_.appver_.SetAllocated(appver, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.appver_.IsDefault()) {
    _impl_.appver_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.ZtCommonInfo.appVer)
}

// string ver = 8;
inline void ZtCommonInfo::clear_ver() {
  _impl_.ver_.ClearToEmpty();
}
inline const std::string& ZtCommonInfo::ver() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.ZtCommonInfo.ver)
  return _internal_ver();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ZtCommonInfo::set_ver(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ver_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.ZtCommonInfo.ver)
}
inline std::string* ZtCommonInfo::mutable_ver() {
  std::string* _s = _internal_mutable_ver();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.ZtCommonInfo.ver)
  return _s;
}
inline const std::string& ZtCommonInfo::_internal_ver() const {
  return _impl_.ver_.Get();
}
inline void ZtCommonInfo::_internal_set_ver(const std::string& value) {
  
  _impl_.ver_.Set(value, GetArenaForAllocation());
}
inline std::string* ZtCommonInfo::_internal_mutable_ver() {
  
  return _impl_.ver_.Mutable(GetArenaForAllocation());
}
inline std::string* ZtCommonInfo::release_ver() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.ZtCommonInfo.ver)
  return _impl_.ver_.Release();
}
inline void ZtCommonInfo::set_allocated_ver(std::string* ver) {
  if (ver != nullptr) {
    
  } else {
    
  }
  _impl_.ver_.SetAllocated(ver, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ver_.IsDefault()) {
    _impl_.ver_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.ZtCommonInfo.ver)
}

// string lat = 9;
inline void ZtCommonInfo::clear_lat() {
  _impl_.lat_.ClearToEmpty();
}
inline const std::string& ZtCommonInfo::lat() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.ZtCommonInfo.lat)
  return _internal_lat();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ZtCommonInfo::set_lat(ArgT0&& arg0, ArgT... args) {
 
 _impl_.lat_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.ZtCommonInfo.lat)
}
inline std::string* ZtCommonInfo::mutable_lat() {
  std::string* _s = _internal_mutable_lat();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.ZtCommonInfo.lat)
  return _s;
}
inline const std::string& ZtCommonInfo::_internal_lat() const {
  return _impl_.lat_.Get();
}
inline void ZtCommonInfo::_internal_set_lat(const std::string& value) {
  
  _impl_.lat_.Set(value, GetArenaForAllocation());
}
inline std::string* ZtCommonInfo::_internal_mutable_lat() {
  
  return _impl_.lat_.Mutable(GetArenaForAllocation());
}
inline std::string* ZtCommonInfo::release_lat() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.ZtCommonInfo.lat)
  return _impl_.lat_.Release();
}
inline void ZtCommonInfo::set_allocated_lat(std::string* lat) {
  if (lat != nullptr) {
    
  } else {
    
  }
  _impl_.lat_.SetAllocated(lat, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lat_.IsDefault()) {
    _impl_.lat_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.ZtCommonInfo.lat)
}

// string lon = 10;
inline void ZtCommonInfo::clear_lon() {
  _impl_.lon_.ClearToEmpty();
}
inline const std::string& ZtCommonInfo::lon() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.ZtCommonInfo.lon)
  return _internal_lon();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ZtCommonInfo::set_lon(ArgT0&& arg0, ArgT... args) {
 
 _impl_.lon_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.ZtCommonInfo.lon)
}
inline std::string* ZtCommonInfo::mutable_lon() {
  std::string* _s = _internal_mutable_lon();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.ZtCommonInfo.lon)
  return _s;
}
inline const std::string& ZtCommonInfo::_internal_lon() const {
  return _impl_.lon_.Get();
}
inline void ZtCommonInfo::_internal_set_lon(const std::string& value) {
  
  _impl_.lon_.Set(value, GetArenaForAllocation());
}
inline std::string* ZtCommonInfo::_internal_mutable_lon() {
  
  return _impl_.lon_.Mutable(GetArenaForAllocation());
}
inline std::string* ZtCommonInfo::release_lon() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.ZtCommonInfo.lon)
  return _impl_.lon_.Release();
}
inline void ZtCommonInfo::set_allocated_lon(std::string* lon) {
  if (lon != nullptr) {
    
  } else {
    
  }
  _impl_.lon_.SetAllocated(lon, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lon_.IsDefault()) {
    _impl_.lon_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.ZtCommonInfo.lon)
}

// string mod = 11;
inline void ZtCommonInfo::clear_mod() {
  _impl_.mod_.ClearToEmpty();
}
inline const std::string& ZtCommonInfo::mod() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.ZtCommonInfo.mod)
  return _internal_mod();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ZtCommonInfo::set_mod(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mod_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.ZtCommonInfo.mod)
}
inline std::string* ZtCommonInfo::mutable_mod() {
  std::string* _s = _internal_mutable_mod();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.ZtCommonInfo.mod)
  return _s;
}
inline const std::string& ZtCommonInfo::_internal_mod() const {
  return _impl_.mod_.Get();
}
inline void ZtCommonInfo::_internal_set_mod(const std::string& value) {
  
  _impl_.mod_.Set(value, GetArenaForAllocation());
}
inline std::string* ZtCommonInfo::_internal_mutable_mod() {
  
  return _impl_.mod_.Mutable(GetArenaForAllocation());
}
inline std::string* ZtCommonInfo::release_mod() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.ZtCommonInfo.mod)
  return _impl_.mod_.Release();
}
inline void ZtCommonInfo::set_allocated_mod(std::string* mod) {
  if (mod != nullptr) {
    
  } else {
    
  }
  _impl_.mod_.SetAllocated(mod, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mod_.IsDefault()) {
    _impl_.mod_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.ZtCommonInfo.mod)
}

// string net = 12;
inline void ZtCommonInfo::clear_net() {
  _impl_.net_.ClearToEmpty();
}
inline const std::string& ZtCommonInfo::net() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.ZtCommonInfo.net)
  return _internal_net();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ZtCommonInfo::set_net(ArgT0&& arg0, ArgT... args) {
 
 _impl_.net_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.ZtCommonInfo.net)
}
inline std::string* ZtCommonInfo::mutable_net() {
  std::string* _s = _internal_mutable_net();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.ZtCommonInfo.net)
  return _s;
}
inline const std::string& ZtCommonInfo::_internal_net() const {
  return _impl_.net_.Get();
}
inline void ZtCommonInfo::_internal_set_net(const std::string& value) {
  
  _impl_.net_.Set(value, GetArenaForAllocation());
}
inline std::string* ZtCommonInfo::_internal_mutable_net() {
  
  return _impl_.net_.Mutable(GetArenaForAllocation());
}
inline std::string* ZtCommonInfo::release_net() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.ZtCommonInfo.net)
  return _impl_.net_.Release();
}
inline void ZtCommonInfo::set_allocated_net(std::string* net) {
  if (net != nullptr) {
    
  } else {
    
  }
  _impl_.net_.SetAllocated(net, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.net_.IsDefault()) {
    _impl_.net_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.ZtCommonInfo.net)
}

// string sys = 13;
inline void ZtCommonInfo::clear_sys() {
  _impl_.sys_.ClearToEmpty();
}
inline const std::string& ZtCommonInfo::sys() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.ZtCommonInfo.sys)
  return _internal_sys();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ZtCommonInfo::set_sys(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sys_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.ZtCommonInfo.sys)
}
inline std::string* ZtCommonInfo::mutable_sys() {
  std::string* _s = _internal_mutable_sys();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.ZtCommonInfo.sys)
  return _s;
}
inline const std::string& ZtCommonInfo::_internal_sys() const {
  return _impl_.sys_.Get();
}
inline void ZtCommonInfo::_internal_set_sys(const std::string& value) {
  
  _impl_.sys_.Set(value, GetArenaForAllocation());
}
inline std::string* ZtCommonInfo::_internal_mutable_sys() {
  
  return _impl_.sys_.Mutable(GetArenaForAllocation());
}
inline std::string* ZtCommonInfo::release_sys() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.ZtCommonInfo.sys)
  return _impl_.sys_.Release();
}
inline void ZtCommonInfo::set_allocated_sys(std::string* sys) {
  if (sys != nullptr) {
    
  } else {
    
  }
  _impl_.sys_.SetAllocated(sys, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sys_.IsDefault()) {
    _impl_.sys_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.ZtCommonInfo.sys)
}

// string c = 14;
inline void ZtCommonInfo::clear_c() {
  _impl_.c_.ClearToEmpty();
}
inline const std::string& ZtCommonInfo::c() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.ZtCommonInfo.c)
  return _internal_c();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ZtCommonInfo::set_c(ArgT0&& arg0, ArgT... args) {
 
 _impl_.c_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.ZtCommonInfo.c)
}
inline std::string* ZtCommonInfo::mutable_c() {
  std::string* _s = _internal_mutable_c();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.ZtCommonInfo.c)
  return _s;
}
inline const std::string& ZtCommonInfo::_internal_c() const {
  return _impl_.c_.Get();
}
inline void ZtCommonInfo::_internal_set_c(const std::string& value) {
  
  _impl_.c_.Set(value, GetArenaForAllocation());
}
inline std::string* ZtCommonInfo::_internal_mutable_c() {
  
  return _impl_.c_.Mutable(GetArenaForAllocation());
}
inline std::string* ZtCommonInfo::release_c() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.ZtCommonInfo.c)
  return _impl_.c_.Release();
}
inline void ZtCommonInfo::set_allocated_c(std::string* c) {
  if (c != nullptr) {
    
  } else {
    
  }
  _impl_.c_.SetAllocated(c, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.c_.IsDefault()) {
    _impl_.c_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.ZtCommonInfo.c)
}

// string language = 15;
inline void ZtCommonInfo::clear_language() {
  _impl_.language_.ClearToEmpty();
}
inline const std::string& ZtCommonInfo::language() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.ZtCommonInfo.language)
  return _internal_language();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ZtCommonInfo::set_language(ArgT0&& arg0, ArgT... args) {
 
 _impl_.language_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.ZtCommonInfo.language)
}
inline std::string* ZtCommonInfo::mutable_language() {
  std::string* _s = _internal_mutable_language();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.ZtCommonInfo.language)
  return _s;
}
inline const std::string& ZtCommonInfo::_internal_language() const {
  return _impl_.language_.Get();
}
inline void ZtCommonInfo::_internal_set_language(const std::string& value) {
  
  _impl_.language_.Set(value, GetArenaForAllocation());
}
inline std::string* ZtCommonInfo::_internal_mutable_language() {
  
  return _impl_.language_.Mutable(GetArenaForAllocation());
}
inline std::string* ZtCommonInfo::release_language() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.ZtCommonInfo.language)
  return _impl_.language_.Release();
}
inline void ZtCommonInfo::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    
  } else {
    
  }
  _impl_.language_.SetAllocated(language, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.language_.IsDefault()) {
    _impl_.language_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.ZtCommonInfo.language)
}

// string countryCode = 16;
inline void ZtCommonInfo::clear_countrycode() {
  _impl_.countrycode_.ClearToEmpty();
}
inline const std::string& ZtCommonInfo::countrycode() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.ZtCommonInfo.countryCode)
  return _internal_countrycode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ZtCommonInfo::set_countrycode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.countrycode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.ZtCommonInfo.countryCode)
}
inline std::string* ZtCommonInfo::mutable_countrycode() {
  std::string* _s = _internal_mutable_countrycode();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.ZtCommonInfo.countryCode)
  return _s;
}
inline const std::string& ZtCommonInfo::_internal_countrycode() const {
  return _impl_.countrycode_.Get();
}
inline void ZtCommonInfo::_internal_set_countrycode(const std::string& value) {
  
  _impl_.countrycode_.Set(value, GetArenaForAllocation());
}
inline std::string* ZtCommonInfo::_internal_mutable_countrycode() {
  
  return _impl_.countrycode_.Mutable(GetArenaForAllocation());
}
inline std::string* ZtCommonInfo::release_countrycode() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.ZtCommonInfo.countryCode)
  return _impl_.countrycode_.Release();
}
inline void ZtCommonInfo::set_allocated_countrycode(std::string* countrycode) {
  if (countrycode != nullptr) {
    
  } else {
    
  }
  _impl_.countrycode_.SetAllocated(countrycode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.countrycode_.IsDefault()) {
    _impl_.countrycode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.ZtCommonInfo.countryCode)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Basic
}  // namespace Im
}  // namespace AcFunDanmu

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ZtCommonInfo_2eproto
