// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UpstreamPayload.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_UpstreamPayload_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_UpstreamPayload_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "FrontendInfo.pb.h"
#include "RequsetBasicInfo.pb.h"
#include "SettingInfo.pb.h"
#include "UserInstance.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_UpstreamPayload_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_UpstreamPayload_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_UpstreamPayload_2eproto;
namespace AcFunDanmu {
namespace Im {
namespace Basic {
class UpstreamPayload;
struct UpstreamPayloadDefaultTypeInternal;
extern UpstreamPayloadDefaultTypeInternal _UpstreamPayload_default_instance_;
}  // namespace Basic
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::Im::Basic::UpstreamPayload* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Basic::UpstreamPayload>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {
namespace Im {
namespace Basic {

// ===================================================================

class UpstreamPayload final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Basic.UpstreamPayload) */ {
 public:
  inline UpstreamPayload() : UpstreamPayload(nullptr) {}
  ~UpstreamPayload() override;
  explicit PROTOBUF_CONSTEXPR UpstreamPayload(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpstreamPayload(const UpstreamPayload& from);
  UpstreamPayload(UpstreamPayload&& from) noexcept
    : UpstreamPayload() {
    *this = ::std::move(from);
  }

  inline UpstreamPayload& operator=(const UpstreamPayload& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpstreamPayload& operator=(UpstreamPayload&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpstreamPayload& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpstreamPayload* internal_default_instance() {
    return reinterpret_cast<const UpstreamPayload*>(
               &_UpstreamPayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UpstreamPayload& a, UpstreamPayload& b) {
    a.Swap(&b);
  }
  inline void Swap(UpstreamPayload* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpstreamPayload* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpstreamPayload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpstreamPayload>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpstreamPayload& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpstreamPayload& from) {
    UpstreamPayload::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpstreamPayload* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Basic.UpstreamPayload";
  }
  protected:
  explicit UpstreamPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kPayloadDataFieldNumber = 4,
    kSubBizFieldNumber = 9,
    kKpnFieldNumber = 11,
    kLaneIdFieldNumber = 13,
    kUserInstanceFieldNumber = 5,
    kSettingInfoFieldNumber = 7,
    kRequestBasicInfoFieldNumber = 8,
    kFrontendInfoFieldNumber = 10,
    kSeqIdFieldNumber = 2,
    kRetryCountFieldNumber = 3,
    kErrorCodeFieldNumber = 6,
    kAnonymouseUserFieldNumber = 12,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_command(ArgT0&& arg0, ArgT... args);
  std::string* mutable_command();
  PROTOBUF_NODISCARD std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // bytes payloadData = 4;
  void clear_payloaddata();
  const std::string& payloaddata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payloaddata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payloaddata();
  PROTOBUF_NODISCARD std::string* release_payloaddata();
  void set_allocated_payloaddata(std::string* payloaddata);
  private:
  const std::string& _internal_payloaddata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payloaddata(const std::string& value);
  std::string* _internal_mutable_payloaddata();
  public:

  // string subBiz = 9;
  void clear_subbiz();
  const std::string& subbiz() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subbiz(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subbiz();
  PROTOBUF_NODISCARD std::string* release_subbiz();
  void set_allocated_subbiz(std::string* subbiz);
  private:
  const std::string& _internal_subbiz() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subbiz(const std::string& value);
  std::string* _internal_mutable_subbiz();
  public:

  // string kpn = 11;
  void clear_kpn();
  const std::string& kpn() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_kpn(ArgT0&& arg0, ArgT... args);
  std::string* mutable_kpn();
  PROTOBUF_NODISCARD std::string* release_kpn();
  void set_allocated_kpn(std::string* kpn);
  private:
  const std::string& _internal_kpn() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_kpn(const std::string& value);
  std::string* _internal_mutable_kpn();
  public:

  // string laneId = 13;
  void clear_laneid();
  const std::string& laneid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_laneid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_laneid();
  PROTOBUF_NODISCARD std::string* release_laneid();
  void set_allocated_laneid(std::string* laneid);
  private:
  const std::string& _internal_laneid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_laneid(const std::string& value);
  std::string* _internal_mutable_laneid();
  public:

  // .AcFunDanmu.Im.Basic.UserInstance userInstance = 5;
  bool has_userinstance() const;
  private:
  bool _internal_has_userinstance() const;
  public:
  void clear_userinstance();
  const ::AcFunDanmu::Im::Basic::UserInstance& userinstance() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Basic::UserInstance* release_userinstance();
  ::AcFunDanmu::Im::Basic::UserInstance* mutable_userinstance();
  void set_allocated_userinstance(::AcFunDanmu::Im::Basic::UserInstance* userinstance);
  private:
  const ::AcFunDanmu::Im::Basic::UserInstance& _internal_userinstance() const;
  ::AcFunDanmu::Im::Basic::UserInstance* _internal_mutable_userinstance();
  public:
  void unsafe_arena_set_allocated_userinstance(
      ::AcFunDanmu::Im::Basic::UserInstance* userinstance);
  ::AcFunDanmu::Im::Basic::UserInstance* unsafe_arena_release_userinstance();

  // .AcFunDanmu.Im.Basic.SettingInfo settingInfo = 7;
  bool has_settinginfo() const;
  private:
  bool _internal_has_settinginfo() const;
  public:
  void clear_settinginfo();
  const ::AcFunDanmu::Im::Basic::SettingInfo& settinginfo() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Basic::SettingInfo* release_settinginfo();
  ::AcFunDanmu::Im::Basic::SettingInfo* mutable_settinginfo();
  void set_allocated_settinginfo(::AcFunDanmu::Im::Basic::SettingInfo* settinginfo);
  private:
  const ::AcFunDanmu::Im::Basic::SettingInfo& _internal_settinginfo() const;
  ::AcFunDanmu::Im::Basic::SettingInfo* _internal_mutable_settinginfo();
  public:
  void unsafe_arena_set_allocated_settinginfo(
      ::AcFunDanmu::Im::Basic::SettingInfo* settinginfo);
  ::AcFunDanmu::Im::Basic::SettingInfo* unsafe_arena_release_settinginfo();

  // .AcFunDanmu.Im.Basic.RequsetBasicInfo requestBasicInfo = 8;
  bool has_requestbasicinfo() const;
  private:
  bool _internal_has_requestbasicinfo() const;
  public:
  void clear_requestbasicinfo();
  const ::AcFunDanmu::Im::Basic::RequsetBasicInfo& requestbasicinfo() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Basic::RequsetBasicInfo* release_requestbasicinfo();
  ::AcFunDanmu::Im::Basic::RequsetBasicInfo* mutable_requestbasicinfo();
  void set_allocated_requestbasicinfo(::AcFunDanmu::Im::Basic::RequsetBasicInfo* requestbasicinfo);
  private:
  const ::AcFunDanmu::Im::Basic::RequsetBasicInfo& _internal_requestbasicinfo() const;
  ::AcFunDanmu::Im::Basic::RequsetBasicInfo* _internal_mutable_requestbasicinfo();
  public:
  void unsafe_arena_set_allocated_requestbasicinfo(
      ::AcFunDanmu::Im::Basic::RequsetBasicInfo* requestbasicinfo);
  ::AcFunDanmu::Im::Basic::RequsetBasicInfo* unsafe_arena_release_requestbasicinfo();

  // .AcFunDanmu.Im.Basic.FrontendInfo frontendInfo = 10;
  bool has_frontendinfo() const;
  private:
  bool _internal_has_frontendinfo() const;
  public:
  void clear_frontendinfo();
  const ::AcFunDanmu::Im::Basic::FrontendInfo& frontendinfo() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Basic::FrontendInfo* release_frontendinfo();
  ::AcFunDanmu::Im::Basic::FrontendInfo* mutable_frontendinfo();
  void set_allocated_frontendinfo(::AcFunDanmu::Im::Basic::FrontendInfo* frontendinfo);
  private:
  const ::AcFunDanmu::Im::Basic::FrontendInfo& _internal_frontendinfo() const;
  ::AcFunDanmu::Im::Basic::FrontendInfo* _internal_mutable_frontendinfo();
  public:
  void unsafe_arena_set_allocated_frontendinfo(
      ::AcFunDanmu::Im::Basic::FrontendInfo* frontendinfo);
  ::AcFunDanmu::Im::Basic::FrontendInfo* unsafe_arena_release_frontendinfo();

  // int64 seqId = 2;
  void clear_seqid();
  int64_t seqid() const;
  void set_seqid(int64_t value);
  private:
  int64_t _internal_seqid() const;
  void _internal_set_seqid(int64_t value);
  public:

  // uint32 retryCount = 3;
  void clear_retrycount();
  uint32_t retrycount() const;
  void set_retrycount(uint32_t value);
  private:
  uint32_t _internal_retrycount() const;
  void _internal_set_retrycount(uint32_t value);
  public:

  // int32 errorCode = 6;
  void clear_errorcode();
  int32_t errorcode() const;
  void set_errorcode(int32_t value);
  private:
  int32_t _internal_errorcode() const;
  void _internal_set_errorcode(int32_t value);
  public:

  // bool anonymouseUser = 12;
  void clear_anonymouseuser();
  bool anonymouseuser() const;
  void set_anonymouseuser(bool value);
  private:
  bool _internal_anonymouseuser() const;
  void _internal_set_anonymouseuser(bool value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Basic.UpstreamPayload)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payloaddata_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subbiz_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kpn_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr laneid_;
    ::AcFunDanmu::Im::Basic::UserInstance* userinstance_;
    ::AcFunDanmu::Im::Basic::SettingInfo* settinginfo_;
    ::AcFunDanmu::Im::Basic::RequsetBasicInfo* requestbasicinfo_;
    ::AcFunDanmu::Im::Basic::FrontendInfo* frontendinfo_;
    int64_t seqid_;
    uint32_t retrycount_;
    int32_t errorcode_;
    bool anonymouseuser_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_UpstreamPayload_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UpstreamPayload

// string command = 1;
inline void UpstreamPayload::clear_command() {
  _impl_.command_.ClearToEmpty();
}
inline const std::string& UpstreamPayload::command() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.UpstreamPayload.command)
  return _internal_command();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpstreamPayload::set_command(ArgT0&& arg0, ArgT... args) {
 
 _impl_.command_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.UpstreamPayload.command)
}
inline std::string* UpstreamPayload::mutable_command() {
  std::string* _s = _internal_mutable_command();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.UpstreamPayload.command)
  return _s;
}
inline const std::string& UpstreamPayload::_internal_command() const {
  return _impl_.command_.Get();
}
inline void UpstreamPayload::_internal_set_command(const std::string& value) {
  
  _impl_.command_.Set(value, GetArenaForAllocation());
}
inline std::string* UpstreamPayload::_internal_mutable_command() {
  
  return _impl_.command_.Mutable(GetArenaForAllocation());
}
inline std::string* UpstreamPayload::release_command() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.UpstreamPayload.command)
  return _impl_.command_.Release();
}
inline void UpstreamPayload::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  _impl_.command_.SetAllocated(command, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.command_.IsDefault()) {
    _impl_.command_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.UpstreamPayload.command)
}

// int64 seqId = 2;
inline void UpstreamPayload::clear_seqid() {
  _impl_.seqid_ = int64_t{0};
}
inline int64_t UpstreamPayload::_internal_seqid() const {
  return _impl_.seqid_;
}
inline int64_t UpstreamPayload::seqid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.UpstreamPayload.seqId)
  return _internal_seqid();
}
inline void UpstreamPayload::_internal_set_seqid(int64_t value) {
  
  _impl_.seqid_ = value;
}
inline void UpstreamPayload::set_seqid(int64_t value) {
  _internal_set_seqid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.UpstreamPayload.seqId)
}

// uint32 retryCount = 3;
inline void UpstreamPayload::clear_retrycount() {
  _impl_.retrycount_ = 0u;
}
inline uint32_t UpstreamPayload::_internal_retrycount() const {
  return _impl_.retrycount_;
}
inline uint32_t UpstreamPayload::retrycount() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.UpstreamPayload.retryCount)
  return _internal_retrycount();
}
inline void UpstreamPayload::_internal_set_retrycount(uint32_t value) {
  
  _impl_.retrycount_ = value;
}
inline void UpstreamPayload::set_retrycount(uint32_t value) {
  _internal_set_retrycount(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.UpstreamPayload.retryCount)
}

// bytes payloadData = 4;
inline void UpstreamPayload::clear_payloaddata() {
  _impl_.payloaddata_.ClearToEmpty();
}
inline const std::string& UpstreamPayload::payloaddata() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.UpstreamPayload.payloadData)
  return _internal_payloaddata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpstreamPayload::set_payloaddata(ArgT0&& arg0, ArgT... args) {
 
 _impl_.payloaddata_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.UpstreamPayload.payloadData)
}
inline std::string* UpstreamPayload::mutable_payloaddata() {
  std::string* _s = _internal_mutable_payloaddata();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.UpstreamPayload.payloadData)
  return _s;
}
inline const std::string& UpstreamPayload::_internal_payloaddata() const {
  return _impl_.payloaddata_.Get();
}
inline void UpstreamPayload::_internal_set_payloaddata(const std::string& value) {
  
  _impl_.payloaddata_.Set(value, GetArenaForAllocation());
}
inline std::string* UpstreamPayload::_internal_mutable_payloaddata() {
  
  return _impl_.payloaddata_.Mutable(GetArenaForAllocation());
}
inline std::string* UpstreamPayload::release_payloaddata() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.UpstreamPayload.payloadData)
  return _impl_.payloaddata_.Release();
}
inline void UpstreamPayload::set_allocated_payloaddata(std::string* payloaddata) {
  if (payloaddata != nullptr) {
    
  } else {
    
  }
  _impl_.payloaddata_.SetAllocated(payloaddata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.payloaddata_.IsDefault()) {
    _impl_.payloaddata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.UpstreamPayload.payloadData)
}

// .AcFunDanmu.Im.Basic.UserInstance userInstance = 5;
inline bool UpstreamPayload::_internal_has_userinstance() const {
  return this != internal_default_instance() && _impl_.userinstance_ != nullptr;
}
inline bool UpstreamPayload::has_userinstance() const {
  return _internal_has_userinstance();
}
inline const ::AcFunDanmu::Im::Basic::UserInstance& UpstreamPayload::_internal_userinstance() const {
  const ::AcFunDanmu::Im::Basic::UserInstance* p = _impl_.userinstance_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic::UserInstance&>(
      ::AcFunDanmu::Im::Basic::_UserInstance_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic::UserInstance& UpstreamPayload::userinstance() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.UpstreamPayload.userInstance)
  return _internal_userinstance();
}
inline void UpstreamPayload::unsafe_arena_set_allocated_userinstance(
    ::AcFunDanmu::Im::Basic::UserInstance* userinstance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinstance_);
  }
  _impl_.userinstance_ = userinstance;
  if (userinstance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Basic.UpstreamPayload.userInstance)
}
inline ::AcFunDanmu::Im::Basic::UserInstance* UpstreamPayload::release_userinstance() {
  
  ::AcFunDanmu::Im::Basic::UserInstance* temp = _impl_.userinstance_;
  _impl_.userinstance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AcFunDanmu::Im::Basic::UserInstance* UpstreamPayload::unsafe_arena_release_userinstance() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.UpstreamPayload.userInstance)
  
  ::AcFunDanmu::Im::Basic::UserInstance* temp = _impl_.userinstance_;
  _impl_.userinstance_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic::UserInstance* UpstreamPayload::_internal_mutable_userinstance() {
  
  if (_impl_.userinstance_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic::UserInstance>(GetArenaForAllocation());
    _impl_.userinstance_ = p;
  }
  return _impl_.userinstance_;
}
inline ::AcFunDanmu::Im::Basic::UserInstance* UpstreamPayload::mutable_userinstance() {
  ::AcFunDanmu::Im::Basic::UserInstance* _msg = _internal_mutable_userinstance();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.UpstreamPayload.userInstance)
  return _msg;
}
inline void UpstreamPayload::set_allocated_userinstance(::AcFunDanmu::Im::Basic::UserInstance* userinstance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinstance_);
  }
  if (userinstance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userinstance));
    if (message_arena != submessage_arena) {
      userinstance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userinstance, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userinstance_ = userinstance;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.UpstreamPayload.userInstance)
}

// int32 errorCode = 6;
inline void UpstreamPayload::clear_errorcode() {
  _impl_.errorcode_ = 0;
}
inline int32_t UpstreamPayload::_internal_errorcode() const {
  return _impl_.errorcode_;
}
inline int32_t UpstreamPayload::errorcode() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.UpstreamPayload.errorCode)
  return _internal_errorcode();
}
inline void UpstreamPayload::_internal_set_errorcode(int32_t value) {
  
  _impl_.errorcode_ = value;
}
inline void UpstreamPayload::set_errorcode(int32_t value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.UpstreamPayload.errorCode)
}

// .AcFunDanmu.Im.Basic.SettingInfo settingInfo = 7;
inline bool UpstreamPayload::_internal_has_settinginfo() const {
  return this != internal_default_instance() && _impl_.settinginfo_ != nullptr;
}
inline bool UpstreamPayload::has_settinginfo() const {
  return _internal_has_settinginfo();
}
inline const ::AcFunDanmu::Im::Basic::SettingInfo& UpstreamPayload::_internal_settinginfo() const {
  const ::AcFunDanmu::Im::Basic::SettingInfo* p = _impl_.settinginfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic::SettingInfo&>(
      ::AcFunDanmu::Im::Basic::_SettingInfo_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic::SettingInfo& UpstreamPayload::settinginfo() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.UpstreamPayload.settingInfo)
  return _internal_settinginfo();
}
inline void UpstreamPayload::unsafe_arena_set_allocated_settinginfo(
    ::AcFunDanmu::Im::Basic::SettingInfo* settinginfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.settinginfo_);
  }
  _impl_.settinginfo_ = settinginfo;
  if (settinginfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Basic.UpstreamPayload.settingInfo)
}
inline ::AcFunDanmu::Im::Basic::SettingInfo* UpstreamPayload::release_settinginfo() {
  
  ::AcFunDanmu::Im::Basic::SettingInfo* temp = _impl_.settinginfo_;
  _impl_.settinginfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AcFunDanmu::Im::Basic::SettingInfo* UpstreamPayload::unsafe_arena_release_settinginfo() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.UpstreamPayload.settingInfo)
  
  ::AcFunDanmu::Im::Basic::SettingInfo* temp = _impl_.settinginfo_;
  _impl_.settinginfo_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic::SettingInfo* UpstreamPayload::_internal_mutable_settinginfo() {
  
  if (_impl_.settinginfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic::SettingInfo>(GetArenaForAllocation());
    _impl_.settinginfo_ = p;
  }
  return _impl_.settinginfo_;
}
inline ::AcFunDanmu::Im::Basic::SettingInfo* UpstreamPayload::mutable_settinginfo() {
  ::AcFunDanmu::Im::Basic::SettingInfo* _msg = _internal_mutable_settinginfo();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.UpstreamPayload.settingInfo)
  return _msg;
}
inline void UpstreamPayload::set_allocated_settinginfo(::AcFunDanmu::Im::Basic::SettingInfo* settinginfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.settinginfo_);
  }
  if (settinginfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(settinginfo));
    if (message_arena != submessage_arena) {
      settinginfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settinginfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.settinginfo_ = settinginfo;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.UpstreamPayload.settingInfo)
}

// .AcFunDanmu.Im.Basic.RequsetBasicInfo requestBasicInfo = 8;
inline bool UpstreamPayload::_internal_has_requestbasicinfo() const {
  return this != internal_default_instance() && _impl_.requestbasicinfo_ != nullptr;
}
inline bool UpstreamPayload::has_requestbasicinfo() const {
  return _internal_has_requestbasicinfo();
}
inline const ::AcFunDanmu::Im::Basic::RequsetBasicInfo& UpstreamPayload::_internal_requestbasicinfo() const {
  const ::AcFunDanmu::Im::Basic::RequsetBasicInfo* p = _impl_.requestbasicinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic::RequsetBasicInfo&>(
      ::AcFunDanmu::Im::Basic::_RequsetBasicInfo_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic::RequsetBasicInfo& UpstreamPayload::requestbasicinfo() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.UpstreamPayload.requestBasicInfo)
  return _internal_requestbasicinfo();
}
inline void UpstreamPayload::unsafe_arena_set_allocated_requestbasicinfo(
    ::AcFunDanmu::Im::Basic::RequsetBasicInfo* requestbasicinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.requestbasicinfo_);
  }
  _impl_.requestbasicinfo_ = requestbasicinfo;
  if (requestbasicinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Basic.UpstreamPayload.requestBasicInfo)
}
inline ::AcFunDanmu::Im::Basic::RequsetBasicInfo* UpstreamPayload::release_requestbasicinfo() {
  
  ::AcFunDanmu::Im::Basic::RequsetBasicInfo* temp = _impl_.requestbasicinfo_;
  _impl_.requestbasicinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AcFunDanmu::Im::Basic::RequsetBasicInfo* UpstreamPayload::unsafe_arena_release_requestbasicinfo() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.UpstreamPayload.requestBasicInfo)
  
  ::AcFunDanmu::Im::Basic::RequsetBasicInfo* temp = _impl_.requestbasicinfo_;
  _impl_.requestbasicinfo_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic::RequsetBasicInfo* UpstreamPayload::_internal_mutable_requestbasicinfo() {
  
  if (_impl_.requestbasicinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic::RequsetBasicInfo>(GetArenaForAllocation());
    _impl_.requestbasicinfo_ = p;
  }
  return _impl_.requestbasicinfo_;
}
inline ::AcFunDanmu::Im::Basic::RequsetBasicInfo* UpstreamPayload::mutable_requestbasicinfo() {
  ::AcFunDanmu::Im::Basic::RequsetBasicInfo* _msg = _internal_mutable_requestbasicinfo();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.UpstreamPayload.requestBasicInfo)
  return _msg;
}
inline void UpstreamPayload::set_allocated_requestbasicinfo(::AcFunDanmu::Im::Basic::RequsetBasicInfo* requestbasicinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.requestbasicinfo_);
  }
  if (requestbasicinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestbasicinfo));
    if (message_arena != submessage_arena) {
      requestbasicinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestbasicinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.requestbasicinfo_ = requestbasicinfo;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.UpstreamPayload.requestBasicInfo)
}

// string subBiz = 9;
inline void UpstreamPayload::clear_subbiz() {
  _impl_.subbiz_.ClearToEmpty();
}
inline const std::string& UpstreamPayload::subbiz() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.UpstreamPayload.subBiz)
  return _internal_subbiz();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpstreamPayload::set_subbiz(ArgT0&& arg0, ArgT... args) {
 
 _impl_.subbiz_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.UpstreamPayload.subBiz)
}
inline std::string* UpstreamPayload::mutable_subbiz() {
  std::string* _s = _internal_mutable_subbiz();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.UpstreamPayload.subBiz)
  return _s;
}
inline const std::string& UpstreamPayload::_internal_subbiz() const {
  return _impl_.subbiz_.Get();
}
inline void UpstreamPayload::_internal_set_subbiz(const std::string& value) {
  
  _impl_.subbiz_.Set(value, GetArenaForAllocation());
}
inline std::string* UpstreamPayload::_internal_mutable_subbiz() {
  
  return _impl_.subbiz_.Mutable(GetArenaForAllocation());
}
inline std::string* UpstreamPayload::release_subbiz() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.UpstreamPayload.subBiz)
  return _impl_.subbiz_.Release();
}
inline void UpstreamPayload::set_allocated_subbiz(std::string* subbiz) {
  if (subbiz != nullptr) {
    
  } else {
    
  }
  _impl_.subbiz_.SetAllocated(subbiz, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.subbiz_.IsDefault()) {
    _impl_.subbiz_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.UpstreamPayload.subBiz)
}

// .AcFunDanmu.Im.Basic.FrontendInfo frontendInfo = 10;
inline bool UpstreamPayload::_internal_has_frontendinfo() const {
  return this != internal_default_instance() && _impl_.frontendinfo_ != nullptr;
}
inline bool UpstreamPayload::has_frontendinfo() const {
  return _internal_has_frontendinfo();
}
inline const ::AcFunDanmu::Im::Basic::FrontendInfo& UpstreamPayload::_internal_frontendinfo() const {
  const ::AcFunDanmu::Im::Basic::FrontendInfo* p = _impl_.frontendinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic::FrontendInfo&>(
      ::AcFunDanmu::Im::Basic::_FrontendInfo_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic::FrontendInfo& UpstreamPayload::frontendinfo() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.UpstreamPayload.frontendInfo)
  return _internal_frontendinfo();
}
inline void UpstreamPayload::unsafe_arena_set_allocated_frontendinfo(
    ::AcFunDanmu::Im::Basic::FrontendInfo* frontendinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.frontendinfo_);
  }
  _impl_.frontendinfo_ = frontendinfo;
  if (frontendinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Basic.UpstreamPayload.frontendInfo)
}
inline ::AcFunDanmu::Im::Basic::FrontendInfo* UpstreamPayload::release_frontendinfo() {
  
  ::AcFunDanmu::Im::Basic::FrontendInfo* temp = _impl_.frontendinfo_;
  _impl_.frontendinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AcFunDanmu::Im::Basic::FrontendInfo* UpstreamPayload::unsafe_arena_release_frontendinfo() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.UpstreamPayload.frontendInfo)
  
  ::AcFunDanmu::Im::Basic::FrontendInfo* temp = _impl_.frontendinfo_;
  _impl_.frontendinfo_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic::FrontendInfo* UpstreamPayload::_internal_mutable_frontendinfo() {
  
  if (_impl_.frontendinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic::FrontendInfo>(GetArenaForAllocation());
    _impl_.frontendinfo_ = p;
  }
  return _impl_.frontendinfo_;
}
inline ::AcFunDanmu::Im::Basic::FrontendInfo* UpstreamPayload::mutable_frontendinfo() {
  ::AcFunDanmu::Im::Basic::FrontendInfo* _msg = _internal_mutable_frontendinfo();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.UpstreamPayload.frontendInfo)
  return _msg;
}
inline void UpstreamPayload::set_allocated_frontendinfo(::AcFunDanmu::Im::Basic::FrontendInfo* frontendinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.frontendinfo_);
  }
  if (frontendinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(frontendinfo));
    if (message_arena != submessage_arena) {
      frontendinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, frontendinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.frontendinfo_ = frontendinfo;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.UpstreamPayload.frontendInfo)
}

// string kpn = 11;
inline void UpstreamPayload::clear_kpn() {
  _impl_.kpn_.ClearToEmpty();
}
inline const std::string& UpstreamPayload::kpn() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.UpstreamPayload.kpn)
  return _internal_kpn();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpstreamPayload::set_kpn(ArgT0&& arg0, ArgT... args) {
 
 _impl_.kpn_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.UpstreamPayload.kpn)
}
inline std::string* UpstreamPayload::mutable_kpn() {
  std::string* _s = _internal_mutable_kpn();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.UpstreamPayload.kpn)
  return _s;
}
inline const std::string& UpstreamPayload::_internal_kpn() const {
  return _impl_.kpn_.Get();
}
inline void UpstreamPayload::_internal_set_kpn(const std::string& value) {
  
  _impl_.kpn_.Set(value, GetArenaForAllocation());
}
inline std::string* UpstreamPayload::_internal_mutable_kpn() {
  
  return _impl_.kpn_.Mutable(GetArenaForAllocation());
}
inline std::string* UpstreamPayload::release_kpn() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.UpstreamPayload.kpn)
  return _impl_.kpn_.Release();
}
inline void UpstreamPayload::set_allocated_kpn(std::string* kpn) {
  if (kpn != nullptr) {
    
  } else {
    
  }
  _impl_.kpn_.SetAllocated(kpn, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.kpn_.IsDefault()) {
    _impl_.kpn_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.UpstreamPayload.kpn)
}

// bool anonymouseUser = 12;
inline void UpstreamPayload::clear_anonymouseuser() {
  _impl_.anonymouseuser_ = false;
}
inline bool UpstreamPayload::_internal_anonymouseuser() const {
  return _impl_.anonymouseuser_;
}
inline bool UpstreamPayload::anonymouseuser() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.UpstreamPayload.anonymouseUser)
  return _internal_anonymouseuser();
}
inline void UpstreamPayload::_internal_set_anonymouseuser(bool value) {
  
  _impl_.anonymouseuser_ = value;
}
inline void UpstreamPayload::set_anonymouseuser(bool value) {
  _internal_set_anonymouseuser(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.UpstreamPayload.anonymouseUser)
}

// string laneId = 13;
inline void UpstreamPayload::clear_laneid() {
  _impl_.laneid_.ClearToEmpty();
}
inline const std::string& UpstreamPayload::laneid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.UpstreamPayload.laneId)
  return _internal_laneid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpstreamPayload::set_laneid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.laneid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.UpstreamPayload.laneId)
}
inline std::string* UpstreamPayload::mutable_laneid() {
  std::string* _s = _internal_mutable_laneid();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.UpstreamPayload.laneId)
  return _s;
}
inline const std::string& UpstreamPayload::_internal_laneid() const {
  return _impl_.laneid_.Get();
}
inline void UpstreamPayload::_internal_set_laneid(const std::string& value) {
  
  _impl_.laneid_.Set(value, GetArenaForAllocation());
}
inline std::string* UpstreamPayload::_internal_mutable_laneid() {
  
  return _impl_.laneid_.Mutable(GetArenaForAllocation());
}
inline std::string* UpstreamPayload::release_laneid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.UpstreamPayload.laneId)
  return _impl_.laneid_.Release();
}
inline void UpstreamPayload::set_allocated_laneid(std::string* laneid) {
  if (laneid != nullptr) {
    
  } else {
    
  }
  _impl_.laneid_.SetAllocated(laneid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.laneid_.IsDefault()) {
    _impl_.laneid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.UpstreamPayload.laneId)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Basic
}  // namespace Im
}  // namespace AcFunDanmu

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_UpstreamPayload_2eproto
