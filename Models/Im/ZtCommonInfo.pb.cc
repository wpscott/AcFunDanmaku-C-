// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ZtCommonInfo.proto

#include "ZtCommonInfo.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace AcFunDanmu {
namespace Im {
namespace Basic {
PROTOBUF_CONSTEXPR ZtCommonInfo::ZtCommonInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.kpn_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.kpf_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.subbiz_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.did_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.appver_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ver_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lat_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lon_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mod_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.net_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sys_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.c_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.language_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.countrycode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uid_)*/int64_t{0}
  , /*decltype(_impl_.clientip_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ZtCommonInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ZtCommonInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ZtCommonInfoDefaultTypeInternal() {}
  union {
    ZtCommonInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ZtCommonInfoDefaultTypeInternal _ZtCommonInfo_default_instance_;
}  // namespace Basic
}  // namespace Im
}  // namespace AcFunDanmu
static ::_pb::Metadata file_level_metadata_ZtCommonInfo_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_ZtCommonInfo_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ZtCommonInfo_2eproto = nullptr;

const uint32_t TableStruct_ZtCommonInfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::ZtCommonInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::ZtCommonInfo, _impl_.kpn_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::ZtCommonInfo, _impl_.kpf_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::ZtCommonInfo, _impl_.subbiz_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::ZtCommonInfo, _impl_.uid_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::ZtCommonInfo, _impl_.did_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::ZtCommonInfo, _impl_.clientip_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::ZtCommonInfo, _impl_.appver_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::ZtCommonInfo, _impl_.ver_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::ZtCommonInfo, _impl_.lat_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::ZtCommonInfo, _impl_.lon_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::ZtCommonInfo, _impl_.mod_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::ZtCommonInfo, _impl_.net_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::ZtCommonInfo, _impl_.sys_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::ZtCommonInfo, _impl_.c_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::ZtCommonInfo, _impl_.language_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::ZtCommonInfo, _impl_.countrycode_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::AcFunDanmu::Im::Basic::ZtCommonInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::AcFunDanmu::Im::Basic::_ZtCommonInfo_default_instance_._instance,
};

const char descriptor_table_protodef_ZtCommonInfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022ZtCommonInfo.proto\022\023AcFunDanmu.Im.Basi"
  "c\"\364\001\n\014ZtCommonInfo\022\013\n\003kpn\030\001 \001(\t\022\013\n\003kpf\030\002"
  " \001(\t\022\016\n\006subBiz\030\003 \001(\t\022\013\n\003uid\030\004 \001(\003\022\013\n\003did"
  "\030\005 \001(\t\022\020\n\010clientIp\030\006 \001(\003\022\016\n\006appVer\030\007 \001(\t"
  "\022\013\n\003ver\030\010 \001(\t\022\013\n\003lat\030\t \001(\t\022\013\n\003lon\030\n \001(\t\022"
  "\013\n\003mod\030\013 \001(\t\022\013\n\003net\030\014 \001(\t\022\013\n\003sys\030\r \001(\t\022\t"
  "\n\001c\030\016 \001(\t\022\020\n\010language\030\017 \001(\t\022\023\n\013countryCo"
  "de\030\020 \001(\tb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_ZtCommonInfo_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ZtCommonInfo_2eproto = {
    false, false, 296, descriptor_table_protodef_ZtCommonInfo_2eproto,
    "ZtCommonInfo.proto",
    &descriptor_table_ZtCommonInfo_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_ZtCommonInfo_2eproto::offsets,
    file_level_metadata_ZtCommonInfo_2eproto, file_level_enum_descriptors_ZtCommonInfo_2eproto,
    file_level_service_descriptors_ZtCommonInfo_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ZtCommonInfo_2eproto_getter() {
  return &descriptor_table_ZtCommonInfo_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ZtCommonInfo_2eproto(&descriptor_table_ZtCommonInfo_2eproto);
namespace AcFunDanmu {
namespace Im {
namespace Basic {

// ===================================================================

class ZtCommonInfo::_Internal {
 public:
};

ZtCommonInfo::ZtCommonInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.Im.Basic.ZtCommonInfo)
}
ZtCommonInfo::ZtCommonInfo(const ZtCommonInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ZtCommonInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.kpn_){}
    , decltype(_impl_.kpf_){}
    , decltype(_impl_.subbiz_){}
    , decltype(_impl_.did_){}
    , decltype(_impl_.appver_){}
    , decltype(_impl_.ver_){}
    , decltype(_impl_.lat_){}
    , decltype(_impl_.lon_){}
    , decltype(_impl_.mod_){}
    , decltype(_impl_.net_){}
    , decltype(_impl_.sys_){}
    , decltype(_impl_.c_){}
    , decltype(_impl_.language_){}
    , decltype(_impl_.countrycode_){}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.clientip_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.kpn_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.kpn_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_kpn().empty()) {
    _this->_impl_.kpn_.Set(from._internal_kpn(), 
      _this->GetArenaForAllocation());
  }
  _impl_.kpf_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.kpf_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_kpf().empty()) {
    _this->_impl_.kpf_.Set(from._internal_kpf(), 
      _this->GetArenaForAllocation());
  }
  _impl_.subbiz_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subbiz_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subbiz().empty()) {
    _this->_impl_.subbiz_.Set(from._internal_subbiz(), 
      _this->GetArenaForAllocation());
  }
  _impl_.did_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.did_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_did().empty()) {
    _this->_impl_.did_.Set(from._internal_did(), 
      _this->GetArenaForAllocation());
  }
  _impl_.appver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.appver_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_appver().empty()) {
    _this->_impl_.appver_.Set(from._internal_appver(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ver_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ver().empty()) {
    _this->_impl_.ver_.Set(from._internal_ver(), 
      _this->GetArenaForAllocation());
  }
  _impl_.lat_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lat_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lat().empty()) {
    _this->_impl_.lat_.Set(from._internal_lat(), 
      _this->GetArenaForAllocation());
  }
  _impl_.lon_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lon_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lon().empty()) {
    _this->_impl_.lon_.Set(from._internal_lon(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mod_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mod_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mod().empty()) {
    _this->_impl_.mod_.Set(from._internal_mod(), 
      _this->GetArenaForAllocation());
  }
  _impl_.net_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.net_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_net().empty()) {
    _this->_impl_.net_.Set(from._internal_net(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sys_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sys_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sys().empty()) {
    _this->_impl_.sys_.Set(from._internal_sys(), 
      _this->GetArenaForAllocation());
  }
  _impl_.c_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.c_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_c().empty()) {
    _this->_impl_.c_.Set(from._internal_c(), 
      _this->GetArenaForAllocation());
  }
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_language().empty()) {
    _this->_impl_.language_.Set(from._internal_language(), 
      _this->GetArenaForAllocation());
  }
  _impl_.countrycode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.countrycode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_countrycode().empty()) {
    _this->_impl_.countrycode_.Set(from._internal_countrycode(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.uid_, &from._impl_.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.clientip_) -
    reinterpret_cast<char*>(&_impl_.uid_)) + sizeof(_impl_.clientip_));
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.Im.Basic.ZtCommonInfo)
}

inline void ZtCommonInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.kpn_){}
    , decltype(_impl_.kpf_){}
    , decltype(_impl_.subbiz_){}
    , decltype(_impl_.did_){}
    , decltype(_impl_.appver_){}
    , decltype(_impl_.ver_){}
    , decltype(_impl_.lat_){}
    , decltype(_impl_.lon_){}
    , decltype(_impl_.mod_){}
    , decltype(_impl_.net_){}
    , decltype(_impl_.sys_){}
    , decltype(_impl_.c_){}
    , decltype(_impl_.language_){}
    , decltype(_impl_.countrycode_){}
    , decltype(_impl_.uid_){int64_t{0}}
    , decltype(_impl_.clientip_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.kpn_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.kpn_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.kpf_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.kpf_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subbiz_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subbiz_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.did_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.did_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.appver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.appver_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ver_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.lat_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lat_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.lon_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lon_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mod_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mod_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.net_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.net_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sys_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sys_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.c_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.c_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.countrycode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.countrycode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ZtCommonInfo::~ZtCommonInfo() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.Im.Basic.ZtCommonInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ZtCommonInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.kpn_.Destroy();
  _impl_.kpf_.Destroy();
  _impl_.subbiz_.Destroy();
  _impl_.did_.Destroy();
  _impl_.appver_.Destroy();
  _impl_.ver_.Destroy();
  _impl_.lat_.Destroy();
  _impl_.lon_.Destroy();
  _impl_.mod_.Destroy();
  _impl_.net_.Destroy();
  _impl_.sys_.Destroy();
  _impl_.c_.Destroy();
  _impl_.language_.Destroy();
  _impl_.countrycode_.Destroy();
}

void ZtCommonInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ZtCommonInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.Im.Basic.ZtCommonInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.kpn_.ClearToEmpty();
  _impl_.kpf_.ClearToEmpty();
  _impl_.subbiz_.ClearToEmpty();
  _impl_.did_.ClearToEmpty();
  _impl_.appver_.ClearToEmpty();
  _impl_.ver_.ClearToEmpty();
  _impl_.lat_.ClearToEmpty();
  _impl_.lon_.ClearToEmpty();
  _impl_.mod_.ClearToEmpty();
  _impl_.net_.ClearToEmpty();
  _impl_.sys_.ClearToEmpty();
  _impl_.c_.ClearToEmpty();
  _impl_.language_.ClearToEmpty();
  _impl_.countrycode_.ClearToEmpty();
  ::memset(&_impl_.uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.clientip_) -
      reinterpret_cast<char*>(&_impl_.uid_)) + sizeof(_impl_.clientip_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ZtCommonInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string kpn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_kpn();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Basic.ZtCommonInfo.kpn"));
        } else
          goto handle_unusual;
        continue;
      // string kpf = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_kpf();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Basic.ZtCommonInfo.kpf"));
        } else
          goto handle_unusual;
        continue;
      // string subBiz = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_subbiz();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Basic.ZtCommonInfo.subBiz"));
        } else
          goto handle_unusual;
        continue;
      // int64 uid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string did = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_did();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Basic.ZtCommonInfo.did"));
        } else
          goto handle_unusual;
        continue;
      // int64 clientIp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.clientip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string appVer = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_appver();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Basic.ZtCommonInfo.appVer"));
        } else
          goto handle_unusual;
        continue;
      // string ver = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_ver();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Basic.ZtCommonInfo.ver"));
        } else
          goto handle_unusual;
        continue;
      // string lat = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_lat();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Basic.ZtCommonInfo.lat"));
        } else
          goto handle_unusual;
        continue;
      // string lon = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_lon();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Basic.ZtCommonInfo.lon"));
        } else
          goto handle_unusual;
        continue;
      // string mod = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_mod();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Basic.ZtCommonInfo.mod"));
        } else
          goto handle_unusual;
        continue;
      // string net = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_net();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Basic.ZtCommonInfo.net"));
        } else
          goto handle_unusual;
        continue;
      // string sys = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_sys();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Basic.ZtCommonInfo.sys"));
        } else
          goto handle_unusual;
        continue;
      // string c = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_c();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Basic.ZtCommonInfo.c"));
        } else
          goto handle_unusual;
        continue;
      // string language = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_language();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Basic.ZtCommonInfo.language"));
        } else
          goto handle_unusual;
        continue;
      // string countryCode = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_countrycode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Basic.ZtCommonInfo.countryCode"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ZtCommonInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.Im.Basic.ZtCommonInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string kpn = 1;
  if (!this->_internal_kpn().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_kpn().data(), static_cast<int>(this->_internal_kpn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Basic.ZtCommonInfo.kpn");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_kpn(), target);
  }

  // string kpf = 2;
  if (!this->_internal_kpf().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_kpf().data(), static_cast<int>(this->_internal_kpf().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Basic.ZtCommonInfo.kpf");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_kpf(), target);
  }

  // string subBiz = 3;
  if (!this->_internal_subbiz().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subbiz().data(), static_cast<int>(this->_internal_subbiz().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Basic.ZtCommonInfo.subBiz");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_subbiz(), target);
  }

  // int64 uid = 4;
  if (this->_internal_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_uid(), target);
  }

  // string did = 5;
  if (!this->_internal_did().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_did().data(), static_cast<int>(this->_internal_did().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Basic.ZtCommonInfo.did");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_did(), target);
  }

  // int64 clientIp = 6;
  if (this->_internal_clientip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_clientip(), target);
  }

  // string appVer = 7;
  if (!this->_internal_appver().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_appver().data(), static_cast<int>(this->_internal_appver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Basic.ZtCommonInfo.appVer");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_appver(), target);
  }

  // string ver = 8;
  if (!this->_internal_ver().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ver().data(), static_cast<int>(this->_internal_ver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Basic.ZtCommonInfo.ver");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_ver(), target);
  }

  // string lat = 9;
  if (!this->_internal_lat().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lat().data(), static_cast<int>(this->_internal_lat().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Basic.ZtCommonInfo.lat");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_lat(), target);
  }

  // string lon = 10;
  if (!this->_internal_lon().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lon().data(), static_cast<int>(this->_internal_lon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Basic.ZtCommonInfo.lon");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_lon(), target);
  }

  // string mod = 11;
  if (!this->_internal_mod().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mod().data(), static_cast<int>(this->_internal_mod().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Basic.ZtCommonInfo.mod");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_mod(), target);
  }

  // string net = 12;
  if (!this->_internal_net().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_net().data(), static_cast<int>(this->_internal_net().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Basic.ZtCommonInfo.net");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_net(), target);
  }

  // string sys = 13;
  if (!this->_internal_sys().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sys().data(), static_cast<int>(this->_internal_sys().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Basic.ZtCommonInfo.sys");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_sys(), target);
  }

  // string c = 14;
  if (!this->_internal_c().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_c().data(), static_cast<int>(this->_internal_c().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Basic.ZtCommonInfo.c");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_c(), target);
  }

  // string language = 15;
  if (!this->_internal_language().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Basic.ZtCommonInfo.language");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_language(), target);
  }

  // string countryCode = 16;
  if (!this->_internal_countrycode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_countrycode().data(), static_cast<int>(this->_internal_countrycode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Basic.ZtCommonInfo.countryCode");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_countrycode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.Im.Basic.ZtCommonInfo)
  return target;
}

size_t ZtCommonInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.Im.Basic.ZtCommonInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string kpn = 1;
  if (!this->_internal_kpn().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_kpn());
  }

  // string kpf = 2;
  if (!this->_internal_kpf().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_kpf());
  }

  // string subBiz = 3;
  if (!this->_internal_subbiz().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subbiz());
  }

  // string did = 5;
  if (!this->_internal_did().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_did());
  }

  // string appVer = 7;
  if (!this->_internal_appver().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_appver());
  }

  // string ver = 8;
  if (!this->_internal_ver().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ver());
  }

  // string lat = 9;
  if (!this->_internal_lat().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lat());
  }

  // string lon = 10;
  if (!this->_internal_lon().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lon());
  }

  // string mod = 11;
  if (!this->_internal_mod().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mod());
  }

  // string net = 12;
  if (!this->_internal_net().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_net());
  }

  // string sys = 13;
  if (!this->_internal_sys().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sys());
  }

  // string c = 14;
  if (!this->_internal_c().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_c());
  }

  // string language = 15;
  if (!this->_internal_language().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  // string countryCode = 16;
  if (!this->_internal_countrycode().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_countrycode());
  }

  // int64 uid = 4;
  if (this->_internal_uid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_uid());
  }

  // int64 clientIp = 6;
  if (this->_internal_clientip() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_clientip());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ZtCommonInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ZtCommonInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ZtCommonInfo::GetClassData() const { return &_class_data_; }


void ZtCommonInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ZtCommonInfo*>(&to_msg);
  auto& from = static_cast<const ZtCommonInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.Im.Basic.ZtCommonInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_kpn().empty()) {
    _this->_internal_set_kpn(from._internal_kpn());
  }
  if (!from._internal_kpf().empty()) {
    _this->_internal_set_kpf(from._internal_kpf());
  }
  if (!from._internal_subbiz().empty()) {
    _this->_internal_set_subbiz(from._internal_subbiz());
  }
  if (!from._internal_did().empty()) {
    _this->_internal_set_did(from._internal_did());
  }
  if (!from._internal_appver().empty()) {
    _this->_internal_set_appver(from._internal_appver());
  }
  if (!from._internal_ver().empty()) {
    _this->_internal_set_ver(from._internal_ver());
  }
  if (!from._internal_lat().empty()) {
    _this->_internal_set_lat(from._internal_lat());
  }
  if (!from._internal_lon().empty()) {
    _this->_internal_set_lon(from._internal_lon());
  }
  if (!from._internal_mod().empty()) {
    _this->_internal_set_mod(from._internal_mod());
  }
  if (!from._internal_net().empty()) {
    _this->_internal_set_net(from._internal_net());
  }
  if (!from._internal_sys().empty()) {
    _this->_internal_set_sys(from._internal_sys());
  }
  if (!from._internal_c().empty()) {
    _this->_internal_set_c(from._internal_c());
  }
  if (!from._internal_language().empty()) {
    _this->_internal_set_language(from._internal_language());
  }
  if (!from._internal_countrycode().empty()) {
    _this->_internal_set_countrycode(from._internal_countrycode());
  }
  if (from._internal_uid() != 0) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (from._internal_clientip() != 0) {
    _this->_internal_set_clientip(from._internal_clientip());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ZtCommonInfo::CopyFrom(const ZtCommonInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.Im.Basic.ZtCommonInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZtCommonInfo::IsInitialized() const {
  return true;
}

void ZtCommonInfo::InternalSwap(ZtCommonInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.kpn_, lhs_arena,
      &other->_impl_.kpn_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.kpf_, lhs_arena,
      &other->_impl_.kpf_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subbiz_, lhs_arena,
      &other->_impl_.subbiz_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.did_, lhs_arena,
      &other->_impl_.did_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.appver_, lhs_arena,
      &other->_impl_.appver_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ver_, lhs_arena,
      &other->_impl_.ver_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lat_, lhs_arena,
      &other->_impl_.lat_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lon_, lhs_arena,
      &other->_impl_.lon_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mod_, lhs_arena,
      &other->_impl_.mod_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.net_, lhs_arena,
      &other->_impl_.net_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sys_, lhs_arena,
      &other->_impl_.sys_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.c_, lhs_arena,
      &other->_impl_.c_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.language_, lhs_arena,
      &other->_impl_.language_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.countrycode_, lhs_arena,
      &other->_impl_.countrycode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ZtCommonInfo, _impl_.clientip_)
      + sizeof(ZtCommonInfo::_impl_.clientip_)
      - PROTOBUF_FIELD_OFFSET(ZtCommonInfo, _impl_.uid_)>(
          reinterpret_cast<char*>(&_impl_.uid_),
          reinterpret_cast<char*>(&other->_impl_.uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ZtCommonInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ZtCommonInfo_2eproto_getter, &descriptor_table_ZtCommonInfo_2eproto_once,
      file_level_metadata_ZtCommonInfo_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Basic
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AcFunDanmu::Im::Basic::ZtCommonInfo*
Arena::CreateMaybeMessage< ::AcFunDanmu::Im::Basic::ZtCommonInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::Im::Basic::ZtCommonInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
