// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Media.proto

#include "Media.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Message {
PROTOBUF_CONSTEXPR Media::Media(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pos_)*/0
  , /*decltype(_impl_.resource_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct MediaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MediaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MediaDefaultTypeInternal() {}
  union {
    Media _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MediaDefaultTypeInternal _Media_default_instance_;
}  // namespace Message
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu
static ::_pb::Metadata file_level_metadata_Media_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Media_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Media_2eproto = nullptr;

const uint32_t TableStruct_Media_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Message::Media, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Message::Media, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Message::Media, _impl_.pos_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Message::Media, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Message::Media, _impl_.resource_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::AcFunDanmu::Im::Cloud::Message::Media)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::AcFunDanmu::Im::Cloud::Message::_Media_default_instance_._instance,
};

const char descriptor_table_protodef_Media_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013Media.proto\022\033AcFunDanmu.Im.Cloud.Messa"
  "ge\032\013Audio.proto\032\016Emoticon.proto\032\nFile.pr"
  "oto\032\013Image.proto\032\013Video.proto\"\273\002\n\005Media\022"
  "3\n\005image\030\001 \001(\0132\".AcFunDanmu.Im.Cloud.Mes"
  "sage.ImageH\000\0223\n\005audio\030\002 \001(\0132\".AcFunDanmu"
  ".Im.Cloud.Message.AudioH\000\0223\n\005video\030\003 \001(\013"
  "2\".AcFunDanmu.Im.Cloud.Message.VideoH\000\0221"
  "\n\004file\030\004 \001(\0132!.AcFunDanmu.Im.Cloud.Messa"
  "ge.FileH\000\0229\n\010emoticon\030\005 \001(\0132%.AcFunDanmu"
  ".Im.Cloud.Message.EmoticonH\000\022\013\n\003pos\030\024 \001("
  "\005\022\014\n\004name\030\025 \001(\tB\n\n\010resourceb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_Media_2eproto_deps[5] = {
  &::descriptor_table_Audio_2eproto,
  &::descriptor_table_Emoticon_2eproto,
  &::descriptor_table_File_2eproto,
  &::descriptor_table_Image_2eproto,
  &::descriptor_table_Video_2eproto,
};
static ::_pbi::once_flag descriptor_table_Media_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Media_2eproto = {
    false, false, 435, descriptor_table_protodef_Media_2eproto,
    "Media.proto",
    &descriptor_table_Media_2eproto_once, descriptor_table_Media_2eproto_deps, 5, 1,
    schemas, file_default_instances, TableStruct_Media_2eproto::offsets,
    file_level_metadata_Media_2eproto, file_level_enum_descriptors_Media_2eproto,
    file_level_service_descriptors_Media_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Media_2eproto_getter() {
  return &descriptor_table_Media_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Media_2eproto(&descriptor_table_Media_2eproto);
namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Message {

// ===================================================================

class Media::_Internal {
 public:
  static const ::AcFunDanmu::Im::Cloud::Message::Image& image(const Media* msg);
  static const ::AcFunDanmu::Im::Cloud::Message::Audio& audio(const Media* msg);
  static const ::AcFunDanmu::Im::Cloud::Message::Video& video(const Media* msg);
  static const ::AcFunDanmu::Im::Cloud::Message::File& file(const Media* msg);
  static const ::AcFunDanmu::Im::Cloud::Message::Emoticon& emoticon(const Media* msg);
};

const ::AcFunDanmu::Im::Cloud::Message::Image&
Media::_Internal::image(const Media* msg) {
  return *msg->_impl_.resource_.image_;
}
const ::AcFunDanmu::Im::Cloud::Message::Audio&
Media::_Internal::audio(const Media* msg) {
  return *msg->_impl_.resource_.audio_;
}
const ::AcFunDanmu::Im::Cloud::Message::Video&
Media::_Internal::video(const Media* msg) {
  return *msg->_impl_.resource_.video_;
}
const ::AcFunDanmu::Im::Cloud::Message::File&
Media::_Internal::file(const Media* msg) {
  return *msg->_impl_.resource_.file_;
}
const ::AcFunDanmu::Im::Cloud::Message::Emoticon&
Media::_Internal::emoticon(const Media* msg) {
  return *msg->_impl_.resource_.emoticon_;
}
void Media::set_allocated_image(::AcFunDanmu::Im::Cloud::Message::Image* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_resource();
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image));
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    set_has_image();
    _impl_.resource_.image_ = image;
  }
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.Media.image)
}
void Media::clear_image() {
  if (_internal_has_image()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.resource_.image_;
    }
    clear_has_resource();
  }
}
void Media::set_allocated_audio(::AcFunDanmu::Im::Cloud::Message::Audio* audio) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_resource();
  if (audio) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(audio));
    if (message_arena != submessage_arena) {
      audio = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio, submessage_arena);
    }
    set_has_audio();
    _impl_.resource_.audio_ = audio;
  }
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.Media.audio)
}
void Media::clear_audio() {
  if (_internal_has_audio()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.resource_.audio_;
    }
    clear_has_resource();
  }
}
void Media::set_allocated_video(::AcFunDanmu::Im::Cloud::Message::Video* video) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_resource();
  if (video) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(video));
    if (message_arena != submessage_arena) {
      video = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, video, submessage_arena);
    }
    set_has_video();
    _impl_.resource_.video_ = video;
  }
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.Media.video)
}
void Media::clear_video() {
  if (_internal_has_video()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.resource_.video_;
    }
    clear_has_resource();
  }
}
void Media::set_allocated_file(::AcFunDanmu::Im::Cloud::Message::File* file) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_resource();
  if (file) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(file));
    if (message_arena != submessage_arena) {
      file = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, file, submessage_arena);
    }
    set_has_file();
    _impl_.resource_.file_ = file;
  }
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.Media.file)
}
void Media::clear_file() {
  if (_internal_has_file()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.resource_.file_;
    }
    clear_has_resource();
  }
}
void Media::set_allocated_emoticon(::AcFunDanmu::Im::Cloud::Message::Emoticon* emoticon) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_resource();
  if (emoticon) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(emoticon));
    if (message_arena != submessage_arena) {
      emoticon = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, emoticon, submessage_arena);
    }
    set_has_emoticon();
    _impl_.resource_.emoticon_ = emoticon;
  }
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.Media.emoticon)
}
void Media::clear_emoticon() {
  if (_internal_has_emoticon()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.resource_.emoticon_;
    }
    clear_has_resource();
  }
}
Media::Media(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.Im.Cloud.Message.Media)
}
Media::Media(const Media& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Media* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.pos_){}
    , decltype(_impl_.resource_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.pos_ = from._impl_.pos_;
  clear_has_resource();
  switch (from.resource_case()) {
    case kImage: {
      _this->_internal_mutable_image()->::AcFunDanmu::Im::Cloud::Message::Image::MergeFrom(
          from._internal_image());
      break;
    }
    case kAudio: {
      _this->_internal_mutable_audio()->::AcFunDanmu::Im::Cloud::Message::Audio::MergeFrom(
          from._internal_audio());
      break;
    }
    case kVideo: {
      _this->_internal_mutable_video()->::AcFunDanmu::Im::Cloud::Message::Video::MergeFrom(
          from._internal_video());
      break;
    }
    case kFile: {
      _this->_internal_mutable_file()->::AcFunDanmu::Im::Cloud::Message::File::MergeFrom(
          from._internal_file());
      break;
    }
    case kEmoticon: {
      _this->_internal_mutable_emoticon()->::AcFunDanmu::Im::Cloud::Message::Emoticon::MergeFrom(
          from._internal_emoticon());
      break;
    }
    case RESOURCE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.Im.Cloud.Message.Media)
}

inline void Media::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.pos_){0}
    , decltype(_impl_.resource_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_resource();
}

Media::~Media() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.Im.Cloud.Message.Media)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Media::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (has_resource()) {
    clear_resource();
  }
}

void Media::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Media::clear_resource() {
// @@protoc_insertion_point(one_of_clear_start:AcFunDanmu.Im.Cloud.Message.Media)
  switch (resource_case()) {
    case kImage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.resource_.image_;
      }
      break;
    }
    case kAudio: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.resource_.audio_;
      }
      break;
    }
    case kVideo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.resource_.video_;
      }
      break;
    }
    case kFile: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.resource_.file_;
      }
      break;
    }
    case kEmoticon: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.resource_.emoticon_;
      }
      break;
    }
    case RESOURCE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = RESOURCE_NOT_SET;
}


void Media::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.Im.Cloud.Message.Media)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.pos_ = 0;
  clear_resource();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Media::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .AcFunDanmu.Im.Cloud.Message.Image image = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Cloud.Message.Audio audio = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Cloud.Message.Video video = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_video(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Cloud.Message.File file = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_file(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Cloud.Message.Emoticon emoticon = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_emoticon(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 pos = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Cloud.Message.Media.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Media::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.Im.Cloud.Message.Media)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .AcFunDanmu.Im.Cloud.Message.Image image = 1;
  if (_internal_has_image()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::image(this),
        _Internal::image(this).GetCachedSize(), target, stream);
  }

  // .AcFunDanmu.Im.Cloud.Message.Audio audio = 2;
  if (_internal_has_audio()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::audio(this),
        _Internal::audio(this).GetCachedSize(), target, stream);
  }

  // .AcFunDanmu.Im.Cloud.Message.Video video = 3;
  if (_internal_has_video()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::video(this),
        _Internal::video(this).GetCachedSize(), target, stream);
  }

  // .AcFunDanmu.Im.Cloud.Message.File file = 4;
  if (_internal_has_file()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::file(this),
        _Internal::file(this).GetCachedSize(), target, stream);
  }

  // .AcFunDanmu.Im.Cloud.Message.Emoticon emoticon = 5;
  if (_internal_has_emoticon()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::emoticon(this),
        _Internal::emoticon(this).GetCachedSize(), target, stream);
  }

  // int32 pos = 20;
  if (this->_internal_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(20, this->_internal_pos(), target);
  }

  // string name = 21;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Cloud.Message.Media.name");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.Im.Cloud.Message.Media)
  return target;
}

size_t Media::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.Im.Cloud.Message.Media)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 21;
  if (!this->_internal_name().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 pos = 20;
  if (this->_internal_pos() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_pos());
  }

  switch (resource_case()) {
    // .AcFunDanmu.Im.Cloud.Message.Image image = 1;
    case kImage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.resource_.image_);
      break;
    }
    // .AcFunDanmu.Im.Cloud.Message.Audio audio = 2;
    case kAudio: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.resource_.audio_);
      break;
    }
    // .AcFunDanmu.Im.Cloud.Message.Video video = 3;
    case kVideo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.resource_.video_);
      break;
    }
    // .AcFunDanmu.Im.Cloud.Message.File file = 4;
    case kFile: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.resource_.file_);
      break;
    }
    // .AcFunDanmu.Im.Cloud.Message.Emoticon emoticon = 5;
    case kEmoticon: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.resource_.emoticon_);
      break;
    }
    case RESOURCE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Media::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Media::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Media::GetClassData() const { return &_class_data_; }


void Media::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Media*>(&to_msg);
  auto& from = static_cast<const Media&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.Im.Cloud.Message.Media)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_pos() != 0) {
    _this->_internal_set_pos(from._internal_pos());
  }
  switch (from.resource_case()) {
    case kImage: {
      _this->_internal_mutable_image()->::AcFunDanmu::Im::Cloud::Message::Image::MergeFrom(
          from._internal_image());
      break;
    }
    case kAudio: {
      _this->_internal_mutable_audio()->::AcFunDanmu::Im::Cloud::Message::Audio::MergeFrom(
          from._internal_audio());
      break;
    }
    case kVideo: {
      _this->_internal_mutable_video()->::AcFunDanmu::Im::Cloud::Message::Video::MergeFrom(
          from._internal_video());
      break;
    }
    case kFile: {
      _this->_internal_mutable_file()->::AcFunDanmu::Im::Cloud::Message::File::MergeFrom(
          from._internal_file());
      break;
    }
    case kEmoticon: {
      _this->_internal_mutable_emoticon()->::AcFunDanmu::Im::Cloud::Message::Emoticon::MergeFrom(
          from._internal_emoticon());
      break;
    }
    case RESOURCE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Media::CopyFrom(const Media& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.Im.Cloud.Message.Media)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Media::IsInitialized() const {
  return true;
}

void Media::InternalSwap(Media* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.pos_, other->_impl_.pos_);
  swap(_impl_.resource_, other->_impl_.resource_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Media::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Media_2eproto_getter, &descriptor_table_Media_2eproto_once,
      file_level_metadata_Media_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Message
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AcFunDanmu::Im::Cloud::Message::Media*
Arena::CreateMaybeMessage< ::AcFunDanmu::Im::Cloud::Message::Media >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::Im::Cloud::Message::Media >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
