// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SessionFolderDataUpdate.proto

#include "SessionFolderDataUpdate.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Data {
namespace Update {
PROTOBUF_CONSTEXPR SessionFolderDataUpdate::SessionFolderDataUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sessionfolderbasic_)*/{}
  , /*decltype(_impl_.added_)*/{}
  , /*decltype(_impl_.removed_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SessionFolderDataUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SessionFolderDataUpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SessionFolderDataUpdateDefaultTypeInternal() {}
  union {
    SessionFolderDataUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SessionFolderDataUpdateDefaultTypeInternal _SessionFolderDataUpdate_default_instance_;
}  // namespace Update
}  // namespace Data
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu
static ::_pb::Metadata file_level_metadata_SessionFolderDataUpdate_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_SessionFolderDataUpdate_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_SessionFolderDataUpdate_2eproto = nullptr;

const uint32_t TableStruct_SessionFolderDataUpdate_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Data::Update::SessionFolderDataUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Data::Update::SessionFolderDataUpdate, _impl_.sessionfolderbasic_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Data::Update::SessionFolderDataUpdate, _impl_.added_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Data::Update::SessionFolderDataUpdate, _impl_.removed_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::AcFunDanmu::Im::Cloud::Data::Update::SessionFolderDataUpdate)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::AcFunDanmu::Im::Cloud::Data::Update::_SessionFolderDataUpdate_default_instance_._instance,
};

const char descriptor_table_protodef_SessionFolderDataUpdate_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035SessionFolderDataUpdate.proto\022\037AcFunDa"
  "nmu.Im.Cloud.Data.Update\032\030SessionFolderB"
  "asic.proto\032 SessionReferenceUpdateItem.p"
  "roto\"\212\002\n\027SessionFolderDataUpdate\022Q\n\022sess"
  "ionFolderBasic\030\001 \003(\01325.AcFunDanmu.Im.Clo"
  "ud.SessionFolder.SessionFolderBasic\022L\n\005a"
  "dded\030\002 \003(\0132=.AcFunDanmu.Im.Cloud.Session"
  "Folder.SessionReferenceUpdateItem\022N\n\007rem"
  "oved\030\003 \003(\0132=.AcFunDanmu.Im.Cloud.Session"
  "Folder.SessionReferenceUpdateItemb\006proto"
  "3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_SessionFolderDataUpdate_2eproto_deps[2] = {
  &::descriptor_table_SessionFolderBasic_2eproto,
  &::descriptor_table_SessionReferenceUpdateItem_2eproto,
};
static ::_pbi::once_flag descriptor_table_SessionFolderDataUpdate_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_SessionFolderDataUpdate_2eproto = {
    false, false, 401, descriptor_table_protodef_SessionFolderDataUpdate_2eproto,
    "SessionFolderDataUpdate.proto",
    &descriptor_table_SessionFolderDataUpdate_2eproto_once, descriptor_table_SessionFolderDataUpdate_2eproto_deps, 2, 1,
    schemas, file_default_instances, TableStruct_SessionFolderDataUpdate_2eproto::offsets,
    file_level_metadata_SessionFolderDataUpdate_2eproto, file_level_enum_descriptors_SessionFolderDataUpdate_2eproto,
    file_level_service_descriptors_SessionFolderDataUpdate_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_SessionFolderDataUpdate_2eproto_getter() {
  return &descriptor_table_SessionFolderDataUpdate_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_SessionFolderDataUpdate_2eproto(&descriptor_table_SessionFolderDataUpdate_2eproto);
namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Data {
namespace Update {

// ===================================================================

class SessionFolderDataUpdate::_Internal {
 public:
};

void SessionFolderDataUpdate::clear_sessionfolderbasic() {
  _impl_.sessionfolderbasic_.Clear();
}
void SessionFolderDataUpdate::clear_added() {
  _impl_.added_.Clear();
}
void SessionFolderDataUpdate::clear_removed() {
  _impl_.removed_.Clear();
}
SessionFolderDataUpdate::SessionFolderDataUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.Im.Cloud.Data.Update.SessionFolderDataUpdate)
}
SessionFolderDataUpdate::SessionFolderDataUpdate(const SessionFolderDataUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SessionFolderDataUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sessionfolderbasic_){from._impl_.sessionfolderbasic_}
    , decltype(_impl_.added_){from._impl_.added_}
    , decltype(_impl_.removed_){from._impl_.removed_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.Im.Cloud.Data.Update.SessionFolderDataUpdate)
}

inline void SessionFolderDataUpdate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sessionfolderbasic_){arena}
    , decltype(_impl_.added_){arena}
    , decltype(_impl_.removed_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SessionFolderDataUpdate::~SessionFolderDataUpdate() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.Im.Cloud.Data.Update.SessionFolderDataUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SessionFolderDataUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sessionfolderbasic_.~RepeatedPtrField();
  _impl_.added_.~RepeatedPtrField();
  _impl_.removed_.~RepeatedPtrField();
}

void SessionFolderDataUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SessionFolderDataUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.Im.Cloud.Data.Update.SessionFolderDataUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sessionfolderbasic_.Clear();
  _impl_.added_.Clear();
  _impl_.removed_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionFolderDataUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .AcFunDanmu.Im.Cloud.SessionFolder.SessionFolderBasic sessionFolderBasic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sessionfolderbasic(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .AcFunDanmu.Im.Cloud.SessionFolder.SessionReferenceUpdateItem added = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_added(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .AcFunDanmu.Im.Cloud.SessionFolder.SessionReferenceUpdateItem removed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_removed(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SessionFolderDataUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.Im.Cloud.Data.Update.SessionFolderDataUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .AcFunDanmu.Im.Cloud.SessionFolder.SessionFolderBasic sessionFolderBasic = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sessionfolderbasic_size()); i < n; i++) {
    const auto& repfield = this->_internal_sessionfolderbasic(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .AcFunDanmu.Im.Cloud.SessionFolder.SessionReferenceUpdateItem added = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_added_size()); i < n; i++) {
    const auto& repfield = this->_internal_added(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .AcFunDanmu.Im.Cloud.SessionFolder.SessionReferenceUpdateItem removed = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_removed_size()); i < n; i++) {
    const auto& repfield = this->_internal_removed(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.Im.Cloud.Data.Update.SessionFolderDataUpdate)
  return target;
}

size_t SessionFolderDataUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.Im.Cloud.Data.Update.SessionFolderDataUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .AcFunDanmu.Im.Cloud.SessionFolder.SessionFolderBasic sessionFolderBasic = 1;
  total_size += 1UL * this->_internal_sessionfolderbasic_size();
  for (const auto& msg : this->_impl_.sessionfolderbasic_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .AcFunDanmu.Im.Cloud.SessionFolder.SessionReferenceUpdateItem added = 2;
  total_size += 1UL * this->_internal_added_size();
  for (const auto& msg : this->_impl_.added_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .AcFunDanmu.Im.Cloud.SessionFolder.SessionReferenceUpdateItem removed = 3;
  total_size += 1UL * this->_internal_removed_size();
  for (const auto& msg : this->_impl_.removed_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SessionFolderDataUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SessionFolderDataUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SessionFolderDataUpdate::GetClassData() const { return &_class_data_; }


void SessionFolderDataUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SessionFolderDataUpdate*>(&to_msg);
  auto& from = static_cast<const SessionFolderDataUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.Im.Cloud.Data.Update.SessionFolderDataUpdate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.sessionfolderbasic_.MergeFrom(from._impl_.sessionfolderbasic_);
  _this->_impl_.added_.MergeFrom(from._impl_.added_);
  _this->_impl_.removed_.MergeFrom(from._impl_.removed_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SessionFolderDataUpdate::CopyFrom(const SessionFolderDataUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.Im.Cloud.Data.Update.SessionFolderDataUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionFolderDataUpdate::IsInitialized() const {
  return true;
}

void SessionFolderDataUpdate::InternalSwap(SessionFolderDataUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.sessionfolderbasic_.InternalSwap(&other->_impl_.sessionfolderbasic_);
  _impl_.added_.InternalSwap(&other->_impl_.added_);
  _impl_.removed_.InternalSwap(&other->_impl_.removed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionFolderDataUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_SessionFolderDataUpdate_2eproto_getter, &descriptor_table_SessionFolderDataUpdate_2eproto_once,
      file_level_metadata_SessionFolderDataUpdate_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Update
}  // namespace Data
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AcFunDanmu::Im::Cloud::Data::Update::SessionFolderDataUpdate*
Arena::CreateMaybeMessage< ::AcFunDanmu::Im::Cloud::Data::Update::SessionFolderDataUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::Im::Cloud::Data::Update::SessionFolderDataUpdate >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
