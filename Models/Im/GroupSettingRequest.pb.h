// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GroupSettingRequest.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_GroupSettingRequest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_GroupSettingRequest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "GroupExtraDataUpdate.pb.h"
#include "GroupHeadUrlUpdate.pb.h"
#include "GroupInviteNeedUserAgree.pb.h"
#include "GroupSettingAdminTransfer.pb.h"
#include "GroupSettingBatchUpdate.pb.h"
#include "GroupSettingDesc.pb.h"
#include "GroupSettingInvitePermission.pb.h"
#include "GroupSettingJoinNeedPermission.pb.h"
#include "GroupSettingMemberSilence.pb.h"
#include "GroupSettingMemberTempSilence.pb.h"
#include "GroupSettingRemindAllOnlyAdmin.pb.h"
#include "GroupSettingRename.pb.h"
#include "GroupSettingUpdateOnlyAdmin.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_GroupSettingRequest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_GroupSettingRequest_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_GroupSettingRequest_2eproto;
namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Message {
class GroupSettingRequest;
struct GroupSettingRequestDefaultTypeInternal;
extern GroupSettingRequestDefaultTypeInternal _GroupSettingRequest_default_instance_;
}  // namespace Message
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::Im::Cloud::Message::GroupSettingRequest* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud::Message::GroupSettingRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Message {

// ===================================================================

class GroupSettingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest) */ {
 public:
  inline GroupSettingRequest() : GroupSettingRequest(nullptr) {}
  ~GroupSettingRequest() override;
  explicit PROTOBUF_CONSTEXPR GroupSettingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupSettingRequest(const GroupSettingRequest& from);
  GroupSettingRequest(GroupSettingRequest&& from) noexcept
    : GroupSettingRequest() {
    *this = ::std::move(from);
  }

  inline GroupSettingRequest& operator=(const GroupSettingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupSettingRequest& operator=(GroupSettingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupSettingRequest& default_instance() {
    return *internal_default_instance();
  }
  enum GroupSettingCase {
    kRename = 2,
    kDesc = 3,
    kJoinNeedPermission = 4,
    kInvitePermission = 5,
    kGroupMembersSilence = 6,
    kGroupAdminTransfer = 7,
    kSettingUpdateOnlyAdmin = 8,
    kRemindAllOnlyAdmin = 9,
    kBatchUpdate = 10,
    kGroupMemberTempSilence = 11,
    kGroupExtraDataUpdate = 12,
    kGroupHeadUrlUpdate = 13,
    kGroupInviteNeedUserAgree = 14,
    GROUPSETTING_NOT_SET = 0,
  };

  static inline const GroupSettingRequest* internal_default_instance() {
    return reinterpret_cast<const GroupSettingRequest*>(
               &_GroupSettingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GroupSettingRequest& a, GroupSettingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupSettingRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupSettingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupSettingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupSettingRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupSettingRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupSettingRequest& from) {
    GroupSettingRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupSettingRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.GroupSettingRequest";
  }
  protected:
  explicit GroupSettingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kRenameFieldNumber = 2,
    kDescFieldNumber = 3,
    kJoinNeedPermissionFieldNumber = 4,
    kInvitePermissionFieldNumber = 5,
    kGroupMembersSilenceFieldNumber = 6,
    kGroupAdminTransferFieldNumber = 7,
    kSettingUpdateOnlyAdminFieldNumber = 8,
    kRemindAllOnlyAdminFieldNumber = 9,
    kBatchUpdateFieldNumber = 10,
    kGroupMemberTempSilenceFieldNumber = 11,
    kGroupExtraDataUpdateFieldNumber = 12,
    kGroupHeadUrlUpdateFieldNumber = 13,
    kGroupInviteNeedUserAgreeFieldNumber = 14,
  };
  // string groupId = 1;
  void clear_groupid();
  const std::string& groupid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_groupid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_groupid();
  PROTOBUF_NODISCARD std::string* release_groupid();
  void set_allocated_groupid(std::string* groupid);
  private:
  const std::string& _internal_groupid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_groupid(const std::string& value);
  std::string* _internal_mutable_groupid();
  public:

  // .AcFunDanmu.Im.Cloud.Message.GroupSettingRename rename = 2;
  bool has_rename() const;
  private:
  bool _internal_has_rename() const;
  public:
  void clear_rename();
  const ::AcFunDanmu::Im::Cloud::Message::GroupSettingRename& rename() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Cloud::Message::GroupSettingRename* release_rename();
  ::AcFunDanmu::Im::Cloud::Message::GroupSettingRename* mutable_rename();
  void set_allocated_rename(::AcFunDanmu::Im::Cloud::Message::GroupSettingRename* rename);
  private:
  const ::AcFunDanmu::Im::Cloud::Message::GroupSettingRename& _internal_rename() const;
  ::AcFunDanmu::Im::Cloud::Message::GroupSettingRename* _internal_mutable_rename();
  public:
  void unsafe_arena_set_allocated_rename(
      ::AcFunDanmu::Im::Cloud::Message::GroupSettingRename* rename);
  ::AcFunDanmu::Im::Cloud::Message::GroupSettingRename* unsafe_arena_release_rename();

  // .AcFunDanmu.Im.Cloud.Message.GroupSettingDesc desc = 3;
  bool has_desc() const;
  private:
  bool _internal_has_desc() const;
  public:
  void clear_desc();
  const ::AcFunDanmu::Im::Cloud::Message::GroupSettingDesc& desc() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Cloud::Message::GroupSettingDesc* release_desc();
  ::AcFunDanmu::Im::Cloud::Message::GroupSettingDesc* mutable_desc();
  void set_allocated_desc(::AcFunDanmu::Im::Cloud::Message::GroupSettingDesc* desc);
  private:
  const ::AcFunDanmu::Im::Cloud::Message::GroupSettingDesc& _internal_desc() const;
  ::AcFunDanmu::Im::Cloud::Message::GroupSettingDesc* _internal_mutable_desc();
  public:
  void unsafe_arena_set_allocated_desc(
      ::AcFunDanmu::Im::Cloud::Message::GroupSettingDesc* desc);
  ::AcFunDanmu::Im::Cloud::Message::GroupSettingDesc* unsafe_arena_release_desc();

  // .AcFunDanmu.Im.Cloud.Message.GroupSettingJoinNeedPermission joinNeedPermission = 4;
  bool has_joinneedpermission() const;
  private:
  bool _internal_has_joinneedpermission() const;
  public:
  void clear_joinneedpermission();
  const ::AcFunDanmu::Im::Cloud::Message::GroupSettingJoinNeedPermission& joinneedpermission() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Cloud::Message::GroupSettingJoinNeedPermission* release_joinneedpermission();
  ::AcFunDanmu::Im::Cloud::Message::GroupSettingJoinNeedPermission* mutable_joinneedpermission();
  void set_allocated_joinneedpermission(::AcFunDanmu::Im::Cloud::Message::GroupSettingJoinNeedPermission* joinneedpermission);
  private:
  const ::AcFunDanmu::Im::Cloud::Message::GroupSettingJoinNeedPermission& _internal_joinneedpermission() const;
  ::AcFunDanmu::Im::Cloud::Message::GroupSettingJoinNeedPermission* _internal_mutable_joinneedpermission();
  public:
  void unsafe_arena_set_allocated_joinneedpermission(
      ::AcFunDanmu::Im::Cloud::Message::GroupSettingJoinNeedPermission* joinneedpermission);
  ::AcFunDanmu::Im::Cloud::Message::GroupSettingJoinNeedPermission* unsafe_arena_release_joinneedpermission();

  // .AcFunDanmu.Im.Cloud.Message.GroupSettingInvitePermission invitePermission = 5;
  bool has_invitepermission() const;
  private:
  bool _internal_has_invitepermission() const;
  public:
  void clear_invitepermission();
  const ::AcFunDanmu::Im::Cloud::Message::GroupSettingInvitePermission& invitepermission() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Cloud::Message::GroupSettingInvitePermission* release_invitepermission();
  ::AcFunDanmu::Im::Cloud::Message::GroupSettingInvitePermission* mutable_invitepermission();
  void set_allocated_invitepermission(::AcFunDanmu::Im::Cloud::Message::GroupSettingInvitePermission* invitepermission);
  private:
  const ::AcFunDanmu::Im::Cloud::Message::GroupSettingInvitePermission& _internal_invitepermission() const;
  ::AcFunDanmu::Im::Cloud::Message::GroupSettingInvitePermission* _internal_mutable_invitepermission();
  public:
  void unsafe_arena_set_allocated_invitepermission(
      ::AcFunDanmu::Im::Cloud::Message::GroupSettingInvitePermission* invitepermission);
  ::AcFunDanmu::Im::Cloud::Message::GroupSettingInvitePermission* unsafe_arena_release_invitepermission();

  // .AcFunDanmu.Im.Cloud.Message.GroupSettingMemberSilence groupMembersSilence = 6;
  bool has_groupmemberssilence() const;
  private:
  bool _internal_has_groupmemberssilence() const;
  public:
  void clear_groupmemberssilence();
  const ::AcFunDanmu::Im::Cloud::Message::GroupSettingMemberSilence& groupmemberssilence() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Cloud::Message::GroupSettingMemberSilence* release_groupmemberssilence();
  ::AcFunDanmu::Im::Cloud::Message::GroupSettingMemberSilence* mutable_groupmemberssilence();
  void set_allocated_groupmemberssilence(::AcFunDanmu::Im::Cloud::Message::GroupSettingMemberSilence* groupmemberssilence);
  private:
  const ::AcFunDanmu::Im::Cloud::Message::GroupSettingMemberSilence& _internal_groupmemberssilence() const;
  ::AcFunDanmu::Im::Cloud::Message::GroupSettingMemberSilence* _internal_mutable_groupmemberssilence();
  public:
  void unsafe_arena_set_allocated_groupmemberssilence(
      ::AcFunDanmu::Im::Cloud::Message::GroupSettingMemberSilence* groupmemberssilence);
  ::AcFunDanmu::Im::Cloud::Message::GroupSettingMemberSilence* unsafe_arena_release_groupmemberssilence();

  // .AcFunDanmu.Im.Cloud.Message.GroupSettingAdminTransfer groupAdminTransfer = 7;
  bool has_groupadmintransfer() const;
  private:
  bool _internal_has_groupadmintransfer() const;
  public:
  void clear_groupadmintransfer();
  const ::AcFunDanmu::Im::Cloud::Message::GroupSettingAdminTransfer& groupadmintransfer() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Cloud::Message::GroupSettingAdminTransfer* release_groupadmintransfer();
  ::AcFunDanmu::Im::Cloud::Message::GroupSettingAdminTransfer* mutable_groupadmintransfer();
  void set_allocated_groupadmintransfer(::AcFunDanmu::Im::Cloud::Message::GroupSettingAdminTransfer* groupadmintransfer);
  private:
  const ::AcFunDanmu::Im::Cloud::Message::GroupSettingAdminTransfer& _internal_groupadmintransfer() const;
  ::AcFunDanmu::Im::Cloud::Message::GroupSettingAdminTransfer* _internal_mutable_groupadmintransfer();
  public:
  void unsafe_arena_set_allocated_groupadmintransfer(
      ::AcFunDanmu::Im::Cloud::Message::GroupSettingAdminTransfer* groupadmintransfer);
  ::AcFunDanmu::Im::Cloud::Message::GroupSettingAdminTransfer* unsafe_arena_release_groupadmintransfer();

  // .AcFunDanmu.Im.Cloud.Message.GroupSettingUpdateOnlyAdmin settingUpdateOnlyAdmin = 8;
  bool has_settingupdateonlyadmin() const;
  private:
  bool _internal_has_settingupdateonlyadmin() const;
  public:
  void clear_settingupdateonlyadmin();
  const ::AcFunDanmu::Im::Cloud::Message::GroupSettingUpdateOnlyAdmin& settingupdateonlyadmin() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Cloud::Message::GroupSettingUpdateOnlyAdmin* release_settingupdateonlyadmin();
  ::AcFunDanmu::Im::Cloud::Message::GroupSettingUpdateOnlyAdmin* mutable_settingupdateonlyadmin();
  void set_allocated_settingupdateonlyadmin(::AcFunDanmu::Im::Cloud::Message::GroupSettingUpdateOnlyAdmin* settingupdateonlyadmin);
  private:
  const ::AcFunDanmu::Im::Cloud::Message::GroupSettingUpdateOnlyAdmin& _internal_settingupdateonlyadmin() const;
  ::AcFunDanmu::Im::Cloud::Message::GroupSettingUpdateOnlyAdmin* _internal_mutable_settingupdateonlyadmin();
  public:
  void unsafe_arena_set_allocated_settingupdateonlyadmin(
      ::AcFunDanmu::Im::Cloud::Message::GroupSettingUpdateOnlyAdmin* settingupdateonlyadmin);
  ::AcFunDanmu::Im::Cloud::Message::GroupSettingUpdateOnlyAdmin* unsafe_arena_release_settingupdateonlyadmin();

  // .AcFunDanmu.Im.Cloud.Message.GroupSettingRemindAllOnlyAdmin remindAllOnlyAdmin = 9;
  bool has_remindallonlyadmin() const;
  private:
  bool _internal_has_remindallonlyadmin() const;
  public:
  void clear_remindallonlyadmin();
  const ::AcFunDanmu::Im::Cloud::Message::GroupSettingRemindAllOnlyAdmin& remindallonlyadmin() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Cloud::Message::GroupSettingRemindAllOnlyAdmin* release_remindallonlyadmin();
  ::AcFunDanmu::Im::Cloud::Message::GroupSettingRemindAllOnlyAdmin* mutable_remindallonlyadmin();
  void set_allocated_remindallonlyadmin(::AcFunDanmu::Im::Cloud::Message::GroupSettingRemindAllOnlyAdmin* remindallonlyadmin);
  private:
  const ::AcFunDanmu::Im::Cloud::Message::GroupSettingRemindAllOnlyAdmin& _internal_remindallonlyadmin() const;
  ::AcFunDanmu::Im::Cloud::Message::GroupSettingRemindAllOnlyAdmin* _internal_mutable_remindallonlyadmin();
  public:
  void unsafe_arena_set_allocated_remindallonlyadmin(
      ::AcFunDanmu::Im::Cloud::Message::GroupSettingRemindAllOnlyAdmin* remindallonlyadmin);
  ::AcFunDanmu::Im::Cloud::Message::GroupSettingRemindAllOnlyAdmin* unsafe_arena_release_remindallonlyadmin();

  // .AcFunDanmu.Im.Cloud.Message.GroupSettingBatchUpdate batchUpdate = 10;
  bool has_batchupdate() const;
  private:
  bool _internal_has_batchupdate() const;
  public:
  void clear_batchupdate();
  const ::AcFunDanmu::Im::Cloud::Message::GroupSettingBatchUpdate& batchupdate() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Cloud::Message::GroupSettingBatchUpdate* release_batchupdate();
  ::AcFunDanmu::Im::Cloud::Message::GroupSettingBatchUpdate* mutable_batchupdate();
  void set_allocated_batchupdate(::AcFunDanmu::Im::Cloud::Message::GroupSettingBatchUpdate* batchupdate);
  private:
  const ::AcFunDanmu::Im::Cloud::Message::GroupSettingBatchUpdate& _internal_batchupdate() const;
  ::AcFunDanmu::Im::Cloud::Message::GroupSettingBatchUpdate* _internal_mutable_batchupdate();
  public:
  void unsafe_arena_set_allocated_batchupdate(
      ::AcFunDanmu::Im::Cloud::Message::GroupSettingBatchUpdate* batchupdate);
  ::AcFunDanmu::Im::Cloud::Message::GroupSettingBatchUpdate* unsafe_arena_release_batchupdate();

  // .AcFunDanmu.Im.Cloud.Message.GroupSettingMemberTempSilence groupMemberTempSilence = 11;
  bool has_groupmembertempsilence() const;
  private:
  bool _internal_has_groupmembertempsilence() const;
  public:
  void clear_groupmembertempsilence();
  const ::AcFunDanmu::Im::Cloud::Message::GroupSettingMemberTempSilence& groupmembertempsilence() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Cloud::Message::GroupSettingMemberTempSilence* release_groupmembertempsilence();
  ::AcFunDanmu::Im::Cloud::Message::GroupSettingMemberTempSilence* mutable_groupmembertempsilence();
  void set_allocated_groupmembertempsilence(::AcFunDanmu::Im::Cloud::Message::GroupSettingMemberTempSilence* groupmembertempsilence);
  private:
  const ::AcFunDanmu::Im::Cloud::Message::GroupSettingMemberTempSilence& _internal_groupmembertempsilence() const;
  ::AcFunDanmu::Im::Cloud::Message::GroupSettingMemberTempSilence* _internal_mutable_groupmembertempsilence();
  public:
  void unsafe_arena_set_allocated_groupmembertempsilence(
      ::AcFunDanmu::Im::Cloud::Message::GroupSettingMemberTempSilence* groupmembertempsilence);
  ::AcFunDanmu::Im::Cloud::Message::GroupSettingMemberTempSilence* unsafe_arena_release_groupmembertempsilence();

  // .AcFunDanmu.Im.Cloud.Message.GroupExtraDataUpdate groupExtraDataUpdate = 12;
  bool has_groupextradataupdate() const;
  private:
  bool _internal_has_groupextradataupdate() const;
  public:
  void clear_groupextradataupdate();
  const ::AcFunDanmu::Im::Cloud::Message::GroupExtraDataUpdate& groupextradataupdate() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Cloud::Message::GroupExtraDataUpdate* release_groupextradataupdate();
  ::AcFunDanmu::Im::Cloud::Message::GroupExtraDataUpdate* mutable_groupextradataupdate();
  void set_allocated_groupextradataupdate(::AcFunDanmu::Im::Cloud::Message::GroupExtraDataUpdate* groupextradataupdate);
  private:
  const ::AcFunDanmu::Im::Cloud::Message::GroupExtraDataUpdate& _internal_groupextradataupdate() const;
  ::AcFunDanmu::Im::Cloud::Message::GroupExtraDataUpdate* _internal_mutable_groupextradataupdate();
  public:
  void unsafe_arena_set_allocated_groupextradataupdate(
      ::AcFunDanmu::Im::Cloud::Message::GroupExtraDataUpdate* groupextradataupdate);
  ::AcFunDanmu::Im::Cloud::Message::GroupExtraDataUpdate* unsafe_arena_release_groupextradataupdate();

  // .AcFunDanmu.Im.Cloud.Message.GroupHeadUrlUpdate groupHeadUrlUpdate = 13;
  bool has_groupheadurlupdate() const;
  private:
  bool _internal_has_groupheadurlupdate() const;
  public:
  void clear_groupheadurlupdate();
  const ::AcFunDanmu::Im::Cloud::Message::GroupHeadUrlUpdate& groupheadurlupdate() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Cloud::Message::GroupHeadUrlUpdate* release_groupheadurlupdate();
  ::AcFunDanmu::Im::Cloud::Message::GroupHeadUrlUpdate* mutable_groupheadurlupdate();
  void set_allocated_groupheadurlupdate(::AcFunDanmu::Im::Cloud::Message::GroupHeadUrlUpdate* groupheadurlupdate);
  private:
  const ::AcFunDanmu::Im::Cloud::Message::GroupHeadUrlUpdate& _internal_groupheadurlupdate() const;
  ::AcFunDanmu::Im::Cloud::Message::GroupHeadUrlUpdate* _internal_mutable_groupheadurlupdate();
  public:
  void unsafe_arena_set_allocated_groupheadurlupdate(
      ::AcFunDanmu::Im::Cloud::Message::GroupHeadUrlUpdate* groupheadurlupdate);
  ::AcFunDanmu::Im::Cloud::Message::GroupHeadUrlUpdate* unsafe_arena_release_groupheadurlupdate();

  // .AcFunDanmu.Im.Cloud.Message.GroupInviteNeedUserAgree groupInviteNeedUserAgree = 14;
  bool has_groupinviteneeduseragree() const;
  private:
  bool _internal_has_groupinviteneeduseragree() const;
  public:
  void clear_groupinviteneeduseragree();
  const ::AcFunDanmu::Im::Cloud::Message::GroupInviteNeedUserAgree& groupinviteneeduseragree() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Cloud::Message::GroupInviteNeedUserAgree* release_groupinviteneeduseragree();
  ::AcFunDanmu::Im::Cloud::Message::GroupInviteNeedUserAgree* mutable_groupinviteneeduseragree();
  void set_allocated_groupinviteneeduseragree(::AcFunDanmu::Im::Cloud::Message::GroupInviteNeedUserAgree* groupinviteneeduseragree);
  private:
  const ::AcFunDanmu::Im::Cloud::Message::GroupInviteNeedUserAgree& _internal_groupinviteneeduseragree() const;
  ::AcFunDanmu::Im::Cloud::Message::GroupInviteNeedUserAgree* _internal_mutable_groupinviteneeduseragree();
  public:
  void unsafe_arena_set_allocated_groupinviteneeduseragree(
      ::AcFunDanmu::Im::Cloud::Message::GroupInviteNeedUserAgree* groupinviteneeduseragree);
  ::AcFunDanmu::Im::Cloud::Message::GroupInviteNeedUserAgree* unsafe_arena_release_groupinviteneeduseragree();

  void clear_GroupSetting();
  GroupSettingCase GroupSetting_case() const;
  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest)
 private:
  class _Internal;
  void set_has_rename();
  void set_has_desc();
  void set_has_joinneedpermission();
  void set_has_invitepermission();
  void set_has_groupmemberssilence();
  void set_has_groupadmintransfer();
  void set_has_settingupdateonlyadmin();
  void set_has_remindallonlyadmin();
  void set_has_batchupdate();
  void set_has_groupmembertempsilence();
  void set_has_groupextradataupdate();
  void set_has_groupheadurlupdate();
  void set_has_groupinviteneeduseragree();

  inline bool has_GroupSetting() const;
  inline void clear_has_GroupSetting();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupid_;
    union GroupSettingUnion {
      constexpr GroupSettingUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::AcFunDanmu::Im::Cloud::Message::GroupSettingRename* rename_;
      ::AcFunDanmu::Im::Cloud::Message::GroupSettingDesc* desc_;
      ::AcFunDanmu::Im::Cloud::Message::GroupSettingJoinNeedPermission* joinneedpermission_;
      ::AcFunDanmu::Im::Cloud::Message::GroupSettingInvitePermission* invitepermission_;
      ::AcFunDanmu::Im::Cloud::Message::GroupSettingMemberSilence* groupmemberssilence_;
      ::AcFunDanmu::Im::Cloud::Message::GroupSettingAdminTransfer* groupadmintransfer_;
      ::AcFunDanmu::Im::Cloud::Message::GroupSettingUpdateOnlyAdmin* settingupdateonlyadmin_;
      ::AcFunDanmu::Im::Cloud::Message::GroupSettingRemindAllOnlyAdmin* remindallonlyadmin_;
      ::AcFunDanmu::Im::Cloud::Message::GroupSettingBatchUpdate* batchupdate_;
      ::AcFunDanmu::Im::Cloud::Message::GroupSettingMemberTempSilence* groupmembertempsilence_;
      ::AcFunDanmu::Im::Cloud::Message::GroupExtraDataUpdate* groupextradataupdate_;
      ::AcFunDanmu::Im::Cloud::Message::GroupHeadUrlUpdate* groupheadurlupdate_;
      ::AcFunDanmu::Im::Cloud::Message::GroupInviteNeedUserAgree* groupinviteneeduseragree_;
    } GroupSetting_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GroupSettingRequest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GroupSettingRequest

// .AcFunDanmu.Im.Cloud.Message.GroupSettingRename rename = 2;
inline bool GroupSettingRequest::_internal_has_rename() const {
  return GroupSetting_case() == kRename;
}
inline bool GroupSettingRequest::has_rename() const {
  return _internal_has_rename();
}
inline void GroupSettingRequest::set_has_rename() {
  _impl_._oneof_case_[0] = kRename;
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupSettingRename* GroupSettingRequest::release_rename() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.rename)
  if (_internal_has_rename()) {
    clear_has_GroupSetting();
    ::AcFunDanmu::Im::Cloud::Message::GroupSettingRename* temp = _impl_.GroupSetting_.rename_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.GroupSetting_.rename_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::AcFunDanmu::Im::Cloud::Message::GroupSettingRename& GroupSettingRequest::_internal_rename() const {
  return _internal_has_rename()
      ? *_impl_.GroupSetting_.rename_
      : reinterpret_cast< ::AcFunDanmu::Im::Cloud::Message::GroupSettingRename&>(::AcFunDanmu::Im::Cloud::Message::_GroupSettingRename_default_instance_);
}
inline const ::AcFunDanmu::Im::Cloud::Message::GroupSettingRename& GroupSettingRequest::rename() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.rename)
  return _internal_rename();
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupSettingRename* GroupSettingRequest::unsafe_arena_release_rename() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.rename)
  if (_internal_has_rename()) {
    clear_has_GroupSetting();
    ::AcFunDanmu::Im::Cloud::Message::GroupSettingRename* temp = _impl_.GroupSetting_.rename_;
    _impl_.GroupSetting_.rename_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GroupSettingRequest::unsafe_arena_set_allocated_rename(::AcFunDanmu::Im::Cloud::Message::GroupSettingRename* rename) {
  clear_GroupSetting();
  if (rename) {
    set_has_rename();
    _impl_.GroupSetting_.rename_ = rename;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.rename)
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupSettingRename* GroupSettingRequest::_internal_mutable_rename() {
  if (!_internal_has_rename()) {
    clear_GroupSetting();
    set_has_rename();
    _impl_.GroupSetting_.rename_ = CreateMaybeMessage< ::AcFunDanmu::Im::Cloud::Message::GroupSettingRename >(GetArenaForAllocation());
  }
  return _impl_.GroupSetting_.rename_;
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupSettingRename* GroupSettingRequest::mutable_rename() {
  ::AcFunDanmu::Im::Cloud::Message::GroupSettingRename* _msg = _internal_mutable_rename();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.rename)
  return _msg;
}

// .AcFunDanmu.Im.Cloud.Message.GroupSettingDesc desc = 3;
inline bool GroupSettingRequest::_internal_has_desc() const {
  return GroupSetting_case() == kDesc;
}
inline bool GroupSettingRequest::has_desc() const {
  return _internal_has_desc();
}
inline void GroupSettingRequest::set_has_desc() {
  _impl_._oneof_case_[0] = kDesc;
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupSettingDesc* GroupSettingRequest::release_desc() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.desc)
  if (_internal_has_desc()) {
    clear_has_GroupSetting();
    ::AcFunDanmu::Im::Cloud::Message::GroupSettingDesc* temp = _impl_.GroupSetting_.desc_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.GroupSetting_.desc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::AcFunDanmu::Im::Cloud::Message::GroupSettingDesc& GroupSettingRequest::_internal_desc() const {
  return _internal_has_desc()
      ? *_impl_.GroupSetting_.desc_
      : reinterpret_cast< ::AcFunDanmu::Im::Cloud::Message::GroupSettingDesc&>(::AcFunDanmu::Im::Cloud::Message::_GroupSettingDesc_default_instance_);
}
inline const ::AcFunDanmu::Im::Cloud::Message::GroupSettingDesc& GroupSettingRequest::desc() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.desc)
  return _internal_desc();
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupSettingDesc* GroupSettingRequest::unsafe_arena_release_desc() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.desc)
  if (_internal_has_desc()) {
    clear_has_GroupSetting();
    ::AcFunDanmu::Im::Cloud::Message::GroupSettingDesc* temp = _impl_.GroupSetting_.desc_;
    _impl_.GroupSetting_.desc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GroupSettingRequest::unsafe_arena_set_allocated_desc(::AcFunDanmu::Im::Cloud::Message::GroupSettingDesc* desc) {
  clear_GroupSetting();
  if (desc) {
    set_has_desc();
    _impl_.GroupSetting_.desc_ = desc;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.desc)
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupSettingDesc* GroupSettingRequest::_internal_mutable_desc() {
  if (!_internal_has_desc()) {
    clear_GroupSetting();
    set_has_desc();
    _impl_.GroupSetting_.desc_ = CreateMaybeMessage< ::AcFunDanmu::Im::Cloud::Message::GroupSettingDesc >(GetArenaForAllocation());
  }
  return _impl_.GroupSetting_.desc_;
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupSettingDesc* GroupSettingRequest::mutable_desc() {
  ::AcFunDanmu::Im::Cloud::Message::GroupSettingDesc* _msg = _internal_mutable_desc();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.desc)
  return _msg;
}

// .AcFunDanmu.Im.Cloud.Message.GroupSettingJoinNeedPermission joinNeedPermission = 4;
inline bool GroupSettingRequest::_internal_has_joinneedpermission() const {
  return GroupSetting_case() == kJoinNeedPermission;
}
inline bool GroupSettingRequest::has_joinneedpermission() const {
  return _internal_has_joinneedpermission();
}
inline void GroupSettingRequest::set_has_joinneedpermission() {
  _impl_._oneof_case_[0] = kJoinNeedPermission;
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupSettingJoinNeedPermission* GroupSettingRequest::release_joinneedpermission() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.joinNeedPermission)
  if (_internal_has_joinneedpermission()) {
    clear_has_GroupSetting();
    ::AcFunDanmu::Im::Cloud::Message::GroupSettingJoinNeedPermission* temp = _impl_.GroupSetting_.joinneedpermission_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.GroupSetting_.joinneedpermission_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::AcFunDanmu::Im::Cloud::Message::GroupSettingJoinNeedPermission& GroupSettingRequest::_internal_joinneedpermission() const {
  return _internal_has_joinneedpermission()
      ? *_impl_.GroupSetting_.joinneedpermission_
      : reinterpret_cast< ::AcFunDanmu::Im::Cloud::Message::GroupSettingJoinNeedPermission&>(::AcFunDanmu::Im::Cloud::Message::_GroupSettingJoinNeedPermission_default_instance_);
}
inline const ::AcFunDanmu::Im::Cloud::Message::GroupSettingJoinNeedPermission& GroupSettingRequest::joinneedpermission() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.joinNeedPermission)
  return _internal_joinneedpermission();
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupSettingJoinNeedPermission* GroupSettingRequest::unsafe_arena_release_joinneedpermission() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.joinNeedPermission)
  if (_internal_has_joinneedpermission()) {
    clear_has_GroupSetting();
    ::AcFunDanmu::Im::Cloud::Message::GroupSettingJoinNeedPermission* temp = _impl_.GroupSetting_.joinneedpermission_;
    _impl_.GroupSetting_.joinneedpermission_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GroupSettingRequest::unsafe_arena_set_allocated_joinneedpermission(::AcFunDanmu::Im::Cloud::Message::GroupSettingJoinNeedPermission* joinneedpermission) {
  clear_GroupSetting();
  if (joinneedpermission) {
    set_has_joinneedpermission();
    _impl_.GroupSetting_.joinneedpermission_ = joinneedpermission;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.joinNeedPermission)
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupSettingJoinNeedPermission* GroupSettingRequest::_internal_mutable_joinneedpermission() {
  if (!_internal_has_joinneedpermission()) {
    clear_GroupSetting();
    set_has_joinneedpermission();
    _impl_.GroupSetting_.joinneedpermission_ = CreateMaybeMessage< ::AcFunDanmu::Im::Cloud::Message::GroupSettingJoinNeedPermission >(GetArenaForAllocation());
  }
  return _impl_.GroupSetting_.joinneedpermission_;
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupSettingJoinNeedPermission* GroupSettingRequest::mutable_joinneedpermission() {
  ::AcFunDanmu::Im::Cloud::Message::GroupSettingJoinNeedPermission* _msg = _internal_mutable_joinneedpermission();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.joinNeedPermission)
  return _msg;
}

// .AcFunDanmu.Im.Cloud.Message.GroupSettingInvitePermission invitePermission = 5;
inline bool GroupSettingRequest::_internal_has_invitepermission() const {
  return GroupSetting_case() == kInvitePermission;
}
inline bool GroupSettingRequest::has_invitepermission() const {
  return _internal_has_invitepermission();
}
inline void GroupSettingRequest::set_has_invitepermission() {
  _impl_._oneof_case_[0] = kInvitePermission;
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupSettingInvitePermission* GroupSettingRequest::release_invitepermission() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.invitePermission)
  if (_internal_has_invitepermission()) {
    clear_has_GroupSetting();
    ::AcFunDanmu::Im::Cloud::Message::GroupSettingInvitePermission* temp = _impl_.GroupSetting_.invitepermission_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.GroupSetting_.invitepermission_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::AcFunDanmu::Im::Cloud::Message::GroupSettingInvitePermission& GroupSettingRequest::_internal_invitepermission() const {
  return _internal_has_invitepermission()
      ? *_impl_.GroupSetting_.invitepermission_
      : reinterpret_cast< ::AcFunDanmu::Im::Cloud::Message::GroupSettingInvitePermission&>(::AcFunDanmu::Im::Cloud::Message::_GroupSettingInvitePermission_default_instance_);
}
inline const ::AcFunDanmu::Im::Cloud::Message::GroupSettingInvitePermission& GroupSettingRequest::invitepermission() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.invitePermission)
  return _internal_invitepermission();
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupSettingInvitePermission* GroupSettingRequest::unsafe_arena_release_invitepermission() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.invitePermission)
  if (_internal_has_invitepermission()) {
    clear_has_GroupSetting();
    ::AcFunDanmu::Im::Cloud::Message::GroupSettingInvitePermission* temp = _impl_.GroupSetting_.invitepermission_;
    _impl_.GroupSetting_.invitepermission_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GroupSettingRequest::unsafe_arena_set_allocated_invitepermission(::AcFunDanmu::Im::Cloud::Message::GroupSettingInvitePermission* invitepermission) {
  clear_GroupSetting();
  if (invitepermission) {
    set_has_invitepermission();
    _impl_.GroupSetting_.invitepermission_ = invitepermission;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.invitePermission)
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupSettingInvitePermission* GroupSettingRequest::_internal_mutable_invitepermission() {
  if (!_internal_has_invitepermission()) {
    clear_GroupSetting();
    set_has_invitepermission();
    _impl_.GroupSetting_.invitepermission_ = CreateMaybeMessage< ::AcFunDanmu::Im::Cloud::Message::GroupSettingInvitePermission >(GetArenaForAllocation());
  }
  return _impl_.GroupSetting_.invitepermission_;
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupSettingInvitePermission* GroupSettingRequest::mutable_invitepermission() {
  ::AcFunDanmu::Im::Cloud::Message::GroupSettingInvitePermission* _msg = _internal_mutable_invitepermission();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.invitePermission)
  return _msg;
}

// .AcFunDanmu.Im.Cloud.Message.GroupSettingMemberSilence groupMembersSilence = 6;
inline bool GroupSettingRequest::_internal_has_groupmemberssilence() const {
  return GroupSetting_case() == kGroupMembersSilence;
}
inline bool GroupSettingRequest::has_groupmemberssilence() const {
  return _internal_has_groupmemberssilence();
}
inline void GroupSettingRequest::set_has_groupmemberssilence() {
  _impl_._oneof_case_[0] = kGroupMembersSilence;
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupSettingMemberSilence* GroupSettingRequest::release_groupmemberssilence() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.groupMembersSilence)
  if (_internal_has_groupmemberssilence()) {
    clear_has_GroupSetting();
    ::AcFunDanmu::Im::Cloud::Message::GroupSettingMemberSilence* temp = _impl_.GroupSetting_.groupmemberssilence_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.GroupSetting_.groupmemberssilence_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::AcFunDanmu::Im::Cloud::Message::GroupSettingMemberSilence& GroupSettingRequest::_internal_groupmemberssilence() const {
  return _internal_has_groupmemberssilence()
      ? *_impl_.GroupSetting_.groupmemberssilence_
      : reinterpret_cast< ::AcFunDanmu::Im::Cloud::Message::GroupSettingMemberSilence&>(::AcFunDanmu::Im::Cloud::Message::_GroupSettingMemberSilence_default_instance_);
}
inline const ::AcFunDanmu::Im::Cloud::Message::GroupSettingMemberSilence& GroupSettingRequest::groupmemberssilence() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.groupMembersSilence)
  return _internal_groupmemberssilence();
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupSettingMemberSilence* GroupSettingRequest::unsafe_arena_release_groupmemberssilence() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.groupMembersSilence)
  if (_internal_has_groupmemberssilence()) {
    clear_has_GroupSetting();
    ::AcFunDanmu::Im::Cloud::Message::GroupSettingMemberSilence* temp = _impl_.GroupSetting_.groupmemberssilence_;
    _impl_.GroupSetting_.groupmemberssilence_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GroupSettingRequest::unsafe_arena_set_allocated_groupmemberssilence(::AcFunDanmu::Im::Cloud::Message::GroupSettingMemberSilence* groupmemberssilence) {
  clear_GroupSetting();
  if (groupmemberssilence) {
    set_has_groupmemberssilence();
    _impl_.GroupSetting_.groupmemberssilence_ = groupmemberssilence;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.groupMembersSilence)
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupSettingMemberSilence* GroupSettingRequest::_internal_mutable_groupmemberssilence() {
  if (!_internal_has_groupmemberssilence()) {
    clear_GroupSetting();
    set_has_groupmemberssilence();
    _impl_.GroupSetting_.groupmemberssilence_ = CreateMaybeMessage< ::AcFunDanmu::Im::Cloud::Message::GroupSettingMemberSilence >(GetArenaForAllocation());
  }
  return _impl_.GroupSetting_.groupmemberssilence_;
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupSettingMemberSilence* GroupSettingRequest::mutable_groupmemberssilence() {
  ::AcFunDanmu::Im::Cloud::Message::GroupSettingMemberSilence* _msg = _internal_mutable_groupmemberssilence();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.groupMembersSilence)
  return _msg;
}

// .AcFunDanmu.Im.Cloud.Message.GroupSettingAdminTransfer groupAdminTransfer = 7;
inline bool GroupSettingRequest::_internal_has_groupadmintransfer() const {
  return GroupSetting_case() == kGroupAdminTransfer;
}
inline bool GroupSettingRequest::has_groupadmintransfer() const {
  return _internal_has_groupadmintransfer();
}
inline void GroupSettingRequest::set_has_groupadmintransfer() {
  _impl_._oneof_case_[0] = kGroupAdminTransfer;
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupSettingAdminTransfer* GroupSettingRequest::release_groupadmintransfer() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.groupAdminTransfer)
  if (_internal_has_groupadmintransfer()) {
    clear_has_GroupSetting();
    ::AcFunDanmu::Im::Cloud::Message::GroupSettingAdminTransfer* temp = _impl_.GroupSetting_.groupadmintransfer_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.GroupSetting_.groupadmintransfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::AcFunDanmu::Im::Cloud::Message::GroupSettingAdminTransfer& GroupSettingRequest::_internal_groupadmintransfer() const {
  return _internal_has_groupadmintransfer()
      ? *_impl_.GroupSetting_.groupadmintransfer_
      : reinterpret_cast< ::AcFunDanmu::Im::Cloud::Message::GroupSettingAdminTransfer&>(::AcFunDanmu::Im::Cloud::Message::_GroupSettingAdminTransfer_default_instance_);
}
inline const ::AcFunDanmu::Im::Cloud::Message::GroupSettingAdminTransfer& GroupSettingRequest::groupadmintransfer() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.groupAdminTransfer)
  return _internal_groupadmintransfer();
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupSettingAdminTransfer* GroupSettingRequest::unsafe_arena_release_groupadmintransfer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.groupAdminTransfer)
  if (_internal_has_groupadmintransfer()) {
    clear_has_GroupSetting();
    ::AcFunDanmu::Im::Cloud::Message::GroupSettingAdminTransfer* temp = _impl_.GroupSetting_.groupadmintransfer_;
    _impl_.GroupSetting_.groupadmintransfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GroupSettingRequest::unsafe_arena_set_allocated_groupadmintransfer(::AcFunDanmu::Im::Cloud::Message::GroupSettingAdminTransfer* groupadmintransfer) {
  clear_GroupSetting();
  if (groupadmintransfer) {
    set_has_groupadmintransfer();
    _impl_.GroupSetting_.groupadmintransfer_ = groupadmintransfer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.groupAdminTransfer)
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupSettingAdminTransfer* GroupSettingRequest::_internal_mutable_groupadmintransfer() {
  if (!_internal_has_groupadmintransfer()) {
    clear_GroupSetting();
    set_has_groupadmintransfer();
    _impl_.GroupSetting_.groupadmintransfer_ = CreateMaybeMessage< ::AcFunDanmu::Im::Cloud::Message::GroupSettingAdminTransfer >(GetArenaForAllocation());
  }
  return _impl_.GroupSetting_.groupadmintransfer_;
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupSettingAdminTransfer* GroupSettingRequest::mutable_groupadmintransfer() {
  ::AcFunDanmu::Im::Cloud::Message::GroupSettingAdminTransfer* _msg = _internal_mutable_groupadmintransfer();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.groupAdminTransfer)
  return _msg;
}

// .AcFunDanmu.Im.Cloud.Message.GroupSettingUpdateOnlyAdmin settingUpdateOnlyAdmin = 8;
inline bool GroupSettingRequest::_internal_has_settingupdateonlyadmin() const {
  return GroupSetting_case() == kSettingUpdateOnlyAdmin;
}
inline bool GroupSettingRequest::has_settingupdateonlyadmin() const {
  return _internal_has_settingupdateonlyadmin();
}
inline void GroupSettingRequest::set_has_settingupdateonlyadmin() {
  _impl_._oneof_case_[0] = kSettingUpdateOnlyAdmin;
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupSettingUpdateOnlyAdmin* GroupSettingRequest::release_settingupdateonlyadmin() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.settingUpdateOnlyAdmin)
  if (_internal_has_settingupdateonlyadmin()) {
    clear_has_GroupSetting();
    ::AcFunDanmu::Im::Cloud::Message::GroupSettingUpdateOnlyAdmin* temp = _impl_.GroupSetting_.settingupdateonlyadmin_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.GroupSetting_.settingupdateonlyadmin_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::AcFunDanmu::Im::Cloud::Message::GroupSettingUpdateOnlyAdmin& GroupSettingRequest::_internal_settingupdateonlyadmin() const {
  return _internal_has_settingupdateonlyadmin()
      ? *_impl_.GroupSetting_.settingupdateonlyadmin_
      : reinterpret_cast< ::AcFunDanmu::Im::Cloud::Message::GroupSettingUpdateOnlyAdmin&>(::AcFunDanmu::Im::Cloud::Message::_GroupSettingUpdateOnlyAdmin_default_instance_);
}
inline const ::AcFunDanmu::Im::Cloud::Message::GroupSettingUpdateOnlyAdmin& GroupSettingRequest::settingupdateonlyadmin() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.settingUpdateOnlyAdmin)
  return _internal_settingupdateonlyadmin();
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupSettingUpdateOnlyAdmin* GroupSettingRequest::unsafe_arena_release_settingupdateonlyadmin() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.settingUpdateOnlyAdmin)
  if (_internal_has_settingupdateonlyadmin()) {
    clear_has_GroupSetting();
    ::AcFunDanmu::Im::Cloud::Message::GroupSettingUpdateOnlyAdmin* temp = _impl_.GroupSetting_.settingupdateonlyadmin_;
    _impl_.GroupSetting_.settingupdateonlyadmin_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GroupSettingRequest::unsafe_arena_set_allocated_settingupdateonlyadmin(::AcFunDanmu::Im::Cloud::Message::GroupSettingUpdateOnlyAdmin* settingupdateonlyadmin) {
  clear_GroupSetting();
  if (settingupdateonlyadmin) {
    set_has_settingupdateonlyadmin();
    _impl_.GroupSetting_.settingupdateonlyadmin_ = settingupdateonlyadmin;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.settingUpdateOnlyAdmin)
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupSettingUpdateOnlyAdmin* GroupSettingRequest::_internal_mutable_settingupdateonlyadmin() {
  if (!_internal_has_settingupdateonlyadmin()) {
    clear_GroupSetting();
    set_has_settingupdateonlyadmin();
    _impl_.GroupSetting_.settingupdateonlyadmin_ = CreateMaybeMessage< ::AcFunDanmu::Im::Cloud::Message::GroupSettingUpdateOnlyAdmin >(GetArenaForAllocation());
  }
  return _impl_.GroupSetting_.settingupdateonlyadmin_;
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupSettingUpdateOnlyAdmin* GroupSettingRequest::mutable_settingupdateonlyadmin() {
  ::AcFunDanmu::Im::Cloud::Message::GroupSettingUpdateOnlyAdmin* _msg = _internal_mutable_settingupdateonlyadmin();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.settingUpdateOnlyAdmin)
  return _msg;
}

// .AcFunDanmu.Im.Cloud.Message.GroupSettingRemindAllOnlyAdmin remindAllOnlyAdmin = 9;
inline bool GroupSettingRequest::_internal_has_remindallonlyadmin() const {
  return GroupSetting_case() == kRemindAllOnlyAdmin;
}
inline bool GroupSettingRequest::has_remindallonlyadmin() const {
  return _internal_has_remindallonlyadmin();
}
inline void GroupSettingRequest::set_has_remindallonlyadmin() {
  _impl_._oneof_case_[0] = kRemindAllOnlyAdmin;
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupSettingRemindAllOnlyAdmin* GroupSettingRequest::release_remindallonlyadmin() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.remindAllOnlyAdmin)
  if (_internal_has_remindallonlyadmin()) {
    clear_has_GroupSetting();
    ::AcFunDanmu::Im::Cloud::Message::GroupSettingRemindAllOnlyAdmin* temp = _impl_.GroupSetting_.remindallonlyadmin_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.GroupSetting_.remindallonlyadmin_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::AcFunDanmu::Im::Cloud::Message::GroupSettingRemindAllOnlyAdmin& GroupSettingRequest::_internal_remindallonlyadmin() const {
  return _internal_has_remindallonlyadmin()
      ? *_impl_.GroupSetting_.remindallonlyadmin_
      : reinterpret_cast< ::AcFunDanmu::Im::Cloud::Message::GroupSettingRemindAllOnlyAdmin&>(::AcFunDanmu::Im::Cloud::Message::_GroupSettingRemindAllOnlyAdmin_default_instance_);
}
inline const ::AcFunDanmu::Im::Cloud::Message::GroupSettingRemindAllOnlyAdmin& GroupSettingRequest::remindallonlyadmin() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.remindAllOnlyAdmin)
  return _internal_remindallonlyadmin();
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupSettingRemindAllOnlyAdmin* GroupSettingRequest::unsafe_arena_release_remindallonlyadmin() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.remindAllOnlyAdmin)
  if (_internal_has_remindallonlyadmin()) {
    clear_has_GroupSetting();
    ::AcFunDanmu::Im::Cloud::Message::GroupSettingRemindAllOnlyAdmin* temp = _impl_.GroupSetting_.remindallonlyadmin_;
    _impl_.GroupSetting_.remindallonlyadmin_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GroupSettingRequest::unsafe_arena_set_allocated_remindallonlyadmin(::AcFunDanmu::Im::Cloud::Message::GroupSettingRemindAllOnlyAdmin* remindallonlyadmin) {
  clear_GroupSetting();
  if (remindallonlyadmin) {
    set_has_remindallonlyadmin();
    _impl_.GroupSetting_.remindallonlyadmin_ = remindallonlyadmin;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.remindAllOnlyAdmin)
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupSettingRemindAllOnlyAdmin* GroupSettingRequest::_internal_mutable_remindallonlyadmin() {
  if (!_internal_has_remindallonlyadmin()) {
    clear_GroupSetting();
    set_has_remindallonlyadmin();
    _impl_.GroupSetting_.remindallonlyadmin_ = CreateMaybeMessage< ::AcFunDanmu::Im::Cloud::Message::GroupSettingRemindAllOnlyAdmin >(GetArenaForAllocation());
  }
  return _impl_.GroupSetting_.remindallonlyadmin_;
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupSettingRemindAllOnlyAdmin* GroupSettingRequest::mutable_remindallonlyadmin() {
  ::AcFunDanmu::Im::Cloud::Message::GroupSettingRemindAllOnlyAdmin* _msg = _internal_mutable_remindallonlyadmin();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.remindAllOnlyAdmin)
  return _msg;
}

// .AcFunDanmu.Im.Cloud.Message.GroupSettingBatchUpdate batchUpdate = 10;
inline bool GroupSettingRequest::_internal_has_batchupdate() const {
  return GroupSetting_case() == kBatchUpdate;
}
inline bool GroupSettingRequest::has_batchupdate() const {
  return _internal_has_batchupdate();
}
inline void GroupSettingRequest::set_has_batchupdate() {
  _impl_._oneof_case_[0] = kBatchUpdate;
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupSettingBatchUpdate* GroupSettingRequest::release_batchupdate() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.batchUpdate)
  if (_internal_has_batchupdate()) {
    clear_has_GroupSetting();
    ::AcFunDanmu::Im::Cloud::Message::GroupSettingBatchUpdate* temp = _impl_.GroupSetting_.batchupdate_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.GroupSetting_.batchupdate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::AcFunDanmu::Im::Cloud::Message::GroupSettingBatchUpdate& GroupSettingRequest::_internal_batchupdate() const {
  return _internal_has_batchupdate()
      ? *_impl_.GroupSetting_.batchupdate_
      : reinterpret_cast< ::AcFunDanmu::Im::Cloud::Message::GroupSettingBatchUpdate&>(::AcFunDanmu::Im::Cloud::Message::_GroupSettingBatchUpdate_default_instance_);
}
inline const ::AcFunDanmu::Im::Cloud::Message::GroupSettingBatchUpdate& GroupSettingRequest::batchupdate() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.batchUpdate)
  return _internal_batchupdate();
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupSettingBatchUpdate* GroupSettingRequest::unsafe_arena_release_batchupdate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.batchUpdate)
  if (_internal_has_batchupdate()) {
    clear_has_GroupSetting();
    ::AcFunDanmu::Im::Cloud::Message::GroupSettingBatchUpdate* temp = _impl_.GroupSetting_.batchupdate_;
    _impl_.GroupSetting_.batchupdate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GroupSettingRequest::unsafe_arena_set_allocated_batchupdate(::AcFunDanmu::Im::Cloud::Message::GroupSettingBatchUpdate* batchupdate) {
  clear_GroupSetting();
  if (batchupdate) {
    set_has_batchupdate();
    _impl_.GroupSetting_.batchupdate_ = batchupdate;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.batchUpdate)
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupSettingBatchUpdate* GroupSettingRequest::_internal_mutable_batchupdate() {
  if (!_internal_has_batchupdate()) {
    clear_GroupSetting();
    set_has_batchupdate();
    _impl_.GroupSetting_.batchupdate_ = CreateMaybeMessage< ::AcFunDanmu::Im::Cloud::Message::GroupSettingBatchUpdate >(GetArenaForAllocation());
  }
  return _impl_.GroupSetting_.batchupdate_;
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupSettingBatchUpdate* GroupSettingRequest::mutable_batchupdate() {
  ::AcFunDanmu::Im::Cloud::Message::GroupSettingBatchUpdate* _msg = _internal_mutable_batchupdate();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.batchUpdate)
  return _msg;
}

// .AcFunDanmu.Im.Cloud.Message.GroupSettingMemberTempSilence groupMemberTempSilence = 11;
inline bool GroupSettingRequest::_internal_has_groupmembertempsilence() const {
  return GroupSetting_case() == kGroupMemberTempSilence;
}
inline bool GroupSettingRequest::has_groupmembertempsilence() const {
  return _internal_has_groupmembertempsilence();
}
inline void GroupSettingRequest::set_has_groupmembertempsilence() {
  _impl_._oneof_case_[0] = kGroupMemberTempSilence;
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupSettingMemberTempSilence* GroupSettingRequest::release_groupmembertempsilence() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.groupMemberTempSilence)
  if (_internal_has_groupmembertempsilence()) {
    clear_has_GroupSetting();
    ::AcFunDanmu::Im::Cloud::Message::GroupSettingMemberTempSilence* temp = _impl_.GroupSetting_.groupmembertempsilence_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.GroupSetting_.groupmembertempsilence_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::AcFunDanmu::Im::Cloud::Message::GroupSettingMemberTempSilence& GroupSettingRequest::_internal_groupmembertempsilence() const {
  return _internal_has_groupmembertempsilence()
      ? *_impl_.GroupSetting_.groupmembertempsilence_
      : reinterpret_cast< ::AcFunDanmu::Im::Cloud::Message::GroupSettingMemberTempSilence&>(::AcFunDanmu::Im::Cloud::Message::_GroupSettingMemberTempSilence_default_instance_);
}
inline const ::AcFunDanmu::Im::Cloud::Message::GroupSettingMemberTempSilence& GroupSettingRequest::groupmembertempsilence() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.groupMemberTempSilence)
  return _internal_groupmembertempsilence();
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupSettingMemberTempSilence* GroupSettingRequest::unsafe_arena_release_groupmembertempsilence() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.groupMemberTempSilence)
  if (_internal_has_groupmembertempsilence()) {
    clear_has_GroupSetting();
    ::AcFunDanmu::Im::Cloud::Message::GroupSettingMemberTempSilence* temp = _impl_.GroupSetting_.groupmembertempsilence_;
    _impl_.GroupSetting_.groupmembertempsilence_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GroupSettingRequest::unsafe_arena_set_allocated_groupmembertempsilence(::AcFunDanmu::Im::Cloud::Message::GroupSettingMemberTempSilence* groupmembertempsilence) {
  clear_GroupSetting();
  if (groupmembertempsilence) {
    set_has_groupmembertempsilence();
    _impl_.GroupSetting_.groupmembertempsilence_ = groupmembertempsilence;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.groupMemberTempSilence)
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupSettingMemberTempSilence* GroupSettingRequest::_internal_mutable_groupmembertempsilence() {
  if (!_internal_has_groupmembertempsilence()) {
    clear_GroupSetting();
    set_has_groupmembertempsilence();
    _impl_.GroupSetting_.groupmembertempsilence_ = CreateMaybeMessage< ::AcFunDanmu::Im::Cloud::Message::GroupSettingMemberTempSilence >(GetArenaForAllocation());
  }
  return _impl_.GroupSetting_.groupmembertempsilence_;
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupSettingMemberTempSilence* GroupSettingRequest::mutable_groupmembertempsilence() {
  ::AcFunDanmu::Im::Cloud::Message::GroupSettingMemberTempSilence* _msg = _internal_mutable_groupmembertempsilence();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.groupMemberTempSilence)
  return _msg;
}

// .AcFunDanmu.Im.Cloud.Message.GroupExtraDataUpdate groupExtraDataUpdate = 12;
inline bool GroupSettingRequest::_internal_has_groupextradataupdate() const {
  return GroupSetting_case() == kGroupExtraDataUpdate;
}
inline bool GroupSettingRequest::has_groupextradataupdate() const {
  return _internal_has_groupextradataupdate();
}
inline void GroupSettingRequest::set_has_groupextradataupdate() {
  _impl_._oneof_case_[0] = kGroupExtraDataUpdate;
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupExtraDataUpdate* GroupSettingRequest::release_groupextradataupdate() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.groupExtraDataUpdate)
  if (_internal_has_groupextradataupdate()) {
    clear_has_GroupSetting();
    ::AcFunDanmu::Im::Cloud::Message::GroupExtraDataUpdate* temp = _impl_.GroupSetting_.groupextradataupdate_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.GroupSetting_.groupextradataupdate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::AcFunDanmu::Im::Cloud::Message::GroupExtraDataUpdate& GroupSettingRequest::_internal_groupextradataupdate() const {
  return _internal_has_groupextradataupdate()
      ? *_impl_.GroupSetting_.groupextradataupdate_
      : reinterpret_cast< ::AcFunDanmu::Im::Cloud::Message::GroupExtraDataUpdate&>(::AcFunDanmu::Im::Cloud::Message::_GroupExtraDataUpdate_default_instance_);
}
inline const ::AcFunDanmu::Im::Cloud::Message::GroupExtraDataUpdate& GroupSettingRequest::groupextradataupdate() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.groupExtraDataUpdate)
  return _internal_groupextradataupdate();
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupExtraDataUpdate* GroupSettingRequest::unsafe_arena_release_groupextradataupdate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.groupExtraDataUpdate)
  if (_internal_has_groupextradataupdate()) {
    clear_has_GroupSetting();
    ::AcFunDanmu::Im::Cloud::Message::GroupExtraDataUpdate* temp = _impl_.GroupSetting_.groupextradataupdate_;
    _impl_.GroupSetting_.groupextradataupdate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GroupSettingRequest::unsafe_arena_set_allocated_groupextradataupdate(::AcFunDanmu::Im::Cloud::Message::GroupExtraDataUpdate* groupextradataupdate) {
  clear_GroupSetting();
  if (groupextradataupdate) {
    set_has_groupextradataupdate();
    _impl_.GroupSetting_.groupextradataupdate_ = groupextradataupdate;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.groupExtraDataUpdate)
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupExtraDataUpdate* GroupSettingRequest::_internal_mutable_groupextradataupdate() {
  if (!_internal_has_groupextradataupdate()) {
    clear_GroupSetting();
    set_has_groupextradataupdate();
    _impl_.GroupSetting_.groupextradataupdate_ = CreateMaybeMessage< ::AcFunDanmu::Im::Cloud::Message::GroupExtraDataUpdate >(GetArenaForAllocation());
  }
  return _impl_.GroupSetting_.groupextradataupdate_;
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupExtraDataUpdate* GroupSettingRequest::mutable_groupextradataupdate() {
  ::AcFunDanmu::Im::Cloud::Message::GroupExtraDataUpdate* _msg = _internal_mutable_groupextradataupdate();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.groupExtraDataUpdate)
  return _msg;
}

// .AcFunDanmu.Im.Cloud.Message.GroupHeadUrlUpdate groupHeadUrlUpdate = 13;
inline bool GroupSettingRequest::_internal_has_groupheadurlupdate() const {
  return GroupSetting_case() == kGroupHeadUrlUpdate;
}
inline bool GroupSettingRequest::has_groupheadurlupdate() const {
  return _internal_has_groupheadurlupdate();
}
inline void GroupSettingRequest::set_has_groupheadurlupdate() {
  _impl_._oneof_case_[0] = kGroupHeadUrlUpdate;
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupHeadUrlUpdate* GroupSettingRequest::release_groupheadurlupdate() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.groupHeadUrlUpdate)
  if (_internal_has_groupheadurlupdate()) {
    clear_has_GroupSetting();
    ::AcFunDanmu::Im::Cloud::Message::GroupHeadUrlUpdate* temp = _impl_.GroupSetting_.groupheadurlupdate_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.GroupSetting_.groupheadurlupdate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::AcFunDanmu::Im::Cloud::Message::GroupHeadUrlUpdate& GroupSettingRequest::_internal_groupheadurlupdate() const {
  return _internal_has_groupheadurlupdate()
      ? *_impl_.GroupSetting_.groupheadurlupdate_
      : reinterpret_cast< ::AcFunDanmu::Im::Cloud::Message::GroupHeadUrlUpdate&>(::AcFunDanmu::Im::Cloud::Message::_GroupHeadUrlUpdate_default_instance_);
}
inline const ::AcFunDanmu::Im::Cloud::Message::GroupHeadUrlUpdate& GroupSettingRequest::groupheadurlupdate() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.groupHeadUrlUpdate)
  return _internal_groupheadurlupdate();
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupHeadUrlUpdate* GroupSettingRequest::unsafe_arena_release_groupheadurlupdate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.groupHeadUrlUpdate)
  if (_internal_has_groupheadurlupdate()) {
    clear_has_GroupSetting();
    ::AcFunDanmu::Im::Cloud::Message::GroupHeadUrlUpdate* temp = _impl_.GroupSetting_.groupheadurlupdate_;
    _impl_.GroupSetting_.groupheadurlupdate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GroupSettingRequest::unsafe_arena_set_allocated_groupheadurlupdate(::AcFunDanmu::Im::Cloud::Message::GroupHeadUrlUpdate* groupheadurlupdate) {
  clear_GroupSetting();
  if (groupheadurlupdate) {
    set_has_groupheadurlupdate();
    _impl_.GroupSetting_.groupheadurlupdate_ = groupheadurlupdate;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.groupHeadUrlUpdate)
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupHeadUrlUpdate* GroupSettingRequest::_internal_mutable_groupheadurlupdate() {
  if (!_internal_has_groupheadurlupdate()) {
    clear_GroupSetting();
    set_has_groupheadurlupdate();
    _impl_.GroupSetting_.groupheadurlupdate_ = CreateMaybeMessage< ::AcFunDanmu::Im::Cloud::Message::GroupHeadUrlUpdate >(GetArenaForAllocation());
  }
  return _impl_.GroupSetting_.groupheadurlupdate_;
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupHeadUrlUpdate* GroupSettingRequest::mutable_groupheadurlupdate() {
  ::AcFunDanmu::Im::Cloud::Message::GroupHeadUrlUpdate* _msg = _internal_mutable_groupheadurlupdate();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.groupHeadUrlUpdate)
  return _msg;
}

// .AcFunDanmu.Im.Cloud.Message.GroupInviteNeedUserAgree groupInviteNeedUserAgree = 14;
inline bool GroupSettingRequest::_internal_has_groupinviteneeduseragree() const {
  return GroupSetting_case() == kGroupInviteNeedUserAgree;
}
inline bool GroupSettingRequest::has_groupinviteneeduseragree() const {
  return _internal_has_groupinviteneeduseragree();
}
inline void GroupSettingRequest::set_has_groupinviteneeduseragree() {
  _impl_._oneof_case_[0] = kGroupInviteNeedUserAgree;
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupInviteNeedUserAgree* GroupSettingRequest::release_groupinviteneeduseragree() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.groupInviteNeedUserAgree)
  if (_internal_has_groupinviteneeduseragree()) {
    clear_has_GroupSetting();
    ::AcFunDanmu::Im::Cloud::Message::GroupInviteNeedUserAgree* temp = _impl_.GroupSetting_.groupinviteneeduseragree_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.GroupSetting_.groupinviteneeduseragree_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::AcFunDanmu::Im::Cloud::Message::GroupInviteNeedUserAgree& GroupSettingRequest::_internal_groupinviteneeduseragree() const {
  return _internal_has_groupinviteneeduseragree()
      ? *_impl_.GroupSetting_.groupinviteneeduseragree_
      : reinterpret_cast< ::AcFunDanmu::Im::Cloud::Message::GroupInviteNeedUserAgree&>(::AcFunDanmu::Im::Cloud::Message::_GroupInviteNeedUserAgree_default_instance_);
}
inline const ::AcFunDanmu::Im::Cloud::Message::GroupInviteNeedUserAgree& GroupSettingRequest::groupinviteneeduseragree() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.groupInviteNeedUserAgree)
  return _internal_groupinviteneeduseragree();
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupInviteNeedUserAgree* GroupSettingRequest::unsafe_arena_release_groupinviteneeduseragree() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.groupInviteNeedUserAgree)
  if (_internal_has_groupinviteneeduseragree()) {
    clear_has_GroupSetting();
    ::AcFunDanmu::Im::Cloud::Message::GroupInviteNeedUserAgree* temp = _impl_.GroupSetting_.groupinviteneeduseragree_;
    _impl_.GroupSetting_.groupinviteneeduseragree_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GroupSettingRequest::unsafe_arena_set_allocated_groupinviteneeduseragree(::AcFunDanmu::Im::Cloud::Message::GroupInviteNeedUserAgree* groupinviteneeduseragree) {
  clear_GroupSetting();
  if (groupinviteneeduseragree) {
    set_has_groupinviteneeduseragree();
    _impl_.GroupSetting_.groupinviteneeduseragree_ = groupinviteneeduseragree;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.groupInviteNeedUserAgree)
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupInviteNeedUserAgree* GroupSettingRequest::_internal_mutable_groupinviteneeduseragree() {
  if (!_internal_has_groupinviteneeduseragree()) {
    clear_GroupSetting();
    set_has_groupinviteneeduseragree();
    _impl_.GroupSetting_.groupinviteneeduseragree_ = CreateMaybeMessage< ::AcFunDanmu::Im::Cloud::Message::GroupInviteNeedUserAgree >(GetArenaForAllocation());
  }
  return _impl_.GroupSetting_.groupinviteneeduseragree_;
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupInviteNeedUserAgree* GroupSettingRequest::mutable_groupinviteneeduseragree() {
  ::AcFunDanmu::Im::Cloud::Message::GroupInviteNeedUserAgree* _msg = _internal_mutable_groupinviteneeduseragree();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.groupInviteNeedUserAgree)
  return _msg;
}

// string groupId = 1;
inline void GroupSettingRequest::clear_groupid() {
  _impl_.groupid_.ClearToEmpty();
}
inline const std::string& GroupSettingRequest::groupid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.groupId)
  return _internal_groupid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupSettingRequest::set_groupid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.groupid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.groupId)
}
inline std::string* GroupSettingRequest::mutable_groupid() {
  std::string* _s = _internal_mutable_groupid();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.groupId)
  return _s;
}
inline const std::string& GroupSettingRequest::_internal_groupid() const {
  return _impl_.groupid_.Get();
}
inline void GroupSettingRequest::_internal_set_groupid(const std::string& value) {
  
  _impl_.groupid_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupSettingRequest::_internal_mutable_groupid() {
  
  return _impl_.groupid_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupSettingRequest::release_groupid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.groupId)
  return _impl_.groupid_.Release();
}
inline void GroupSettingRequest::set_allocated_groupid(std::string* groupid) {
  if (groupid != nullptr) {
    
  } else {
    
  }
  _impl_.groupid_.SetAllocated(groupid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.groupid_.IsDefault()) {
    _impl_.groupid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.groupId)
}

inline bool GroupSettingRequest::has_GroupSetting() const {
  return GroupSetting_case() != GROUPSETTING_NOT_SET;
}
inline void GroupSettingRequest::clear_has_GroupSetting() {
  _impl_._oneof_case_[0] = GROUPSETTING_NOT_SET;
}
inline GroupSettingRequest::GroupSettingCase GroupSettingRequest::GroupSetting_case() const {
  return GroupSettingRequest::GroupSettingCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Message
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_GroupSettingRequest_2eproto
