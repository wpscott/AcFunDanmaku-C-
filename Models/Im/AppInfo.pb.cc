// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AppInfo.proto

#include "AppInfo.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace AcFunDanmu {
namespace Im {
namespace Basic {
PROTOBUF_CONSTEXPR AppInfo_ExtensionInfoEntry_DoNotUse::AppInfo_ExtensionInfoEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct AppInfo_ExtensionInfoEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppInfo_ExtensionInfoEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppInfo_ExtensionInfoEntry_DoNotUseDefaultTypeInternal() {}
  union {
    AppInfo_ExtensionInfoEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppInfo_ExtensionInfoEntry_DoNotUseDefaultTypeInternal _AppInfo_ExtensionInfoEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR AppInfo::AppInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.extensioninfo_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.appname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.appversion_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.appchannel_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sdkversion_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.linkversion_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AppInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppInfoDefaultTypeInternal() {}
  union {
    AppInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppInfoDefaultTypeInternal _AppInfo_default_instance_;
}  // namespace Basic
}  // namespace Im
}  // namespace AcFunDanmu
static ::_pb::Metadata file_level_metadata_AppInfo_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_AppInfo_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_AppInfo_2eproto = nullptr;

const uint32_t TableStruct_AppInfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::AppInfo_ExtensionInfoEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::AppInfo_ExtensionInfoEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::AppInfo_ExtensionInfoEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::AppInfo_ExtensionInfoEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::AppInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::AppInfo, _impl_.appname_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::AppInfo, _impl_.appversion_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::AppInfo, _impl_.appchannel_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::AppInfo, _impl_.sdkversion_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::AppInfo, _impl_.linkversion_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::AppInfo, _impl_.extensioninfo_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::AcFunDanmu::Im::Basic::AppInfo_ExtensionInfoEntry_DoNotUse)},
  { 10, -1, -1, sizeof(::AcFunDanmu::Im::Basic::AppInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::AcFunDanmu::Im::Basic::_AppInfo_ExtensionInfoEntry_DoNotUse_default_instance_._instance,
  &::AcFunDanmu::Im::Basic::_AppInfo_default_instance_._instance,
};

const char descriptor_table_protodef_AppInfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rAppInfo.proto\022\023AcFunDanmu.Im.Basic\"\351\001\n"
  "\007AppInfo\022\017\n\007appName\030\001 \001(\t\022\022\n\nappVersion\030"
  "\002 \001(\t\022\022\n\nappChannel\030\003 \001(\t\022\022\n\nsdkVersion\030"
  "\004 \001(\t\022\023\n\013linkVersion\030\005 \001(\t\022F\n\rextensionI"
  "nfo\030\013 \003(\0132/.AcFunDanmu.Im.Basic.AppInfo."
  "ExtensionInfoEntry\0324\n\022ExtensionInfoEntry"
  "\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_AppInfo_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_AppInfo_2eproto = {
    false, false, 280, descriptor_table_protodef_AppInfo_2eproto,
    "AppInfo.proto",
    &descriptor_table_AppInfo_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_AppInfo_2eproto::offsets,
    file_level_metadata_AppInfo_2eproto, file_level_enum_descriptors_AppInfo_2eproto,
    file_level_service_descriptors_AppInfo_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_AppInfo_2eproto_getter() {
  return &descriptor_table_AppInfo_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_AppInfo_2eproto(&descriptor_table_AppInfo_2eproto);
namespace AcFunDanmu {
namespace Im {
namespace Basic {

// ===================================================================

AppInfo_ExtensionInfoEntry_DoNotUse::AppInfo_ExtensionInfoEntry_DoNotUse() {}
AppInfo_ExtensionInfoEntry_DoNotUse::AppInfo_ExtensionInfoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AppInfo_ExtensionInfoEntry_DoNotUse::MergeFrom(const AppInfo_ExtensionInfoEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AppInfo_ExtensionInfoEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_AppInfo_2eproto_getter, &descriptor_table_AppInfo_2eproto_once,
      file_level_metadata_AppInfo_2eproto[0]);
}

// ===================================================================

class AppInfo::_Internal {
 public:
};

AppInfo::AppInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &AppInfo::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.Im.Basic.AppInfo)
}
AppInfo::AppInfo(const AppInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AppInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.extensioninfo_)*/{}
    , decltype(_impl_.appname_){}
    , decltype(_impl_.appversion_){}
    , decltype(_impl_.appchannel_){}
    , decltype(_impl_.sdkversion_){}
    , decltype(_impl_.linkversion_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.extensioninfo_.MergeFrom(from._impl_.extensioninfo_);
  _impl_.appname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.appname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_appname().empty()) {
    _this->_impl_.appname_.Set(from._internal_appname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.appversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.appversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_appversion().empty()) {
    _this->_impl_.appversion_.Set(from._internal_appversion(), 
      _this->GetArenaForAllocation());
  }
  _impl_.appchannel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.appchannel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_appchannel().empty()) {
    _this->_impl_.appchannel_.Set(from._internal_appchannel(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sdkversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sdkversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sdkversion().empty()) {
    _this->_impl_.sdkversion_.Set(from._internal_sdkversion(), 
      _this->GetArenaForAllocation());
  }
  _impl_.linkversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.linkversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_linkversion().empty()) {
    _this->_impl_.linkversion_.Set(from._internal_linkversion(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.Im.Basic.AppInfo)
}

inline void AppInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.extensioninfo_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.appname_){}
    , decltype(_impl_.appversion_){}
    , decltype(_impl_.appchannel_){}
    , decltype(_impl_.sdkversion_){}
    , decltype(_impl_.linkversion_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.appname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.appname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.appversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.appversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.appchannel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.appchannel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sdkversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sdkversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.linkversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.linkversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AppInfo::~AppInfo() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.Im.Basic.AppInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void AppInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.extensioninfo_.Destruct();
  _impl_.extensioninfo_.~MapField();
  _impl_.appname_.Destroy();
  _impl_.appversion_.Destroy();
  _impl_.appchannel_.Destroy();
  _impl_.sdkversion_.Destroy();
  _impl_.linkversion_.Destroy();
}

void AppInfo::ArenaDtor(void* object) {
  AppInfo* _this = reinterpret_cast< AppInfo* >(object);
  _this->_impl_.extensioninfo_.Destruct();
}
void AppInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AppInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.Im.Basic.AppInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.extensioninfo_.Clear();
  _impl_.appname_.ClearToEmpty();
  _impl_.appversion_.ClearToEmpty();
  _impl_.appchannel_.ClearToEmpty();
  _impl_.sdkversion_.ClearToEmpty();
  _impl_.linkversion_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string appName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_appname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Basic.AppInfo.appName"));
        } else
          goto handle_unusual;
        continue;
      // string appVersion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_appversion();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Basic.AppInfo.appVersion"));
        } else
          goto handle_unusual;
        continue;
      // string appChannel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_appchannel();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Basic.AppInfo.appChannel"));
        } else
          goto handle_unusual;
        continue;
      // string sdkVersion = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_sdkversion();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Basic.AppInfo.sdkVersion"));
        } else
          goto handle_unusual;
        continue;
      // string linkVersion = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_linkversion();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Basic.AppInfo.linkVersion"));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> extensionInfo = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.extensioninfo_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AppInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.Im.Basic.AppInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string appName = 1;
  if (!this->_internal_appname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_appname().data(), static_cast<int>(this->_internal_appname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Basic.AppInfo.appName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_appname(), target);
  }

  // string appVersion = 2;
  if (!this->_internal_appversion().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_appversion().data(), static_cast<int>(this->_internal_appversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Basic.AppInfo.appVersion");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_appversion(), target);
  }

  // string appChannel = 3;
  if (!this->_internal_appchannel().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_appchannel().data(), static_cast<int>(this->_internal_appchannel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Basic.AppInfo.appChannel");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_appchannel(), target);
  }

  // string sdkVersion = 4;
  if (!this->_internal_sdkversion().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sdkversion().data(), static_cast<int>(this->_internal_sdkversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Basic.AppInfo.sdkVersion");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_sdkversion(), target);
  }

  // string linkVersion = 5;
  if (!this->_internal_linkversion().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_linkversion().data(), static_cast<int>(this->_internal_linkversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Basic.AppInfo.linkVersion");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_linkversion(), target);
  }

  // map<string, string> extensionInfo = 11;
  if (!this->_internal_extensioninfo().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = AppInfo_ExtensionInfoEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_extensioninfo();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "AcFunDanmu.Im.Basic.AppInfo.ExtensionInfoEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "AcFunDanmu.Im.Basic.AppInfo.ExtensionInfoEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(11, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(11, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.Im.Basic.AppInfo)
  return target;
}

size_t AppInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.Im.Basic.AppInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> extensionInfo = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_extensioninfo_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_extensioninfo().begin();
      it != this->_internal_extensioninfo().end(); ++it) {
    total_size += AppInfo_ExtensionInfoEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string appName = 1;
  if (!this->_internal_appname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_appname());
  }

  // string appVersion = 2;
  if (!this->_internal_appversion().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_appversion());
  }

  // string appChannel = 3;
  if (!this->_internal_appchannel().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_appchannel());
  }

  // string sdkVersion = 4;
  if (!this->_internal_sdkversion().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sdkversion());
  }

  // string linkVersion = 5;
  if (!this->_internal_linkversion().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_linkversion());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AppInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppInfo::GetClassData() const { return &_class_data_; }


void AppInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AppInfo*>(&to_msg);
  auto& from = static_cast<const AppInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.Im.Basic.AppInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.extensioninfo_.MergeFrom(from._impl_.extensioninfo_);
  if (!from._internal_appname().empty()) {
    _this->_internal_set_appname(from._internal_appname());
  }
  if (!from._internal_appversion().empty()) {
    _this->_internal_set_appversion(from._internal_appversion());
  }
  if (!from._internal_appchannel().empty()) {
    _this->_internal_set_appchannel(from._internal_appchannel());
  }
  if (!from._internal_sdkversion().empty()) {
    _this->_internal_set_sdkversion(from._internal_sdkversion());
  }
  if (!from._internal_linkversion().empty()) {
    _this->_internal_set_linkversion(from._internal_linkversion());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppInfo::CopyFrom(const AppInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.Im.Basic.AppInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppInfo::IsInitialized() const {
  return true;
}

void AppInfo::InternalSwap(AppInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.extensioninfo_.InternalSwap(&other->_impl_.extensioninfo_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.appname_, lhs_arena,
      &other->_impl_.appname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.appversion_, lhs_arena,
      &other->_impl_.appversion_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.appchannel_, lhs_arena,
      &other->_impl_.appchannel_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sdkversion_, lhs_arena,
      &other->_impl_.sdkversion_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.linkversion_, lhs_arena,
      &other->_impl_.linkversion_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AppInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_AppInfo_2eproto_getter, &descriptor_table_AppInfo_2eproto_once,
      file_level_metadata_AppInfo_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Basic
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AcFunDanmu::Im::Basic::AppInfo_ExtensionInfoEntry_DoNotUse*
Arena::CreateMaybeMessage< ::AcFunDanmu::Im::Basic::AppInfo_ExtensionInfoEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::Im::Basic::AppInfo_ExtensionInfoEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::AcFunDanmu::Im::Basic::AppInfo*
Arena::CreateMaybeMessage< ::AcFunDanmu::Im::Basic::AppInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::Im::Basic::AppInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
