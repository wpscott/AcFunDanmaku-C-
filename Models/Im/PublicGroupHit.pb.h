// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PublicGroupHit.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_PublicGroupHit_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_PublicGroupHit_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_PublicGroupHit_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_PublicGroupHit_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_PublicGroupHit_2eproto;
namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Search {
class PublicGroupHit;
struct PublicGroupHitDefaultTypeInternal;
extern PublicGroupHitDefaultTypeInternal _PublicGroupHit_default_instance_;
}  // namespace Search
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::Im::Cloud::Search::PublicGroupHit* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud::Search::PublicGroupHit>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Search {

enum PublicGroupHit_PublicGroupMatchType : int {
  PublicGroupHit_PublicGroupMatchType_UNKNOWN_PGMT = 0,
  PublicGroupHit_PublicGroupMatchType_GROUP_NAME = 1,
  PublicGroupHit_PublicGroupMatchType_GROUP_ID = 2,
  PublicGroupHit_PublicGroupMatchType_GROUP_NUMBER = 3,
  PublicGroupHit_PublicGroupMatchType_PublicGroupHit_PublicGroupMatchType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PublicGroupHit_PublicGroupMatchType_PublicGroupHit_PublicGroupMatchType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PublicGroupHit_PublicGroupMatchType_IsValid(int value);
constexpr PublicGroupHit_PublicGroupMatchType PublicGroupHit_PublicGroupMatchType_PublicGroupMatchType_MIN = PublicGroupHit_PublicGroupMatchType_UNKNOWN_PGMT;
constexpr PublicGroupHit_PublicGroupMatchType PublicGroupHit_PublicGroupMatchType_PublicGroupMatchType_MAX = PublicGroupHit_PublicGroupMatchType_GROUP_NUMBER;
constexpr int PublicGroupHit_PublicGroupMatchType_PublicGroupMatchType_ARRAYSIZE = PublicGroupHit_PublicGroupMatchType_PublicGroupMatchType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PublicGroupHit_PublicGroupMatchType_descriptor();
template<typename T>
inline const std::string& PublicGroupHit_PublicGroupMatchType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PublicGroupHit_PublicGroupMatchType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PublicGroupHit_PublicGroupMatchType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PublicGroupHit_PublicGroupMatchType_descriptor(), enum_t_value);
}
inline bool PublicGroupHit_PublicGroupMatchType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PublicGroupHit_PublicGroupMatchType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PublicGroupHit_PublicGroupMatchType>(
    PublicGroupHit_PublicGroupMatchType_descriptor(), name, value);
}
// ===================================================================

class PublicGroupHit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Search.PublicGroupHit) */ {
 public:
  inline PublicGroupHit() : PublicGroupHit(nullptr) {}
  ~PublicGroupHit() override;
  explicit PROTOBUF_CONSTEXPR PublicGroupHit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublicGroupHit(const PublicGroupHit& from);
  PublicGroupHit(PublicGroupHit&& from) noexcept
    : PublicGroupHit() {
    *this = ::std::move(from);
  }

  inline PublicGroupHit& operator=(const PublicGroupHit& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublicGroupHit& operator=(PublicGroupHit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublicGroupHit& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublicGroupHit* internal_default_instance() {
    return reinterpret_cast<const PublicGroupHit*>(
               &_PublicGroupHit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PublicGroupHit& a, PublicGroupHit& b) {
    a.Swap(&b);
  }
  inline void Swap(PublicGroupHit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublicGroupHit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublicGroupHit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublicGroupHit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublicGroupHit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PublicGroupHit& from) {
    PublicGroupHit::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublicGroupHit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Search.PublicGroupHit";
  }
  protected:
  explicit PublicGroupHit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PublicGroupHit_PublicGroupMatchType PublicGroupMatchType;
  static constexpr PublicGroupMatchType UNKNOWN_PGMT =
    PublicGroupHit_PublicGroupMatchType_UNKNOWN_PGMT;
  static constexpr PublicGroupMatchType GROUP_NAME =
    PublicGroupHit_PublicGroupMatchType_GROUP_NAME;
  static constexpr PublicGroupMatchType GROUP_ID =
    PublicGroupHit_PublicGroupMatchType_GROUP_ID;
  static constexpr PublicGroupMatchType GROUP_NUMBER =
    PublicGroupHit_PublicGroupMatchType_GROUP_NUMBER;
  static inline bool PublicGroupMatchType_IsValid(int value) {
    return PublicGroupHit_PublicGroupMatchType_IsValid(value);
  }
  static constexpr PublicGroupMatchType PublicGroupMatchType_MIN =
    PublicGroupHit_PublicGroupMatchType_PublicGroupMatchType_MIN;
  static constexpr PublicGroupMatchType PublicGroupMatchType_MAX =
    PublicGroupHit_PublicGroupMatchType_PublicGroupMatchType_MAX;
  static constexpr int PublicGroupMatchType_ARRAYSIZE =
    PublicGroupHit_PublicGroupMatchType_PublicGroupMatchType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PublicGroupMatchType_descriptor() {
    return PublicGroupHit_PublicGroupMatchType_descriptor();
  }
  template<typename T>
  static inline const std::string& PublicGroupMatchType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PublicGroupMatchType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PublicGroupMatchType_Name.");
    return PublicGroupHit_PublicGroupMatchType_Name(enum_t_value);
  }
  static inline bool PublicGroupMatchType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PublicGroupMatchType* value) {
    return PublicGroupHit_PublicGroupMatchType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMatchTypeFieldNumber = 1,
  };
  // .AcFunDanmu.Im.Cloud.Search.PublicGroupHit.PublicGroupMatchType matchType = 1;
  void clear_matchtype();
  ::AcFunDanmu::Im::Cloud::Search::PublicGroupHit_PublicGroupMatchType matchtype() const;
  void set_matchtype(::AcFunDanmu::Im::Cloud::Search::PublicGroupHit_PublicGroupMatchType value);
  private:
  ::AcFunDanmu::Im::Cloud::Search::PublicGroupHit_PublicGroupMatchType _internal_matchtype() const;
  void _internal_set_matchtype(::AcFunDanmu::Im::Cloud::Search::PublicGroupHit_PublicGroupMatchType value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Search.PublicGroupHit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int matchtype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PublicGroupHit_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PublicGroupHit

// .AcFunDanmu.Im.Cloud.Search.PublicGroupHit.PublicGroupMatchType matchType = 1;
inline void PublicGroupHit::clear_matchtype() {
  _impl_.matchtype_ = 0;
}
inline ::AcFunDanmu::Im::Cloud::Search::PublicGroupHit_PublicGroupMatchType PublicGroupHit::_internal_matchtype() const {
  return static_cast< ::AcFunDanmu::Im::Cloud::Search::PublicGroupHit_PublicGroupMatchType >(_impl_.matchtype_);
}
inline ::AcFunDanmu::Im::Cloud::Search::PublicGroupHit_PublicGroupMatchType PublicGroupHit::matchtype() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Search.PublicGroupHit.matchType)
  return _internal_matchtype();
}
inline void PublicGroupHit::_internal_set_matchtype(::AcFunDanmu::Im::Cloud::Search::PublicGroupHit_PublicGroupMatchType value) {
  
  _impl_.matchtype_ = value;
}
inline void PublicGroupHit::set_matchtype(::AcFunDanmu::Im::Cloud::Search::PublicGroupHit_PublicGroupMatchType value) {
  _internal_set_matchtype(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Search.PublicGroupHit.matchType)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Search
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::AcFunDanmu::Im::Cloud::Search::PublicGroupHit_PublicGroupMatchType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::Im::Cloud::Search::PublicGroupHit_PublicGroupMatchType>() {
  return ::AcFunDanmu::Im::Cloud::Search::PublicGroupHit_PublicGroupMatchType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_PublicGroupHit_2eproto
