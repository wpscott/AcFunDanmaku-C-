// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AccessPointsConfig.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_AccessPointsConfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_AccessPointsConfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "AccessPoint.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_AccessPointsConfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_AccessPointsConfig_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_AccessPointsConfig_2eproto;
namespace AcFunDanmu {
namespace Im {
namespace Basic {
class AccessPointsConfig;
struct AccessPointsConfigDefaultTypeInternal;
extern AccessPointsConfigDefaultTypeInternal _AccessPointsConfig_default_instance_;
}  // namespace Basic
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::Im::Basic::AccessPointsConfig* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Basic::AccessPointsConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {
namespace Im {
namespace Basic {

// ===================================================================

class AccessPointsConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Basic.AccessPointsConfig) */ {
 public:
  inline AccessPointsConfig() : AccessPointsConfig(nullptr) {}
  ~AccessPointsConfig() override;
  explicit PROTOBUF_CONSTEXPR AccessPointsConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AccessPointsConfig(const AccessPointsConfig& from);
  AccessPointsConfig(AccessPointsConfig&& from) noexcept
    : AccessPointsConfig() {
    *this = ::std::move(from);
  }

  inline AccessPointsConfig& operator=(const AccessPointsConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccessPointsConfig& operator=(AccessPointsConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccessPointsConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccessPointsConfig* internal_default_instance() {
    return reinterpret_cast<const AccessPointsConfig*>(
               &_AccessPointsConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AccessPointsConfig& a, AccessPointsConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(AccessPointsConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccessPointsConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AccessPointsConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AccessPointsConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AccessPointsConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AccessPointsConfig& from) {
    AccessPointsConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccessPointsConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Basic.AccessPointsConfig";
  }
  protected:
  explicit AccessPointsConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOptimalApsFieldNumber = 1,
    kBackupApsFieldNumber = 2,
    kAvailablePortsFieldNumber = 3,
    kForceLastConnectedApFieldNumber = 4,
  };
  // repeated .AcFunDanmu.Im.Basic.AccessPoint optimalAps = 1;
  int optimalaps_size() const;
  private:
  int _internal_optimalaps_size() const;
  public:
  void clear_optimalaps();
  ::AcFunDanmu::Im::Basic::AccessPoint* mutable_optimalaps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic::AccessPoint >*
      mutable_optimalaps();
  private:
  const ::AcFunDanmu::Im::Basic::AccessPoint& _internal_optimalaps(int index) const;
  ::AcFunDanmu::Im::Basic::AccessPoint* _internal_add_optimalaps();
  public:
  const ::AcFunDanmu::Im::Basic::AccessPoint& optimalaps(int index) const;
  ::AcFunDanmu::Im::Basic::AccessPoint* add_optimalaps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic::AccessPoint >&
      optimalaps() const;

  // repeated .AcFunDanmu.Im.Basic.AccessPoint backupAps = 2;
  int backupaps_size() const;
  private:
  int _internal_backupaps_size() const;
  public:
  void clear_backupaps();
  ::AcFunDanmu::Im::Basic::AccessPoint* mutable_backupaps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic::AccessPoint >*
      mutable_backupaps();
  private:
  const ::AcFunDanmu::Im::Basic::AccessPoint& _internal_backupaps(int index) const;
  ::AcFunDanmu::Im::Basic::AccessPoint* _internal_add_backupaps();
  public:
  const ::AcFunDanmu::Im::Basic::AccessPoint& backupaps(int index) const;
  ::AcFunDanmu::Im::Basic::AccessPoint* add_backupaps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic::AccessPoint >&
      backupaps() const;

  // repeated uint32 availablePorts = 3;
  int availableports_size() const;
  private:
  int _internal_availableports_size() const;
  public:
  void clear_availableports();
  private:
  uint32_t _internal_availableports(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_availableports() const;
  void _internal_add_availableports(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_availableports();
  public:
  uint32_t availableports(int index) const;
  void set_availableports(int index, uint32_t value);
  void add_availableports(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      availableports() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_availableports();

  // .AcFunDanmu.Im.Basic.AccessPoint forceLastConnectedAp = 4;
  bool has_forcelastconnectedap() const;
  private:
  bool _internal_has_forcelastconnectedap() const;
  public:
  void clear_forcelastconnectedap();
  const ::AcFunDanmu::Im::Basic::AccessPoint& forcelastconnectedap() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Basic::AccessPoint* release_forcelastconnectedap();
  ::AcFunDanmu::Im::Basic::AccessPoint* mutable_forcelastconnectedap();
  void set_allocated_forcelastconnectedap(::AcFunDanmu::Im::Basic::AccessPoint* forcelastconnectedap);
  private:
  const ::AcFunDanmu::Im::Basic::AccessPoint& _internal_forcelastconnectedap() const;
  ::AcFunDanmu::Im::Basic::AccessPoint* _internal_mutable_forcelastconnectedap();
  public:
  void unsafe_arena_set_allocated_forcelastconnectedap(
      ::AcFunDanmu::Im::Basic::AccessPoint* forcelastconnectedap);
  ::AcFunDanmu::Im::Basic::AccessPoint* unsafe_arena_release_forcelastconnectedap();

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Basic.AccessPointsConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic::AccessPoint > optimalaps_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic::AccessPoint > backupaps_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > availableports_;
    mutable std::atomic<int> _availableports_cached_byte_size_;
    ::AcFunDanmu::Im::Basic::AccessPoint* forcelastconnectedap_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_AccessPointsConfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AccessPointsConfig

// repeated .AcFunDanmu.Im.Basic.AccessPoint optimalAps = 1;
inline int AccessPointsConfig::_internal_optimalaps_size() const {
  return _impl_.optimalaps_.size();
}
inline int AccessPointsConfig::optimalaps_size() const {
  return _internal_optimalaps_size();
}
inline ::AcFunDanmu::Im::Basic::AccessPoint* AccessPointsConfig::mutable_optimalaps(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.AccessPointsConfig.optimalAps)
  return _impl_.optimalaps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic::AccessPoint >*
AccessPointsConfig::mutable_optimalaps() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Basic.AccessPointsConfig.optimalAps)
  return &_impl_.optimalaps_;
}
inline const ::AcFunDanmu::Im::Basic::AccessPoint& AccessPointsConfig::_internal_optimalaps(int index) const {
  return _impl_.optimalaps_.Get(index);
}
inline const ::AcFunDanmu::Im::Basic::AccessPoint& AccessPointsConfig::optimalaps(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.AccessPointsConfig.optimalAps)
  return _internal_optimalaps(index);
}
inline ::AcFunDanmu::Im::Basic::AccessPoint* AccessPointsConfig::_internal_add_optimalaps() {
  return _impl_.optimalaps_.Add();
}
inline ::AcFunDanmu::Im::Basic::AccessPoint* AccessPointsConfig::add_optimalaps() {
  ::AcFunDanmu::Im::Basic::AccessPoint* _add = _internal_add_optimalaps();
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Basic.AccessPointsConfig.optimalAps)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic::AccessPoint >&
AccessPointsConfig::optimalaps() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Basic.AccessPointsConfig.optimalAps)
  return _impl_.optimalaps_;
}

// repeated .AcFunDanmu.Im.Basic.AccessPoint backupAps = 2;
inline int AccessPointsConfig::_internal_backupaps_size() const {
  return _impl_.backupaps_.size();
}
inline int AccessPointsConfig::backupaps_size() const {
  return _internal_backupaps_size();
}
inline ::AcFunDanmu::Im::Basic::AccessPoint* AccessPointsConfig::mutable_backupaps(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.AccessPointsConfig.backupAps)
  return _impl_.backupaps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic::AccessPoint >*
AccessPointsConfig::mutable_backupaps() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Basic.AccessPointsConfig.backupAps)
  return &_impl_.backupaps_;
}
inline const ::AcFunDanmu::Im::Basic::AccessPoint& AccessPointsConfig::_internal_backupaps(int index) const {
  return _impl_.backupaps_.Get(index);
}
inline const ::AcFunDanmu::Im::Basic::AccessPoint& AccessPointsConfig::backupaps(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.AccessPointsConfig.backupAps)
  return _internal_backupaps(index);
}
inline ::AcFunDanmu::Im::Basic::AccessPoint* AccessPointsConfig::_internal_add_backupaps() {
  return _impl_.backupaps_.Add();
}
inline ::AcFunDanmu::Im::Basic::AccessPoint* AccessPointsConfig::add_backupaps() {
  ::AcFunDanmu::Im::Basic::AccessPoint* _add = _internal_add_backupaps();
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Basic.AccessPointsConfig.backupAps)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic::AccessPoint >&
AccessPointsConfig::backupaps() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Basic.AccessPointsConfig.backupAps)
  return _impl_.backupaps_;
}

// repeated uint32 availablePorts = 3;
inline int AccessPointsConfig::_internal_availableports_size() const {
  return _impl_.availableports_.size();
}
inline int AccessPointsConfig::availableports_size() const {
  return _internal_availableports_size();
}
inline void AccessPointsConfig::clear_availableports() {
  _impl_.availableports_.Clear();
}
inline uint32_t AccessPointsConfig::_internal_availableports(int index) const {
  return _impl_.availableports_.Get(index);
}
inline uint32_t AccessPointsConfig::availableports(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.AccessPointsConfig.availablePorts)
  return _internal_availableports(index);
}
inline void AccessPointsConfig::set_availableports(int index, uint32_t value) {
  _impl_.availableports_.Set(index, value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.AccessPointsConfig.availablePorts)
}
inline void AccessPointsConfig::_internal_add_availableports(uint32_t value) {
  _impl_.availableports_.Add(value);
}
inline void AccessPointsConfig::add_availableports(uint32_t value) {
  _internal_add_availableports(value);
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Basic.AccessPointsConfig.availablePorts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
AccessPointsConfig::_internal_availableports() const {
  return _impl_.availableports_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
AccessPointsConfig::availableports() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Basic.AccessPointsConfig.availablePorts)
  return _internal_availableports();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
AccessPointsConfig::_internal_mutable_availableports() {
  return &_impl_.availableports_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
AccessPointsConfig::mutable_availableports() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Basic.AccessPointsConfig.availablePorts)
  return _internal_mutable_availableports();
}

// .AcFunDanmu.Im.Basic.AccessPoint forceLastConnectedAp = 4;
inline bool AccessPointsConfig::_internal_has_forcelastconnectedap() const {
  return this != internal_default_instance() && _impl_.forcelastconnectedap_ != nullptr;
}
inline bool AccessPointsConfig::has_forcelastconnectedap() const {
  return _internal_has_forcelastconnectedap();
}
inline const ::AcFunDanmu::Im::Basic::AccessPoint& AccessPointsConfig::_internal_forcelastconnectedap() const {
  const ::AcFunDanmu::Im::Basic::AccessPoint* p = _impl_.forcelastconnectedap_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic::AccessPoint&>(
      ::AcFunDanmu::Im::Basic::_AccessPoint_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic::AccessPoint& AccessPointsConfig::forcelastconnectedap() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.AccessPointsConfig.forceLastConnectedAp)
  return _internal_forcelastconnectedap();
}
inline void AccessPointsConfig::unsafe_arena_set_allocated_forcelastconnectedap(
    ::AcFunDanmu::Im::Basic::AccessPoint* forcelastconnectedap) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.forcelastconnectedap_);
  }
  _impl_.forcelastconnectedap_ = forcelastconnectedap;
  if (forcelastconnectedap) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Basic.AccessPointsConfig.forceLastConnectedAp)
}
inline ::AcFunDanmu::Im::Basic::AccessPoint* AccessPointsConfig::release_forcelastconnectedap() {
  
  ::AcFunDanmu::Im::Basic::AccessPoint* temp = _impl_.forcelastconnectedap_;
  _impl_.forcelastconnectedap_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AcFunDanmu::Im::Basic::AccessPoint* AccessPointsConfig::unsafe_arena_release_forcelastconnectedap() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.AccessPointsConfig.forceLastConnectedAp)
  
  ::AcFunDanmu::Im::Basic::AccessPoint* temp = _impl_.forcelastconnectedap_;
  _impl_.forcelastconnectedap_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic::AccessPoint* AccessPointsConfig::_internal_mutable_forcelastconnectedap() {
  
  if (_impl_.forcelastconnectedap_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic::AccessPoint>(GetArenaForAllocation());
    _impl_.forcelastconnectedap_ = p;
  }
  return _impl_.forcelastconnectedap_;
}
inline ::AcFunDanmu::Im::Basic::AccessPoint* AccessPointsConfig::mutable_forcelastconnectedap() {
  ::AcFunDanmu::Im::Basic::AccessPoint* _msg = _internal_mutable_forcelastconnectedap();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.AccessPointsConfig.forceLastConnectedAp)
  return _msg;
}
inline void AccessPointsConfig::set_allocated_forcelastconnectedap(::AcFunDanmu::Im::Basic::AccessPoint* forcelastconnectedap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.forcelastconnectedap_);
  }
  if (forcelastconnectedap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(forcelastconnectedap));
    if (message_arena != submessage_arena) {
      forcelastconnectedap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, forcelastconnectedap, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.forcelastconnectedap_ = forcelastconnectedap;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.AccessPointsConfig.forceLastConnectedAp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Basic
}  // namespace Im
}  // namespace AcFunDanmu

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_AccessPointsConfig_2eproto
