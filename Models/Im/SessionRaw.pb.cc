// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SessionRaw.proto

#include "SessionRaw.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace AcFunDanmu {
namespace Im {
namespace Message {
PROTOBUF_CONSTEXPR SessionRaw_RawEntry_DoNotUse::SessionRaw_RawEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct SessionRaw_RawEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SessionRaw_RawEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SessionRaw_RawEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SessionRaw_RawEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SessionRaw_RawEntry_DoNotUseDefaultTypeInternal _SessionRaw_RawEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR SessionRaw::SessionRaw(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.raw_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SessionRawDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SessionRawDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SessionRawDefaultTypeInternal() {}
  union {
    SessionRaw _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SessionRawDefaultTypeInternal _SessionRaw_default_instance_;
}  // namespace Message
}  // namespace Im
}  // namespace AcFunDanmu
static ::_pb::Metadata file_level_metadata_SessionRaw_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_SessionRaw_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_SessionRaw_2eproto = nullptr;

const uint32_t TableStruct_SessionRaw_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::SessionRaw_RawEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::SessionRaw_RawEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::SessionRaw_RawEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::SessionRaw_RawEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::SessionRaw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::SessionRaw, _impl_.raw_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::AcFunDanmu::Im::Message::SessionRaw_RawEntry_DoNotUse)},
  { 10, -1, -1, sizeof(::AcFunDanmu::Im::Message::SessionRaw)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::AcFunDanmu::Im::Message::_SessionRaw_RawEntry_DoNotUse_default_instance_._instance,
  &::AcFunDanmu::Im::Message::_SessionRaw_default_instance_._instance,
};

const char descriptor_table_protodef_SessionRaw_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020SessionRaw.proto\022\025AcFunDanmu.Im.Messag"
  "e\"q\n\nSessionRaw\0227\n\003raw\030\001 \003(\0132*.AcFunDanm"
  "u.Im.Message.SessionRaw.RawEntry\032*\n\010RawE"
  "ntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\014:\0028\001b\006pr"
  "oto3"
  ;
static ::_pbi::once_flag descriptor_table_SessionRaw_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_SessionRaw_2eproto = {
    false, false, 164, descriptor_table_protodef_SessionRaw_2eproto,
    "SessionRaw.proto",
    &descriptor_table_SessionRaw_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_SessionRaw_2eproto::offsets,
    file_level_metadata_SessionRaw_2eproto, file_level_enum_descriptors_SessionRaw_2eproto,
    file_level_service_descriptors_SessionRaw_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_SessionRaw_2eproto_getter() {
  return &descriptor_table_SessionRaw_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_SessionRaw_2eproto(&descriptor_table_SessionRaw_2eproto);
namespace AcFunDanmu {
namespace Im {
namespace Message {

// ===================================================================

SessionRaw_RawEntry_DoNotUse::SessionRaw_RawEntry_DoNotUse() {}
SessionRaw_RawEntry_DoNotUse::SessionRaw_RawEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SessionRaw_RawEntry_DoNotUse::MergeFrom(const SessionRaw_RawEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SessionRaw_RawEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_SessionRaw_2eproto_getter, &descriptor_table_SessionRaw_2eproto_once,
      file_level_metadata_SessionRaw_2eproto[0]);
}

// ===================================================================

class SessionRaw::_Internal {
 public:
};

SessionRaw::SessionRaw(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &SessionRaw::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.Im.Message.SessionRaw)
}
SessionRaw::SessionRaw(const SessionRaw& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SessionRaw* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.raw_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.raw_.MergeFrom(from._impl_.raw_);
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.Im.Message.SessionRaw)
}

inline void SessionRaw::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.raw_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SessionRaw::~SessionRaw() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.Im.Message.SessionRaw)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void SessionRaw::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.raw_.Destruct();
  _impl_.raw_.~MapField();
}

void SessionRaw::ArenaDtor(void* object) {
  SessionRaw* _this = reinterpret_cast< SessionRaw* >(object);
  _this->_impl_.raw_.Destruct();
}
void SessionRaw::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SessionRaw::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.Im.Message.SessionRaw)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.raw_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionRaw::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, bytes> raw = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.raw_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SessionRaw::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.Im.Message.SessionRaw)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, bytes> raw = 1;
  if (!this->_internal_raw().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = SessionRaw_RawEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_raw();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "AcFunDanmu.Im.Message.SessionRaw.RawEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.Im.Message.SessionRaw)
  return target;
}

size_t SessionRaw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.Im.Message.SessionRaw)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, bytes> raw = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_raw_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_raw().begin();
      it != this->_internal_raw().end(); ++it) {
    total_size += SessionRaw_RawEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SessionRaw::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SessionRaw::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SessionRaw::GetClassData() const { return &_class_data_; }


void SessionRaw::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SessionRaw*>(&to_msg);
  auto& from = static_cast<const SessionRaw&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.Im.Message.SessionRaw)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.raw_.MergeFrom(from._impl_.raw_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SessionRaw::CopyFrom(const SessionRaw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.Im.Message.SessionRaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionRaw::IsInitialized() const {
  return true;
}

void SessionRaw::InternalSwap(SessionRaw* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.raw_.InternalSwap(&other->_impl_.raw_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionRaw::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_SessionRaw_2eproto_getter, &descriptor_table_SessionRaw_2eproto_once,
      file_level_metadata_SessionRaw_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Message
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AcFunDanmu::Im::Message::SessionRaw_RawEntry_DoNotUse*
Arena::CreateMaybeMessage< ::AcFunDanmu::Im::Message::SessionRaw_RawEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::Im::Message::SessionRaw_RawEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::AcFunDanmu::Im::Message::SessionRaw*
Arena::CreateMaybeMessage< ::AcFunDanmu::Im::Message::SessionRaw >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::Im::Message::SessionRaw >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
