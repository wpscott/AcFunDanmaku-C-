// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RedPacket.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_RedPacket_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_RedPacket_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_RedPacket_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_RedPacket_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_RedPacket_2eproto;
namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Message {
class RedPacket;
struct RedPacketDefaultTypeInternal;
extern RedPacketDefaultTypeInternal _RedPacket_default_instance_;
}  // namespace Message
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::Im::Cloud::Message::RedPacket* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud::Message::RedPacket>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Message {

enum RedPacket_RedPacketType : int {
  RedPacket_RedPacketType_UNKNOWN_RED_PACKET_TYPE = 0,
  RedPacket_RedPacketType_PERSONAL = 1,
  RedPacket_RedPacketType_GROUP_RANDOM_AMOUNT = 2,
  RedPacket_RedPacketType_GROUP_IDENTICAL_AMOUNT = 3,
  RedPacket_RedPacketType_GROUP_ASSIGNED_MEMBER_RANDOM_AMOUNT = 4,
  RedPacket_RedPacketType_GROUP_ASSIGNED_MEMBER_IDENTICAL_AMOUNT = 5,
  RedPacket_RedPacketType_RedPacket_RedPacketType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RedPacket_RedPacketType_RedPacket_RedPacketType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RedPacket_RedPacketType_IsValid(int value);
constexpr RedPacket_RedPacketType RedPacket_RedPacketType_RedPacketType_MIN = RedPacket_RedPacketType_UNKNOWN_RED_PACKET_TYPE;
constexpr RedPacket_RedPacketType RedPacket_RedPacketType_RedPacketType_MAX = RedPacket_RedPacketType_GROUP_ASSIGNED_MEMBER_IDENTICAL_AMOUNT;
constexpr int RedPacket_RedPacketType_RedPacketType_ARRAYSIZE = RedPacket_RedPacketType_RedPacketType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RedPacket_RedPacketType_descriptor();
template<typename T>
inline const std::string& RedPacket_RedPacketType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RedPacket_RedPacketType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RedPacket_RedPacketType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RedPacket_RedPacketType_descriptor(), enum_t_value);
}
inline bool RedPacket_RedPacketType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RedPacket_RedPacketType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RedPacket_RedPacketType>(
    RedPacket_RedPacketType_descriptor(), name, value);
}
// ===================================================================

class RedPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.RedPacket) */ {
 public:
  inline RedPacket() : RedPacket(nullptr) {}
  ~RedPacket() override;
  explicit PROTOBUF_CONSTEXPR RedPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RedPacket(const RedPacket& from);
  RedPacket(RedPacket&& from) noexcept
    : RedPacket() {
    *this = ::std::move(from);
  }

  inline RedPacket& operator=(const RedPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline RedPacket& operator=(RedPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RedPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const RedPacket* internal_default_instance() {
    return reinterpret_cast<const RedPacket*>(
               &_RedPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RedPacket& a, RedPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(RedPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RedPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RedPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RedPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RedPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RedPacket& from) {
    RedPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RedPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.RedPacket";
  }
  protected:
  explicit RedPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RedPacket_RedPacketType RedPacketType;
  static constexpr RedPacketType UNKNOWN_RED_PACKET_TYPE =
    RedPacket_RedPacketType_UNKNOWN_RED_PACKET_TYPE;
  static constexpr RedPacketType PERSONAL =
    RedPacket_RedPacketType_PERSONAL;
  static constexpr RedPacketType GROUP_RANDOM_AMOUNT =
    RedPacket_RedPacketType_GROUP_RANDOM_AMOUNT;
  static constexpr RedPacketType GROUP_IDENTICAL_AMOUNT =
    RedPacket_RedPacketType_GROUP_IDENTICAL_AMOUNT;
  static constexpr RedPacketType GROUP_ASSIGNED_MEMBER_RANDOM_AMOUNT =
    RedPacket_RedPacketType_GROUP_ASSIGNED_MEMBER_RANDOM_AMOUNT;
  static constexpr RedPacketType GROUP_ASSIGNED_MEMBER_IDENTICAL_AMOUNT =
    RedPacket_RedPacketType_GROUP_ASSIGNED_MEMBER_IDENTICAL_AMOUNT;
  static inline bool RedPacketType_IsValid(int value) {
    return RedPacket_RedPacketType_IsValid(value);
  }
  static constexpr RedPacketType RedPacketType_MIN =
    RedPacket_RedPacketType_RedPacketType_MIN;
  static constexpr RedPacketType RedPacketType_MAX =
    RedPacket_RedPacketType_RedPacketType_MAX;
  static constexpr int RedPacketType_ARRAYSIZE =
    RedPacket_RedPacketType_RedPacketType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RedPacketType_descriptor() {
    return RedPacket_RedPacketType_descriptor();
  }
  template<typename T>
  static inline const std::string& RedPacketType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RedPacketType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RedPacketType_Name.");
    return RedPacket_RedPacketType_Name(enum_t_value);
  }
  static inline bool RedPacketType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RedPacketType* value) {
    return RedPacket_RedPacketType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRedPacketIdFieldNumber = 1,
    kExtraFieldNumber = 3,
    kAssignedUidFieldNumber = 4,
    kRedPacketTypeFieldNumber = 2,
  };
  // string redPacketId = 1;
  void clear_redpacketid();
  const std::string& redpacketid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_redpacketid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_redpacketid();
  PROTOBUF_NODISCARD std::string* release_redpacketid();
  void set_allocated_redpacketid(std::string* redpacketid);
  private:
  const std::string& _internal_redpacketid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_redpacketid(const std::string& value);
  std::string* _internal_mutable_redpacketid();
  public:

  // bytes extra = 3;
  void clear_extra();
  const std::string& extra() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_extra(ArgT0&& arg0, ArgT... args);
  std::string* mutable_extra();
  PROTOBUF_NODISCARD std::string* release_extra();
  void set_allocated_extra(std::string* extra);
  private:
  const std::string& _internal_extra() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_extra(const std::string& value);
  std::string* _internal_mutable_extra();
  public:

  // int64 assignedUid = 4;
  void clear_assigneduid();
  int64_t assigneduid() const;
  void set_assigneduid(int64_t value);
  private:
  int64_t _internal_assigneduid() const;
  void _internal_set_assigneduid(int64_t value);
  public:

  // .AcFunDanmu.Im.Cloud.Message.RedPacket.RedPacketType redPacketType = 2;
  void clear_redpackettype();
  ::AcFunDanmu::Im::Cloud::Message::RedPacket_RedPacketType redpackettype() const;
  void set_redpackettype(::AcFunDanmu::Im::Cloud::Message::RedPacket_RedPacketType value);
  private:
  ::AcFunDanmu::Im::Cloud::Message::RedPacket_RedPacketType _internal_redpackettype() const;
  void _internal_set_redpackettype(::AcFunDanmu::Im::Cloud::Message::RedPacket_RedPacketType value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.RedPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr redpacketid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extra_;
    int64_t assigneduid_;
    int redpackettype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RedPacket_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RedPacket

// string redPacketId = 1;
inline void RedPacket::clear_redpacketid() {
  _impl_.redpacketid_.ClearToEmpty();
}
inline const std::string& RedPacket::redpacketid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.RedPacket.redPacketId)
  return _internal_redpacketid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RedPacket::set_redpacketid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.redpacketid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.RedPacket.redPacketId)
}
inline std::string* RedPacket::mutable_redpacketid() {
  std::string* _s = _internal_mutable_redpacketid();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.RedPacket.redPacketId)
  return _s;
}
inline const std::string& RedPacket::_internal_redpacketid() const {
  return _impl_.redpacketid_.Get();
}
inline void RedPacket::_internal_set_redpacketid(const std::string& value) {
  
  _impl_.redpacketid_.Set(value, GetArenaForAllocation());
}
inline std::string* RedPacket::_internal_mutable_redpacketid() {
  
  return _impl_.redpacketid_.Mutable(GetArenaForAllocation());
}
inline std::string* RedPacket::release_redpacketid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.RedPacket.redPacketId)
  return _impl_.redpacketid_.Release();
}
inline void RedPacket::set_allocated_redpacketid(std::string* redpacketid) {
  if (redpacketid != nullptr) {
    
  } else {
    
  }
  _impl_.redpacketid_.SetAllocated(redpacketid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.redpacketid_.IsDefault()) {
    _impl_.redpacketid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.RedPacket.redPacketId)
}

// .AcFunDanmu.Im.Cloud.Message.RedPacket.RedPacketType redPacketType = 2;
inline void RedPacket::clear_redpackettype() {
  _impl_.redpackettype_ = 0;
}
inline ::AcFunDanmu::Im::Cloud::Message::RedPacket_RedPacketType RedPacket::_internal_redpackettype() const {
  return static_cast< ::AcFunDanmu::Im::Cloud::Message::RedPacket_RedPacketType >(_impl_.redpackettype_);
}
inline ::AcFunDanmu::Im::Cloud::Message::RedPacket_RedPacketType RedPacket::redpackettype() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.RedPacket.redPacketType)
  return _internal_redpackettype();
}
inline void RedPacket::_internal_set_redpackettype(::AcFunDanmu::Im::Cloud::Message::RedPacket_RedPacketType value) {
  
  _impl_.redpackettype_ = value;
}
inline void RedPacket::set_redpackettype(::AcFunDanmu::Im::Cloud::Message::RedPacket_RedPacketType value) {
  _internal_set_redpackettype(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.RedPacket.redPacketType)
}

// bytes extra = 3;
inline void RedPacket::clear_extra() {
  _impl_.extra_.ClearToEmpty();
}
inline const std::string& RedPacket::extra() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.RedPacket.extra)
  return _internal_extra();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RedPacket::set_extra(ArgT0&& arg0, ArgT... args) {
 
 _impl_.extra_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.RedPacket.extra)
}
inline std::string* RedPacket::mutable_extra() {
  std::string* _s = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.RedPacket.extra)
  return _s;
}
inline const std::string& RedPacket::_internal_extra() const {
  return _impl_.extra_.Get();
}
inline void RedPacket::_internal_set_extra(const std::string& value) {
  
  _impl_.extra_.Set(value, GetArenaForAllocation());
}
inline std::string* RedPacket::_internal_mutable_extra() {
  
  return _impl_.extra_.Mutable(GetArenaForAllocation());
}
inline std::string* RedPacket::release_extra() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.RedPacket.extra)
  return _impl_.extra_.Release();
}
inline void RedPacket::set_allocated_extra(std::string* extra) {
  if (extra != nullptr) {
    
  } else {
    
  }
  _impl_.extra_.SetAllocated(extra, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.extra_.IsDefault()) {
    _impl_.extra_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.RedPacket.extra)
}

// int64 assignedUid = 4;
inline void RedPacket::clear_assigneduid() {
  _impl_.assigneduid_ = int64_t{0};
}
inline int64_t RedPacket::_internal_assigneduid() const {
  return _impl_.assigneduid_;
}
inline int64_t RedPacket::assigneduid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.RedPacket.assignedUid)
  return _internal_assigneduid();
}
inline void RedPacket::_internal_set_assigneduid(int64_t value) {
  
  _impl_.assigneduid_ = value;
}
inline void RedPacket::set_assigneduid(int64_t value) {
  _internal_set_assigneduid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.RedPacket.assignedUid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Message
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::AcFunDanmu::Im::Cloud::Message::RedPacket_RedPacketType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::Im::Cloud::Message::RedPacket_RedPacketType>() {
  return ::AcFunDanmu::Im::Cloud::Message::RedPacket_RedPacketType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_RedPacket_2eproto
