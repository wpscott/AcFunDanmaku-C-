// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VoiceCallUserStatus.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_VoiceCallUserStatus_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_VoiceCallUserStatus_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "CallParam.pb.h"
#include "User.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_VoiceCallUserStatus_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_VoiceCallUserStatus_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_VoiceCallUserStatus_2eproto;
namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Voice {
namespace Call {
class VoiceCallUserStatus;
struct VoiceCallUserStatusDefaultTypeInternal;
extern VoiceCallUserStatusDefaultTypeInternal _VoiceCallUserStatus_default_instance_;
}  // namespace Call
}  // namespace Voice
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallUserStatus* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallUserStatus>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Voice {
namespace Call {

enum VoiceCallUserStatus_UserCallStatus : int {
  VoiceCallUserStatus_UserCallStatus_US_UNKNOWN = 0,
  VoiceCallUserStatus_UserCallStatus_ACCEPTED = 1,
  VoiceCallUserStatus_UserCallStatus_REJECTED = 2,
  VoiceCallUserStatus_UserCallStatus_REQUESTING = 3,
  VoiceCallUserStatus_UserCallStatus_NORMAL_CLOSED = 4,
  VoiceCallUserStatus_UserCallStatus_TIMEOUT_CLOSED = 5,
  VoiceCallUserStatus_UserCallStatus_BUSYING = 6,
  VoiceCallUserStatus_UserCallStatus_FINISHED = 7,
  VoiceCallUserStatus_UserCallStatus_VoiceCallUserStatus_UserCallStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  VoiceCallUserStatus_UserCallStatus_VoiceCallUserStatus_UserCallStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool VoiceCallUserStatus_UserCallStatus_IsValid(int value);
constexpr VoiceCallUserStatus_UserCallStatus VoiceCallUserStatus_UserCallStatus_UserCallStatus_MIN = VoiceCallUserStatus_UserCallStatus_US_UNKNOWN;
constexpr VoiceCallUserStatus_UserCallStatus VoiceCallUserStatus_UserCallStatus_UserCallStatus_MAX = VoiceCallUserStatus_UserCallStatus_FINISHED;
constexpr int VoiceCallUserStatus_UserCallStatus_UserCallStatus_ARRAYSIZE = VoiceCallUserStatus_UserCallStatus_UserCallStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VoiceCallUserStatus_UserCallStatus_descriptor();
template<typename T>
inline const std::string& VoiceCallUserStatus_UserCallStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VoiceCallUserStatus_UserCallStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VoiceCallUserStatus_UserCallStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VoiceCallUserStatus_UserCallStatus_descriptor(), enum_t_value);
}
inline bool VoiceCallUserStatus_UserCallStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VoiceCallUserStatus_UserCallStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VoiceCallUserStatus_UserCallStatus>(
    VoiceCallUserStatus_UserCallStatus_descriptor(), name, value);
}
// ===================================================================

class VoiceCallUserStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallUserStatus) */ {
 public:
  inline VoiceCallUserStatus() : VoiceCallUserStatus(nullptr) {}
  ~VoiceCallUserStatus() override;
  explicit PROTOBUF_CONSTEXPR VoiceCallUserStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VoiceCallUserStatus(const VoiceCallUserStatus& from);
  VoiceCallUserStatus(VoiceCallUserStatus&& from) noexcept
    : VoiceCallUserStatus() {
    *this = ::std::move(from);
  }

  inline VoiceCallUserStatus& operator=(const VoiceCallUserStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline VoiceCallUserStatus& operator=(VoiceCallUserStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VoiceCallUserStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const VoiceCallUserStatus* internal_default_instance() {
    return reinterpret_cast<const VoiceCallUserStatus*>(
               &_VoiceCallUserStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VoiceCallUserStatus& a, VoiceCallUserStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(VoiceCallUserStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VoiceCallUserStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VoiceCallUserStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VoiceCallUserStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VoiceCallUserStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VoiceCallUserStatus& from) {
    VoiceCallUserStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VoiceCallUserStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallUserStatus";
  }
  protected:
  explicit VoiceCallUserStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef VoiceCallUserStatus_UserCallStatus UserCallStatus;
  static constexpr UserCallStatus US_UNKNOWN =
    VoiceCallUserStatus_UserCallStatus_US_UNKNOWN;
  static constexpr UserCallStatus ACCEPTED =
    VoiceCallUserStatus_UserCallStatus_ACCEPTED;
  static constexpr UserCallStatus REJECTED =
    VoiceCallUserStatus_UserCallStatus_REJECTED;
  static constexpr UserCallStatus REQUESTING =
    VoiceCallUserStatus_UserCallStatus_REQUESTING;
  static constexpr UserCallStatus NORMAL_CLOSED =
    VoiceCallUserStatus_UserCallStatus_NORMAL_CLOSED;
  static constexpr UserCallStatus TIMEOUT_CLOSED =
    VoiceCallUserStatus_UserCallStatus_TIMEOUT_CLOSED;
  static constexpr UserCallStatus BUSYING =
    VoiceCallUserStatus_UserCallStatus_BUSYING;
  static constexpr UserCallStatus FINISHED =
    VoiceCallUserStatus_UserCallStatus_FINISHED;
  static inline bool UserCallStatus_IsValid(int value) {
    return VoiceCallUserStatus_UserCallStatus_IsValid(value);
  }
  static constexpr UserCallStatus UserCallStatus_MIN =
    VoiceCallUserStatus_UserCallStatus_UserCallStatus_MIN;
  static constexpr UserCallStatus UserCallStatus_MAX =
    VoiceCallUserStatus_UserCallStatus_UserCallStatus_MAX;
  static constexpr int UserCallStatus_ARRAYSIZE =
    VoiceCallUserStatus_UserCallStatus_UserCallStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  UserCallStatus_descriptor() {
    return VoiceCallUserStatus_UserCallStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& UserCallStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, UserCallStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function UserCallStatus_Name.");
    return VoiceCallUserStatus_UserCallStatus_Name(enum_t_value);
  }
  static inline bool UserCallStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      UserCallStatus* value) {
    return VoiceCallUserStatus_UserCallStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
    kCallParamFieldNumber = 4,
    kAcceptTimeMsFieldNumber = 3,
    kStatusFieldNumber = 2,
  };
  // .AcFunDanmu.Im.Basic.User user = 1;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::AcFunDanmu::Im::Basic::User& user() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Basic::User* release_user();
  ::AcFunDanmu::Im::Basic::User* mutable_user();
  void set_allocated_user(::AcFunDanmu::Im::Basic::User* user);
  private:
  const ::AcFunDanmu::Im::Basic::User& _internal_user() const;
  ::AcFunDanmu::Im::Basic::User* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::AcFunDanmu::Im::Basic::User* user);
  ::AcFunDanmu::Im::Basic::User* unsafe_arena_release_user();

  // .AcFunDanmu.Im.Cloud.Voice.Call.CallParam callParam = 4;
  bool has_callparam() const;
  private:
  bool _internal_has_callparam() const;
  public:
  void clear_callparam();
  const ::AcFunDanmu::Im::Cloud::Voice::Call::CallParam& callparam() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Cloud::Voice::Call::CallParam* release_callparam();
  ::AcFunDanmu::Im::Cloud::Voice::Call::CallParam* mutable_callparam();
  void set_allocated_callparam(::AcFunDanmu::Im::Cloud::Voice::Call::CallParam* callparam);
  private:
  const ::AcFunDanmu::Im::Cloud::Voice::Call::CallParam& _internal_callparam() const;
  ::AcFunDanmu::Im::Cloud::Voice::Call::CallParam* _internal_mutable_callparam();
  public:
  void unsafe_arena_set_allocated_callparam(
      ::AcFunDanmu::Im::Cloud::Voice::Call::CallParam* callparam);
  ::AcFunDanmu::Im::Cloud::Voice::Call::CallParam* unsafe_arena_release_callparam();

  // int64 acceptTimeMs = 3;
  void clear_accepttimems();
  int64_t accepttimems() const;
  void set_accepttimems(int64_t value);
  private:
  int64_t _internal_accepttimems() const;
  void _internal_set_accepttimems(int64_t value);
  public:

  // .AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallUserStatus.UserCallStatus status = 2;
  void clear_status();
  ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallUserStatus_UserCallStatus status() const;
  void set_status(::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallUserStatus_UserCallStatus value);
  private:
  ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallUserStatus_UserCallStatus _internal_status() const;
  void _internal_set_status(::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallUserStatus_UserCallStatus value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallUserStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::AcFunDanmu::Im::Basic::User* user_;
    ::AcFunDanmu::Im::Cloud::Voice::Call::CallParam* callparam_;
    int64_t accepttimems_;
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_VoiceCallUserStatus_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VoiceCallUserStatus

// .AcFunDanmu.Im.Basic.User user = 1;
inline bool VoiceCallUserStatus::_internal_has_user() const {
  return this != internal_default_instance() && _impl_.user_ != nullptr;
}
inline bool VoiceCallUserStatus::has_user() const {
  return _internal_has_user();
}
inline const ::AcFunDanmu::Im::Basic::User& VoiceCallUserStatus::_internal_user() const {
  const ::AcFunDanmu::Im::Basic::User* p = _impl_.user_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic::User&>(
      ::AcFunDanmu::Im::Basic::_User_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic::User& VoiceCallUserStatus::user() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallUserStatus.user)
  return _internal_user();
}
inline void VoiceCallUserStatus::unsafe_arena_set_allocated_user(
    ::AcFunDanmu::Im::Basic::User* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_);
  }
  _impl_.user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallUserStatus.user)
}
inline ::AcFunDanmu::Im::Basic::User* VoiceCallUserStatus::release_user() {
  
  ::AcFunDanmu::Im::Basic::User* temp = _impl_.user_;
  _impl_.user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AcFunDanmu::Im::Basic::User* VoiceCallUserStatus::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallUserStatus.user)
  
  ::AcFunDanmu::Im::Basic::User* temp = _impl_.user_;
  _impl_.user_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic::User* VoiceCallUserStatus::_internal_mutable_user() {
  
  if (_impl_.user_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic::User>(GetArenaForAllocation());
    _impl_.user_ = p;
  }
  return _impl_.user_;
}
inline ::AcFunDanmu::Im::Basic::User* VoiceCallUserStatus::mutable_user() {
  ::AcFunDanmu::Im::Basic::User* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallUserStatus.user)
  return _msg;
}
inline void VoiceCallUserStatus::set_allocated_user(::AcFunDanmu::Im::Basic::User* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_);
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user));
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.user_ = user;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallUserStatus.user)
}

// .AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallUserStatus.UserCallStatus status = 2;
inline void VoiceCallUserStatus::clear_status() {
  _impl_.status_ = 0;
}
inline ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallUserStatus_UserCallStatus VoiceCallUserStatus::_internal_status() const {
  return static_cast< ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallUserStatus_UserCallStatus >(_impl_.status_);
}
inline ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallUserStatus_UserCallStatus VoiceCallUserStatus::status() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallUserStatus.status)
  return _internal_status();
}
inline void VoiceCallUserStatus::_internal_set_status(::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallUserStatus_UserCallStatus value) {
  
  _impl_.status_ = value;
}
inline void VoiceCallUserStatus::set_status(::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallUserStatus_UserCallStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallUserStatus.status)
}

// int64 acceptTimeMs = 3;
inline void VoiceCallUserStatus::clear_accepttimems() {
  _impl_.accepttimems_ = int64_t{0};
}
inline int64_t VoiceCallUserStatus::_internal_accepttimems() const {
  return _impl_.accepttimems_;
}
inline int64_t VoiceCallUserStatus::accepttimems() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallUserStatus.acceptTimeMs)
  return _internal_accepttimems();
}
inline void VoiceCallUserStatus::_internal_set_accepttimems(int64_t value) {
  
  _impl_.accepttimems_ = value;
}
inline void VoiceCallUserStatus::set_accepttimems(int64_t value) {
  _internal_set_accepttimems(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallUserStatus.acceptTimeMs)
}

// .AcFunDanmu.Im.Cloud.Voice.Call.CallParam callParam = 4;
inline bool VoiceCallUserStatus::_internal_has_callparam() const {
  return this != internal_default_instance() && _impl_.callparam_ != nullptr;
}
inline bool VoiceCallUserStatus::has_callparam() const {
  return _internal_has_callparam();
}
inline const ::AcFunDanmu::Im::Cloud::Voice::Call::CallParam& VoiceCallUserStatus::_internal_callparam() const {
  const ::AcFunDanmu::Im::Cloud::Voice::Call::CallParam* p = _impl_.callparam_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Cloud::Voice::Call::CallParam&>(
      ::AcFunDanmu::Im::Cloud::Voice::Call::_CallParam_default_instance_);
}
inline const ::AcFunDanmu::Im::Cloud::Voice::Call::CallParam& VoiceCallUserStatus::callparam() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallUserStatus.callParam)
  return _internal_callparam();
}
inline void VoiceCallUserStatus::unsafe_arena_set_allocated_callparam(
    ::AcFunDanmu::Im::Cloud::Voice::Call::CallParam* callparam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.callparam_);
  }
  _impl_.callparam_ = callparam;
  if (callparam) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallUserStatus.callParam)
}
inline ::AcFunDanmu::Im::Cloud::Voice::Call::CallParam* VoiceCallUserStatus::release_callparam() {
  
  ::AcFunDanmu::Im::Cloud::Voice::Call::CallParam* temp = _impl_.callparam_;
  _impl_.callparam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AcFunDanmu::Im::Cloud::Voice::Call::CallParam* VoiceCallUserStatus::unsafe_arena_release_callparam() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallUserStatus.callParam)
  
  ::AcFunDanmu::Im::Cloud::Voice::Call::CallParam* temp = _impl_.callparam_;
  _impl_.callparam_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Cloud::Voice::Call::CallParam* VoiceCallUserStatus::_internal_mutable_callparam() {
  
  if (_impl_.callparam_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Cloud::Voice::Call::CallParam>(GetArenaForAllocation());
    _impl_.callparam_ = p;
  }
  return _impl_.callparam_;
}
inline ::AcFunDanmu::Im::Cloud::Voice::Call::CallParam* VoiceCallUserStatus::mutable_callparam() {
  ::AcFunDanmu::Im::Cloud::Voice::Call::CallParam* _msg = _internal_mutable_callparam();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallUserStatus.callParam)
  return _msg;
}
inline void VoiceCallUserStatus::set_allocated_callparam(::AcFunDanmu::Im::Cloud::Voice::Call::CallParam* callparam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.callparam_);
  }
  if (callparam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(callparam));
    if (message_arena != submessage_arena) {
      callparam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, callparam, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.callparam_ = callparam;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallUserStatus.callParam)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Call
}  // namespace Voice
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallUserStatus_UserCallStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallUserStatus_UserCallStatus>() {
  return ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallUserStatus_UserCallStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_VoiceCallUserStatus_2eproto
