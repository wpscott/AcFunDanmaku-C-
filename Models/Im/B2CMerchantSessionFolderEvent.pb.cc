// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: B2CMerchantSessionFolderEvent.proto

#include "B2CMerchantSessionFolderEvent.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace SessionFolder {
PROTOBUF_CONSTEXPR B2CMerchantSessionFolderEvent::B2CMerchantSessionFolderEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sessionfolderid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_)*/nullptr
  , /*decltype(_impl_.sessionref_)*/nullptr
  , /*decltype(_impl_.subbizid_)*/0
  , /*decltype(_impl_.deleted_)*/false
  , /*decltype(_impl_.updatetime_)*/int64_t{0}
  , /*decltype(_impl_.createtime_)*/int64_t{0}
  , /*decltype(_impl_.retrycount_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct B2CMerchantSessionFolderEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR B2CMerchantSessionFolderEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~B2CMerchantSessionFolderEventDefaultTypeInternal() {}
  union {
    B2CMerchantSessionFolderEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 B2CMerchantSessionFolderEventDefaultTypeInternal _B2CMerchantSessionFolderEvent_default_instance_;
}  // namespace SessionFolder
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu
static ::_pb::Metadata file_level_metadata_B2CMerchantSessionFolderEvent_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_B2CMerchantSessionFolderEvent_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_B2CMerchantSessionFolderEvent_2eproto = nullptr;

const uint32_t TableStruct_B2CMerchantSessionFolderEvent_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::SessionFolder::B2CMerchantSessionFolderEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::SessionFolder::B2CMerchantSessionFolderEvent, _impl_.user_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::SessionFolder::B2CMerchantSessionFolderEvent, _impl_.subbizid_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::SessionFolder::B2CMerchantSessionFolderEvent, _impl_.sessionref_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::SessionFolder::B2CMerchantSessionFolderEvent, _impl_.sessionfolderid_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::SessionFolder::B2CMerchantSessionFolderEvent, _impl_.deleted_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::SessionFolder::B2CMerchantSessionFolderEvent, _impl_.updatetime_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::SessionFolder::B2CMerchantSessionFolderEvent, _impl_.createtime_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::SessionFolder::B2CMerchantSessionFolderEvent, _impl_.retrycount_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::AcFunDanmu::Im::Cloud::SessionFolder::B2CMerchantSessionFolderEvent)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::AcFunDanmu::Im::Cloud::SessionFolder::_B2CMerchantSessionFolderEvent_default_instance_._instance,
};

const char descriptor_table_protodef_B2CMerchantSessionFolderEvent_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n#B2CMerchantSessionFolderEvent.proto\022!A"
  "cFunDanmu.Im.Cloud.SessionFolder\032\026Sessio"
  "nReference.proto\032\nUser.proto\"\211\002\n\035B2CMerc"
  "hantSessionFolderEvent\022\'\n\004user\030\001 \001(\0132\031.A"
  "cFunDanmu.Im.Basic.User\022\020\n\010subBizId\030\002 \001("
  "\005\022G\n\nsessionRef\030\003 \001(\01323.AcFunDanmu.Im.Cl"
  "oud.SessionFolder.SessionReference\022\027\n\017se"
  "ssionFolderId\030\004 \001(\t\022\017\n\007deleted\030\005 \001(\010\022\022\n\n"
  "updateTime\030\006 \001(\003\022\022\n\ncreateTime\030\007 \001(\003\022\022\n\n"
  "retryCount\030\010 \001(\005b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_B2CMerchantSessionFolderEvent_2eproto_deps[2] = {
  &::descriptor_table_SessionReference_2eproto,
  &::descriptor_table_User_2eproto,
};
static ::_pbi::once_flag descriptor_table_B2CMerchantSessionFolderEvent_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_B2CMerchantSessionFolderEvent_2eproto = {
    false, false, 384, descriptor_table_protodef_B2CMerchantSessionFolderEvent_2eproto,
    "B2CMerchantSessionFolderEvent.proto",
    &descriptor_table_B2CMerchantSessionFolderEvent_2eproto_once, descriptor_table_B2CMerchantSessionFolderEvent_2eproto_deps, 2, 1,
    schemas, file_default_instances, TableStruct_B2CMerchantSessionFolderEvent_2eproto::offsets,
    file_level_metadata_B2CMerchantSessionFolderEvent_2eproto, file_level_enum_descriptors_B2CMerchantSessionFolderEvent_2eproto,
    file_level_service_descriptors_B2CMerchantSessionFolderEvent_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_B2CMerchantSessionFolderEvent_2eproto_getter() {
  return &descriptor_table_B2CMerchantSessionFolderEvent_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_B2CMerchantSessionFolderEvent_2eproto(&descriptor_table_B2CMerchantSessionFolderEvent_2eproto);
namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace SessionFolder {

// ===================================================================

class B2CMerchantSessionFolderEvent::_Internal {
 public:
  static const ::AcFunDanmu::Im::Basic::User& user(const B2CMerchantSessionFolderEvent* msg);
  static const ::AcFunDanmu::Im::Cloud::SessionFolder::SessionReference& sessionref(const B2CMerchantSessionFolderEvent* msg);
};

const ::AcFunDanmu::Im::Basic::User&
B2CMerchantSessionFolderEvent::_Internal::user(const B2CMerchantSessionFolderEvent* msg) {
  return *msg->_impl_.user_;
}
const ::AcFunDanmu::Im::Cloud::SessionFolder::SessionReference&
B2CMerchantSessionFolderEvent::_Internal::sessionref(const B2CMerchantSessionFolderEvent* msg) {
  return *msg->_impl_.sessionref_;
}
void B2CMerchantSessionFolderEvent::clear_user() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_ != nullptr) {
    delete _impl_.user_;
  }
  _impl_.user_ = nullptr;
}
void B2CMerchantSessionFolderEvent::clear_sessionref() {
  if (GetArenaForAllocation() == nullptr && _impl_.sessionref_ != nullptr) {
    delete _impl_.sessionref_;
  }
  _impl_.sessionref_ = nullptr;
}
B2CMerchantSessionFolderEvent::B2CMerchantSessionFolderEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.Im.Cloud.SessionFolder.B2CMerchantSessionFolderEvent)
}
B2CMerchantSessionFolderEvent::B2CMerchantSessionFolderEvent(const B2CMerchantSessionFolderEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  B2CMerchantSessionFolderEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sessionfolderid_){}
    , decltype(_impl_.user_){nullptr}
    , decltype(_impl_.sessionref_){nullptr}
    , decltype(_impl_.subbizid_){}
    , decltype(_impl_.deleted_){}
    , decltype(_impl_.updatetime_){}
    , decltype(_impl_.createtime_){}
    , decltype(_impl_.retrycount_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sessionfolderid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sessionfolderid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sessionfolderid().empty()) {
    _this->_impl_.sessionfolderid_.Set(from._internal_sessionfolderid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user()) {
    _this->_impl_.user_ = new ::AcFunDanmu::Im::Basic::User(*from._impl_.user_);
  }
  if (from._internal_has_sessionref()) {
    _this->_impl_.sessionref_ = new ::AcFunDanmu::Im::Cloud::SessionFolder::SessionReference(*from._impl_.sessionref_);
  }
  ::memcpy(&_impl_.subbizid_, &from._impl_.subbizid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.retrycount_) -
    reinterpret_cast<char*>(&_impl_.subbizid_)) + sizeof(_impl_.retrycount_));
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.Im.Cloud.SessionFolder.B2CMerchantSessionFolderEvent)
}

inline void B2CMerchantSessionFolderEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sessionfolderid_){}
    , decltype(_impl_.user_){nullptr}
    , decltype(_impl_.sessionref_){nullptr}
    , decltype(_impl_.subbizid_){0}
    , decltype(_impl_.deleted_){false}
    , decltype(_impl_.updatetime_){int64_t{0}}
    , decltype(_impl_.createtime_){int64_t{0}}
    , decltype(_impl_.retrycount_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sessionfolderid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sessionfolderid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

B2CMerchantSessionFolderEvent::~B2CMerchantSessionFolderEvent() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.Im.Cloud.SessionFolder.B2CMerchantSessionFolderEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void B2CMerchantSessionFolderEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sessionfolderid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_;
  if (this != internal_default_instance()) delete _impl_.sessionref_;
}

void B2CMerchantSessionFolderEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void B2CMerchantSessionFolderEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.Im.Cloud.SessionFolder.B2CMerchantSessionFolderEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sessionfolderid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_ != nullptr) {
    delete _impl_.user_;
  }
  _impl_.user_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.sessionref_ != nullptr) {
    delete _impl_.sessionref_;
  }
  _impl_.sessionref_ = nullptr;
  ::memset(&_impl_.subbizid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.retrycount_) -
      reinterpret_cast<char*>(&_impl_.subbizid_)) + sizeof(_impl_.retrycount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* B2CMerchantSessionFolderEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .AcFunDanmu.Im.Basic.User user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 subBizId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.subbizid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Cloud.SessionFolder.SessionReference sessionRef = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sessionref(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string sessionFolderId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_sessionfolderid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Cloud.SessionFolder.B2CMerchantSessionFolderEvent.sessionFolderId"));
        } else
          goto handle_unusual;
        continue;
      // bool deleted = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.deleted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 updateTime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.updatetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 createTime = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.createtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 retryCount = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.retrycount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* B2CMerchantSessionFolderEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.Im.Cloud.SessionFolder.B2CMerchantSessionFolderEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .AcFunDanmu.Im.Basic.User user = 1;
  if (this->_internal_has_user()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user(this),
        _Internal::user(this).GetCachedSize(), target, stream);
  }

  // int32 subBizId = 2;
  if (this->_internal_subbizid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_subbizid(), target);
  }

  // .AcFunDanmu.Im.Cloud.SessionFolder.SessionReference sessionRef = 3;
  if (this->_internal_has_sessionref()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::sessionref(this),
        _Internal::sessionref(this).GetCachedSize(), target, stream);
  }

  // string sessionFolderId = 4;
  if (!this->_internal_sessionfolderid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sessionfolderid().data(), static_cast<int>(this->_internal_sessionfolderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Cloud.SessionFolder.B2CMerchantSessionFolderEvent.sessionFolderId");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_sessionfolderid(), target);
  }

  // bool deleted = 5;
  if (this->_internal_deleted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_deleted(), target);
  }

  // int64 updateTime = 6;
  if (this->_internal_updatetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_updatetime(), target);
  }

  // int64 createTime = 7;
  if (this->_internal_createtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_createtime(), target);
  }

  // int32 retryCount = 8;
  if (this->_internal_retrycount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_retrycount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.Im.Cloud.SessionFolder.B2CMerchantSessionFolderEvent)
  return target;
}

size_t B2CMerchantSessionFolderEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.Im.Cloud.SessionFolder.B2CMerchantSessionFolderEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sessionFolderId = 4;
  if (!this->_internal_sessionfolderid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sessionfolderid());
  }

  // .AcFunDanmu.Im.Basic.User user = 1;
  if (this->_internal_has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_);
  }

  // .AcFunDanmu.Im.Cloud.SessionFolder.SessionReference sessionRef = 3;
  if (this->_internal_has_sessionref()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sessionref_);
  }

  // int32 subBizId = 2;
  if (this->_internal_subbizid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_subbizid());
  }

  // bool deleted = 5;
  if (this->_internal_deleted() != 0) {
    total_size += 1 + 1;
  }

  // int64 updateTime = 6;
  if (this->_internal_updatetime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_updatetime());
  }

  // int64 createTime = 7;
  if (this->_internal_createtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_createtime());
  }

  // int32 retryCount = 8;
  if (this->_internal_retrycount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_retrycount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData B2CMerchantSessionFolderEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    B2CMerchantSessionFolderEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*B2CMerchantSessionFolderEvent::GetClassData() const { return &_class_data_; }


void B2CMerchantSessionFolderEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<B2CMerchantSessionFolderEvent*>(&to_msg);
  auto& from = static_cast<const B2CMerchantSessionFolderEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.Im.Cloud.SessionFolder.B2CMerchantSessionFolderEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sessionfolderid().empty()) {
    _this->_internal_set_sessionfolderid(from._internal_sessionfolderid());
  }
  if (from._internal_has_user()) {
    _this->_internal_mutable_user()->::AcFunDanmu::Im::Basic::User::MergeFrom(
        from._internal_user());
  }
  if (from._internal_has_sessionref()) {
    _this->_internal_mutable_sessionref()->::AcFunDanmu::Im::Cloud::SessionFolder::SessionReference::MergeFrom(
        from._internal_sessionref());
  }
  if (from._internal_subbizid() != 0) {
    _this->_internal_set_subbizid(from._internal_subbizid());
  }
  if (from._internal_deleted() != 0) {
    _this->_internal_set_deleted(from._internal_deleted());
  }
  if (from._internal_updatetime() != 0) {
    _this->_internal_set_updatetime(from._internal_updatetime());
  }
  if (from._internal_createtime() != 0) {
    _this->_internal_set_createtime(from._internal_createtime());
  }
  if (from._internal_retrycount() != 0) {
    _this->_internal_set_retrycount(from._internal_retrycount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void B2CMerchantSessionFolderEvent::CopyFrom(const B2CMerchantSessionFolderEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.Im.Cloud.SessionFolder.B2CMerchantSessionFolderEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool B2CMerchantSessionFolderEvent::IsInitialized() const {
  return true;
}

void B2CMerchantSessionFolderEvent::InternalSwap(B2CMerchantSessionFolderEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sessionfolderid_, lhs_arena,
      &other->_impl_.sessionfolderid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(B2CMerchantSessionFolderEvent, _impl_.retrycount_)
      + sizeof(B2CMerchantSessionFolderEvent::_impl_.retrycount_)
      - PROTOBUF_FIELD_OFFSET(B2CMerchantSessionFolderEvent, _impl_.user_)>(
          reinterpret_cast<char*>(&_impl_.user_),
          reinterpret_cast<char*>(&other->_impl_.user_));
}

::PROTOBUF_NAMESPACE_ID::Metadata B2CMerchantSessionFolderEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_B2CMerchantSessionFolderEvent_2eproto_getter, &descriptor_table_B2CMerchantSessionFolderEvent_2eproto_once,
      file_level_metadata_B2CMerchantSessionFolderEvent_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace SessionFolder
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AcFunDanmu::Im::Cloud::SessionFolder::B2CMerchantSessionFolderEvent*
Arena::CreateMaybeMessage< ::AcFunDanmu::Im::Cloud::SessionFolder::B2CMerchantSessionFolderEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::Im::Cloud::SessionFolder::B2CMerchantSessionFolderEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
