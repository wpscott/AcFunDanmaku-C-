// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserMsgSearchResult.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_UserMsgSearchResult_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_UserMsgSearchResult_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Message.pb.h"
#include "User.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_UserMsgSearchResult_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_UserMsgSearchResult_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_UserMsgSearchResult_2eproto;
namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Search {
class UserMsgSearchResult;
struct UserMsgSearchResultDefaultTypeInternal;
extern UserMsgSearchResultDefaultTypeInternal _UserMsgSearchResult_default_instance_;
}  // namespace Search
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::Im::Cloud::Search::UserMsgSearchResult* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud::Search::UserMsgSearchResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Search {

// ===================================================================

class UserMsgSearchResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Search.UserMsgSearchResult) */ {
 public:
  inline UserMsgSearchResult() : UserMsgSearchResult(nullptr) {}
  ~UserMsgSearchResult() override;
  explicit PROTOBUF_CONSTEXPR UserMsgSearchResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserMsgSearchResult(const UserMsgSearchResult& from);
  UserMsgSearchResult(UserMsgSearchResult&& from) noexcept
    : UserMsgSearchResult() {
    *this = ::std::move(from);
  }

  inline UserMsgSearchResult& operator=(const UserMsgSearchResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserMsgSearchResult& operator=(UserMsgSearchResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserMsgSearchResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserMsgSearchResult* internal_default_instance() {
    return reinterpret_cast<const UserMsgSearchResult*>(
               &_UserMsgSearchResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserMsgSearchResult& a, UserMsgSearchResult& b) {
    a.Swap(&b);
  }
  inline void Swap(UserMsgSearchResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserMsgSearchResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserMsgSearchResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserMsgSearchResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserMsgSearchResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserMsgSearchResult& from) {
    UserMsgSearchResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserMsgSearchResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Search.UserMsgSearchResult";
  }
  protected:
  explicit UserMsgSearchResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 3,
    kOffsetFieldNumber = 4,
    kTargetFieldNumber = 1,
    kMsgSizeFieldNumber = 2,
    kHasMoreFieldNumber = 5,
  };
  // repeated .AcFunDanmu.Im.Message.Message msg = 3;
  int msg_size() const;
  private:
  int _internal_msg_size() const;
  public:
  void clear_msg();
  ::AcFunDanmu::Im::Message::Message* mutable_msg(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Message::Message >*
      mutable_msg();
  private:
  const ::AcFunDanmu::Im::Message::Message& _internal_msg(int index) const;
  ::AcFunDanmu::Im::Message::Message* _internal_add_msg();
  public:
  const ::AcFunDanmu::Im::Message::Message& msg(int index) const;
  ::AcFunDanmu::Im::Message::Message* add_msg();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Message::Message >&
      msg() const;

  // string offset = 4;
  void clear_offset();
  const std::string& offset() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_offset(ArgT0&& arg0, ArgT... args);
  std::string* mutable_offset();
  PROTOBUF_NODISCARD std::string* release_offset();
  void set_allocated_offset(std::string* offset);
  private:
  const std::string& _internal_offset() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_offset(const std::string& value);
  std::string* _internal_mutable_offset();
  public:

  // .AcFunDanmu.Im.Basic.User target = 1;
  bool has_target() const;
  private:
  bool _internal_has_target() const;
  public:
  void clear_target();
  const ::AcFunDanmu::Im::Basic::User& target() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Basic::User* release_target();
  ::AcFunDanmu::Im::Basic::User* mutable_target();
  void set_allocated_target(::AcFunDanmu::Im::Basic::User* target);
  private:
  const ::AcFunDanmu::Im::Basic::User& _internal_target() const;
  ::AcFunDanmu::Im::Basic::User* _internal_mutable_target();
  public:
  void unsafe_arena_set_allocated_target(
      ::AcFunDanmu::Im::Basic::User* target);
  ::AcFunDanmu::Im::Basic::User* unsafe_arena_release_target();

  // int32 msgSize = 2;
  void clear_msgsize();
  int32_t msgsize() const;
  void set_msgsize(int32_t value);
  private:
  int32_t _internal_msgsize() const;
  void _internal_set_msgsize(int32_t value);
  public:

  // bool hasMore = 5;
  void clear_hasmore();
  bool hasmore() const;
  void set_hasmore(bool value);
  private:
  bool _internal_hasmore() const;
  void _internal_set_hasmore(bool value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Search.UserMsgSearchResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Message::Message > msg_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr offset_;
    ::AcFunDanmu::Im::Basic::User* target_;
    int32_t msgsize_;
    bool hasmore_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_UserMsgSearchResult_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserMsgSearchResult

// .AcFunDanmu.Im.Basic.User target = 1;
inline bool UserMsgSearchResult::_internal_has_target() const {
  return this != internal_default_instance() && _impl_.target_ != nullptr;
}
inline bool UserMsgSearchResult::has_target() const {
  return _internal_has_target();
}
inline const ::AcFunDanmu::Im::Basic::User& UserMsgSearchResult::_internal_target() const {
  const ::AcFunDanmu::Im::Basic::User* p = _impl_.target_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic::User&>(
      ::AcFunDanmu::Im::Basic::_User_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic::User& UserMsgSearchResult::target() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Search.UserMsgSearchResult.target)
  return _internal_target();
}
inline void UserMsgSearchResult::unsafe_arena_set_allocated_target(
    ::AcFunDanmu::Im::Basic::User* target) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.target_);
  }
  _impl_.target_ = target;
  if (target) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Search.UserMsgSearchResult.target)
}
inline ::AcFunDanmu::Im::Basic::User* UserMsgSearchResult::release_target() {
  
  ::AcFunDanmu::Im::Basic::User* temp = _impl_.target_;
  _impl_.target_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AcFunDanmu::Im::Basic::User* UserMsgSearchResult::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Search.UserMsgSearchResult.target)
  
  ::AcFunDanmu::Im::Basic::User* temp = _impl_.target_;
  _impl_.target_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic::User* UserMsgSearchResult::_internal_mutable_target() {
  
  if (_impl_.target_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic::User>(GetArenaForAllocation());
    _impl_.target_ = p;
  }
  return _impl_.target_;
}
inline ::AcFunDanmu::Im::Basic::User* UserMsgSearchResult::mutable_target() {
  ::AcFunDanmu::Im::Basic::User* _msg = _internal_mutable_target();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Search.UserMsgSearchResult.target)
  return _msg;
}
inline void UserMsgSearchResult::set_allocated_target(::AcFunDanmu::Im::Basic::User* target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.target_);
  }
  if (target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target));
    if (message_arena != submessage_arena) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.target_ = target;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Search.UserMsgSearchResult.target)
}

// int32 msgSize = 2;
inline void UserMsgSearchResult::clear_msgsize() {
  _impl_.msgsize_ = 0;
}
inline int32_t UserMsgSearchResult::_internal_msgsize() const {
  return _impl_.msgsize_;
}
inline int32_t UserMsgSearchResult::msgsize() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Search.UserMsgSearchResult.msgSize)
  return _internal_msgsize();
}
inline void UserMsgSearchResult::_internal_set_msgsize(int32_t value) {
  
  _impl_.msgsize_ = value;
}
inline void UserMsgSearchResult::set_msgsize(int32_t value) {
  _internal_set_msgsize(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Search.UserMsgSearchResult.msgSize)
}

// repeated .AcFunDanmu.Im.Message.Message msg = 3;
inline int UserMsgSearchResult::_internal_msg_size() const {
  return _impl_.msg_.size();
}
inline int UserMsgSearchResult::msg_size() const {
  return _internal_msg_size();
}
inline ::AcFunDanmu::Im::Message::Message* UserMsgSearchResult::mutable_msg(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Search.UserMsgSearchResult.msg)
  return _impl_.msg_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Message::Message >*
UserMsgSearchResult::mutable_msg() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Cloud.Search.UserMsgSearchResult.msg)
  return &_impl_.msg_;
}
inline const ::AcFunDanmu::Im::Message::Message& UserMsgSearchResult::_internal_msg(int index) const {
  return _impl_.msg_.Get(index);
}
inline const ::AcFunDanmu::Im::Message::Message& UserMsgSearchResult::msg(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Search.UserMsgSearchResult.msg)
  return _internal_msg(index);
}
inline ::AcFunDanmu::Im::Message::Message* UserMsgSearchResult::_internal_add_msg() {
  return _impl_.msg_.Add();
}
inline ::AcFunDanmu::Im::Message::Message* UserMsgSearchResult::add_msg() {
  ::AcFunDanmu::Im::Message::Message* _add = _internal_add_msg();
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Cloud.Search.UserMsgSearchResult.msg)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Message::Message >&
UserMsgSearchResult::msg() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Cloud.Search.UserMsgSearchResult.msg)
  return _impl_.msg_;
}

// string offset = 4;
inline void UserMsgSearchResult::clear_offset() {
  _impl_.offset_.ClearToEmpty();
}
inline const std::string& UserMsgSearchResult::offset() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Search.UserMsgSearchResult.offset)
  return _internal_offset();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserMsgSearchResult::set_offset(ArgT0&& arg0, ArgT... args) {
 
 _impl_.offset_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Search.UserMsgSearchResult.offset)
}
inline std::string* UserMsgSearchResult::mutable_offset() {
  std::string* _s = _internal_mutable_offset();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Search.UserMsgSearchResult.offset)
  return _s;
}
inline const std::string& UserMsgSearchResult::_internal_offset() const {
  return _impl_.offset_.Get();
}
inline void UserMsgSearchResult::_internal_set_offset(const std::string& value) {
  
  _impl_.offset_.Set(value, GetArenaForAllocation());
}
inline std::string* UserMsgSearchResult::_internal_mutable_offset() {
  
  return _impl_.offset_.Mutable(GetArenaForAllocation());
}
inline std::string* UserMsgSearchResult::release_offset() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Search.UserMsgSearchResult.offset)
  return _impl_.offset_.Release();
}
inline void UserMsgSearchResult::set_allocated_offset(std::string* offset) {
  if (offset != nullptr) {
    
  } else {
    
  }
  _impl_.offset_.SetAllocated(offset, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.offset_.IsDefault()) {
    _impl_.offset_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Search.UserMsgSearchResult.offset)
}

// bool hasMore = 5;
inline void UserMsgSearchResult::clear_hasmore() {
  _impl_.hasmore_ = false;
}
inline bool UserMsgSearchResult::_internal_hasmore() const {
  return _impl_.hasmore_;
}
inline bool UserMsgSearchResult::hasmore() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Search.UserMsgSearchResult.hasMore)
  return _internal_hasmore();
}
inline void UserMsgSearchResult::_internal_set_hasmore(bool value) {
  
  _impl_.hasmore_ = value;
}
inline void UserMsgSearchResult::set_hasmore(bool value) {
  _internal_set_hasmore(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Search.UserMsgSearchResult.hasMore)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Search
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_UserMsgSearchResult_2eproto
