// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SessionEventReportRequest.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_SessionEventReportRequest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_SessionEventReportRequest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "EnterSession.pb.h"
#include "LeaveSession.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_SessionEventReportRequest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_SessionEventReportRequest_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SessionEventReportRequest_2eproto;
namespace AcFunDanmu {
namespace Im {
namespace Message {
class SessionEventReportRequest;
struct SessionEventReportRequestDefaultTypeInternal;
extern SessionEventReportRequestDefaultTypeInternal _SessionEventReportRequest_default_instance_;
}  // namespace Message
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::Im::Message::SessionEventReportRequest* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Message::SessionEventReportRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {
namespace Im {
namespace Message {

// ===================================================================

class SessionEventReportRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Message.SessionEventReportRequest) */ {
 public:
  inline SessionEventReportRequest() : SessionEventReportRequest(nullptr) {}
  ~SessionEventReportRequest() override;
  explicit PROTOBUF_CONSTEXPR SessionEventReportRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SessionEventReportRequest(const SessionEventReportRequest& from);
  SessionEventReportRequest(SessionEventReportRequest&& from) noexcept
    : SessionEventReportRequest() {
    *this = ::std::move(from);
  }

  inline SessionEventReportRequest& operator=(const SessionEventReportRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionEventReportRequest& operator=(SessionEventReportRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SessionEventReportRequest& default_instance() {
    return *internal_default_instance();
  }
  enum EventCase {
    kEnterSession = 1,
    kLeaveSession = 2,
    EVENT_NOT_SET = 0,
  };

  static inline const SessionEventReportRequest* internal_default_instance() {
    return reinterpret_cast<const SessionEventReportRequest*>(
               &_SessionEventReportRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SessionEventReportRequest& a, SessionEventReportRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionEventReportRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionEventReportRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SessionEventReportRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SessionEventReportRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SessionEventReportRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SessionEventReportRequest& from) {
    SessionEventReportRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionEventReportRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Message.SessionEventReportRequest";
  }
  protected:
  explicit SessionEventReportRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnterSessionFieldNumber = 1,
    kLeaveSessionFieldNumber = 2,
  };
  // .AcFunDanmu.Im.Message.EnterSession enterSession = 1;
  bool has_entersession() const;
  private:
  bool _internal_has_entersession() const;
  public:
  void clear_entersession();
  const ::AcFunDanmu::Im::Message::EnterSession& entersession() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Message::EnterSession* release_entersession();
  ::AcFunDanmu::Im::Message::EnterSession* mutable_entersession();
  void set_allocated_entersession(::AcFunDanmu::Im::Message::EnterSession* entersession);
  private:
  const ::AcFunDanmu::Im::Message::EnterSession& _internal_entersession() const;
  ::AcFunDanmu::Im::Message::EnterSession* _internal_mutable_entersession();
  public:
  void unsafe_arena_set_allocated_entersession(
      ::AcFunDanmu::Im::Message::EnterSession* entersession);
  ::AcFunDanmu::Im::Message::EnterSession* unsafe_arena_release_entersession();

  // .AcFunDanmu.Im.Message.LeaveSession leaveSession = 2;
  bool has_leavesession() const;
  private:
  bool _internal_has_leavesession() const;
  public:
  void clear_leavesession();
  const ::AcFunDanmu::Im::Message::LeaveSession& leavesession() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Message::LeaveSession* release_leavesession();
  ::AcFunDanmu::Im::Message::LeaveSession* mutable_leavesession();
  void set_allocated_leavesession(::AcFunDanmu::Im::Message::LeaveSession* leavesession);
  private:
  const ::AcFunDanmu::Im::Message::LeaveSession& _internal_leavesession() const;
  ::AcFunDanmu::Im::Message::LeaveSession* _internal_mutable_leavesession();
  public:
  void unsafe_arena_set_allocated_leavesession(
      ::AcFunDanmu::Im::Message::LeaveSession* leavesession);
  ::AcFunDanmu::Im::Message::LeaveSession* unsafe_arena_release_leavesession();

  void clear_event();
  EventCase event_case() const;
  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Message.SessionEventReportRequest)
 private:
  class _Internal;
  void set_has_entersession();
  void set_has_leavesession();

  inline bool has_event() const;
  inline void clear_has_event();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union EventUnion {
      constexpr EventUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::AcFunDanmu::Im::Message::EnterSession* entersession_;
      ::AcFunDanmu::Im::Message::LeaveSession* leavesession_;
    } event_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_SessionEventReportRequest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SessionEventReportRequest

// .AcFunDanmu.Im.Message.EnterSession enterSession = 1;
inline bool SessionEventReportRequest::_internal_has_entersession() const {
  return event_case() == kEnterSession;
}
inline bool SessionEventReportRequest::has_entersession() const {
  return _internal_has_entersession();
}
inline void SessionEventReportRequest::set_has_entersession() {
  _impl_._oneof_case_[0] = kEnterSession;
}
inline ::AcFunDanmu::Im::Message::EnterSession* SessionEventReportRequest::release_entersession() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Message.SessionEventReportRequest.enterSession)
  if (_internal_has_entersession()) {
    clear_has_event();
    ::AcFunDanmu::Im::Message::EnterSession* temp = _impl_.event_.entersession_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.entersession_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::AcFunDanmu::Im::Message::EnterSession& SessionEventReportRequest::_internal_entersession() const {
  return _internal_has_entersession()
      ? *_impl_.event_.entersession_
      : reinterpret_cast< ::AcFunDanmu::Im::Message::EnterSession&>(::AcFunDanmu::Im::Message::_EnterSession_default_instance_);
}
inline const ::AcFunDanmu::Im::Message::EnterSession& SessionEventReportRequest::entersession() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.SessionEventReportRequest.enterSession)
  return _internal_entersession();
}
inline ::AcFunDanmu::Im::Message::EnterSession* SessionEventReportRequest::unsafe_arena_release_entersession() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AcFunDanmu.Im.Message.SessionEventReportRequest.enterSession)
  if (_internal_has_entersession()) {
    clear_has_event();
    ::AcFunDanmu::Im::Message::EnterSession* temp = _impl_.event_.entersession_;
    _impl_.event_.entersession_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SessionEventReportRequest::unsafe_arena_set_allocated_entersession(::AcFunDanmu::Im::Message::EnterSession* entersession) {
  clear_event();
  if (entersession) {
    set_has_entersession();
    _impl_.event_.entersession_ = entersession;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Message.SessionEventReportRequest.enterSession)
}
inline ::AcFunDanmu::Im::Message::EnterSession* SessionEventReportRequest::_internal_mutable_entersession() {
  if (!_internal_has_entersession()) {
    clear_event();
    set_has_entersession();
    _impl_.event_.entersession_ = CreateMaybeMessage< ::AcFunDanmu::Im::Message::EnterSession >(GetArenaForAllocation());
  }
  return _impl_.event_.entersession_;
}
inline ::AcFunDanmu::Im::Message::EnterSession* SessionEventReportRequest::mutable_entersession() {
  ::AcFunDanmu::Im::Message::EnterSession* _msg = _internal_mutable_entersession();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Message.SessionEventReportRequest.enterSession)
  return _msg;
}

// .AcFunDanmu.Im.Message.LeaveSession leaveSession = 2;
inline bool SessionEventReportRequest::_internal_has_leavesession() const {
  return event_case() == kLeaveSession;
}
inline bool SessionEventReportRequest::has_leavesession() const {
  return _internal_has_leavesession();
}
inline void SessionEventReportRequest::set_has_leavesession() {
  _impl_._oneof_case_[0] = kLeaveSession;
}
inline ::AcFunDanmu::Im::Message::LeaveSession* SessionEventReportRequest::release_leavesession() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Message.SessionEventReportRequest.leaveSession)
  if (_internal_has_leavesession()) {
    clear_has_event();
    ::AcFunDanmu::Im::Message::LeaveSession* temp = _impl_.event_.leavesession_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.leavesession_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::AcFunDanmu::Im::Message::LeaveSession& SessionEventReportRequest::_internal_leavesession() const {
  return _internal_has_leavesession()
      ? *_impl_.event_.leavesession_
      : reinterpret_cast< ::AcFunDanmu::Im::Message::LeaveSession&>(::AcFunDanmu::Im::Message::_LeaveSession_default_instance_);
}
inline const ::AcFunDanmu::Im::Message::LeaveSession& SessionEventReportRequest::leavesession() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.SessionEventReportRequest.leaveSession)
  return _internal_leavesession();
}
inline ::AcFunDanmu::Im::Message::LeaveSession* SessionEventReportRequest::unsafe_arena_release_leavesession() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AcFunDanmu.Im.Message.SessionEventReportRequest.leaveSession)
  if (_internal_has_leavesession()) {
    clear_has_event();
    ::AcFunDanmu::Im::Message::LeaveSession* temp = _impl_.event_.leavesession_;
    _impl_.event_.leavesession_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SessionEventReportRequest::unsafe_arena_set_allocated_leavesession(::AcFunDanmu::Im::Message::LeaveSession* leavesession) {
  clear_event();
  if (leavesession) {
    set_has_leavesession();
    _impl_.event_.leavesession_ = leavesession;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Message.SessionEventReportRequest.leaveSession)
}
inline ::AcFunDanmu::Im::Message::LeaveSession* SessionEventReportRequest::_internal_mutable_leavesession() {
  if (!_internal_has_leavesession()) {
    clear_event();
    set_has_leavesession();
    _impl_.event_.leavesession_ = CreateMaybeMessage< ::AcFunDanmu::Im::Message::LeaveSession >(GetArenaForAllocation());
  }
  return _impl_.event_.leavesession_;
}
inline ::AcFunDanmu::Im::Message::LeaveSession* SessionEventReportRequest::mutable_leavesession() {
  ::AcFunDanmu::Im::Message::LeaveSession* _msg = _internal_mutable_leavesession();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Message.SessionEventReportRequest.leaveSession)
  return _msg;
}

inline bool SessionEventReportRequest::has_event() const {
  return event_case() != EVENT_NOT_SET;
}
inline void SessionEventReportRequest::clear_has_event() {
  _impl_._oneof_case_[0] = EVENT_NOT_SET;
}
inline SessionEventReportRequest::EventCase SessionEventReportRequest::event_case() const {
  return SessionEventReportRequest::EventCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Message
}  // namespace Im
}  // namespace AcFunDanmu

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_SessionEventReportRequest_2eproto
