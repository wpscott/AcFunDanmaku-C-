// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChatSession.proto

#include "ChatSession.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace AcFunDanmu {
namespace Im {
namespace Message {
PROTOBUF_CONSTEXPR ChatSession::ChatSession(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.latestmessage_)*/{}
  , /*decltype(_impl_.remindbody_)*/{}
  , /*decltype(_impl_.cursor_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.strtargetid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.extra_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.target_)*/nullptr
  , /*decltype(_impl_.maxseqid_)*/int64_t{0}
  , /*decltype(_impl_.readseqid_)*/int64_t{0}
  , /*decltype(_impl_.unreadmsgcount_)*/0
  , /*decltype(_impl_.chattargettype_)*/0
  , /*decltype(_impl_.targetid_)*/int64_t{0}
  , /*decltype(_impl_.activetime_)*/int64_t{0}
  , /*decltype(_impl_.priority_)*/0
  , /*decltype(_impl_.categoryid_)*/0
  , /*decltype(_impl_.accounttype_)*/0
  , /*decltype(_impl_.jumpcategoryid_)*/0
  , /*decltype(_impl_.expireat_)*/int64_t{0}
  , /*decltype(_impl_.effectivefrom_)*/int64_t{0}
  , /*decltype(_impl_.targetreadseqid_)*/int64_t{0}
  , /*decltype(_impl_.aggregatesession_)*/false
  , /*decltype(_impl_.mute_)*/false
  , /*decltype(_impl_.markedunread_)*/false
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_.messagereceivestatus_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChatSessionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatSessionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatSessionDefaultTypeInternal() {}
  union {
    ChatSession _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatSessionDefaultTypeInternal _ChatSession_default_instance_;
}  // namespace Message
}  // namespace Im
}  // namespace AcFunDanmu
static ::_pb::Metadata file_level_metadata_ChatSession_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_ChatSession_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ChatSession_2eproto = nullptr;

const uint32_t TableStruct_ChatSession_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::ChatSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::ChatSession, _impl_.target_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::ChatSession, _impl_.maxseqid_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::ChatSession, _impl_.readseqid_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::ChatSession, _impl_.unreadmsgcount_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::ChatSession, _impl_.latestmessage_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::ChatSession, _impl_.chattargettype_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::ChatSession, _impl_.targetid_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::ChatSession, _impl_.activetime_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::ChatSession, _impl_.priority_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::ChatSession, _impl_.categoryid_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::ChatSession, _impl_.cursor_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::ChatSession, _impl_.accounttype_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::ChatSession, _impl_.aggregatesession_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::ChatSession, _impl_.jumpcategoryid_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::ChatSession, _impl_.expireat_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::ChatSession, _impl_.effectivefrom_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::ChatSession, _impl_.strtargetid_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::ChatSession, _impl_.remindbody_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::ChatSession, _impl_.targetreadseqid_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::ChatSession, _impl_.mute_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::ChatSession, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::ChatSession, _impl_.messagereceivestatus_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::ChatSession, _impl_.extra_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::ChatSession, _impl_.markedunread_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::AcFunDanmu::Im::Message::ChatSession)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::AcFunDanmu::Im::Message::_ChatSession_default_instance_._instance,
};

const char descriptor_table_protodef_ChatSession_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021ChatSession.proto\022\025AcFunDanmu.Im.Messa"
  "ge\032\024ChatTargetType.proto\032\rMessage.proto\032"
  "\032MessageReceiveStatus.proto\032\020RemindBody."
  "proto\032\023SessionStatus.proto\032\nUser.proto\"\320"
  "\005\n\013ChatSession\022)\n\006target\030\001 \001(\0132\031.AcFunDa"
  "nmu.Im.Basic.User\022\020\n\010maxSeqId\030\002 \001(\003\022\021\n\tr"
  "eadSeqId\030\003 \001(\003\022\026\n\016unreadMsgCount\030\004 \001(\005\0225"
  "\n\rlatestMessage\030\005 \003(\0132\036.AcFunDanmu.Im.Me"
  "ssage.Message\022=\n\016chatTargetType\030\010 \001(\0162%."
  "AcFunDanmu.Im.Message.ChatTargetType\022\020\n\010"
  "targetId\030\t \001(\003\022\022\n\nactiveTime\030\n \001(\003\022\020\n\010pr"
  "iority\030\013 \001(\005\022\022\n\ncategoryId\030\014 \001(\005\022\016\n\006curs"
  "or\030\r \001(\t\022\023\n\013accountType\030\016 \001(\005\022\030\n\020aggrega"
  "teSession\030\017 \001(\010\022\026\n\016jumpCategoryId\030\020 \001(\005\022"
  "\020\n\010expireAt\030\021 \001(\003\022\025\n\reffectiveFrom\030\022 \001(\003"
  "\022\023\n\013strTargetId\030\023 \001(\t\0225\n\nremindBody\030\024 \003("
  "\0132!.AcFunDanmu.Im.Message.RemindBody\022\027\n\017"
  "targetReadSeqId\030\025 \001(\003\022\014\n\004mute\030\026 \001(\010\0224\n\006s"
  "tatus\030\027 \001(\0162$.AcFunDanmu.Im.Message.Sess"
  "ionStatus\022I\n\024messageReceiveStatus\030\030 \001(\0162"
  "+.AcFunDanmu.Im.Message.MessageReceiveSt"
  "atus\022\r\n\005extra\030\031 \001(\014\022\024\n\014markedUnread\030\032 \001("
  "\010b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_ChatSession_2eproto_deps[6] = {
  &::descriptor_table_ChatTargetType_2eproto,
  &::descriptor_table_Message_2eproto,
  &::descriptor_table_MessageReceiveStatus_2eproto,
  &::descriptor_table_RemindBody_2eproto,
  &::descriptor_table_SessionStatus_2eproto,
  &::descriptor_table_User_2eproto,
};
static ::_pbi::once_flag descriptor_table_ChatSession_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ChatSession_2eproto = {
    false, false, 889, descriptor_table_protodef_ChatSession_2eproto,
    "ChatSession.proto",
    &descriptor_table_ChatSession_2eproto_once, descriptor_table_ChatSession_2eproto_deps, 6, 1,
    schemas, file_default_instances, TableStruct_ChatSession_2eproto::offsets,
    file_level_metadata_ChatSession_2eproto, file_level_enum_descriptors_ChatSession_2eproto,
    file_level_service_descriptors_ChatSession_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ChatSession_2eproto_getter() {
  return &descriptor_table_ChatSession_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ChatSession_2eproto(&descriptor_table_ChatSession_2eproto);
namespace AcFunDanmu {
namespace Im {
namespace Message {

// ===================================================================

class ChatSession::_Internal {
 public:
  static const ::AcFunDanmu::Im::Basic::User& target(const ChatSession* msg);
};

const ::AcFunDanmu::Im::Basic::User&
ChatSession::_Internal::target(const ChatSession* msg) {
  return *msg->_impl_.target_;
}
void ChatSession::clear_target() {
  if (GetArenaForAllocation() == nullptr && _impl_.target_ != nullptr) {
    delete _impl_.target_;
  }
  _impl_.target_ = nullptr;
}
void ChatSession::clear_latestmessage() {
  _impl_.latestmessage_.Clear();
}
void ChatSession::clear_remindbody() {
  _impl_.remindbody_.Clear();
}
ChatSession::ChatSession(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.Im.Message.ChatSession)
}
ChatSession::ChatSession(const ChatSession& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChatSession* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.latestmessage_){from._impl_.latestmessage_}
    , decltype(_impl_.remindbody_){from._impl_.remindbody_}
    , decltype(_impl_.cursor_){}
    , decltype(_impl_.strtargetid_){}
    , decltype(_impl_.extra_){}
    , decltype(_impl_.target_){nullptr}
    , decltype(_impl_.maxseqid_){}
    , decltype(_impl_.readseqid_){}
    , decltype(_impl_.unreadmsgcount_){}
    , decltype(_impl_.chattargettype_){}
    , decltype(_impl_.targetid_){}
    , decltype(_impl_.activetime_){}
    , decltype(_impl_.priority_){}
    , decltype(_impl_.categoryid_){}
    , decltype(_impl_.accounttype_){}
    , decltype(_impl_.jumpcategoryid_){}
    , decltype(_impl_.expireat_){}
    , decltype(_impl_.effectivefrom_){}
    , decltype(_impl_.targetreadseqid_){}
    , decltype(_impl_.aggregatesession_){}
    , decltype(_impl_.mute_){}
    , decltype(_impl_.markedunread_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.messagereceivestatus_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.cursor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cursor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cursor().empty()) {
    _this->_impl_.cursor_.Set(from._internal_cursor(), 
      _this->GetArenaForAllocation());
  }
  _impl_.strtargetid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.strtargetid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_strtargetid().empty()) {
    _this->_impl_.strtargetid_.Set(from._internal_strtargetid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.extra_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extra_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_extra().empty()) {
    _this->_impl_.extra_.Set(from._internal_extra(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_target()) {
    _this->_impl_.target_ = new ::AcFunDanmu::Im::Basic::User(*from._impl_.target_);
  }
  ::memcpy(&_impl_.maxseqid_, &from._impl_.maxseqid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.messagereceivestatus_) -
    reinterpret_cast<char*>(&_impl_.maxseqid_)) + sizeof(_impl_.messagereceivestatus_));
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.Im.Message.ChatSession)
}

inline void ChatSession::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.latestmessage_){arena}
    , decltype(_impl_.remindbody_){arena}
    , decltype(_impl_.cursor_){}
    , decltype(_impl_.strtargetid_){}
    , decltype(_impl_.extra_){}
    , decltype(_impl_.target_){nullptr}
    , decltype(_impl_.maxseqid_){int64_t{0}}
    , decltype(_impl_.readseqid_){int64_t{0}}
    , decltype(_impl_.unreadmsgcount_){0}
    , decltype(_impl_.chattargettype_){0}
    , decltype(_impl_.targetid_){int64_t{0}}
    , decltype(_impl_.activetime_){int64_t{0}}
    , decltype(_impl_.priority_){0}
    , decltype(_impl_.categoryid_){0}
    , decltype(_impl_.accounttype_){0}
    , decltype(_impl_.jumpcategoryid_){0}
    , decltype(_impl_.expireat_){int64_t{0}}
    , decltype(_impl_.effectivefrom_){int64_t{0}}
    , decltype(_impl_.targetreadseqid_){int64_t{0}}
    , decltype(_impl_.aggregatesession_){false}
    , decltype(_impl_.mute_){false}
    , decltype(_impl_.markedunread_){false}
    , decltype(_impl_.status_){0}
    , decltype(_impl_.messagereceivestatus_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.cursor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cursor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.strtargetid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.strtargetid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.extra_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extra_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChatSession::~ChatSession() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.Im.Message.ChatSession)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChatSession::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.latestmessage_.~RepeatedPtrField();
  _impl_.remindbody_.~RepeatedPtrField();
  _impl_.cursor_.Destroy();
  _impl_.strtargetid_.Destroy();
  _impl_.extra_.Destroy();
  if (this != internal_default_instance()) delete _impl_.target_;
}

void ChatSession::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChatSession::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.Im.Message.ChatSession)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.latestmessage_.Clear();
  _impl_.remindbody_.Clear();
  _impl_.cursor_.ClearToEmpty();
  _impl_.strtargetid_.ClearToEmpty();
  _impl_.extra_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.target_ != nullptr) {
    delete _impl_.target_;
  }
  _impl_.target_ = nullptr;
  ::memset(&_impl_.maxseqid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.messagereceivestatus_) -
      reinterpret_cast<char*>(&_impl_.maxseqid_)) + sizeof(_impl_.messagereceivestatus_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatSession::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .AcFunDanmu.Im.Basic.User target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_target(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 maxSeqId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.maxseqid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 readSeqId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.readseqid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 unreadMsgCount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.unreadmsgcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .AcFunDanmu.Im.Message.Message latestMessage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_latestmessage(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Message.ChatTargetType chatTargetType = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_chattargettype(static_cast<::AcFunDanmu::Im::Message::ChatTargetType>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 targetId = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.targetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 activeTime = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.activetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 priority = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 categoryId = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.categoryid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string cursor = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_cursor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Message.ChatSession.cursor"));
        } else
          goto handle_unusual;
        continue;
      // int32 accountType = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.accounttype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool aggregateSession = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.aggregatesession_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 jumpCategoryId = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.jumpcategoryid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 expireAt = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.expireat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 effectiveFrom = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.effectivefrom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string strTargetId = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_strtargetid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Message.ChatSession.strTargetId"));
        } else
          goto handle_unusual;
        continue;
      // repeated .AcFunDanmu.Im.Message.RemindBody remindBody = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_remindbody(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 targetReadSeqId = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.targetreadseqid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool mute = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.mute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Message.SessionStatus status = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::AcFunDanmu::Im::Message::SessionStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Message.MessageReceiveStatus messageReceiveStatus = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_messagereceivestatus(static_cast<::AcFunDanmu::Im::Message::MessageReceiveStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes extra = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          auto str = _internal_mutable_extra();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool markedUnread = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _impl_.markedunread_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatSession::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.Im.Message.ChatSession)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .AcFunDanmu.Im.Basic.User target = 1;
  if (this->_internal_has_target()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::target(this),
        _Internal::target(this).GetCachedSize(), target, stream);
  }

  // int64 maxSeqId = 2;
  if (this->_internal_maxseqid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_maxseqid(), target);
  }

  // int64 readSeqId = 3;
  if (this->_internal_readseqid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_readseqid(), target);
  }

  // int32 unreadMsgCount = 4;
  if (this->_internal_unreadmsgcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_unreadmsgcount(), target);
  }

  // repeated .AcFunDanmu.Im.Message.Message latestMessage = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_latestmessage_size()); i < n; i++) {
    const auto& repfield = this->_internal_latestmessage(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .AcFunDanmu.Im.Message.ChatTargetType chatTargetType = 8;
  if (this->_internal_chattargettype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_chattargettype(), target);
  }

  // int64 targetId = 9;
  if (this->_internal_targetid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_targetid(), target);
  }

  // int64 activeTime = 10;
  if (this->_internal_activetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_activetime(), target);
  }

  // int32 priority = 11;
  if (this->_internal_priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_priority(), target);
  }

  // int32 categoryId = 12;
  if (this->_internal_categoryid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_categoryid(), target);
  }

  // string cursor = 13;
  if (!this->_internal_cursor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cursor().data(), static_cast<int>(this->_internal_cursor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Message.ChatSession.cursor");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_cursor(), target);
  }

  // int32 accountType = 14;
  if (this->_internal_accounttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_accounttype(), target);
  }

  // bool aggregateSession = 15;
  if (this->_internal_aggregatesession() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_aggregatesession(), target);
  }

  // int32 jumpCategoryId = 16;
  if (this->_internal_jumpcategoryid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_jumpcategoryid(), target);
  }

  // int64 expireAt = 17;
  if (this->_internal_expireat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(17, this->_internal_expireat(), target);
  }

  // int64 effectiveFrom = 18;
  if (this->_internal_effectivefrom() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(18, this->_internal_effectivefrom(), target);
  }

  // string strTargetId = 19;
  if (!this->_internal_strtargetid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_strtargetid().data(), static_cast<int>(this->_internal_strtargetid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Message.ChatSession.strTargetId");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_strtargetid(), target);
  }

  // repeated .AcFunDanmu.Im.Message.RemindBody remindBody = 20;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_remindbody_size()); i < n; i++) {
    const auto& repfield = this->_internal_remindbody(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(20, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 targetReadSeqId = 21;
  if (this->_internal_targetreadseqid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(21, this->_internal_targetreadseqid(), target);
  }

  // bool mute = 22;
  if (this->_internal_mute() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(22, this->_internal_mute(), target);
  }

  // .AcFunDanmu.Im.Message.SessionStatus status = 23;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      23, this->_internal_status(), target);
  }

  // .AcFunDanmu.Im.Message.MessageReceiveStatus messageReceiveStatus = 24;
  if (this->_internal_messagereceivestatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      24, this->_internal_messagereceivestatus(), target);
  }

  // bytes extra = 25;
  if (!this->_internal_extra().empty()) {
    target = stream->WriteBytesMaybeAliased(
        25, this->_internal_extra(), target);
  }

  // bool markedUnread = 26;
  if (this->_internal_markedunread() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(26, this->_internal_markedunread(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.Im.Message.ChatSession)
  return target;
}

size_t ChatSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.Im.Message.ChatSession)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .AcFunDanmu.Im.Message.Message latestMessage = 5;
  total_size += 1UL * this->_internal_latestmessage_size();
  for (const auto& msg : this->_impl_.latestmessage_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .AcFunDanmu.Im.Message.RemindBody remindBody = 20;
  total_size += 2UL * this->_internal_remindbody_size();
  for (const auto& msg : this->_impl_.remindbody_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string cursor = 13;
  if (!this->_internal_cursor().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cursor());
  }

  // string strTargetId = 19;
  if (!this->_internal_strtargetid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strtargetid());
  }

  // bytes extra = 25;
  if (!this->_internal_extra().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_extra());
  }

  // .AcFunDanmu.Im.Basic.User target = 1;
  if (this->_internal_has_target()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.target_);
  }

  // int64 maxSeqId = 2;
  if (this->_internal_maxseqid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_maxseqid());
  }

  // int64 readSeqId = 3;
  if (this->_internal_readseqid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_readseqid());
  }

  // int32 unreadMsgCount = 4;
  if (this->_internal_unreadmsgcount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_unreadmsgcount());
  }

  // .AcFunDanmu.Im.Message.ChatTargetType chatTargetType = 8;
  if (this->_internal_chattargettype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_chattargettype());
  }

  // int64 targetId = 9;
  if (this->_internal_targetid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_targetid());
  }

  // int64 activeTime = 10;
  if (this->_internal_activetime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_activetime());
  }

  // int32 priority = 11;
  if (this->_internal_priority() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_priority());
  }

  // int32 categoryId = 12;
  if (this->_internal_categoryid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_categoryid());
  }

  // int32 accountType = 14;
  if (this->_internal_accounttype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_accounttype());
  }

  // int32 jumpCategoryId = 16;
  if (this->_internal_jumpcategoryid() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_jumpcategoryid());
  }

  // int64 expireAt = 17;
  if (this->_internal_expireat() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_expireat());
  }

  // int64 effectiveFrom = 18;
  if (this->_internal_effectivefrom() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_effectivefrom());
  }

  // int64 targetReadSeqId = 21;
  if (this->_internal_targetreadseqid() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_targetreadseqid());
  }

  // bool aggregateSession = 15;
  if (this->_internal_aggregatesession() != 0) {
    total_size += 1 + 1;
  }

  // bool mute = 22;
  if (this->_internal_mute() != 0) {
    total_size += 2 + 1;
  }

  // bool markedUnread = 26;
  if (this->_internal_markedunread() != 0) {
    total_size += 2 + 1;
  }

  // .AcFunDanmu.Im.Message.SessionStatus status = 23;
  if (this->_internal_status() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  // .AcFunDanmu.Im.Message.MessageReceiveStatus messageReceiveStatus = 24;
  if (this->_internal_messagereceivestatus() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_messagereceivestatus());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatSession::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChatSession::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatSession::GetClassData() const { return &_class_data_; }


void ChatSession::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChatSession*>(&to_msg);
  auto& from = static_cast<const ChatSession&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.Im.Message.ChatSession)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.latestmessage_.MergeFrom(from._impl_.latestmessage_);
  _this->_impl_.remindbody_.MergeFrom(from._impl_.remindbody_);
  if (!from._internal_cursor().empty()) {
    _this->_internal_set_cursor(from._internal_cursor());
  }
  if (!from._internal_strtargetid().empty()) {
    _this->_internal_set_strtargetid(from._internal_strtargetid());
  }
  if (!from._internal_extra().empty()) {
    _this->_internal_set_extra(from._internal_extra());
  }
  if (from._internal_has_target()) {
    _this->_internal_mutable_target()->::AcFunDanmu::Im::Basic::User::MergeFrom(
        from._internal_target());
  }
  if (from._internal_maxseqid() != 0) {
    _this->_internal_set_maxseqid(from._internal_maxseqid());
  }
  if (from._internal_readseqid() != 0) {
    _this->_internal_set_readseqid(from._internal_readseqid());
  }
  if (from._internal_unreadmsgcount() != 0) {
    _this->_internal_set_unreadmsgcount(from._internal_unreadmsgcount());
  }
  if (from._internal_chattargettype() != 0) {
    _this->_internal_set_chattargettype(from._internal_chattargettype());
  }
  if (from._internal_targetid() != 0) {
    _this->_internal_set_targetid(from._internal_targetid());
  }
  if (from._internal_activetime() != 0) {
    _this->_internal_set_activetime(from._internal_activetime());
  }
  if (from._internal_priority() != 0) {
    _this->_internal_set_priority(from._internal_priority());
  }
  if (from._internal_categoryid() != 0) {
    _this->_internal_set_categoryid(from._internal_categoryid());
  }
  if (from._internal_accounttype() != 0) {
    _this->_internal_set_accounttype(from._internal_accounttype());
  }
  if (from._internal_jumpcategoryid() != 0) {
    _this->_internal_set_jumpcategoryid(from._internal_jumpcategoryid());
  }
  if (from._internal_expireat() != 0) {
    _this->_internal_set_expireat(from._internal_expireat());
  }
  if (from._internal_effectivefrom() != 0) {
    _this->_internal_set_effectivefrom(from._internal_effectivefrom());
  }
  if (from._internal_targetreadseqid() != 0) {
    _this->_internal_set_targetreadseqid(from._internal_targetreadseqid());
  }
  if (from._internal_aggregatesession() != 0) {
    _this->_internal_set_aggregatesession(from._internal_aggregatesession());
  }
  if (from._internal_mute() != 0) {
    _this->_internal_set_mute(from._internal_mute());
  }
  if (from._internal_markedunread() != 0) {
    _this->_internal_set_markedunread(from._internal_markedunread());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_messagereceivestatus() != 0) {
    _this->_internal_set_messagereceivestatus(from._internal_messagereceivestatus());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatSession::CopyFrom(const ChatSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.Im.Message.ChatSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatSession::IsInitialized() const {
  return true;
}

void ChatSession::InternalSwap(ChatSession* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.latestmessage_.InternalSwap(&other->_impl_.latestmessage_);
  _impl_.remindbody_.InternalSwap(&other->_impl_.remindbody_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cursor_, lhs_arena,
      &other->_impl_.cursor_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.strtargetid_, lhs_arena,
      &other->_impl_.strtargetid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.extra_, lhs_arena,
      &other->_impl_.extra_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChatSession, _impl_.messagereceivestatus_)
      + sizeof(ChatSession::_impl_.messagereceivestatus_)
      - PROTOBUF_FIELD_OFFSET(ChatSession, _impl_.target_)>(
          reinterpret_cast<char*>(&_impl_.target_),
          reinterpret_cast<char*>(&other->_impl_.target_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatSession::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ChatSession_2eproto_getter, &descriptor_table_ChatSession_2eproto_once,
      file_level_metadata_ChatSession_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Message
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AcFunDanmu::Im::Message::ChatSession*
Arena::CreateMaybeMessage< ::AcFunDanmu::Im::Message::ChatSession >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::Im::Message::ChatSession >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
