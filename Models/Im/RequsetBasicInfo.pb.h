// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RequsetBasicInfo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_RequsetBasicInfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_RequsetBasicInfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "AppInfo.pb.h"
#include "DeviceInfo.pb.h"
#include "EnvInfo.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_RequsetBasicInfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_RequsetBasicInfo_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_RequsetBasicInfo_2eproto;
namespace AcFunDanmu {
namespace Im {
namespace Basic {
class RequsetBasicInfo;
struct RequsetBasicInfoDefaultTypeInternal;
extern RequsetBasicInfoDefaultTypeInternal _RequsetBasicInfo_default_instance_;
}  // namespace Basic
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::Im::Basic::RequsetBasicInfo* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Basic::RequsetBasicInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {
namespace Im {
namespace Basic {

// ===================================================================

class RequsetBasicInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Basic.RequsetBasicInfo) */ {
 public:
  inline RequsetBasicInfo() : RequsetBasicInfo(nullptr) {}
  ~RequsetBasicInfo() override;
  explicit PROTOBUF_CONSTEXPR RequsetBasicInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequsetBasicInfo(const RequsetBasicInfo& from);
  RequsetBasicInfo(RequsetBasicInfo&& from) noexcept
    : RequsetBasicInfo() {
    *this = ::std::move(from);
  }

  inline RequsetBasicInfo& operator=(const RequsetBasicInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequsetBasicInfo& operator=(RequsetBasicInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequsetBasicInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequsetBasicInfo* internal_default_instance() {
    return reinterpret_cast<const RequsetBasicInfo*>(
               &_RequsetBasicInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RequsetBasicInfo& a, RequsetBasicInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RequsetBasicInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequsetBasicInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequsetBasicInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequsetBasicInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequsetBasicInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RequsetBasicInfo& from) {
    RequsetBasicInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequsetBasicInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Basic.RequsetBasicInfo";
  }
  protected:
  explicit RequsetBasicInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 2,
    kClientIpFieldNumber = 3,
    kAppVersionFieldNumber = 4,
    kChannelFieldNumber = 5,
    kLocationFieldNumber = 10,
    kKpfFieldNumber = 11,
    kClientIpV6FieldNumber = 12,
    kAppInfoFieldNumber = 6,
    kDeviceInfoFieldNumber = 7,
    kEnvInfoFieldNumber = 8,
    kClientTypeFieldNumber = 1,
    kClientPortFieldNumber = 9,
  };
  // string deviceId = 2;
  void clear_deviceid();
  const std::string& deviceid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_deviceid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_deviceid();
  PROTOBUF_NODISCARD std::string* release_deviceid();
  void set_allocated_deviceid(std::string* deviceid);
  private:
  const std::string& _internal_deviceid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deviceid(const std::string& value);
  std::string* _internal_mutable_deviceid();
  public:

  // string clientIp = 3;
  void clear_clientip();
  const std::string& clientip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clientip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clientip();
  PROTOBUF_NODISCARD std::string* release_clientip();
  void set_allocated_clientip(std::string* clientip);
  private:
  const std::string& _internal_clientip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clientip(const std::string& value);
  std::string* _internal_mutable_clientip();
  public:

  // string appVersion = 4;
  void clear_appversion();
  const std::string& appversion() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_appversion(ArgT0&& arg0, ArgT... args);
  std::string* mutable_appversion();
  PROTOBUF_NODISCARD std::string* release_appversion();
  void set_allocated_appversion(std::string* appversion);
  private:
  const std::string& _internal_appversion() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_appversion(const std::string& value);
  std::string* _internal_mutable_appversion();
  public:

  // string channel = 5;
  void clear_channel();
  const std::string& channel() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_channel(ArgT0&& arg0, ArgT... args);
  std::string* mutable_channel();
  PROTOBUF_NODISCARD std::string* release_channel();
  void set_allocated_channel(std::string* channel);
  private:
  const std::string& _internal_channel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel(const std::string& value);
  std::string* _internal_mutable_channel();
  public:

  // string location = 10;
  void clear_location();
  const std::string& location() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_location(ArgT0&& arg0, ArgT... args);
  std::string* mutable_location();
  PROTOBUF_NODISCARD std::string* release_location();
  void set_allocated_location(std::string* location);
  private:
  const std::string& _internal_location() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_location(const std::string& value);
  std::string* _internal_mutable_location();
  public:

  // string kpf = 11;
  void clear_kpf();
  const std::string& kpf() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_kpf(ArgT0&& arg0, ArgT... args);
  std::string* mutable_kpf();
  PROTOBUF_NODISCARD std::string* release_kpf();
  void set_allocated_kpf(std::string* kpf);
  private:
  const std::string& _internal_kpf() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_kpf(const std::string& value);
  std::string* _internal_mutable_kpf();
  public:

  // string clientIpV6 = 12;
  void clear_clientipv6();
  const std::string& clientipv6() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clientipv6(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clientipv6();
  PROTOBUF_NODISCARD std::string* release_clientipv6();
  void set_allocated_clientipv6(std::string* clientipv6);
  private:
  const std::string& _internal_clientipv6() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clientipv6(const std::string& value);
  std::string* _internal_mutable_clientipv6();
  public:

  // .AcFunDanmu.Im.Basic.AppInfo appInfo = 6;
  bool has_appinfo() const;
  private:
  bool _internal_has_appinfo() const;
  public:
  void clear_appinfo();
  const ::AcFunDanmu::Im::Basic::AppInfo& appinfo() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Basic::AppInfo* release_appinfo();
  ::AcFunDanmu::Im::Basic::AppInfo* mutable_appinfo();
  void set_allocated_appinfo(::AcFunDanmu::Im::Basic::AppInfo* appinfo);
  private:
  const ::AcFunDanmu::Im::Basic::AppInfo& _internal_appinfo() const;
  ::AcFunDanmu::Im::Basic::AppInfo* _internal_mutable_appinfo();
  public:
  void unsafe_arena_set_allocated_appinfo(
      ::AcFunDanmu::Im::Basic::AppInfo* appinfo);
  ::AcFunDanmu::Im::Basic::AppInfo* unsafe_arena_release_appinfo();

  // .AcFunDanmu.Im.Basic.DeviceInfo deviceInfo = 7;
  bool has_deviceinfo() const;
  private:
  bool _internal_has_deviceinfo() const;
  public:
  void clear_deviceinfo();
  const ::AcFunDanmu::Im::Basic::DeviceInfo& deviceinfo() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Basic::DeviceInfo* release_deviceinfo();
  ::AcFunDanmu::Im::Basic::DeviceInfo* mutable_deviceinfo();
  void set_allocated_deviceinfo(::AcFunDanmu::Im::Basic::DeviceInfo* deviceinfo);
  private:
  const ::AcFunDanmu::Im::Basic::DeviceInfo& _internal_deviceinfo() const;
  ::AcFunDanmu::Im::Basic::DeviceInfo* _internal_mutable_deviceinfo();
  public:
  void unsafe_arena_set_allocated_deviceinfo(
      ::AcFunDanmu::Im::Basic::DeviceInfo* deviceinfo);
  ::AcFunDanmu::Im::Basic::DeviceInfo* unsafe_arena_release_deviceinfo();

  // .AcFunDanmu.Im.Basic.EnvInfo envInfo = 8;
  bool has_envinfo() const;
  private:
  bool _internal_has_envinfo() const;
  public:
  void clear_envinfo();
  const ::AcFunDanmu::Im::Basic::EnvInfo& envinfo() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Basic::EnvInfo* release_envinfo();
  ::AcFunDanmu::Im::Basic::EnvInfo* mutable_envinfo();
  void set_allocated_envinfo(::AcFunDanmu::Im::Basic::EnvInfo* envinfo);
  private:
  const ::AcFunDanmu::Im::Basic::EnvInfo& _internal_envinfo() const;
  ::AcFunDanmu::Im::Basic::EnvInfo* _internal_mutable_envinfo();
  public:
  void unsafe_arena_set_allocated_envinfo(
      ::AcFunDanmu::Im::Basic::EnvInfo* envinfo);
  ::AcFunDanmu::Im::Basic::EnvInfo* unsafe_arena_release_envinfo();

  // .AcFunDanmu.Im.Basic.DeviceInfo.PlatformType clientType = 1;
  void clear_clienttype();
  ::AcFunDanmu::Im::Basic::DeviceInfo_PlatformType clienttype() const;
  void set_clienttype(::AcFunDanmu::Im::Basic::DeviceInfo_PlatformType value);
  private:
  ::AcFunDanmu::Im::Basic::DeviceInfo_PlatformType _internal_clienttype() const;
  void _internal_set_clienttype(::AcFunDanmu::Im::Basic::DeviceInfo_PlatformType value);
  public:

  // int32 clientPort = 9;
  void clear_clientport();
  int32_t clientport() const;
  void set_clientport(int32_t value);
  private:
  int32_t _internal_clientport() const;
  void _internal_set_clientport(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Basic.RequsetBasicInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientip_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appversion_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kpf_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientipv6_;
    ::AcFunDanmu::Im::Basic::AppInfo* appinfo_;
    ::AcFunDanmu::Im::Basic::DeviceInfo* deviceinfo_;
    ::AcFunDanmu::Im::Basic::EnvInfo* envinfo_;
    int clienttype_;
    int32_t clientport_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RequsetBasicInfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RequsetBasicInfo

// .AcFunDanmu.Im.Basic.DeviceInfo.PlatformType clientType = 1;
inline void RequsetBasicInfo::clear_clienttype() {
  _impl_.clienttype_ = 0;
}
inline ::AcFunDanmu::Im::Basic::DeviceInfo_PlatformType RequsetBasicInfo::_internal_clienttype() const {
  return static_cast< ::AcFunDanmu::Im::Basic::DeviceInfo_PlatformType >(_impl_.clienttype_);
}
inline ::AcFunDanmu::Im::Basic::DeviceInfo_PlatformType RequsetBasicInfo::clienttype() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.RequsetBasicInfo.clientType)
  return _internal_clienttype();
}
inline void RequsetBasicInfo::_internal_set_clienttype(::AcFunDanmu::Im::Basic::DeviceInfo_PlatformType value) {
  
  _impl_.clienttype_ = value;
}
inline void RequsetBasicInfo::set_clienttype(::AcFunDanmu::Im::Basic::DeviceInfo_PlatformType value) {
  _internal_set_clienttype(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.RequsetBasicInfo.clientType)
}

// string deviceId = 2;
inline void RequsetBasicInfo::clear_deviceid() {
  _impl_.deviceid_.ClearToEmpty();
}
inline const std::string& RequsetBasicInfo::deviceid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.RequsetBasicInfo.deviceId)
  return _internal_deviceid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequsetBasicInfo::set_deviceid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.deviceid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.RequsetBasicInfo.deviceId)
}
inline std::string* RequsetBasicInfo::mutable_deviceid() {
  std::string* _s = _internal_mutable_deviceid();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.RequsetBasicInfo.deviceId)
  return _s;
}
inline const std::string& RequsetBasicInfo::_internal_deviceid() const {
  return _impl_.deviceid_.Get();
}
inline void RequsetBasicInfo::_internal_set_deviceid(const std::string& value) {
  
  _impl_.deviceid_.Set(value, GetArenaForAllocation());
}
inline std::string* RequsetBasicInfo::_internal_mutable_deviceid() {
  
  return _impl_.deviceid_.Mutable(GetArenaForAllocation());
}
inline std::string* RequsetBasicInfo::release_deviceid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.RequsetBasicInfo.deviceId)
  return _impl_.deviceid_.Release();
}
inline void RequsetBasicInfo::set_allocated_deviceid(std::string* deviceid) {
  if (deviceid != nullptr) {
    
  } else {
    
  }
  _impl_.deviceid_.SetAllocated(deviceid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.deviceid_.IsDefault()) {
    _impl_.deviceid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.RequsetBasicInfo.deviceId)
}

// string clientIp = 3;
inline void RequsetBasicInfo::clear_clientip() {
  _impl_.clientip_.ClearToEmpty();
}
inline const std::string& RequsetBasicInfo::clientip() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.RequsetBasicInfo.clientIp)
  return _internal_clientip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequsetBasicInfo::set_clientip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.clientip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.RequsetBasicInfo.clientIp)
}
inline std::string* RequsetBasicInfo::mutable_clientip() {
  std::string* _s = _internal_mutable_clientip();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.RequsetBasicInfo.clientIp)
  return _s;
}
inline const std::string& RequsetBasicInfo::_internal_clientip() const {
  return _impl_.clientip_.Get();
}
inline void RequsetBasicInfo::_internal_set_clientip(const std::string& value) {
  
  _impl_.clientip_.Set(value, GetArenaForAllocation());
}
inline std::string* RequsetBasicInfo::_internal_mutable_clientip() {
  
  return _impl_.clientip_.Mutable(GetArenaForAllocation());
}
inline std::string* RequsetBasicInfo::release_clientip() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.RequsetBasicInfo.clientIp)
  return _impl_.clientip_.Release();
}
inline void RequsetBasicInfo::set_allocated_clientip(std::string* clientip) {
  if (clientip != nullptr) {
    
  } else {
    
  }
  _impl_.clientip_.SetAllocated(clientip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.clientip_.IsDefault()) {
    _impl_.clientip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.RequsetBasicInfo.clientIp)
}

// string appVersion = 4;
inline void RequsetBasicInfo::clear_appversion() {
  _impl_.appversion_.ClearToEmpty();
}
inline const std::string& RequsetBasicInfo::appversion() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.RequsetBasicInfo.appVersion)
  return _internal_appversion();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequsetBasicInfo::set_appversion(ArgT0&& arg0, ArgT... args) {
 
 _impl_.appversion_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.RequsetBasicInfo.appVersion)
}
inline std::string* RequsetBasicInfo::mutable_appversion() {
  std::string* _s = _internal_mutable_appversion();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.RequsetBasicInfo.appVersion)
  return _s;
}
inline const std::string& RequsetBasicInfo::_internal_appversion() const {
  return _impl_.appversion_.Get();
}
inline void RequsetBasicInfo::_internal_set_appversion(const std::string& value) {
  
  _impl_.appversion_.Set(value, GetArenaForAllocation());
}
inline std::string* RequsetBasicInfo::_internal_mutable_appversion() {
  
  return _impl_.appversion_.Mutable(GetArenaForAllocation());
}
inline std::string* RequsetBasicInfo::release_appversion() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.RequsetBasicInfo.appVersion)
  return _impl_.appversion_.Release();
}
inline void RequsetBasicInfo::set_allocated_appversion(std::string* appversion) {
  if (appversion != nullptr) {
    
  } else {
    
  }
  _impl_.appversion_.SetAllocated(appversion, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.appversion_.IsDefault()) {
    _impl_.appversion_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.RequsetBasicInfo.appVersion)
}

// string channel = 5;
inline void RequsetBasicInfo::clear_channel() {
  _impl_.channel_.ClearToEmpty();
}
inline const std::string& RequsetBasicInfo::channel() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.RequsetBasicInfo.channel)
  return _internal_channel();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequsetBasicInfo::set_channel(ArgT0&& arg0, ArgT... args) {
 
 _impl_.channel_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.RequsetBasicInfo.channel)
}
inline std::string* RequsetBasicInfo::mutable_channel() {
  std::string* _s = _internal_mutable_channel();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.RequsetBasicInfo.channel)
  return _s;
}
inline const std::string& RequsetBasicInfo::_internal_channel() const {
  return _impl_.channel_.Get();
}
inline void RequsetBasicInfo::_internal_set_channel(const std::string& value) {
  
  _impl_.channel_.Set(value, GetArenaForAllocation());
}
inline std::string* RequsetBasicInfo::_internal_mutable_channel() {
  
  return _impl_.channel_.Mutable(GetArenaForAllocation());
}
inline std::string* RequsetBasicInfo::release_channel() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.RequsetBasicInfo.channel)
  return _impl_.channel_.Release();
}
inline void RequsetBasicInfo::set_allocated_channel(std::string* channel) {
  if (channel != nullptr) {
    
  } else {
    
  }
  _impl_.channel_.SetAllocated(channel, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.channel_.IsDefault()) {
    _impl_.channel_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.RequsetBasicInfo.channel)
}

// .AcFunDanmu.Im.Basic.AppInfo appInfo = 6;
inline bool RequsetBasicInfo::_internal_has_appinfo() const {
  return this != internal_default_instance() && _impl_.appinfo_ != nullptr;
}
inline bool RequsetBasicInfo::has_appinfo() const {
  return _internal_has_appinfo();
}
inline const ::AcFunDanmu::Im::Basic::AppInfo& RequsetBasicInfo::_internal_appinfo() const {
  const ::AcFunDanmu::Im::Basic::AppInfo* p = _impl_.appinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic::AppInfo&>(
      ::AcFunDanmu::Im::Basic::_AppInfo_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic::AppInfo& RequsetBasicInfo::appinfo() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.RequsetBasicInfo.appInfo)
  return _internal_appinfo();
}
inline void RequsetBasicInfo::unsafe_arena_set_allocated_appinfo(
    ::AcFunDanmu::Im::Basic::AppInfo* appinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.appinfo_);
  }
  _impl_.appinfo_ = appinfo;
  if (appinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Basic.RequsetBasicInfo.appInfo)
}
inline ::AcFunDanmu::Im::Basic::AppInfo* RequsetBasicInfo::release_appinfo() {
  
  ::AcFunDanmu::Im::Basic::AppInfo* temp = _impl_.appinfo_;
  _impl_.appinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AcFunDanmu::Im::Basic::AppInfo* RequsetBasicInfo::unsafe_arena_release_appinfo() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.RequsetBasicInfo.appInfo)
  
  ::AcFunDanmu::Im::Basic::AppInfo* temp = _impl_.appinfo_;
  _impl_.appinfo_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic::AppInfo* RequsetBasicInfo::_internal_mutable_appinfo() {
  
  if (_impl_.appinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic::AppInfo>(GetArenaForAllocation());
    _impl_.appinfo_ = p;
  }
  return _impl_.appinfo_;
}
inline ::AcFunDanmu::Im::Basic::AppInfo* RequsetBasicInfo::mutable_appinfo() {
  ::AcFunDanmu::Im::Basic::AppInfo* _msg = _internal_mutable_appinfo();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.RequsetBasicInfo.appInfo)
  return _msg;
}
inline void RequsetBasicInfo::set_allocated_appinfo(::AcFunDanmu::Im::Basic::AppInfo* appinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.appinfo_);
  }
  if (appinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(appinfo));
    if (message_arena != submessage_arena) {
      appinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, appinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.appinfo_ = appinfo;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.RequsetBasicInfo.appInfo)
}

// .AcFunDanmu.Im.Basic.DeviceInfo deviceInfo = 7;
inline bool RequsetBasicInfo::_internal_has_deviceinfo() const {
  return this != internal_default_instance() && _impl_.deviceinfo_ != nullptr;
}
inline bool RequsetBasicInfo::has_deviceinfo() const {
  return _internal_has_deviceinfo();
}
inline const ::AcFunDanmu::Im::Basic::DeviceInfo& RequsetBasicInfo::_internal_deviceinfo() const {
  const ::AcFunDanmu::Im::Basic::DeviceInfo* p = _impl_.deviceinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic::DeviceInfo&>(
      ::AcFunDanmu::Im::Basic::_DeviceInfo_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic::DeviceInfo& RequsetBasicInfo::deviceinfo() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.RequsetBasicInfo.deviceInfo)
  return _internal_deviceinfo();
}
inline void RequsetBasicInfo::unsafe_arena_set_allocated_deviceinfo(
    ::AcFunDanmu::Im::Basic::DeviceInfo* deviceinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.deviceinfo_);
  }
  _impl_.deviceinfo_ = deviceinfo;
  if (deviceinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Basic.RequsetBasicInfo.deviceInfo)
}
inline ::AcFunDanmu::Im::Basic::DeviceInfo* RequsetBasicInfo::release_deviceinfo() {
  
  ::AcFunDanmu::Im::Basic::DeviceInfo* temp = _impl_.deviceinfo_;
  _impl_.deviceinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AcFunDanmu::Im::Basic::DeviceInfo* RequsetBasicInfo::unsafe_arena_release_deviceinfo() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.RequsetBasicInfo.deviceInfo)
  
  ::AcFunDanmu::Im::Basic::DeviceInfo* temp = _impl_.deviceinfo_;
  _impl_.deviceinfo_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic::DeviceInfo* RequsetBasicInfo::_internal_mutable_deviceinfo() {
  
  if (_impl_.deviceinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic::DeviceInfo>(GetArenaForAllocation());
    _impl_.deviceinfo_ = p;
  }
  return _impl_.deviceinfo_;
}
inline ::AcFunDanmu::Im::Basic::DeviceInfo* RequsetBasicInfo::mutable_deviceinfo() {
  ::AcFunDanmu::Im::Basic::DeviceInfo* _msg = _internal_mutable_deviceinfo();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.RequsetBasicInfo.deviceInfo)
  return _msg;
}
inline void RequsetBasicInfo::set_allocated_deviceinfo(::AcFunDanmu::Im::Basic::DeviceInfo* deviceinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.deviceinfo_);
  }
  if (deviceinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deviceinfo));
    if (message_arena != submessage_arena) {
      deviceinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deviceinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.deviceinfo_ = deviceinfo;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.RequsetBasicInfo.deviceInfo)
}

// .AcFunDanmu.Im.Basic.EnvInfo envInfo = 8;
inline bool RequsetBasicInfo::_internal_has_envinfo() const {
  return this != internal_default_instance() && _impl_.envinfo_ != nullptr;
}
inline bool RequsetBasicInfo::has_envinfo() const {
  return _internal_has_envinfo();
}
inline const ::AcFunDanmu::Im::Basic::EnvInfo& RequsetBasicInfo::_internal_envinfo() const {
  const ::AcFunDanmu::Im::Basic::EnvInfo* p = _impl_.envinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic::EnvInfo&>(
      ::AcFunDanmu::Im::Basic::_EnvInfo_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic::EnvInfo& RequsetBasicInfo::envinfo() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.RequsetBasicInfo.envInfo)
  return _internal_envinfo();
}
inline void RequsetBasicInfo::unsafe_arena_set_allocated_envinfo(
    ::AcFunDanmu::Im::Basic::EnvInfo* envinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.envinfo_);
  }
  _impl_.envinfo_ = envinfo;
  if (envinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Basic.RequsetBasicInfo.envInfo)
}
inline ::AcFunDanmu::Im::Basic::EnvInfo* RequsetBasicInfo::release_envinfo() {
  
  ::AcFunDanmu::Im::Basic::EnvInfo* temp = _impl_.envinfo_;
  _impl_.envinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AcFunDanmu::Im::Basic::EnvInfo* RequsetBasicInfo::unsafe_arena_release_envinfo() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.RequsetBasicInfo.envInfo)
  
  ::AcFunDanmu::Im::Basic::EnvInfo* temp = _impl_.envinfo_;
  _impl_.envinfo_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic::EnvInfo* RequsetBasicInfo::_internal_mutable_envinfo() {
  
  if (_impl_.envinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic::EnvInfo>(GetArenaForAllocation());
    _impl_.envinfo_ = p;
  }
  return _impl_.envinfo_;
}
inline ::AcFunDanmu::Im::Basic::EnvInfo* RequsetBasicInfo::mutable_envinfo() {
  ::AcFunDanmu::Im::Basic::EnvInfo* _msg = _internal_mutable_envinfo();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.RequsetBasicInfo.envInfo)
  return _msg;
}
inline void RequsetBasicInfo::set_allocated_envinfo(::AcFunDanmu::Im::Basic::EnvInfo* envinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.envinfo_);
  }
  if (envinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(envinfo));
    if (message_arena != submessage_arena) {
      envinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, envinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.envinfo_ = envinfo;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.RequsetBasicInfo.envInfo)
}

// int32 clientPort = 9;
inline void RequsetBasicInfo::clear_clientport() {
  _impl_.clientport_ = 0;
}
inline int32_t RequsetBasicInfo::_internal_clientport() const {
  return _impl_.clientport_;
}
inline int32_t RequsetBasicInfo::clientport() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.RequsetBasicInfo.clientPort)
  return _internal_clientport();
}
inline void RequsetBasicInfo::_internal_set_clientport(int32_t value) {
  
  _impl_.clientport_ = value;
}
inline void RequsetBasicInfo::set_clientport(int32_t value) {
  _internal_set_clientport(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.RequsetBasicInfo.clientPort)
}

// string location = 10;
inline void RequsetBasicInfo::clear_location() {
  _impl_.location_.ClearToEmpty();
}
inline const std::string& RequsetBasicInfo::location() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.RequsetBasicInfo.location)
  return _internal_location();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequsetBasicInfo::set_location(ArgT0&& arg0, ArgT... args) {
 
 _impl_.location_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.RequsetBasicInfo.location)
}
inline std::string* RequsetBasicInfo::mutable_location() {
  std::string* _s = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.RequsetBasicInfo.location)
  return _s;
}
inline const std::string& RequsetBasicInfo::_internal_location() const {
  return _impl_.location_.Get();
}
inline void RequsetBasicInfo::_internal_set_location(const std::string& value) {
  
  _impl_.location_.Set(value, GetArenaForAllocation());
}
inline std::string* RequsetBasicInfo::_internal_mutable_location() {
  
  return _impl_.location_.Mutable(GetArenaForAllocation());
}
inline std::string* RequsetBasicInfo::release_location() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.RequsetBasicInfo.location)
  return _impl_.location_.Release();
}
inline void RequsetBasicInfo::set_allocated_location(std::string* location) {
  if (location != nullptr) {
    
  } else {
    
  }
  _impl_.location_.SetAllocated(location, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.location_.IsDefault()) {
    _impl_.location_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.RequsetBasicInfo.location)
}

// string kpf = 11;
inline void RequsetBasicInfo::clear_kpf() {
  _impl_.kpf_.ClearToEmpty();
}
inline const std::string& RequsetBasicInfo::kpf() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.RequsetBasicInfo.kpf)
  return _internal_kpf();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequsetBasicInfo::set_kpf(ArgT0&& arg0, ArgT... args) {
 
 _impl_.kpf_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.RequsetBasicInfo.kpf)
}
inline std::string* RequsetBasicInfo::mutable_kpf() {
  std::string* _s = _internal_mutable_kpf();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.RequsetBasicInfo.kpf)
  return _s;
}
inline const std::string& RequsetBasicInfo::_internal_kpf() const {
  return _impl_.kpf_.Get();
}
inline void RequsetBasicInfo::_internal_set_kpf(const std::string& value) {
  
  _impl_.kpf_.Set(value, GetArenaForAllocation());
}
inline std::string* RequsetBasicInfo::_internal_mutable_kpf() {
  
  return _impl_.kpf_.Mutable(GetArenaForAllocation());
}
inline std::string* RequsetBasicInfo::release_kpf() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.RequsetBasicInfo.kpf)
  return _impl_.kpf_.Release();
}
inline void RequsetBasicInfo::set_allocated_kpf(std::string* kpf) {
  if (kpf != nullptr) {
    
  } else {
    
  }
  _impl_.kpf_.SetAllocated(kpf, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.kpf_.IsDefault()) {
    _impl_.kpf_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.RequsetBasicInfo.kpf)
}

// string clientIpV6 = 12;
inline void RequsetBasicInfo::clear_clientipv6() {
  _impl_.clientipv6_.ClearToEmpty();
}
inline const std::string& RequsetBasicInfo::clientipv6() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.RequsetBasicInfo.clientIpV6)
  return _internal_clientipv6();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequsetBasicInfo::set_clientipv6(ArgT0&& arg0, ArgT... args) {
 
 _impl_.clientipv6_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.RequsetBasicInfo.clientIpV6)
}
inline std::string* RequsetBasicInfo::mutable_clientipv6() {
  std::string* _s = _internal_mutable_clientipv6();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.RequsetBasicInfo.clientIpV6)
  return _s;
}
inline const std::string& RequsetBasicInfo::_internal_clientipv6() const {
  return _impl_.clientipv6_.Get();
}
inline void RequsetBasicInfo::_internal_set_clientipv6(const std::string& value) {
  
  _impl_.clientipv6_.Set(value, GetArenaForAllocation());
}
inline std::string* RequsetBasicInfo::_internal_mutable_clientipv6() {
  
  return _impl_.clientipv6_.Mutable(GetArenaForAllocation());
}
inline std::string* RequsetBasicInfo::release_clientipv6() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.RequsetBasicInfo.clientIpV6)
  return _impl_.clientipv6_.Release();
}
inline void RequsetBasicInfo::set_allocated_clientipv6(std::string* clientipv6) {
  if (clientipv6 != nullptr) {
    
  } else {
    
  }
  _impl_.clientipv6_.SetAllocated(clientipv6, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.clientipv6_.IsDefault()) {
    _impl_.clientipv6_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.RequsetBasicInfo.clientIpV6)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Basic
}  // namespace Im
}  // namespace AcFunDanmu

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_RequsetBasicInfo_2eproto
