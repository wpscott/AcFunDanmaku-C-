// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GroupJoinResponse.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_GroupJoinResponse_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_GroupJoinResponse_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_GroupJoinResponse_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_GroupJoinResponse_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_GroupJoinResponse_2eproto;
namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Message {
class GroupJoinResponse;
struct GroupJoinResponseDefaultTypeInternal;
extern GroupJoinResponseDefaultTypeInternal _GroupJoinResponse_default_instance_;
}  // namespace Message
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::Im::Cloud::Message::GroupJoinResponse* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud::Message::GroupJoinResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Message {

enum GroupJoinResponse_JoinStatus : int {
  GroupJoinResponse_JoinStatus_UNKNOWN_STATUS = 0,
  GroupJoinResponse_JoinStatus_SUCC = 1,
  GroupJoinResponse_JoinStatus_PENDING = 2,
  GroupJoinResponse_JoinStatus_GroupJoinResponse_JoinStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  GroupJoinResponse_JoinStatus_GroupJoinResponse_JoinStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool GroupJoinResponse_JoinStatus_IsValid(int value);
constexpr GroupJoinResponse_JoinStatus GroupJoinResponse_JoinStatus_JoinStatus_MIN = GroupJoinResponse_JoinStatus_UNKNOWN_STATUS;
constexpr GroupJoinResponse_JoinStatus GroupJoinResponse_JoinStatus_JoinStatus_MAX = GroupJoinResponse_JoinStatus_PENDING;
constexpr int GroupJoinResponse_JoinStatus_JoinStatus_ARRAYSIZE = GroupJoinResponse_JoinStatus_JoinStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GroupJoinResponse_JoinStatus_descriptor();
template<typename T>
inline const std::string& GroupJoinResponse_JoinStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GroupJoinResponse_JoinStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GroupJoinResponse_JoinStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GroupJoinResponse_JoinStatus_descriptor(), enum_t_value);
}
inline bool GroupJoinResponse_JoinStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GroupJoinResponse_JoinStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GroupJoinResponse_JoinStatus>(
    GroupJoinResponse_JoinStatus_descriptor(), name, value);
}
// ===================================================================

class GroupJoinResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.GroupJoinResponse) */ {
 public:
  inline GroupJoinResponse() : GroupJoinResponse(nullptr) {}
  ~GroupJoinResponse() override;
  explicit PROTOBUF_CONSTEXPR GroupJoinResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupJoinResponse(const GroupJoinResponse& from);
  GroupJoinResponse(GroupJoinResponse&& from) noexcept
    : GroupJoinResponse() {
    *this = ::std::move(from);
  }

  inline GroupJoinResponse& operator=(const GroupJoinResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupJoinResponse& operator=(GroupJoinResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupJoinResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupJoinResponse* internal_default_instance() {
    return reinterpret_cast<const GroupJoinResponse*>(
               &_GroupJoinResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GroupJoinResponse& a, GroupJoinResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupJoinResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupJoinResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupJoinResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupJoinResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupJoinResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupJoinResponse& from) {
    GroupJoinResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupJoinResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.GroupJoinResponse";
  }
  protected:
  explicit GroupJoinResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GroupJoinResponse_JoinStatus JoinStatus;
  static constexpr JoinStatus UNKNOWN_STATUS =
    GroupJoinResponse_JoinStatus_UNKNOWN_STATUS;
  static constexpr JoinStatus SUCC =
    GroupJoinResponse_JoinStatus_SUCC;
  static constexpr JoinStatus PENDING =
    GroupJoinResponse_JoinStatus_PENDING;
  static inline bool JoinStatus_IsValid(int value) {
    return GroupJoinResponse_JoinStatus_IsValid(value);
  }
  static constexpr JoinStatus JoinStatus_MIN =
    GroupJoinResponse_JoinStatus_JoinStatus_MIN;
  static constexpr JoinStatus JoinStatus_MAX =
    GroupJoinResponse_JoinStatus_JoinStatus_MAX;
  static constexpr int JoinStatus_ARRAYSIZE =
    GroupJoinResponse_JoinStatus_JoinStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  JoinStatus_descriptor() {
    return GroupJoinResponse_JoinStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& JoinStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, JoinStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function JoinStatus_Name.");
    return GroupJoinResponse_JoinStatus_Name(enum_t_value);
  }
  static inline bool JoinStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      JoinStatus* value) {
    return GroupJoinResponse_JoinStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kJoinStatusFieldNumber = 1,
  };
  // .AcFunDanmu.Im.Cloud.Message.GroupJoinResponse.JoinStatus joinStatus = 1;
  void clear_joinstatus();
  ::AcFunDanmu::Im::Cloud::Message::GroupJoinResponse_JoinStatus joinstatus() const;
  void set_joinstatus(::AcFunDanmu::Im::Cloud::Message::GroupJoinResponse_JoinStatus value);
  private:
  ::AcFunDanmu::Im::Cloud::Message::GroupJoinResponse_JoinStatus _internal_joinstatus() const;
  void _internal_set_joinstatus(::AcFunDanmu::Im::Cloud::Message::GroupJoinResponse_JoinStatus value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.GroupJoinResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int joinstatus_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GroupJoinResponse_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GroupJoinResponse

// .AcFunDanmu.Im.Cloud.Message.GroupJoinResponse.JoinStatus joinStatus = 1;
inline void GroupJoinResponse::clear_joinstatus() {
  _impl_.joinstatus_ = 0;
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupJoinResponse_JoinStatus GroupJoinResponse::_internal_joinstatus() const {
  return static_cast< ::AcFunDanmu::Im::Cloud::Message::GroupJoinResponse_JoinStatus >(_impl_.joinstatus_);
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupJoinResponse_JoinStatus GroupJoinResponse::joinstatus() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupJoinResponse.joinStatus)
  return _internal_joinstatus();
}
inline void GroupJoinResponse::_internal_set_joinstatus(::AcFunDanmu::Im::Cloud::Message::GroupJoinResponse_JoinStatus value) {
  
  _impl_.joinstatus_ = value;
}
inline void GroupJoinResponse::set_joinstatus(::AcFunDanmu::Im::Cloud::Message::GroupJoinResponse_JoinStatus value) {
  _internal_set_joinstatus(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupJoinResponse.joinStatus)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Message
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::AcFunDanmu::Im::Cloud::Message::GroupJoinResponse_JoinStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::Im::Cloud::Message::GroupJoinResponse_JoinStatus>() {
  return ::AcFunDanmu::Im::Cloud::Message::GroupJoinResponse_JoinStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_GroupJoinResponse_2eproto
