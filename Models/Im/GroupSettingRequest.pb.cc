// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GroupSettingRequest.proto

#include "GroupSettingRequest.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Message {
PROTOBUF_CONSTEXPR GroupSettingRequest::GroupSettingRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.groupid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.GroupSetting_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct GroupSettingRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupSettingRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupSettingRequestDefaultTypeInternal() {}
  union {
    GroupSettingRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupSettingRequestDefaultTypeInternal _GroupSettingRequest_default_instance_;
}  // namespace Message
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu
static ::_pb::Metadata file_level_metadata_GroupSettingRequest_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_GroupSettingRequest_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_GroupSettingRequest_2eproto = nullptr;

const uint32_t TableStruct_GroupSettingRequest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Message::GroupSettingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Message::GroupSettingRequest, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Message::GroupSettingRequest, _impl_.groupid_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Message::GroupSettingRequest, _impl_.GroupSetting_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::AcFunDanmu::Im::Cloud::Message::GroupSettingRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::AcFunDanmu::Im::Cloud::Message::_GroupSettingRequest_default_instance_._instance,
};

const char descriptor_table_protodef_GroupSettingRequest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031GroupSettingRequest.proto\022\033AcFunDanmu."
  "Im.Cloud.Message\032\032GroupExtraDataUpdate.p"
  "roto\032\030GroupHeadUrlUpdate.proto\032\036GroupInv"
  "iteNeedUserAgree.proto\032\037GroupSettingAdmi"
  "nTransfer.proto\032\035GroupSettingBatchUpdate"
  ".proto\032\026GroupSettingDesc.proto\032\"GroupSet"
  "tingInvitePermission.proto\032$GroupSetting"
  "JoinNeedPermission.proto\032\037GroupSettingMe"
  "mberSilence.proto\032#GroupSettingMemberTem"
  "pSilence.proto\032$GroupSettingRemindAllOnl"
  "yAdmin.proto\032\030GroupSettingRename.proto\032!"
  "GroupSettingUpdateOnlyAdmin.proto\"\366\010\n\023Gr"
  "oupSettingRequest\022A\n\006rename\030\002 \001(\0132/.AcFu"
  "nDanmu.Im.Cloud.Message.GroupSettingRena"
  "meH\000\022=\n\004desc\030\003 \001(\0132-.AcFunDanmu.Im.Cloud"
  ".Message.GroupSettingDescH\000\022Y\n\022joinNeedP"
  "ermission\030\004 \001(\0132;.AcFunDanmu.Im.Cloud.Me"
  "ssage.GroupSettingJoinNeedPermissionH\000\022U"
  "\n\020invitePermission\030\005 \001(\01329.AcFunDanmu.Im"
  ".Cloud.Message.GroupSettingInvitePermiss"
  "ionH\000\022U\n\023groupMembersSilence\030\006 \001(\01326.AcF"
  "unDanmu.Im.Cloud.Message.GroupSettingMem"
  "berSilenceH\000\022T\n\022groupAdminTransfer\030\007 \001(\013"
  "26.AcFunDanmu.Im.Cloud.Message.GroupSett"
  "ingAdminTransferH\000\022Z\n\026settingUpdateOnlyA"
  "dmin\030\010 \001(\01328.AcFunDanmu.Im.Cloud.Message"
  ".GroupSettingUpdateOnlyAdminH\000\022Y\n\022remind"
  "AllOnlyAdmin\030\t \001(\0132;.AcFunDanmu.Im.Cloud"
  ".Message.GroupSettingRemindAllOnlyAdminH"
  "\000\022K\n\013batchUpdate\030\n \001(\01324.AcFunDanmu.Im.C"
  "loud.Message.GroupSettingBatchUpdateH\000\022\\"
  "\n\026groupMemberTempSilence\030\013 \001(\0132:.AcFunDa"
  "nmu.Im.Cloud.Message.GroupSettingMemberT"
  "empSilenceH\000\022Q\n\024groupExtraDataUpdate\030\014 \001"
  "(\01321.AcFunDanmu.Im.Cloud.Message.GroupEx"
  "traDataUpdateH\000\022M\n\022groupHeadUrlUpdate\030\r "
  "\001(\0132/.AcFunDanmu.Im.Cloud.Message.GroupH"
  "eadUrlUpdateH\000\022Y\n\030groupInviteNeedUserAgr"
  "ee\030\016 \001(\01325.AcFunDanmu.Im.Cloud.Message.G"
  "roupInviteNeedUserAgreeH\000\022\017\n\007groupId\030\001 \001"
  "(\tB\016\n\014GroupSettingb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_GroupSettingRequest_2eproto_deps[13] = {
  &::descriptor_table_GroupExtraDataUpdate_2eproto,
  &::descriptor_table_GroupHeadUrlUpdate_2eproto,
  &::descriptor_table_GroupInviteNeedUserAgree_2eproto,
  &::descriptor_table_GroupSettingAdminTransfer_2eproto,
  &::descriptor_table_GroupSettingBatchUpdate_2eproto,
  &::descriptor_table_GroupSettingDesc_2eproto,
  &::descriptor_table_GroupSettingInvitePermission_2eproto,
  &::descriptor_table_GroupSettingJoinNeedPermission_2eproto,
  &::descriptor_table_GroupSettingMemberSilence_2eproto,
  &::descriptor_table_GroupSettingMemberTempSilence_2eproto,
  &::descriptor_table_GroupSettingRemindAllOnlyAdmin_2eproto,
  &::descriptor_table_GroupSettingRename_2eproto,
  &::descriptor_table_GroupSettingUpdateOnlyAdmin_2eproto,
};
static ::_pbi::once_flag descriptor_table_GroupSettingRequest_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_GroupSettingRequest_2eproto = {
    false, false, 1626, descriptor_table_protodef_GroupSettingRequest_2eproto,
    "GroupSettingRequest.proto",
    &descriptor_table_GroupSettingRequest_2eproto_once, descriptor_table_GroupSettingRequest_2eproto_deps, 13, 1,
    schemas, file_default_instances, TableStruct_GroupSettingRequest_2eproto::offsets,
    file_level_metadata_GroupSettingRequest_2eproto, file_level_enum_descriptors_GroupSettingRequest_2eproto,
    file_level_service_descriptors_GroupSettingRequest_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_GroupSettingRequest_2eproto_getter() {
  return &descriptor_table_GroupSettingRequest_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_GroupSettingRequest_2eproto(&descriptor_table_GroupSettingRequest_2eproto);
namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Message {

// ===================================================================

class GroupSettingRequest::_Internal {
 public:
  static const ::AcFunDanmu::Im::Cloud::Message::GroupSettingRename& rename(const GroupSettingRequest* msg);
  static const ::AcFunDanmu::Im::Cloud::Message::GroupSettingDesc& desc(const GroupSettingRequest* msg);
  static const ::AcFunDanmu::Im::Cloud::Message::GroupSettingJoinNeedPermission& joinneedpermission(const GroupSettingRequest* msg);
  static const ::AcFunDanmu::Im::Cloud::Message::GroupSettingInvitePermission& invitepermission(const GroupSettingRequest* msg);
  static const ::AcFunDanmu::Im::Cloud::Message::GroupSettingMemberSilence& groupmemberssilence(const GroupSettingRequest* msg);
  static const ::AcFunDanmu::Im::Cloud::Message::GroupSettingAdminTransfer& groupadmintransfer(const GroupSettingRequest* msg);
  static const ::AcFunDanmu::Im::Cloud::Message::GroupSettingUpdateOnlyAdmin& settingupdateonlyadmin(const GroupSettingRequest* msg);
  static const ::AcFunDanmu::Im::Cloud::Message::GroupSettingRemindAllOnlyAdmin& remindallonlyadmin(const GroupSettingRequest* msg);
  static const ::AcFunDanmu::Im::Cloud::Message::GroupSettingBatchUpdate& batchupdate(const GroupSettingRequest* msg);
  static const ::AcFunDanmu::Im::Cloud::Message::GroupSettingMemberTempSilence& groupmembertempsilence(const GroupSettingRequest* msg);
  static const ::AcFunDanmu::Im::Cloud::Message::GroupExtraDataUpdate& groupextradataupdate(const GroupSettingRequest* msg);
  static const ::AcFunDanmu::Im::Cloud::Message::GroupHeadUrlUpdate& groupheadurlupdate(const GroupSettingRequest* msg);
  static const ::AcFunDanmu::Im::Cloud::Message::GroupInviteNeedUserAgree& groupinviteneeduseragree(const GroupSettingRequest* msg);
};

const ::AcFunDanmu::Im::Cloud::Message::GroupSettingRename&
GroupSettingRequest::_Internal::rename(const GroupSettingRequest* msg) {
  return *msg->_impl_.GroupSetting_.rename_;
}
const ::AcFunDanmu::Im::Cloud::Message::GroupSettingDesc&
GroupSettingRequest::_Internal::desc(const GroupSettingRequest* msg) {
  return *msg->_impl_.GroupSetting_.desc_;
}
const ::AcFunDanmu::Im::Cloud::Message::GroupSettingJoinNeedPermission&
GroupSettingRequest::_Internal::joinneedpermission(const GroupSettingRequest* msg) {
  return *msg->_impl_.GroupSetting_.joinneedpermission_;
}
const ::AcFunDanmu::Im::Cloud::Message::GroupSettingInvitePermission&
GroupSettingRequest::_Internal::invitepermission(const GroupSettingRequest* msg) {
  return *msg->_impl_.GroupSetting_.invitepermission_;
}
const ::AcFunDanmu::Im::Cloud::Message::GroupSettingMemberSilence&
GroupSettingRequest::_Internal::groupmemberssilence(const GroupSettingRequest* msg) {
  return *msg->_impl_.GroupSetting_.groupmemberssilence_;
}
const ::AcFunDanmu::Im::Cloud::Message::GroupSettingAdminTransfer&
GroupSettingRequest::_Internal::groupadmintransfer(const GroupSettingRequest* msg) {
  return *msg->_impl_.GroupSetting_.groupadmintransfer_;
}
const ::AcFunDanmu::Im::Cloud::Message::GroupSettingUpdateOnlyAdmin&
GroupSettingRequest::_Internal::settingupdateonlyadmin(const GroupSettingRequest* msg) {
  return *msg->_impl_.GroupSetting_.settingupdateonlyadmin_;
}
const ::AcFunDanmu::Im::Cloud::Message::GroupSettingRemindAllOnlyAdmin&
GroupSettingRequest::_Internal::remindallonlyadmin(const GroupSettingRequest* msg) {
  return *msg->_impl_.GroupSetting_.remindallonlyadmin_;
}
const ::AcFunDanmu::Im::Cloud::Message::GroupSettingBatchUpdate&
GroupSettingRequest::_Internal::batchupdate(const GroupSettingRequest* msg) {
  return *msg->_impl_.GroupSetting_.batchupdate_;
}
const ::AcFunDanmu::Im::Cloud::Message::GroupSettingMemberTempSilence&
GroupSettingRequest::_Internal::groupmembertempsilence(const GroupSettingRequest* msg) {
  return *msg->_impl_.GroupSetting_.groupmembertempsilence_;
}
const ::AcFunDanmu::Im::Cloud::Message::GroupExtraDataUpdate&
GroupSettingRequest::_Internal::groupextradataupdate(const GroupSettingRequest* msg) {
  return *msg->_impl_.GroupSetting_.groupextradataupdate_;
}
const ::AcFunDanmu::Im::Cloud::Message::GroupHeadUrlUpdate&
GroupSettingRequest::_Internal::groupheadurlupdate(const GroupSettingRequest* msg) {
  return *msg->_impl_.GroupSetting_.groupheadurlupdate_;
}
const ::AcFunDanmu::Im::Cloud::Message::GroupInviteNeedUserAgree&
GroupSettingRequest::_Internal::groupinviteneeduseragree(const GroupSettingRequest* msg) {
  return *msg->_impl_.GroupSetting_.groupinviteneeduseragree_;
}
void GroupSettingRequest::set_allocated_rename(::AcFunDanmu::Im::Cloud::Message::GroupSettingRename* rename) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_GroupSetting();
  if (rename) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rename));
    if (message_arena != submessage_arena) {
      rename = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rename, submessage_arena);
    }
    set_has_rename();
    _impl_.GroupSetting_.rename_ = rename;
  }
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.rename)
}
void GroupSettingRequest::clear_rename() {
  if (_internal_has_rename()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.GroupSetting_.rename_;
    }
    clear_has_GroupSetting();
  }
}
void GroupSettingRequest::set_allocated_desc(::AcFunDanmu::Im::Cloud::Message::GroupSettingDesc* desc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_GroupSetting();
  if (desc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(desc));
    if (message_arena != submessage_arena) {
      desc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, desc, submessage_arena);
    }
    set_has_desc();
    _impl_.GroupSetting_.desc_ = desc;
  }
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.desc)
}
void GroupSettingRequest::clear_desc() {
  if (_internal_has_desc()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.GroupSetting_.desc_;
    }
    clear_has_GroupSetting();
  }
}
void GroupSettingRequest::set_allocated_joinneedpermission(::AcFunDanmu::Im::Cloud::Message::GroupSettingJoinNeedPermission* joinneedpermission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_GroupSetting();
  if (joinneedpermission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(joinneedpermission));
    if (message_arena != submessage_arena) {
      joinneedpermission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, joinneedpermission, submessage_arena);
    }
    set_has_joinneedpermission();
    _impl_.GroupSetting_.joinneedpermission_ = joinneedpermission;
  }
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.joinNeedPermission)
}
void GroupSettingRequest::clear_joinneedpermission() {
  if (_internal_has_joinneedpermission()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.GroupSetting_.joinneedpermission_;
    }
    clear_has_GroupSetting();
  }
}
void GroupSettingRequest::set_allocated_invitepermission(::AcFunDanmu::Im::Cloud::Message::GroupSettingInvitePermission* invitepermission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_GroupSetting();
  if (invitepermission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(invitepermission));
    if (message_arena != submessage_arena) {
      invitepermission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, invitepermission, submessage_arena);
    }
    set_has_invitepermission();
    _impl_.GroupSetting_.invitepermission_ = invitepermission;
  }
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.invitePermission)
}
void GroupSettingRequest::clear_invitepermission() {
  if (_internal_has_invitepermission()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.GroupSetting_.invitepermission_;
    }
    clear_has_GroupSetting();
  }
}
void GroupSettingRequest::set_allocated_groupmemberssilence(::AcFunDanmu::Im::Cloud::Message::GroupSettingMemberSilence* groupmemberssilence) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_GroupSetting();
  if (groupmemberssilence) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(groupmemberssilence));
    if (message_arena != submessage_arena) {
      groupmemberssilence = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, groupmemberssilence, submessage_arena);
    }
    set_has_groupmemberssilence();
    _impl_.GroupSetting_.groupmemberssilence_ = groupmemberssilence;
  }
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.groupMembersSilence)
}
void GroupSettingRequest::clear_groupmemberssilence() {
  if (_internal_has_groupmemberssilence()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.GroupSetting_.groupmemberssilence_;
    }
    clear_has_GroupSetting();
  }
}
void GroupSettingRequest::set_allocated_groupadmintransfer(::AcFunDanmu::Im::Cloud::Message::GroupSettingAdminTransfer* groupadmintransfer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_GroupSetting();
  if (groupadmintransfer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(groupadmintransfer));
    if (message_arena != submessage_arena) {
      groupadmintransfer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, groupadmintransfer, submessage_arena);
    }
    set_has_groupadmintransfer();
    _impl_.GroupSetting_.groupadmintransfer_ = groupadmintransfer;
  }
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.groupAdminTransfer)
}
void GroupSettingRequest::clear_groupadmintransfer() {
  if (_internal_has_groupadmintransfer()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.GroupSetting_.groupadmintransfer_;
    }
    clear_has_GroupSetting();
  }
}
void GroupSettingRequest::set_allocated_settingupdateonlyadmin(::AcFunDanmu::Im::Cloud::Message::GroupSettingUpdateOnlyAdmin* settingupdateonlyadmin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_GroupSetting();
  if (settingupdateonlyadmin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(settingupdateonlyadmin));
    if (message_arena != submessage_arena) {
      settingupdateonlyadmin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settingupdateonlyadmin, submessage_arena);
    }
    set_has_settingupdateonlyadmin();
    _impl_.GroupSetting_.settingupdateonlyadmin_ = settingupdateonlyadmin;
  }
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.settingUpdateOnlyAdmin)
}
void GroupSettingRequest::clear_settingupdateonlyadmin() {
  if (_internal_has_settingupdateonlyadmin()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.GroupSetting_.settingupdateonlyadmin_;
    }
    clear_has_GroupSetting();
  }
}
void GroupSettingRequest::set_allocated_remindallonlyadmin(::AcFunDanmu::Im::Cloud::Message::GroupSettingRemindAllOnlyAdmin* remindallonlyadmin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_GroupSetting();
  if (remindallonlyadmin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(remindallonlyadmin));
    if (message_arena != submessage_arena) {
      remindallonlyadmin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remindallonlyadmin, submessage_arena);
    }
    set_has_remindallonlyadmin();
    _impl_.GroupSetting_.remindallonlyadmin_ = remindallonlyadmin;
  }
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.remindAllOnlyAdmin)
}
void GroupSettingRequest::clear_remindallonlyadmin() {
  if (_internal_has_remindallonlyadmin()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.GroupSetting_.remindallonlyadmin_;
    }
    clear_has_GroupSetting();
  }
}
void GroupSettingRequest::set_allocated_batchupdate(::AcFunDanmu::Im::Cloud::Message::GroupSettingBatchUpdate* batchupdate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_GroupSetting();
  if (batchupdate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(batchupdate));
    if (message_arena != submessage_arena) {
      batchupdate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, batchupdate, submessage_arena);
    }
    set_has_batchupdate();
    _impl_.GroupSetting_.batchupdate_ = batchupdate;
  }
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.batchUpdate)
}
void GroupSettingRequest::clear_batchupdate() {
  if (_internal_has_batchupdate()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.GroupSetting_.batchupdate_;
    }
    clear_has_GroupSetting();
  }
}
void GroupSettingRequest::set_allocated_groupmembertempsilence(::AcFunDanmu::Im::Cloud::Message::GroupSettingMemberTempSilence* groupmembertempsilence) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_GroupSetting();
  if (groupmembertempsilence) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(groupmembertempsilence));
    if (message_arena != submessage_arena) {
      groupmembertempsilence = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, groupmembertempsilence, submessage_arena);
    }
    set_has_groupmembertempsilence();
    _impl_.GroupSetting_.groupmembertempsilence_ = groupmembertempsilence;
  }
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.groupMemberTempSilence)
}
void GroupSettingRequest::clear_groupmembertempsilence() {
  if (_internal_has_groupmembertempsilence()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.GroupSetting_.groupmembertempsilence_;
    }
    clear_has_GroupSetting();
  }
}
void GroupSettingRequest::set_allocated_groupextradataupdate(::AcFunDanmu::Im::Cloud::Message::GroupExtraDataUpdate* groupextradataupdate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_GroupSetting();
  if (groupextradataupdate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(groupextradataupdate));
    if (message_arena != submessage_arena) {
      groupextradataupdate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, groupextradataupdate, submessage_arena);
    }
    set_has_groupextradataupdate();
    _impl_.GroupSetting_.groupextradataupdate_ = groupextradataupdate;
  }
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.groupExtraDataUpdate)
}
void GroupSettingRequest::clear_groupextradataupdate() {
  if (_internal_has_groupextradataupdate()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.GroupSetting_.groupextradataupdate_;
    }
    clear_has_GroupSetting();
  }
}
void GroupSettingRequest::set_allocated_groupheadurlupdate(::AcFunDanmu::Im::Cloud::Message::GroupHeadUrlUpdate* groupheadurlupdate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_GroupSetting();
  if (groupheadurlupdate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(groupheadurlupdate));
    if (message_arena != submessage_arena) {
      groupheadurlupdate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, groupheadurlupdate, submessage_arena);
    }
    set_has_groupheadurlupdate();
    _impl_.GroupSetting_.groupheadurlupdate_ = groupheadurlupdate;
  }
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.groupHeadUrlUpdate)
}
void GroupSettingRequest::clear_groupheadurlupdate() {
  if (_internal_has_groupheadurlupdate()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.GroupSetting_.groupheadurlupdate_;
    }
    clear_has_GroupSetting();
  }
}
void GroupSettingRequest::set_allocated_groupinviteneeduseragree(::AcFunDanmu::Im::Cloud::Message::GroupInviteNeedUserAgree* groupinviteneeduseragree) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_GroupSetting();
  if (groupinviteneeduseragree) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(groupinviteneeduseragree));
    if (message_arena != submessage_arena) {
      groupinviteneeduseragree = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, groupinviteneeduseragree, submessage_arena);
    }
    set_has_groupinviteneeduseragree();
    _impl_.GroupSetting_.groupinviteneeduseragree_ = groupinviteneeduseragree;
  }
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.groupInviteNeedUserAgree)
}
void GroupSettingRequest::clear_groupinviteneeduseragree() {
  if (_internal_has_groupinviteneeduseragree()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.GroupSetting_.groupinviteneeduseragree_;
    }
    clear_has_GroupSetting();
  }
}
GroupSettingRequest::GroupSettingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest)
}
GroupSettingRequest::GroupSettingRequest(const GroupSettingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GroupSettingRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.groupid_){}
    , decltype(_impl_.GroupSetting_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.groupid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.groupid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_groupid().empty()) {
    _this->_impl_.groupid_.Set(from._internal_groupid(), 
      _this->GetArenaForAllocation());
  }
  clear_has_GroupSetting();
  switch (from.GroupSetting_case()) {
    case kRename: {
      _this->_internal_mutable_rename()->::AcFunDanmu::Im::Cloud::Message::GroupSettingRename::MergeFrom(
          from._internal_rename());
      break;
    }
    case kDesc: {
      _this->_internal_mutable_desc()->::AcFunDanmu::Im::Cloud::Message::GroupSettingDesc::MergeFrom(
          from._internal_desc());
      break;
    }
    case kJoinNeedPermission: {
      _this->_internal_mutable_joinneedpermission()->::AcFunDanmu::Im::Cloud::Message::GroupSettingJoinNeedPermission::MergeFrom(
          from._internal_joinneedpermission());
      break;
    }
    case kInvitePermission: {
      _this->_internal_mutable_invitepermission()->::AcFunDanmu::Im::Cloud::Message::GroupSettingInvitePermission::MergeFrom(
          from._internal_invitepermission());
      break;
    }
    case kGroupMembersSilence: {
      _this->_internal_mutable_groupmemberssilence()->::AcFunDanmu::Im::Cloud::Message::GroupSettingMemberSilence::MergeFrom(
          from._internal_groupmemberssilence());
      break;
    }
    case kGroupAdminTransfer: {
      _this->_internal_mutable_groupadmintransfer()->::AcFunDanmu::Im::Cloud::Message::GroupSettingAdminTransfer::MergeFrom(
          from._internal_groupadmintransfer());
      break;
    }
    case kSettingUpdateOnlyAdmin: {
      _this->_internal_mutable_settingupdateonlyadmin()->::AcFunDanmu::Im::Cloud::Message::GroupSettingUpdateOnlyAdmin::MergeFrom(
          from._internal_settingupdateonlyadmin());
      break;
    }
    case kRemindAllOnlyAdmin: {
      _this->_internal_mutable_remindallonlyadmin()->::AcFunDanmu::Im::Cloud::Message::GroupSettingRemindAllOnlyAdmin::MergeFrom(
          from._internal_remindallonlyadmin());
      break;
    }
    case kBatchUpdate: {
      _this->_internal_mutable_batchupdate()->::AcFunDanmu::Im::Cloud::Message::GroupSettingBatchUpdate::MergeFrom(
          from._internal_batchupdate());
      break;
    }
    case kGroupMemberTempSilence: {
      _this->_internal_mutable_groupmembertempsilence()->::AcFunDanmu::Im::Cloud::Message::GroupSettingMemberTempSilence::MergeFrom(
          from._internal_groupmembertempsilence());
      break;
    }
    case kGroupExtraDataUpdate: {
      _this->_internal_mutable_groupextradataupdate()->::AcFunDanmu::Im::Cloud::Message::GroupExtraDataUpdate::MergeFrom(
          from._internal_groupextradataupdate());
      break;
    }
    case kGroupHeadUrlUpdate: {
      _this->_internal_mutable_groupheadurlupdate()->::AcFunDanmu::Im::Cloud::Message::GroupHeadUrlUpdate::MergeFrom(
          from._internal_groupheadurlupdate());
      break;
    }
    case kGroupInviteNeedUserAgree: {
      _this->_internal_mutable_groupinviteneeduseragree()->::AcFunDanmu::Im::Cloud::Message::GroupInviteNeedUserAgree::MergeFrom(
          from._internal_groupinviteneeduseragree());
      break;
    }
    case GROUPSETTING_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest)
}

inline void GroupSettingRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.groupid_){}
    , decltype(_impl_.GroupSetting_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.groupid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.groupid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_GroupSetting();
}

GroupSettingRequest::~GroupSettingRequest() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GroupSettingRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.groupid_.Destroy();
  if (has_GroupSetting()) {
    clear_GroupSetting();
  }
}

void GroupSettingRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GroupSettingRequest::clear_GroupSetting() {
// @@protoc_insertion_point(one_of_clear_start:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest)
  switch (GroupSetting_case()) {
    case kRename: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.GroupSetting_.rename_;
      }
      break;
    }
    case kDesc: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.GroupSetting_.desc_;
      }
      break;
    }
    case kJoinNeedPermission: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.GroupSetting_.joinneedpermission_;
      }
      break;
    }
    case kInvitePermission: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.GroupSetting_.invitepermission_;
      }
      break;
    }
    case kGroupMembersSilence: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.GroupSetting_.groupmemberssilence_;
      }
      break;
    }
    case kGroupAdminTransfer: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.GroupSetting_.groupadmintransfer_;
      }
      break;
    }
    case kSettingUpdateOnlyAdmin: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.GroupSetting_.settingupdateonlyadmin_;
      }
      break;
    }
    case kRemindAllOnlyAdmin: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.GroupSetting_.remindallonlyadmin_;
      }
      break;
    }
    case kBatchUpdate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.GroupSetting_.batchupdate_;
      }
      break;
    }
    case kGroupMemberTempSilence: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.GroupSetting_.groupmembertempsilence_;
      }
      break;
    }
    case kGroupExtraDataUpdate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.GroupSetting_.groupextradataupdate_;
      }
      break;
    }
    case kGroupHeadUrlUpdate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.GroupSetting_.groupheadurlupdate_;
      }
      break;
    }
    case kGroupInviteNeedUserAgree: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.GroupSetting_.groupinviteneeduseragree_;
      }
      break;
    }
    case GROUPSETTING_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = GROUPSETTING_NOT_SET;
}


void GroupSettingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.groupid_.ClearToEmpty();
  clear_GroupSetting();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupSettingRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string groupId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_groupid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.groupId"));
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Cloud.Message.GroupSettingRename rename = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rename(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Cloud.Message.GroupSettingDesc desc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_desc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Cloud.Message.GroupSettingJoinNeedPermission joinNeedPermission = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_joinneedpermission(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Cloud.Message.GroupSettingInvitePermission invitePermission = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_invitepermission(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Cloud.Message.GroupSettingMemberSilence groupMembersSilence = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_groupmemberssilence(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Cloud.Message.GroupSettingAdminTransfer groupAdminTransfer = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_groupadmintransfer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Cloud.Message.GroupSettingUpdateOnlyAdmin settingUpdateOnlyAdmin = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_settingupdateonlyadmin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Cloud.Message.GroupSettingRemindAllOnlyAdmin remindAllOnlyAdmin = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_remindallonlyadmin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Cloud.Message.GroupSettingBatchUpdate batchUpdate = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_batchupdate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Cloud.Message.GroupSettingMemberTempSilence groupMemberTempSilence = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_groupmembertempsilence(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Cloud.Message.GroupExtraDataUpdate groupExtraDataUpdate = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_groupextradataupdate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Cloud.Message.GroupHeadUrlUpdate groupHeadUrlUpdate = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_groupheadurlupdate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Cloud.Message.GroupInviteNeedUserAgree groupInviteNeedUserAgree = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_groupinviteneeduseragree(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GroupSettingRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string groupId = 1;
  if (!this->_internal_groupid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_groupid().data(), static_cast<int>(this->_internal_groupid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.groupId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_groupid(), target);
  }

  // .AcFunDanmu.Im.Cloud.Message.GroupSettingRename rename = 2;
  if (_internal_has_rename()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::rename(this),
        _Internal::rename(this).GetCachedSize(), target, stream);
  }

  // .AcFunDanmu.Im.Cloud.Message.GroupSettingDesc desc = 3;
  if (_internal_has_desc()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::desc(this),
        _Internal::desc(this).GetCachedSize(), target, stream);
  }

  // .AcFunDanmu.Im.Cloud.Message.GroupSettingJoinNeedPermission joinNeedPermission = 4;
  if (_internal_has_joinneedpermission()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::joinneedpermission(this),
        _Internal::joinneedpermission(this).GetCachedSize(), target, stream);
  }

  // .AcFunDanmu.Im.Cloud.Message.GroupSettingInvitePermission invitePermission = 5;
  if (_internal_has_invitepermission()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::invitepermission(this),
        _Internal::invitepermission(this).GetCachedSize(), target, stream);
  }

  // .AcFunDanmu.Im.Cloud.Message.GroupSettingMemberSilence groupMembersSilence = 6;
  if (_internal_has_groupmemberssilence()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::groupmemberssilence(this),
        _Internal::groupmemberssilence(this).GetCachedSize(), target, stream);
  }

  // .AcFunDanmu.Im.Cloud.Message.GroupSettingAdminTransfer groupAdminTransfer = 7;
  if (_internal_has_groupadmintransfer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::groupadmintransfer(this),
        _Internal::groupadmintransfer(this).GetCachedSize(), target, stream);
  }

  // .AcFunDanmu.Im.Cloud.Message.GroupSettingUpdateOnlyAdmin settingUpdateOnlyAdmin = 8;
  if (_internal_has_settingupdateonlyadmin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::settingupdateonlyadmin(this),
        _Internal::settingupdateonlyadmin(this).GetCachedSize(), target, stream);
  }

  // .AcFunDanmu.Im.Cloud.Message.GroupSettingRemindAllOnlyAdmin remindAllOnlyAdmin = 9;
  if (_internal_has_remindallonlyadmin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::remindallonlyadmin(this),
        _Internal::remindallonlyadmin(this).GetCachedSize(), target, stream);
  }

  // .AcFunDanmu.Im.Cloud.Message.GroupSettingBatchUpdate batchUpdate = 10;
  if (_internal_has_batchupdate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::batchupdate(this),
        _Internal::batchupdate(this).GetCachedSize(), target, stream);
  }

  // .AcFunDanmu.Im.Cloud.Message.GroupSettingMemberTempSilence groupMemberTempSilence = 11;
  if (_internal_has_groupmembertempsilence()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::groupmembertempsilence(this),
        _Internal::groupmembertempsilence(this).GetCachedSize(), target, stream);
  }

  // .AcFunDanmu.Im.Cloud.Message.GroupExtraDataUpdate groupExtraDataUpdate = 12;
  if (_internal_has_groupextradataupdate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::groupextradataupdate(this),
        _Internal::groupextradataupdate(this).GetCachedSize(), target, stream);
  }

  // .AcFunDanmu.Im.Cloud.Message.GroupHeadUrlUpdate groupHeadUrlUpdate = 13;
  if (_internal_has_groupheadurlupdate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::groupheadurlupdate(this),
        _Internal::groupheadurlupdate(this).GetCachedSize(), target, stream);
  }

  // .AcFunDanmu.Im.Cloud.Message.GroupInviteNeedUserAgree groupInviteNeedUserAgree = 14;
  if (_internal_has_groupinviteneeduseragree()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::groupinviteneeduseragree(this),
        _Internal::groupinviteneeduseragree(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest)
  return target;
}

size_t GroupSettingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string groupId = 1;
  if (!this->_internal_groupid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_groupid());
  }

  switch (GroupSetting_case()) {
    // .AcFunDanmu.Im.Cloud.Message.GroupSettingRename rename = 2;
    case kRename: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.GroupSetting_.rename_);
      break;
    }
    // .AcFunDanmu.Im.Cloud.Message.GroupSettingDesc desc = 3;
    case kDesc: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.GroupSetting_.desc_);
      break;
    }
    // .AcFunDanmu.Im.Cloud.Message.GroupSettingJoinNeedPermission joinNeedPermission = 4;
    case kJoinNeedPermission: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.GroupSetting_.joinneedpermission_);
      break;
    }
    // .AcFunDanmu.Im.Cloud.Message.GroupSettingInvitePermission invitePermission = 5;
    case kInvitePermission: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.GroupSetting_.invitepermission_);
      break;
    }
    // .AcFunDanmu.Im.Cloud.Message.GroupSettingMemberSilence groupMembersSilence = 6;
    case kGroupMembersSilence: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.GroupSetting_.groupmemberssilence_);
      break;
    }
    // .AcFunDanmu.Im.Cloud.Message.GroupSettingAdminTransfer groupAdminTransfer = 7;
    case kGroupAdminTransfer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.GroupSetting_.groupadmintransfer_);
      break;
    }
    // .AcFunDanmu.Im.Cloud.Message.GroupSettingUpdateOnlyAdmin settingUpdateOnlyAdmin = 8;
    case kSettingUpdateOnlyAdmin: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.GroupSetting_.settingupdateonlyadmin_);
      break;
    }
    // .AcFunDanmu.Im.Cloud.Message.GroupSettingRemindAllOnlyAdmin remindAllOnlyAdmin = 9;
    case kRemindAllOnlyAdmin: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.GroupSetting_.remindallonlyadmin_);
      break;
    }
    // .AcFunDanmu.Im.Cloud.Message.GroupSettingBatchUpdate batchUpdate = 10;
    case kBatchUpdate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.GroupSetting_.batchupdate_);
      break;
    }
    // .AcFunDanmu.Im.Cloud.Message.GroupSettingMemberTempSilence groupMemberTempSilence = 11;
    case kGroupMemberTempSilence: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.GroupSetting_.groupmembertempsilence_);
      break;
    }
    // .AcFunDanmu.Im.Cloud.Message.GroupExtraDataUpdate groupExtraDataUpdate = 12;
    case kGroupExtraDataUpdate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.GroupSetting_.groupextradataupdate_);
      break;
    }
    // .AcFunDanmu.Im.Cloud.Message.GroupHeadUrlUpdate groupHeadUrlUpdate = 13;
    case kGroupHeadUrlUpdate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.GroupSetting_.groupheadurlupdate_);
      break;
    }
    // .AcFunDanmu.Im.Cloud.Message.GroupInviteNeedUserAgree groupInviteNeedUserAgree = 14;
    case kGroupInviteNeedUserAgree: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.GroupSetting_.groupinviteneeduseragree_);
      break;
    }
    case GROUPSETTING_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GroupSettingRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GroupSettingRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GroupSettingRequest::GetClassData() const { return &_class_data_; }


void GroupSettingRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GroupSettingRequest*>(&to_msg);
  auto& from = static_cast<const GroupSettingRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_groupid().empty()) {
    _this->_internal_set_groupid(from._internal_groupid());
  }
  switch (from.GroupSetting_case()) {
    case kRename: {
      _this->_internal_mutable_rename()->::AcFunDanmu::Im::Cloud::Message::GroupSettingRename::MergeFrom(
          from._internal_rename());
      break;
    }
    case kDesc: {
      _this->_internal_mutable_desc()->::AcFunDanmu::Im::Cloud::Message::GroupSettingDesc::MergeFrom(
          from._internal_desc());
      break;
    }
    case kJoinNeedPermission: {
      _this->_internal_mutable_joinneedpermission()->::AcFunDanmu::Im::Cloud::Message::GroupSettingJoinNeedPermission::MergeFrom(
          from._internal_joinneedpermission());
      break;
    }
    case kInvitePermission: {
      _this->_internal_mutable_invitepermission()->::AcFunDanmu::Im::Cloud::Message::GroupSettingInvitePermission::MergeFrom(
          from._internal_invitepermission());
      break;
    }
    case kGroupMembersSilence: {
      _this->_internal_mutable_groupmemberssilence()->::AcFunDanmu::Im::Cloud::Message::GroupSettingMemberSilence::MergeFrom(
          from._internal_groupmemberssilence());
      break;
    }
    case kGroupAdminTransfer: {
      _this->_internal_mutable_groupadmintransfer()->::AcFunDanmu::Im::Cloud::Message::GroupSettingAdminTransfer::MergeFrom(
          from._internal_groupadmintransfer());
      break;
    }
    case kSettingUpdateOnlyAdmin: {
      _this->_internal_mutable_settingupdateonlyadmin()->::AcFunDanmu::Im::Cloud::Message::GroupSettingUpdateOnlyAdmin::MergeFrom(
          from._internal_settingupdateonlyadmin());
      break;
    }
    case kRemindAllOnlyAdmin: {
      _this->_internal_mutable_remindallonlyadmin()->::AcFunDanmu::Im::Cloud::Message::GroupSettingRemindAllOnlyAdmin::MergeFrom(
          from._internal_remindallonlyadmin());
      break;
    }
    case kBatchUpdate: {
      _this->_internal_mutable_batchupdate()->::AcFunDanmu::Im::Cloud::Message::GroupSettingBatchUpdate::MergeFrom(
          from._internal_batchupdate());
      break;
    }
    case kGroupMemberTempSilence: {
      _this->_internal_mutable_groupmembertempsilence()->::AcFunDanmu::Im::Cloud::Message::GroupSettingMemberTempSilence::MergeFrom(
          from._internal_groupmembertempsilence());
      break;
    }
    case kGroupExtraDataUpdate: {
      _this->_internal_mutable_groupextradataupdate()->::AcFunDanmu::Im::Cloud::Message::GroupExtraDataUpdate::MergeFrom(
          from._internal_groupextradataupdate());
      break;
    }
    case kGroupHeadUrlUpdate: {
      _this->_internal_mutable_groupheadurlupdate()->::AcFunDanmu::Im::Cloud::Message::GroupHeadUrlUpdate::MergeFrom(
          from._internal_groupheadurlupdate());
      break;
    }
    case kGroupInviteNeedUserAgree: {
      _this->_internal_mutable_groupinviteneeduseragree()->::AcFunDanmu::Im::Cloud::Message::GroupInviteNeedUserAgree::MergeFrom(
          from._internal_groupinviteneeduseragree());
      break;
    }
    case GROUPSETTING_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GroupSettingRequest::CopyFrom(const GroupSettingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupSettingRequest::IsInitialized() const {
  return true;
}

void GroupSettingRequest::InternalSwap(GroupSettingRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.groupid_, lhs_arena,
      &other->_impl_.groupid_, rhs_arena
  );
  swap(_impl_.GroupSetting_, other->_impl_.GroupSetting_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupSettingRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GroupSettingRequest_2eproto_getter, &descriptor_table_GroupSettingRequest_2eproto_once,
      file_level_metadata_GroupSettingRequest_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Message
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AcFunDanmu::Im::Cloud::Message::GroupSettingRequest*
Arena::CreateMaybeMessage< ::AcFunDanmu::Im::Cloud::Message::GroupSettingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::Im::Cloud::Message::GroupSettingRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
