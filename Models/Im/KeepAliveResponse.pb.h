// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KeepAliveResponse.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_KeepAliveResponse_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_KeepAliveResponse_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "AccessPointsConfig.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_KeepAliveResponse_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_KeepAliveResponse_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_KeepAliveResponse_2eproto;
namespace AcFunDanmu {
namespace Im {
namespace Basic {
class KeepAliveResponse;
struct KeepAliveResponseDefaultTypeInternal;
extern KeepAliveResponseDefaultTypeInternal _KeepAliveResponse_default_instance_;
}  // namespace Basic
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::Im::Basic::KeepAliveResponse* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Basic::KeepAliveResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {
namespace Im {
namespace Basic {

// ===================================================================

class KeepAliveResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Basic.KeepAliveResponse) */ {
 public:
  inline KeepAliveResponse() : KeepAliveResponse(nullptr) {}
  ~KeepAliveResponse() override;
  explicit PROTOBUF_CONSTEXPR KeepAliveResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeepAliveResponse(const KeepAliveResponse& from);
  KeepAliveResponse(KeepAliveResponse&& from) noexcept
    : KeepAliveResponse() {
    *this = ::std::move(from);
  }

  inline KeepAliveResponse& operator=(const KeepAliveResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeepAliveResponse& operator=(KeepAliveResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeepAliveResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeepAliveResponse* internal_default_instance() {
    return reinterpret_cast<const KeepAliveResponse*>(
               &_KeepAliveResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KeepAliveResponse& a, KeepAliveResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(KeepAliveResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeepAliveResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KeepAliveResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KeepAliveResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KeepAliveResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KeepAliveResponse& from) {
    KeepAliveResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeepAliveResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Basic.KeepAliveResponse";
  }
  protected:
  explicit KeepAliveResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccessPointsConfigFieldNumber = 1,
    kAccessPointsConfigIpv6FieldNumber = 3,
    kAccessPointsConfigQuicFieldNumber = 6,
    kAccessPointsConfigQuicIpv6FieldNumber = 7,
    kAccessPointsConfigWsFieldNumber = 8,
    kServerMsecFieldNumber = 2,
  };
  // .AcFunDanmu.Im.Basic.AccessPointsConfig accessPointsConfig = 1;
  bool has_accesspointsconfig() const;
  private:
  bool _internal_has_accesspointsconfig() const;
  public:
  void clear_accesspointsconfig();
  const ::AcFunDanmu::Im::Basic::AccessPointsConfig& accesspointsconfig() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Basic::AccessPointsConfig* release_accesspointsconfig();
  ::AcFunDanmu::Im::Basic::AccessPointsConfig* mutable_accesspointsconfig();
  void set_allocated_accesspointsconfig(::AcFunDanmu::Im::Basic::AccessPointsConfig* accesspointsconfig);
  private:
  const ::AcFunDanmu::Im::Basic::AccessPointsConfig& _internal_accesspointsconfig() const;
  ::AcFunDanmu::Im::Basic::AccessPointsConfig* _internal_mutable_accesspointsconfig();
  public:
  void unsafe_arena_set_allocated_accesspointsconfig(
      ::AcFunDanmu::Im::Basic::AccessPointsConfig* accesspointsconfig);
  ::AcFunDanmu::Im::Basic::AccessPointsConfig* unsafe_arena_release_accesspointsconfig();

  // .AcFunDanmu.Im.Basic.AccessPointsConfig accessPointsConfigIpv6 = 3;
  bool has_accesspointsconfigipv6() const;
  private:
  bool _internal_has_accesspointsconfigipv6() const;
  public:
  void clear_accesspointsconfigipv6();
  const ::AcFunDanmu::Im::Basic::AccessPointsConfig& accesspointsconfigipv6() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Basic::AccessPointsConfig* release_accesspointsconfigipv6();
  ::AcFunDanmu::Im::Basic::AccessPointsConfig* mutable_accesspointsconfigipv6();
  void set_allocated_accesspointsconfigipv6(::AcFunDanmu::Im::Basic::AccessPointsConfig* accesspointsconfigipv6);
  private:
  const ::AcFunDanmu::Im::Basic::AccessPointsConfig& _internal_accesspointsconfigipv6() const;
  ::AcFunDanmu::Im::Basic::AccessPointsConfig* _internal_mutable_accesspointsconfigipv6();
  public:
  void unsafe_arena_set_allocated_accesspointsconfigipv6(
      ::AcFunDanmu::Im::Basic::AccessPointsConfig* accesspointsconfigipv6);
  ::AcFunDanmu::Im::Basic::AccessPointsConfig* unsafe_arena_release_accesspointsconfigipv6();

  // .AcFunDanmu.Im.Basic.AccessPointsConfig accessPointsConfigQuic = 6;
  bool has_accesspointsconfigquic() const;
  private:
  bool _internal_has_accesspointsconfigquic() const;
  public:
  void clear_accesspointsconfigquic();
  const ::AcFunDanmu::Im::Basic::AccessPointsConfig& accesspointsconfigquic() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Basic::AccessPointsConfig* release_accesspointsconfigquic();
  ::AcFunDanmu::Im::Basic::AccessPointsConfig* mutable_accesspointsconfigquic();
  void set_allocated_accesspointsconfigquic(::AcFunDanmu::Im::Basic::AccessPointsConfig* accesspointsconfigquic);
  private:
  const ::AcFunDanmu::Im::Basic::AccessPointsConfig& _internal_accesspointsconfigquic() const;
  ::AcFunDanmu::Im::Basic::AccessPointsConfig* _internal_mutable_accesspointsconfigquic();
  public:
  void unsafe_arena_set_allocated_accesspointsconfigquic(
      ::AcFunDanmu::Im::Basic::AccessPointsConfig* accesspointsconfigquic);
  ::AcFunDanmu::Im::Basic::AccessPointsConfig* unsafe_arena_release_accesspointsconfigquic();

  // .AcFunDanmu.Im.Basic.AccessPointsConfig accessPointsConfigQuicIpv6 = 7;
  bool has_accesspointsconfigquicipv6() const;
  private:
  bool _internal_has_accesspointsconfigquicipv6() const;
  public:
  void clear_accesspointsconfigquicipv6();
  const ::AcFunDanmu::Im::Basic::AccessPointsConfig& accesspointsconfigquicipv6() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Basic::AccessPointsConfig* release_accesspointsconfigquicipv6();
  ::AcFunDanmu::Im::Basic::AccessPointsConfig* mutable_accesspointsconfigquicipv6();
  void set_allocated_accesspointsconfigquicipv6(::AcFunDanmu::Im::Basic::AccessPointsConfig* accesspointsconfigquicipv6);
  private:
  const ::AcFunDanmu::Im::Basic::AccessPointsConfig& _internal_accesspointsconfigquicipv6() const;
  ::AcFunDanmu::Im::Basic::AccessPointsConfig* _internal_mutable_accesspointsconfigquicipv6();
  public:
  void unsafe_arena_set_allocated_accesspointsconfigquicipv6(
      ::AcFunDanmu::Im::Basic::AccessPointsConfig* accesspointsconfigquicipv6);
  ::AcFunDanmu::Im::Basic::AccessPointsConfig* unsafe_arena_release_accesspointsconfigquicipv6();

  // .AcFunDanmu.Im.Basic.AccessPointsConfig accessPointsConfigWs = 8;
  bool has_accesspointsconfigws() const;
  private:
  bool _internal_has_accesspointsconfigws() const;
  public:
  void clear_accesspointsconfigws();
  const ::AcFunDanmu::Im::Basic::AccessPointsConfig& accesspointsconfigws() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Basic::AccessPointsConfig* release_accesspointsconfigws();
  ::AcFunDanmu::Im::Basic::AccessPointsConfig* mutable_accesspointsconfigws();
  void set_allocated_accesspointsconfigws(::AcFunDanmu::Im::Basic::AccessPointsConfig* accesspointsconfigws);
  private:
  const ::AcFunDanmu::Im::Basic::AccessPointsConfig& _internal_accesspointsconfigws() const;
  ::AcFunDanmu::Im::Basic::AccessPointsConfig* _internal_mutable_accesspointsconfigws();
  public:
  void unsafe_arena_set_allocated_accesspointsconfigws(
      ::AcFunDanmu::Im::Basic::AccessPointsConfig* accesspointsconfigws);
  ::AcFunDanmu::Im::Basic::AccessPointsConfig* unsafe_arena_release_accesspointsconfigws();

  // int64 serverMsec = 2;
  void clear_servermsec();
  int64_t servermsec() const;
  void set_servermsec(int64_t value);
  private:
  int64_t _internal_servermsec() const;
  void _internal_set_servermsec(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Basic.KeepAliveResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::AcFunDanmu::Im::Basic::AccessPointsConfig* accesspointsconfig_;
    ::AcFunDanmu::Im::Basic::AccessPointsConfig* accesspointsconfigipv6_;
    ::AcFunDanmu::Im::Basic::AccessPointsConfig* accesspointsconfigquic_;
    ::AcFunDanmu::Im::Basic::AccessPointsConfig* accesspointsconfigquicipv6_;
    ::AcFunDanmu::Im::Basic::AccessPointsConfig* accesspointsconfigws_;
    int64_t servermsec_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KeepAliveResponse_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KeepAliveResponse

// .AcFunDanmu.Im.Basic.AccessPointsConfig accessPointsConfig = 1;
inline bool KeepAliveResponse::_internal_has_accesspointsconfig() const {
  return this != internal_default_instance() && _impl_.accesspointsconfig_ != nullptr;
}
inline bool KeepAliveResponse::has_accesspointsconfig() const {
  return _internal_has_accesspointsconfig();
}
inline const ::AcFunDanmu::Im::Basic::AccessPointsConfig& KeepAliveResponse::_internal_accesspointsconfig() const {
  const ::AcFunDanmu::Im::Basic::AccessPointsConfig* p = _impl_.accesspointsconfig_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic::AccessPointsConfig&>(
      ::AcFunDanmu::Im::Basic::_AccessPointsConfig_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic::AccessPointsConfig& KeepAliveResponse::accesspointsconfig() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.KeepAliveResponse.accessPointsConfig)
  return _internal_accesspointsconfig();
}
inline void KeepAliveResponse::unsafe_arena_set_allocated_accesspointsconfig(
    ::AcFunDanmu::Im::Basic::AccessPointsConfig* accesspointsconfig) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.accesspointsconfig_);
  }
  _impl_.accesspointsconfig_ = accesspointsconfig;
  if (accesspointsconfig) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Basic.KeepAliveResponse.accessPointsConfig)
}
inline ::AcFunDanmu::Im::Basic::AccessPointsConfig* KeepAliveResponse::release_accesspointsconfig() {
  
  ::AcFunDanmu::Im::Basic::AccessPointsConfig* temp = _impl_.accesspointsconfig_;
  _impl_.accesspointsconfig_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AcFunDanmu::Im::Basic::AccessPointsConfig* KeepAliveResponse::unsafe_arena_release_accesspointsconfig() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.KeepAliveResponse.accessPointsConfig)
  
  ::AcFunDanmu::Im::Basic::AccessPointsConfig* temp = _impl_.accesspointsconfig_;
  _impl_.accesspointsconfig_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic::AccessPointsConfig* KeepAliveResponse::_internal_mutable_accesspointsconfig() {
  
  if (_impl_.accesspointsconfig_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic::AccessPointsConfig>(GetArenaForAllocation());
    _impl_.accesspointsconfig_ = p;
  }
  return _impl_.accesspointsconfig_;
}
inline ::AcFunDanmu::Im::Basic::AccessPointsConfig* KeepAliveResponse::mutable_accesspointsconfig() {
  ::AcFunDanmu::Im::Basic::AccessPointsConfig* _msg = _internal_mutable_accesspointsconfig();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.KeepAliveResponse.accessPointsConfig)
  return _msg;
}
inline void KeepAliveResponse::set_allocated_accesspointsconfig(::AcFunDanmu::Im::Basic::AccessPointsConfig* accesspointsconfig) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.accesspointsconfig_);
  }
  if (accesspointsconfig) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(accesspointsconfig));
    if (message_arena != submessage_arena) {
      accesspointsconfig = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accesspointsconfig, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.accesspointsconfig_ = accesspointsconfig;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.KeepAliveResponse.accessPointsConfig)
}

// int64 serverMsec = 2;
inline void KeepAliveResponse::clear_servermsec() {
  _impl_.servermsec_ = int64_t{0};
}
inline int64_t KeepAliveResponse::_internal_servermsec() const {
  return _impl_.servermsec_;
}
inline int64_t KeepAliveResponse::servermsec() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.KeepAliveResponse.serverMsec)
  return _internal_servermsec();
}
inline void KeepAliveResponse::_internal_set_servermsec(int64_t value) {
  
  _impl_.servermsec_ = value;
}
inline void KeepAliveResponse::set_servermsec(int64_t value) {
  _internal_set_servermsec(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.KeepAliveResponse.serverMsec)
}

// .AcFunDanmu.Im.Basic.AccessPointsConfig accessPointsConfigIpv6 = 3;
inline bool KeepAliveResponse::_internal_has_accesspointsconfigipv6() const {
  return this != internal_default_instance() && _impl_.accesspointsconfigipv6_ != nullptr;
}
inline bool KeepAliveResponse::has_accesspointsconfigipv6() const {
  return _internal_has_accesspointsconfigipv6();
}
inline const ::AcFunDanmu::Im::Basic::AccessPointsConfig& KeepAliveResponse::_internal_accesspointsconfigipv6() const {
  const ::AcFunDanmu::Im::Basic::AccessPointsConfig* p = _impl_.accesspointsconfigipv6_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic::AccessPointsConfig&>(
      ::AcFunDanmu::Im::Basic::_AccessPointsConfig_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic::AccessPointsConfig& KeepAliveResponse::accesspointsconfigipv6() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.KeepAliveResponse.accessPointsConfigIpv6)
  return _internal_accesspointsconfigipv6();
}
inline void KeepAliveResponse::unsafe_arena_set_allocated_accesspointsconfigipv6(
    ::AcFunDanmu::Im::Basic::AccessPointsConfig* accesspointsconfigipv6) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.accesspointsconfigipv6_);
  }
  _impl_.accesspointsconfigipv6_ = accesspointsconfigipv6;
  if (accesspointsconfigipv6) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Basic.KeepAliveResponse.accessPointsConfigIpv6)
}
inline ::AcFunDanmu::Im::Basic::AccessPointsConfig* KeepAliveResponse::release_accesspointsconfigipv6() {
  
  ::AcFunDanmu::Im::Basic::AccessPointsConfig* temp = _impl_.accesspointsconfigipv6_;
  _impl_.accesspointsconfigipv6_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AcFunDanmu::Im::Basic::AccessPointsConfig* KeepAliveResponse::unsafe_arena_release_accesspointsconfigipv6() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.KeepAliveResponse.accessPointsConfigIpv6)
  
  ::AcFunDanmu::Im::Basic::AccessPointsConfig* temp = _impl_.accesspointsconfigipv6_;
  _impl_.accesspointsconfigipv6_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic::AccessPointsConfig* KeepAliveResponse::_internal_mutable_accesspointsconfigipv6() {
  
  if (_impl_.accesspointsconfigipv6_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic::AccessPointsConfig>(GetArenaForAllocation());
    _impl_.accesspointsconfigipv6_ = p;
  }
  return _impl_.accesspointsconfigipv6_;
}
inline ::AcFunDanmu::Im::Basic::AccessPointsConfig* KeepAliveResponse::mutable_accesspointsconfigipv6() {
  ::AcFunDanmu::Im::Basic::AccessPointsConfig* _msg = _internal_mutable_accesspointsconfigipv6();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.KeepAliveResponse.accessPointsConfigIpv6)
  return _msg;
}
inline void KeepAliveResponse::set_allocated_accesspointsconfigipv6(::AcFunDanmu::Im::Basic::AccessPointsConfig* accesspointsconfigipv6) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.accesspointsconfigipv6_);
  }
  if (accesspointsconfigipv6) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(accesspointsconfigipv6));
    if (message_arena != submessage_arena) {
      accesspointsconfigipv6 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accesspointsconfigipv6, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.accesspointsconfigipv6_ = accesspointsconfigipv6;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.KeepAliveResponse.accessPointsConfigIpv6)
}

// .AcFunDanmu.Im.Basic.AccessPointsConfig accessPointsConfigQuic = 6;
inline bool KeepAliveResponse::_internal_has_accesspointsconfigquic() const {
  return this != internal_default_instance() && _impl_.accesspointsconfigquic_ != nullptr;
}
inline bool KeepAliveResponse::has_accesspointsconfigquic() const {
  return _internal_has_accesspointsconfigquic();
}
inline const ::AcFunDanmu::Im::Basic::AccessPointsConfig& KeepAliveResponse::_internal_accesspointsconfigquic() const {
  const ::AcFunDanmu::Im::Basic::AccessPointsConfig* p = _impl_.accesspointsconfigquic_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic::AccessPointsConfig&>(
      ::AcFunDanmu::Im::Basic::_AccessPointsConfig_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic::AccessPointsConfig& KeepAliveResponse::accesspointsconfigquic() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.KeepAliveResponse.accessPointsConfigQuic)
  return _internal_accesspointsconfigquic();
}
inline void KeepAliveResponse::unsafe_arena_set_allocated_accesspointsconfigquic(
    ::AcFunDanmu::Im::Basic::AccessPointsConfig* accesspointsconfigquic) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.accesspointsconfigquic_);
  }
  _impl_.accesspointsconfigquic_ = accesspointsconfigquic;
  if (accesspointsconfigquic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Basic.KeepAliveResponse.accessPointsConfigQuic)
}
inline ::AcFunDanmu::Im::Basic::AccessPointsConfig* KeepAliveResponse::release_accesspointsconfigquic() {
  
  ::AcFunDanmu::Im::Basic::AccessPointsConfig* temp = _impl_.accesspointsconfigquic_;
  _impl_.accesspointsconfigquic_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AcFunDanmu::Im::Basic::AccessPointsConfig* KeepAliveResponse::unsafe_arena_release_accesspointsconfigquic() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.KeepAliveResponse.accessPointsConfigQuic)
  
  ::AcFunDanmu::Im::Basic::AccessPointsConfig* temp = _impl_.accesspointsconfigquic_;
  _impl_.accesspointsconfigquic_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic::AccessPointsConfig* KeepAliveResponse::_internal_mutable_accesspointsconfigquic() {
  
  if (_impl_.accesspointsconfigquic_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic::AccessPointsConfig>(GetArenaForAllocation());
    _impl_.accesspointsconfigquic_ = p;
  }
  return _impl_.accesspointsconfigquic_;
}
inline ::AcFunDanmu::Im::Basic::AccessPointsConfig* KeepAliveResponse::mutable_accesspointsconfigquic() {
  ::AcFunDanmu::Im::Basic::AccessPointsConfig* _msg = _internal_mutable_accesspointsconfigquic();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.KeepAliveResponse.accessPointsConfigQuic)
  return _msg;
}
inline void KeepAliveResponse::set_allocated_accesspointsconfigquic(::AcFunDanmu::Im::Basic::AccessPointsConfig* accesspointsconfigquic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.accesspointsconfigquic_);
  }
  if (accesspointsconfigquic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(accesspointsconfigquic));
    if (message_arena != submessage_arena) {
      accesspointsconfigquic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accesspointsconfigquic, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.accesspointsconfigquic_ = accesspointsconfigquic;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.KeepAliveResponse.accessPointsConfigQuic)
}

// .AcFunDanmu.Im.Basic.AccessPointsConfig accessPointsConfigQuicIpv6 = 7;
inline bool KeepAliveResponse::_internal_has_accesspointsconfigquicipv6() const {
  return this != internal_default_instance() && _impl_.accesspointsconfigquicipv6_ != nullptr;
}
inline bool KeepAliveResponse::has_accesspointsconfigquicipv6() const {
  return _internal_has_accesspointsconfigquicipv6();
}
inline const ::AcFunDanmu::Im::Basic::AccessPointsConfig& KeepAliveResponse::_internal_accesspointsconfigquicipv6() const {
  const ::AcFunDanmu::Im::Basic::AccessPointsConfig* p = _impl_.accesspointsconfigquicipv6_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic::AccessPointsConfig&>(
      ::AcFunDanmu::Im::Basic::_AccessPointsConfig_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic::AccessPointsConfig& KeepAliveResponse::accesspointsconfigquicipv6() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.KeepAliveResponse.accessPointsConfigQuicIpv6)
  return _internal_accesspointsconfigquicipv6();
}
inline void KeepAliveResponse::unsafe_arena_set_allocated_accesspointsconfigquicipv6(
    ::AcFunDanmu::Im::Basic::AccessPointsConfig* accesspointsconfigquicipv6) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.accesspointsconfigquicipv6_);
  }
  _impl_.accesspointsconfigquicipv6_ = accesspointsconfigquicipv6;
  if (accesspointsconfigquicipv6) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Basic.KeepAliveResponse.accessPointsConfigQuicIpv6)
}
inline ::AcFunDanmu::Im::Basic::AccessPointsConfig* KeepAliveResponse::release_accesspointsconfigquicipv6() {
  
  ::AcFunDanmu::Im::Basic::AccessPointsConfig* temp = _impl_.accesspointsconfigquicipv6_;
  _impl_.accesspointsconfigquicipv6_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AcFunDanmu::Im::Basic::AccessPointsConfig* KeepAliveResponse::unsafe_arena_release_accesspointsconfigquicipv6() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.KeepAliveResponse.accessPointsConfigQuicIpv6)
  
  ::AcFunDanmu::Im::Basic::AccessPointsConfig* temp = _impl_.accesspointsconfigquicipv6_;
  _impl_.accesspointsconfigquicipv6_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic::AccessPointsConfig* KeepAliveResponse::_internal_mutable_accesspointsconfigquicipv6() {
  
  if (_impl_.accesspointsconfigquicipv6_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic::AccessPointsConfig>(GetArenaForAllocation());
    _impl_.accesspointsconfigquicipv6_ = p;
  }
  return _impl_.accesspointsconfigquicipv6_;
}
inline ::AcFunDanmu::Im::Basic::AccessPointsConfig* KeepAliveResponse::mutable_accesspointsconfigquicipv6() {
  ::AcFunDanmu::Im::Basic::AccessPointsConfig* _msg = _internal_mutable_accesspointsconfigquicipv6();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.KeepAliveResponse.accessPointsConfigQuicIpv6)
  return _msg;
}
inline void KeepAliveResponse::set_allocated_accesspointsconfigquicipv6(::AcFunDanmu::Im::Basic::AccessPointsConfig* accesspointsconfigquicipv6) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.accesspointsconfigquicipv6_);
  }
  if (accesspointsconfigquicipv6) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(accesspointsconfigquicipv6));
    if (message_arena != submessage_arena) {
      accesspointsconfigquicipv6 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accesspointsconfigquicipv6, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.accesspointsconfigquicipv6_ = accesspointsconfigquicipv6;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.KeepAliveResponse.accessPointsConfigQuicIpv6)
}

// .AcFunDanmu.Im.Basic.AccessPointsConfig accessPointsConfigWs = 8;
inline bool KeepAliveResponse::_internal_has_accesspointsconfigws() const {
  return this != internal_default_instance() && _impl_.accesspointsconfigws_ != nullptr;
}
inline bool KeepAliveResponse::has_accesspointsconfigws() const {
  return _internal_has_accesspointsconfigws();
}
inline const ::AcFunDanmu::Im::Basic::AccessPointsConfig& KeepAliveResponse::_internal_accesspointsconfigws() const {
  const ::AcFunDanmu::Im::Basic::AccessPointsConfig* p = _impl_.accesspointsconfigws_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic::AccessPointsConfig&>(
      ::AcFunDanmu::Im::Basic::_AccessPointsConfig_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic::AccessPointsConfig& KeepAliveResponse::accesspointsconfigws() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.KeepAliveResponse.accessPointsConfigWs)
  return _internal_accesspointsconfigws();
}
inline void KeepAliveResponse::unsafe_arena_set_allocated_accesspointsconfigws(
    ::AcFunDanmu::Im::Basic::AccessPointsConfig* accesspointsconfigws) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.accesspointsconfigws_);
  }
  _impl_.accesspointsconfigws_ = accesspointsconfigws;
  if (accesspointsconfigws) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Basic.KeepAliveResponse.accessPointsConfigWs)
}
inline ::AcFunDanmu::Im::Basic::AccessPointsConfig* KeepAliveResponse::release_accesspointsconfigws() {
  
  ::AcFunDanmu::Im::Basic::AccessPointsConfig* temp = _impl_.accesspointsconfigws_;
  _impl_.accesspointsconfigws_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AcFunDanmu::Im::Basic::AccessPointsConfig* KeepAliveResponse::unsafe_arena_release_accesspointsconfigws() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.KeepAliveResponse.accessPointsConfigWs)
  
  ::AcFunDanmu::Im::Basic::AccessPointsConfig* temp = _impl_.accesspointsconfigws_;
  _impl_.accesspointsconfigws_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic::AccessPointsConfig* KeepAliveResponse::_internal_mutable_accesspointsconfigws() {
  
  if (_impl_.accesspointsconfigws_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic::AccessPointsConfig>(GetArenaForAllocation());
    _impl_.accesspointsconfigws_ = p;
  }
  return _impl_.accesspointsconfigws_;
}
inline ::AcFunDanmu::Im::Basic::AccessPointsConfig* KeepAliveResponse::mutable_accesspointsconfigws() {
  ::AcFunDanmu::Im::Basic::AccessPointsConfig* _msg = _internal_mutable_accesspointsconfigws();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.KeepAliveResponse.accessPointsConfigWs)
  return _msg;
}
inline void KeepAliveResponse::set_allocated_accesspointsconfigws(::AcFunDanmu::Im::Basic::AccessPointsConfig* accesspointsconfigws) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.accesspointsconfigws_);
  }
  if (accesspointsconfigws) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(accesspointsconfigws));
    if (message_arena != submessage_arena) {
      accesspointsconfigws = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accesspointsconfigws, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.accesspointsconfigws_ = accesspointsconfigws;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.KeepAliveResponse.accessPointsConfigWs)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Basic
}  // namespace Im
}  // namespace AcFunDanmu

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_KeepAliveResponse_2eproto
