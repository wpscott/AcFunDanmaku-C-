// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GroupBlacklistRecord.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_GroupBlacklistRecord_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_GroupBlacklistRecord_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "User.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_GroupBlacklistRecord_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_GroupBlacklistRecord_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_GroupBlacklistRecord_2eproto;
namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Message {
class GroupBlacklistRecord;
struct GroupBlacklistRecordDefaultTypeInternal;
extern GroupBlacklistRecordDefaultTypeInternal _GroupBlacklistRecord_default_instance_;
}  // namespace Message
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::Im::Cloud::Message::GroupBlacklistRecord* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud::Message::GroupBlacklistRecord>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Message {

// ===================================================================

class GroupBlacklistRecord final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.GroupBlacklistRecord) */ {
 public:
  inline GroupBlacklistRecord() : GroupBlacklistRecord(nullptr) {}
  ~GroupBlacklistRecord() override;
  explicit PROTOBUF_CONSTEXPR GroupBlacklistRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupBlacklistRecord(const GroupBlacklistRecord& from);
  GroupBlacklistRecord(GroupBlacklistRecord&& from) noexcept
    : GroupBlacklistRecord() {
    *this = ::std::move(from);
  }

  inline GroupBlacklistRecord& operator=(const GroupBlacklistRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupBlacklistRecord& operator=(GroupBlacklistRecord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupBlacklistRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupBlacklistRecord* internal_default_instance() {
    return reinterpret_cast<const GroupBlacklistRecord*>(
               &_GroupBlacklistRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GroupBlacklistRecord& a, GroupBlacklistRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupBlacklistRecord* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupBlacklistRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupBlacklistRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupBlacklistRecord>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupBlacklistRecord& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupBlacklistRecord& from) {
    GroupBlacklistRecord::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupBlacklistRecord* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.GroupBlacklistRecord";
  }
  protected:
  explicit GroupBlacklistRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 4,
    kOperatorFieldNumber = 2,
    kTargetFieldNumber = 3,
    kIdFieldNumber = 1,
    kCreateTimeFieldNumber = 6,
    kUpdateTimeFieldNumber = 7,
    kSubBizIdFieldNumber = 5,
  };
  // string groupId = 4;
  void clear_groupid();
  const std::string& groupid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_groupid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_groupid();
  PROTOBUF_NODISCARD std::string* release_groupid();
  void set_allocated_groupid(std::string* groupid);
  private:
  const std::string& _internal_groupid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_groupid(const std::string& value);
  std::string* _internal_mutable_groupid();
  public:

  // .AcFunDanmu.Im.Basic.User operator = 2;
  bool has_operator_() const;
  private:
  bool _internal_has_operator_() const;
  public:
  void clear_operator_();
  const ::AcFunDanmu::Im::Basic::User& operator_() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Basic::User* release_operator_();
  ::AcFunDanmu::Im::Basic::User* mutable_operator_();
  void set_allocated_operator_(::AcFunDanmu::Im::Basic::User* operator_);
  private:
  const ::AcFunDanmu::Im::Basic::User& _internal_operator_() const;
  ::AcFunDanmu::Im::Basic::User* _internal_mutable_operator_();
  public:
  void unsafe_arena_set_allocated_operator_(
      ::AcFunDanmu::Im::Basic::User* operator_);
  ::AcFunDanmu::Im::Basic::User* unsafe_arena_release_operator_();

  // .AcFunDanmu.Im.Basic.User target = 3;
  bool has_target() const;
  private:
  bool _internal_has_target() const;
  public:
  void clear_target();
  const ::AcFunDanmu::Im::Basic::User& target() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Basic::User* release_target();
  ::AcFunDanmu::Im::Basic::User* mutable_target();
  void set_allocated_target(::AcFunDanmu::Im::Basic::User* target);
  private:
  const ::AcFunDanmu::Im::Basic::User& _internal_target() const;
  ::AcFunDanmu::Im::Basic::User* _internal_mutable_target();
  public:
  void unsafe_arena_set_allocated_target(
      ::AcFunDanmu::Im::Basic::User* target);
  ::AcFunDanmu::Im::Basic::User* unsafe_arena_release_target();

  // int64 id = 1;
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // int64 createTime = 6;
  void clear_createtime();
  int64_t createtime() const;
  void set_createtime(int64_t value);
  private:
  int64_t _internal_createtime() const;
  void _internal_set_createtime(int64_t value);
  public:

  // int64 updateTime = 7;
  void clear_updatetime();
  int64_t updatetime() const;
  void set_updatetime(int64_t value);
  private:
  int64_t _internal_updatetime() const;
  void _internal_set_updatetime(int64_t value);
  public:

  // int32 subBizId = 5;
  void clear_subbizid();
  int32_t subbizid() const;
  void set_subbizid(int32_t value);
  private:
  int32_t _internal_subbizid() const;
  void _internal_set_subbizid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.GroupBlacklistRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupid_;
    ::AcFunDanmu::Im::Basic::User* operator__;
    ::AcFunDanmu::Im::Basic::User* target_;
    int64_t id_;
    int64_t createtime_;
    int64_t updatetime_;
    int32_t subbizid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GroupBlacklistRecord_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GroupBlacklistRecord

// int64 id = 1;
inline void GroupBlacklistRecord::clear_id() {
  _impl_.id_ = int64_t{0};
}
inline int64_t GroupBlacklistRecord::_internal_id() const {
  return _impl_.id_;
}
inline int64_t GroupBlacklistRecord::id() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupBlacklistRecord.id)
  return _internal_id();
}
inline void GroupBlacklistRecord::_internal_set_id(int64_t value) {
  
  _impl_.id_ = value;
}
inline void GroupBlacklistRecord::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupBlacklistRecord.id)
}

// .AcFunDanmu.Im.Basic.User operator = 2;
inline bool GroupBlacklistRecord::_internal_has_operator_() const {
  return this != internal_default_instance() && _impl_.operator__ != nullptr;
}
inline bool GroupBlacklistRecord::has_operator_() const {
  return _internal_has_operator_();
}
inline const ::AcFunDanmu::Im::Basic::User& GroupBlacklistRecord::_internal_operator_() const {
  const ::AcFunDanmu::Im::Basic::User* p = _impl_.operator__;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic::User&>(
      ::AcFunDanmu::Im::Basic::_User_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic::User& GroupBlacklistRecord::operator_() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupBlacklistRecord.operator)
  return _internal_operator_();
}
inline void GroupBlacklistRecord::unsafe_arena_set_allocated_operator_(
    ::AcFunDanmu::Im::Basic::User* operator_) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.operator__);
  }
  _impl_.operator__ = operator_;
  if (operator_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupBlacklistRecord.operator)
}
inline ::AcFunDanmu::Im::Basic::User* GroupBlacklistRecord::release_operator_() {
  
  ::AcFunDanmu::Im::Basic::User* temp = _impl_.operator__;
  _impl_.operator__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AcFunDanmu::Im::Basic::User* GroupBlacklistRecord::unsafe_arena_release_operator_() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupBlacklistRecord.operator)
  
  ::AcFunDanmu::Im::Basic::User* temp = _impl_.operator__;
  _impl_.operator__ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic::User* GroupBlacklistRecord::_internal_mutable_operator_() {
  
  if (_impl_.operator__ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic::User>(GetArenaForAllocation());
    _impl_.operator__ = p;
  }
  return _impl_.operator__;
}
inline ::AcFunDanmu::Im::Basic::User* GroupBlacklistRecord::mutable_operator_() {
  ::AcFunDanmu::Im::Basic::User* _msg = _internal_mutable_operator_();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupBlacklistRecord.operator)
  return _msg;
}
inline void GroupBlacklistRecord::set_allocated_operator_(::AcFunDanmu::Im::Basic::User* operator_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.operator__);
  }
  if (operator_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(operator_));
    if (message_arena != submessage_arena) {
      operator_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, operator_, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.operator__ = operator_;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupBlacklistRecord.operator)
}

// .AcFunDanmu.Im.Basic.User target = 3;
inline bool GroupBlacklistRecord::_internal_has_target() const {
  return this != internal_default_instance() && _impl_.target_ != nullptr;
}
inline bool GroupBlacklistRecord::has_target() const {
  return _internal_has_target();
}
inline const ::AcFunDanmu::Im::Basic::User& GroupBlacklistRecord::_internal_target() const {
  const ::AcFunDanmu::Im::Basic::User* p = _impl_.target_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic::User&>(
      ::AcFunDanmu::Im::Basic::_User_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic::User& GroupBlacklistRecord::target() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupBlacklistRecord.target)
  return _internal_target();
}
inline void GroupBlacklistRecord::unsafe_arena_set_allocated_target(
    ::AcFunDanmu::Im::Basic::User* target) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.target_);
  }
  _impl_.target_ = target;
  if (target) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupBlacklistRecord.target)
}
inline ::AcFunDanmu::Im::Basic::User* GroupBlacklistRecord::release_target() {
  
  ::AcFunDanmu::Im::Basic::User* temp = _impl_.target_;
  _impl_.target_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AcFunDanmu::Im::Basic::User* GroupBlacklistRecord::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupBlacklistRecord.target)
  
  ::AcFunDanmu::Im::Basic::User* temp = _impl_.target_;
  _impl_.target_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic::User* GroupBlacklistRecord::_internal_mutable_target() {
  
  if (_impl_.target_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic::User>(GetArenaForAllocation());
    _impl_.target_ = p;
  }
  return _impl_.target_;
}
inline ::AcFunDanmu::Im::Basic::User* GroupBlacklistRecord::mutable_target() {
  ::AcFunDanmu::Im::Basic::User* _msg = _internal_mutable_target();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupBlacklistRecord.target)
  return _msg;
}
inline void GroupBlacklistRecord::set_allocated_target(::AcFunDanmu::Im::Basic::User* target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.target_);
  }
  if (target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target));
    if (message_arena != submessage_arena) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.target_ = target;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupBlacklistRecord.target)
}

// string groupId = 4;
inline void GroupBlacklistRecord::clear_groupid() {
  _impl_.groupid_.ClearToEmpty();
}
inline const std::string& GroupBlacklistRecord::groupid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupBlacklistRecord.groupId)
  return _internal_groupid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupBlacklistRecord::set_groupid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.groupid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupBlacklistRecord.groupId)
}
inline std::string* GroupBlacklistRecord::mutable_groupid() {
  std::string* _s = _internal_mutable_groupid();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupBlacklistRecord.groupId)
  return _s;
}
inline const std::string& GroupBlacklistRecord::_internal_groupid() const {
  return _impl_.groupid_.Get();
}
inline void GroupBlacklistRecord::_internal_set_groupid(const std::string& value) {
  
  _impl_.groupid_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupBlacklistRecord::_internal_mutable_groupid() {
  
  return _impl_.groupid_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupBlacklistRecord::release_groupid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupBlacklistRecord.groupId)
  return _impl_.groupid_.Release();
}
inline void GroupBlacklistRecord::set_allocated_groupid(std::string* groupid) {
  if (groupid != nullptr) {
    
  } else {
    
  }
  _impl_.groupid_.SetAllocated(groupid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.groupid_.IsDefault()) {
    _impl_.groupid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupBlacklistRecord.groupId)
}

// int32 subBizId = 5;
inline void GroupBlacklistRecord::clear_subbizid() {
  _impl_.subbizid_ = 0;
}
inline int32_t GroupBlacklistRecord::_internal_subbizid() const {
  return _impl_.subbizid_;
}
inline int32_t GroupBlacklistRecord::subbizid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupBlacklistRecord.subBizId)
  return _internal_subbizid();
}
inline void GroupBlacklistRecord::_internal_set_subbizid(int32_t value) {
  
  _impl_.subbizid_ = value;
}
inline void GroupBlacklistRecord::set_subbizid(int32_t value) {
  _internal_set_subbizid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupBlacklistRecord.subBizId)
}

// int64 createTime = 6;
inline void GroupBlacklistRecord::clear_createtime() {
  _impl_.createtime_ = int64_t{0};
}
inline int64_t GroupBlacklistRecord::_internal_createtime() const {
  return _impl_.createtime_;
}
inline int64_t GroupBlacklistRecord::createtime() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupBlacklistRecord.createTime)
  return _internal_createtime();
}
inline void GroupBlacklistRecord::_internal_set_createtime(int64_t value) {
  
  _impl_.createtime_ = value;
}
inline void GroupBlacklistRecord::set_createtime(int64_t value) {
  _internal_set_createtime(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupBlacklistRecord.createTime)
}

// int64 updateTime = 7;
inline void GroupBlacklistRecord::clear_updatetime() {
  _impl_.updatetime_ = int64_t{0};
}
inline int64_t GroupBlacklistRecord::_internal_updatetime() const {
  return _impl_.updatetime_;
}
inline int64_t GroupBlacklistRecord::updatetime() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupBlacklistRecord.updateTime)
  return _internal_updatetime();
}
inline void GroupBlacklistRecord::_internal_set_updatetime(int64_t value) {
  
  _impl_.updatetime_ = value;
}
inline void GroupBlacklistRecord::set_updatetime(int64_t value) {
  _internal_set_updatetime(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupBlacklistRecord.updateTime)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Message
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_GroupBlacklistRecord_2eproto
