// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserLoginDeviceInfo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_UserLoginDeviceInfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_UserLoginDeviceInfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_UserLoginDeviceInfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_UserLoginDeviceInfo_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_UserLoginDeviceInfo_2eproto;
namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Profile {
class UserLoginDeviceInfo;
struct UserLoginDeviceInfoDefaultTypeInternal;
extern UserLoginDeviceInfoDefaultTypeInternal _UserLoginDeviceInfo_default_instance_;
}  // namespace Profile
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::Im::Cloud::Profile::UserLoginDeviceInfo* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud::Profile::UserLoginDeviceInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Profile {

// ===================================================================

class UserLoginDeviceInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Profile.UserLoginDeviceInfo) */ {
 public:
  inline UserLoginDeviceInfo() : UserLoginDeviceInfo(nullptr) {}
  ~UserLoginDeviceInfo() override;
  explicit PROTOBUF_CONSTEXPR UserLoginDeviceInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserLoginDeviceInfo(const UserLoginDeviceInfo& from);
  UserLoginDeviceInfo(UserLoginDeviceInfo&& from) noexcept
    : UserLoginDeviceInfo() {
    *this = ::std::move(from);
  }

  inline UserLoginDeviceInfo& operator=(const UserLoginDeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserLoginDeviceInfo& operator=(UserLoginDeviceInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserLoginDeviceInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserLoginDeviceInfo* internal_default_instance() {
    return reinterpret_cast<const UserLoginDeviceInfo*>(
               &_UserLoginDeviceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserLoginDeviceInfo& a, UserLoginDeviceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UserLoginDeviceInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserLoginDeviceInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserLoginDeviceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserLoginDeviceInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserLoginDeviceInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserLoginDeviceInfo& from) {
    UserLoginDeviceInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserLoginDeviceInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Profile.UserLoginDeviceInfo";
  }
  protected:
  explicit UserLoginDeviceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 1,
    kDeviceNameFieldNumber = 2,
    kKpfFieldNumber = 3,
    kLastOnlineTimeFieldNumber = 4,
    kBizStatusFieldNumber = 5,
  };
  // string deviceId = 1;
  void clear_deviceid();
  const std::string& deviceid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_deviceid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_deviceid();
  PROTOBUF_NODISCARD std::string* release_deviceid();
  void set_allocated_deviceid(std::string* deviceid);
  private:
  const std::string& _internal_deviceid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deviceid(const std::string& value);
  std::string* _internal_mutable_deviceid();
  public:

  // string deviceName = 2;
  void clear_devicename();
  const std::string& devicename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_devicename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_devicename();
  PROTOBUF_NODISCARD std::string* release_devicename();
  void set_allocated_devicename(std::string* devicename);
  private:
  const std::string& _internal_devicename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_devicename(const std::string& value);
  std::string* _internal_mutable_devicename();
  public:

  // string kpf = 3;
  void clear_kpf();
  const std::string& kpf() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_kpf(ArgT0&& arg0, ArgT... args);
  std::string* mutable_kpf();
  PROTOBUF_NODISCARD std::string* release_kpf();
  void set_allocated_kpf(std::string* kpf);
  private:
  const std::string& _internal_kpf() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_kpf(const std::string& value);
  std::string* _internal_mutable_kpf();
  public:

  // int64 lastOnlineTime = 4;
  void clear_lastonlinetime();
  int64_t lastonlinetime() const;
  void set_lastonlinetime(int64_t value);
  private:
  int64_t _internal_lastonlinetime() const;
  void _internal_set_lastonlinetime(int64_t value);
  public:

  // int32 bizStatus = 5;
  void clear_bizstatus();
  int32_t bizstatus() const;
  void set_bizstatus(int32_t value);
  private:
  int32_t _internal_bizstatus() const;
  void _internal_set_bizstatus(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Profile.UserLoginDeviceInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr devicename_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kpf_;
    int64_t lastonlinetime_;
    int32_t bizstatus_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_UserLoginDeviceInfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserLoginDeviceInfo

// string deviceId = 1;
inline void UserLoginDeviceInfo::clear_deviceid() {
  _impl_.deviceid_.ClearToEmpty();
}
inline const std::string& UserLoginDeviceInfo::deviceid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Profile.UserLoginDeviceInfo.deviceId)
  return _internal_deviceid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserLoginDeviceInfo::set_deviceid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.deviceid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Profile.UserLoginDeviceInfo.deviceId)
}
inline std::string* UserLoginDeviceInfo::mutable_deviceid() {
  std::string* _s = _internal_mutable_deviceid();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Profile.UserLoginDeviceInfo.deviceId)
  return _s;
}
inline const std::string& UserLoginDeviceInfo::_internal_deviceid() const {
  return _impl_.deviceid_.Get();
}
inline void UserLoginDeviceInfo::_internal_set_deviceid(const std::string& value) {
  
  _impl_.deviceid_.Set(value, GetArenaForAllocation());
}
inline std::string* UserLoginDeviceInfo::_internal_mutable_deviceid() {
  
  return _impl_.deviceid_.Mutable(GetArenaForAllocation());
}
inline std::string* UserLoginDeviceInfo::release_deviceid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Profile.UserLoginDeviceInfo.deviceId)
  return _impl_.deviceid_.Release();
}
inline void UserLoginDeviceInfo::set_allocated_deviceid(std::string* deviceid) {
  if (deviceid != nullptr) {
    
  } else {
    
  }
  _impl_.deviceid_.SetAllocated(deviceid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.deviceid_.IsDefault()) {
    _impl_.deviceid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Profile.UserLoginDeviceInfo.deviceId)
}

// string deviceName = 2;
inline void UserLoginDeviceInfo::clear_devicename() {
  _impl_.devicename_.ClearToEmpty();
}
inline const std::string& UserLoginDeviceInfo::devicename() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Profile.UserLoginDeviceInfo.deviceName)
  return _internal_devicename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserLoginDeviceInfo::set_devicename(ArgT0&& arg0, ArgT... args) {
 
 _impl_.devicename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Profile.UserLoginDeviceInfo.deviceName)
}
inline std::string* UserLoginDeviceInfo::mutable_devicename() {
  std::string* _s = _internal_mutable_devicename();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Profile.UserLoginDeviceInfo.deviceName)
  return _s;
}
inline const std::string& UserLoginDeviceInfo::_internal_devicename() const {
  return _impl_.devicename_.Get();
}
inline void UserLoginDeviceInfo::_internal_set_devicename(const std::string& value) {
  
  _impl_.devicename_.Set(value, GetArenaForAllocation());
}
inline std::string* UserLoginDeviceInfo::_internal_mutable_devicename() {
  
  return _impl_.devicename_.Mutable(GetArenaForAllocation());
}
inline std::string* UserLoginDeviceInfo::release_devicename() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Profile.UserLoginDeviceInfo.deviceName)
  return _impl_.devicename_.Release();
}
inline void UserLoginDeviceInfo::set_allocated_devicename(std::string* devicename) {
  if (devicename != nullptr) {
    
  } else {
    
  }
  _impl_.devicename_.SetAllocated(devicename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.devicename_.IsDefault()) {
    _impl_.devicename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Profile.UserLoginDeviceInfo.deviceName)
}

// string kpf = 3;
inline void UserLoginDeviceInfo::clear_kpf() {
  _impl_.kpf_.ClearToEmpty();
}
inline const std::string& UserLoginDeviceInfo::kpf() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Profile.UserLoginDeviceInfo.kpf)
  return _internal_kpf();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserLoginDeviceInfo::set_kpf(ArgT0&& arg0, ArgT... args) {
 
 _impl_.kpf_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Profile.UserLoginDeviceInfo.kpf)
}
inline std::string* UserLoginDeviceInfo::mutable_kpf() {
  std::string* _s = _internal_mutable_kpf();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Profile.UserLoginDeviceInfo.kpf)
  return _s;
}
inline const std::string& UserLoginDeviceInfo::_internal_kpf() const {
  return _impl_.kpf_.Get();
}
inline void UserLoginDeviceInfo::_internal_set_kpf(const std::string& value) {
  
  _impl_.kpf_.Set(value, GetArenaForAllocation());
}
inline std::string* UserLoginDeviceInfo::_internal_mutable_kpf() {
  
  return _impl_.kpf_.Mutable(GetArenaForAllocation());
}
inline std::string* UserLoginDeviceInfo::release_kpf() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Profile.UserLoginDeviceInfo.kpf)
  return _impl_.kpf_.Release();
}
inline void UserLoginDeviceInfo::set_allocated_kpf(std::string* kpf) {
  if (kpf != nullptr) {
    
  } else {
    
  }
  _impl_.kpf_.SetAllocated(kpf, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.kpf_.IsDefault()) {
    _impl_.kpf_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Profile.UserLoginDeviceInfo.kpf)
}

// int64 lastOnlineTime = 4;
inline void UserLoginDeviceInfo::clear_lastonlinetime() {
  _impl_.lastonlinetime_ = int64_t{0};
}
inline int64_t UserLoginDeviceInfo::_internal_lastonlinetime() const {
  return _impl_.lastonlinetime_;
}
inline int64_t UserLoginDeviceInfo::lastonlinetime() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Profile.UserLoginDeviceInfo.lastOnlineTime)
  return _internal_lastonlinetime();
}
inline void UserLoginDeviceInfo::_internal_set_lastonlinetime(int64_t value) {
  
  _impl_.lastonlinetime_ = value;
}
inline void UserLoginDeviceInfo::set_lastonlinetime(int64_t value) {
  _internal_set_lastonlinetime(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Profile.UserLoginDeviceInfo.lastOnlineTime)
}

// int32 bizStatus = 5;
inline void UserLoginDeviceInfo::clear_bizstatus() {
  _impl_.bizstatus_ = 0;
}
inline int32_t UserLoginDeviceInfo::_internal_bizstatus() const {
  return _impl_.bizstatus_;
}
inline int32_t UserLoginDeviceInfo::bizstatus() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Profile.UserLoginDeviceInfo.bizStatus)
  return _internal_bizstatus();
}
inline void UserLoginDeviceInfo::_internal_set_bizstatus(int32_t value) {
  
  _impl_.bizstatus_ = value;
}
inline void UserLoginDeviceInfo::set_bizstatus(int32_t value) {
  _internal_set_bizstatus(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Profile.UserLoginDeviceInfo.bizStatus)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Profile
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_UserLoginDeviceInfo_2eproto
