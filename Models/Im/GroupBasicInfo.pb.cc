// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GroupBasicInfo.proto

#include "GroupBasicInfo.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Message {
PROTOBUF_CONSTEXPR GroupBasicInfo::GroupBasicInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.userscantalk_)*/{}
  , /*decltype(_impl_.userskeepsilence_)*/{}
  , /*decltype(_impl_.multiforbiddenstate_)*/{}
  , /*decltype(_impl_._multiforbiddenstate_cached_byte_size_)*/{0}
  , /*decltype(_impl_.label_)*/{}
  , /*decltype(_impl_.groupid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.groupname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.defaultgroupname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.extra_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.groupheadurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.groupnumber_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.introduction_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.admin_)*/nullptr
  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.groupstatus_)*/0
  , /*decltype(_impl_.joinneedpermission_)*/0
  , /*decltype(_impl_.createtime_)*/int64_t{0}
  , /*decltype(_impl_.updatetime_)*/int64_t{0}
  , /*decltype(_impl_.grouptype_)*/0
  , /*decltype(_impl_.forbiddenstate_)*/0
  , /*decltype(_impl_.invitepermissiontype_)*/0
  , /*decltype(_impl_.bizdefcode_)*/0
  , /*decltype(_impl_.ismuteall_)*/false
  , /*decltype(_impl_.onlyadminupdategroupsetting_)*/false
  , /*decltype(_impl_.onlyadminremindall_)*/false
  , /*decltype(_impl_.groupinviteneeduseragree_)*/false
  , /*decltype(_impl_.maxmembercount_)*/0
  , /*decltype(_impl_.groupextrasetting_)*/int64_t{0}
  , /*decltype(_impl_.maxmanagercount_)*/0
  , /*decltype(_impl_.historymessagesvisible_)*/false
  , /*decltype(_impl_.groupdismissbanned_)*/false
  , /*decltype(_impl_.groupquitbanned_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GroupBasicInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupBasicInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupBasicInfoDefaultTypeInternal() {}
  union {
    GroupBasicInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupBasicInfoDefaultTypeInternal _GroupBasicInfo_default_instance_;
}  // namespace Message
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu
static ::_pb::Metadata file_level_metadata_GroupBasicInfo_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_GroupBasicInfo_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_GroupBasicInfo_2eproto = nullptr;

const uint32_t TableStruct_GroupBasicInfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Message::GroupBasicInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Message::GroupBasicInfo, _impl_.groupid_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Message::GroupBasicInfo, _impl_.groupname_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Message::GroupBasicInfo, _impl_.admin_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Message::GroupBasicInfo, _impl_.groupstatus_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Message::GroupBasicInfo, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Message::GroupBasicInfo, _impl_.joinneedpermission_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Message::GroupBasicInfo, _impl_.createtime_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Message::GroupBasicInfo, _impl_.updatetime_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Message::GroupBasicInfo, _impl_.grouptype_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Message::GroupBasicInfo, _impl_.forbiddenstate_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Message::GroupBasicInfo, _impl_.invitepermissiontype_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Message::GroupBasicInfo, _impl_.bizdefcode_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Message::GroupBasicInfo, _impl_.defaultgroupname_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Message::GroupBasicInfo, _impl_.extra_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Message::GroupBasicInfo, _impl_.ismuteall_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Message::GroupBasicInfo, _impl_.onlyadminupdategroupsetting_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Message::GroupBasicInfo, _impl_.onlyadminremindall_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Message::GroupBasicInfo, _impl_.userscantalk_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Message::GroupBasicInfo, _impl_.userskeepsilence_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Message::GroupBasicInfo, _impl_.groupheadurl_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Message::GroupBasicInfo, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Message::GroupBasicInfo, _impl_.tag_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Message::GroupBasicInfo, _impl_.groupnumber_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Message::GroupBasicInfo, _impl_.introduction_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Message::GroupBasicInfo, _impl_.maxmembercount_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Message::GroupBasicInfo, _impl_.multiforbiddenstate_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Message::GroupBasicInfo, _impl_.maxmanagercount_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Message::GroupBasicInfo, _impl_.label_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Message::GroupBasicInfo, _impl_.groupextrasetting_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Message::GroupBasicInfo, _impl_.groupinviteneeduseragree_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Message::GroupBasicInfo, _impl_.historymessagesvisible_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Message::GroupBasicInfo, _impl_.groupdismissbanned_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Message::GroupBasicInfo, _impl_.groupquitbanned_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::AcFunDanmu::Im::Cloud::Message::GroupBasicInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::AcFunDanmu::Im::Cloud::Message::_GroupBasicInfo_default_instance_._instance,
};

const char descriptor_table_protodef_GroupBasicInfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024GroupBasicInfo.proto\022\033AcFunDanmu.Im.Cl"
  "oud.Message\032\024ForbiddenState.proto\032\020Group"
  "Label.proto\032\021GroupStatus.proto\032\017GroupTyp"
  "e.proto\032\032InvitePermissionType.proto\032\034Joi"
  "nNeedPermissionType.proto\032\016Location.prot"
  "o\032\031MultiForbiddenState.proto\032\nUser.proto"
  "\"\304\t\n\016GroupBasicInfo\022\017\n\007groupId\030\001 \001(\t\022\021\n\t"
  "groupName\030\002 \001(\t\022(\n\005admin\030\003 \001(\0132\031.AcFunDa"
  "nmu.Im.Basic.User\022=\n\013groupStatus\030\004 \001(\0162("
  ".AcFunDanmu.Im.Cloud.Message.GroupStatus"
  "\022\023\n\013description\030\005 \001(\t\022O\n\022joinNeedPermiss"
  "ion\030\006 \001(\01623.AcFunDanmu.Im.Cloud.Message."
  "JoinNeedPermissionType\022\022\n\ncreateTime\030\007 \001"
  "(\003\022\022\n\nupdateTime\030\010 \001(\003\0229\n\tgroupType\030\t \001("
  "\0162&.AcFunDanmu.Im.Cloud.Message.GroupTyp"
  "e\022C\n\016forbiddenState\030\n \001(\0162+.AcFunDanmu.I"
  "m.Cloud.Message.ForbiddenState\022O\n\024invite"
  "PermissionType\030\013 \001(\01621.AcFunDanmu.Im.Clo"
  "ud.Message.InvitePermissionType\022\022\n\nbizDe"
  "fCode\030\014 \001(\005\022\030\n\020defaultGroupName\030\r \001(\t\022\r\n"
  "\005extra\030\016 \001(\t\022\021\n\tisMuteAll\030\017 \001(\010\022#\n\033onlyA"
  "dminUpdateGroupSetting\030\020 \001(\010\022\032\n\022onlyAdmi"
  "nRemindAll\030\021 \001(\010\022/\n\014usersCanTalk\030\022 \003(\0132\031"
  ".AcFunDanmu.Im.Basic.User\0223\n\020usersKeepSi"
  "lence\030\023 \003(\0132\031.AcFunDanmu.Im.Basic.User\022\024"
  "\n\014groupHeadUrl\030\024 \001(\t\0227\n\010location\030\025 \001(\0132%"
  ".AcFunDanmu.Im.Cloud.Message.Location\022\013\n"
  "\003tag\030\026 \001(\t\022\023\n\013groupNumber\030\027 \001(\t\022\024\n\014intro"
  "duction\030\030 \001(\t\022\026\n\016maxMemberCount\030\031 \001(\005\022M\n"
  "\023multiForbiddenState\030\032 \003(\01620.AcFunDanmu."
  "Im.Cloud.Message.MultiForbiddenState\022\027\n\017"
  "maxManagerCount\030\033 \001(\005\0226\n\005label\030\034 \003(\0132\'.A"
  "cFunDanmu.Im.Cloud.Message.GroupLabel\022\031\n"
  "\021groupExtraSetting\030\035 \001(\003\022 \n\030groupInviteN"
  "eedUserAgree\030\036 \001(\010\022\036\n\026historyMessagesVis"
  "ible\030\037 \001(\010\022\032\n\022groupDismissBanned\030  \001(\010\022\027"
  "\n\017groupQuitBanned\030! \001(\010b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_GroupBasicInfo_2eproto_deps[9] = {
  &::descriptor_table_ForbiddenState_2eproto,
  &::descriptor_table_GroupLabel_2eproto,
  &::descriptor_table_GroupStatus_2eproto,
  &::descriptor_table_GroupType_2eproto,
  &::descriptor_table_InvitePermissionType_2eproto,
  &::descriptor_table_JoinNeedPermissionType_2eproto,
  &::descriptor_table_Location_2eproto,
  &::descriptor_table_MultiForbiddenState_2eproto,
  &::descriptor_table_User_2eproto,
};
static ::_pbi::once_flag descriptor_table_GroupBasicInfo_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_GroupBasicInfo_2eproto = {
    false, false, 1471, descriptor_table_protodef_GroupBasicInfo_2eproto,
    "GroupBasicInfo.proto",
    &descriptor_table_GroupBasicInfo_2eproto_once, descriptor_table_GroupBasicInfo_2eproto_deps, 9, 1,
    schemas, file_default_instances, TableStruct_GroupBasicInfo_2eproto::offsets,
    file_level_metadata_GroupBasicInfo_2eproto, file_level_enum_descriptors_GroupBasicInfo_2eproto,
    file_level_service_descriptors_GroupBasicInfo_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_GroupBasicInfo_2eproto_getter() {
  return &descriptor_table_GroupBasicInfo_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_GroupBasicInfo_2eproto(&descriptor_table_GroupBasicInfo_2eproto);
namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Message {

// ===================================================================

class GroupBasicInfo::_Internal {
 public:
  static const ::AcFunDanmu::Im::Basic::User& admin(const GroupBasicInfo* msg);
  static const ::AcFunDanmu::Im::Cloud::Message::Location& location(const GroupBasicInfo* msg);
};

const ::AcFunDanmu::Im::Basic::User&
GroupBasicInfo::_Internal::admin(const GroupBasicInfo* msg) {
  return *msg->_impl_.admin_;
}
const ::AcFunDanmu::Im::Cloud::Message::Location&
GroupBasicInfo::_Internal::location(const GroupBasicInfo* msg) {
  return *msg->_impl_.location_;
}
void GroupBasicInfo::clear_admin() {
  if (GetArenaForAllocation() == nullptr && _impl_.admin_ != nullptr) {
    delete _impl_.admin_;
  }
  _impl_.admin_ = nullptr;
}
void GroupBasicInfo::clear_userscantalk() {
  _impl_.userscantalk_.Clear();
}
void GroupBasicInfo::clear_userskeepsilence() {
  _impl_.userskeepsilence_.Clear();
}
void GroupBasicInfo::clear_location() {
  if (GetArenaForAllocation() == nullptr && _impl_.location_ != nullptr) {
    delete _impl_.location_;
  }
  _impl_.location_ = nullptr;
}
void GroupBasicInfo::clear_label() {
  _impl_.label_.Clear();
}
GroupBasicInfo::GroupBasicInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.Im.Cloud.Message.GroupBasicInfo)
}
GroupBasicInfo::GroupBasicInfo(const GroupBasicInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GroupBasicInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.userscantalk_){from._impl_.userscantalk_}
    , decltype(_impl_.userskeepsilence_){from._impl_.userskeepsilence_}
    , decltype(_impl_.multiforbiddenstate_){from._impl_.multiforbiddenstate_}
    , /*decltype(_impl_._multiforbiddenstate_cached_byte_size_)*/{0}
    , decltype(_impl_.label_){from._impl_.label_}
    , decltype(_impl_.groupid_){}
    , decltype(_impl_.groupname_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.defaultgroupname_){}
    , decltype(_impl_.extra_){}
    , decltype(_impl_.groupheadurl_){}
    , decltype(_impl_.tag_){}
    , decltype(_impl_.groupnumber_){}
    , decltype(_impl_.introduction_){}
    , decltype(_impl_.admin_){nullptr}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.groupstatus_){}
    , decltype(_impl_.joinneedpermission_){}
    , decltype(_impl_.createtime_){}
    , decltype(_impl_.updatetime_){}
    , decltype(_impl_.grouptype_){}
    , decltype(_impl_.forbiddenstate_){}
    , decltype(_impl_.invitepermissiontype_){}
    , decltype(_impl_.bizdefcode_){}
    , decltype(_impl_.ismuteall_){}
    , decltype(_impl_.onlyadminupdategroupsetting_){}
    , decltype(_impl_.onlyadminremindall_){}
    , decltype(_impl_.groupinviteneeduseragree_){}
    , decltype(_impl_.maxmembercount_){}
    , decltype(_impl_.groupextrasetting_){}
    , decltype(_impl_.maxmanagercount_){}
    , decltype(_impl_.historymessagesvisible_){}
    , decltype(_impl_.groupdismissbanned_){}
    , decltype(_impl_.groupquitbanned_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.groupid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.groupid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_groupid().empty()) {
    _this->_impl_.groupid_.Set(from._internal_groupid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.groupname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.groupname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_groupname().empty()) {
    _this->_impl_.groupname_.Set(from._internal_groupname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.defaultgroupname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.defaultgroupname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_defaultgroupname().empty()) {
    _this->_impl_.defaultgroupname_.Set(from._internal_defaultgroupname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.extra_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extra_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_extra().empty()) {
    _this->_impl_.extra_.Set(from._internal_extra(), 
      _this->GetArenaForAllocation());
  }
  _impl_.groupheadurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.groupheadurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_groupheadurl().empty()) {
    _this->_impl_.groupheadurl_.Set(from._internal_groupheadurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tag().empty()) {
    _this->_impl_.tag_.Set(from._internal_tag(), 
      _this->GetArenaForAllocation());
  }
  _impl_.groupnumber_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.groupnumber_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_groupnumber().empty()) {
    _this->_impl_.groupnumber_.Set(from._internal_groupnumber(), 
      _this->GetArenaForAllocation());
  }
  _impl_.introduction_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.introduction_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_introduction().empty()) {
    _this->_impl_.introduction_.Set(from._internal_introduction(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_admin()) {
    _this->_impl_.admin_ = new ::AcFunDanmu::Im::Basic::User(*from._impl_.admin_);
  }
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::AcFunDanmu::Im::Cloud::Message::Location(*from._impl_.location_);
  }
  ::memcpy(&_impl_.groupstatus_, &from._impl_.groupstatus_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.groupquitbanned_) -
    reinterpret_cast<char*>(&_impl_.groupstatus_)) + sizeof(_impl_.groupquitbanned_));
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.Im.Cloud.Message.GroupBasicInfo)
}

inline void GroupBasicInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.userscantalk_){arena}
    , decltype(_impl_.userskeepsilence_){arena}
    , decltype(_impl_.multiforbiddenstate_){arena}
    , /*decltype(_impl_._multiforbiddenstate_cached_byte_size_)*/{0}
    , decltype(_impl_.label_){arena}
    , decltype(_impl_.groupid_){}
    , decltype(_impl_.groupname_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.defaultgroupname_){}
    , decltype(_impl_.extra_){}
    , decltype(_impl_.groupheadurl_){}
    , decltype(_impl_.tag_){}
    , decltype(_impl_.groupnumber_){}
    , decltype(_impl_.introduction_){}
    , decltype(_impl_.admin_){nullptr}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.groupstatus_){0}
    , decltype(_impl_.joinneedpermission_){0}
    , decltype(_impl_.createtime_){int64_t{0}}
    , decltype(_impl_.updatetime_){int64_t{0}}
    , decltype(_impl_.grouptype_){0}
    , decltype(_impl_.forbiddenstate_){0}
    , decltype(_impl_.invitepermissiontype_){0}
    , decltype(_impl_.bizdefcode_){0}
    , decltype(_impl_.ismuteall_){false}
    , decltype(_impl_.onlyadminupdategroupsetting_){false}
    , decltype(_impl_.onlyadminremindall_){false}
    , decltype(_impl_.groupinviteneeduseragree_){false}
    , decltype(_impl_.maxmembercount_){0}
    , decltype(_impl_.groupextrasetting_){int64_t{0}}
    , decltype(_impl_.maxmanagercount_){0}
    , decltype(_impl_.historymessagesvisible_){false}
    , decltype(_impl_.groupdismissbanned_){false}
    , decltype(_impl_.groupquitbanned_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.groupid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.groupid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.groupname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.groupname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.defaultgroupname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.defaultgroupname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.extra_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extra_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.groupheadurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.groupheadurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.groupnumber_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.groupnumber_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.introduction_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.introduction_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GroupBasicInfo::~GroupBasicInfo() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.Im.Cloud.Message.GroupBasicInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GroupBasicInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.userscantalk_.~RepeatedPtrField();
  _impl_.userskeepsilence_.~RepeatedPtrField();
  _impl_.multiforbiddenstate_.~RepeatedField();
  _impl_.label_.~RepeatedPtrField();
  _impl_.groupid_.Destroy();
  _impl_.groupname_.Destroy();
  _impl_.description_.Destroy();
  _impl_.defaultgroupname_.Destroy();
  _impl_.extra_.Destroy();
  _impl_.groupheadurl_.Destroy();
  _impl_.tag_.Destroy();
  _impl_.groupnumber_.Destroy();
  _impl_.introduction_.Destroy();
  if (this != internal_default_instance()) delete _impl_.admin_;
  if (this != internal_default_instance()) delete _impl_.location_;
}

void GroupBasicInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GroupBasicInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.Im.Cloud.Message.GroupBasicInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.userscantalk_.Clear();
  _impl_.userskeepsilence_.Clear();
  _impl_.multiforbiddenstate_.Clear();
  _impl_.label_.Clear();
  _impl_.groupid_.ClearToEmpty();
  _impl_.groupname_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.defaultgroupname_.ClearToEmpty();
  _impl_.extra_.ClearToEmpty();
  _impl_.groupheadurl_.ClearToEmpty();
  _impl_.tag_.ClearToEmpty();
  _impl_.groupnumber_.ClearToEmpty();
  _impl_.introduction_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.admin_ != nullptr) {
    delete _impl_.admin_;
  }
  _impl_.admin_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.location_ != nullptr) {
    delete _impl_.location_;
  }
  _impl_.location_ = nullptr;
  ::memset(&_impl_.groupstatus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.groupquitbanned_) -
      reinterpret_cast<char*>(&_impl_.groupstatus_)) + sizeof(_impl_.groupquitbanned_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupBasicInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string groupId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_groupid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Cloud.Message.GroupBasicInfo.groupId"));
        } else
          goto handle_unusual;
        continue;
      // string groupName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_groupname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Cloud.Message.GroupBasicInfo.groupName"));
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Basic.User admin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_admin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Cloud.Message.GroupStatus groupStatus = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_groupstatus(static_cast<::AcFunDanmu::Im::Cloud::Message::GroupStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // string description = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Cloud.Message.GroupBasicInfo.description"));
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Cloud.Message.JoinNeedPermissionType joinNeedPermission = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_joinneedpermission(static_cast<::AcFunDanmu::Im::Cloud::Message::JoinNeedPermissionType>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 createTime = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.createtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 updateTime = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.updatetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Cloud.Message.GroupType groupType = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_grouptype(static_cast<::AcFunDanmu::Im::Cloud::Message::GroupType>(val));
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Cloud.Message.ForbiddenState forbiddenState = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_forbiddenstate(static_cast<::AcFunDanmu::Im::Cloud::Message::ForbiddenState>(val));
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Cloud.Message.InvitePermissionType invitePermissionType = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_invitepermissiontype(static_cast<::AcFunDanmu::Im::Cloud::Message::InvitePermissionType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 bizDefCode = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.bizdefcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string defaultGroupName = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_defaultgroupname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Cloud.Message.GroupBasicInfo.defaultGroupName"));
        } else
          goto handle_unusual;
        continue;
      // string extra = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_extra();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Cloud.Message.GroupBasicInfo.extra"));
        } else
          goto handle_unusual;
        continue;
      // bool isMuteAll = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.ismuteall_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool onlyAdminUpdateGroupSetting = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.onlyadminupdategroupsetting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool onlyAdminRemindAll = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.onlyadminremindall_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .AcFunDanmu.Im.Basic.User usersCanTalk = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_userscantalk(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .AcFunDanmu.Im.Basic.User usersKeepSilence = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_userskeepsilence(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string groupHeadUrl = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_groupheadurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Cloud.Message.GroupBasicInfo.groupHeadUrl"));
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Cloud.Message.Location location = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string tag = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Cloud.Message.GroupBasicInfo.tag"));
        } else
          goto handle_unusual;
        continue;
      // string groupNumber = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_groupnumber();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Cloud.Message.GroupBasicInfo.groupNumber"));
        } else
          goto handle_unusual;
        continue;
      // string introduction = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          auto str = _internal_mutable_introduction();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Cloud.Message.GroupBasicInfo.introduction"));
        } else
          goto handle_unusual;
        continue;
      // int32 maxMemberCount = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _impl_.maxmembercount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .AcFunDanmu.Im.Cloud.Message.MultiForbiddenState multiForbiddenState = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_multiforbiddenstate(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 208) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_multiforbiddenstate(static_cast<::AcFunDanmu::Im::Cloud::Message::MultiForbiddenState>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 maxManagerCount = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _impl_.maxmanagercount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .AcFunDanmu.Im.Cloud.Message.GroupLabel label = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_label(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<226>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 groupExtraSetting = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _impl_.groupextrasetting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool groupInviteNeedUserAgree = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _impl_.groupinviteneeduseragree_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool historyMessagesVisible = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _impl_.historymessagesvisible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool groupDismissBanned = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _impl_.groupdismissbanned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool groupQuitBanned = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.groupquitbanned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GroupBasicInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.Im.Cloud.Message.GroupBasicInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string groupId = 1;
  if (!this->_internal_groupid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_groupid().data(), static_cast<int>(this->_internal_groupid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Cloud.Message.GroupBasicInfo.groupId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_groupid(), target);
  }

  // string groupName = 2;
  if (!this->_internal_groupname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_groupname().data(), static_cast<int>(this->_internal_groupname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Cloud.Message.GroupBasicInfo.groupName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_groupname(), target);
  }

  // .AcFunDanmu.Im.Basic.User admin = 3;
  if (this->_internal_has_admin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::admin(this),
        _Internal::admin(this).GetCachedSize(), target, stream);
  }

  // .AcFunDanmu.Im.Cloud.Message.GroupStatus groupStatus = 4;
  if (this->_internal_groupstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_groupstatus(), target);
  }

  // string description = 5;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Cloud.Message.GroupBasicInfo.description");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_description(), target);
  }

  // .AcFunDanmu.Im.Cloud.Message.JoinNeedPermissionType joinNeedPermission = 6;
  if (this->_internal_joinneedpermission() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_joinneedpermission(), target);
  }

  // int64 createTime = 7;
  if (this->_internal_createtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_createtime(), target);
  }

  // int64 updateTime = 8;
  if (this->_internal_updatetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_updatetime(), target);
  }

  // .AcFunDanmu.Im.Cloud.Message.GroupType groupType = 9;
  if (this->_internal_grouptype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_grouptype(), target);
  }

  // .AcFunDanmu.Im.Cloud.Message.ForbiddenState forbiddenState = 10;
  if (this->_internal_forbiddenstate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_forbiddenstate(), target);
  }

  // .AcFunDanmu.Im.Cloud.Message.InvitePermissionType invitePermissionType = 11;
  if (this->_internal_invitepermissiontype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      11, this->_internal_invitepermissiontype(), target);
  }

  // int32 bizDefCode = 12;
  if (this->_internal_bizdefcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_bizdefcode(), target);
  }

  // string defaultGroupName = 13;
  if (!this->_internal_defaultgroupname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_defaultgroupname().data(), static_cast<int>(this->_internal_defaultgroupname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Cloud.Message.GroupBasicInfo.defaultGroupName");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_defaultgroupname(), target);
  }

  // string extra = 14;
  if (!this->_internal_extra().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_extra().data(), static_cast<int>(this->_internal_extra().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Cloud.Message.GroupBasicInfo.extra");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_extra(), target);
  }

  // bool isMuteAll = 15;
  if (this->_internal_ismuteall() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_ismuteall(), target);
  }

  // bool onlyAdminUpdateGroupSetting = 16;
  if (this->_internal_onlyadminupdategroupsetting() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_onlyadminupdategroupsetting(), target);
  }

  // bool onlyAdminRemindAll = 17;
  if (this->_internal_onlyadminremindall() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_onlyadminremindall(), target);
  }

  // repeated .AcFunDanmu.Im.Basic.User usersCanTalk = 18;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_userscantalk_size()); i < n; i++) {
    const auto& repfield = this->_internal_userscantalk(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(18, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .AcFunDanmu.Im.Basic.User usersKeepSilence = 19;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_userskeepsilence_size()); i < n; i++) {
    const auto& repfield = this->_internal_userskeepsilence(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(19, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string groupHeadUrl = 20;
  if (!this->_internal_groupheadurl().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_groupheadurl().data(), static_cast<int>(this->_internal_groupheadurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Cloud.Message.GroupBasicInfo.groupHeadUrl");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_groupheadurl(), target);
  }

  // .AcFunDanmu.Im.Cloud.Message.Location location = 21;
  if (this->_internal_has_location()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  // string tag = 22;
  if (!this->_internal_tag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Cloud.Message.GroupBasicInfo.tag");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_tag(), target);
  }

  // string groupNumber = 23;
  if (!this->_internal_groupnumber().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_groupnumber().data(), static_cast<int>(this->_internal_groupnumber().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Cloud.Message.GroupBasicInfo.groupNumber");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_groupnumber(), target);
  }

  // string introduction = 24;
  if (!this->_internal_introduction().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_introduction().data(), static_cast<int>(this->_internal_introduction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Cloud.Message.GroupBasicInfo.introduction");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_introduction(), target);
  }

  // int32 maxMemberCount = 25;
  if (this->_internal_maxmembercount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(25, this->_internal_maxmembercount(), target);
  }

  // repeated .AcFunDanmu.Im.Cloud.Message.MultiForbiddenState multiForbiddenState = 26;
  {
    int byte_size = _impl_._multiforbiddenstate_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          26, _impl_.multiforbiddenstate_, byte_size, target);
    }
  }

  // int32 maxManagerCount = 27;
  if (this->_internal_maxmanagercount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(27, this->_internal_maxmanagercount(), target);
  }

  // repeated .AcFunDanmu.Im.Cloud.Message.GroupLabel label = 28;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_label_size()); i < n; i++) {
    const auto& repfield = this->_internal_label(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(28, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 groupExtraSetting = 29;
  if (this->_internal_groupextrasetting() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(29, this->_internal_groupextrasetting(), target);
  }

  // bool groupInviteNeedUserAgree = 30;
  if (this->_internal_groupinviteneeduseragree() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(30, this->_internal_groupinviteneeduseragree(), target);
  }

  // bool historyMessagesVisible = 31;
  if (this->_internal_historymessagesvisible() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(31, this->_internal_historymessagesvisible(), target);
  }

  // bool groupDismissBanned = 32;
  if (this->_internal_groupdismissbanned() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(32, this->_internal_groupdismissbanned(), target);
  }

  // bool groupQuitBanned = 33;
  if (this->_internal_groupquitbanned() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(33, this->_internal_groupquitbanned(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.Im.Cloud.Message.GroupBasicInfo)
  return target;
}

size_t GroupBasicInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.Im.Cloud.Message.GroupBasicInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .AcFunDanmu.Im.Basic.User usersCanTalk = 18;
  total_size += 2UL * this->_internal_userscantalk_size();
  for (const auto& msg : this->_impl_.userscantalk_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .AcFunDanmu.Im.Basic.User usersKeepSilence = 19;
  total_size += 2UL * this->_internal_userskeepsilence_size();
  for (const auto& msg : this->_impl_.userskeepsilence_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .AcFunDanmu.Im.Cloud.Message.MultiForbiddenState multiForbiddenState = 26;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_multiforbiddenstate_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_multiforbiddenstate(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._multiforbiddenstate_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .AcFunDanmu.Im.Cloud.Message.GroupLabel label = 28;
  total_size += 2UL * this->_internal_label_size();
  for (const auto& msg : this->_impl_.label_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string groupId = 1;
  if (!this->_internal_groupid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_groupid());
  }

  // string groupName = 2;
  if (!this->_internal_groupname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_groupname());
  }

  // string description = 5;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string defaultGroupName = 13;
  if (!this->_internal_defaultgroupname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_defaultgroupname());
  }

  // string extra = 14;
  if (!this->_internal_extra().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_extra());
  }

  // string groupHeadUrl = 20;
  if (!this->_internal_groupheadurl().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_groupheadurl());
  }

  // string tag = 22;
  if (!this->_internal_tag().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  // string groupNumber = 23;
  if (!this->_internal_groupnumber().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_groupnumber());
  }

  // string introduction = 24;
  if (!this->_internal_introduction().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_introduction());
  }

  // .AcFunDanmu.Im.Basic.User admin = 3;
  if (this->_internal_has_admin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.admin_);
  }

  // .AcFunDanmu.Im.Cloud.Message.Location location = 21;
  if (this->_internal_has_location()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.location_);
  }

  // .AcFunDanmu.Im.Cloud.Message.GroupStatus groupStatus = 4;
  if (this->_internal_groupstatus() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_groupstatus());
  }

  // .AcFunDanmu.Im.Cloud.Message.JoinNeedPermissionType joinNeedPermission = 6;
  if (this->_internal_joinneedpermission() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_joinneedpermission());
  }

  // int64 createTime = 7;
  if (this->_internal_createtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_createtime());
  }

  // int64 updateTime = 8;
  if (this->_internal_updatetime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_updatetime());
  }

  // .AcFunDanmu.Im.Cloud.Message.GroupType groupType = 9;
  if (this->_internal_grouptype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_grouptype());
  }

  // .AcFunDanmu.Im.Cloud.Message.ForbiddenState forbiddenState = 10;
  if (this->_internal_forbiddenstate() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_forbiddenstate());
  }

  // .AcFunDanmu.Im.Cloud.Message.InvitePermissionType invitePermissionType = 11;
  if (this->_internal_invitepermissiontype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_invitepermissiontype());
  }

  // int32 bizDefCode = 12;
  if (this->_internal_bizdefcode() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bizdefcode());
  }

  // bool isMuteAll = 15;
  if (this->_internal_ismuteall() != 0) {
    total_size += 1 + 1;
  }

  // bool onlyAdminUpdateGroupSetting = 16;
  if (this->_internal_onlyadminupdategroupsetting() != 0) {
    total_size += 2 + 1;
  }

  // bool onlyAdminRemindAll = 17;
  if (this->_internal_onlyadminremindall() != 0) {
    total_size += 2 + 1;
  }

  // bool groupInviteNeedUserAgree = 30;
  if (this->_internal_groupinviteneeduseragree() != 0) {
    total_size += 2 + 1;
  }

  // int32 maxMemberCount = 25;
  if (this->_internal_maxmembercount() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_maxmembercount());
  }

  // int64 groupExtraSetting = 29;
  if (this->_internal_groupextrasetting() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_groupextrasetting());
  }

  // int32 maxManagerCount = 27;
  if (this->_internal_maxmanagercount() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_maxmanagercount());
  }

  // bool historyMessagesVisible = 31;
  if (this->_internal_historymessagesvisible() != 0) {
    total_size += 2 + 1;
  }

  // bool groupDismissBanned = 32;
  if (this->_internal_groupdismissbanned() != 0) {
    total_size += 2 + 1;
  }

  // bool groupQuitBanned = 33;
  if (this->_internal_groupquitbanned() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GroupBasicInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GroupBasicInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GroupBasicInfo::GetClassData() const { return &_class_data_; }


void GroupBasicInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GroupBasicInfo*>(&to_msg);
  auto& from = static_cast<const GroupBasicInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.Im.Cloud.Message.GroupBasicInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.userscantalk_.MergeFrom(from._impl_.userscantalk_);
  _this->_impl_.userskeepsilence_.MergeFrom(from._impl_.userskeepsilence_);
  _this->_impl_.multiforbiddenstate_.MergeFrom(from._impl_.multiforbiddenstate_);
  _this->_impl_.label_.MergeFrom(from._impl_.label_);
  if (!from._internal_groupid().empty()) {
    _this->_internal_set_groupid(from._internal_groupid());
  }
  if (!from._internal_groupname().empty()) {
    _this->_internal_set_groupname(from._internal_groupname());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_defaultgroupname().empty()) {
    _this->_internal_set_defaultgroupname(from._internal_defaultgroupname());
  }
  if (!from._internal_extra().empty()) {
    _this->_internal_set_extra(from._internal_extra());
  }
  if (!from._internal_groupheadurl().empty()) {
    _this->_internal_set_groupheadurl(from._internal_groupheadurl());
  }
  if (!from._internal_tag().empty()) {
    _this->_internal_set_tag(from._internal_tag());
  }
  if (!from._internal_groupnumber().empty()) {
    _this->_internal_set_groupnumber(from._internal_groupnumber());
  }
  if (!from._internal_introduction().empty()) {
    _this->_internal_set_introduction(from._internal_introduction());
  }
  if (from._internal_has_admin()) {
    _this->_internal_mutable_admin()->::AcFunDanmu::Im::Basic::User::MergeFrom(
        from._internal_admin());
  }
  if (from._internal_has_location()) {
    _this->_internal_mutable_location()->::AcFunDanmu::Im::Cloud::Message::Location::MergeFrom(
        from._internal_location());
  }
  if (from._internal_groupstatus() != 0) {
    _this->_internal_set_groupstatus(from._internal_groupstatus());
  }
  if (from._internal_joinneedpermission() != 0) {
    _this->_internal_set_joinneedpermission(from._internal_joinneedpermission());
  }
  if (from._internal_createtime() != 0) {
    _this->_internal_set_createtime(from._internal_createtime());
  }
  if (from._internal_updatetime() != 0) {
    _this->_internal_set_updatetime(from._internal_updatetime());
  }
  if (from._internal_grouptype() != 0) {
    _this->_internal_set_grouptype(from._internal_grouptype());
  }
  if (from._internal_forbiddenstate() != 0) {
    _this->_internal_set_forbiddenstate(from._internal_forbiddenstate());
  }
  if (from._internal_invitepermissiontype() != 0) {
    _this->_internal_set_invitepermissiontype(from._internal_invitepermissiontype());
  }
  if (from._internal_bizdefcode() != 0) {
    _this->_internal_set_bizdefcode(from._internal_bizdefcode());
  }
  if (from._internal_ismuteall() != 0) {
    _this->_internal_set_ismuteall(from._internal_ismuteall());
  }
  if (from._internal_onlyadminupdategroupsetting() != 0) {
    _this->_internal_set_onlyadminupdategroupsetting(from._internal_onlyadminupdategroupsetting());
  }
  if (from._internal_onlyadminremindall() != 0) {
    _this->_internal_set_onlyadminremindall(from._internal_onlyadminremindall());
  }
  if (from._internal_groupinviteneeduseragree() != 0) {
    _this->_internal_set_groupinviteneeduseragree(from._internal_groupinviteneeduseragree());
  }
  if (from._internal_maxmembercount() != 0) {
    _this->_internal_set_maxmembercount(from._internal_maxmembercount());
  }
  if (from._internal_groupextrasetting() != 0) {
    _this->_internal_set_groupextrasetting(from._internal_groupextrasetting());
  }
  if (from._internal_maxmanagercount() != 0) {
    _this->_internal_set_maxmanagercount(from._internal_maxmanagercount());
  }
  if (from._internal_historymessagesvisible() != 0) {
    _this->_internal_set_historymessagesvisible(from._internal_historymessagesvisible());
  }
  if (from._internal_groupdismissbanned() != 0) {
    _this->_internal_set_groupdismissbanned(from._internal_groupdismissbanned());
  }
  if (from._internal_groupquitbanned() != 0) {
    _this->_internal_set_groupquitbanned(from._internal_groupquitbanned());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GroupBasicInfo::CopyFrom(const GroupBasicInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.Im.Cloud.Message.GroupBasicInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupBasicInfo::IsInitialized() const {
  return true;
}

void GroupBasicInfo::InternalSwap(GroupBasicInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.userscantalk_.InternalSwap(&other->_impl_.userscantalk_);
  _impl_.userskeepsilence_.InternalSwap(&other->_impl_.userskeepsilence_);
  _impl_.multiforbiddenstate_.InternalSwap(&other->_impl_.multiforbiddenstate_);
  _impl_.label_.InternalSwap(&other->_impl_.label_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.groupid_, lhs_arena,
      &other->_impl_.groupid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.groupname_, lhs_arena,
      &other->_impl_.groupname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.defaultgroupname_, lhs_arena,
      &other->_impl_.defaultgroupname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.extra_, lhs_arena,
      &other->_impl_.extra_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.groupheadurl_, lhs_arena,
      &other->_impl_.groupheadurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tag_, lhs_arena,
      &other->_impl_.tag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.groupnumber_, lhs_arena,
      &other->_impl_.groupnumber_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.introduction_, lhs_arena,
      &other->_impl_.introduction_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupBasicInfo, _impl_.groupquitbanned_)
      + sizeof(GroupBasicInfo::_impl_.groupquitbanned_)
      - PROTOBUF_FIELD_OFFSET(GroupBasicInfo, _impl_.admin_)>(
          reinterpret_cast<char*>(&_impl_.admin_),
          reinterpret_cast<char*>(&other->_impl_.admin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupBasicInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GroupBasicInfo_2eproto_getter, &descriptor_table_GroupBasicInfo_2eproto_once,
      file_level_metadata_GroupBasicInfo_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Message
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AcFunDanmu::Im::Cloud::Message::GroupBasicInfo*
Arena::CreateMaybeMessage< ::AcFunDanmu::Im::Cloud::Message::GroupBasicInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::Im::Cloud::Message::GroupBasicInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
