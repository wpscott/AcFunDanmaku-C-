// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NoticeMessage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_NoticeMessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_NoticeMessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "I18nCopyWriting.pb.h"
#include "RichTextNoticeMessage.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_NoticeMessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_NoticeMessage_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_NoticeMessage_2eproto;
namespace AcFunDanmu {
namespace Im {
namespace Message {
class NoticeMessage;
struct NoticeMessageDefaultTypeInternal;
extern NoticeMessageDefaultTypeInternal _NoticeMessage_default_instance_;
}  // namespace Message
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::Im::Message::NoticeMessage* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Message::NoticeMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {
namespace Im {
namespace Message {

// ===================================================================

class NoticeMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Message.NoticeMessage) */ {
 public:
  inline NoticeMessage() : NoticeMessage(nullptr) {}
  ~NoticeMessage() override;
  explicit PROTOBUF_CONSTEXPR NoticeMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NoticeMessage(const NoticeMessage& from);
  NoticeMessage(NoticeMessage&& from) noexcept
    : NoticeMessage() {
    *this = ::std::move(from);
  }

  inline NoticeMessage& operator=(const NoticeMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline NoticeMessage& operator=(NoticeMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NoticeMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const NoticeMessage* internal_default_instance() {
    return reinterpret_cast<const NoticeMessage*>(
               &_NoticeMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NoticeMessage& a, NoticeMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(NoticeMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NoticeMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NoticeMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NoticeMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NoticeMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NoticeMessage& from) {
    NoticeMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NoticeMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Message.NoticeMessage";
  }
  protected:
  explicit NoticeMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 5,
    kRichTextNoticeFieldNumber = 2,
    kI18NCopyWritingFieldNumber = 10,
  };
  // string msg = 5;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // .AcFunDanmu.Im.Message.RichTextNoticeMessage richTextNotice = 2;
  bool has_richtextnotice() const;
  private:
  bool _internal_has_richtextnotice() const;
  public:
  void clear_richtextnotice();
  const ::AcFunDanmu::Im::Message::RichTextNoticeMessage& richtextnotice() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Message::RichTextNoticeMessage* release_richtextnotice();
  ::AcFunDanmu::Im::Message::RichTextNoticeMessage* mutable_richtextnotice();
  void set_allocated_richtextnotice(::AcFunDanmu::Im::Message::RichTextNoticeMessage* richtextnotice);
  private:
  const ::AcFunDanmu::Im::Message::RichTextNoticeMessage& _internal_richtextnotice() const;
  ::AcFunDanmu::Im::Message::RichTextNoticeMessage* _internal_mutable_richtextnotice();
  public:
  void unsafe_arena_set_allocated_richtextnotice(
      ::AcFunDanmu::Im::Message::RichTextNoticeMessage* richtextnotice);
  ::AcFunDanmu::Im::Message::RichTextNoticeMessage* unsafe_arena_release_richtextnotice();

  // .AcFunDanmu.Im.Basic.I18nCopyWriting i18nCopyWriting = 10;
  bool has_i18ncopywriting() const;
  private:
  bool _internal_has_i18ncopywriting() const;
  public:
  void clear_i18ncopywriting();
  const ::AcFunDanmu::Im::Basic::I18nCopyWriting& i18ncopywriting() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Basic::I18nCopyWriting* release_i18ncopywriting();
  ::AcFunDanmu::Im::Basic::I18nCopyWriting* mutable_i18ncopywriting();
  void set_allocated_i18ncopywriting(::AcFunDanmu::Im::Basic::I18nCopyWriting* i18ncopywriting);
  private:
  const ::AcFunDanmu::Im::Basic::I18nCopyWriting& _internal_i18ncopywriting() const;
  ::AcFunDanmu::Im::Basic::I18nCopyWriting* _internal_mutable_i18ncopywriting();
  public:
  void unsafe_arena_set_allocated_i18ncopywriting(
      ::AcFunDanmu::Im::Basic::I18nCopyWriting* i18ncopywriting);
  ::AcFunDanmu::Im::Basic::I18nCopyWriting* unsafe_arena_release_i18ncopywriting();

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Message.NoticeMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
    ::AcFunDanmu::Im::Message::RichTextNoticeMessage* richtextnotice_;
    ::AcFunDanmu::Im::Basic::I18nCopyWriting* i18ncopywriting_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_NoticeMessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NoticeMessage

// .AcFunDanmu.Im.Message.RichTextNoticeMessage richTextNotice = 2;
inline bool NoticeMessage::_internal_has_richtextnotice() const {
  return this != internal_default_instance() && _impl_.richtextnotice_ != nullptr;
}
inline bool NoticeMessage::has_richtextnotice() const {
  return _internal_has_richtextnotice();
}
inline const ::AcFunDanmu::Im::Message::RichTextNoticeMessage& NoticeMessage::_internal_richtextnotice() const {
  const ::AcFunDanmu::Im::Message::RichTextNoticeMessage* p = _impl_.richtextnotice_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Message::RichTextNoticeMessage&>(
      ::AcFunDanmu::Im::Message::_RichTextNoticeMessage_default_instance_);
}
inline const ::AcFunDanmu::Im::Message::RichTextNoticeMessage& NoticeMessage::richtextnotice() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.NoticeMessage.richTextNotice)
  return _internal_richtextnotice();
}
inline void NoticeMessage::unsafe_arena_set_allocated_richtextnotice(
    ::AcFunDanmu::Im::Message::RichTextNoticeMessage* richtextnotice) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.richtextnotice_);
  }
  _impl_.richtextnotice_ = richtextnotice;
  if (richtextnotice) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Message.NoticeMessage.richTextNotice)
}
inline ::AcFunDanmu::Im::Message::RichTextNoticeMessage* NoticeMessage::release_richtextnotice() {
  
  ::AcFunDanmu::Im::Message::RichTextNoticeMessage* temp = _impl_.richtextnotice_;
  _impl_.richtextnotice_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AcFunDanmu::Im::Message::RichTextNoticeMessage* NoticeMessage::unsafe_arena_release_richtextnotice() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Message.NoticeMessage.richTextNotice)
  
  ::AcFunDanmu::Im::Message::RichTextNoticeMessage* temp = _impl_.richtextnotice_;
  _impl_.richtextnotice_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Message::RichTextNoticeMessage* NoticeMessage::_internal_mutable_richtextnotice() {
  
  if (_impl_.richtextnotice_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Message::RichTextNoticeMessage>(GetArenaForAllocation());
    _impl_.richtextnotice_ = p;
  }
  return _impl_.richtextnotice_;
}
inline ::AcFunDanmu::Im::Message::RichTextNoticeMessage* NoticeMessage::mutable_richtextnotice() {
  ::AcFunDanmu::Im::Message::RichTextNoticeMessage* _msg = _internal_mutable_richtextnotice();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Message.NoticeMessage.richTextNotice)
  return _msg;
}
inline void NoticeMessage::set_allocated_richtextnotice(::AcFunDanmu::Im::Message::RichTextNoticeMessage* richtextnotice) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.richtextnotice_);
  }
  if (richtextnotice) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(richtextnotice));
    if (message_arena != submessage_arena) {
      richtextnotice = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, richtextnotice, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.richtextnotice_ = richtextnotice;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Message.NoticeMessage.richTextNotice)
}

// string msg = 5;
inline void NoticeMessage::clear_msg() {
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& NoticeMessage::msg() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.NoticeMessage.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NoticeMessage::set_msg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Message.NoticeMessage.msg)
}
inline std::string* NoticeMessage::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Message.NoticeMessage.msg)
  return _s;
}
inline const std::string& NoticeMessage::_internal_msg() const {
  return _impl_.msg_.Get();
}
inline void NoticeMessage::_internal_set_msg(const std::string& value) {
  
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* NoticeMessage::_internal_mutable_msg() {
  
  return _impl_.msg_.Mutable(GetArenaForAllocation());
}
inline std::string* NoticeMessage::release_msg() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Message.NoticeMessage.msg)
  return _impl_.msg_.Release();
}
inline void NoticeMessage::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  _impl_.msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Message.NoticeMessage.msg)
}

// .AcFunDanmu.Im.Basic.I18nCopyWriting i18nCopyWriting = 10;
inline bool NoticeMessage::_internal_has_i18ncopywriting() const {
  return this != internal_default_instance() && _impl_.i18ncopywriting_ != nullptr;
}
inline bool NoticeMessage::has_i18ncopywriting() const {
  return _internal_has_i18ncopywriting();
}
inline const ::AcFunDanmu::Im::Basic::I18nCopyWriting& NoticeMessage::_internal_i18ncopywriting() const {
  const ::AcFunDanmu::Im::Basic::I18nCopyWriting* p = _impl_.i18ncopywriting_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic::I18nCopyWriting&>(
      ::AcFunDanmu::Im::Basic::_I18nCopyWriting_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic::I18nCopyWriting& NoticeMessage::i18ncopywriting() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.NoticeMessage.i18nCopyWriting)
  return _internal_i18ncopywriting();
}
inline void NoticeMessage::unsafe_arena_set_allocated_i18ncopywriting(
    ::AcFunDanmu::Im::Basic::I18nCopyWriting* i18ncopywriting) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.i18ncopywriting_);
  }
  _impl_.i18ncopywriting_ = i18ncopywriting;
  if (i18ncopywriting) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Message.NoticeMessage.i18nCopyWriting)
}
inline ::AcFunDanmu::Im::Basic::I18nCopyWriting* NoticeMessage::release_i18ncopywriting() {
  
  ::AcFunDanmu::Im::Basic::I18nCopyWriting* temp = _impl_.i18ncopywriting_;
  _impl_.i18ncopywriting_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AcFunDanmu::Im::Basic::I18nCopyWriting* NoticeMessage::unsafe_arena_release_i18ncopywriting() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Message.NoticeMessage.i18nCopyWriting)
  
  ::AcFunDanmu::Im::Basic::I18nCopyWriting* temp = _impl_.i18ncopywriting_;
  _impl_.i18ncopywriting_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic::I18nCopyWriting* NoticeMessage::_internal_mutable_i18ncopywriting() {
  
  if (_impl_.i18ncopywriting_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic::I18nCopyWriting>(GetArenaForAllocation());
    _impl_.i18ncopywriting_ = p;
  }
  return _impl_.i18ncopywriting_;
}
inline ::AcFunDanmu::Im::Basic::I18nCopyWriting* NoticeMessage::mutable_i18ncopywriting() {
  ::AcFunDanmu::Im::Basic::I18nCopyWriting* _msg = _internal_mutable_i18ncopywriting();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Message.NoticeMessage.i18nCopyWriting)
  return _msg;
}
inline void NoticeMessage::set_allocated_i18ncopywriting(::AcFunDanmu::Im::Basic::I18nCopyWriting* i18ncopywriting) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.i18ncopywriting_);
  }
  if (i18ncopywriting) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(i18ncopywriting));
    if (message_arena != submessage_arena) {
      i18ncopywriting = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, i18ncopywriting, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.i18ncopywriting_ = i18ncopywriting;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Message.NoticeMessage.i18nCopyWriting)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Message
}  // namespace Im
}  // namespace AcFunDanmu

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_NoticeMessage_2eproto
