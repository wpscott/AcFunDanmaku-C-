// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FlatMessageSearchRequest.proto

#include "FlatMessageSearchRequest.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Search {
PROTOBUF_CONSTEXPR FlatMessageSearchRequest::FlatMessageSearchRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.query_)*/{}
  , /*decltype(_impl_.from_)*/{}
  , /*decltype(_impl_.groupid_)*/{}
  , /*decltype(_impl_.messagetype_)*/{}
  , /*decltype(_impl_._messagetype_cached_byte_size_)*/{0}
  , /*decltype(_impl_.offset_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timefilter_)*/nullptr
  , /*decltype(_impl_.msgtype_)*/0
  , /*decltype(_impl_.msgcount_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FlatMessageSearchRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlatMessageSearchRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlatMessageSearchRequestDefaultTypeInternal() {}
  union {
    FlatMessageSearchRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlatMessageSearchRequestDefaultTypeInternal _FlatMessageSearchRequest_default_instance_;
}  // namespace Search
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu
static ::_pb::Metadata file_level_metadata_FlatMessageSearchRequest_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_FlatMessageSearchRequest_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_FlatMessageSearchRequest_2eproto = nullptr;

const uint32_t TableStruct_FlatMessageSearchRequest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Search::FlatMessageSearchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Search::FlatMessageSearchRequest, _impl_.query_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Search::FlatMessageSearchRequest, _impl_.from_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Search::FlatMessageSearchRequest, _impl_.msgtype_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Search::FlatMessageSearchRequest, _impl_.groupid_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Search::FlatMessageSearchRequest, _impl_.timefilter_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Search::FlatMessageSearchRequest, _impl_.offset_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Search::FlatMessageSearchRequest, _impl_.msgcount_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Search::FlatMessageSearchRequest, _impl_.messagetype_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::AcFunDanmu::Im::Cloud::Search::FlatMessageSearchRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::AcFunDanmu::Im::Cloud::Search::_FlatMessageSearchRequest_default_instance_._instance,
};

const char descriptor_table_protodef_FlatMessageSearchRequest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036FlatMessageSearchRequest.proto\022\032AcFunD"
  "anmu.Im.Cloud.Search\032\024ImcMessageType.pro"
  "to\032\020TimeFilter.proto\032\nUser.proto\"\224\002\n\030Fla"
  "tMessageSearchRequest\022\r\n\005query\030\001 \003(\t\022\'\n\004"
  "from\030\002 \003(\0132\031.AcFunDanmu.Im.Basic.User\022<\n"
  "\007msgType\030\003 \001(\0162+.AcFunDanmu.Im.Cloud.Mes"
  "sage.ImcMessageType\022\017\n\007groupId\030\004 \003(\t\022:\n\n"
  "timeFilter\030\005 \001(\0132&.AcFunDanmu.Im.Cloud.S"
  "earch.TimeFilter\022\016\n\006offset\030\006 \001(\t\022\020\n\010msgC"
  "ount\030\007 \001(\005\022\023\n\013messageType\030\010 \003(\005b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_FlatMessageSearchRequest_2eproto_deps[3] = {
  &::descriptor_table_ImcMessageType_2eproto,
  &::descriptor_table_TimeFilter_2eproto,
  &::descriptor_table_User_2eproto,
};
static ::_pbi::once_flag descriptor_table_FlatMessageSearchRequest_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_FlatMessageSearchRequest_2eproto = {
    false, false, 399, descriptor_table_protodef_FlatMessageSearchRequest_2eproto,
    "FlatMessageSearchRequest.proto",
    &descriptor_table_FlatMessageSearchRequest_2eproto_once, descriptor_table_FlatMessageSearchRequest_2eproto_deps, 3, 1,
    schemas, file_default_instances, TableStruct_FlatMessageSearchRequest_2eproto::offsets,
    file_level_metadata_FlatMessageSearchRequest_2eproto, file_level_enum_descriptors_FlatMessageSearchRequest_2eproto,
    file_level_service_descriptors_FlatMessageSearchRequest_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_FlatMessageSearchRequest_2eproto_getter() {
  return &descriptor_table_FlatMessageSearchRequest_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_FlatMessageSearchRequest_2eproto(&descriptor_table_FlatMessageSearchRequest_2eproto);
namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Search {

// ===================================================================

class FlatMessageSearchRequest::_Internal {
 public:
  static const ::AcFunDanmu::Im::Cloud::Search::TimeFilter& timefilter(const FlatMessageSearchRequest* msg);
};

const ::AcFunDanmu::Im::Cloud::Search::TimeFilter&
FlatMessageSearchRequest::_Internal::timefilter(const FlatMessageSearchRequest* msg) {
  return *msg->_impl_.timefilter_;
}
void FlatMessageSearchRequest::clear_from() {
  _impl_.from_.Clear();
}
void FlatMessageSearchRequest::clear_timefilter() {
  if (GetArenaForAllocation() == nullptr && _impl_.timefilter_ != nullptr) {
    delete _impl_.timefilter_;
  }
  _impl_.timefilter_ = nullptr;
}
FlatMessageSearchRequest::FlatMessageSearchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest)
}
FlatMessageSearchRequest::FlatMessageSearchRequest(const FlatMessageSearchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FlatMessageSearchRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.query_){from._impl_.query_}
    , decltype(_impl_.from_){from._impl_.from_}
    , decltype(_impl_.groupid_){from._impl_.groupid_}
    , decltype(_impl_.messagetype_){from._impl_.messagetype_}
    , /*decltype(_impl_._messagetype_cached_byte_size_)*/{0}
    , decltype(_impl_.offset_){}
    , decltype(_impl_.timefilter_){nullptr}
    , decltype(_impl_.msgtype_){}
    , decltype(_impl_.msgcount_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.offset_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.offset_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_offset().empty()) {
    _this->_impl_.offset_.Set(from._internal_offset(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_timefilter()) {
    _this->_impl_.timefilter_ = new ::AcFunDanmu::Im::Cloud::Search::TimeFilter(*from._impl_.timefilter_);
  }
  ::memcpy(&_impl_.msgtype_, &from._impl_.msgtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.msgcount_) -
    reinterpret_cast<char*>(&_impl_.msgtype_)) + sizeof(_impl_.msgcount_));
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest)
}

inline void FlatMessageSearchRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.query_){arena}
    , decltype(_impl_.from_){arena}
    , decltype(_impl_.groupid_){arena}
    , decltype(_impl_.messagetype_){arena}
    , /*decltype(_impl_._messagetype_cached_byte_size_)*/{0}
    , decltype(_impl_.offset_){}
    , decltype(_impl_.timefilter_){nullptr}
    , decltype(_impl_.msgtype_){0}
    , decltype(_impl_.msgcount_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.offset_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.offset_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FlatMessageSearchRequest::~FlatMessageSearchRequest() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FlatMessageSearchRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.query_.~RepeatedPtrField();
  _impl_.from_.~RepeatedPtrField();
  _impl_.groupid_.~RepeatedPtrField();
  _impl_.messagetype_.~RepeatedField();
  _impl_.offset_.Destroy();
  if (this != internal_default_instance()) delete _impl_.timefilter_;
}

void FlatMessageSearchRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FlatMessageSearchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.query_.Clear();
  _impl_.from_.Clear();
  _impl_.groupid_.Clear();
  _impl_.messagetype_.Clear();
  _impl_.offset_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.timefilter_ != nullptr) {
    delete _impl_.timefilter_;
  }
  _impl_.timefilter_ = nullptr;
  ::memset(&_impl_.msgtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.msgcount_) -
      reinterpret_cast<char*>(&_impl_.msgtype_)) + sizeof(_impl_.msgcount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlatMessageSearchRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_query();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest.query"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .AcFunDanmu.Im.Basic.User from = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_from(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Cloud.Message.ImcMessageType msgType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_msgtype(static_cast<::AcFunDanmu::Im::Cloud::Message::ImcMessageType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string groupId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_groupid();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest.groupId"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Cloud.Search.TimeFilter timeFilter = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_timefilter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string offset = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_offset();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest.offset"));
        } else
          goto handle_unusual;
        continue;
      // int32 msgCount = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.msgcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 messageType = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_messagetype(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 64) {
          _internal_add_messagetype(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FlatMessageSearchRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string query = 1;
  for (int i = 0, n = this->_internal_query_size(); i < n; i++) {
    const auto& s = this->_internal_query(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest.query");
    target = stream->WriteString(1, s, target);
  }

  // repeated .AcFunDanmu.Im.Basic.User from = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_from_size()); i < n; i++) {
    const auto& repfield = this->_internal_from(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .AcFunDanmu.Im.Cloud.Message.ImcMessageType msgType = 3;
  if (this->_internal_msgtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_msgtype(), target);
  }

  // repeated string groupId = 4;
  for (int i = 0, n = this->_internal_groupid_size(); i < n; i++) {
    const auto& s = this->_internal_groupid(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest.groupId");
    target = stream->WriteString(4, s, target);
  }

  // .AcFunDanmu.Im.Cloud.Search.TimeFilter timeFilter = 5;
  if (this->_internal_has_timefilter()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::timefilter(this),
        _Internal::timefilter(this).GetCachedSize(), target, stream);
  }

  // string offset = 6;
  if (!this->_internal_offset().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_offset().data(), static_cast<int>(this->_internal_offset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest.offset");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_offset(), target);
  }

  // int32 msgCount = 7;
  if (this->_internal_msgcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_msgcount(), target);
  }

  // repeated int32 messageType = 8;
  {
    int byte_size = _impl_._messagetype_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          8, _internal_messagetype(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest)
  return target;
}

size_t FlatMessageSearchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string query = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.query_.size());
  for (int i = 0, n = _impl_.query_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.query_.Get(i));
  }

  // repeated .AcFunDanmu.Im.Basic.User from = 2;
  total_size += 1UL * this->_internal_from_size();
  for (const auto& msg : this->_impl_.from_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string groupId = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.groupid_.size());
  for (int i = 0, n = _impl_.groupid_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.groupid_.Get(i));
  }

  // repeated int32 messageType = 8;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.messagetype_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._messagetype_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string offset = 6;
  if (!this->_internal_offset().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_offset());
  }

  // .AcFunDanmu.Im.Cloud.Search.TimeFilter timeFilter = 5;
  if (this->_internal_has_timefilter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timefilter_);
  }

  // .AcFunDanmu.Im.Cloud.Message.ImcMessageType msgType = 3;
  if (this->_internal_msgtype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_msgtype());
  }

  // int32 msgCount = 7;
  if (this->_internal_msgcount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_msgcount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlatMessageSearchRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FlatMessageSearchRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlatMessageSearchRequest::GetClassData() const { return &_class_data_; }


void FlatMessageSearchRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FlatMessageSearchRequest*>(&to_msg);
  auto& from = static_cast<const FlatMessageSearchRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.query_.MergeFrom(from._impl_.query_);
  _this->_impl_.from_.MergeFrom(from._impl_.from_);
  _this->_impl_.groupid_.MergeFrom(from._impl_.groupid_);
  _this->_impl_.messagetype_.MergeFrom(from._impl_.messagetype_);
  if (!from._internal_offset().empty()) {
    _this->_internal_set_offset(from._internal_offset());
  }
  if (from._internal_has_timefilter()) {
    _this->_internal_mutable_timefilter()->::AcFunDanmu::Im::Cloud::Search::TimeFilter::MergeFrom(
        from._internal_timefilter());
  }
  if (from._internal_msgtype() != 0) {
    _this->_internal_set_msgtype(from._internal_msgtype());
  }
  if (from._internal_msgcount() != 0) {
    _this->_internal_set_msgcount(from._internal_msgcount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlatMessageSearchRequest::CopyFrom(const FlatMessageSearchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlatMessageSearchRequest::IsInitialized() const {
  return true;
}

void FlatMessageSearchRequest::InternalSwap(FlatMessageSearchRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.query_.InternalSwap(&other->_impl_.query_);
  _impl_.from_.InternalSwap(&other->_impl_.from_);
  _impl_.groupid_.InternalSwap(&other->_impl_.groupid_);
  _impl_.messagetype_.InternalSwap(&other->_impl_.messagetype_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.offset_, lhs_arena,
      &other->_impl_.offset_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FlatMessageSearchRequest, _impl_.msgcount_)
      + sizeof(FlatMessageSearchRequest::_impl_.msgcount_)
      - PROTOBUF_FIELD_OFFSET(FlatMessageSearchRequest, _impl_.timefilter_)>(
          reinterpret_cast<char*>(&_impl_.timefilter_),
          reinterpret_cast<char*>(&other->_impl_.timefilter_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FlatMessageSearchRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_FlatMessageSearchRequest_2eproto_getter, &descriptor_table_FlatMessageSearchRequest_2eproto_once,
      file_level_metadata_FlatMessageSearchRequest_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Search
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AcFunDanmu::Im::Cloud::Search::FlatMessageSearchRequest*
Arena::CreateMaybeMessage< ::AcFunDanmu::Im::Cloud::Search::FlatMessageSearchRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::Im::Cloud::Search::FlatMessageSearchRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
