// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GroupMember.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_GroupMember_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_GroupMember_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "User.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_GroupMember_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_GroupMember_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_GroupMember_2eproto;
namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Message {
class GroupMember;
struct GroupMemberDefaultTypeInternal;
extern GroupMemberDefaultTypeInternal _GroupMember_default_instance_;
}  // namespace Message
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::Im::Cloud::Message::GroupMember* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud::Message::GroupMember>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Message {

enum GroupMember_GroupMemberStatus : int {
  GroupMember_GroupMemberStatus_UNKNOWN_MEMBER_STATUS = 0,
  GroupMember_GroupMemberStatus_NORMAL = 1,
  GroupMember_GroupMemberStatus_QUITTED = 2,
  GroupMember_GroupMemberStatus_KICKED = 3,
  GroupMember_GroupMemberStatus_DISMISSED = 4,
  GroupMember_GroupMemberStatus_GroupMember_GroupMemberStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  GroupMember_GroupMemberStatus_GroupMember_GroupMemberStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool GroupMember_GroupMemberStatus_IsValid(int value);
constexpr GroupMember_GroupMemberStatus GroupMember_GroupMemberStatus_GroupMemberStatus_MIN = GroupMember_GroupMemberStatus_UNKNOWN_MEMBER_STATUS;
constexpr GroupMember_GroupMemberStatus GroupMember_GroupMemberStatus_GroupMemberStatus_MAX = GroupMember_GroupMemberStatus_DISMISSED;
constexpr int GroupMember_GroupMemberStatus_GroupMemberStatus_ARRAYSIZE = GroupMember_GroupMemberStatus_GroupMemberStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GroupMember_GroupMemberStatus_descriptor();
template<typename T>
inline const std::string& GroupMember_GroupMemberStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GroupMember_GroupMemberStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GroupMember_GroupMemberStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GroupMember_GroupMemberStatus_descriptor(), enum_t_value);
}
inline bool GroupMember_GroupMemberStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GroupMember_GroupMemberStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GroupMember_GroupMemberStatus>(
    GroupMember_GroupMemberStatus_descriptor(), name, value);
}
enum GroupMember_GroupMemberRole : int {
  GroupMember_GroupMemberRole_UNKNOWN_ROLE = 0,
  GroupMember_GroupMemberRole_COMMON = 1,
  GroupMember_GroupMemberRole_ADMIN = 2,
  GroupMember_GroupMemberRole_MANAGER = 3,
  GroupMember_GroupMemberRole_ROBOT = 4,
  GroupMember_GroupMemberRole_GroupMember_GroupMemberRole_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  GroupMember_GroupMemberRole_GroupMember_GroupMemberRole_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool GroupMember_GroupMemberRole_IsValid(int value);
constexpr GroupMember_GroupMemberRole GroupMember_GroupMemberRole_GroupMemberRole_MIN = GroupMember_GroupMemberRole_UNKNOWN_ROLE;
constexpr GroupMember_GroupMemberRole GroupMember_GroupMemberRole_GroupMemberRole_MAX = GroupMember_GroupMemberRole_ROBOT;
constexpr int GroupMember_GroupMemberRole_GroupMemberRole_ARRAYSIZE = GroupMember_GroupMemberRole_GroupMemberRole_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GroupMember_GroupMemberRole_descriptor();
template<typename T>
inline const std::string& GroupMember_GroupMemberRole_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GroupMember_GroupMemberRole>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GroupMember_GroupMemberRole_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GroupMember_GroupMemberRole_descriptor(), enum_t_value);
}
inline bool GroupMember_GroupMemberRole_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GroupMember_GroupMemberRole* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GroupMember_GroupMemberRole>(
    GroupMember_GroupMemberRole_descriptor(), name, value);
}
// ===================================================================

class GroupMember final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.GroupMember) */ {
 public:
  inline GroupMember() : GroupMember(nullptr) {}
  ~GroupMember() override;
  explicit PROTOBUF_CONSTEXPR GroupMember(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupMember(const GroupMember& from);
  GroupMember(GroupMember&& from) noexcept
    : GroupMember() {
    *this = ::std::move(from);
  }

  inline GroupMember& operator=(const GroupMember& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupMember& operator=(GroupMember&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupMember& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupMember* internal_default_instance() {
    return reinterpret_cast<const GroupMember*>(
               &_GroupMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GroupMember& a, GroupMember& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupMember* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupMember* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupMember* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupMember>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupMember& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupMember& from) {
    GroupMember::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupMember* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.GroupMember";
  }
  protected:
  explicit GroupMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GroupMember_GroupMemberStatus GroupMemberStatus;
  static constexpr GroupMemberStatus UNKNOWN_MEMBER_STATUS =
    GroupMember_GroupMemberStatus_UNKNOWN_MEMBER_STATUS;
  static constexpr GroupMemberStatus NORMAL =
    GroupMember_GroupMemberStatus_NORMAL;
  static constexpr GroupMemberStatus QUITTED =
    GroupMember_GroupMemberStatus_QUITTED;
  static constexpr GroupMemberStatus KICKED =
    GroupMember_GroupMemberStatus_KICKED;
  static constexpr GroupMemberStatus DISMISSED =
    GroupMember_GroupMemberStatus_DISMISSED;
  static inline bool GroupMemberStatus_IsValid(int value) {
    return GroupMember_GroupMemberStatus_IsValid(value);
  }
  static constexpr GroupMemberStatus GroupMemberStatus_MIN =
    GroupMember_GroupMemberStatus_GroupMemberStatus_MIN;
  static constexpr GroupMemberStatus GroupMemberStatus_MAX =
    GroupMember_GroupMemberStatus_GroupMemberStatus_MAX;
  static constexpr int GroupMemberStatus_ARRAYSIZE =
    GroupMember_GroupMemberStatus_GroupMemberStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  GroupMemberStatus_descriptor() {
    return GroupMember_GroupMemberStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& GroupMemberStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, GroupMemberStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function GroupMemberStatus_Name.");
    return GroupMember_GroupMemberStatus_Name(enum_t_value);
  }
  static inline bool GroupMemberStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      GroupMemberStatus* value) {
    return GroupMember_GroupMemberStatus_Parse(name, value);
  }

  typedef GroupMember_GroupMemberRole GroupMemberRole;
  static constexpr GroupMemberRole UNKNOWN_ROLE =
    GroupMember_GroupMemberRole_UNKNOWN_ROLE;
  static constexpr GroupMemberRole COMMON =
    GroupMember_GroupMemberRole_COMMON;
  static constexpr GroupMemberRole ADMIN =
    GroupMember_GroupMemberRole_ADMIN;
  static constexpr GroupMemberRole MANAGER =
    GroupMember_GroupMemberRole_MANAGER;
  static constexpr GroupMemberRole ROBOT =
    GroupMember_GroupMemberRole_ROBOT;
  static inline bool GroupMemberRole_IsValid(int value) {
    return GroupMember_GroupMemberRole_IsValid(value);
  }
  static constexpr GroupMemberRole GroupMemberRole_MIN =
    GroupMember_GroupMemberRole_GroupMemberRole_MIN;
  static constexpr GroupMemberRole GroupMemberRole_MAX =
    GroupMember_GroupMemberRole_GroupMemberRole_MAX;
  static constexpr int GroupMemberRole_ARRAYSIZE =
    GroupMember_GroupMemberRole_GroupMemberRole_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  GroupMemberRole_descriptor() {
    return GroupMember_GroupMemberRole_descriptor();
  }
  template<typename T>
  static inline const std::string& GroupMemberRole_Name(T enum_t_value) {
    static_assert(::std::is_same<T, GroupMemberRole>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function GroupMemberRole_Name.");
    return GroupMember_GroupMemberRole_Name(enum_t_value);
  }
  static inline bool GroupMemberRole_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      GroupMemberRole* value) {
    return GroupMember_GroupMemberRole_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 2,
    kUserFieldNumber = 1,
    kAntiDisturbingFieldNumber = 3,
    kStatusFieldNumber = 4,
    kInviterIdFieldNumber = 5,
    kJoinTimeFieldNumber = 6,
    kCreateTimeFieldNumber = 7,
    kUpdateTimeFieldNumber = 8,
    kRoleFieldNumber = 9,
    kFindTypeFieldNumber = 10,
    kKeepSilenceDeadlineFieldNumber = 11,
  };
  // string nickname = 2;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // .AcFunDanmu.Im.Basic.User user = 1;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::AcFunDanmu::Im::Basic::User& user() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Basic::User* release_user();
  ::AcFunDanmu::Im::Basic::User* mutable_user();
  void set_allocated_user(::AcFunDanmu::Im::Basic::User* user);
  private:
  const ::AcFunDanmu::Im::Basic::User& _internal_user() const;
  ::AcFunDanmu::Im::Basic::User* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::AcFunDanmu::Im::Basic::User* user);
  ::AcFunDanmu::Im::Basic::User* unsafe_arena_release_user();

  // bool antiDisturbing = 3;
  void clear_antidisturbing();
  bool antidisturbing() const;
  void set_antidisturbing(bool value);
  private:
  bool _internal_antidisturbing() const;
  void _internal_set_antidisturbing(bool value);
  public:

  // .AcFunDanmu.Im.Cloud.Message.GroupMember.GroupMemberStatus status = 4;
  void clear_status();
  ::AcFunDanmu::Im::Cloud::Message::GroupMember_GroupMemberStatus status() const;
  void set_status(::AcFunDanmu::Im::Cloud::Message::GroupMember_GroupMemberStatus value);
  private:
  ::AcFunDanmu::Im::Cloud::Message::GroupMember_GroupMemberStatus _internal_status() const;
  void _internal_set_status(::AcFunDanmu::Im::Cloud::Message::GroupMember_GroupMemberStatus value);
  public:

  // int64 inviterId = 5;
  void clear_inviterid();
  int64_t inviterid() const;
  void set_inviterid(int64_t value);
  private:
  int64_t _internal_inviterid() const;
  void _internal_set_inviterid(int64_t value);
  public:

  // int64 joinTime = 6;
  void clear_jointime();
  int64_t jointime() const;
  void set_jointime(int64_t value);
  private:
  int64_t _internal_jointime() const;
  void _internal_set_jointime(int64_t value);
  public:

  // int64 createTime = 7;
  void clear_createtime();
  int64_t createtime() const;
  void set_createtime(int64_t value);
  private:
  int64_t _internal_createtime() const;
  void _internal_set_createtime(int64_t value);
  public:

  // int64 updateTime = 8;
  void clear_updatetime();
  int64_t updatetime() const;
  void set_updatetime(int64_t value);
  private:
  int64_t _internal_updatetime() const;
  void _internal_set_updatetime(int64_t value);
  public:

  // .AcFunDanmu.Im.Cloud.Message.GroupMember.GroupMemberRole role = 9;
  void clear_role();
  ::AcFunDanmu::Im::Cloud::Message::GroupMember_GroupMemberRole role() const;
  void set_role(::AcFunDanmu::Im::Cloud::Message::GroupMember_GroupMemberRole value);
  private:
  ::AcFunDanmu::Im::Cloud::Message::GroupMember_GroupMemberRole _internal_role() const;
  void _internal_set_role(::AcFunDanmu::Im::Cloud::Message::GroupMember_GroupMemberRole value);
  public:

  // int32 findType = 10;
  void clear_findtype();
  int32_t findtype() const;
  void set_findtype(int32_t value);
  private:
  int32_t _internal_findtype() const;
  void _internal_set_findtype(int32_t value);
  public:

  // int64 keepSilenceDeadline = 11;
  void clear_keepsilencedeadline();
  int64_t keepsilencedeadline() const;
  void set_keepsilencedeadline(int64_t value);
  private:
  int64_t _internal_keepsilencedeadline() const;
  void _internal_set_keepsilencedeadline(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.GroupMember)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
    ::AcFunDanmu::Im::Basic::User* user_;
    bool antidisturbing_;
    int status_;
    int64_t inviterid_;
    int64_t jointime_;
    int64_t createtime_;
    int64_t updatetime_;
    int role_;
    int32_t findtype_;
    int64_t keepsilencedeadline_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GroupMember_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GroupMember

// .AcFunDanmu.Im.Basic.User user = 1;
inline bool GroupMember::_internal_has_user() const {
  return this != internal_default_instance() && _impl_.user_ != nullptr;
}
inline bool GroupMember::has_user() const {
  return _internal_has_user();
}
inline const ::AcFunDanmu::Im::Basic::User& GroupMember::_internal_user() const {
  const ::AcFunDanmu::Im::Basic::User* p = _impl_.user_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic::User&>(
      ::AcFunDanmu::Im::Basic::_User_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic::User& GroupMember::user() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupMember.user)
  return _internal_user();
}
inline void GroupMember::unsafe_arena_set_allocated_user(
    ::AcFunDanmu::Im::Basic::User* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_);
  }
  _impl_.user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupMember.user)
}
inline ::AcFunDanmu::Im::Basic::User* GroupMember::release_user() {
  
  ::AcFunDanmu::Im::Basic::User* temp = _impl_.user_;
  _impl_.user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AcFunDanmu::Im::Basic::User* GroupMember::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupMember.user)
  
  ::AcFunDanmu::Im::Basic::User* temp = _impl_.user_;
  _impl_.user_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic::User* GroupMember::_internal_mutable_user() {
  
  if (_impl_.user_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic::User>(GetArenaForAllocation());
    _impl_.user_ = p;
  }
  return _impl_.user_;
}
inline ::AcFunDanmu::Im::Basic::User* GroupMember::mutable_user() {
  ::AcFunDanmu::Im::Basic::User* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupMember.user)
  return _msg;
}
inline void GroupMember::set_allocated_user(::AcFunDanmu::Im::Basic::User* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_);
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user));
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.user_ = user;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupMember.user)
}

// string nickname = 2;
inline void GroupMember::clear_nickname() {
  _impl_.nickname_.ClearToEmpty();
}
inline const std::string& GroupMember::nickname() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupMember.nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupMember::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nickname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupMember.nickname)
}
inline std::string* GroupMember::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupMember.nickname)
  return _s;
}
inline const std::string& GroupMember::_internal_nickname() const {
  return _impl_.nickname_.Get();
}
inline void GroupMember::_internal_set_nickname(const std::string& value) {
  
  _impl_.nickname_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupMember::_internal_mutable_nickname() {
  
  return _impl_.nickname_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupMember::release_nickname() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupMember.nickname)
  return _impl_.nickname_.Release();
}
inline void GroupMember::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  _impl_.nickname_.SetAllocated(nickname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nickname_.IsDefault()) {
    _impl_.nickname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupMember.nickname)
}

// bool antiDisturbing = 3;
inline void GroupMember::clear_antidisturbing() {
  _impl_.antidisturbing_ = false;
}
inline bool GroupMember::_internal_antidisturbing() const {
  return _impl_.antidisturbing_;
}
inline bool GroupMember::antidisturbing() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupMember.antiDisturbing)
  return _internal_antidisturbing();
}
inline void GroupMember::_internal_set_antidisturbing(bool value) {
  
  _impl_.antidisturbing_ = value;
}
inline void GroupMember::set_antidisturbing(bool value) {
  _internal_set_antidisturbing(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupMember.antiDisturbing)
}

// .AcFunDanmu.Im.Cloud.Message.GroupMember.GroupMemberStatus status = 4;
inline void GroupMember::clear_status() {
  _impl_.status_ = 0;
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupMember_GroupMemberStatus GroupMember::_internal_status() const {
  return static_cast< ::AcFunDanmu::Im::Cloud::Message::GroupMember_GroupMemberStatus >(_impl_.status_);
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupMember_GroupMemberStatus GroupMember::status() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupMember.status)
  return _internal_status();
}
inline void GroupMember::_internal_set_status(::AcFunDanmu::Im::Cloud::Message::GroupMember_GroupMemberStatus value) {
  
  _impl_.status_ = value;
}
inline void GroupMember::set_status(::AcFunDanmu::Im::Cloud::Message::GroupMember_GroupMemberStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupMember.status)
}

// int64 inviterId = 5;
inline void GroupMember::clear_inviterid() {
  _impl_.inviterid_ = int64_t{0};
}
inline int64_t GroupMember::_internal_inviterid() const {
  return _impl_.inviterid_;
}
inline int64_t GroupMember::inviterid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupMember.inviterId)
  return _internal_inviterid();
}
inline void GroupMember::_internal_set_inviterid(int64_t value) {
  
  _impl_.inviterid_ = value;
}
inline void GroupMember::set_inviterid(int64_t value) {
  _internal_set_inviterid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupMember.inviterId)
}

// int64 joinTime = 6;
inline void GroupMember::clear_jointime() {
  _impl_.jointime_ = int64_t{0};
}
inline int64_t GroupMember::_internal_jointime() const {
  return _impl_.jointime_;
}
inline int64_t GroupMember::jointime() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupMember.joinTime)
  return _internal_jointime();
}
inline void GroupMember::_internal_set_jointime(int64_t value) {
  
  _impl_.jointime_ = value;
}
inline void GroupMember::set_jointime(int64_t value) {
  _internal_set_jointime(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupMember.joinTime)
}

// int64 createTime = 7;
inline void GroupMember::clear_createtime() {
  _impl_.createtime_ = int64_t{0};
}
inline int64_t GroupMember::_internal_createtime() const {
  return _impl_.createtime_;
}
inline int64_t GroupMember::createtime() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupMember.createTime)
  return _internal_createtime();
}
inline void GroupMember::_internal_set_createtime(int64_t value) {
  
  _impl_.createtime_ = value;
}
inline void GroupMember::set_createtime(int64_t value) {
  _internal_set_createtime(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupMember.createTime)
}

// int64 updateTime = 8;
inline void GroupMember::clear_updatetime() {
  _impl_.updatetime_ = int64_t{0};
}
inline int64_t GroupMember::_internal_updatetime() const {
  return _impl_.updatetime_;
}
inline int64_t GroupMember::updatetime() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupMember.updateTime)
  return _internal_updatetime();
}
inline void GroupMember::_internal_set_updatetime(int64_t value) {
  
  _impl_.updatetime_ = value;
}
inline void GroupMember::set_updatetime(int64_t value) {
  _internal_set_updatetime(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupMember.updateTime)
}

// .AcFunDanmu.Im.Cloud.Message.GroupMember.GroupMemberRole role = 9;
inline void GroupMember::clear_role() {
  _impl_.role_ = 0;
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupMember_GroupMemberRole GroupMember::_internal_role() const {
  return static_cast< ::AcFunDanmu::Im::Cloud::Message::GroupMember_GroupMemberRole >(_impl_.role_);
}
inline ::AcFunDanmu::Im::Cloud::Message::GroupMember_GroupMemberRole GroupMember::role() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupMember.role)
  return _internal_role();
}
inline void GroupMember::_internal_set_role(::AcFunDanmu::Im::Cloud::Message::GroupMember_GroupMemberRole value) {
  
  _impl_.role_ = value;
}
inline void GroupMember::set_role(::AcFunDanmu::Im::Cloud::Message::GroupMember_GroupMemberRole value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupMember.role)
}

// int32 findType = 10;
inline void GroupMember::clear_findtype() {
  _impl_.findtype_ = 0;
}
inline int32_t GroupMember::_internal_findtype() const {
  return _impl_.findtype_;
}
inline int32_t GroupMember::findtype() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupMember.findType)
  return _internal_findtype();
}
inline void GroupMember::_internal_set_findtype(int32_t value) {
  
  _impl_.findtype_ = value;
}
inline void GroupMember::set_findtype(int32_t value) {
  _internal_set_findtype(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupMember.findType)
}

// int64 keepSilenceDeadline = 11;
inline void GroupMember::clear_keepsilencedeadline() {
  _impl_.keepsilencedeadline_ = int64_t{0};
}
inline int64_t GroupMember::_internal_keepsilencedeadline() const {
  return _impl_.keepsilencedeadline_;
}
inline int64_t GroupMember::keepsilencedeadline() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupMember.keepSilenceDeadline)
  return _internal_keepsilencedeadline();
}
inline void GroupMember::_internal_set_keepsilencedeadline(int64_t value) {
  
  _impl_.keepsilencedeadline_ = value;
}
inline void GroupMember::set_keepsilencedeadline(int64_t value) {
  _internal_set_keepsilencedeadline(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupMember.keepSilenceDeadline)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Message
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::AcFunDanmu::Im::Cloud::Message::GroupMember_GroupMemberStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::Im::Cloud::Message::GroupMember_GroupMemberStatus>() {
  return ::AcFunDanmu::Im::Cloud::Message::GroupMember_GroupMemberStatus_descriptor();
}
template <> struct is_proto_enum< ::AcFunDanmu::Im::Cloud::Message::GroupMember_GroupMemberRole> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::Im::Cloud::Message::GroupMember_GroupMemberRole>() {
  return ::AcFunDanmu::Im::Cloud::Message::GroupMember_GroupMemberRole_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_GroupMember_2eproto
