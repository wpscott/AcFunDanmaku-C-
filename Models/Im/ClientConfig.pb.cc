// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientConfig.proto

#include "ClientConfig.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Config {
PROTOBUF_CONSTEXPR ClientConfig::ClientConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.clickmessagetype_)*/{}
  , /*decltype(_impl_._clickmessagetype_cached_byte_size_)*/{0}
  , /*decltype(_impl_.resourceuploadingdomain_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ktpuploadingdomain_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ztimapidomain_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.networkqualitydetectionconfig_)*/nullptr
  , /*decltype(_impl_.clientstatisticaldataconfig_)*/nullptr
  , /*decltype(_impl_.subbizaggregationconfig_)*/nullptr
  , /*decltype(_impl_.fetchuserstatusinterval_)*/0
  , /*decltype(_impl_.channeluserheartbeatinterval_)*/0
  , /*decltype(_impl_.inputtingtipdisplayinterval_)*/0
  , /*decltype(_impl_.batchsendmessagemaxcount_)*/0
  , /*decltype(_impl_.ktpfilelenthreshold_)*/0
  , /*decltype(_impl_.clientsyncminintervalms_)*/0
  , /*decltype(_impl_.downloadfilemaxlenperrequest_)*/0
  , /*decltype(_impl_.maxmessagebyteslength_)*/0
  , /*decltype(_impl_.sessiondeletionnotoveralldevice_)*/false
  , /*decltype(_impl_.disablesessionsyncwhenappswitchtoforeground_)*/false
  , /*decltype(_impl_.countvisiblemessagethreshold_)*/0
  , /*decltype(_impl_.maxmessagespreloadaftersessionsync_)*/0
  , /*decltype(_impl_.maxsessionsneedpreloadmessageaftersessionsync_)*/0
  , /*decltype(_impl_.voicecalltimeoutinterval_)*/0
  , /*decltype(_impl_.voicecallheartbeatinterval_)*/0
  , /*decltype(_impl_.autoretrymaxinterval_)*/0
  , /*decltype(_impl_.autoretrymaxtimes_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ClientConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientConfigDefaultTypeInternal() {}
  union {
    ClientConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientConfigDefaultTypeInternal _ClientConfig_default_instance_;
}  // namespace Config
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu
static ::_pb::Metadata file_level_metadata_ClientConfig_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_ClientConfig_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ClientConfig_2eproto = nullptr;

const uint32_t TableStruct_ClientConfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Config::ClientConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Config::ClientConfig, _impl_.fetchuserstatusinterval_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Config::ClientConfig, _impl_.channeluserheartbeatinterval_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Config::ClientConfig, _impl_.networkqualitydetectionconfig_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Config::ClientConfig, _impl_.inputtingtipdisplayinterval_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Config::ClientConfig, _impl_.batchsendmessagemaxcount_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Config::ClientConfig, _impl_.resourceuploadingdomain_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Config::ClientConfig, _impl_.ktpfilelenthreshold_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Config::ClientConfig, _impl_.ktpuploadingdomain_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Config::ClientConfig, _impl_.clientsyncminintervalms_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Config::ClientConfig, _impl_.downloadfilemaxlenperrequest_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Config::ClientConfig, _impl_.clientstatisticaldataconfig_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Config::ClientConfig, _impl_.maxmessagebyteslength_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Config::ClientConfig, _impl_.sessiondeletionnotoveralldevice_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Config::ClientConfig, _impl_.subbizaggregationconfig_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Config::ClientConfig, _impl_.countvisiblemessagethreshold_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Config::ClientConfig, _impl_.disablesessionsyncwhenappswitchtoforeground_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Config::ClientConfig, _impl_.maxmessagespreloadaftersessionsync_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Config::ClientConfig, _impl_.maxsessionsneedpreloadmessageaftersessionsync_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Config::ClientConfig, _impl_.ztimapidomain_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Config::ClientConfig, _impl_.voicecalltimeoutinterval_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Config::ClientConfig, _impl_.voicecallheartbeatinterval_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Config::ClientConfig, _impl_.clickmessagetype_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Config::ClientConfig, _impl_.autoretrymaxinterval_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Config::ClientConfig, _impl_.autoretrymaxtimes_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::AcFunDanmu::Im::Cloud::Config::ClientConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::AcFunDanmu::Im::Cloud::Config::_ClientConfig_default_instance_._instance,
};

const char descriptor_table_protodef_ClientConfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022ClientConfig.proto\022\032AcFunDanmu.Im.Clou"
  "d.Config\032!ClientStatisticalDataConfig.pr"
  "oto\032#NetworkQualityDetectionConfig.proto"
  "\032\035SubBizAggregationConfig.proto\"\211\010\n\014Clie"
  "ntConfig\022\037\n\027fetchUserStatusInterval\030\001 \001("
  "\005\022$\n\034channelUserHeartbeatInterval\030\002 \001(\005\022"
  "`\n\035networkQualityDetectionConfig\030\003 \001(\01329"
  ".AcFunDanmu.Im.Cloud.Config.NetworkQuali"
  "tyDetectionConfig\022#\n\033inputtingTipDisplay"
  "Interval\030\004 \001(\005\022 \n\030batchSendMessageMaxCou"
  "nt\030\005 \001(\005\022\037\n\027resourceUploadingDomain\030\006 \001("
  "\t\022\033\n\023ktpFileLenThreshold\030\007 \001(\005\022\032\n\022ktpUpl"
  "oadingDomain\030\010 \001(\t\022\037\n\027clientSyncMinInter"
  "valMs\030\t \001(\005\022$\n\034downloadFileMaxLenPerRequ"
  "est\030\n \001(\005\022\\\n\033clientStatisticalDataConfig"
  "\030\013 \001(\01327.AcFunDanmu.Im.Cloud.Config.Clie"
  "ntStatisticalDataConfig\022\035\n\025maxMessageByt"
  "esLength\030\014 \001(\005\022\'\n\037sessionDeletionNotOver"
  "AllDevice\030\r \001(\010\022T\n\027subBizAggregationConf"
  "ig\030\016 \001(\01323.AcFunDanmu.Im.Cloud.Config.Su"
  "bBizAggregationConfig\022$\n\034countVisibleMes"
  "sageThreshold\030\017 \001(\005\0223\n+disableSessionSyn"
  "cWhenAppSwitchToForeground\030\020 \001(\010\022*\n\"maxM"
  "essagesPreloadAfterSessionSync\030\021 \001(\005\0225\n-"
  "maxSessionsNeedPreloadMessageAfterSessio"
  "nSync\030\022 \001(\005\022\025\n\rztImApiDomain\030\023 \001(\t\022 \n\030vo"
  "iceCallTimeoutInterval\030\024 \001(\005\022\"\n\032voiceCal"
  "lHeartbeatInterval\030\025 \001(\005\022\030\n\020clickMessage"
  "Type\030\026 \003(\005\022\034\n\024autoRetryMaxInterval\030\027 \001(\005"
  "\022\031\n\021autoRetryMaxTimes\030\030 \001(\005b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_ClientConfig_2eproto_deps[3] = {
  &::descriptor_table_ClientStatisticalDataConfig_2eproto,
  &::descriptor_table_NetworkQualityDetectionConfig_2eproto,
  &::descriptor_table_SubBizAggregationConfig_2eproto,
};
static ::_pbi::once_flag descriptor_table_ClientConfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ClientConfig_2eproto = {
    false, false, 1195, descriptor_table_protodef_ClientConfig_2eproto,
    "ClientConfig.proto",
    &descriptor_table_ClientConfig_2eproto_once, descriptor_table_ClientConfig_2eproto_deps, 3, 1,
    schemas, file_default_instances, TableStruct_ClientConfig_2eproto::offsets,
    file_level_metadata_ClientConfig_2eproto, file_level_enum_descriptors_ClientConfig_2eproto,
    file_level_service_descriptors_ClientConfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ClientConfig_2eproto_getter() {
  return &descriptor_table_ClientConfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ClientConfig_2eproto(&descriptor_table_ClientConfig_2eproto);
namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Config {

// ===================================================================

class ClientConfig::_Internal {
 public:
  static const ::AcFunDanmu::Im::Cloud::Config::NetworkQualityDetectionConfig& networkqualitydetectionconfig(const ClientConfig* msg);
  static const ::AcFunDanmu::Im::Cloud::Config::ClientStatisticalDataConfig& clientstatisticaldataconfig(const ClientConfig* msg);
  static const ::AcFunDanmu::Im::Cloud::Config::SubBizAggregationConfig& subbizaggregationconfig(const ClientConfig* msg);
};

const ::AcFunDanmu::Im::Cloud::Config::NetworkQualityDetectionConfig&
ClientConfig::_Internal::networkqualitydetectionconfig(const ClientConfig* msg) {
  return *msg->_impl_.networkqualitydetectionconfig_;
}
const ::AcFunDanmu::Im::Cloud::Config::ClientStatisticalDataConfig&
ClientConfig::_Internal::clientstatisticaldataconfig(const ClientConfig* msg) {
  return *msg->_impl_.clientstatisticaldataconfig_;
}
const ::AcFunDanmu::Im::Cloud::Config::SubBizAggregationConfig&
ClientConfig::_Internal::subbizaggregationconfig(const ClientConfig* msg) {
  return *msg->_impl_.subbizaggregationconfig_;
}
void ClientConfig::clear_networkqualitydetectionconfig() {
  if (GetArenaForAllocation() == nullptr && _impl_.networkqualitydetectionconfig_ != nullptr) {
    delete _impl_.networkqualitydetectionconfig_;
  }
  _impl_.networkqualitydetectionconfig_ = nullptr;
}
void ClientConfig::clear_clientstatisticaldataconfig() {
  if (GetArenaForAllocation() == nullptr && _impl_.clientstatisticaldataconfig_ != nullptr) {
    delete _impl_.clientstatisticaldataconfig_;
  }
  _impl_.clientstatisticaldataconfig_ = nullptr;
}
void ClientConfig::clear_subbizaggregationconfig() {
  if (GetArenaForAllocation() == nullptr && _impl_.subbizaggregationconfig_ != nullptr) {
    delete _impl_.subbizaggregationconfig_;
  }
  _impl_.subbizaggregationconfig_ = nullptr;
}
ClientConfig::ClientConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.Im.Cloud.Config.ClientConfig)
}
ClientConfig::ClientConfig(const ClientConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClientConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.clickmessagetype_){from._impl_.clickmessagetype_}
    , /*decltype(_impl_._clickmessagetype_cached_byte_size_)*/{0}
    , decltype(_impl_.resourceuploadingdomain_){}
    , decltype(_impl_.ktpuploadingdomain_){}
    , decltype(_impl_.ztimapidomain_){}
    , decltype(_impl_.networkqualitydetectionconfig_){nullptr}
    , decltype(_impl_.clientstatisticaldataconfig_){nullptr}
    , decltype(_impl_.subbizaggregationconfig_){nullptr}
    , decltype(_impl_.fetchuserstatusinterval_){}
    , decltype(_impl_.channeluserheartbeatinterval_){}
    , decltype(_impl_.inputtingtipdisplayinterval_){}
    , decltype(_impl_.batchsendmessagemaxcount_){}
    , decltype(_impl_.ktpfilelenthreshold_){}
    , decltype(_impl_.clientsyncminintervalms_){}
    , decltype(_impl_.downloadfilemaxlenperrequest_){}
    , decltype(_impl_.maxmessagebyteslength_){}
    , decltype(_impl_.sessiondeletionnotoveralldevice_){}
    , decltype(_impl_.disablesessionsyncwhenappswitchtoforeground_){}
    , decltype(_impl_.countvisiblemessagethreshold_){}
    , decltype(_impl_.maxmessagespreloadaftersessionsync_){}
    , decltype(_impl_.maxsessionsneedpreloadmessageaftersessionsync_){}
    , decltype(_impl_.voicecalltimeoutinterval_){}
    , decltype(_impl_.voicecallheartbeatinterval_){}
    , decltype(_impl_.autoretrymaxinterval_){}
    , decltype(_impl_.autoretrymaxtimes_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.resourceuploadingdomain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resourceuploadingdomain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_resourceuploadingdomain().empty()) {
    _this->_impl_.resourceuploadingdomain_.Set(from._internal_resourceuploadingdomain(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ktpuploadingdomain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ktpuploadingdomain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ktpuploadingdomain().empty()) {
    _this->_impl_.ktpuploadingdomain_.Set(from._internal_ktpuploadingdomain(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ztimapidomain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ztimapidomain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ztimapidomain().empty()) {
    _this->_impl_.ztimapidomain_.Set(from._internal_ztimapidomain(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_networkqualitydetectionconfig()) {
    _this->_impl_.networkqualitydetectionconfig_ = new ::AcFunDanmu::Im::Cloud::Config::NetworkQualityDetectionConfig(*from._impl_.networkqualitydetectionconfig_);
  }
  if (from._internal_has_clientstatisticaldataconfig()) {
    _this->_impl_.clientstatisticaldataconfig_ = new ::AcFunDanmu::Im::Cloud::Config::ClientStatisticalDataConfig(*from._impl_.clientstatisticaldataconfig_);
  }
  if (from._internal_has_subbizaggregationconfig()) {
    _this->_impl_.subbizaggregationconfig_ = new ::AcFunDanmu::Im::Cloud::Config::SubBizAggregationConfig(*from._impl_.subbizaggregationconfig_);
  }
  ::memcpy(&_impl_.fetchuserstatusinterval_, &from._impl_.fetchuserstatusinterval_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.autoretrymaxtimes_) -
    reinterpret_cast<char*>(&_impl_.fetchuserstatusinterval_)) + sizeof(_impl_.autoretrymaxtimes_));
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.Im.Cloud.Config.ClientConfig)
}

inline void ClientConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.clickmessagetype_){arena}
    , /*decltype(_impl_._clickmessagetype_cached_byte_size_)*/{0}
    , decltype(_impl_.resourceuploadingdomain_){}
    , decltype(_impl_.ktpuploadingdomain_){}
    , decltype(_impl_.ztimapidomain_){}
    , decltype(_impl_.networkqualitydetectionconfig_){nullptr}
    , decltype(_impl_.clientstatisticaldataconfig_){nullptr}
    , decltype(_impl_.subbizaggregationconfig_){nullptr}
    , decltype(_impl_.fetchuserstatusinterval_){0}
    , decltype(_impl_.channeluserheartbeatinterval_){0}
    , decltype(_impl_.inputtingtipdisplayinterval_){0}
    , decltype(_impl_.batchsendmessagemaxcount_){0}
    , decltype(_impl_.ktpfilelenthreshold_){0}
    , decltype(_impl_.clientsyncminintervalms_){0}
    , decltype(_impl_.downloadfilemaxlenperrequest_){0}
    , decltype(_impl_.maxmessagebyteslength_){0}
    , decltype(_impl_.sessiondeletionnotoveralldevice_){false}
    , decltype(_impl_.disablesessionsyncwhenappswitchtoforeground_){false}
    , decltype(_impl_.countvisiblemessagethreshold_){0}
    , decltype(_impl_.maxmessagespreloadaftersessionsync_){0}
    , decltype(_impl_.maxsessionsneedpreloadmessageaftersessionsync_){0}
    , decltype(_impl_.voicecalltimeoutinterval_){0}
    , decltype(_impl_.voicecallheartbeatinterval_){0}
    , decltype(_impl_.autoretrymaxinterval_){0}
    , decltype(_impl_.autoretrymaxtimes_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.resourceuploadingdomain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resourceuploadingdomain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ktpuploadingdomain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ktpuploadingdomain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ztimapidomain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ztimapidomain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ClientConfig::~ClientConfig() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.Im.Cloud.Config.ClientConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.clickmessagetype_.~RepeatedField();
  _impl_.resourceuploadingdomain_.Destroy();
  _impl_.ktpuploadingdomain_.Destroy();
  _impl_.ztimapidomain_.Destroy();
  if (this != internal_default_instance()) delete _impl_.networkqualitydetectionconfig_;
  if (this != internal_default_instance()) delete _impl_.clientstatisticaldataconfig_;
  if (this != internal_default_instance()) delete _impl_.subbizaggregationconfig_;
}

void ClientConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClientConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.Im.Cloud.Config.ClientConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.clickmessagetype_.Clear();
  _impl_.resourceuploadingdomain_.ClearToEmpty();
  _impl_.ktpuploadingdomain_.ClearToEmpty();
  _impl_.ztimapidomain_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.networkqualitydetectionconfig_ != nullptr) {
    delete _impl_.networkqualitydetectionconfig_;
  }
  _impl_.networkqualitydetectionconfig_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.clientstatisticaldataconfig_ != nullptr) {
    delete _impl_.clientstatisticaldataconfig_;
  }
  _impl_.clientstatisticaldataconfig_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.subbizaggregationconfig_ != nullptr) {
    delete _impl_.subbizaggregationconfig_;
  }
  _impl_.subbizaggregationconfig_ = nullptr;
  ::memset(&_impl_.fetchuserstatusinterval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.autoretrymaxtimes_) -
      reinterpret_cast<char*>(&_impl_.fetchuserstatusinterval_)) + sizeof(_impl_.autoretrymaxtimes_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 fetchUserStatusInterval = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.fetchuserstatusinterval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 channelUserHeartbeatInterval = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.channeluserheartbeatinterval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Cloud.Config.NetworkQualityDetectionConfig networkQualityDetectionConfig = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_networkqualitydetectionconfig(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 inputtingTipDisplayInterval = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.inputtingtipdisplayinterval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 batchSendMessageMaxCount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.batchsendmessagemaxcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string resourceUploadingDomain = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_resourceuploadingdomain();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Cloud.Config.ClientConfig.resourceUploadingDomain"));
        } else
          goto handle_unusual;
        continue;
      // int32 ktpFileLenThreshold = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.ktpfilelenthreshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ktpUploadingDomain = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_ktpuploadingdomain();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Cloud.Config.ClientConfig.ktpUploadingDomain"));
        } else
          goto handle_unusual;
        continue;
      // int32 clientSyncMinIntervalMs = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.clientsyncminintervalms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 downloadFileMaxLenPerRequest = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.downloadfilemaxlenperrequest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Cloud.Config.ClientStatisticalDataConfig clientStatisticalDataConfig = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_clientstatisticaldataconfig(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 maxMessageBytesLength = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.maxmessagebyteslength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool sessionDeletionNotOverAllDevice = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.sessiondeletionnotoveralldevice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Cloud.Config.SubBizAggregationConfig subBizAggregationConfig = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_subbizaggregationconfig(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 countVisibleMessageThreshold = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.countvisiblemessagethreshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool disableSessionSyncWhenAppSwitchToForeground = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.disablesessionsyncwhenappswitchtoforeground_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 maxMessagesPreloadAfterSessionSync = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.maxmessagespreloadaftersessionsync_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 maxSessionsNeedPreloadMessageAfterSessionSync = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.maxsessionsneedpreloadmessageaftersessionsync_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ztImApiDomain = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_ztimapidomain();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Cloud.Config.ClientConfig.ztImApiDomain"));
        } else
          goto handle_unusual;
        continue;
      // int32 voiceCallTimeoutInterval = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.voicecalltimeoutinterval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 voiceCallHeartbeatInterval = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.voicecallheartbeatinterval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 clickMessageType = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_clickmessagetype(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 176) {
          _internal_add_clickmessagetype(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 autoRetryMaxInterval = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.autoretrymaxinterval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 autoRetryMaxTimes = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.autoretrymaxtimes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.Im.Cloud.Config.ClientConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 fetchUserStatusInterval = 1;
  if (this->_internal_fetchuserstatusinterval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_fetchuserstatusinterval(), target);
  }

  // int32 channelUserHeartbeatInterval = 2;
  if (this->_internal_channeluserheartbeatinterval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_channeluserheartbeatinterval(), target);
  }

  // .AcFunDanmu.Im.Cloud.Config.NetworkQualityDetectionConfig networkQualityDetectionConfig = 3;
  if (this->_internal_has_networkqualitydetectionconfig()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::networkqualitydetectionconfig(this),
        _Internal::networkqualitydetectionconfig(this).GetCachedSize(), target, stream);
  }

  // int32 inputtingTipDisplayInterval = 4;
  if (this->_internal_inputtingtipdisplayinterval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_inputtingtipdisplayinterval(), target);
  }

  // int32 batchSendMessageMaxCount = 5;
  if (this->_internal_batchsendmessagemaxcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_batchsendmessagemaxcount(), target);
  }

  // string resourceUploadingDomain = 6;
  if (!this->_internal_resourceuploadingdomain().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resourceuploadingdomain().data(), static_cast<int>(this->_internal_resourceuploadingdomain().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Cloud.Config.ClientConfig.resourceUploadingDomain");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_resourceuploadingdomain(), target);
  }

  // int32 ktpFileLenThreshold = 7;
  if (this->_internal_ktpfilelenthreshold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_ktpfilelenthreshold(), target);
  }

  // string ktpUploadingDomain = 8;
  if (!this->_internal_ktpuploadingdomain().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ktpuploadingdomain().data(), static_cast<int>(this->_internal_ktpuploadingdomain().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Cloud.Config.ClientConfig.ktpUploadingDomain");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_ktpuploadingdomain(), target);
  }

  // int32 clientSyncMinIntervalMs = 9;
  if (this->_internal_clientsyncminintervalms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_clientsyncminintervalms(), target);
  }

  // int32 downloadFileMaxLenPerRequest = 10;
  if (this->_internal_downloadfilemaxlenperrequest() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_downloadfilemaxlenperrequest(), target);
  }

  // .AcFunDanmu.Im.Cloud.Config.ClientStatisticalDataConfig clientStatisticalDataConfig = 11;
  if (this->_internal_has_clientstatisticaldataconfig()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::clientstatisticaldataconfig(this),
        _Internal::clientstatisticaldataconfig(this).GetCachedSize(), target, stream);
  }

  // int32 maxMessageBytesLength = 12;
  if (this->_internal_maxmessagebyteslength() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_maxmessagebyteslength(), target);
  }

  // bool sessionDeletionNotOverAllDevice = 13;
  if (this->_internal_sessiondeletionnotoveralldevice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_sessiondeletionnotoveralldevice(), target);
  }

  // .AcFunDanmu.Im.Cloud.Config.SubBizAggregationConfig subBizAggregationConfig = 14;
  if (this->_internal_has_subbizaggregationconfig()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::subbizaggregationconfig(this),
        _Internal::subbizaggregationconfig(this).GetCachedSize(), target, stream);
  }

  // int32 countVisibleMessageThreshold = 15;
  if (this->_internal_countvisiblemessagethreshold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_countvisiblemessagethreshold(), target);
  }

  // bool disableSessionSyncWhenAppSwitchToForeground = 16;
  if (this->_internal_disablesessionsyncwhenappswitchtoforeground() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_disablesessionsyncwhenappswitchtoforeground(), target);
  }

  // int32 maxMessagesPreloadAfterSessionSync = 17;
  if (this->_internal_maxmessagespreloadaftersessionsync() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_maxmessagespreloadaftersessionsync(), target);
  }

  // int32 maxSessionsNeedPreloadMessageAfterSessionSync = 18;
  if (this->_internal_maxsessionsneedpreloadmessageaftersessionsync() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_maxsessionsneedpreloadmessageaftersessionsync(), target);
  }

  // string ztImApiDomain = 19;
  if (!this->_internal_ztimapidomain().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ztimapidomain().data(), static_cast<int>(this->_internal_ztimapidomain().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Cloud.Config.ClientConfig.ztImApiDomain");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_ztimapidomain(), target);
  }

  // int32 voiceCallTimeoutInterval = 20;
  if (this->_internal_voicecalltimeoutinterval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(20, this->_internal_voicecalltimeoutinterval(), target);
  }

  // int32 voiceCallHeartbeatInterval = 21;
  if (this->_internal_voicecallheartbeatinterval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(21, this->_internal_voicecallheartbeatinterval(), target);
  }

  // repeated int32 clickMessageType = 22;
  {
    int byte_size = _impl_._clickmessagetype_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          22, _internal_clickmessagetype(), byte_size, target);
    }
  }

  // int32 autoRetryMaxInterval = 23;
  if (this->_internal_autoretrymaxinterval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(23, this->_internal_autoretrymaxinterval(), target);
  }

  // int32 autoRetryMaxTimes = 24;
  if (this->_internal_autoretrymaxtimes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(24, this->_internal_autoretrymaxtimes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.Im.Cloud.Config.ClientConfig)
  return target;
}

size_t ClientConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.Im.Cloud.Config.ClientConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 clickMessageType = 22;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.clickmessagetype_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._clickmessagetype_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string resourceUploadingDomain = 6;
  if (!this->_internal_resourceuploadingdomain().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resourceuploadingdomain());
  }

  // string ktpUploadingDomain = 8;
  if (!this->_internal_ktpuploadingdomain().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ktpuploadingdomain());
  }

  // string ztImApiDomain = 19;
  if (!this->_internal_ztimapidomain().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ztimapidomain());
  }

  // .AcFunDanmu.Im.Cloud.Config.NetworkQualityDetectionConfig networkQualityDetectionConfig = 3;
  if (this->_internal_has_networkqualitydetectionconfig()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.networkqualitydetectionconfig_);
  }

  // .AcFunDanmu.Im.Cloud.Config.ClientStatisticalDataConfig clientStatisticalDataConfig = 11;
  if (this->_internal_has_clientstatisticaldataconfig()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.clientstatisticaldataconfig_);
  }

  // .AcFunDanmu.Im.Cloud.Config.SubBizAggregationConfig subBizAggregationConfig = 14;
  if (this->_internal_has_subbizaggregationconfig()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.subbizaggregationconfig_);
  }

  // int32 fetchUserStatusInterval = 1;
  if (this->_internal_fetchuserstatusinterval() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_fetchuserstatusinterval());
  }

  // int32 channelUserHeartbeatInterval = 2;
  if (this->_internal_channeluserheartbeatinterval() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_channeluserheartbeatinterval());
  }

  // int32 inputtingTipDisplayInterval = 4;
  if (this->_internal_inputtingtipdisplayinterval() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_inputtingtipdisplayinterval());
  }

  // int32 batchSendMessageMaxCount = 5;
  if (this->_internal_batchsendmessagemaxcount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_batchsendmessagemaxcount());
  }

  // int32 ktpFileLenThreshold = 7;
  if (this->_internal_ktpfilelenthreshold() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ktpfilelenthreshold());
  }

  // int32 clientSyncMinIntervalMs = 9;
  if (this->_internal_clientsyncminintervalms() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_clientsyncminintervalms());
  }

  // int32 downloadFileMaxLenPerRequest = 10;
  if (this->_internal_downloadfilemaxlenperrequest() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_downloadfilemaxlenperrequest());
  }

  // int32 maxMessageBytesLength = 12;
  if (this->_internal_maxmessagebyteslength() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_maxmessagebyteslength());
  }

  // bool sessionDeletionNotOverAllDevice = 13;
  if (this->_internal_sessiondeletionnotoveralldevice() != 0) {
    total_size += 1 + 1;
  }

  // bool disableSessionSyncWhenAppSwitchToForeground = 16;
  if (this->_internal_disablesessionsyncwhenappswitchtoforeground() != 0) {
    total_size += 2 + 1;
  }

  // int32 countVisibleMessageThreshold = 15;
  if (this->_internal_countvisiblemessagethreshold() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_countvisiblemessagethreshold());
  }

  // int32 maxMessagesPreloadAfterSessionSync = 17;
  if (this->_internal_maxmessagespreloadaftersessionsync() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_maxmessagespreloadaftersessionsync());
  }

  // int32 maxSessionsNeedPreloadMessageAfterSessionSync = 18;
  if (this->_internal_maxsessionsneedpreloadmessageaftersessionsync() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_maxsessionsneedpreloadmessageaftersessionsync());
  }

  // int32 voiceCallTimeoutInterval = 20;
  if (this->_internal_voicecalltimeoutinterval() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_voicecalltimeoutinterval());
  }

  // int32 voiceCallHeartbeatInterval = 21;
  if (this->_internal_voicecallheartbeatinterval() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_voicecallheartbeatinterval());
  }

  // int32 autoRetryMaxInterval = 23;
  if (this->_internal_autoretrymaxinterval() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_autoretrymaxinterval());
  }

  // int32 autoRetryMaxTimes = 24;
  if (this->_internal_autoretrymaxtimes() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_autoretrymaxtimes());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClientConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientConfig::GetClassData() const { return &_class_data_; }


void ClientConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClientConfig*>(&to_msg);
  auto& from = static_cast<const ClientConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.Im.Cloud.Config.ClientConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.clickmessagetype_.MergeFrom(from._impl_.clickmessagetype_);
  if (!from._internal_resourceuploadingdomain().empty()) {
    _this->_internal_set_resourceuploadingdomain(from._internal_resourceuploadingdomain());
  }
  if (!from._internal_ktpuploadingdomain().empty()) {
    _this->_internal_set_ktpuploadingdomain(from._internal_ktpuploadingdomain());
  }
  if (!from._internal_ztimapidomain().empty()) {
    _this->_internal_set_ztimapidomain(from._internal_ztimapidomain());
  }
  if (from._internal_has_networkqualitydetectionconfig()) {
    _this->_internal_mutable_networkqualitydetectionconfig()->::AcFunDanmu::Im::Cloud::Config::NetworkQualityDetectionConfig::MergeFrom(
        from._internal_networkqualitydetectionconfig());
  }
  if (from._internal_has_clientstatisticaldataconfig()) {
    _this->_internal_mutable_clientstatisticaldataconfig()->::AcFunDanmu::Im::Cloud::Config::ClientStatisticalDataConfig::MergeFrom(
        from._internal_clientstatisticaldataconfig());
  }
  if (from._internal_has_subbizaggregationconfig()) {
    _this->_internal_mutable_subbizaggregationconfig()->::AcFunDanmu::Im::Cloud::Config::SubBizAggregationConfig::MergeFrom(
        from._internal_subbizaggregationconfig());
  }
  if (from._internal_fetchuserstatusinterval() != 0) {
    _this->_internal_set_fetchuserstatusinterval(from._internal_fetchuserstatusinterval());
  }
  if (from._internal_channeluserheartbeatinterval() != 0) {
    _this->_internal_set_channeluserheartbeatinterval(from._internal_channeluserheartbeatinterval());
  }
  if (from._internal_inputtingtipdisplayinterval() != 0) {
    _this->_internal_set_inputtingtipdisplayinterval(from._internal_inputtingtipdisplayinterval());
  }
  if (from._internal_batchsendmessagemaxcount() != 0) {
    _this->_internal_set_batchsendmessagemaxcount(from._internal_batchsendmessagemaxcount());
  }
  if (from._internal_ktpfilelenthreshold() != 0) {
    _this->_internal_set_ktpfilelenthreshold(from._internal_ktpfilelenthreshold());
  }
  if (from._internal_clientsyncminintervalms() != 0) {
    _this->_internal_set_clientsyncminintervalms(from._internal_clientsyncminintervalms());
  }
  if (from._internal_downloadfilemaxlenperrequest() != 0) {
    _this->_internal_set_downloadfilemaxlenperrequest(from._internal_downloadfilemaxlenperrequest());
  }
  if (from._internal_maxmessagebyteslength() != 0) {
    _this->_internal_set_maxmessagebyteslength(from._internal_maxmessagebyteslength());
  }
  if (from._internal_sessiondeletionnotoveralldevice() != 0) {
    _this->_internal_set_sessiondeletionnotoveralldevice(from._internal_sessiondeletionnotoveralldevice());
  }
  if (from._internal_disablesessionsyncwhenappswitchtoforeground() != 0) {
    _this->_internal_set_disablesessionsyncwhenappswitchtoforeground(from._internal_disablesessionsyncwhenappswitchtoforeground());
  }
  if (from._internal_countvisiblemessagethreshold() != 0) {
    _this->_internal_set_countvisiblemessagethreshold(from._internal_countvisiblemessagethreshold());
  }
  if (from._internal_maxmessagespreloadaftersessionsync() != 0) {
    _this->_internal_set_maxmessagespreloadaftersessionsync(from._internal_maxmessagespreloadaftersessionsync());
  }
  if (from._internal_maxsessionsneedpreloadmessageaftersessionsync() != 0) {
    _this->_internal_set_maxsessionsneedpreloadmessageaftersessionsync(from._internal_maxsessionsneedpreloadmessageaftersessionsync());
  }
  if (from._internal_voicecalltimeoutinterval() != 0) {
    _this->_internal_set_voicecalltimeoutinterval(from._internal_voicecalltimeoutinterval());
  }
  if (from._internal_voicecallheartbeatinterval() != 0) {
    _this->_internal_set_voicecallheartbeatinterval(from._internal_voicecallheartbeatinterval());
  }
  if (from._internal_autoretrymaxinterval() != 0) {
    _this->_internal_set_autoretrymaxinterval(from._internal_autoretrymaxinterval());
  }
  if (from._internal_autoretrymaxtimes() != 0) {
    _this->_internal_set_autoretrymaxtimes(from._internal_autoretrymaxtimes());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientConfig::CopyFrom(const ClientConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.Im.Cloud.Config.ClientConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientConfig::IsInitialized() const {
  return true;
}

void ClientConfig::InternalSwap(ClientConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.clickmessagetype_.InternalSwap(&other->_impl_.clickmessagetype_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.resourceuploadingdomain_, lhs_arena,
      &other->_impl_.resourceuploadingdomain_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ktpuploadingdomain_, lhs_arena,
      &other->_impl_.ktpuploadingdomain_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ztimapidomain_, lhs_arena,
      &other->_impl_.ztimapidomain_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientConfig, _impl_.autoretrymaxtimes_)
      + sizeof(ClientConfig::_impl_.autoretrymaxtimes_)
      - PROTOBUF_FIELD_OFFSET(ClientConfig, _impl_.networkqualitydetectionconfig_)>(
          reinterpret_cast<char*>(&_impl_.networkqualitydetectionconfig_),
          reinterpret_cast<char*>(&other->_impl_.networkqualitydetectionconfig_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientConfig_2eproto_getter, &descriptor_table_ClientConfig_2eproto_once,
      file_level_metadata_ClientConfig_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Config
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AcFunDanmu::Im::Cloud::Config::ClientConfig*
Arena::CreateMaybeMessage< ::AcFunDanmu::Im::Cloud::Config::ClientConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::Im::Cloud::Config::ClientConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
