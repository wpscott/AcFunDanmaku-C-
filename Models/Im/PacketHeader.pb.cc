// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PacketHeader.proto

#include "PacketHeader.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace AcFunDanmu {
namespace Im {
namespace Basic {
PROTOBUF_CONSTEXPR PacketHeader::PacketHeader(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.features_)*/{}
  , /*decltype(_impl_._features_cached_byte_size_)*/{0}
  , /*decltype(_impl_.kpn_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tokeninfo_)*/nullptr
  , /*decltype(_impl_.uid_)*/int64_t{0}
  , /*decltype(_impl_.instanceid_)*/int64_t{0}
  , /*decltype(_impl_.appid_)*/0
  , /*decltype(_impl_.flags_)*/0u
  , /*decltype(_impl_.encodingtype_)*/0
  , /*decltype(_impl_.decodedpayloadlen_)*/0u
  , /*decltype(_impl_.seqid_)*/int64_t{0}
  , /*decltype(_impl_.encryptionmode_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PacketHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PacketHeaderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PacketHeaderDefaultTypeInternal() {}
  union {
    PacketHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PacketHeaderDefaultTypeInternal _PacketHeader_default_instance_;
}  // namespace Basic
}  // namespace Im
}  // namespace AcFunDanmu
static ::_pb::Metadata file_level_metadata_PacketHeader_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_PacketHeader_2eproto[4];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_PacketHeader_2eproto = nullptr;

const uint32_t TableStruct_PacketHeader_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::PacketHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::PacketHeader, _impl_.appid_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::PacketHeader, _impl_.uid_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::PacketHeader, _impl_.instanceid_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::PacketHeader, _impl_.flags_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::PacketHeader, _impl_.encodingtype_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::PacketHeader, _impl_.decodedpayloadlen_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::PacketHeader, _impl_.encryptionmode_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::PacketHeader, _impl_.tokeninfo_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::PacketHeader, _impl_.seqid_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::PacketHeader, _impl_.features_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::PacketHeader, _impl_.kpn_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::AcFunDanmu::Im::Basic::PacketHeader)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::AcFunDanmu::Im::Basic::_PacketHeader_default_instance_._instance,
};

const char descriptor_table_protodef_PacketHeader_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022PacketHeader.proto\022\023AcFunDanmu.Im.Basi"
  "c\032\017TokenInfo.proto\"\204\005\n\014PacketHeader\022\r\n\005a"
  "ppId\030\001 \001(\005\022\013\n\003uid\030\002 \001(\003\022\022\n\ninstanceId\030\003 "
  "\001(\003\022\r\n\005flags\030\005 \001(\r\022D\n\014encodingType\030\006 \001(\016"
  "2..AcFunDanmu.Im.Basic.PacketHeader.Enco"
  "dingType\022\031\n\021decodedPayloadLen\030\007 \001(\r\022H\n\016e"
  "ncryptionMode\030\010 \001(\01620.AcFunDanmu.Im.Basi"
  "c.PacketHeader.EncryptionMode\0221\n\ttokenIn"
  "fo\030\t \001(\0132\036.AcFunDanmu.Im.Basic.TokenInfo"
  "\022\r\n\005seqId\030\n \001(\003\022;\n\010features\030\013 \003(\0162).AcFu"
  "nDanmu.Im.Basic.PacketHeader.Feature\022\013\n\003"
  "kpn\030\014 \001(\t\"\?\n\005Flags\022\020\n\014kDirUpstream\020\000\022\022\n\016"
  "kDirDownstream\020\001\022\014\n\010kDirMask\020\001\032\002\020\001\"3\n\014En"
  "codingType\022\021\n\rkEncodingNone\020\000\022\020\n\014kEncodi"
  "ngLz4\020\001\"]\n\016EncryptionMode\022\023\n\017kEncryption"
  "None\020\000\022\033\n\027kEncryptionServiceToken\020\001\022\031\n\025k"
  "EncryptionSessionKey\020\002\")\n\007Feature\022\014\n\010kRe"
  "serve\020\000\022\020\n\014kCompressLz4\020\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_PacketHeader_2eproto_deps[1] = {
  &::descriptor_table_TokenInfo_2eproto,
};
static ::_pbi::once_flag descriptor_table_PacketHeader_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_PacketHeader_2eproto = {
    false, false, 713, descriptor_table_protodef_PacketHeader_2eproto,
    "PacketHeader.proto",
    &descriptor_table_PacketHeader_2eproto_once, descriptor_table_PacketHeader_2eproto_deps, 1, 1,
    schemas, file_default_instances, TableStruct_PacketHeader_2eproto::offsets,
    file_level_metadata_PacketHeader_2eproto, file_level_enum_descriptors_PacketHeader_2eproto,
    file_level_service_descriptors_PacketHeader_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_PacketHeader_2eproto_getter() {
  return &descriptor_table_PacketHeader_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_PacketHeader_2eproto(&descriptor_table_PacketHeader_2eproto);
namespace AcFunDanmu {
namespace Im {
namespace Basic {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PacketHeader_Flags_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_PacketHeader_2eproto);
  return file_level_enum_descriptors_PacketHeader_2eproto[0];
}
bool PacketHeader_Flags_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PacketHeader_Flags PacketHeader::kDirUpstream;
constexpr PacketHeader_Flags PacketHeader::kDirDownstream;
constexpr PacketHeader_Flags PacketHeader::kDirMask;
constexpr PacketHeader_Flags PacketHeader::Flags_MIN;
constexpr PacketHeader_Flags PacketHeader::Flags_MAX;
constexpr int PacketHeader::Flags_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PacketHeader_EncodingType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_PacketHeader_2eproto);
  return file_level_enum_descriptors_PacketHeader_2eproto[1];
}
bool PacketHeader_EncodingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PacketHeader_EncodingType PacketHeader::kEncodingNone;
constexpr PacketHeader_EncodingType PacketHeader::kEncodingLz4;
constexpr PacketHeader_EncodingType PacketHeader::EncodingType_MIN;
constexpr PacketHeader_EncodingType PacketHeader::EncodingType_MAX;
constexpr int PacketHeader::EncodingType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PacketHeader_EncryptionMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_PacketHeader_2eproto);
  return file_level_enum_descriptors_PacketHeader_2eproto[2];
}
bool PacketHeader_EncryptionMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PacketHeader_EncryptionMode PacketHeader::kEncryptionNone;
constexpr PacketHeader_EncryptionMode PacketHeader::kEncryptionServiceToken;
constexpr PacketHeader_EncryptionMode PacketHeader::kEncryptionSessionKey;
constexpr PacketHeader_EncryptionMode PacketHeader::EncryptionMode_MIN;
constexpr PacketHeader_EncryptionMode PacketHeader::EncryptionMode_MAX;
constexpr int PacketHeader::EncryptionMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PacketHeader_Feature_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_PacketHeader_2eproto);
  return file_level_enum_descriptors_PacketHeader_2eproto[3];
}
bool PacketHeader_Feature_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PacketHeader_Feature PacketHeader::kReserve;
constexpr PacketHeader_Feature PacketHeader::kCompressLz4;
constexpr PacketHeader_Feature PacketHeader::Feature_MIN;
constexpr PacketHeader_Feature PacketHeader::Feature_MAX;
constexpr int PacketHeader::Feature_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class PacketHeader::_Internal {
 public:
  static const ::AcFunDanmu::Im::Basic::TokenInfo& tokeninfo(const PacketHeader* msg);
};

const ::AcFunDanmu::Im::Basic::TokenInfo&
PacketHeader::_Internal::tokeninfo(const PacketHeader* msg) {
  return *msg->_impl_.tokeninfo_;
}
void PacketHeader::clear_tokeninfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.tokeninfo_ != nullptr) {
    delete _impl_.tokeninfo_;
  }
  _impl_.tokeninfo_ = nullptr;
}
PacketHeader::PacketHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.Im.Basic.PacketHeader)
}
PacketHeader::PacketHeader(const PacketHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PacketHeader* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.features_){from._impl_.features_}
    , /*decltype(_impl_._features_cached_byte_size_)*/{0}
    , decltype(_impl_.kpn_){}
    , decltype(_impl_.tokeninfo_){nullptr}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.instanceid_){}
    , decltype(_impl_.appid_){}
    , decltype(_impl_.flags_){}
    , decltype(_impl_.encodingtype_){}
    , decltype(_impl_.decodedpayloadlen_){}
    , decltype(_impl_.seqid_){}
    , decltype(_impl_.encryptionmode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.kpn_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.kpn_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_kpn().empty()) {
    _this->_impl_.kpn_.Set(from._internal_kpn(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_tokeninfo()) {
    _this->_impl_.tokeninfo_ = new ::AcFunDanmu::Im::Basic::TokenInfo(*from._impl_.tokeninfo_);
  }
  ::memcpy(&_impl_.uid_, &from._impl_.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.encryptionmode_) -
    reinterpret_cast<char*>(&_impl_.uid_)) + sizeof(_impl_.encryptionmode_));
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.Im.Basic.PacketHeader)
}

inline void PacketHeader::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.features_){arena}
    , /*decltype(_impl_._features_cached_byte_size_)*/{0}
    , decltype(_impl_.kpn_){}
    , decltype(_impl_.tokeninfo_){nullptr}
    , decltype(_impl_.uid_){int64_t{0}}
    , decltype(_impl_.instanceid_){int64_t{0}}
    , decltype(_impl_.appid_){0}
    , decltype(_impl_.flags_){0u}
    , decltype(_impl_.encodingtype_){0}
    , decltype(_impl_.decodedpayloadlen_){0u}
    , decltype(_impl_.seqid_){int64_t{0}}
    , decltype(_impl_.encryptionmode_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.kpn_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.kpn_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PacketHeader::~PacketHeader() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.Im.Basic.PacketHeader)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PacketHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.features_.~RepeatedField();
  _impl_.kpn_.Destroy();
  if (this != internal_default_instance()) delete _impl_.tokeninfo_;
}

void PacketHeader::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PacketHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.Im.Basic.PacketHeader)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.features_.Clear();
  _impl_.kpn_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.tokeninfo_ != nullptr) {
    delete _impl_.tokeninfo_;
  }
  _impl_.tokeninfo_ = nullptr;
  ::memset(&_impl_.uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.encryptionmode_) -
      reinterpret_cast<char*>(&_impl_.uid_)) + sizeof(_impl_.encryptionmode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PacketHeader::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 appId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 instanceId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.instanceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 flags = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Basic.PacketHeader.EncodingType encodingType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_encodingtype(static_cast<::AcFunDanmu::Im::Basic::PacketHeader_EncodingType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 decodedPayloadLen = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.decodedpayloadlen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Basic.PacketHeader.EncryptionMode encryptionMode = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_encryptionmode(static_cast<::AcFunDanmu::Im::Basic::PacketHeader_EncryptionMode>(val));
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Basic.TokenInfo tokenInfo = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_tokeninfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 seqId = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.seqid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .AcFunDanmu.Im.Basic.PacketHeader.Feature features = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_features(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 88) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_features(static_cast<::AcFunDanmu::Im::Basic::PacketHeader_Feature>(val));
        } else
          goto handle_unusual;
        continue;
      // string kpn = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_kpn();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Basic.PacketHeader.kpn"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PacketHeader::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.Im.Basic.PacketHeader)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 appId = 1;
  if (this->_internal_appid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_appid(), target);
  }

  // int64 uid = 2;
  if (this->_internal_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_uid(), target);
  }

  // int64 instanceId = 3;
  if (this->_internal_instanceid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_instanceid(), target);
  }

  // uint32 flags = 5;
  if (this->_internal_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_flags(), target);
  }

  // .AcFunDanmu.Im.Basic.PacketHeader.EncodingType encodingType = 6;
  if (this->_internal_encodingtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_encodingtype(), target);
  }

  // uint32 decodedPayloadLen = 7;
  if (this->_internal_decodedpayloadlen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_decodedpayloadlen(), target);
  }

  // .AcFunDanmu.Im.Basic.PacketHeader.EncryptionMode encryptionMode = 8;
  if (this->_internal_encryptionmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_encryptionmode(), target);
  }

  // .AcFunDanmu.Im.Basic.TokenInfo tokenInfo = 9;
  if (this->_internal_has_tokeninfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::tokeninfo(this),
        _Internal::tokeninfo(this).GetCachedSize(), target, stream);
  }

  // int64 seqId = 10;
  if (this->_internal_seqid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_seqid(), target);
  }

  // repeated .AcFunDanmu.Im.Basic.PacketHeader.Feature features = 11;
  {
    int byte_size = _impl_._features_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          11, _impl_.features_, byte_size, target);
    }
  }

  // string kpn = 12;
  if (!this->_internal_kpn().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_kpn().data(), static_cast<int>(this->_internal_kpn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Basic.PacketHeader.kpn");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_kpn(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.Im.Basic.PacketHeader)
  return target;
}

size_t PacketHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.Im.Basic.PacketHeader)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .AcFunDanmu.Im.Basic.PacketHeader.Feature features = 11;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_features_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_features(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._features_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string kpn = 12;
  if (!this->_internal_kpn().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_kpn());
  }

  // .AcFunDanmu.Im.Basic.TokenInfo tokenInfo = 9;
  if (this->_internal_has_tokeninfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tokeninfo_);
  }

  // int64 uid = 2;
  if (this->_internal_uid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_uid());
  }

  // int64 instanceId = 3;
  if (this->_internal_instanceid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_instanceid());
  }

  // int32 appId = 1;
  if (this->_internal_appid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_appid());
  }

  // uint32 flags = 5;
  if (this->_internal_flags() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
  }

  // .AcFunDanmu.Im.Basic.PacketHeader.EncodingType encodingType = 6;
  if (this->_internal_encodingtype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_encodingtype());
  }

  // uint32 decodedPayloadLen = 7;
  if (this->_internal_decodedpayloadlen() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_decodedpayloadlen());
  }

  // int64 seqId = 10;
  if (this->_internal_seqid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqid());
  }

  // .AcFunDanmu.Im.Basic.PacketHeader.EncryptionMode encryptionMode = 8;
  if (this->_internal_encryptionmode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_encryptionmode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PacketHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PacketHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PacketHeader::GetClassData() const { return &_class_data_; }


void PacketHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PacketHeader*>(&to_msg);
  auto& from = static_cast<const PacketHeader&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.Im.Basic.PacketHeader)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.features_.MergeFrom(from._impl_.features_);
  if (!from._internal_kpn().empty()) {
    _this->_internal_set_kpn(from._internal_kpn());
  }
  if (from._internal_has_tokeninfo()) {
    _this->_internal_mutable_tokeninfo()->::AcFunDanmu::Im::Basic::TokenInfo::MergeFrom(
        from._internal_tokeninfo());
  }
  if (from._internal_uid() != 0) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (from._internal_instanceid() != 0) {
    _this->_internal_set_instanceid(from._internal_instanceid());
  }
  if (from._internal_appid() != 0) {
    _this->_internal_set_appid(from._internal_appid());
  }
  if (from._internal_flags() != 0) {
    _this->_internal_set_flags(from._internal_flags());
  }
  if (from._internal_encodingtype() != 0) {
    _this->_internal_set_encodingtype(from._internal_encodingtype());
  }
  if (from._internal_decodedpayloadlen() != 0) {
    _this->_internal_set_decodedpayloadlen(from._internal_decodedpayloadlen());
  }
  if (from._internal_seqid() != 0) {
    _this->_internal_set_seqid(from._internal_seqid());
  }
  if (from._internal_encryptionmode() != 0) {
    _this->_internal_set_encryptionmode(from._internal_encryptionmode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PacketHeader::CopyFrom(const PacketHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.Im.Basic.PacketHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketHeader::IsInitialized() const {
  return true;
}

void PacketHeader::InternalSwap(PacketHeader* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.features_.InternalSwap(&other->_impl_.features_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.kpn_, lhs_arena,
      &other->_impl_.kpn_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PacketHeader, _impl_.encryptionmode_)
      + sizeof(PacketHeader::_impl_.encryptionmode_)
      - PROTOBUF_FIELD_OFFSET(PacketHeader, _impl_.tokeninfo_)>(
          reinterpret_cast<char*>(&_impl_.tokeninfo_),
          reinterpret_cast<char*>(&other->_impl_.tokeninfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PacketHeader::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_PacketHeader_2eproto_getter, &descriptor_table_PacketHeader_2eproto_once,
      file_level_metadata_PacketHeader_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Basic
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AcFunDanmu::Im::Basic::PacketHeader*
Arena::CreateMaybeMessage< ::AcFunDanmu::Im::Basic::PacketHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::Im::Basic::PacketHeader >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
