// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message.proto

#include "Message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace AcFunDanmu {
namespace Im {
namespace Message {
PROTOBUF_CONSTEXPR Message::Message(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.receivers_)*/{}
  , /*decltype(_impl_.excludereceivers_)*/{}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.backuptips_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.strtargetid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.extra_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.csextra_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fromuser_)*/nullptr
  , /*decltype(_impl_.touser_)*/nullptr
  , /*decltype(_impl_.reminder_)*/nullptr
  , /*decltype(_impl_.realfromuser_)*/nullptr
  , /*decltype(_impl_.seqid_)*/int64_t{0}
  , /*decltype(_impl_.clientseqid_)*/int64_t{0}
  , /*decltype(_impl_.timestampms_)*/int64_t{0}
  , /*decltype(_impl_.targetid_)*/int64_t{0}
  , /*decltype(_impl_.contenttype_)*/0
  , /*decltype(_impl_.sessionpriority_)*/0
  , /*decltype(_impl_.sessioncategoryid_)*/0
  , /*decltype(_impl_.sessionaccounttype_)*/0
  , /*decltype(_impl_.userrelationship_)*/0
  , /*decltype(_impl_.notcountunread_)*/false
  , /*decltype(_impl_.notautocreatesession_)*/false
  , /*decltype(_impl_.markdelete_)*/false
  , /*decltype(_impl_.receiptrequired_)*/false
  , /*decltype(_impl_.sessioninvisible_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageDefaultTypeInternal() {}
  union {
    Message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageDefaultTypeInternal _Message_default_instance_;
}  // namespace Message
}  // namespace Im
}  // namespace AcFunDanmu
static ::_pb::Metadata file_level_metadata_Message_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Message_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Message_2eproto = nullptr;

const uint32_t TableStruct_Message_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::Message, _impl_.seqid_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::Message, _impl_.clientseqid_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::Message, _impl_.timestampms_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::Message, _impl_.fromuser_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::Message, _impl_.targetid_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::Message, _impl_.touser_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::Message, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::Message, _impl_.contenttype_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::Message, _impl_.content_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::Message, _impl_.backuptips_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::Message, _impl_.receivers_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::Message, _impl_.notcountunread_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::Message, _impl_.sessionpriority_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::Message, _impl_.sessioncategoryid_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::Message, _impl_.sessionaccounttype_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::Message, _impl_.notautocreatesession_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::Message, _impl_.userrelationship_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::Message, _impl_.strtargetid_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::Message, _impl_.excludereceivers_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::Message, _impl_.markdelete_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::Message, _impl_.reminder_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::Message, _impl_.extra_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::Message, _impl_.receiptrequired_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::Message, _impl_.realfromuser_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::Message, _impl_.csextra_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::Message, _impl_.sessioninvisible_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::AcFunDanmu::Im::Message::Message)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::AcFunDanmu::Im::Message::_Message_default_instance_._instance,
};

const char descriptor_table_protodef_Message_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rMessage.proto\022\025AcFunDanmu.Im.Message\032\016"
  "Reminder.proto\032\nUser.proto\"\330\005\n\007Message\022\r"
  "\n\005seqId\030\001 \001(\003\022\023\n\013clientSeqId\030\002 \001(\003\022\023\n\013ti"
  "mestampMs\030\003 \001(\003\022+\n\010fromUser\030\004 \001(\0132\031.AcFu"
  "nDanmu.Im.Basic.User\022\020\n\010targetId\030\005 \001(\003\022)"
  "\n\006toUser\030\006 \001(\0132\031.AcFunDanmu.Im.Basic.Use"
  "r\022\r\n\005title\030\007 \001(\t\022\023\n\013contentType\030\010 \001(\005\022\017\n"
  "\007content\030\t \001(\014\022\022\n\nbackupTips\030\n \001(\t\022,\n\tre"
  "ceivers\030\013 \003(\0132\031.AcFunDanmu.Im.Basic.User"
  "\022\026\n\016notCountUnread\030\014 \001(\010\022\027\n\017sessionPrior"
  "ity\030\r \001(\005\022\031\n\021sessionCategoryId\030\016 \001(\005\022\032\n\022"
  "sessionAccountType\030\017 \001(\005\022\034\n\024notAutoCreat"
  "eSession\030\020 \001(\010\022\030\n\020userRelationship\030\021 \001(\005"
  "\022\023\n\013strTargetId\030\022 \001(\t\0223\n\020excludeReceiver"
  "s\030\023 \003(\0132\031.AcFunDanmu.Im.Basic.User\022\022\n\nma"
  "rkDelete\030\024 \001(\010\0221\n\010reminder\030\025 \001(\0132\037.AcFun"
  "Danmu.Im.Message.Reminder\022\r\n\005extra\030\026 \001(\014"
  "\022\027\n\017receiptRequired\030\027 \001(\010\022/\n\014realFromUse"
  "r\030\030 \001(\0132\031.AcFunDanmu.Im.Basic.User\022\017\n\007cs"
  "Extra\030\031 \001(\014\022\030\n\020sessionInvisible\030\032 \001(\010b\006p"
  "roto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_Message_2eproto_deps[2] = {
  &::descriptor_table_Reminder_2eproto,
  &::descriptor_table_User_2eproto,
};
static ::_pbi::once_flag descriptor_table_Message_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Message_2eproto = {
    false, false, 805, descriptor_table_protodef_Message_2eproto,
    "Message.proto",
    &descriptor_table_Message_2eproto_once, descriptor_table_Message_2eproto_deps, 2, 1,
    schemas, file_default_instances, TableStruct_Message_2eproto::offsets,
    file_level_metadata_Message_2eproto, file_level_enum_descriptors_Message_2eproto,
    file_level_service_descriptors_Message_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Message_2eproto_getter() {
  return &descriptor_table_Message_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Message_2eproto(&descriptor_table_Message_2eproto);
namespace AcFunDanmu {
namespace Im {
namespace Message {

// ===================================================================

class Message::_Internal {
 public:
  static const ::AcFunDanmu::Im::Basic::User& fromuser(const Message* msg);
  static const ::AcFunDanmu::Im::Basic::User& touser(const Message* msg);
  static const ::AcFunDanmu::Im::Message::Reminder& reminder(const Message* msg);
  static const ::AcFunDanmu::Im::Basic::User& realfromuser(const Message* msg);
};

const ::AcFunDanmu::Im::Basic::User&
Message::_Internal::fromuser(const Message* msg) {
  return *msg->_impl_.fromuser_;
}
const ::AcFunDanmu::Im::Basic::User&
Message::_Internal::touser(const Message* msg) {
  return *msg->_impl_.touser_;
}
const ::AcFunDanmu::Im::Message::Reminder&
Message::_Internal::reminder(const Message* msg) {
  return *msg->_impl_.reminder_;
}
const ::AcFunDanmu::Im::Basic::User&
Message::_Internal::realfromuser(const Message* msg) {
  return *msg->_impl_.realfromuser_;
}
void Message::clear_fromuser() {
  if (GetArenaForAllocation() == nullptr && _impl_.fromuser_ != nullptr) {
    delete _impl_.fromuser_;
  }
  _impl_.fromuser_ = nullptr;
}
void Message::clear_touser() {
  if (GetArenaForAllocation() == nullptr && _impl_.touser_ != nullptr) {
    delete _impl_.touser_;
  }
  _impl_.touser_ = nullptr;
}
void Message::clear_receivers() {
  _impl_.receivers_.Clear();
}
void Message::clear_excludereceivers() {
  _impl_.excludereceivers_.Clear();
}
void Message::clear_reminder() {
  if (GetArenaForAllocation() == nullptr && _impl_.reminder_ != nullptr) {
    delete _impl_.reminder_;
  }
  _impl_.reminder_ = nullptr;
}
void Message::clear_realfromuser() {
  if (GetArenaForAllocation() == nullptr && _impl_.realfromuser_ != nullptr) {
    delete _impl_.realfromuser_;
  }
  _impl_.realfromuser_ = nullptr;
}
Message::Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.Im.Message.Message)
}
Message::Message(const Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.receivers_){from._impl_.receivers_}
    , decltype(_impl_.excludereceivers_){from._impl_.excludereceivers_}
    , decltype(_impl_.title_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.backuptips_){}
    , decltype(_impl_.strtargetid_){}
    , decltype(_impl_.extra_){}
    , decltype(_impl_.csextra_){}
    , decltype(_impl_.fromuser_){nullptr}
    , decltype(_impl_.touser_){nullptr}
    , decltype(_impl_.reminder_){nullptr}
    , decltype(_impl_.realfromuser_){nullptr}
    , decltype(_impl_.seqid_){}
    , decltype(_impl_.clientseqid_){}
    , decltype(_impl_.timestampms_){}
    , decltype(_impl_.targetid_){}
    , decltype(_impl_.contenttype_){}
    , decltype(_impl_.sessionpriority_){}
    , decltype(_impl_.sessioncategoryid_){}
    , decltype(_impl_.sessionaccounttype_){}
    , decltype(_impl_.userrelationship_){}
    , decltype(_impl_.notcountunread_){}
    , decltype(_impl_.notautocreatesession_){}
    , decltype(_impl_.markdelete_){}
    , decltype(_impl_.receiptrequired_){}
    , decltype(_impl_.sessioninvisible_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  _impl_.backuptips_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.backuptips_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_backuptips().empty()) {
    _this->_impl_.backuptips_.Set(from._internal_backuptips(), 
      _this->GetArenaForAllocation());
  }
  _impl_.strtargetid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.strtargetid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_strtargetid().empty()) {
    _this->_impl_.strtargetid_.Set(from._internal_strtargetid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.extra_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extra_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_extra().empty()) {
    _this->_impl_.extra_.Set(from._internal_extra(), 
      _this->GetArenaForAllocation());
  }
  _impl_.csextra_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.csextra_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_csextra().empty()) {
    _this->_impl_.csextra_.Set(from._internal_csextra(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_fromuser()) {
    _this->_impl_.fromuser_ = new ::AcFunDanmu::Im::Basic::User(*from._impl_.fromuser_);
  }
  if (from._internal_has_touser()) {
    _this->_impl_.touser_ = new ::AcFunDanmu::Im::Basic::User(*from._impl_.touser_);
  }
  if (from._internal_has_reminder()) {
    _this->_impl_.reminder_ = new ::AcFunDanmu::Im::Message::Reminder(*from._impl_.reminder_);
  }
  if (from._internal_has_realfromuser()) {
    _this->_impl_.realfromuser_ = new ::AcFunDanmu::Im::Basic::User(*from._impl_.realfromuser_);
  }
  ::memcpy(&_impl_.seqid_, &from._impl_.seqid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sessioninvisible_) -
    reinterpret_cast<char*>(&_impl_.seqid_)) + sizeof(_impl_.sessioninvisible_));
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.Im.Message.Message)
}

inline void Message::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.receivers_){arena}
    , decltype(_impl_.excludereceivers_){arena}
    , decltype(_impl_.title_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.backuptips_){}
    , decltype(_impl_.strtargetid_){}
    , decltype(_impl_.extra_){}
    , decltype(_impl_.csextra_){}
    , decltype(_impl_.fromuser_){nullptr}
    , decltype(_impl_.touser_){nullptr}
    , decltype(_impl_.reminder_){nullptr}
    , decltype(_impl_.realfromuser_){nullptr}
    , decltype(_impl_.seqid_){int64_t{0}}
    , decltype(_impl_.clientseqid_){int64_t{0}}
    , decltype(_impl_.timestampms_){int64_t{0}}
    , decltype(_impl_.targetid_){int64_t{0}}
    , decltype(_impl_.contenttype_){0}
    , decltype(_impl_.sessionpriority_){0}
    , decltype(_impl_.sessioncategoryid_){0}
    , decltype(_impl_.sessionaccounttype_){0}
    , decltype(_impl_.userrelationship_){0}
    , decltype(_impl_.notcountunread_){false}
    , decltype(_impl_.notautocreatesession_){false}
    , decltype(_impl_.markdelete_){false}
    , decltype(_impl_.receiptrequired_){false}
    , decltype(_impl_.sessioninvisible_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.backuptips_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.backuptips_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.strtargetid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.strtargetid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.extra_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extra_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.csextra_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.csextra_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.Im.Message.Message)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.receivers_.~RepeatedPtrField();
  _impl_.excludereceivers_.~RepeatedPtrField();
  _impl_.title_.Destroy();
  _impl_.content_.Destroy();
  _impl_.backuptips_.Destroy();
  _impl_.strtargetid_.Destroy();
  _impl_.extra_.Destroy();
  _impl_.csextra_.Destroy();
  if (this != internal_default_instance()) delete _impl_.fromuser_;
  if (this != internal_default_instance()) delete _impl_.touser_;
  if (this != internal_default_instance()) delete _impl_.reminder_;
  if (this != internal_default_instance()) delete _impl_.realfromuser_;
}

void Message::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.Im.Message.Message)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.receivers_.Clear();
  _impl_.excludereceivers_.Clear();
  _impl_.title_.ClearToEmpty();
  _impl_.content_.ClearToEmpty();
  _impl_.backuptips_.ClearToEmpty();
  _impl_.strtargetid_.ClearToEmpty();
  _impl_.extra_.ClearToEmpty();
  _impl_.csextra_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.fromuser_ != nullptr) {
    delete _impl_.fromuser_;
  }
  _impl_.fromuser_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.touser_ != nullptr) {
    delete _impl_.touser_;
  }
  _impl_.touser_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.reminder_ != nullptr) {
    delete _impl_.reminder_;
  }
  _impl_.reminder_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.realfromuser_ != nullptr) {
    delete _impl_.realfromuser_;
  }
  _impl_.realfromuser_ = nullptr;
  ::memset(&_impl_.seqid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.sessioninvisible_) -
      reinterpret_cast<char*>(&_impl_.seqid_)) + sizeof(_impl_.sessioninvisible_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 seqId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.seqid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 clientSeqId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.clientseqid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestampMs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.timestampms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Basic.User fromUser = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_fromuser(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 targetId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.targetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Basic.User toUser = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_touser(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string title = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Message.Message.title"));
        } else
          goto handle_unusual;
        continue;
      // int32 contentType = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.contenttype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes content = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string backupTips = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_backuptips();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Message.Message.backupTips"));
        } else
          goto handle_unusual;
        continue;
      // repeated .AcFunDanmu.Im.Basic.User receivers = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_receivers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool notCountUnread = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.notcountunread_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 sessionPriority = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.sessionpriority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 sessionCategoryId = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.sessioncategoryid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 sessionAccountType = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.sessionaccounttype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool notAutoCreateSession = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.notautocreatesession_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 userRelationship = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.userrelationship_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string strTargetId = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_strtargetid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Message.Message.strTargetId"));
        } else
          goto handle_unusual;
        continue;
      // repeated .AcFunDanmu.Im.Basic.User excludeReceivers = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_excludereceivers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool markDelete = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.markdelete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Message.Reminder reminder = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_reminder(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes extra = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_extra();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool receiptRequired = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.receiptrequired_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Basic.User realFromUser = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_realfromuser(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes csExtra = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          auto str = _internal_mutable_csextra();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool sessionInvisible = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _impl_.sessioninvisible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.Im.Message.Message)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 seqId = 1;
  if (this->_internal_seqid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_seqid(), target);
  }

  // int64 clientSeqId = 2;
  if (this->_internal_clientseqid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_clientseqid(), target);
  }

  // int64 timestampMs = 3;
  if (this->_internal_timestampms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_timestampms(), target);
  }

  // .AcFunDanmu.Im.Basic.User fromUser = 4;
  if (this->_internal_has_fromuser()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::fromuser(this),
        _Internal::fromuser(this).GetCachedSize(), target, stream);
  }

  // int64 targetId = 5;
  if (this->_internal_targetid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_targetid(), target);
  }

  // .AcFunDanmu.Im.Basic.User toUser = 6;
  if (this->_internal_has_touser()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::touser(this),
        _Internal::touser(this).GetCachedSize(), target, stream);
  }

  // string title = 7;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Message.Message.title");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_title(), target);
  }

  // int32 contentType = 8;
  if (this->_internal_contenttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_contenttype(), target);
  }

  // bytes content = 9;
  if (!this->_internal_content().empty()) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_content(), target);
  }

  // string backupTips = 10;
  if (!this->_internal_backuptips().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_backuptips().data(), static_cast<int>(this->_internal_backuptips().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Message.Message.backupTips");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_backuptips(), target);
  }

  // repeated .AcFunDanmu.Im.Basic.User receivers = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_receivers_size()); i < n; i++) {
    const auto& repfield = this->_internal_receivers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool notCountUnread = 12;
  if (this->_internal_notcountunread() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_notcountunread(), target);
  }

  // int32 sessionPriority = 13;
  if (this->_internal_sessionpriority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_sessionpriority(), target);
  }

  // int32 sessionCategoryId = 14;
  if (this->_internal_sessioncategoryid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_sessioncategoryid(), target);
  }

  // int32 sessionAccountType = 15;
  if (this->_internal_sessionaccounttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_sessionaccounttype(), target);
  }

  // bool notAutoCreateSession = 16;
  if (this->_internal_notautocreatesession() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_notautocreatesession(), target);
  }

  // int32 userRelationship = 17;
  if (this->_internal_userrelationship() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_userrelationship(), target);
  }

  // string strTargetId = 18;
  if (!this->_internal_strtargetid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_strtargetid().data(), static_cast<int>(this->_internal_strtargetid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Message.Message.strTargetId");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_strtargetid(), target);
  }

  // repeated .AcFunDanmu.Im.Basic.User excludeReceivers = 19;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_excludereceivers_size()); i < n; i++) {
    const auto& repfield = this->_internal_excludereceivers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(19, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool markDelete = 20;
  if (this->_internal_markdelete() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(20, this->_internal_markdelete(), target);
  }

  // .AcFunDanmu.Im.Message.Reminder reminder = 21;
  if (this->_internal_has_reminder()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::reminder(this),
        _Internal::reminder(this).GetCachedSize(), target, stream);
  }

  // bytes extra = 22;
  if (!this->_internal_extra().empty()) {
    target = stream->WriteBytesMaybeAliased(
        22, this->_internal_extra(), target);
  }

  // bool receiptRequired = 23;
  if (this->_internal_receiptrequired() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(23, this->_internal_receiptrequired(), target);
  }

  // .AcFunDanmu.Im.Basic.User realFromUser = 24;
  if (this->_internal_has_realfromuser()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::realfromuser(this),
        _Internal::realfromuser(this).GetCachedSize(), target, stream);
  }

  // bytes csExtra = 25;
  if (!this->_internal_csextra().empty()) {
    target = stream->WriteBytesMaybeAliased(
        25, this->_internal_csextra(), target);
  }

  // bool sessionInvisible = 26;
  if (this->_internal_sessioninvisible() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(26, this->_internal_sessioninvisible(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.Im.Message.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.Im.Message.Message)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .AcFunDanmu.Im.Basic.User receivers = 11;
  total_size += 1UL * this->_internal_receivers_size();
  for (const auto& msg : this->_impl_.receivers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .AcFunDanmu.Im.Basic.User excludeReceivers = 19;
  total_size += 2UL * this->_internal_excludereceivers_size();
  for (const auto& msg : this->_impl_.excludereceivers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string title = 7;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // bytes content = 9;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_content());
  }

  // string backupTips = 10;
  if (!this->_internal_backuptips().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_backuptips());
  }

  // string strTargetId = 18;
  if (!this->_internal_strtargetid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strtargetid());
  }

  // bytes extra = 22;
  if (!this->_internal_extra().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_extra());
  }

  // bytes csExtra = 25;
  if (!this->_internal_csextra().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_csextra());
  }

  // .AcFunDanmu.Im.Basic.User fromUser = 4;
  if (this->_internal_has_fromuser()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fromuser_);
  }

  // .AcFunDanmu.Im.Basic.User toUser = 6;
  if (this->_internal_has_touser()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.touser_);
  }

  // .AcFunDanmu.Im.Message.Reminder reminder = 21;
  if (this->_internal_has_reminder()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.reminder_);
  }

  // .AcFunDanmu.Im.Basic.User realFromUser = 24;
  if (this->_internal_has_realfromuser()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.realfromuser_);
  }

  // int64 seqId = 1;
  if (this->_internal_seqid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqid());
  }

  // int64 clientSeqId = 2;
  if (this->_internal_clientseqid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_clientseqid());
  }

  // int64 timestampMs = 3;
  if (this->_internal_timestampms() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestampms());
  }

  // int64 targetId = 5;
  if (this->_internal_targetid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_targetid());
  }

  // int32 contentType = 8;
  if (this->_internal_contenttype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_contenttype());
  }

  // int32 sessionPriority = 13;
  if (this->_internal_sessionpriority() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sessionpriority());
  }

  // int32 sessionCategoryId = 14;
  if (this->_internal_sessioncategoryid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sessioncategoryid());
  }

  // int32 sessionAccountType = 15;
  if (this->_internal_sessionaccounttype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sessionaccounttype());
  }

  // int32 userRelationship = 17;
  if (this->_internal_userrelationship() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_userrelationship());
  }

  // bool notCountUnread = 12;
  if (this->_internal_notcountunread() != 0) {
    total_size += 1 + 1;
  }

  // bool notAutoCreateSession = 16;
  if (this->_internal_notautocreatesession() != 0) {
    total_size += 2 + 1;
  }

  // bool markDelete = 20;
  if (this->_internal_markdelete() != 0) {
    total_size += 2 + 1;
  }

  // bool receiptRequired = 23;
  if (this->_internal_receiptrequired() != 0) {
    total_size += 2 + 1;
  }

  // bool sessionInvisible = 26;
  if (this->_internal_sessioninvisible() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message::GetClassData() const { return &_class_data_; }


void Message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message*>(&to_msg);
  auto& from = static_cast<const Message&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.Im.Message.Message)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.receivers_.MergeFrom(from._impl_.receivers_);
  _this->_impl_.excludereceivers_.MergeFrom(from._impl_.excludereceivers_);
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (!from._internal_backuptips().empty()) {
    _this->_internal_set_backuptips(from._internal_backuptips());
  }
  if (!from._internal_strtargetid().empty()) {
    _this->_internal_set_strtargetid(from._internal_strtargetid());
  }
  if (!from._internal_extra().empty()) {
    _this->_internal_set_extra(from._internal_extra());
  }
  if (!from._internal_csextra().empty()) {
    _this->_internal_set_csextra(from._internal_csextra());
  }
  if (from._internal_has_fromuser()) {
    _this->_internal_mutable_fromuser()->::AcFunDanmu::Im::Basic::User::MergeFrom(
        from._internal_fromuser());
  }
  if (from._internal_has_touser()) {
    _this->_internal_mutable_touser()->::AcFunDanmu::Im::Basic::User::MergeFrom(
        from._internal_touser());
  }
  if (from._internal_has_reminder()) {
    _this->_internal_mutable_reminder()->::AcFunDanmu::Im::Message::Reminder::MergeFrom(
        from._internal_reminder());
  }
  if (from._internal_has_realfromuser()) {
    _this->_internal_mutable_realfromuser()->::AcFunDanmu::Im::Basic::User::MergeFrom(
        from._internal_realfromuser());
  }
  if (from._internal_seqid() != 0) {
    _this->_internal_set_seqid(from._internal_seqid());
  }
  if (from._internal_clientseqid() != 0) {
    _this->_internal_set_clientseqid(from._internal_clientseqid());
  }
  if (from._internal_timestampms() != 0) {
    _this->_internal_set_timestampms(from._internal_timestampms());
  }
  if (from._internal_targetid() != 0) {
    _this->_internal_set_targetid(from._internal_targetid());
  }
  if (from._internal_contenttype() != 0) {
    _this->_internal_set_contenttype(from._internal_contenttype());
  }
  if (from._internal_sessionpriority() != 0) {
    _this->_internal_set_sessionpriority(from._internal_sessionpriority());
  }
  if (from._internal_sessioncategoryid() != 0) {
    _this->_internal_set_sessioncategoryid(from._internal_sessioncategoryid());
  }
  if (from._internal_sessionaccounttype() != 0) {
    _this->_internal_set_sessionaccounttype(from._internal_sessionaccounttype());
  }
  if (from._internal_userrelationship() != 0) {
    _this->_internal_set_userrelationship(from._internal_userrelationship());
  }
  if (from._internal_notcountunread() != 0) {
    _this->_internal_set_notcountunread(from._internal_notcountunread());
  }
  if (from._internal_notautocreatesession() != 0) {
    _this->_internal_set_notautocreatesession(from._internal_notautocreatesession());
  }
  if (from._internal_markdelete() != 0) {
    _this->_internal_set_markdelete(from._internal_markdelete());
  }
  if (from._internal_receiptrequired() != 0) {
    _this->_internal_set_receiptrequired(from._internal_receiptrequired());
  }
  if (from._internal_sessioninvisible() != 0) {
    _this->_internal_set_sessioninvisible(from._internal_sessioninvisible());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.Im.Message.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::InternalSwap(Message* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.receivers_.InternalSwap(&other->_impl_.receivers_);
  _impl_.excludereceivers_.InternalSwap(&other->_impl_.excludereceivers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.backuptips_, lhs_arena,
      &other->_impl_.backuptips_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.strtargetid_, lhs_arena,
      &other->_impl_.strtargetid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.extra_, lhs_arena,
      &other->_impl_.extra_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.csextra_, lhs_arena,
      &other->_impl_.csextra_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message, _impl_.sessioninvisible_)
      + sizeof(Message::_impl_.sessioninvisible_)
      - PROTOBUF_FIELD_OFFSET(Message, _impl_.fromuser_)>(
          reinterpret_cast<char*>(&_impl_.fromuser_),
          reinterpret_cast<char*>(&other->_impl_.fromuser_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Message_2eproto_getter, &descriptor_table_Message_2eproto_once,
      file_level_metadata_Message_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Message
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AcFunDanmu::Im::Message::Message*
Arena::CreateMaybeMessage< ::AcFunDanmu::Im::Message::Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::Im::Message::Message >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
