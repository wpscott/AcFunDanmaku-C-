// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CsQuestionMessageContent.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_CsQuestionMessageContent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_CsQuestionMessageContent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_CsQuestionMessageContent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_CsQuestionMessageContent_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_CsQuestionMessageContent_2eproto;
namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Message {
class CsQuestionMessageContent;
struct CsQuestionMessageContentDefaultTypeInternal;
extern CsQuestionMessageContentDefaultTypeInternal _CsQuestionMessageContent_default_instance_;
class CsQuestionMessageContent_CsQuestion;
struct CsQuestionMessageContent_CsQuestionDefaultTypeInternal;
extern CsQuestionMessageContent_CsQuestionDefaultTypeInternal _CsQuestionMessageContent_CsQuestion_default_instance_;
}  // namespace Message
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::Im::Cloud::Message::CsQuestionMessageContent* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud::Message::CsQuestionMessageContent>(Arena*);
template<> ::AcFunDanmu::Im::Cloud::Message::CsQuestionMessageContent_CsQuestion* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud::Message::CsQuestionMessageContent_CsQuestion>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Message {

enum CsQuestionMessageContent_CsQuestion_ActionType : int {
  CsQuestionMessageContent_CsQuestion_ActionType_AT_UNKNOWN = 0,
  CsQuestionMessageContent_CsQuestion_ActionType_REDIRECT = 1,
  CsQuestionMessageContent_CsQuestion_ActionType_SEND_MESSAGE = 2,
  CsQuestionMessageContent_CsQuestion_ActionType_CsQuestionMessageContent_CsQuestion_ActionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CsQuestionMessageContent_CsQuestion_ActionType_CsQuestionMessageContent_CsQuestion_ActionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CsQuestionMessageContent_CsQuestion_ActionType_IsValid(int value);
constexpr CsQuestionMessageContent_CsQuestion_ActionType CsQuestionMessageContent_CsQuestion_ActionType_ActionType_MIN = CsQuestionMessageContent_CsQuestion_ActionType_AT_UNKNOWN;
constexpr CsQuestionMessageContent_CsQuestion_ActionType CsQuestionMessageContent_CsQuestion_ActionType_ActionType_MAX = CsQuestionMessageContent_CsQuestion_ActionType_SEND_MESSAGE;
constexpr int CsQuestionMessageContent_CsQuestion_ActionType_ActionType_ARRAYSIZE = CsQuestionMessageContent_CsQuestion_ActionType_ActionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CsQuestionMessageContent_CsQuestion_ActionType_descriptor();
template<typename T>
inline const std::string& CsQuestionMessageContent_CsQuestion_ActionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CsQuestionMessageContent_CsQuestion_ActionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CsQuestionMessageContent_CsQuestion_ActionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CsQuestionMessageContent_CsQuestion_ActionType_descriptor(), enum_t_value);
}
inline bool CsQuestionMessageContent_CsQuestion_ActionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CsQuestionMessageContent_CsQuestion_ActionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CsQuestionMessageContent_CsQuestion_ActionType>(
    CsQuestionMessageContent_CsQuestion_ActionType_descriptor(), name, value);
}
// ===================================================================

class CsQuestionMessageContent_CsQuestion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.CsQuestionMessageContent.CsQuestion) */ {
 public:
  inline CsQuestionMessageContent_CsQuestion() : CsQuestionMessageContent_CsQuestion(nullptr) {}
  ~CsQuestionMessageContent_CsQuestion() override;
  explicit PROTOBUF_CONSTEXPR CsQuestionMessageContent_CsQuestion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CsQuestionMessageContent_CsQuestion(const CsQuestionMessageContent_CsQuestion& from);
  CsQuestionMessageContent_CsQuestion(CsQuestionMessageContent_CsQuestion&& from) noexcept
    : CsQuestionMessageContent_CsQuestion() {
    *this = ::std::move(from);
  }

  inline CsQuestionMessageContent_CsQuestion& operator=(const CsQuestionMessageContent_CsQuestion& from) {
    CopyFrom(from);
    return *this;
  }
  inline CsQuestionMessageContent_CsQuestion& operator=(CsQuestionMessageContent_CsQuestion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CsQuestionMessageContent_CsQuestion& default_instance() {
    return *internal_default_instance();
  }
  static inline const CsQuestionMessageContent_CsQuestion* internal_default_instance() {
    return reinterpret_cast<const CsQuestionMessageContent_CsQuestion*>(
               &_CsQuestionMessageContent_CsQuestion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CsQuestionMessageContent_CsQuestion& a, CsQuestionMessageContent_CsQuestion& b) {
    a.Swap(&b);
  }
  inline void Swap(CsQuestionMessageContent_CsQuestion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CsQuestionMessageContent_CsQuestion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CsQuestionMessageContent_CsQuestion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CsQuestionMessageContent_CsQuestion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CsQuestionMessageContent_CsQuestion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CsQuestionMessageContent_CsQuestion& from) {
    CsQuestionMessageContent_CsQuestion::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CsQuestionMessageContent_CsQuestion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.CsQuestionMessageContent.CsQuestion";
  }
  protected:
  explicit CsQuestionMessageContent_CsQuestion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CsQuestionMessageContent_CsQuestion_ActionType ActionType;
  static constexpr ActionType AT_UNKNOWN =
    CsQuestionMessageContent_CsQuestion_ActionType_AT_UNKNOWN;
  static constexpr ActionType REDIRECT =
    CsQuestionMessageContent_CsQuestion_ActionType_REDIRECT;
  static constexpr ActionType SEND_MESSAGE =
    CsQuestionMessageContent_CsQuestion_ActionType_SEND_MESSAGE;
  static inline bool ActionType_IsValid(int value) {
    return CsQuestionMessageContent_CsQuestion_ActionType_IsValid(value);
  }
  static constexpr ActionType ActionType_MIN =
    CsQuestionMessageContent_CsQuestion_ActionType_ActionType_MIN;
  static constexpr ActionType ActionType_MAX =
    CsQuestionMessageContent_CsQuestion_ActionType_ActionType_MAX;
  static constexpr int ActionType_ARRAYSIZE =
    CsQuestionMessageContent_CsQuestion_ActionType_ActionType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ActionType_descriptor() {
    return CsQuestionMessageContent_CsQuestion_ActionType_descriptor();
  }
  template<typename T>
  static inline const std::string& ActionType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ActionType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ActionType_Name.");
    return CsQuestionMessageContent_CsQuestion_ActionType_Name(enum_t_value);
  }
  static inline bool ActionType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ActionType* value) {
    return CsQuestionMessageContent_CsQuestion_ActionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 2,
    kActionUrlFieldNumber = 3,
    kQuestionIdFieldNumber = 1,
    kActionTypeFieldNumber = 4,
  };
  // string text = 2;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // string actionUrl = 3;
  void clear_actionurl();
  const std::string& actionurl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_actionurl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_actionurl();
  PROTOBUF_NODISCARD std::string* release_actionurl();
  void set_allocated_actionurl(std::string* actionurl);
  private:
  const std::string& _internal_actionurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_actionurl(const std::string& value);
  std::string* _internal_mutable_actionurl();
  public:

  // int64 questionId = 1;
  void clear_questionid();
  int64_t questionid() const;
  void set_questionid(int64_t value);
  private:
  int64_t _internal_questionid() const;
  void _internal_set_questionid(int64_t value);
  public:

  // .AcFunDanmu.Im.Cloud.Message.CsQuestionMessageContent.CsQuestion.ActionType actionType = 4;
  void clear_actiontype();
  ::AcFunDanmu::Im::Cloud::Message::CsQuestionMessageContent_CsQuestion_ActionType actiontype() const;
  void set_actiontype(::AcFunDanmu::Im::Cloud::Message::CsQuestionMessageContent_CsQuestion_ActionType value);
  private:
  ::AcFunDanmu::Im::Cloud::Message::CsQuestionMessageContent_CsQuestion_ActionType _internal_actiontype() const;
  void _internal_set_actiontype(::AcFunDanmu::Im::Cloud::Message::CsQuestionMessageContent_CsQuestion_ActionType value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.CsQuestionMessageContent.CsQuestion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr actionurl_;
    int64_t questionid_;
    int actiontype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CsQuestionMessageContent_2eproto;
};
// -------------------------------------------------------------------

class CsQuestionMessageContent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.CsQuestionMessageContent) */ {
 public:
  inline CsQuestionMessageContent() : CsQuestionMessageContent(nullptr) {}
  ~CsQuestionMessageContent() override;
  explicit PROTOBUF_CONSTEXPR CsQuestionMessageContent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CsQuestionMessageContent(const CsQuestionMessageContent& from);
  CsQuestionMessageContent(CsQuestionMessageContent&& from) noexcept
    : CsQuestionMessageContent() {
    *this = ::std::move(from);
  }

  inline CsQuestionMessageContent& operator=(const CsQuestionMessageContent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CsQuestionMessageContent& operator=(CsQuestionMessageContent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CsQuestionMessageContent& default_instance() {
    return *internal_default_instance();
  }
  static inline const CsQuestionMessageContent* internal_default_instance() {
    return reinterpret_cast<const CsQuestionMessageContent*>(
               &_CsQuestionMessageContent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CsQuestionMessageContent& a, CsQuestionMessageContent& b) {
    a.Swap(&b);
  }
  inline void Swap(CsQuestionMessageContent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CsQuestionMessageContent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CsQuestionMessageContent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CsQuestionMessageContent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CsQuestionMessageContent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CsQuestionMessageContent& from) {
    CsQuestionMessageContent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CsQuestionMessageContent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.CsQuestionMessageContent";
  }
  protected:
  explicit CsQuestionMessageContent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CsQuestionMessageContent_CsQuestion CsQuestion;

  // accessors -------------------------------------------------------

  enum : int {
    kQuestionFieldNumber = 2,
    kTitleFieldNumber = 1,
    kBizContentFieldNumber = 3,
  };
  // repeated .AcFunDanmu.Im.Cloud.Message.CsQuestionMessageContent.CsQuestion question = 2;
  int question_size() const;
  private:
  int _internal_question_size() const;
  public:
  void clear_question();
  ::AcFunDanmu::Im::Cloud::Message::CsQuestionMessageContent_CsQuestion* mutable_question(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud::Message::CsQuestionMessageContent_CsQuestion >*
      mutable_question();
  private:
  const ::AcFunDanmu::Im::Cloud::Message::CsQuestionMessageContent_CsQuestion& _internal_question(int index) const;
  ::AcFunDanmu::Im::Cloud::Message::CsQuestionMessageContent_CsQuestion* _internal_add_question();
  public:
  const ::AcFunDanmu::Im::Cloud::Message::CsQuestionMessageContent_CsQuestion& question(int index) const;
  ::AcFunDanmu::Im::Cloud::Message::CsQuestionMessageContent_CsQuestion* add_question();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud::Message::CsQuestionMessageContent_CsQuestion >&
      question() const;

  // string title = 1;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // bytes bizContent = 3;
  void clear_bizcontent();
  const std::string& bizcontent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bizcontent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bizcontent();
  PROTOBUF_NODISCARD std::string* release_bizcontent();
  void set_allocated_bizcontent(std::string* bizcontent);
  private:
  const std::string& _internal_bizcontent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bizcontent(const std::string& value);
  std::string* _internal_mutable_bizcontent();
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.CsQuestionMessageContent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud::Message::CsQuestionMessageContent_CsQuestion > question_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bizcontent_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CsQuestionMessageContent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CsQuestionMessageContent_CsQuestion

// int64 questionId = 1;
inline void CsQuestionMessageContent_CsQuestion::clear_questionid() {
  _impl_.questionid_ = int64_t{0};
}
inline int64_t CsQuestionMessageContent_CsQuestion::_internal_questionid() const {
  return _impl_.questionid_;
}
inline int64_t CsQuestionMessageContent_CsQuestion::questionid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.CsQuestionMessageContent.CsQuestion.questionId)
  return _internal_questionid();
}
inline void CsQuestionMessageContent_CsQuestion::_internal_set_questionid(int64_t value) {
  
  _impl_.questionid_ = value;
}
inline void CsQuestionMessageContent_CsQuestion::set_questionid(int64_t value) {
  _internal_set_questionid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.CsQuestionMessageContent.CsQuestion.questionId)
}

// string text = 2;
inline void CsQuestionMessageContent_CsQuestion::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& CsQuestionMessageContent_CsQuestion::text() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.CsQuestionMessageContent.CsQuestion.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CsQuestionMessageContent_CsQuestion::set_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.CsQuestionMessageContent.CsQuestion.text)
}
inline std::string* CsQuestionMessageContent_CsQuestion::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.CsQuestionMessageContent.CsQuestion.text)
  return _s;
}
inline const std::string& CsQuestionMessageContent_CsQuestion::_internal_text() const {
  return _impl_.text_.Get();
}
inline void CsQuestionMessageContent_CsQuestion::_internal_set_text(const std::string& value) {
  
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* CsQuestionMessageContent_CsQuestion::_internal_mutable_text() {
  
  return _impl_.text_.Mutable(GetArenaForAllocation());
}
inline std::string* CsQuestionMessageContent_CsQuestion::release_text() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.CsQuestionMessageContent.CsQuestion.text)
  return _impl_.text_.Release();
}
inline void CsQuestionMessageContent_CsQuestion::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  _impl_.text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.CsQuestionMessageContent.CsQuestion.text)
}

// string actionUrl = 3;
inline void CsQuestionMessageContent_CsQuestion::clear_actionurl() {
  _impl_.actionurl_.ClearToEmpty();
}
inline const std::string& CsQuestionMessageContent_CsQuestion::actionurl() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.CsQuestionMessageContent.CsQuestion.actionUrl)
  return _internal_actionurl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CsQuestionMessageContent_CsQuestion::set_actionurl(ArgT0&& arg0, ArgT... args) {
 
 _impl_.actionurl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.CsQuestionMessageContent.CsQuestion.actionUrl)
}
inline std::string* CsQuestionMessageContent_CsQuestion::mutable_actionurl() {
  std::string* _s = _internal_mutable_actionurl();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.CsQuestionMessageContent.CsQuestion.actionUrl)
  return _s;
}
inline const std::string& CsQuestionMessageContent_CsQuestion::_internal_actionurl() const {
  return _impl_.actionurl_.Get();
}
inline void CsQuestionMessageContent_CsQuestion::_internal_set_actionurl(const std::string& value) {
  
  _impl_.actionurl_.Set(value, GetArenaForAllocation());
}
inline std::string* CsQuestionMessageContent_CsQuestion::_internal_mutable_actionurl() {
  
  return _impl_.actionurl_.Mutable(GetArenaForAllocation());
}
inline std::string* CsQuestionMessageContent_CsQuestion::release_actionurl() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.CsQuestionMessageContent.CsQuestion.actionUrl)
  return _impl_.actionurl_.Release();
}
inline void CsQuestionMessageContent_CsQuestion::set_allocated_actionurl(std::string* actionurl) {
  if (actionurl != nullptr) {
    
  } else {
    
  }
  _impl_.actionurl_.SetAllocated(actionurl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.actionurl_.IsDefault()) {
    _impl_.actionurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.CsQuestionMessageContent.CsQuestion.actionUrl)
}

// .AcFunDanmu.Im.Cloud.Message.CsQuestionMessageContent.CsQuestion.ActionType actionType = 4;
inline void CsQuestionMessageContent_CsQuestion::clear_actiontype() {
  _impl_.actiontype_ = 0;
}
inline ::AcFunDanmu::Im::Cloud::Message::CsQuestionMessageContent_CsQuestion_ActionType CsQuestionMessageContent_CsQuestion::_internal_actiontype() const {
  return static_cast< ::AcFunDanmu::Im::Cloud::Message::CsQuestionMessageContent_CsQuestion_ActionType >(_impl_.actiontype_);
}
inline ::AcFunDanmu::Im::Cloud::Message::CsQuestionMessageContent_CsQuestion_ActionType CsQuestionMessageContent_CsQuestion::actiontype() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.CsQuestionMessageContent.CsQuestion.actionType)
  return _internal_actiontype();
}
inline void CsQuestionMessageContent_CsQuestion::_internal_set_actiontype(::AcFunDanmu::Im::Cloud::Message::CsQuestionMessageContent_CsQuestion_ActionType value) {
  
  _impl_.actiontype_ = value;
}
inline void CsQuestionMessageContent_CsQuestion::set_actiontype(::AcFunDanmu::Im::Cloud::Message::CsQuestionMessageContent_CsQuestion_ActionType value) {
  _internal_set_actiontype(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.CsQuestionMessageContent.CsQuestion.actionType)
}

// -------------------------------------------------------------------

// CsQuestionMessageContent

// string title = 1;
inline void CsQuestionMessageContent::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& CsQuestionMessageContent::title() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.CsQuestionMessageContent.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CsQuestionMessageContent::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.CsQuestionMessageContent.title)
}
inline std::string* CsQuestionMessageContent::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.CsQuestionMessageContent.title)
  return _s;
}
inline const std::string& CsQuestionMessageContent::_internal_title() const {
  return _impl_.title_.Get();
}
inline void CsQuestionMessageContent::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* CsQuestionMessageContent::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* CsQuestionMessageContent::release_title() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.CsQuestionMessageContent.title)
  return _impl_.title_.Release();
}
inline void CsQuestionMessageContent::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.CsQuestionMessageContent.title)
}

// repeated .AcFunDanmu.Im.Cloud.Message.CsQuestionMessageContent.CsQuestion question = 2;
inline int CsQuestionMessageContent::_internal_question_size() const {
  return _impl_.question_.size();
}
inline int CsQuestionMessageContent::question_size() const {
  return _internal_question_size();
}
inline void CsQuestionMessageContent::clear_question() {
  _impl_.question_.Clear();
}
inline ::AcFunDanmu::Im::Cloud::Message::CsQuestionMessageContent_CsQuestion* CsQuestionMessageContent::mutable_question(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.CsQuestionMessageContent.question)
  return _impl_.question_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud::Message::CsQuestionMessageContent_CsQuestion >*
CsQuestionMessageContent::mutable_question() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Cloud.Message.CsQuestionMessageContent.question)
  return &_impl_.question_;
}
inline const ::AcFunDanmu::Im::Cloud::Message::CsQuestionMessageContent_CsQuestion& CsQuestionMessageContent::_internal_question(int index) const {
  return _impl_.question_.Get(index);
}
inline const ::AcFunDanmu::Im::Cloud::Message::CsQuestionMessageContent_CsQuestion& CsQuestionMessageContent::question(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.CsQuestionMessageContent.question)
  return _internal_question(index);
}
inline ::AcFunDanmu::Im::Cloud::Message::CsQuestionMessageContent_CsQuestion* CsQuestionMessageContent::_internal_add_question() {
  return _impl_.question_.Add();
}
inline ::AcFunDanmu::Im::Cloud::Message::CsQuestionMessageContent_CsQuestion* CsQuestionMessageContent::add_question() {
  ::AcFunDanmu::Im::Cloud::Message::CsQuestionMessageContent_CsQuestion* _add = _internal_add_question();
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Cloud.Message.CsQuestionMessageContent.question)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud::Message::CsQuestionMessageContent_CsQuestion >&
CsQuestionMessageContent::question() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Cloud.Message.CsQuestionMessageContent.question)
  return _impl_.question_;
}

// bytes bizContent = 3;
inline void CsQuestionMessageContent::clear_bizcontent() {
  _impl_.bizcontent_.ClearToEmpty();
}
inline const std::string& CsQuestionMessageContent::bizcontent() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.CsQuestionMessageContent.bizContent)
  return _internal_bizcontent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CsQuestionMessageContent::set_bizcontent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bizcontent_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.CsQuestionMessageContent.bizContent)
}
inline std::string* CsQuestionMessageContent::mutable_bizcontent() {
  std::string* _s = _internal_mutable_bizcontent();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.CsQuestionMessageContent.bizContent)
  return _s;
}
inline const std::string& CsQuestionMessageContent::_internal_bizcontent() const {
  return _impl_.bizcontent_.Get();
}
inline void CsQuestionMessageContent::_internal_set_bizcontent(const std::string& value) {
  
  _impl_.bizcontent_.Set(value, GetArenaForAllocation());
}
inline std::string* CsQuestionMessageContent::_internal_mutable_bizcontent() {
  
  return _impl_.bizcontent_.Mutable(GetArenaForAllocation());
}
inline std::string* CsQuestionMessageContent::release_bizcontent() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.CsQuestionMessageContent.bizContent)
  return _impl_.bizcontent_.Release();
}
inline void CsQuestionMessageContent::set_allocated_bizcontent(std::string* bizcontent) {
  if (bizcontent != nullptr) {
    
  } else {
    
  }
  _impl_.bizcontent_.SetAllocated(bizcontent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bizcontent_.IsDefault()) {
    _impl_.bizcontent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.CsQuestionMessageContent.bizContent)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Message
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::AcFunDanmu::Im::Cloud::Message::CsQuestionMessageContent_CsQuestion_ActionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::Im::Cloud::Message::CsQuestionMessageContent_CsQuestion_ActionType>() {
  return ::AcFunDanmu::Im::Cloud::Message::CsQuestionMessageContent_CsQuestion_ActionType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_CsQuestionMessageContent_2eproto
