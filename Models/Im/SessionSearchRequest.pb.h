// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SessionSearchRequest.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_SessionSearchRequest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_SessionSearchRequest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "TimeFilter.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_SessionSearchRequest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_SessionSearchRequest_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SessionSearchRequest_2eproto;
namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Search {
class SessionSearchRequest;
struct SessionSearchRequestDefaultTypeInternal;
extern SessionSearchRequestDefaultTypeInternal _SessionSearchRequest_default_instance_;
}  // namespace Search
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::Im::Cloud::Search::SessionSearchRequest* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud::Search::SessionSearchRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Search {

// ===================================================================

class SessionSearchRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest) */ {
 public:
  inline SessionSearchRequest() : SessionSearchRequest(nullptr) {}
  ~SessionSearchRequest() override;
  explicit PROTOBUF_CONSTEXPR SessionSearchRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SessionSearchRequest(const SessionSearchRequest& from);
  SessionSearchRequest(SessionSearchRequest&& from) noexcept
    : SessionSearchRequest() {
    *this = ::std::move(from);
  }

  inline SessionSearchRequest& operator=(const SessionSearchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionSearchRequest& operator=(SessionSearchRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SessionSearchRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SessionSearchRequest* internal_default_instance() {
    return reinterpret_cast<const SessionSearchRequest*>(
               &_SessionSearchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SessionSearchRequest& a, SessionSearchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionSearchRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionSearchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SessionSearchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SessionSearchRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SessionSearchRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SessionSearchRequest& from) {
    SessionSearchRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionSearchRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Search.SessionSearchRequest";
  }
  protected:
  explicit SessionSearchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupNameFieldNumber = 1,
    kMemberNameFieldNumber = 2,
    kQueryFieldNumber = 3,
    kFileNameFieldNumber = 4,
    kMemberIdFieldNumber = 7,
    kTimeFilterFieldNumber = 5,
    kMsgCountPerSessionFieldNumber = 6,
  };
  // repeated string groupName = 1;
  int groupname_size() const;
  private:
  int _internal_groupname_size() const;
  public:
  void clear_groupname();
  const std::string& groupname(int index) const;
  std::string* mutable_groupname(int index);
  void set_groupname(int index, const std::string& value);
  void set_groupname(int index, std::string&& value);
  void set_groupname(int index, const char* value);
  void set_groupname(int index, const char* value, size_t size);
  std::string* add_groupname();
  void add_groupname(const std::string& value);
  void add_groupname(std::string&& value);
  void add_groupname(const char* value);
  void add_groupname(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& groupname() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_groupname();
  private:
  const std::string& _internal_groupname(int index) const;
  std::string* _internal_add_groupname();
  public:

  // repeated string memberName = 2;
  int membername_size() const;
  private:
  int _internal_membername_size() const;
  public:
  void clear_membername();
  const std::string& membername(int index) const;
  std::string* mutable_membername(int index);
  void set_membername(int index, const std::string& value);
  void set_membername(int index, std::string&& value);
  void set_membername(int index, const char* value);
  void set_membername(int index, const char* value, size_t size);
  std::string* add_membername();
  void add_membername(const std::string& value);
  void add_membername(std::string&& value);
  void add_membername(const char* value);
  void add_membername(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& membername() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_membername();
  private:
  const std::string& _internal_membername(int index) const;
  std::string* _internal_add_membername();
  public:

  // repeated string query = 3;
  int query_size() const;
  private:
  int _internal_query_size() const;
  public:
  void clear_query();
  const std::string& query(int index) const;
  std::string* mutable_query(int index);
  void set_query(int index, const std::string& value);
  void set_query(int index, std::string&& value);
  void set_query(int index, const char* value);
  void set_query(int index, const char* value, size_t size);
  std::string* add_query();
  void add_query(const std::string& value);
  void add_query(std::string&& value);
  void add_query(const char* value);
  void add_query(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& query() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_query();
  private:
  const std::string& _internal_query(int index) const;
  std::string* _internal_add_query();
  public:

  // repeated string fileName = 4;
  int filename_size() const;
  private:
  int _internal_filename_size() const;
  public:
  void clear_filename();
  const std::string& filename(int index) const;
  std::string* mutable_filename(int index);
  void set_filename(int index, const std::string& value);
  void set_filename(int index, std::string&& value);
  void set_filename(int index, const char* value);
  void set_filename(int index, const char* value, size_t size);
  std::string* add_filename();
  void add_filename(const std::string& value);
  void add_filename(std::string&& value);
  void add_filename(const char* value);
  void add_filename(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& filename() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_filename();
  private:
  const std::string& _internal_filename(int index) const;
  std::string* _internal_add_filename();
  public:

  // repeated string memberId = 7;
  int memberid_size() const;
  private:
  int _internal_memberid_size() const;
  public:
  void clear_memberid();
  const std::string& memberid(int index) const;
  std::string* mutable_memberid(int index);
  void set_memberid(int index, const std::string& value);
  void set_memberid(int index, std::string&& value);
  void set_memberid(int index, const char* value);
  void set_memberid(int index, const char* value, size_t size);
  std::string* add_memberid();
  void add_memberid(const std::string& value);
  void add_memberid(std::string&& value);
  void add_memberid(const char* value);
  void add_memberid(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& memberid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_memberid();
  private:
  const std::string& _internal_memberid(int index) const;
  std::string* _internal_add_memberid();
  public:

  // .AcFunDanmu.Im.Cloud.Search.TimeFilter timeFilter = 5;
  bool has_timefilter() const;
  private:
  bool _internal_has_timefilter() const;
  public:
  void clear_timefilter();
  const ::AcFunDanmu::Im::Cloud::Search::TimeFilter& timefilter() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Cloud::Search::TimeFilter* release_timefilter();
  ::AcFunDanmu::Im::Cloud::Search::TimeFilter* mutable_timefilter();
  void set_allocated_timefilter(::AcFunDanmu::Im::Cloud::Search::TimeFilter* timefilter);
  private:
  const ::AcFunDanmu::Im::Cloud::Search::TimeFilter& _internal_timefilter() const;
  ::AcFunDanmu::Im::Cloud::Search::TimeFilter* _internal_mutable_timefilter();
  public:
  void unsafe_arena_set_allocated_timefilter(
      ::AcFunDanmu::Im::Cloud::Search::TimeFilter* timefilter);
  ::AcFunDanmu::Im::Cloud::Search::TimeFilter* unsafe_arena_release_timefilter();

  // int32 msgCountPerSession = 6;
  void clear_msgcountpersession();
  int32_t msgcountpersession() const;
  void set_msgcountpersession(int32_t value);
  private:
  int32_t _internal_msgcountpersession() const;
  void _internal_set_msgcountpersession(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> groupname_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> membername_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> query_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> filename_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> memberid_;
    ::AcFunDanmu::Im::Cloud::Search::TimeFilter* timefilter_;
    int32_t msgcountpersession_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_SessionSearchRequest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SessionSearchRequest

// repeated string groupName = 1;
inline int SessionSearchRequest::_internal_groupname_size() const {
  return _impl_.groupname_.size();
}
inline int SessionSearchRequest::groupname_size() const {
  return _internal_groupname_size();
}
inline void SessionSearchRequest::clear_groupname() {
  _impl_.groupname_.Clear();
}
inline std::string* SessionSearchRequest::add_groupname() {
  std::string* _s = _internal_add_groupname();
  // @@protoc_insertion_point(field_add_mutable:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.groupName)
  return _s;
}
inline const std::string& SessionSearchRequest::_internal_groupname(int index) const {
  return _impl_.groupname_.Get(index);
}
inline const std::string& SessionSearchRequest::groupname(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.groupName)
  return _internal_groupname(index);
}
inline std::string* SessionSearchRequest::mutable_groupname(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.groupName)
  return _impl_.groupname_.Mutable(index);
}
inline void SessionSearchRequest::set_groupname(int index, const std::string& value) {
  _impl_.groupname_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.groupName)
}
inline void SessionSearchRequest::set_groupname(int index, std::string&& value) {
  _impl_.groupname_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.groupName)
}
inline void SessionSearchRequest::set_groupname(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.groupname_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.groupName)
}
inline void SessionSearchRequest::set_groupname(int index, const char* value, size_t size) {
  _impl_.groupname_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.groupName)
}
inline std::string* SessionSearchRequest::_internal_add_groupname() {
  return _impl_.groupname_.Add();
}
inline void SessionSearchRequest::add_groupname(const std::string& value) {
  _impl_.groupname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.groupName)
}
inline void SessionSearchRequest::add_groupname(std::string&& value) {
  _impl_.groupname_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.groupName)
}
inline void SessionSearchRequest::add_groupname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.groupname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.groupName)
}
inline void SessionSearchRequest::add_groupname(const char* value, size_t size) {
  _impl_.groupname_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.groupName)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SessionSearchRequest::groupname() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.groupName)
  return _impl_.groupname_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SessionSearchRequest::mutable_groupname() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.groupName)
  return &_impl_.groupname_;
}

// repeated string memberName = 2;
inline int SessionSearchRequest::_internal_membername_size() const {
  return _impl_.membername_.size();
}
inline int SessionSearchRequest::membername_size() const {
  return _internal_membername_size();
}
inline void SessionSearchRequest::clear_membername() {
  _impl_.membername_.Clear();
}
inline std::string* SessionSearchRequest::add_membername() {
  std::string* _s = _internal_add_membername();
  // @@protoc_insertion_point(field_add_mutable:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.memberName)
  return _s;
}
inline const std::string& SessionSearchRequest::_internal_membername(int index) const {
  return _impl_.membername_.Get(index);
}
inline const std::string& SessionSearchRequest::membername(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.memberName)
  return _internal_membername(index);
}
inline std::string* SessionSearchRequest::mutable_membername(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.memberName)
  return _impl_.membername_.Mutable(index);
}
inline void SessionSearchRequest::set_membername(int index, const std::string& value) {
  _impl_.membername_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.memberName)
}
inline void SessionSearchRequest::set_membername(int index, std::string&& value) {
  _impl_.membername_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.memberName)
}
inline void SessionSearchRequest::set_membername(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.membername_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.memberName)
}
inline void SessionSearchRequest::set_membername(int index, const char* value, size_t size) {
  _impl_.membername_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.memberName)
}
inline std::string* SessionSearchRequest::_internal_add_membername() {
  return _impl_.membername_.Add();
}
inline void SessionSearchRequest::add_membername(const std::string& value) {
  _impl_.membername_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.memberName)
}
inline void SessionSearchRequest::add_membername(std::string&& value) {
  _impl_.membername_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.memberName)
}
inline void SessionSearchRequest::add_membername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.membername_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.memberName)
}
inline void SessionSearchRequest::add_membername(const char* value, size_t size) {
  _impl_.membername_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.memberName)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SessionSearchRequest::membername() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.memberName)
  return _impl_.membername_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SessionSearchRequest::mutable_membername() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.memberName)
  return &_impl_.membername_;
}

// repeated string query = 3;
inline int SessionSearchRequest::_internal_query_size() const {
  return _impl_.query_.size();
}
inline int SessionSearchRequest::query_size() const {
  return _internal_query_size();
}
inline void SessionSearchRequest::clear_query() {
  _impl_.query_.Clear();
}
inline std::string* SessionSearchRequest::add_query() {
  std::string* _s = _internal_add_query();
  // @@protoc_insertion_point(field_add_mutable:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.query)
  return _s;
}
inline const std::string& SessionSearchRequest::_internal_query(int index) const {
  return _impl_.query_.Get(index);
}
inline const std::string& SessionSearchRequest::query(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.query)
  return _internal_query(index);
}
inline std::string* SessionSearchRequest::mutable_query(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.query)
  return _impl_.query_.Mutable(index);
}
inline void SessionSearchRequest::set_query(int index, const std::string& value) {
  _impl_.query_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.query)
}
inline void SessionSearchRequest::set_query(int index, std::string&& value) {
  _impl_.query_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.query)
}
inline void SessionSearchRequest::set_query(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.query_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.query)
}
inline void SessionSearchRequest::set_query(int index, const char* value, size_t size) {
  _impl_.query_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.query)
}
inline std::string* SessionSearchRequest::_internal_add_query() {
  return _impl_.query_.Add();
}
inline void SessionSearchRequest::add_query(const std::string& value) {
  _impl_.query_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.query)
}
inline void SessionSearchRequest::add_query(std::string&& value) {
  _impl_.query_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.query)
}
inline void SessionSearchRequest::add_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.query_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.query)
}
inline void SessionSearchRequest::add_query(const char* value, size_t size) {
  _impl_.query_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.query)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SessionSearchRequest::query() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.query)
  return _impl_.query_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SessionSearchRequest::mutable_query() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.query)
  return &_impl_.query_;
}

// repeated string fileName = 4;
inline int SessionSearchRequest::_internal_filename_size() const {
  return _impl_.filename_.size();
}
inline int SessionSearchRequest::filename_size() const {
  return _internal_filename_size();
}
inline void SessionSearchRequest::clear_filename() {
  _impl_.filename_.Clear();
}
inline std::string* SessionSearchRequest::add_filename() {
  std::string* _s = _internal_add_filename();
  // @@protoc_insertion_point(field_add_mutable:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.fileName)
  return _s;
}
inline const std::string& SessionSearchRequest::_internal_filename(int index) const {
  return _impl_.filename_.Get(index);
}
inline const std::string& SessionSearchRequest::filename(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.fileName)
  return _internal_filename(index);
}
inline std::string* SessionSearchRequest::mutable_filename(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.fileName)
  return _impl_.filename_.Mutable(index);
}
inline void SessionSearchRequest::set_filename(int index, const std::string& value) {
  _impl_.filename_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.fileName)
}
inline void SessionSearchRequest::set_filename(int index, std::string&& value) {
  _impl_.filename_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.fileName)
}
inline void SessionSearchRequest::set_filename(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.filename_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.fileName)
}
inline void SessionSearchRequest::set_filename(int index, const char* value, size_t size) {
  _impl_.filename_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.fileName)
}
inline std::string* SessionSearchRequest::_internal_add_filename() {
  return _impl_.filename_.Add();
}
inline void SessionSearchRequest::add_filename(const std::string& value) {
  _impl_.filename_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.fileName)
}
inline void SessionSearchRequest::add_filename(std::string&& value) {
  _impl_.filename_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.fileName)
}
inline void SessionSearchRequest::add_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.filename_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.fileName)
}
inline void SessionSearchRequest::add_filename(const char* value, size_t size) {
  _impl_.filename_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.fileName)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SessionSearchRequest::filename() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.fileName)
  return _impl_.filename_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SessionSearchRequest::mutable_filename() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.fileName)
  return &_impl_.filename_;
}

// .AcFunDanmu.Im.Cloud.Search.TimeFilter timeFilter = 5;
inline bool SessionSearchRequest::_internal_has_timefilter() const {
  return this != internal_default_instance() && _impl_.timefilter_ != nullptr;
}
inline bool SessionSearchRequest::has_timefilter() const {
  return _internal_has_timefilter();
}
inline const ::AcFunDanmu::Im::Cloud::Search::TimeFilter& SessionSearchRequest::_internal_timefilter() const {
  const ::AcFunDanmu::Im::Cloud::Search::TimeFilter* p = _impl_.timefilter_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Cloud::Search::TimeFilter&>(
      ::AcFunDanmu::Im::Cloud::Search::_TimeFilter_default_instance_);
}
inline const ::AcFunDanmu::Im::Cloud::Search::TimeFilter& SessionSearchRequest::timefilter() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.timeFilter)
  return _internal_timefilter();
}
inline void SessionSearchRequest::unsafe_arena_set_allocated_timefilter(
    ::AcFunDanmu::Im::Cloud::Search::TimeFilter* timefilter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timefilter_);
  }
  _impl_.timefilter_ = timefilter;
  if (timefilter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.timeFilter)
}
inline ::AcFunDanmu::Im::Cloud::Search::TimeFilter* SessionSearchRequest::release_timefilter() {
  
  ::AcFunDanmu::Im::Cloud::Search::TimeFilter* temp = _impl_.timefilter_;
  _impl_.timefilter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AcFunDanmu::Im::Cloud::Search::TimeFilter* SessionSearchRequest::unsafe_arena_release_timefilter() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.timeFilter)
  
  ::AcFunDanmu::Im::Cloud::Search::TimeFilter* temp = _impl_.timefilter_;
  _impl_.timefilter_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Cloud::Search::TimeFilter* SessionSearchRequest::_internal_mutable_timefilter() {
  
  if (_impl_.timefilter_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Cloud::Search::TimeFilter>(GetArenaForAllocation());
    _impl_.timefilter_ = p;
  }
  return _impl_.timefilter_;
}
inline ::AcFunDanmu::Im::Cloud::Search::TimeFilter* SessionSearchRequest::mutable_timefilter() {
  ::AcFunDanmu::Im::Cloud::Search::TimeFilter* _msg = _internal_mutable_timefilter();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.timeFilter)
  return _msg;
}
inline void SessionSearchRequest::set_allocated_timefilter(::AcFunDanmu::Im::Cloud::Search::TimeFilter* timefilter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timefilter_);
  }
  if (timefilter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timefilter));
    if (message_arena != submessage_arena) {
      timefilter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timefilter, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.timefilter_ = timefilter;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.timeFilter)
}

// int32 msgCountPerSession = 6;
inline void SessionSearchRequest::clear_msgcountpersession() {
  _impl_.msgcountpersession_ = 0;
}
inline int32_t SessionSearchRequest::_internal_msgcountpersession() const {
  return _impl_.msgcountpersession_;
}
inline int32_t SessionSearchRequest::msgcountpersession() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.msgCountPerSession)
  return _internal_msgcountpersession();
}
inline void SessionSearchRequest::_internal_set_msgcountpersession(int32_t value) {
  
  _impl_.msgcountpersession_ = value;
}
inline void SessionSearchRequest::set_msgcountpersession(int32_t value) {
  _internal_set_msgcountpersession(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.msgCountPerSession)
}

// repeated string memberId = 7;
inline int SessionSearchRequest::_internal_memberid_size() const {
  return _impl_.memberid_.size();
}
inline int SessionSearchRequest::memberid_size() const {
  return _internal_memberid_size();
}
inline void SessionSearchRequest::clear_memberid() {
  _impl_.memberid_.Clear();
}
inline std::string* SessionSearchRequest::add_memberid() {
  std::string* _s = _internal_add_memberid();
  // @@protoc_insertion_point(field_add_mutable:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.memberId)
  return _s;
}
inline const std::string& SessionSearchRequest::_internal_memberid(int index) const {
  return _impl_.memberid_.Get(index);
}
inline const std::string& SessionSearchRequest::memberid(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.memberId)
  return _internal_memberid(index);
}
inline std::string* SessionSearchRequest::mutable_memberid(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.memberId)
  return _impl_.memberid_.Mutable(index);
}
inline void SessionSearchRequest::set_memberid(int index, const std::string& value) {
  _impl_.memberid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.memberId)
}
inline void SessionSearchRequest::set_memberid(int index, std::string&& value) {
  _impl_.memberid_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.memberId)
}
inline void SessionSearchRequest::set_memberid(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.memberid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.memberId)
}
inline void SessionSearchRequest::set_memberid(int index, const char* value, size_t size) {
  _impl_.memberid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.memberId)
}
inline std::string* SessionSearchRequest::_internal_add_memberid() {
  return _impl_.memberid_.Add();
}
inline void SessionSearchRequest::add_memberid(const std::string& value) {
  _impl_.memberid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.memberId)
}
inline void SessionSearchRequest::add_memberid(std::string&& value) {
  _impl_.memberid_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.memberId)
}
inline void SessionSearchRequest::add_memberid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.memberid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.memberId)
}
inline void SessionSearchRequest::add_memberid(const char* value, size_t size) {
  _impl_.memberid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.memberId)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SessionSearchRequest::memberid() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.memberId)
  return _impl_.memberid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SessionSearchRequest::mutable_memberid() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Cloud.Search.SessionSearchRequest.memberId)
  return &_impl_.memberid_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Search
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_SessionSearchRequest_2eproto
