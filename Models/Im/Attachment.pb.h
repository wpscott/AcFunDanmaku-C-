// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Attachment.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Attachment_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Attachment_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "AudioAttachment.pb.h"
#include "ImageAttachment.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Attachment_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Attachment_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Attachment_2eproto;
namespace AcFunDanmu {
namespace Im {
namespace Message {
class Attachment;
struct AttachmentDefaultTypeInternal;
extern AttachmentDefaultTypeInternal _Attachment_default_instance_;
}  // namespace Message
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::Im::Message::Attachment* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Message::Attachment>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {
namespace Im {
namespace Message {

// ===================================================================

class Attachment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Message.Attachment) */ {
 public:
  inline Attachment() : Attachment(nullptr) {}
  ~Attachment() override;
  explicit PROTOBUF_CONSTEXPR Attachment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Attachment(const Attachment& from);
  Attachment(Attachment&& from) noexcept
    : Attachment() {
    *this = ::std::move(from);
  }

  inline Attachment& operator=(const Attachment& from) {
    CopyFrom(from);
    return *this;
  }
  inline Attachment& operator=(Attachment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Attachment& default_instance() {
    return *internal_default_instance();
  }
  enum AttachmentCase {
    kImageAttachment = 1,
    kAudioAttachment = 2,
    ATTACHMENT_NOT_SET = 0,
  };

  static inline const Attachment* internal_default_instance() {
    return reinterpret_cast<const Attachment*>(
               &_Attachment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Attachment& a, Attachment& b) {
    a.Swap(&b);
  }
  inline void Swap(Attachment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Attachment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Attachment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Attachment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Attachment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Attachment& from) {
    Attachment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Attachment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Message.Attachment";
  }
  protected:
  explicit Attachment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageAttachmentFieldNumber = 1,
    kAudioAttachmentFieldNumber = 2,
  };
  // .AcFunDanmu.Im.Message.ImageAttachment imageAttachment = 1;
  bool has_imageattachment() const;
  private:
  bool _internal_has_imageattachment() const;
  public:
  void clear_imageattachment();
  const ::AcFunDanmu::Im::Message::ImageAttachment& imageattachment() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Message::ImageAttachment* release_imageattachment();
  ::AcFunDanmu::Im::Message::ImageAttachment* mutable_imageattachment();
  void set_allocated_imageattachment(::AcFunDanmu::Im::Message::ImageAttachment* imageattachment);
  private:
  const ::AcFunDanmu::Im::Message::ImageAttachment& _internal_imageattachment() const;
  ::AcFunDanmu::Im::Message::ImageAttachment* _internal_mutable_imageattachment();
  public:
  void unsafe_arena_set_allocated_imageattachment(
      ::AcFunDanmu::Im::Message::ImageAttachment* imageattachment);
  ::AcFunDanmu::Im::Message::ImageAttachment* unsafe_arena_release_imageattachment();

  // .AcFunDanmu.Im.Message.AudioAttachment audioAttachment = 2;
  bool has_audioattachment() const;
  private:
  bool _internal_has_audioattachment() const;
  public:
  void clear_audioattachment();
  const ::AcFunDanmu::Im::Message::AudioAttachment& audioattachment() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Message::AudioAttachment* release_audioattachment();
  ::AcFunDanmu::Im::Message::AudioAttachment* mutable_audioattachment();
  void set_allocated_audioattachment(::AcFunDanmu::Im::Message::AudioAttachment* audioattachment);
  private:
  const ::AcFunDanmu::Im::Message::AudioAttachment& _internal_audioattachment() const;
  ::AcFunDanmu::Im::Message::AudioAttachment* _internal_mutable_audioattachment();
  public:
  void unsafe_arena_set_allocated_audioattachment(
      ::AcFunDanmu::Im::Message::AudioAttachment* audioattachment);
  ::AcFunDanmu::Im::Message::AudioAttachment* unsafe_arena_release_audioattachment();

  void clear_attachment();
  AttachmentCase attachment_case() const;
  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Message.Attachment)
 private:
  class _Internal;
  void set_has_imageattachment();
  void set_has_audioattachment();

  inline bool has_attachment() const;
  inline void clear_has_attachment();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union AttachmentUnion {
      constexpr AttachmentUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::AcFunDanmu::Im::Message::ImageAttachment* imageattachment_;
      ::AcFunDanmu::Im::Message::AudioAttachment* audioattachment_;
    } attachment_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Attachment_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Attachment

// .AcFunDanmu.Im.Message.ImageAttachment imageAttachment = 1;
inline bool Attachment::_internal_has_imageattachment() const {
  return attachment_case() == kImageAttachment;
}
inline bool Attachment::has_imageattachment() const {
  return _internal_has_imageattachment();
}
inline void Attachment::set_has_imageattachment() {
  _impl_._oneof_case_[0] = kImageAttachment;
}
inline ::AcFunDanmu::Im::Message::ImageAttachment* Attachment::release_imageattachment() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Message.Attachment.imageAttachment)
  if (_internal_has_imageattachment()) {
    clear_has_attachment();
    ::AcFunDanmu::Im::Message::ImageAttachment* temp = _impl_.attachment_.imageattachment_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.attachment_.imageattachment_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::AcFunDanmu::Im::Message::ImageAttachment& Attachment::_internal_imageattachment() const {
  return _internal_has_imageattachment()
      ? *_impl_.attachment_.imageattachment_
      : reinterpret_cast< ::AcFunDanmu::Im::Message::ImageAttachment&>(::AcFunDanmu::Im::Message::_ImageAttachment_default_instance_);
}
inline const ::AcFunDanmu::Im::Message::ImageAttachment& Attachment::imageattachment() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.Attachment.imageAttachment)
  return _internal_imageattachment();
}
inline ::AcFunDanmu::Im::Message::ImageAttachment* Attachment::unsafe_arena_release_imageattachment() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AcFunDanmu.Im.Message.Attachment.imageAttachment)
  if (_internal_has_imageattachment()) {
    clear_has_attachment();
    ::AcFunDanmu::Im::Message::ImageAttachment* temp = _impl_.attachment_.imageattachment_;
    _impl_.attachment_.imageattachment_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Attachment::unsafe_arena_set_allocated_imageattachment(::AcFunDanmu::Im::Message::ImageAttachment* imageattachment) {
  clear_attachment();
  if (imageattachment) {
    set_has_imageattachment();
    _impl_.attachment_.imageattachment_ = imageattachment;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Message.Attachment.imageAttachment)
}
inline ::AcFunDanmu::Im::Message::ImageAttachment* Attachment::_internal_mutable_imageattachment() {
  if (!_internal_has_imageattachment()) {
    clear_attachment();
    set_has_imageattachment();
    _impl_.attachment_.imageattachment_ = CreateMaybeMessage< ::AcFunDanmu::Im::Message::ImageAttachment >(GetArenaForAllocation());
  }
  return _impl_.attachment_.imageattachment_;
}
inline ::AcFunDanmu::Im::Message::ImageAttachment* Attachment::mutable_imageattachment() {
  ::AcFunDanmu::Im::Message::ImageAttachment* _msg = _internal_mutable_imageattachment();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Message.Attachment.imageAttachment)
  return _msg;
}

// .AcFunDanmu.Im.Message.AudioAttachment audioAttachment = 2;
inline bool Attachment::_internal_has_audioattachment() const {
  return attachment_case() == kAudioAttachment;
}
inline bool Attachment::has_audioattachment() const {
  return _internal_has_audioattachment();
}
inline void Attachment::set_has_audioattachment() {
  _impl_._oneof_case_[0] = kAudioAttachment;
}
inline ::AcFunDanmu::Im::Message::AudioAttachment* Attachment::release_audioattachment() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Message.Attachment.audioAttachment)
  if (_internal_has_audioattachment()) {
    clear_has_attachment();
    ::AcFunDanmu::Im::Message::AudioAttachment* temp = _impl_.attachment_.audioattachment_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.attachment_.audioattachment_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::AcFunDanmu::Im::Message::AudioAttachment& Attachment::_internal_audioattachment() const {
  return _internal_has_audioattachment()
      ? *_impl_.attachment_.audioattachment_
      : reinterpret_cast< ::AcFunDanmu::Im::Message::AudioAttachment&>(::AcFunDanmu::Im::Message::_AudioAttachment_default_instance_);
}
inline const ::AcFunDanmu::Im::Message::AudioAttachment& Attachment::audioattachment() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.Attachment.audioAttachment)
  return _internal_audioattachment();
}
inline ::AcFunDanmu::Im::Message::AudioAttachment* Attachment::unsafe_arena_release_audioattachment() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AcFunDanmu.Im.Message.Attachment.audioAttachment)
  if (_internal_has_audioattachment()) {
    clear_has_attachment();
    ::AcFunDanmu::Im::Message::AudioAttachment* temp = _impl_.attachment_.audioattachment_;
    _impl_.attachment_.audioattachment_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Attachment::unsafe_arena_set_allocated_audioattachment(::AcFunDanmu::Im::Message::AudioAttachment* audioattachment) {
  clear_attachment();
  if (audioattachment) {
    set_has_audioattachment();
    _impl_.attachment_.audioattachment_ = audioattachment;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Message.Attachment.audioAttachment)
}
inline ::AcFunDanmu::Im::Message::AudioAttachment* Attachment::_internal_mutable_audioattachment() {
  if (!_internal_has_audioattachment()) {
    clear_attachment();
    set_has_audioattachment();
    _impl_.attachment_.audioattachment_ = CreateMaybeMessage< ::AcFunDanmu::Im::Message::AudioAttachment >(GetArenaForAllocation());
  }
  return _impl_.attachment_.audioattachment_;
}
inline ::AcFunDanmu::Im::Message::AudioAttachment* Attachment::mutable_audioattachment() {
  ::AcFunDanmu::Im::Message::AudioAttachment* _msg = _internal_mutable_audioattachment();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Message.Attachment.audioAttachment)
  return _msg;
}

inline bool Attachment::has_attachment() const {
  return attachment_case() != ATTACHMENT_NOT_SET;
}
inline void Attachment::clear_has_attachment() {
  _impl_._oneof_case_[0] = ATTACHMENT_NOT_SET;
}
inline Attachment::AttachmentCase Attachment::attachment_case() const {
  return Attachment::AttachmentCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Message
}  // namespace Im
}  // namespace AcFunDanmu

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Attachment_2eproto
