// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ImcVoiceCallRoomInfo.proto

#include "ImcVoiceCallRoomInfo.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Voice {
namespace Call {
PROTOBUF_CONSTEXPR ImcVoiceCallRoomInfo::ImcVoiceCallRoomInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.userstatus_)*/{}
  , /*decltype(_impl_.roomid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.callid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.extra_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fromuser_)*/nullptr
  , /*decltype(_impl_.chattarget_)*/nullptr
  , /*decltype(_impl_.host_)*/nullptr
  , /*decltype(_impl_.messageseqid_)*/int64_t{0}
  , /*decltype(_impl_.calltype_)*/0
  , /*decltype(_impl_.callstatus_)*/0
  , /*decltype(_impl_.roomcreatetimems_)*/int64_t{0}
  , /*decltype(_impl_.voicecallstarttimems_)*/int64_t{0}
  , /*decltype(_impl_.voicecallendtimems_)*/int64_t{0}
  , /*decltype(_impl_.chatmode_)*/0
  , /*decltype(_impl_.maxcount_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ImcVoiceCallRoomInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImcVoiceCallRoomInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImcVoiceCallRoomInfoDefaultTypeInternal() {}
  union {
    ImcVoiceCallRoomInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImcVoiceCallRoomInfoDefaultTypeInternal _ImcVoiceCallRoomInfo_default_instance_;
}  // namespace Call
}  // namespace Voice
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu
static ::_pb::Metadata file_level_metadata_ImcVoiceCallRoomInfo_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_ImcVoiceCallRoomInfo_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ImcVoiceCallRoomInfo_2eproto = nullptr;

const uint32_t TableStruct_ImcVoiceCallRoomInfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Voice::Call::ImcVoiceCallRoomInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Voice::Call::ImcVoiceCallRoomInfo, _impl_.roomid_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Voice::Call::ImcVoiceCallRoomInfo, _impl_.fromuser_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Voice::Call::ImcVoiceCallRoomInfo, _impl_.chattarget_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Voice::Call::ImcVoiceCallRoomInfo, _impl_.callid_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Voice::Call::ImcVoiceCallRoomInfo, _impl_.messageseqid_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Voice::Call::ImcVoiceCallRoomInfo, _impl_.calltype_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Voice::Call::ImcVoiceCallRoomInfo, _impl_.callstatus_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Voice::Call::ImcVoiceCallRoomInfo, _impl_.chatmode_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Voice::Call::ImcVoiceCallRoomInfo, _impl_.roomcreatetimems_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Voice::Call::ImcVoiceCallRoomInfo, _impl_.voicecallstarttimems_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Voice::Call::ImcVoiceCallRoomInfo, _impl_.voicecallendtimems_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Voice::Call::ImcVoiceCallRoomInfo, _impl_.extra_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Voice::Call::ImcVoiceCallRoomInfo, _impl_.host_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Voice::Call::ImcVoiceCallRoomInfo, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Voice::Call::ImcVoiceCallRoomInfo, _impl_.userstatus_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Voice::Call::ImcVoiceCallRoomInfo, _impl_.maxcount_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::AcFunDanmu::Im::Cloud::Voice::Call::ImcVoiceCallRoomInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::AcFunDanmu::Im::Cloud::Voice::Call::_ImcVoiceCallRoomInfo_default_instance_._instance,
};

const char descriptor_table_protodef_ImcVoiceCallRoomInfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032ImcVoiceCallRoomInfo.proto\022\036AcFunDanmu"
  ".Im.Cloud.Voice.Call\032\020CallStatus.proto\032\016"
  "CallType.proto\032\016ChatMode.proto\032\020ChatTarg"
  "et.proto\032\nUser.proto\032\031VoiceCallUserStatu"
  "s.proto\"\336\004\n\024ImcVoiceCallRoomInfo\022\016\n\006room"
  "Id\030\001 \001(\t\022+\n\010fromUser\030\002 \001(\0132\031.AcFunDanmu."
  "Im.Basic.User\0225\n\nchatTarget\030\003 \001(\0132!.AcFu"
  "nDanmu.Im.Message.ChatTarget\022\016\n\006callId\030\004"
  " \001(\t\022\024\n\014messageSeqId\030\005 \001(\003\022:\n\010callType\030\006"
  " \001(\0162(.AcFunDanmu.Im.Cloud.Voice.Call.Ca"
  "llType\022>\n\ncallStatus\030\007 \001(\0162*.AcFunDanmu."
  "Im.Cloud.Voice.Call.CallStatus\022:\n\010chatMo"
  "de\030\010 \001(\0162(.AcFunDanmu.Im.Cloud.Voice.Cal"
  "l.ChatMode\022\030\n\020roomCreateTimeMs\030\t \001(\003\022\034\n\024"
  "voiceCallStartTimeMs\030\n \001(\003\022\032\n\022voiceCallE"
  "ndTimeMs\030\013 \001(\003\022\r\n\005extra\030\014 \001(\014\022\'\n\004host\030\025 "
  "\001(\0132\031.AcFunDanmu.Im.Basic.User\022\r\n\005title\030"
  "\026 \001(\t\022G\n\nuserStatus\030\027 \003(\01323.AcFunDanmu.I"
  "m.Cloud.Voice.Call.VoiceCallUserStatus\022\020"
  "\n\010maxCount\030\030 \001(\005b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_ImcVoiceCallRoomInfo_2eproto_deps[6] = {
  &::descriptor_table_CallStatus_2eproto,
  &::descriptor_table_CallType_2eproto,
  &::descriptor_table_ChatMode_2eproto,
  &::descriptor_table_ChatTarget_2eproto,
  &::descriptor_table_User_2eproto,
  &::descriptor_table_VoiceCallUserStatus_2eproto,
};
static ::_pbi::once_flag descriptor_table_ImcVoiceCallRoomInfo_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ImcVoiceCallRoomInfo_2eproto = {
    false, false, 784, descriptor_table_protodef_ImcVoiceCallRoomInfo_2eproto,
    "ImcVoiceCallRoomInfo.proto",
    &descriptor_table_ImcVoiceCallRoomInfo_2eproto_once, descriptor_table_ImcVoiceCallRoomInfo_2eproto_deps, 6, 1,
    schemas, file_default_instances, TableStruct_ImcVoiceCallRoomInfo_2eproto::offsets,
    file_level_metadata_ImcVoiceCallRoomInfo_2eproto, file_level_enum_descriptors_ImcVoiceCallRoomInfo_2eproto,
    file_level_service_descriptors_ImcVoiceCallRoomInfo_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ImcVoiceCallRoomInfo_2eproto_getter() {
  return &descriptor_table_ImcVoiceCallRoomInfo_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ImcVoiceCallRoomInfo_2eproto(&descriptor_table_ImcVoiceCallRoomInfo_2eproto);
namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Voice {
namespace Call {

// ===================================================================

class ImcVoiceCallRoomInfo::_Internal {
 public:
  static const ::AcFunDanmu::Im::Basic::User& fromuser(const ImcVoiceCallRoomInfo* msg);
  static const ::AcFunDanmu::Im::Message::ChatTarget& chattarget(const ImcVoiceCallRoomInfo* msg);
  static const ::AcFunDanmu::Im::Basic::User& host(const ImcVoiceCallRoomInfo* msg);
};

const ::AcFunDanmu::Im::Basic::User&
ImcVoiceCallRoomInfo::_Internal::fromuser(const ImcVoiceCallRoomInfo* msg) {
  return *msg->_impl_.fromuser_;
}
const ::AcFunDanmu::Im::Message::ChatTarget&
ImcVoiceCallRoomInfo::_Internal::chattarget(const ImcVoiceCallRoomInfo* msg) {
  return *msg->_impl_.chattarget_;
}
const ::AcFunDanmu::Im::Basic::User&
ImcVoiceCallRoomInfo::_Internal::host(const ImcVoiceCallRoomInfo* msg) {
  return *msg->_impl_.host_;
}
void ImcVoiceCallRoomInfo::clear_fromuser() {
  if (GetArenaForAllocation() == nullptr && _impl_.fromuser_ != nullptr) {
    delete _impl_.fromuser_;
  }
  _impl_.fromuser_ = nullptr;
}
void ImcVoiceCallRoomInfo::clear_chattarget() {
  if (GetArenaForAllocation() == nullptr && _impl_.chattarget_ != nullptr) {
    delete _impl_.chattarget_;
  }
  _impl_.chattarget_ = nullptr;
}
void ImcVoiceCallRoomInfo::clear_host() {
  if (GetArenaForAllocation() == nullptr && _impl_.host_ != nullptr) {
    delete _impl_.host_;
  }
  _impl_.host_ = nullptr;
}
void ImcVoiceCallRoomInfo::clear_userstatus() {
  _impl_.userstatus_.Clear();
}
ImcVoiceCallRoomInfo::ImcVoiceCallRoomInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.Im.Cloud.Voice.Call.ImcVoiceCallRoomInfo)
}
ImcVoiceCallRoomInfo::ImcVoiceCallRoomInfo(const ImcVoiceCallRoomInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ImcVoiceCallRoomInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.userstatus_){from._impl_.userstatus_}
    , decltype(_impl_.roomid_){}
    , decltype(_impl_.callid_){}
    , decltype(_impl_.extra_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.fromuser_){nullptr}
    , decltype(_impl_.chattarget_){nullptr}
    , decltype(_impl_.host_){nullptr}
    , decltype(_impl_.messageseqid_){}
    , decltype(_impl_.calltype_){}
    , decltype(_impl_.callstatus_){}
    , decltype(_impl_.roomcreatetimems_){}
    , decltype(_impl_.voicecallstarttimems_){}
    , decltype(_impl_.voicecallendtimems_){}
    , decltype(_impl_.chatmode_){}
    , decltype(_impl_.maxcount_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.roomid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.roomid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_roomid().empty()) {
    _this->_impl_.roomid_.Set(from._internal_roomid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.callid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.callid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_callid().empty()) {
    _this->_impl_.callid_.Set(from._internal_callid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.extra_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extra_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_extra().empty()) {
    _this->_impl_.extra_.Set(from._internal_extra(), 
      _this->GetArenaForAllocation());
  }
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_fromuser()) {
    _this->_impl_.fromuser_ = new ::AcFunDanmu::Im::Basic::User(*from._impl_.fromuser_);
  }
  if (from._internal_has_chattarget()) {
    _this->_impl_.chattarget_ = new ::AcFunDanmu::Im::Message::ChatTarget(*from._impl_.chattarget_);
  }
  if (from._internal_has_host()) {
    _this->_impl_.host_ = new ::AcFunDanmu::Im::Basic::User(*from._impl_.host_);
  }
  ::memcpy(&_impl_.messageseqid_, &from._impl_.messageseqid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.maxcount_) -
    reinterpret_cast<char*>(&_impl_.messageseqid_)) + sizeof(_impl_.maxcount_));
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.Im.Cloud.Voice.Call.ImcVoiceCallRoomInfo)
}

inline void ImcVoiceCallRoomInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.userstatus_){arena}
    , decltype(_impl_.roomid_){}
    , decltype(_impl_.callid_){}
    , decltype(_impl_.extra_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.fromuser_){nullptr}
    , decltype(_impl_.chattarget_){nullptr}
    , decltype(_impl_.host_){nullptr}
    , decltype(_impl_.messageseqid_){int64_t{0}}
    , decltype(_impl_.calltype_){0}
    , decltype(_impl_.callstatus_){0}
    , decltype(_impl_.roomcreatetimems_){int64_t{0}}
    , decltype(_impl_.voicecallstarttimems_){int64_t{0}}
    , decltype(_impl_.voicecallendtimems_){int64_t{0}}
    , decltype(_impl_.chatmode_){0}
    , decltype(_impl_.maxcount_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.roomid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.roomid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.callid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.callid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.extra_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extra_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ImcVoiceCallRoomInfo::~ImcVoiceCallRoomInfo() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.Im.Cloud.Voice.Call.ImcVoiceCallRoomInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImcVoiceCallRoomInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.userstatus_.~RepeatedPtrField();
  _impl_.roomid_.Destroy();
  _impl_.callid_.Destroy();
  _impl_.extra_.Destroy();
  _impl_.title_.Destroy();
  if (this != internal_default_instance()) delete _impl_.fromuser_;
  if (this != internal_default_instance()) delete _impl_.chattarget_;
  if (this != internal_default_instance()) delete _impl_.host_;
}

void ImcVoiceCallRoomInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ImcVoiceCallRoomInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.Im.Cloud.Voice.Call.ImcVoiceCallRoomInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.userstatus_.Clear();
  _impl_.roomid_.ClearToEmpty();
  _impl_.callid_.ClearToEmpty();
  _impl_.extra_.ClearToEmpty();
  _impl_.title_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.fromuser_ != nullptr) {
    delete _impl_.fromuser_;
  }
  _impl_.fromuser_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.chattarget_ != nullptr) {
    delete _impl_.chattarget_;
  }
  _impl_.chattarget_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.host_ != nullptr) {
    delete _impl_.host_;
  }
  _impl_.host_ = nullptr;
  ::memset(&_impl_.messageseqid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.maxcount_) -
      reinterpret_cast<char*>(&_impl_.messageseqid_)) + sizeof(_impl_.maxcount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImcVoiceCallRoomInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string roomId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_roomid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Cloud.Voice.Call.ImcVoiceCallRoomInfo.roomId"));
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Basic.User fromUser = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fromuser(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Message.ChatTarget chatTarget = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_chattarget(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string callId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_callid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Cloud.Voice.Call.ImcVoiceCallRoomInfo.callId"));
        } else
          goto handle_unusual;
        continue;
      // int64 messageSeqId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.messageseqid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Cloud.Voice.Call.CallType callType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_calltype(static_cast<::AcFunDanmu::Im::Cloud::Voice::Call::CallType>(val));
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Cloud.Voice.Call.CallStatus callStatus = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_callstatus(static_cast<::AcFunDanmu::Im::Cloud::Voice::Call::CallStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Cloud.Voice.Call.ChatMode chatMode = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_chatmode(static_cast<::AcFunDanmu::Im::Cloud::Voice::Call::ChatMode>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 roomCreateTimeMs = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.roomcreatetimems_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 voiceCallStartTimeMs = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.voicecallstarttimems_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 voiceCallEndTimeMs = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.voicecallendtimems_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes extra = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_extra();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Basic.User host = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_host(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string title = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Cloud.Voice.Call.ImcVoiceCallRoomInfo.title"));
        } else
          goto handle_unusual;
        continue;
      // repeated .AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallUserStatus userStatus = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_userstatus(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 maxCount = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.maxcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImcVoiceCallRoomInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.Im.Cloud.Voice.Call.ImcVoiceCallRoomInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string roomId = 1;
  if (!this->_internal_roomid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roomid().data(), static_cast<int>(this->_internal_roomid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Cloud.Voice.Call.ImcVoiceCallRoomInfo.roomId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_roomid(), target);
  }

  // .AcFunDanmu.Im.Basic.User fromUser = 2;
  if (this->_internal_has_fromuser()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::fromuser(this),
        _Internal::fromuser(this).GetCachedSize(), target, stream);
  }

  // .AcFunDanmu.Im.Message.ChatTarget chatTarget = 3;
  if (this->_internal_has_chattarget()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::chattarget(this),
        _Internal::chattarget(this).GetCachedSize(), target, stream);
  }

  // string callId = 4;
  if (!this->_internal_callid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_callid().data(), static_cast<int>(this->_internal_callid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Cloud.Voice.Call.ImcVoiceCallRoomInfo.callId");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_callid(), target);
  }

  // int64 messageSeqId = 5;
  if (this->_internal_messageseqid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_messageseqid(), target);
  }

  // .AcFunDanmu.Im.Cloud.Voice.Call.CallType callType = 6;
  if (this->_internal_calltype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_calltype(), target);
  }

  // .AcFunDanmu.Im.Cloud.Voice.Call.CallStatus callStatus = 7;
  if (this->_internal_callstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_callstatus(), target);
  }

  // .AcFunDanmu.Im.Cloud.Voice.Call.ChatMode chatMode = 8;
  if (this->_internal_chatmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_chatmode(), target);
  }

  // int64 roomCreateTimeMs = 9;
  if (this->_internal_roomcreatetimems() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_roomcreatetimems(), target);
  }

  // int64 voiceCallStartTimeMs = 10;
  if (this->_internal_voicecallstarttimems() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_voicecallstarttimems(), target);
  }

  // int64 voiceCallEndTimeMs = 11;
  if (this->_internal_voicecallendtimems() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_voicecallendtimems(), target);
  }

  // bytes extra = 12;
  if (!this->_internal_extra().empty()) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_extra(), target);
  }

  // .AcFunDanmu.Im.Basic.User host = 21;
  if (this->_internal_has_host()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::host(this),
        _Internal::host(this).GetCachedSize(), target, stream);
  }

  // string title = 22;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Cloud.Voice.Call.ImcVoiceCallRoomInfo.title");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_title(), target);
  }

  // repeated .AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallUserStatus userStatus = 23;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_userstatus_size()); i < n; i++) {
    const auto& repfield = this->_internal_userstatus(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(23, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 maxCount = 24;
  if (this->_internal_maxcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(24, this->_internal_maxcount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.Im.Cloud.Voice.Call.ImcVoiceCallRoomInfo)
  return target;
}

size_t ImcVoiceCallRoomInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.Im.Cloud.Voice.Call.ImcVoiceCallRoomInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallUserStatus userStatus = 23;
  total_size += 2UL * this->_internal_userstatus_size();
  for (const auto& msg : this->_impl_.userstatus_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string roomId = 1;
  if (!this->_internal_roomid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roomid());
  }

  // string callId = 4;
  if (!this->_internal_callid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_callid());
  }

  // bytes extra = 12;
  if (!this->_internal_extra().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_extra());
  }

  // string title = 22;
  if (!this->_internal_title().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // .AcFunDanmu.Im.Basic.User fromUser = 2;
  if (this->_internal_has_fromuser()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fromuser_);
  }

  // .AcFunDanmu.Im.Message.ChatTarget chatTarget = 3;
  if (this->_internal_has_chattarget()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.chattarget_);
  }

  // .AcFunDanmu.Im.Basic.User host = 21;
  if (this->_internal_has_host()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.host_);
  }

  // int64 messageSeqId = 5;
  if (this->_internal_messageseqid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_messageseqid());
  }

  // .AcFunDanmu.Im.Cloud.Voice.Call.CallType callType = 6;
  if (this->_internal_calltype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_calltype());
  }

  // .AcFunDanmu.Im.Cloud.Voice.Call.CallStatus callStatus = 7;
  if (this->_internal_callstatus() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_callstatus());
  }

  // int64 roomCreateTimeMs = 9;
  if (this->_internal_roomcreatetimems() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_roomcreatetimems());
  }

  // int64 voiceCallStartTimeMs = 10;
  if (this->_internal_voicecallstarttimems() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_voicecallstarttimems());
  }

  // int64 voiceCallEndTimeMs = 11;
  if (this->_internal_voicecallendtimems() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_voicecallendtimems());
  }

  // .AcFunDanmu.Im.Cloud.Voice.Call.ChatMode chatMode = 8;
  if (this->_internal_chatmode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_chatmode());
  }

  // int32 maxCount = 24;
  if (this->_internal_maxcount() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_maxcount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImcVoiceCallRoomInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ImcVoiceCallRoomInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImcVoiceCallRoomInfo::GetClassData() const { return &_class_data_; }


void ImcVoiceCallRoomInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ImcVoiceCallRoomInfo*>(&to_msg);
  auto& from = static_cast<const ImcVoiceCallRoomInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.Im.Cloud.Voice.Call.ImcVoiceCallRoomInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.userstatus_.MergeFrom(from._impl_.userstatus_);
  if (!from._internal_roomid().empty()) {
    _this->_internal_set_roomid(from._internal_roomid());
  }
  if (!from._internal_callid().empty()) {
    _this->_internal_set_callid(from._internal_callid());
  }
  if (!from._internal_extra().empty()) {
    _this->_internal_set_extra(from._internal_extra());
  }
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (from._internal_has_fromuser()) {
    _this->_internal_mutable_fromuser()->::AcFunDanmu::Im::Basic::User::MergeFrom(
        from._internal_fromuser());
  }
  if (from._internal_has_chattarget()) {
    _this->_internal_mutable_chattarget()->::AcFunDanmu::Im::Message::ChatTarget::MergeFrom(
        from._internal_chattarget());
  }
  if (from._internal_has_host()) {
    _this->_internal_mutable_host()->::AcFunDanmu::Im::Basic::User::MergeFrom(
        from._internal_host());
  }
  if (from._internal_messageseqid() != 0) {
    _this->_internal_set_messageseqid(from._internal_messageseqid());
  }
  if (from._internal_calltype() != 0) {
    _this->_internal_set_calltype(from._internal_calltype());
  }
  if (from._internal_callstatus() != 0) {
    _this->_internal_set_callstatus(from._internal_callstatus());
  }
  if (from._internal_roomcreatetimems() != 0) {
    _this->_internal_set_roomcreatetimems(from._internal_roomcreatetimems());
  }
  if (from._internal_voicecallstarttimems() != 0) {
    _this->_internal_set_voicecallstarttimems(from._internal_voicecallstarttimems());
  }
  if (from._internal_voicecallendtimems() != 0) {
    _this->_internal_set_voicecallendtimems(from._internal_voicecallendtimems());
  }
  if (from._internal_chatmode() != 0) {
    _this->_internal_set_chatmode(from._internal_chatmode());
  }
  if (from._internal_maxcount() != 0) {
    _this->_internal_set_maxcount(from._internal_maxcount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImcVoiceCallRoomInfo::CopyFrom(const ImcVoiceCallRoomInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.Im.Cloud.Voice.Call.ImcVoiceCallRoomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImcVoiceCallRoomInfo::IsInitialized() const {
  return true;
}

void ImcVoiceCallRoomInfo::InternalSwap(ImcVoiceCallRoomInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.userstatus_.InternalSwap(&other->_impl_.userstatus_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.roomid_, lhs_arena,
      &other->_impl_.roomid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.callid_, lhs_arena,
      &other->_impl_.callid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.extra_, lhs_arena,
      &other->_impl_.extra_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImcVoiceCallRoomInfo, _impl_.maxcount_)
      + sizeof(ImcVoiceCallRoomInfo::_impl_.maxcount_)
      - PROTOBUF_FIELD_OFFSET(ImcVoiceCallRoomInfo, _impl_.fromuser_)>(
          reinterpret_cast<char*>(&_impl_.fromuser_),
          reinterpret_cast<char*>(&other->_impl_.fromuser_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImcVoiceCallRoomInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ImcVoiceCallRoomInfo_2eproto_getter, &descriptor_table_ImcVoiceCallRoomInfo_2eproto_once,
      file_level_metadata_ImcVoiceCallRoomInfo_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Call
}  // namespace Voice
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AcFunDanmu::Im::Cloud::Voice::Call::ImcVoiceCallRoomInfo*
Arena::CreateMaybeMessage< ::AcFunDanmu::Im::Cloud::Voice::Call::ImcVoiceCallRoomInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::Im::Cloud::Voice::Call::ImcVoiceCallRoomInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
