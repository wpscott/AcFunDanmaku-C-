// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RichTextNoticeMessage.proto

#include "RichTextNoticeMessage.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace AcFunDanmu {
namespace Im {
namespace Message {
PROTOBUF_CONSTEXPR RichTextNoticeMessage_RichTextItem::RichTextNoticeMessage_RichTextItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.clickaction_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.color_)*/0
  , /*decltype(_impl_.start_)*/0
  , /*decltype(_impl_.len_)*/0
  , /*decltype(_impl_.underline_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RichTextNoticeMessage_RichTextItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RichTextNoticeMessage_RichTextItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RichTextNoticeMessage_RichTextItemDefaultTypeInternal() {}
  union {
    RichTextNoticeMessage_RichTextItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RichTextNoticeMessage_RichTextItemDefaultTypeInternal _RichTextNoticeMessage_RichTextItem_default_instance_;
PROTOBUF_CONSTEXPR RichTextNoticeMessage::RichTextNoticeMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RichTextNoticeMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RichTextNoticeMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RichTextNoticeMessageDefaultTypeInternal() {}
  union {
    RichTextNoticeMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RichTextNoticeMessageDefaultTypeInternal _RichTextNoticeMessage_default_instance_;
}  // namespace Message
}  // namespace Im
}  // namespace AcFunDanmu
static ::_pb::Metadata file_level_metadata_RichTextNoticeMessage_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_RichTextNoticeMessage_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_RichTextNoticeMessage_2eproto = nullptr;

const uint32_t TableStruct_RichTextNoticeMessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::RichTextNoticeMessage_RichTextItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::RichTextNoticeMessage_RichTextItem, _impl_.color_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::RichTextNoticeMessage_RichTextItem, _impl_.start_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::RichTextNoticeMessage_RichTextItem, _impl_.len_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::RichTextNoticeMessage_RichTextItem, _impl_.clickaction_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::RichTextNoticeMessage_RichTextItem, _impl_.underline_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::RichTextNoticeMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Message::RichTextNoticeMessage, _impl_.items_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::AcFunDanmu::Im::Message::RichTextNoticeMessage_RichTextItem)},
  { 11, -1, -1, sizeof(::AcFunDanmu::Im::Message::RichTextNoticeMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::AcFunDanmu::Im::Message::_RichTextNoticeMessage_RichTextItem_default_instance_._instance,
  &::AcFunDanmu::Im::Message::_RichTextNoticeMessage_default_instance_._instance,
};

const char descriptor_table_protodef_RichTextNoticeMessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033RichTextNoticeMessage.proto\022\025AcFunDanm"
  "u.Im.Message\"\304\001\n\025RichTextNoticeMessage\022H"
  "\n\005items\030\001 \003(\01329.AcFunDanmu.Im.Message.Ri"
  "chTextNoticeMessage.RichTextItem\032a\n\014Rich"
  "TextItem\022\r\n\005color\030\001 \001(\005\022\r\n\005start\030\002 \001(\005\022\013"
  "\n\003len\030\003 \001(\005\022\023\n\013clickAction\030\004 \001(\t\022\021\n\tunde"
  "rline\030\005 \001(\010b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_RichTextNoticeMessage_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_RichTextNoticeMessage_2eproto = {
    false, false, 259, descriptor_table_protodef_RichTextNoticeMessage_2eproto,
    "RichTextNoticeMessage.proto",
    &descriptor_table_RichTextNoticeMessage_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_RichTextNoticeMessage_2eproto::offsets,
    file_level_metadata_RichTextNoticeMessage_2eproto, file_level_enum_descriptors_RichTextNoticeMessage_2eproto,
    file_level_service_descriptors_RichTextNoticeMessage_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_RichTextNoticeMessage_2eproto_getter() {
  return &descriptor_table_RichTextNoticeMessage_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_RichTextNoticeMessage_2eproto(&descriptor_table_RichTextNoticeMessage_2eproto);
namespace AcFunDanmu {
namespace Im {
namespace Message {

// ===================================================================

class RichTextNoticeMessage_RichTextItem::_Internal {
 public:
};

RichTextNoticeMessage_RichTextItem::RichTextNoticeMessage_RichTextItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.Im.Message.RichTextNoticeMessage.RichTextItem)
}
RichTextNoticeMessage_RichTextItem::RichTextNoticeMessage_RichTextItem(const RichTextNoticeMessage_RichTextItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RichTextNoticeMessage_RichTextItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.clickaction_){}
    , decltype(_impl_.color_){}
    , decltype(_impl_.start_){}
    , decltype(_impl_.len_){}
    , decltype(_impl_.underline_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.clickaction_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clickaction_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clickaction().empty()) {
    _this->_impl_.clickaction_.Set(from._internal_clickaction(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.color_, &from._impl_.color_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.underline_) -
    reinterpret_cast<char*>(&_impl_.color_)) + sizeof(_impl_.underline_));
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.Im.Message.RichTextNoticeMessage.RichTextItem)
}

inline void RichTextNoticeMessage_RichTextItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.clickaction_){}
    , decltype(_impl_.color_){0}
    , decltype(_impl_.start_){0}
    , decltype(_impl_.len_){0}
    , decltype(_impl_.underline_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.clickaction_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clickaction_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RichTextNoticeMessage_RichTextItem::~RichTextNoticeMessage_RichTextItem() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.Im.Message.RichTextNoticeMessage.RichTextItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RichTextNoticeMessage_RichTextItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.clickaction_.Destroy();
}

void RichTextNoticeMessage_RichTextItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RichTextNoticeMessage_RichTextItem::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.Im.Message.RichTextNoticeMessage.RichTextItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.clickaction_.ClearToEmpty();
  ::memset(&_impl_.color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.underline_) -
      reinterpret_cast<char*>(&_impl_.color_)) + sizeof(_impl_.underline_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RichTextNoticeMessage_RichTextItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 len = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string clickAction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_clickaction();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Message.RichTextNoticeMessage.RichTextItem.clickAction"));
        } else
          goto handle_unusual;
        continue;
      // bool underline = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.underline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RichTextNoticeMessage_RichTextItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.Im.Message.RichTextNoticeMessage.RichTextItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 color = 1;
  if (this->_internal_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_color(), target);
  }

  // int32 start = 2;
  if (this->_internal_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_start(), target);
  }

  // int32 len = 3;
  if (this->_internal_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_len(), target);
  }

  // string clickAction = 4;
  if (!this->_internal_clickaction().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clickaction().data(), static_cast<int>(this->_internal_clickaction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Message.RichTextNoticeMessage.RichTextItem.clickAction");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_clickaction(), target);
  }

  // bool underline = 5;
  if (this->_internal_underline() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_underline(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.Im.Message.RichTextNoticeMessage.RichTextItem)
  return target;
}

size_t RichTextNoticeMessage_RichTextItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.Im.Message.RichTextNoticeMessage.RichTextItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string clickAction = 4;
  if (!this->_internal_clickaction().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clickaction());
  }

  // int32 color = 1;
  if (this->_internal_color() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_color());
  }

  // int32 start = 2;
  if (this->_internal_start() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_start());
  }

  // int32 len = 3;
  if (this->_internal_len() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_len());
  }

  // bool underline = 5;
  if (this->_internal_underline() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RichTextNoticeMessage_RichTextItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RichTextNoticeMessage_RichTextItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RichTextNoticeMessage_RichTextItem::GetClassData() const { return &_class_data_; }


void RichTextNoticeMessage_RichTextItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RichTextNoticeMessage_RichTextItem*>(&to_msg);
  auto& from = static_cast<const RichTextNoticeMessage_RichTextItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.Im.Message.RichTextNoticeMessage.RichTextItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_clickaction().empty()) {
    _this->_internal_set_clickaction(from._internal_clickaction());
  }
  if (from._internal_color() != 0) {
    _this->_internal_set_color(from._internal_color());
  }
  if (from._internal_start() != 0) {
    _this->_internal_set_start(from._internal_start());
  }
  if (from._internal_len() != 0) {
    _this->_internal_set_len(from._internal_len());
  }
  if (from._internal_underline() != 0) {
    _this->_internal_set_underline(from._internal_underline());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RichTextNoticeMessage_RichTextItem::CopyFrom(const RichTextNoticeMessage_RichTextItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.Im.Message.RichTextNoticeMessage.RichTextItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RichTextNoticeMessage_RichTextItem::IsInitialized() const {
  return true;
}

void RichTextNoticeMessage_RichTextItem::InternalSwap(RichTextNoticeMessage_RichTextItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clickaction_, lhs_arena,
      &other->_impl_.clickaction_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RichTextNoticeMessage_RichTextItem, _impl_.underline_)
      + sizeof(RichTextNoticeMessage_RichTextItem::_impl_.underline_)
      - PROTOBUF_FIELD_OFFSET(RichTextNoticeMessage_RichTextItem, _impl_.color_)>(
          reinterpret_cast<char*>(&_impl_.color_),
          reinterpret_cast<char*>(&other->_impl_.color_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RichTextNoticeMessage_RichTextItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_RichTextNoticeMessage_2eproto_getter, &descriptor_table_RichTextNoticeMessage_2eproto_once,
      file_level_metadata_RichTextNoticeMessage_2eproto[0]);
}

// ===================================================================

class RichTextNoticeMessage::_Internal {
 public:
};

RichTextNoticeMessage::RichTextNoticeMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.Im.Message.RichTextNoticeMessage)
}
RichTextNoticeMessage::RichTextNoticeMessage(const RichTextNoticeMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RichTextNoticeMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.Im.Message.RichTextNoticeMessage)
}

inline void RichTextNoticeMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RichTextNoticeMessage::~RichTextNoticeMessage() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.Im.Message.RichTextNoticeMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RichTextNoticeMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void RichTextNoticeMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RichTextNoticeMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.Im.Message.RichTextNoticeMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RichTextNoticeMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .AcFunDanmu.Im.Message.RichTextNoticeMessage.RichTextItem items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RichTextNoticeMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.Im.Message.RichTextNoticeMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .AcFunDanmu.Im.Message.RichTextNoticeMessage.RichTextItem items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.Im.Message.RichTextNoticeMessage)
  return target;
}

size_t RichTextNoticeMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.Im.Message.RichTextNoticeMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .AcFunDanmu.Im.Message.RichTextNoticeMessage.RichTextItem items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RichTextNoticeMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RichTextNoticeMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RichTextNoticeMessage::GetClassData() const { return &_class_data_; }


void RichTextNoticeMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RichTextNoticeMessage*>(&to_msg);
  auto& from = static_cast<const RichTextNoticeMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.Im.Message.RichTextNoticeMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RichTextNoticeMessage::CopyFrom(const RichTextNoticeMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.Im.Message.RichTextNoticeMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RichTextNoticeMessage::IsInitialized() const {
  return true;
}

void RichTextNoticeMessage::InternalSwap(RichTextNoticeMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RichTextNoticeMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_RichTextNoticeMessage_2eproto_getter, &descriptor_table_RichTextNoticeMessage_2eproto_once,
      file_level_metadata_RichTextNoticeMessage_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Message
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AcFunDanmu::Im::Message::RichTextNoticeMessage_RichTextItem*
Arena::CreateMaybeMessage< ::AcFunDanmu::Im::Message::RichTextNoticeMessage_RichTextItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::Im::Message::RichTextNoticeMessage_RichTextItem >(arena);
}
template<> PROTOBUF_NOINLINE ::AcFunDanmu::Im::Message::RichTextNoticeMessage*
Arena::CreateMaybeMessage< ::AcFunDanmu::Im::Message::RichTextNoticeMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::Im::Message::RichTextNoticeMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
