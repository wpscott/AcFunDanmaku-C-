// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Invitation.proto

#include "Invitation.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Message {
PROTOBUF_CONSTEXPR Invitation::Invitation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.groupid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.groupname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.desccontent_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.auditcomments_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.groupnumber_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.groupheadurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.requestuser_)*/nullptr
  , /*decltype(_impl_.operator__)*/nullptr
  , /*decltype(_impl_.reqseq_)*/int64_t{0}
  , /*decltype(_impl_.findtype_)*/0
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InvitationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InvitationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InvitationDefaultTypeInternal() {}
  union {
    Invitation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InvitationDefaultTypeInternal _Invitation_default_instance_;
}  // namespace Message
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu
static ::_pb::Metadata file_level_metadata_Invitation_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Invitation_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Invitation_2eproto = nullptr;

const uint32_t TableStruct_Invitation_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Message::Invitation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Message::Invitation, _impl_.reqseq_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Message::Invitation, _impl_.groupid_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Message::Invitation, _impl_.requestuser_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Message::Invitation, _impl_.groupname_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Message::Invitation, _impl_.findtype_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Message::Invitation, _impl_.desccontent_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Message::Invitation, _impl_.auditcomments_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Message::Invitation, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Message::Invitation, _impl_.operator__),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Message::Invitation, _impl_.groupnumber_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Cloud::Message::Invitation, _impl_.groupheadurl_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::AcFunDanmu::Im::Cloud::Message::Invitation)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::AcFunDanmu::Im::Cloud::Message::_Invitation_default_instance_._instance,
};

const char descriptor_table_protodef_Invitation_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020Invitation.proto\022\033AcFunDanmu.Im.Cloud."
  "Message\032\030InvitationOperator.proto\032\027JoinR"
  "equestStatus.proto\032\nUser.proto\"\334\002\n\nInvit"
  "ation\022\016\n\006reqSeq\030\001 \001(\003\022\017\n\007groupId\030\002 \001(\t\022."
  "\n\013requestUser\030\003 \001(\0132\031.AcFunDanmu.Im.Basi"
  "c.User\022\021\n\tgroupName\030\004 \001(\t\022\020\n\010findType\030\005 "
  "\001(\005\022\023\n\013descContent\030\006 \001(\t\022\025\n\rauditComment"
  "s\030\007 \001(\t\022>\n\006status\030\010 \001(\0162..AcFunDanmu.Im."
  "Cloud.Message.JoinRequestStatus\022A\n\010opera"
  "tor\030\t \001(\0132/.AcFunDanmu.Im.Cloud.Message."
  "InvitationOperator\022\023\n\013groupNumber\030\n \001(\t\022"
  "\024\n\014groupHeadUrl\030\013 \001(\tb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_Invitation_2eproto_deps[3] = {
  &::descriptor_table_InvitationOperator_2eproto,
  &::descriptor_table_JoinRequestStatus_2eproto,
  &::descriptor_table_User_2eproto,
};
static ::_pbi::once_flag descriptor_table_Invitation_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Invitation_2eproto = {
    false, false, 469, descriptor_table_protodef_Invitation_2eproto,
    "Invitation.proto",
    &descriptor_table_Invitation_2eproto_once, descriptor_table_Invitation_2eproto_deps, 3, 1,
    schemas, file_default_instances, TableStruct_Invitation_2eproto::offsets,
    file_level_metadata_Invitation_2eproto, file_level_enum_descriptors_Invitation_2eproto,
    file_level_service_descriptors_Invitation_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Invitation_2eproto_getter() {
  return &descriptor_table_Invitation_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Invitation_2eproto(&descriptor_table_Invitation_2eproto);
namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Message {

// ===================================================================

class Invitation::_Internal {
 public:
  static const ::AcFunDanmu::Im::Basic::User& requestuser(const Invitation* msg);
  static const ::AcFunDanmu::Im::Cloud::Message::InvitationOperator& operator_(const Invitation* msg);
};

const ::AcFunDanmu::Im::Basic::User&
Invitation::_Internal::requestuser(const Invitation* msg) {
  return *msg->_impl_.requestuser_;
}
const ::AcFunDanmu::Im::Cloud::Message::InvitationOperator&
Invitation::_Internal::operator_(const Invitation* msg) {
  return *msg->_impl_.operator__;
}
void Invitation::clear_requestuser() {
  if (GetArenaForAllocation() == nullptr && _impl_.requestuser_ != nullptr) {
    delete _impl_.requestuser_;
  }
  _impl_.requestuser_ = nullptr;
}
void Invitation::clear_operator_() {
  if (GetArenaForAllocation() == nullptr && _impl_.operator__ != nullptr) {
    delete _impl_.operator__;
  }
  _impl_.operator__ = nullptr;
}
Invitation::Invitation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.Im.Cloud.Message.Invitation)
}
Invitation::Invitation(const Invitation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Invitation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.groupid_){}
    , decltype(_impl_.groupname_){}
    , decltype(_impl_.desccontent_){}
    , decltype(_impl_.auditcomments_){}
    , decltype(_impl_.groupnumber_){}
    , decltype(_impl_.groupheadurl_){}
    , decltype(_impl_.requestuser_){nullptr}
    , decltype(_impl_.operator__){nullptr}
    , decltype(_impl_.reqseq_){}
    , decltype(_impl_.findtype_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.groupid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.groupid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_groupid().empty()) {
    _this->_impl_.groupid_.Set(from._internal_groupid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.groupname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.groupname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_groupname().empty()) {
    _this->_impl_.groupname_.Set(from._internal_groupname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.desccontent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.desccontent_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_desccontent().empty()) {
    _this->_impl_.desccontent_.Set(from._internal_desccontent(), 
      _this->GetArenaForAllocation());
  }
  _impl_.auditcomments_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.auditcomments_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_auditcomments().empty()) {
    _this->_impl_.auditcomments_.Set(from._internal_auditcomments(), 
      _this->GetArenaForAllocation());
  }
  _impl_.groupnumber_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.groupnumber_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_groupnumber().empty()) {
    _this->_impl_.groupnumber_.Set(from._internal_groupnumber(), 
      _this->GetArenaForAllocation());
  }
  _impl_.groupheadurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.groupheadurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_groupheadurl().empty()) {
    _this->_impl_.groupheadurl_.Set(from._internal_groupheadurl(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_requestuser()) {
    _this->_impl_.requestuser_ = new ::AcFunDanmu::Im::Basic::User(*from._impl_.requestuser_);
  }
  if (from._internal_has_operator_()) {
    _this->_impl_.operator__ = new ::AcFunDanmu::Im::Cloud::Message::InvitationOperator(*from._impl_.operator__);
  }
  ::memcpy(&_impl_.reqseq_, &from._impl_.reqseq_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.reqseq_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.Im.Cloud.Message.Invitation)
}

inline void Invitation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.groupid_){}
    , decltype(_impl_.groupname_){}
    , decltype(_impl_.desccontent_){}
    , decltype(_impl_.auditcomments_){}
    , decltype(_impl_.groupnumber_){}
    , decltype(_impl_.groupheadurl_){}
    , decltype(_impl_.requestuser_){nullptr}
    , decltype(_impl_.operator__){nullptr}
    , decltype(_impl_.reqseq_){int64_t{0}}
    , decltype(_impl_.findtype_){0}
    , decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.groupid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.groupid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.groupname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.groupname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.desccontent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.desccontent_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.auditcomments_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.auditcomments_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.groupnumber_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.groupnumber_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.groupheadurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.groupheadurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Invitation::~Invitation() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.Im.Cloud.Message.Invitation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Invitation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.groupid_.Destroy();
  _impl_.groupname_.Destroy();
  _impl_.desccontent_.Destroy();
  _impl_.auditcomments_.Destroy();
  _impl_.groupnumber_.Destroy();
  _impl_.groupheadurl_.Destroy();
  if (this != internal_default_instance()) delete _impl_.requestuser_;
  if (this != internal_default_instance()) delete _impl_.operator__;
}

void Invitation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Invitation::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.Im.Cloud.Message.Invitation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.groupid_.ClearToEmpty();
  _impl_.groupname_.ClearToEmpty();
  _impl_.desccontent_.ClearToEmpty();
  _impl_.auditcomments_.ClearToEmpty();
  _impl_.groupnumber_.ClearToEmpty();
  _impl_.groupheadurl_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.requestuser_ != nullptr) {
    delete _impl_.requestuser_;
  }
  _impl_.requestuser_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.operator__ != nullptr) {
    delete _impl_.operator__;
  }
  _impl_.operator__ = nullptr;
  ::memset(&_impl_.reqseq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.reqseq_)) + sizeof(_impl_.status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Invitation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 reqSeq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.reqseq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string groupId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_groupid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Cloud.Message.Invitation.groupId"));
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Basic.User requestUser = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestuser(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string groupName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_groupname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Cloud.Message.Invitation.groupName"));
        } else
          goto handle_unusual;
        continue;
      // int32 findType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.findtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string descContent = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_desccontent();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Cloud.Message.Invitation.descContent"));
        } else
          goto handle_unusual;
        continue;
      // string auditComments = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_auditcomments();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Cloud.Message.Invitation.auditComments"));
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Cloud.Message.JoinRequestStatus status = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::AcFunDanmu::Im::Cloud::Message::JoinRequestStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Cloud.Message.InvitationOperator operator = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_operator_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string groupNumber = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_groupnumber();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Cloud.Message.Invitation.groupNumber"));
        } else
          goto handle_unusual;
        continue;
      // string groupHeadUrl = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_groupheadurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Cloud.Message.Invitation.groupHeadUrl"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Invitation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.Im.Cloud.Message.Invitation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 reqSeq = 1;
  if (this->_internal_reqseq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_reqseq(), target);
  }

  // string groupId = 2;
  if (!this->_internal_groupid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_groupid().data(), static_cast<int>(this->_internal_groupid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Cloud.Message.Invitation.groupId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_groupid(), target);
  }

  // .AcFunDanmu.Im.Basic.User requestUser = 3;
  if (this->_internal_has_requestuser()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::requestuser(this),
        _Internal::requestuser(this).GetCachedSize(), target, stream);
  }

  // string groupName = 4;
  if (!this->_internal_groupname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_groupname().data(), static_cast<int>(this->_internal_groupname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Cloud.Message.Invitation.groupName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_groupname(), target);
  }

  // int32 findType = 5;
  if (this->_internal_findtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_findtype(), target);
  }

  // string descContent = 6;
  if (!this->_internal_desccontent().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_desccontent().data(), static_cast<int>(this->_internal_desccontent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Cloud.Message.Invitation.descContent");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_desccontent(), target);
  }

  // string auditComments = 7;
  if (!this->_internal_auditcomments().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auditcomments().data(), static_cast<int>(this->_internal_auditcomments().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Cloud.Message.Invitation.auditComments");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_auditcomments(), target);
  }

  // .AcFunDanmu.Im.Cloud.Message.JoinRequestStatus status = 8;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_status(), target);
  }

  // .AcFunDanmu.Im.Cloud.Message.InvitationOperator operator = 9;
  if (this->_internal_has_operator_()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::operator_(this),
        _Internal::operator_(this).GetCachedSize(), target, stream);
  }

  // string groupNumber = 10;
  if (!this->_internal_groupnumber().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_groupnumber().data(), static_cast<int>(this->_internal_groupnumber().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Cloud.Message.Invitation.groupNumber");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_groupnumber(), target);
  }

  // string groupHeadUrl = 11;
  if (!this->_internal_groupheadurl().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_groupheadurl().data(), static_cast<int>(this->_internal_groupheadurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Cloud.Message.Invitation.groupHeadUrl");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_groupheadurl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.Im.Cloud.Message.Invitation)
  return target;
}

size_t Invitation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.Im.Cloud.Message.Invitation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string groupId = 2;
  if (!this->_internal_groupid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_groupid());
  }

  // string groupName = 4;
  if (!this->_internal_groupname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_groupname());
  }

  // string descContent = 6;
  if (!this->_internal_desccontent().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desccontent());
  }

  // string auditComments = 7;
  if (!this->_internal_auditcomments().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auditcomments());
  }

  // string groupNumber = 10;
  if (!this->_internal_groupnumber().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_groupnumber());
  }

  // string groupHeadUrl = 11;
  if (!this->_internal_groupheadurl().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_groupheadurl());
  }

  // .AcFunDanmu.Im.Basic.User requestUser = 3;
  if (this->_internal_has_requestuser()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.requestuser_);
  }

  // .AcFunDanmu.Im.Cloud.Message.InvitationOperator operator = 9;
  if (this->_internal_has_operator_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.operator__);
  }

  // int64 reqSeq = 1;
  if (this->_internal_reqseq() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_reqseq());
  }

  // int32 findType = 5;
  if (this->_internal_findtype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_findtype());
  }

  // .AcFunDanmu.Im.Cloud.Message.JoinRequestStatus status = 8;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Invitation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Invitation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Invitation::GetClassData() const { return &_class_data_; }


void Invitation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Invitation*>(&to_msg);
  auto& from = static_cast<const Invitation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.Im.Cloud.Message.Invitation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_groupid().empty()) {
    _this->_internal_set_groupid(from._internal_groupid());
  }
  if (!from._internal_groupname().empty()) {
    _this->_internal_set_groupname(from._internal_groupname());
  }
  if (!from._internal_desccontent().empty()) {
    _this->_internal_set_desccontent(from._internal_desccontent());
  }
  if (!from._internal_auditcomments().empty()) {
    _this->_internal_set_auditcomments(from._internal_auditcomments());
  }
  if (!from._internal_groupnumber().empty()) {
    _this->_internal_set_groupnumber(from._internal_groupnumber());
  }
  if (!from._internal_groupheadurl().empty()) {
    _this->_internal_set_groupheadurl(from._internal_groupheadurl());
  }
  if (from._internal_has_requestuser()) {
    _this->_internal_mutable_requestuser()->::AcFunDanmu::Im::Basic::User::MergeFrom(
        from._internal_requestuser());
  }
  if (from._internal_has_operator_()) {
    _this->_internal_mutable_operator_()->::AcFunDanmu::Im::Cloud::Message::InvitationOperator::MergeFrom(
        from._internal_operator_());
  }
  if (from._internal_reqseq() != 0) {
    _this->_internal_set_reqseq(from._internal_reqseq());
  }
  if (from._internal_findtype() != 0) {
    _this->_internal_set_findtype(from._internal_findtype());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Invitation::CopyFrom(const Invitation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.Im.Cloud.Message.Invitation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Invitation::IsInitialized() const {
  return true;
}

void Invitation::InternalSwap(Invitation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.groupid_, lhs_arena,
      &other->_impl_.groupid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.groupname_, lhs_arena,
      &other->_impl_.groupname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.desccontent_, lhs_arena,
      &other->_impl_.desccontent_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.auditcomments_, lhs_arena,
      &other->_impl_.auditcomments_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.groupnumber_, lhs_arena,
      &other->_impl_.groupnumber_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.groupheadurl_, lhs_arena,
      &other->_impl_.groupheadurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Invitation, _impl_.status_)
      + sizeof(Invitation::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(Invitation, _impl_.requestuser_)>(
          reinterpret_cast<char*>(&_impl_.requestuser_),
          reinterpret_cast<char*>(&other->_impl_.requestuser_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Invitation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Invitation_2eproto_getter, &descriptor_table_Invitation_2eproto_once,
      file_level_metadata_Invitation_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Message
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AcFunDanmu::Im::Cloud::Message::Invitation*
Arena::CreateMaybeMessage< ::AcFunDanmu::Im::Cloud::Message::Invitation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::Im::Cloud::Message::Invitation >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
