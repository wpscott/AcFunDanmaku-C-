// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RemindBody.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_RemindBody_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_RemindBody_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_RemindBody_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_RemindBody_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_RemindBody_2eproto;
namespace AcFunDanmu {
namespace Im {
namespace Message {
class RemindBody;
struct RemindBodyDefaultTypeInternal;
extern RemindBodyDefaultTypeInternal _RemindBody_default_instance_;
}  // namespace Message
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::Im::Message::RemindBody* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Message::RemindBody>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {
namespace Im {
namespace Message {

enum RemindBody_RemindType : int {
  RemindBody_RemindType_UNKNOWN = 0,
  RemindBody_RemindType_AT_ALL = 1,
  RemindBody_RemindType_AT_USER = 2,
  RemindBody_RemindType_GROUP_BULLETIN = 3,
  RemindBody_RemindType_RECEIPT_MESSAGE = 4,
  RemindBody_RemindType_GROUP_JOIN_REQUEST = 5,
  RemindBody_RemindType_USER_MESSAGE_ALERT = 6,
  RemindBody_RemindType_RemindBody_RemindType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RemindBody_RemindType_RemindBody_RemindType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RemindBody_RemindType_IsValid(int value);
constexpr RemindBody_RemindType RemindBody_RemindType_RemindType_MIN = RemindBody_RemindType_UNKNOWN;
constexpr RemindBody_RemindType RemindBody_RemindType_RemindType_MAX = RemindBody_RemindType_USER_MESSAGE_ALERT;
constexpr int RemindBody_RemindType_RemindType_ARRAYSIZE = RemindBody_RemindType_RemindType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RemindBody_RemindType_descriptor();
template<typename T>
inline const std::string& RemindBody_RemindType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RemindBody_RemindType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RemindBody_RemindType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RemindBody_RemindType_descriptor(), enum_t_value);
}
inline bool RemindBody_RemindType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RemindBody_RemindType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RemindBody_RemindType>(
    RemindBody_RemindType_descriptor(), name, value);
}
// ===================================================================

class RemindBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Message.RemindBody) */ {
 public:
  inline RemindBody() : RemindBody(nullptr) {}
  ~RemindBody() override;
  explicit PROTOBUF_CONSTEXPR RemindBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemindBody(const RemindBody& from);
  RemindBody(RemindBody&& from) noexcept
    : RemindBody() {
    *this = ::std::move(from);
  }

  inline RemindBody& operator=(const RemindBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemindBody& operator=(RemindBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemindBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemindBody* internal_default_instance() {
    return reinterpret_cast<const RemindBody*>(
               &_RemindBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RemindBody& a, RemindBody& b) {
    a.Swap(&b);
  }
  inline void Swap(RemindBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemindBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemindBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemindBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RemindBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RemindBody& from) {
    RemindBody::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemindBody* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Message.RemindBody";
  }
  protected:
  explicit RemindBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RemindBody_RemindType RemindType;
  static constexpr RemindType UNKNOWN =
    RemindBody_RemindType_UNKNOWN;
  static constexpr RemindType AT_ALL =
    RemindBody_RemindType_AT_ALL;
  static constexpr RemindType AT_USER =
    RemindBody_RemindType_AT_USER;
  static constexpr RemindType GROUP_BULLETIN =
    RemindBody_RemindType_GROUP_BULLETIN;
  static constexpr RemindType RECEIPT_MESSAGE =
    RemindBody_RemindType_RECEIPT_MESSAGE;
  static constexpr RemindType GROUP_JOIN_REQUEST =
    RemindBody_RemindType_GROUP_JOIN_REQUEST;
  static constexpr RemindType USER_MESSAGE_ALERT =
    RemindBody_RemindType_USER_MESSAGE_ALERT;
  static inline bool RemindType_IsValid(int value) {
    return RemindBody_RemindType_IsValid(value);
  }
  static constexpr RemindType RemindType_MIN =
    RemindBody_RemindType_RemindType_MIN;
  static constexpr RemindType RemindType_MAX =
    RemindBody_RemindType_RemindType_MAX;
  static constexpr int RemindType_ARRAYSIZE =
    RemindBody_RemindType_RemindType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RemindType_descriptor() {
    return RemindBody_RemindType_descriptor();
  }
  template<typename T>
  static inline const std::string& RemindType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RemindType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RemindType_Name.");
    return RemindBody_RemindType_Name(enum_t_value);
  }
  static inline bool RemindType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RemindType* value) {
    return RemindBody_RemindType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 4,
    kSeqIdFieldNumber = 2,
    kTargetIdFieldNumber = 3,
    kRemindTypeFieldNumber = 1,
    kStartIndexFieldNumber = 5,
    kLengthFieldNumber = 6,
  };
  // string userName = 4;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // int64 seqId = 2;
  void clear_seqid();
  int64_t seqid() const;
  void set_seqid(int64_t value);
  private:
  int64_t _internal_seqid() const;
  void _internal_set_seqid(int64_t value);
  public:

  // int64 targetId = 3;
  void clear_targetid();
  int64_t targetid() const;
  void set_targetid(int64_t value);
  private:
  int64_t _internal_targetid() const;
  void _internal_set_targetid(int64_t value);
  public:

  // .AcFunDanmu.Im.Message.RemindBody.RemindType remindType = 1;
  void clear_remindtype();
  ::AcFunDanmu::Im::Message::RemindBody_RemindType remindtype() const;
  void set_remindtype(::AcFunDanmu::Im::Message::RemindBody_RemindType value);
  private:
  ::AcFunDanmu::Im::Message::RemindBody_RemindType _internal_remindtype() const;
  void _internal_set_remindtype(::AcFunDanmu::Im::Message::RemindBody_RemindType value);
  public:

  // int32 startIndex = 5;
  void clear_startindex();
  int32_t startindex() const;
  void set_startindex(int32_t value);
  private:
  int32_t _internal_startindex() const;
  void _internal_set_startindex(int32_t value);
  public:

  // int32 length = 6;
  void clear_length();
  int32_t length() const;
  void set_length(int32_t value);
  private:
  int32_t _internal_length() const;
  void _internal_set_length(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Message.RemindBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    int64_t seqid_;
    int64_t targetid_;
    int remindtype_;
    int32_t startindex_;
    int32_t length_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RemindBody_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RemindBody

// .AcFunDanmu.Im.Message.RemindBody.RemindType remindType = 1;
inline void RemindBody::clear_remindtype() {
  _impl_.remindtype_ = 0;
}
inline ::AcFunDanmu::Im::Message::RemindBody_RemindType RemindBody::_internal_remindtype() const {
  return static_cast< ::AcFunDanmu::Im::Message::RemindBody_RemindType >(_impl_.remindtype_);
}
inline ::AcFunDanmu::Im::Message::RemindBody_RemindType RemindBody::remindtype() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.RemindBody.remindType)
  return _internal_remindtype();
}
inline void RemindBody::_internal_set_remindtype(::AcFunDanmu::Im::Message::RemindBody_RemindType value) {
  
  _impl_.remindtype_ = value;
}
inline void RemindBody::set_remindtype(::AcFunDanmu::Im::Message::RemindBody_RemindType value) {
  _internal_set_remindtype(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Message.RemindBody.remindType)
}

// int64 seqId = 2;
inline void RemindBody::clear_seqid() {
  _impl_.seqid_ = int64_t{0};
}
inline int64_t RemindBody::_internal_seqid() const {
  return _impl_.seqid_;
}
inline int64_t RemindBody::seqid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.RemindBody.seqId)
  return _internal_seqid();
}
inline void RemindBody::_internal_set_seqid(int64_t value) {
  
  _impl_.seqid_ = value;
}
inline void RemindBody::set_seqid(int64_t value) {
  _internal_set_seqid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Message.RemindBody.seqId)
}

// int64 targetId = 3;
inline void RemindBody::clear_targetid() {
  _impl_.targetid_ = int64_t{0};
}
inline int64_t RemindBody::_internal_targetid() const {
  return _impl_.targetid_;
}
inline int64_t RemindBody::targetid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.RemindBody.targetId)
  return _internal_targetid();
}
inline void RemindBody::_internal_set_targetid(int64_t value) {
  
  _impl_.targetid_ = value;
}
inline void RemindBody::set_targetid(int64_t value) {
  _internal_set_targetid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Message.RemindBody.targetId)
}

// string userName = 4;
inline void RemindBody::clear_username() {
  _impl_.username_.ClearToEmpty();
}
inline const std::string& RemindBody::username() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.RemindBody.userName)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RemindBody::set_username(ArgT0&& arg0, ArgT... args) {
 
 _impl_.username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Message.RemindBody.userName)
}
inline std::string* RemindBody::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Message.RemindBody.userName)
  return _s;
}
inline const std::string& RemindBody::_internal_username() const {
  return _impl_.username_.Get();
}
inline void RemindBody::_internal_set_username(const std::string& value) {
  
  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* RemindBody::_internal_mutable_username() {
  
  return _impl_.username_.Mutable(GetArenaForAllocation());
}
inline std::string* RemindBody::release_username() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Message.RemindBody.userName)
  return _impl_.username_.Release();
}
inline void RemindBody::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  _impl_.username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Message.RemindBody.userName)
}

// int32 startIndex = 5;
inline void RemindBody::clear_startindex() {
  _impl_.startindex_ = 0;
}
inline int32_t RemindBody::_internal_startindex() const {
  return _impl_.startindex_;
}
inline int32_t RemindBody::startindex() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.RemindBody.startIndex)
  return _internal_startindex();
}
inline void RemindBody::_internal_set_startindex(int32_t value) {
  
  _impl_.startindex_ = value;
}
inline void RemindBody::set_startindex(int32_t value) {
  _internal_set_startindex(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Message.RemindBody.startIndex)
}

// int32 length = 6;
inline void RemindBody::clear_length() {
  _impl_.length_ = 0;
}
inline int32_t RemindBody::_internal_length() const {
  return _impl_.length_;
}
inline int32_t RemindBody::length() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.RemindBody.length)
  return _internal_length();
}
inline void RemindBody::_internal_set_length(int32_t value) {
  
  _impl_.length_ = value;
}
inline void RemindBody::set_length(int32_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Message.RemindBody.length)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Message
}  // namespace Im
}  // namespace AcFunDanmu

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::AcFunDanmu::Im::Message::RemindBody_RemindType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::Im::Message::RemindBody_RemindType>() {
  return ::AcFunDanmu::Im::Message::RemindBody_RemindType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_RemindBody_2eproto
