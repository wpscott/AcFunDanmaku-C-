// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KeepAliveRequest.proto

#include "KeepAliveRequest.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace AcFunDanmu {
namespace Im {
namespace Basic {
PROTOBUF_CONSTEXPR KeepAliveRequest::KeepAliveRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pushservicetokenlist_)*/{}
  , /*decltype(_impl_.pushservicetoken_)*/nullptr
  , /*decltype(_impl_.presencestatus_)*/0
  , /*decltype(_impl_.appactivestatus_)*/0
  , /*decltype(_impl_.keepaliveintervalsec_)*/0
  , /*decltype(_impl_.ipv6available_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct KeepAliveRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KeepAliveRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KeepAliveRequestDefaultTypeInternal() {}
  union {
    KeepAliveRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KeepAliveRequestDefaultTypeInternal _KeepAliveRequest_default_instance_;
}  // namespace Basic
}  // namespace Im
}  // namespace AcFunDanmu
static ::_pb::Metadata file_level_metadata_KeepAliveRequest_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_KeepAliveRequest_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_KeepAliveRequest_2eproto = nullptr;

const uint32_t TableStruct_KeepAliveRequest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::KeepAliveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::KeepAliveRequest, _impl_.presencestatus_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::KeepAliveRequest, _impl_.appactivestatus_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::KeepAliveRequest, _impl_.pushservicetoken_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::KeepAliveRequest, _impl_.pushservicetokenlist_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::KeepAliveRequest, _impl_.keepaliveintervalsec_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::KeepAliveRequest, _impl_.ipv6available_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::AcFunDanmu::Im::Basic::KeepAliveRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::AcFunDanmu::Im::Basic::_KeepAliveRequest_default_instance_._instance,
};

const char descriptor_table_protodef_KeepAliveRequest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026KeepAliveRequest.proto\022\023AcFunDanmu.Im."
  "Basic\032\026PushServiceToken.proto\032\025RegisterR"
  "equest.proto\"\346\002\n\020KeepAliveRequest\022K\n\016pre"
  "senceStatus\030\001 \001(\01623.AcFunDanmu.Im.Basic."
  "RegisterRequest.PresenceStatus\022J\n\017appAct"
  "iveStatus\030\002 \001(\01621.AcFunDanmu.Im.Basic.Re"
  "gisterRequest.ActiveStatus\022\?\n\020pushServic"
  "eToken\030\003 \001(\0132%.AcFunDanmu.Im.Basic.PushS"
  "erviceToken\022C\n\024pushServiceTokenList\030\004 \003("
  "\0132%.AcFunDanmu.Im.Basic.PushServiceToken"
  "\022\034\n\024keepaliveIntervalSec\030\005 \001(\005\022\025\n\ripv6Av"
  "ailable\030\006 \001(\010b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_KeepAliveRequest_2eproto_deps[2] = {
  &::descriptor_table_PushServiceToken_2eproto,
  &::descriptor_table_RegisterRequest_2eproto,
};
static ::_pbi::once_flag descriptor_table_KeepAliveRequest_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_KeepAliveRequest_2eproto = {
    false, false, 461, descriptor_table_protodef_KeepAliveRequest_2eproto,
    "KeepAliveRequest.proto",
    &descriptor_table_KeepAliveRequest_2eproto_once, descriptor_table_KeepAliveRequest_2eproto_deps, 2, 1,
    schemas, file_default_instances, TableStruct_KeepAliveRequest_2eproto::offsets,
    file_level_metadata_KeepAliveRequest_2eproto, file_level_enum_descriptors_KeepAliveRequest_2eproto,
    file_level_service_descriptors_KeepAliveRequest_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_KeepAliveRequest_2eproto_getter() {
  return &descriptor_table_KeepAliveRequest_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_KeepAliveRequest_2eproto(&descriptor_table_KeepAliveRequest_2eproto);
namespace AcFunDanmu {
namespace Im {
namespace Basic {

// ===================================================================

class KeepAliveRequest::_Internal {
 public:
  static const ::AcFunDanmu::Im::Basic::PushServiceToken& pushservicetoken(const KeepAliveRequest* msg);
};

const ::AcFunDanmu::Im::Basic::PushServiceToken&
KeepAliveRequest::_Internal::pushservicetoken(const KeepAliveRequest* msg) {
  return *msg->_impl_.pushservicetoken_;
}
void KeepAliveRequest::clear_pushservicetoken() {
  if (GetArenaForAllocation() == nullptr && _impl_.pushservicetoken_ != nullptr) {
    delete _impl_.pushservicetoken_;
  }
  _impl_.pushservicetoken_ = nullptr;
}
void KeepAliveRequest::clear_pushservicetokenlist() {
  _impl_.pushservicetokenlist_.Clear();
}
KeepAliveRequest::KeepAliveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.Im.Basic.KeepAliveRequest)
}
KeepAliveRequest::KeepAliveRequest(const KeepAliveRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KeepAliveRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pushservicetokenlist_){from._impl_.pushservicetokenlist_}
    , decltype(_impl_.pushservicetoken_){nullptr}
    , decltype(_impl_.presencestatus_){}
    , decltype(_impl_.appactivestatus_){}
    , decltype(_impl_.keepaliveintervalsec_){}
    , decltype(_impl_.ipv6available_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pushservicetoken()) {
    _this->_impl_.pushservicetoken_ = new ::AcFunDanmu::Im::Basic::PushServiceToken(*from._impl_.pushservicetoken_);
  }
  ::memcpy(&_impl_.presencestatus_, &from._impl_.presencestatus_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ipv6available_) -
    reinterpret_cast<char*>(&_impl_.presencestatus_)) + sizeof(_impl_.ipv6available_));
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.Im.Basic.KeepAliveRequest)
}

inline void KeepAliveRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pushservicetokenlist_){arena}
    , decltype(_impl_.pushservicetoken_){nullptr}
    , decltype(_impl_.presencestatus_){0}
    , decltype(_impl_.appactivestatus_){0}
    , decltype(_impl_.keepaliveintervalsec_){0}
    , decltype(_impl_.ipv6available_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

KeepAliveRequest::~KeepAliveRequest() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.Im.Basic.KeepAliveRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KeepAliveRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pushservicetokenlist_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.pushservicetoken_;
}

void KeepAliveRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KeepAliveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.Im.Basic.KeepAliveRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pushservicetokenlist_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.pushservicetoken_ != nullptr) {
    delete _impl_.pushservicetoken_;
  }
  _impl_.pushservicetoken_ = nullptr;
  ::memset(&_impl_.presencestatus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ipv6available_) -
      reinterpret_cast<char*>(&_impl_.presencestatus_)) + sizeof(_impl_.ipv6available_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeepAliveRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .AcFunDanmu.Im.Basic.RegisterRequest.PresenceStatus presenceStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_presencestatus(static_cast<::AcFunDanmu::Im::Basic::RegisterRequest_PresenceStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Basic.RegisterRequest.ActiveStatus appActiveStatus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_appactivestatus(static_cast<::AcFunDanmu::Im::Basic::RegisterRequest_ActiveStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Basic.PushServiceToken pushServiceToken = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pushservicetoken(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .AcFunDanmu.Im.Basic.PushServiceToken pushServiceTokenList = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pushservicetokenlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 keepaliveIntervalSec = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.keepaliveintervalsec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool ipv6Available = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.ipv6available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KeepAliveRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.Im.Basic.KeepAliveRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .AcFunDanmu.Im.Basic.RegisterRequest.PresenceStatus presenceStatus = 1;
  if (this->_internal_presencestatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_presencestatus(), target);
  }

  // .AcFunDanmu.Im.Basic.RegisterRequest.ActiveStatus appActiveStatus = 2;
  if (this->_internal_appactivestatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_appactivestatus(), target);
  }

  // .AcFunDanmu.Im.Basic.PushServiceToken pushServiceToken = 3;
  if (this->_internal_has_pushservicetoken()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::pushservicetoken(this),
        _Internal::pushservicetoken(this).GetCachedSize(), target, stream);
  }

  // repeated .AcFunDanmu.Im.Basic.PushServiceToken pushServiceTokenList = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pushservicetokenlist_size()); i < n; i++) {
    const auto& repfield = this->_internal_pushservicetokenlist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 keepaliveIntervalSec = 5;
  if (this->_internal_keepaliveintervalsec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_keepaliveintervalsec(), target);
  }

  // bool ipv6Available = 6;
  if (this->_internal_ipv6available() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_ipv6available(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.Im.Basic.KeepAliveRequest)
  return target;
}

size_t KeepAliveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.Im.Basic.KeepAliveRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .AcFunDanmu.Im.Basic.PushServiceToken pushServiceTokenList = 4;
  total_size += 1UL * this->_internal_pushservicetokenlist_size();
  for (const auto& msg : this->_impl_.pushservicetokenlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .AcFunDanmu.Im.Basic.PushServiceToken pushServiceToken = 3;
  if (this->_internal_has_pushservicetoken()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pushservicetoken_);
  }

  // .AcFunDanmu.Im.Basic.RegisterRequest.PresenceStatus presenceStatus = 1;
  if (this->_internal_presencestatus() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_presencestatus());
  }

  // .AcFunDanmu.Im.Basic.RegisterRequest.ActiveStatus appActiveStatus = 2;
  if (this->_internal_appactivestatus() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_appactivestatus());
  }

  // int32 keepaliveIntervalSec = 5;
  if (this->_internal_keepaliveintervalsec() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_keepaliveintervalsec());
  }

  // bool ipv6Available = 6;
  if (this->_internal_ipv6available() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KeepAliveRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KeepAliveRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KeepAliveRequest::GetClassData() const { return &_class_data_; }


void KeepAliveRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KeepAliveRequest*>(&to_msg);
  auto& from = static_cast<const KeepAliveRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.Im.Basic.KeepAliveRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.pushservicetokenlist_.MergeFrom(from._impl_.pushservicetokenlist_);
  if (from._internal_has_pushservicetoken()) {
    _this->_internal_mutable_pushservicetoken()->::AcFunDanmu::Im::Basic::PushServiceToken::MergeFrom(
        from._internal_pushservicetoken());
  }
  if (from._internal_presencestatus() != 0) {
    _this->_internal_set_presencestatus(from._internal_presencestatus());
  }
  if (from._internal_appactivestatus() != 0) {
    _this->_internal_set_appactivestatus(from._internal_appactivestatus());
  }
  if (from._internal_keepaliveintervalsec() != 0) {
    _this->_internal_set_keepaliveintervalsec(from._internal_keepaliveintervalsec());
  }
  if (from._internal_ipv6available() != 0) {
    _this->_internal_set_ipv6available(from._internal_ipv6available());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KeepAliveRequest::CopyFrom(const KeepAliveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.Im.Basic.KeepAliveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeepAliveRequest::IsInitialized() const {
  return true;
}

void KeepAliveRequest::InternalSwap(KeepAliveRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.pushservicetokenlist_.InternalSwap(&other->_impl_.pushservicetokenlist_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KeepAliveRequest, _impl_.ipv6available_)
      + sizeof(KeepAliveRequest::_impl_.ipv6available_)
      - PROTOBUF_FIELD_OFFSET(KeepAliveRequest, _impl_.pushservicetoken_)>(
          reinterpret_cast<char*>(&_impl_.pushservicetoken_),
          reinterpret_cast<char*>(&other->_impl_.pushservicetoken_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KeepAliveRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KeepAliveRequest_2eproto_getter, &descriptor_table_KeepAliveRequest_2eproto_once,
      file_level_metadata_KeepAliveRequest_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Basic
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AcFunDanmu::Im::Basic::KeepAliveRequest*
Arena::CreateMaybeMessage< ::AcFunDanmu::Im::Basic::KeepAliveRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::Im::Basic::KeepAliveRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
