// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ImcNoticeMessage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ImcNoticeMessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ImcNoticeMessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "NoticePlaceholderMeta.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ImcNoticeMessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ImcNoticeMessage_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ImcNoticeMessage_2eproto;
namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Message {
class ImcNoticeMessage;
struct ImcNoticeMessageDefaultTypeInternal;
extern ImcNoticeMessageDefaultTypeInternal _ImcNoticeMessage_default_instance_;
}  // namespace Message
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::Im::Cloud::Message::ImcNoticeMessage* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud::Message::ImcNoticeMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Message {

// ===================================================================

class ImcNoticeMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.ImcNoticeMessage) */ {
 public:
  inline ImcNoticeMessage() : ImcNoticeMessage(nullptr) {}
  ~ImcNoticeMessage() override;
  explicit PROTOBUF_CONSTEXPR ImcNoticeMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImcNoticeMessage(const ImcNoticeMessage& from);
  ImcNoticeMessage(ImcNoticeMessage&& from) noexcept
    : ImcNoticeMessage() {
    *this = ::std::move(from);
  }

  inline ImcNoticeMessage& operator=(const ImcNoticeMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImcNoticeMessage& operator=(ImcNoticeMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImcNoticeMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImcNoticeMessage* internal_default_instance() {
    return reinterpret_cast<const ImcNoticeMessage*>(
               &_ImcNoticeMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ImcNoticeMessage& a, ImcNoticeMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ImcNoticeMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImcNoticeMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImcNoticeMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImcNoticeMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImcNoticeMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ImcNoticeMessage& from) {
    ImcNoticeMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImcNoticeMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.ImcNoticeMessage";
  }
  protected:
  explicit ImcNoticeMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNoticePlaceholderMetaFieldNumber = 2,
    kTextFieldNumber = 1,
    kNoticeMetaInfoFieldNumber = 4,
    kNoticeMetaTypeFieldNumber = 3,
    kDisplayStyleFieldNumber = 5,
  };
  // repeated .AcFunDanmu.Im.Cloud.Message.NoticePlaceholderMeta noticePlaceholderMeta = 2;
  int noticeplaceholdermeta_size() const;
  private:
  int _internal_noticeplaceholdermeta_size() const;
  public:
  void clear_noticeplaceholdermeta();
  ::AcFunDanmu::Im::Cloud::Message::NoticePlaceholderMeta* mutable_noticeplaceholdermeta(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud::Message::NoticePlaceholderMeta >*
      mutable_noticeplaceholdermeta();
  private:
  const ::AcFunDanmu::Im::Cloud::Message::NoticePlaceholderMeta& _internal_noticeplaceholdermeta(int index) const;
  ::AcFunDanmu::Im::Cloud::Message::NoticePlaceholderMeta* _internal_add_noticeplaceholdermeta();
  public:
  const ::AcFunDanmu::Im::Cloud::Message::NoticePlaceholderMeta& noticeplaceholdermeta(int index) const;
  ::AcFunDanmu::Im::Cloud::Message::NoticePlaceholderMeta* add_noticeplaceholdermeta();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud::Message::NoticePlaceholderMeta >&
      noticeplaceholdermeta() const;

  // string text = 1;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // bytes noticeMetaInfo = 4;
  void clear_noticemetainfo();
  const std::string& noticemetainfo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_noticemetainfo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_noticemetainfo();
  PROTOBUF_NODISCARD std::string* release_noticemetainfo();
  void set_allocated_noticemetainfo(std::string* noticemetainfo);
  private:
  const std::string& _internal_noticemetainfo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_noticemetainfo(const std::string& value);
  std::string* _internal_mutable_noticemetainfo();
  public:

  // int32 noticeMetaType = 3;
  void clear_noticemetatype();
  int32_t noticemetatype() const;
  void set_noticemetatype(int32_t value);
  private:
  int32_t _internal_noticemetatype() const;
  void _internal_set_noticemetatype(int32_t value);
  public:

  // int32 displayStyle = 5;
  void clear_displaystyle();
  int32_t displaystyle() const;
  void set_displaystyle(int32_t value);
  private:
  int32_t _internal_displaystyle() const;
  void _internal_set_displaystyle(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.ImcNoticeMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud::Message::NoticePlaceholderMeta > noticeplaceholdermeta_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr noticemetainfo_;
    int32_t noticemetatype_;
    int32_t displaystyle_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ImcNoticeMessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ImcNoticeMessage

// string text = 1;
inline void ImcNoticeMessage::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& ImcNoticeMessage::text() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.ImcNoticeMessage.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ImcNoticeMessage::set_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.ImcNoticeMessage.text)
}
inline std::string* ImcNoticeMessage::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.ImcNoticeMessage.text)
  return _s;
}
inline const std::string& ImcNoticeMessage::_internal_text() const {
  return _impl_.text_.Get();
}
inline void ImcNoticeMessage::_internal_set_text(const std::string& value) {
  
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* ImcNoticeMessage::_internal_mutable_text() {
  
  return _impl_.text_.Mutable(GetArenaForAllocation());
}
inline std::string* ImcNoticeMessage::release_text() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.ImcNoticeMessage.text)
  return _impl_.text_.Release();
}
inline void ImcNoticeMessage::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  _impl_.text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.ImcNoticeMessage.text)
}

// repeated .AcFunDanmu.Im.Cloud.Message.NoticePlaceholderMeta noticePlaceholderMeta = 2;
inline int ImcNoticeMessage::_internal_noticeplaceholdermeta_size() const {
  return _impl_.noticeplaceholdermeta_.size();
}
inline int ImcNoticeMessage::noticeplaceholdermeta_size() const {
  return _internal_noticeplaceholdermeta_size();
}
inline ::AcFunDanmu::Im::Cloud::Message::NoticePlaceholderMeta* ImcNoticeMessage::mutable_noticeplaceholdermeta(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.ImcNoticeMessage.noticePlaceholderMeta)
  return _impl_.noticeplaceholdermeta_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud::Message::NoticePlaceholderMeta >*
ImcNoticeMessage::mutable_noticeplaceholdermeta() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Cloud.Message.ImcNoticeMessage.noticePlaceholderMeta)
  return &_impl_.noticeplaceholdermeta_;
}
inline const ::AcFunDanmu::Im::Cloud::Message::NoticePlaceholderMeta& ImcNoticeMessage::_internal_noticeplaceholdermeta(int index) const {
  return _impl_.noticeplaceholdermeta_.Get(index);
}
inline const ::AcFunDanmu::Im::Cloud::Message::NoticePlaceholderMeta& ImcNoticeMessage::noticeplaceholdermeta(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.ImcNoticeMessage.noticePlaceholderMeta)
  return _internal_noticeplaceholdermeta(index);
}
inline ::AcFunDanmu::Im::Cloud::Message::NoticePlaceholderMeta* ImcNoticeMessage::_internal_add_noticeplaceholdermeta() {
  return _impl_.noticeplaceholdermeta_.Add();
}
inline ::AcFunDanmu::Im::Cloud::Message::NoticePlaceholderMeta* ImcNoticeMessage::add_noticeplaceholdermeta() {
  ::AcFunDanmu::Im::Cloud::Message::NoticePlaceholderMeta* _add = _internal_add_noticeplaceholdermeta();
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Cloud.Message.ImcNoticeMessage.noticePlaceholderMeta)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud::Message::NoticePlaceholderMeta >&
ImcNoticeMessage::noticeplaceholdermeta() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Cloud.Message.ImcNoticeMessage.noticePlaceholderMeta)
  return _impl_.noticeplaceholdermeta_;
}

// int32 noticeMetaType = 3;
inline void ImcNoticeMessage::clear_noticemetatype() {
  _impl_.noticemetatype_ = 0;
}
inline int32_t ImcNoticeMessage::_internal_noticemetatype() const {
  return _impl_.noticemetatype_;
}
inline int32_t ImcNoticeMessage::noticemetatype() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.ImcNoticeMessage.noticeMetaType)
  return _internal_noticemetatype();
}
inline void ImcNoticeMessage::_internal_set_noticemetatype(int32_t value) {
  
  _impl_.noticemetatype_ = value;
}
inline void ImcNoticeMessage::set_noticemetatype(int32_t value) {
  _internal_set_noticemetatype(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.ImcNoticeMessage.noticeMetaType)
}

// bytes noticeMetaInfo = 4;
inline void ImcNoticeMessage::clear_noticemetainfo() {
  _impl_.noticemetainfo_.ClearToEmpty();
}
inline const std::string& ImcNoticeMessage::noticemetainfo() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.ImcNoticeMessage.noticeMetaInfo)
  return _internal_noticemetainfo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ImcNoticeMessage::set_noticemetainfo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.noticemetainfo_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.ImcNoticeMessage.noticeMetaInfo)
}
inline std::string* ImcNoticeMessage::mutable_noticemetainfo() {
  std::string* _s = _internal_mutable_noticemetainfo();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.ImcNoticeMessage.noticeMetaInfo)
  return _s;
}
inline const std::string& ImcNoticeMessage::_internal_noticemetainfo() const {
  return _impl_.noticemetainfo_.Get();
}
inline void ImcNoticeMessage::_internal_set_noticemetainfo(const std::string& value) {
  
  _impl_.noticemetainfo_.Set(value, GetArenaForAllocation());
}
inline std::string* ImcNoticeMessage::_internal_mutable_noticemetainfo() {
  
  return _impl_.noticemetainfo_.Mutable(GetArenaForAllocation());
}
inline std::string* ImcNoticeMessage::release_noticemetainfo() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.ImcNoticeMessage.noticeMetaInfo)
  return _impl_.noticemetainfo_.Release();
}
inline void ImcNoticeMessage::set_allocated_noticemetainfo(std::string* noticemetainfo) {
  if (noticemetainfo != nullptr) {
    
  } else {
    
  }
  _impl_.noticemetainfo_.SetAllocated(noticemetainfo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.noticemetainfo_.IsDefault()) {
    _impl_.noticemetainfo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.ImcNoticeMessage.noticeMetaInfo)
}

// int32 displayStyle = 5;
inline void ImcNoticeMessage::clear_displaystyle() {
  _impl_.displaystyle_ = 0;
}
inline int32_t ImcNoticeMessage::_internal_displaystyle() const {
  return _impl_.displaystyle_;
}
inline int32_t ImcNoticeMessage::displaystyle() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.ImcNoticeMessage.displayStyle)
  return _internal_displaystyle();
}
inline void ImcNoticeMessage::_internal_set_displaystyle(int32_t value) {
  
  _impl_.displaystyle_ = value;
}
inline void ImcNoticeMessage::set_displaystyle(int32_t value) {
  _internal_set_displaystyle(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.ImcNoticeMessage.displayStyle)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Message
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ImcNoticeMessage_2eproto
