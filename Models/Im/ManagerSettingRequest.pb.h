// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ManagerSettingRequest.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ManagerSettingRequest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ManagerSettingRequest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "User.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ManagerSettingRequest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ManagerSettingRequest_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ManagerSettingRequest_2eproto;
namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Message {
class ManagerSettingRequest;
struct ManagerSettingRequestDefaultTypeInternal;
extern ManagerSettingRequestDefaultTypeInternal _ManagerSettingRequest_default_instance_;
}  // namespace Message
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::Im::Cloud::Message::ManagerSettingRequest* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud::Message::ManagerSettingRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Message {

enum ManagerSettingRequest_Operation : int {
  ManagerSettingRequest_Operation_UNKNOWN_OPERATION = 0,
  ManagerSettingRequest_Operation_ADD = 1,
  ManagerSettingRequest_Operation_DEL = 2,
  ManagerSettingRequest_Operation_ManagerSettingRequest_Operation_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ManagerSettingRequest_Operation_ManagerSettingRequest_Operation_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ManagerSettingRequest_Operation_IsValid(int value);
constexpr ManagerSettingRequest_Operation ManagerSettingRequest_Operation_Operation_MIN = ManagerSettingRequest_Operation_UNKNOWN_OPERATION;
constexpr ManagerSettingRequest_Operation ManagerSettingRequest_Operation_Operation_MAX = ManagerSettingRequest_Operation_DEL;
constexpr int ManagerSettingRequest_Operation_Operation_ARRAYSIZE = ManagerSettingRequest_Operation_Operation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ManagerSettingRequest_Operation_descriptor();
template<typename T>
inline const std::string& ManagerSettingRequest_Operation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ManagerSettingRequest_Operation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ManagerSettingRequest_Operation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ManagerSettingRequest_Operation_descriptor(), enum_t_value);
}
inline bool ManagerSettingRequest_Operation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ManagerSettingRequest_Operation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ManagerSettingRequest_Operation>(
    ManagerSettingRequest_Operation_descriptor(), name, value);
}
// ===================================================================

class ManagerSettingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.ManagerSettingRequest) */ {
 public:
  inline ManagerSettingRequest() : ManagerSettingRequest(nullptr) {}
  ~ManagerSettingRequest() override;
  explicit PROTOBUF_CONSTEXPR ManagerSettingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ManagerSettingRequest(const ManagerSettingRequest& from);
  ManagerSettingRequest(ManagerSettingRequest&& from) noexcept
    : ManagerSettingRequest() {
    *this = ::std::move(from);
  }

  inline ManagerSettingRequest& operator=(const ManagerSettingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ManagerSettingRequest& operator=(ManagerSettingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ManagerSettingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ManagerSettingRequest* internal_default_instance() {
    return reinterpret_cast<const ManagerSettingRequest*>(
               &_ManagerSettingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ManagerSettingRequest& a, ManagerSettingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ManagerSettingRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ManagerSettingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ManagerSettingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ManagerSettingRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ManagerSettingRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ManagerSettingRequest& from) {
    ManagerSettingRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ManagerSettingRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.ManagerSettingRequest";
  }
  protected:
  explicit ManagerSettingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ManagerSettingRequest_Operation Operation;
  static constexpr Operation UNKNOWN_OPERATION =
    ManagerSettingRequest_Operation_UNKNOWN_OPERATION;
  static constexpr Operation ADD =
    ManagerSettingRequest_Operation_ADD;
  static constexpr Operation DEL =
    ManagerSettingRequest_Operation_DEL;
  static inline bool Operation_IsValid(int value) {
    return ManagerSettingRequest_Operation_IsValid(value);
  }
  static constexpr Operation Operation_MIN =
    ManagerSettingRequest_Operation_Operation_MIN;
  static constexpr Operation Operation_MAX =
    ManagerSettingRequest_Operation_Operation_MAX;
  static constexpr int Operation_ARRAYSIZE =
    ManagerSettingRequest_Operation_Operation_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Operation_descriptor() {
    return ManagerSettingRequest_Operation_descriptor();
  }
  template<typename T>
  static inline const std::string& Operation_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Operation>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Operation_Name.");
    return ManagerSettingRequest_Operation_Name(enum_t_value);
  }
  static inline bool Operation_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Operation* value) {
    return ManagerSettingRequest_Operation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kManagerFieldNumber = 1,
    kGroupIdFieldNumber = 3,
    kOperationFieldNumber = 2,
  };
  // repeated .AcFunDanmu.Im.Basic.User manager = 1;
  int manager_size() const;
  private:
  int _internal_manager_size() const;
  public:
  void clear_manager();
  ::AcFunDanmu::Im::Basic::User* mutable_manager(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic::User >*
      mutable_manager();
  private:
  const ::AcFunDanmu::Im::Basic::User& _internal_manager(int index) const;
  ::AcFunDanmu::Im::Basic::User* _internal_add_manager();
  public:
  const ::AcFunDanmu::Im::Basic::User& manager(int index) const;
  ::AcFunDanmu::Im::Basic::User* add_manager();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic::User >&
      manager() const;

  // string groupId = 3;
  void clear_groupid();
  const std::string& groupid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_groupid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_groupid();
  PROTOBUF_NODISCARD std::string* release_groupid();
  void set_allocated_groupid(std::string* groupid);
  private:
  const std::string& _internal_groupid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_groupid(const std::string& value);
  std::string* _internal_mutable_groupid();
  public:

  // .AcFunDanmu.Im.Cloud.Message.ManagerSettingRequest.Operation operation = 2;
  void clear_operation();
  ::AcFunDanmu::Im::Cloud::Message::ManagerSettingRequest_Operation operation() const;
  void set_operation(::AcFunDanmu::Im::Cloud::Message::ManagerSettingRequest_Operation value);
  private:
  ::AcFunDanmu::Im::Cloud::Message::ManagerSettingRequest_Operation _internal_operation() const;
  void _internal_set_operation(::AcFunDanmu::Im::Cloud::Message::ManagerSettingRequest_Operation value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.ManagerSettingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic::User > manager_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupid_;
    int operation_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ManagerSettingRequest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ManagerSettingRequest

// repeated .AcFunDanmu.Im.Basic.User manager = 1;
inline int ManagerSettingRequest::_internal_manager_size() const {
  return _impl_.manager_.size();
}
inline int ManagerSettingRequest::manager_size() const {
  return _internal_manager_size();
}
inline ::AcFunDanmu::Im::Basic::User* ManagerSettingRequest::mutable_manager(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.ManagerSettingRequest.manager)
  return _impl_.manager_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic::User >*
ManagerSettingRequest::mutable_manager() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Cloud.Message.ManagerSettingRequest.manager)
  return &_impl_.manager_;
}
inline const ::AcFunDanmu::Im::Basic::User& ManagerSettingRequest::_internal_manager(int index) const {
  return _impl_.manager_.Get(index);
}
inline const ::AcFunDanmu::Im::Basic::User& ManagerSettingRequest::manager(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.ManagerSettingRequest.manager)
  return _internal_manager(index);
}
inline ::AcFunDanmu::Im::Basic::User* ManagerSettingRequest::_internal_add_manager() {
  return _impl_.manager_.Add();
}
inline ::AcFunDanmu::Im::Basic::User* ManagerSettingRequest::add_manager() {
  ::AcFunDanmu::Im::Basic::User* _add = _internal_add_manager();
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Cloud.Message.ManagerSettingRequest.manager)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic::User >&
ManagerSettingRequest::manager() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Cloud.Message.ManagerSettingRequest.manager)
  return _impl_.manager_;
}

// .AcFunDanmu.Im.Cloud.Message.ManagerSettingRequest.Operation operation = 2;
inline void ManagerSettingRequest::clear_operation() {
  _impl_.operation_ = 0;
}
inline ::AcFunDanmu::Im::Cloud::Message::ManagerSettingRequest_Operation ManagerSettingRequest::_internal_operation() const {
  return static_cast< ::AcFunDanmu::Im::Cloud::Message::ManagerSettingRequest_Operation >(_impl_.operation_);
}
inline ::AcFunDanmu::Im::Cloud::Message::ManagerSettingRequest_Operation ManagerSettingRequest::operation() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.ManagerSettingRequest.operation)
  return _internal_operation();
}
inline void ManagerSettingRequest::_internal_set_operation(::AcFunDanmu::Im::Cloud::Message::ManagerSettingRequest_Operation value) {
  
  _impl_.operation_ = value;
}
inline void ManagerSettingRequest::set_operation(::AcFunDanmu::Im::Cloud::Message::ManagerSettingRequest_Operation value) {
  _internal_set_operation(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.ManagerSettingRequest.operation)
}

// string groupId = 3;
inline void ManagerSettingRequest::clear_groupid() {
  _impl_.groupid_.ClearToEmpty();
}
inline const std::string& ManagerSettingRequest::groupid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.ManagerSettingRequest.groupId)
  return _internal_groupid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ManagerSettingRequest::set_groupid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.groupid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.ManagerSettingRequest.groupId)
}
inline std::string* ManagerSettingRequest::mutable_groupid() {
  std::string* _s = _internal_mutable_groupid();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.ManagerSettingRequest.groupId)
  return _s;
}
inline const std::string& ManagerSettingRequest::_internal_groupid() const {
  return _impl_.groupid_.Get();
}
inline void ManagerSettingRequest::_internal_set_groupid(const std::string& value) {
  
  _impl_.groupid_.Set(value, GetArenaForAllocation());
}
inline std::string* ManagerSettingRequest::_internal_mutable_groupid() {
  
  return _impl_.groupid_.Mutable(GetArenaForAllocation());
}
inline std::string* ManagerSettingRequest::release_groupid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.ManagerSettingRequest.groupId)
  return _impl_.groupid_.Release();
}
inline void ManagerSettingRequest::set_allocated_groupid(std::string* groupid) {
  if (groupid != nullptr) {
    
  } else {
    
  }
  _impl_.groupid_.SetAllocated(groupid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.groupid_.IsDefault()) {
    _impl_.groupid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.ManagerSettingRequest.groupId)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Message
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::AcFunDanmu::Im::Cloud::Message::ManagerSettingRequest_Operation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::Im::Cloud::Message::ManagerSettingRequest_Operation>() {
  return ::AcFunDanmu::Im::Cloud::Message::ManagerSettingRequest_Operation_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ManagerSettingRequest_2eproto
