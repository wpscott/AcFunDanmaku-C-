// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RegisterResponse.proto

#include "RegisterResponse.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace AcFunDanmu {
namespace Im {
namespace Basic {
PROTOBUF_CONSTEXPR RegisterResponse::RegisterResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sesskey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.accesspointsconfig_)*/nullptr
  , /*decltype(_impl_.sdkoption_)*/nullptr
  , /*decltype(_impl_.accesspointsconfigipv6_)*/nullptr
  , /*decltype(_impl_.accesspointsconfigquic_)*/nullptr
  , /*decltype(_impl_.accesspointsconfigquicipv6_)*/nullptr
  , /*decltype(_impl_.accesspointsconfigws_)*/nullptr
  , /*decltype(_impl_.instanceid_)*/int64_t{0}
  , /*decltype(_impl_.cleanaccesspoint_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegisterResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterResponseDefaultTypeInternal() {}
  union {
    RegisterResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterResponseDefaultTypeInternal _RegisterResponse_default_instance_;
}  // namespace Basic
}  // namespace Im
}  // namespace AcFunDanmu
static ::_pb::Metadata file_level_metadata_RegisterResponse_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_RegisterResponse_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_RegisterResponse_2eproto = nullptr;

const uint32_t TableStruct_RegisterResponse_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::RegisterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::RegisterResponse, _impl_.accesspointsconfig_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::RegisterResponse, _impl_.sesskey_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::RegisterResponse, _impl_.instanceid_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::RegisterResponse, _impl_.sdkoption_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::RegisterResponse, _impl_.accesspointsconfigipv6_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::RegisterResponse, _impl_.accesspointsconfigquic_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::RegisterResponse, _impl_.accesspointsconfigquicipv6_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::RegisterResponse, _impl_.cleanaccesspoint_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::RegisterResponse, _impl_.accesspointsconfigws_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::AcFunDanmu::Im::Basic::RegisterResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::AcFunDanmu::Im::Basic::_RegisterResponse_default_instance_._instance,
};

const char descriptor_table_protodef_RegisterResponse_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026RegisterResponse.proto\022\023AcFunDanmu.Im."
  "Basic\032\030AccessPointsConfig.proto\032\017SdkOpti"
  "on.proto\"\357\003\n\020RegisterResponse\022C\n\022accessP"
  "ointsConfig\030\001 \001(\0132\'.AcFunDanmu.Im.Basic."
  "AccessPointsConfig\022\017\n\007sessKey\030\002 \001(\014\022\022\n\ni"
  "nstanceId\030\003 \001(\003\0221\n\tsdkOption\030\004 \001(\0132\036.AcF"
  "unDanmu.Im.Basic.SdkOption\022G\n\026accessPoin"
  "tsConfigIpv6\030\005 \001(\0132\'.AcFunDanmu.Im.Basic"
  ".AccessPointsConfig\022G\n\026accessPointsConfi"
  "gQuic\030\006 \001(\0132\'.AcFunDanmu.Im.Basic.Access"
  "PointsConfig\022K\n\032accessPointsConfigQuicIp"
  "v6\030\007 \001(\0132\'.AcFunDanmu.Im.Basic.AccessPoi"
  "ntsConfig\022\030\n\020cleanAccessPoint\030\010 \001(\010\022E\n\024a"
  "ccessPointsConfigWs\030\t \001(\0132\'.AcFunDanmu.I"
  "m.Basic.AccessPointsConfigb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_RegisterResponse_2eproto_deps[2] = {
  &::descriptor_table_AccessPointsConfig_2eproto,
  &::descriptor_table_SdkOption_2eproto,
};
static ::_pbi::once_flag descriptor_table_RegisterResponse_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_RegisterResponse_2eproto = {
    false, false, 594, descriptor_table_protodef_RegisterResponse_2eproto,
    "RegisterResponse.proto",
    &descriptor_table_RegisterResponse_2eproto_once, descriptor_table_RegisterResponse_2eproto_deps, 2, 1,
    schemas, file_default_instances, TableStruct_RegisterResponse_2eproto::offsets,
    file_level_metadata_RegisterResponse_2eproto, file_level_enum_descriptors_RegisterResponse_2eproto,
    file_level_service_descriptors_RegisterResponse_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_RegisterResponse_2eproto_getter() {
  return &descriptor_table_RegisterResponse_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_RegisterResponse_2eproto(&descriptor_table_RegisterResponse_2eproto);
namespace AcFunDanmu {
namespace Im {
namespace Basic {

// ===================================================================

class RegisterResponse::_Internal {
 public:
  static const ::AcFunDanmu::Im::Basic::AccessPointsConfig& accesspointsconfig(const RegisterResponse* msg);
  static const ::AcFunDanmu::Im::Basic::SdkOption& sdkoption(const RegisterResponse* msg);
  static const ::AcFunDanmu::Im::Basic::AccessPointsConfig& accesspointsconfigipv6(const RegisterResponse* msg);
  static const ::AcFunDanmu::Im::Basic::AccessPointsConfig& accesspointsconfigquic(const RegisterResponse* msg);
  static const ::AcFunDanmu::Im::Basic::AccessPointsConfig& accesspointsconfigquicipv6(const RegisterResponse* msg);
  static const ::AcFunDanmu::Im::Basic::AccessPointsConfig& accesspointsconfigws(const RegisterResponse* msg);
};

const ::AcFunDanmu::Im::Basic::AccessPointsConfig&
RegisterResponse::_Internal::accesspointsconfig(const RegisterResponse* msg) {
  return *msg->_impl_.accesspointsconfig_;
}
const ::AcFunDanmu::Im::Basic::SdkOption&
RegisterResponse::_Internal::sdkoption(const RegisterResponse* msg) {
  return *msg->_impl_.sdkoption_;
}
const ::AcFunDanmu::Im::Basic::AccessPointsConfig&
RegisterResponse::_Internal::accesspointsconfigipv6(const RegisterResponse* msg) {
  return *msg->_impl_.accesspointsconfigipv6_;
}
const ::AcFunDanmu::Im::Basic::AccessPointsConfig&
RegisterResponse::_Internal::accesspointsconfigquic(const RegisterResponse* msg) {
  return *msg->_impl_.accesspointsconfigquic_;
}
const ::AcFunDanmu::Im::Basic::AccessPointsConfig&
RegisterResponse::_Internal::accesspointsconfigquicipv6(const RegisterResponse* msg) {
  return *msg->_impl_.accesspointsconfigquicipv6_;
}
const ::AcFunDanmu::Im::Basic::AccessPointsConfig&
RegisterResponse::_Internal::accesspointsconfigws(const RegisterResponse* msg) {
  return *msg->_impl_.accesspointsconfigws_;
}
void RegisterResponse::clear_accesspointsconfig() {
  if (GetArenaForAllocation() == nullptr && _impl_.accesspointsconfig_ != nullptr) {
    delete _impl_.accesspointsconfig_;
  }
  _impl_.accesspointsconfig_ = nullptr;
}
void RegisterResponse::clear_sdkoption() {
  if (GetArenaForAllocation() == nullptr && _impl_.sdkoption_ != nullptr) {
    delete _impl_.sdkoption_;
  }
  _impl_.sdkoption_ = nullptr;
}
void RegisterResponse::clear_accesspointsconfigipv6() {
  if (GetArenaForAllocation() == nullptr && _impl_.accesspointsconfigipv6_ != nullptr) {
    delete _impl_.accesspointsconfigipv6_;
  }
  _impl_.accesspointsconfigipv6_ = nullptr;
}
void RegisterResponse::clear_accesspointsconfigquic() {
  if (GetArenaForAllocation() == nullptr && _impl_.accesspointsconfigquic_ != nullptr) {
    delete _impl_.accesspointsconfigquic_;
  }
  _impl_.accesspointsconfigquic_ = nullptr;
}
void RegisterResponse::clear_accesspointsconfigquicipv6() {
  if (GetArenaForAllocation() == nullptr && _impl_.accesspointsconfigquicipv6_ != nullptr) {
    delete _impl_.accesspointsconfigquicipv6_;
  }
  _impl_.accesspointsconfigquicipv6_ = nullptr;
}
void RegisterResponse::clear_accesspointsconfigws() {
  if (GetArenaForAllocation() == nullptr && _impl_.accesspointsconfigws_ != nullptr) {
    delete _impl_.accesspointsconfigws_;
  }
  _impl_.accesspointsconfigws_ = nullptr;
}
RegisterResponse::RegisterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.Im.Basic.RegisterResponse)
}
RegisterResponse::RegisterResponse(const RegisterResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisterResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sesskey_){}
    , decltype(_impl_.accesspointsconfig_){nullptr}
    , decltype(_impl_.sdkoption_){nullptr}
    , decltype(_impl_.accesspointsconfigipv6_){nullptr}
    , decltype(_impl_.accesspointsconfigquic_){nullptr}
    , decltype(_impl_.accesspointsconfigquicipv6_){nullptr}
    , decltype(_impl_.accesspointsconfigws_){nullptr}
    , decltype(_impl_.instanceid_){}
    , decltype(_impl_.cleanaccesspoint_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sesskey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sesskey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sesskey().empty()) {
    _this->_impl_.sesskey_.Set(from._internal_sesskey(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_accesspointsconfig()) {
    _this->_impl_.accesspointsconfig_ = new ::AcFunDanmu::Im::Basic::AccessPointsConfig(*from._impl_.accesspointsconfig_);
  }
  if (from._internal_has_sdkoption()) {
    _this->_impl_.sdkoption_ = new ::AcFunDanmu::Im::Basic::SdkOption(*from._impl_.sdkoption_);
  }
  if (from._internal_has_accesspointsconfigipv6()) {
    _this->_impl_.accesspointsconfigipv6_ = new ::AcFunDanmu::Im::Basic::AccessPointsConfig(*from._impl_.accesspointsconfigipv6_);
  }
  if (from._internal_has_accesspointsconfigquic()) {
    _this->_impl_.accesspointsconfigquic_ = new ::AcFunDanmu::Im::Basic::AccessPointsConfig(*from._impl_.accesspointsconfigquic_);
  }
  if (from._internal_has_accesspointsconfigquicipv6()) {
    _this->_impl_.accesspointsconfigquicipv6_ = new ::AcFunDanmu::Im::Basic::AccessPointsConfig(*from._impl_.accesspointsconfigquicipv6_);
  }
  if (from._internal_has_accesspointsconfigws()) {
    _this->_impl_.accesspointsconfigws_ = new ::AcFunDanmu::Im::Basic::AccessPointsConfig(*from._impl_.accesspointsconfigws_);
  }
  ::memcpy(&_impl_.instanceid_, &from._impl_.instanceid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cleanaccesspoint_) -
    reinterpret_cast<char*>(&_impl_.instanceid_)) + sizeof(_impl_.cleanaccesspoint_));
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.Im.Basic.RegisterResponse)
}

inline void RegisterResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sesskey_){}
    , decltype(_impl_.accesspointsconfig_){nullptr}
    , decltype(_impl_.sdkoption_){nullptr}
    , decltype(_impl_.accesspointsconfigipv6_){nullptr}
    , decltype(_impl_.accesspointsconfigquic_){nullptr}
    , decltype(_impl_.accesspointsconfigquicipv6_){nullptr}
    , decltype(_impl_.accesspointsconfigws_){nullptr}
    , decltype(_impl_.instanceid_){int64_t{0}}
    , decltype(_impl_.cleanaccesspoint_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sesskey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sesskey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RegisterResponse::~RegisterResponse() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.Im.Basic.RegisterResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisterResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sesskey_.Destroy();
  if (this != internal_default_instance()) delete _impl_.accesspointsconfig_;
  if (this != internal_default_instance()) delete _impl_.sdkoption_;
  if (this != internal_default_instance()) delete _impl_.accesspointsconfigipv6_;
  if (this != internal_default_instance()) delete _impl_.accesspointsconfigquic_;
  if (this != internal_default_instance()) delete _impl_.accesspointsconfigquicipv6_;
  if (this != internal_default_instance()) delete _impl_.accesspointsconfigws_;
}

void RegisterResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.Im.Basic.RegisterResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sesskey_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.accesspointsconfig_ != nullptr) {
    delete _impl_.accesspointsconfig_;
  }
  _impl_.accesspointsconfig_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.sdkoption_ != nullptr) {
    delete _impl_.sdkoption_;
  }
  _impl_.sdkoption_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.accesspointsconfigipv6_ != nullptr) {
    delete _impl_.accesspointsconfigipv6_;
  }
  _impl_.accesspointsconfigipv6_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.accesspointsconfigquic_ != nullptr) {
    delete _impl_.accesspointsconfigquic_;
  }
  _impl_.accesspointsconfigquic_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.accesspointsconfigquicipv6_ != nullptr) {
    delete _impl_.accesspointsconfigquicipv6_;
  }
  _impl_.accesspointsconfigquicipv6_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.accesspointsconfigws_ != nullptr) {
    delete _impl_.accesspointsconfigws_;
  }
  _impl_.accesspointsconfigws_ = nullptr;
  ::memset(&_impl_.instanceid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.cleanaccesspoint_) -
      reinterpret_cast<char*>(&_impl_.instanceid_)) + sizeof(_impl_.cleanaccesspoint_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .AcFunDanmu.Im.Basic.AccessPointsConfig accessPointsConfig = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_accesspointsconfig(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes sessKey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sesskey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 instanceId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.instanceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Basic.SdkOption sdkOption = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_sdkoption(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Basic.AccessPointsConfig accessPointsConfigIpv6 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_accesspointsconfigipv6(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Basic.AccessPointsConfig accessPointsConfigQuic = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_accesspointsconfigquic(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Basic.AccessPointsConfig accessPointsConfigQuicIpv6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_accesspointsconfigquicipv6(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool cleanAccessPoint = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.cleanaccesspoint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Im.Basic.AccessPointsConfig accessPointsConfigWs = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_accesspointsconfigws(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.Im.Basic.RegisterResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .AcFunDanmu.Im.Basic.AccessPointsConfig accessPointsConfig = 1;
  if (this->_internal_has_accesspointsconfig()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::accesspointsconfig(this),
        _Internal::accesspointsconfig(this).GetCachedSize(), target, stream);
  }

  // bytes sessKey = 2;
  if (!this->_internal_sesskey().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_sesskey(), target);
  }

  // int64 instanceId = 3;
  if (this->_internal_instanceid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_instanceid(), target);
  }

  // .AcFunDanmu.Im.Basic.SdkOption sdkOption = 4;
  if (this->_internal_has_sdkoption()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::sdkoption(this),
        _Internal::sdkoption(this).GetCachedSize(), target, stream);
  }

  // .AcFunDanmu.Im.Basic.AccessPointsConfig accessPointsConfigIpv6 = 5;
  if (this->_internal_has_accesspointsconfigipv6()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::accesspointsconfigipv6(this),
        _Internal::accesspointsconfigipv6(this).GetCachedSize(), target, stream);
  }

  // .AcFunDanmu.Im.Basic.AccessPointsConfig accessPointsConfigQuic = 6;
  if (this->_internal_has_accesspointsconfigquic()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::accesspointsconfigquic(this),
        _Internal::accesspointsconfigquic(this).GetCachedSize(), target, stream);
  }

  // .AcFunDanmu.Im.Basic.AccessPointsConfig accessPointsConfigQuicIpv6 = 7;
  if (this->_internal_has_accesspointsconfigquicipv6()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::accesspointsconfigquicipv6(this),
        _Internal::accesspointsconfigquicipv6(this).GetCachedSize(), target, stream);
  }

  // bool cleanAccessPoint = 8;
  if (this->_internal_cleanaccesspoint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_cleanaccesspoint(), target);
  }

  // .AcFunDanmu.Im.Basic.AccessPointsConfig accessPointsConfigWs = 9;
  if (this->_internal_has_accesspointsconfigws()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::accesspointsconfigws(this),
        _Internal::accesspointsconfigws(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.Im.Basic.RegisterResponse)
  return target;
}

size_t RegisterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.Im.Basic.RegisterResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sessKey = 2;
  if (!this->_internal_sesskey().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sesskey());
  }

  // .AcFunDanmu.Im.Basic.AccessPointsConfig accessPointsConfig = 1;
  if (this->_internal_has_accesspointsconfig()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.accesspointsconfig_);
  }

  // .AcFunDanmu.Im.Basic.SdkOption sdkOption = 4;
  if (this->_internal_has_sdkoption()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sdkoption_);
  }

  // .AcFunDanmu.Im.Basic.AccessPointsConfig accessPointsConfigIpv6 = 5;
  if (this->_internal_has_accesspointsconfigipv6()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.accesspointsconfigipv6_);
  }

  // .AcFunDanmu.Im.Basic.AccessPointsConfig accessPointsConfigQuic = 6;
  if (this->_internal_has_accesspointsconfigquic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.accesspointsconfigquic_);
  }

  // .AcFunDanmu.Im.Basic.AccessPointsConfig accessPointsConfigQuicIpv6 = 7;
  if (this->_internal_has_accesspointsconfigquicipv6()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.accesspointsconfigquicipv6_);
  }

  // .AcFunDanmu.Im.Basic.AccessPointsConfig accessPointsConfigWs = 9;
  if (this->_internal_has_accesspointsconfigws()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.accesspointsconfigws_);
  }

  // int64 instanceId = 3;
  if (this->_internal_instanceid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_instanceid());
  }

  // bool cleanAccessPoint = 8;
  if (this->_internal_cleanaccesspoint() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisterResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterResponse::GetClassData() const { return &_class_data_; }


void RegisterResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisterResponse*>(&to_msg);
  auto& from = static_cast<const RegisterResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.Im.Basic.RegisterResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sesskey().empty()) {
    _this->_internal_set_sesskey(from._internal_sesskey());
  }
  if (from._internal_has_accesspointsconfig()) {
    _this->_internal_mutable_accesspointsconfig()->::AcFunDanmu::Im::Basic::AccessPointsConfig::MergeFrom(
        from._internal_accesspointsconfig());
  }
  if (from._internal_has_sdkoption()) {
    _this->_internal_mutable_sdkoption()->::AcFunDanmu::Im::Basic::SdkOption::MergeFrom(
        from._internal_sdkoption());
  }
  if (from._internal_has_accesspointsconfigipv6()) {
    _this->_internal_mutable_accesspointsconfigipv6()->::AcFunDanmu::Im::Basic::AccessPointsConfig::MergeFrom(
        from._internal_accesspointsconfigipv6());
  }
  if (from._internal_has_accesspointsconfigquic()) {
    _this->_internal_mutable_accesspointsconfigquic()->::AcFunDanmu::Im::Basic::AccessPointsConfig::MergeFrom(
        from._internal_accesspointsconfigquic());
  }
  if (from._internal_has_accesspointsconfigquicipv6()) {
    _this->_internal_mutable_accesspointsconfigquicipv6()->::AcFunDanmu::Im::Basic::AccessPointsConfig::MergeFrom(
        from._internal_accesspointsconfigquicipv6());
  }
  if (from._internal_has_accesspointsconfigws()) {
    _this->_internal_mutable_accesspointsconfigws()->::AcFunDanmu::Im::Basic::AccessPointsConfig::MergeFrom(
        from._internal_accesspointsconfigws());
  }
  if (from._internal_instanceid() != 0) {
    _this->_internal_set_instanceid(from._internal_instanceid());
  }
  if (from._internal_cleanaccesspoint() != 0) {
    _this->_internal_set_cleanaccesspoint(from._internal_cleanaccesspoint());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterResponse::CopyFrom(const RegisterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.Im.Basic.RegisterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterResponse::IsInitialized() const {
  return true;
}

void RegisterResponse::InternalSwap(RegisterResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sesskey_, lhs_arena,
      &other->_impl_.sesskey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegisterResponse, _impl_.cleanaccesspoint_)
      + sizeof(RegisterResponse::_impl_.cleanaccesspoint_)
      - PROTOBUF_FIELD_OFFSET(RegisterResponse, _impl_.accesspointsconfig_)>(
          reinterpret_cast<char*>(&_impl_.accesspointsconfig_),
          reinterpret_cast<char*>(&other->_impl_.accesspointsconfig_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_RegisterResponse_2eproto_getter, &descriptor_table_RegisterResponse_2eproto_once,
      file_level_metadata_RegisterResponse_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Basic
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AcFunDanmu::Im::Basic::RegisterResponse*
Arena::CreateMaybeMessage< ::AcFunDanmu::Im::Basic::RegisterResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::Im::Basic::RegisterResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
