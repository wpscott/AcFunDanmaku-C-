// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PingRequest.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_PingRequest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_PingRequest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_PingRequest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_PingRequest_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_PingRequest_2eproto;
namespace AcFunDanmu {
namespace Im {
namespace Basic {
class PingRequest;
struct PingRequestDefaultTypeInternal;
extern PingRequestDefaultTypeInternal _PingRequest_default_instance_;
}  // namespace Basic
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::Im::Basic::PingRequest* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Basic::PingRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {
namespace Im {
namespace Basic {

enum PingRequest_PingType : int {
  PingRequest_PingType_kInvalid = 0,
  PingRequest_PingType_kPriorRegister = 1,
  PingRequest_PingType_kPostRegister = 2,
  PingRequest_PingType_PingRequest_PingType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PingRequest_PingType_PingRequest_PingType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PingRequest_PingType_IsValid(int value);
constexpr PingRequest_PingType PingRequest_PingType_PingType_MIN = PingRequest_PingType_kInvalid;
constexpr PingRequest_PingType PingRequest_PingType_PingType_MAX = PingRequest_PingType_kPostRegister;
constexpr int PingRequest_PingType_PingType_ARRAYSIZE = PingRequest_PingType_PingType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PingRequest_PingType_descriptor();
template<typename T>
inline const std::string& PingRequest_PingType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PingRequest_PingType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PingRequest_PingType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PingRequest_PingType_descriptor(), enum_t_value);
}
inline bool PingRequest_PingType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PingRequest_PingType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PingRequest_PingType>(
    PingRequest_PingType_descriptor(), name, value);
}
// ===================================================================

class PingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Basic.PingRequest) */ {
 public:
  inline PingRequest() : PingRequest(nullptr) {}
  ~PingRequest() override;
  explicit PROTOBUF_CONSTEXPR PingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PingRequest(const PingRequest& from);
  PingRequest(PingRequest&& from) noexcept
    : PingRequest() {
    *this = ::std::move(from);
  }

  inline PingRequest& operator=(const PingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PingRequest& operator=(PingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PingRequest* internal_default_instance() {
    return reinterpret_cast<const PingRequest*>(
               &_PingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PingRequest& a, PingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PingRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PingRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PingRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PingRequest& from) {
    PingRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PingRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Basic.PingRequest";
  }
  protected:
  explicit PingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PingRequest_PingType PingType;
  static constexpr PingType kInvalid =
    PingRequest_PingType_kInvalid;
  static constexpr PingType kPriorRegister =
    PingRequest_PingType_kPriorRegister;
  static constexpr PingType kPostRegister =
    PingRequest_PingType_kPostRegister;
  static inline bool PingType_IsValid(int value) {
    return PingRequest_PingType_IsValid(value);
  }
  static constexpr PingType PingType_MIN =
    PingRequest_PingType_PingType_MIN;
  static constexpr PingType PingType_MAX =
    PingRequest_PingType_PingType_MAX;
  static constexpr int PingType_ARRAYSIZE =
    PingRequest_PingType_PingType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PingType_descriptor() {
    return PingRequest_PingType_descriptor();
  }
  template<typename T>
  static inline const std::string& PingType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PingType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PingType_Name.");
    return PingRequest_PingType_Name(enum_t_value);
  }
  static inline bool PingType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PingType* value) {
    return PingRequest_PingType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPingTypeFieldNumber = 1,
    kPingRoundFieldNumber = 2,
  };
  // .AcFunDanmu.Im.Basic.PingRequest.PingType pingType = 1;
  void clear_pingtype();
  ::AcFunDanmu::Im::Basic::PingRequest_PingType pingtype() const;
  void set_pingtype(::AcFunDanmu::Im::Basic::PingRequest_PingType value);
  private:
  ::AcFunDanmu::Im::Basic::PingRequest_PingType _internal_pingtype() const;
  void _internal_set_pingtype(::AcFunDanmu::Im::Basic::PingRequest_PingType value);
  public:

  // uint32 pingRound = 2;
  void clear_pinground();
  uint32_t pinground() const;
  void set_pinground(uint32_t value);
  private:
  uint32_t _internal_pinground() const;
  void _internal_set_pinground(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Basic.PingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int pingtype_;
    uint32_t pinground_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PingRequest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PingRequest

// .AcFunDanmu.Im.Basic.PingRequest.PingType pingType = 1;
inline void PingRequest::clear_pingtype() {
  _impl_.pingtype_ = 0;
}
inline ::AcFunDanmu::Im::Basic::PingRequest_PingType PingRequest::_internal_pingtype() const {
  return static_cast< ::AcFunDanmu::Im::Basic::PingRequest_PingType >(_impl_.pingtype_);
}
inline ::AcFunDanmu::Im::Basic::PingRequest_PingType PingRequest::pingtype() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.PingRequest.pingType)
  return _internal_pingtype();
}
inline void PingRequest::_internal_set_pingtype(::AcFunDanmu::Im::Basic::PingRequest_PingType value) {
  
  _impl_.pingtype_ = value;
}
inline void PingRequest::set_pingtype(::AcFunDanmu::Im::Basic::PingRequest_PingType value) {
  _internal_set_pingtype(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.PingRequest.pingType)
}

// uint32 pingRound = 2;
inline void PingRequest::clear_pinground() {
  _impl_.pinground_ = 0u;
}
inline uint32_t PingRequest::_internal_pinground() const {
  return _impl_.pinground_;
}
inline uint32_t PingRequest::pinground() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.PingRequest.pingRound)
  return _internal_pinground();
}
inline void PingRequest::_internal_set_pinground(uint32_t value) {
  
  _impl_.pinground_ = value;
}
inline void PingRequest::set_pinground(uint32_t value) {
  _internal_set_pinground(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.PingRequest.pingRound)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Basic
}  // namespace Im
}  // namespace AcFunDanmu

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::AcFunDanmu::Im::Basic::PingRequest_PingType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::Im::Basic::PingRequest_PingType>() {
  return ::AcFunDanmu::Im::Basic::PingRequest_PingType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_PingRequest_2eproto
