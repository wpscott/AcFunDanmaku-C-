// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VoiceCallEventPush.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_VoiceCallEventPush_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_VoiceCallEventPush_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "User.pb.h"
#include "VoiceCallAcceptedEvent.pb.h"
#include "VoiceCallAlreadyProcessedEvent.pb.h"
#include "VoiceCallCancelledEvent.pb.h"
#include "VoiceCallClosedEvent.pb.h"
#include "VoiceCallDetailUpdateEvent.pb.h"
#include "VoiceCallRejectedEvent.pb.h"
#include "VoiceCallRequestEvent.pb.h"
#include "VoiceCallTimeoutEvent.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_VoiceCallEventPush_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_VoiceCallEventPush_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_VoiceCallEventPush_2eproto;
namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Voice {
namespace Call {
class VoiceCallEventPush;
struct VoiceCallEventPushDefaultTypeInternal;
extern VoiceCallEventPushDefaultTypeInternal _VoiceCallEventPush_default_instance_;
}  // namespace Call
}  // namespace Voice
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallEventPush* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallEventPush>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Voice {
namespace Call {

// ===================================================================

class VoiceCallEventPush final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush) */ {
 public:
  inline VoiceCallEventPush() : VoiceCallEventPush(nullptr) {}
  ~VoiceCallEventPush() override;
  explicit PROTOBUF_CONSTEXPR VoiceCallEventPush(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VoiceCallEventPush(const VoiceCallEventPush& from);
  VoiceCallEventPush(VoiceCallEventPush&& from) noexcept
    : VoiceCallEventPush() {
    *this = ::std::move(from);
  }

  inline VoiceCallEventPush& operator=(const VoiceCallEventPush& from) {
    CopyFrom(from);
    return *this;
  }
  inline VoiceCallEventPush& operator=(VoiceCallEventPush&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VoiceCallEventPush& default_instance() {
    return *internal_default_instance();
  }
  enum VoiceCallEventCase {
    kRequestEvent = 20,
    kAcceptedEvent = 21,
    kRejectedEvent = 22,
    kClosedEvent = 23,
    kCancelledEvent = 24,
    kAlreadyProcessedEvent = 25,
    kTimeoutEvent = 26,
    kDetailUpdateEvent = 27,
    VOICECALLEVENT_NOT_SET = 0,
  };

  static inline const VoiceCallEventPush* internal_default_instance() {
    return reinterpret_cast<const VoiceCallEventPush*>(
               &_VoiceCallEventPush_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VoiceCallEventPush& a, VoiceCallEventPush& b) {
    a.Swap(&b);
  }
  inline void Swap(VoiceCallEventPush* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VoiceCallEventPush* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VoiceCallEventPush* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VoiceCallEventPush>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VoiceCallEventPush& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VoiceCallEventPush& from) {
    VoiceCallEventPush::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VoiceCallEventPush* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush";
  }
  protected:
  explicit VoiceCallEventPush(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIdFieldNumber = 1,
    kOperatorFieldNumber = 2,
    kRequestEventFieldNumber = 20,
    kAcceptedEventFieldNumber = 21,
    kRejectedEventFieldNumber = 22,
    kClosedEventFieldNumber = 23,
    kCancelledEventFieldNumber = 24,
    kAlreadyProcessedEventFieldNumber = 25,
    kTimeoutEventFieldNumber = 26,
    kDetailUpdateEventFieldNumber = 27,
  };
  // string roomId = 1;
  void clear_roomid();
  const std::string& roomid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_roomid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_roomid();
  PROTOBUF_NODISCARD std::string* release_roomid();
  void set_allocated_roomid(std::string* roomid);
  private:
  const std::string& _internal_roomid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_roomid(const std::string& value);
  std::string* _internal_mutable_roomid();
  public:

  // .AcFunDanmu.Im.Basic.User operator = 2;
  bool has_operator_() const;
  private:
  bool _internal_has_operator_() const;
  public:
  void clear_operator_();
  const ::AcFunDanmu::Im::Basic::User& operator_() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Basic::User* release_operator_();
  ::AcFunDanmu::Im::Basic::User* mutable_operator_();
  void set_allocated_operator_(::AcFunDanmu::Im::Basic::User* operator_);
  private:
  const ::AcFunDanmu::Im::Basic::User& _internal_operator_() const;
  ::AcFunDanmu::Im::Basic::User* _internal_mutable_operator_();
  public:
  void unsafe_arena_set_allocated_operator_(
      ::AcFunDanmu::Im::Basic::User* operator_);
  ::AcFunDanmu::Im::Basic::User* unsafe_arena_release_operator_();

  // .AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallRequestEvent requestEvent = 20;
  bool has_requestevent() const;
  private:
  bool _internal_has_requestevent() const;
  public:
  void clear_requestevent();
  const ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallRequestEvent& requestevent() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallRequestEvent* release_requestevent();
  ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallRequestEvent* mutable_requestevent();
  void set_allocated_requestevent(::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallRequestEvent* requestevent);
  private:
  const ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallRequestEvent& _internal_requestevent() const;
  ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallRequestEvent* _internal_mutable_requestevent();
  public:
  void unsafe_arena_set_allocated_requestevent(
      ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallRequestEvent* requestevent);
  ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallRequestEvent* unsafe_arena_release_requestevent();

  // .AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallAcceptedEvent acceptedEvent = 21;
  bool has_acceptedevent() const;
  private:
  bool _internal_has_acceptedevent() const;
  public:
  void clear_acceptedevent();
  const ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallAcceptedEvent& acceptedevent() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallAcceptedEvent* release_acceptedevent();
  ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallAcceptedEvent* mutable_acceptedevent();
  void set_allocated_acceptedevent(::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallAcceptedEvent* acceptedevent);
  private:
  const ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallAcceptedEvent& _internal_acceptedevent() const;
  ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallAcceptedEvent* _internal_mutable_acceptedevent();
  public:
  void unsafe_arena_set_allocated_acceptedevent(
      ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallAcceptedEvent* acceptedevent);
  ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallAcceptedEvent* unsafe_arena_release_acceptedevent();

  // .AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallRejectedEvent rejectedEvent = 22;
  bool has_rejectedevent() const;
  private:
  bool _internal_has_rejectedevent() const;
  public:
  void clear_rejectedevent();
  const ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallRejectedEvent& rejectedevent() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallRejectedEvent* release_rejectedevent();
  ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallRejectedEvent* mutable_rejectedevent();
  void set_allocated_rejectedevent(::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallRejectedEvent* rejectedevent);
  private:
  const ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallRejectedEvent& _internal_rejectedevent() const;
  ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallRejectedEvent* _internal_mutable_rejectedevent();
  public:
  void unsafe_arena_set_allocated_rejectedevent(
      ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallRejectedEvent* rejectedevent);
  ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallRejectedEvent* unsafe_arena_release_rejectedevent();

  // .AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallClosedEvent closedEvent = 23;
  bool has_closedevent() const;
  private:
  bool _internal_has_closedevent() const;
  public:
  void clear_closedevent();
  const ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallClosedEvent& closedevent() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallClosedEvent* release_closedevent();
  ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallClosedEvent* mutable_closedevent();
  void set_allocated_closedevent(::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallClosedEvent* closedevent);
  private:
  const ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallClosedEvent& _internal_closedevent() const;
  ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallClosedEvent* _internal_mutable_closedevent();
  public:
  void unsafe_arena_set_allocated_closedevent(
      ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallClosedEvent* closedevent);
  ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallClosedEvent* unsafe_arena_release_closedevent();

  // .AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallCancelledEvent cancelledEvent = 24;
  bool has_cancelledevent() const;
  private:
  bool _internal_has_cancelledevent() const;
  public:
  void clear_cancelledevent();
  const ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallCancelledEvent& cancelledevent() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallCancelledEvent* release_cancelledevent();
  ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallCancelledEvent* mutable_cancelledevent();
  void set_allocated_cancelledevent(::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallCancelledEvent* cancelledevent);
  private:
  const ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallCancelledEvent& _internal_cancelledevent() const;
  ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallCancelledEvent* _internal_mutable_cancelledevent();
  public:
  void unsafe_arena_set_allocated_cancelledevent(
      ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallCancelledEvent* cancelledevent);
  ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallCancelledEvent* unsafe_arena_release_cancelledevent();

  // .AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallAlreadyProcessedEvent alreadyProcessedEvent = 25;
  bool has_alreadyprocessedevent() const;
  private:
  bool _internal_has_alreadyprocessedevent() const;
  public:
  void clear_alreadyprocessedevent();
  const ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallAlreadyProcessedEvent& alreadyprocessedevent() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallAlreadyProcessedEvent* release_alreadyprocessedevent();
  ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallAlreadyProcessedEvent* mutable_alreadyprocessedevent();
  void set_allocated_alreadyprocessedevent(::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallAlreadyProcessedEvent* alreadyprocessedevent);
  private:
  const ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallAlreadyProcessedEvent& _internal_alreadyprocessedevent() const;
  ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallAlreadyProcessedEvent* _internal_mutable_alreadyprocessedevent();
  public:
  void unsafe_arena_set_allocated_alreadyprocessedevent(
      ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallAlreadyProcessedEvent* alreadyprocessedevent);
  ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallAlreadyProcessedEvent* unsafe_arena_release_alreadyprocessedevent();

  // .AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallTimeoutEvent timeoutEvent = 26;
  bool has_timeoutevent() const;
  private:
  bool _internal_has_timeoutevent() const;
  public:
  void clear_timeoutevent();
  const ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallTimeoutEvent& timeoutevent() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallTimeoutEvent* release_timeoutevent();
  ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallTimeoutEvent* mutable_timeoutevent();
  void set_allocated_timeoutevent(::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallTimeoutEvent* timeoutevent);
  private:
  const ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallTimeoutEvent& _internal_timeoutevent() const;
  ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallTimeoutEvent* _internal_mutable_timeoutevent();
  public:
  void unsafe_arena_set_allocated_timeoutevent(
      ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallTimeoutEvent* timeoutevent);
  ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallTimeoutEvent* unsafe_arena_release_timeoutevent();

  // .AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallDetailUpdateEvent detailUpdateEvent = 27;
  bool has_detailupdateevent() const;
  private:
  bool _internal_has_detailupdateevent() const;
  public:
  void clear_detailupdateevent();
  const ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallDetailUpdateEvent& detailupdateevent() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallDetailUpdateEvent* release_detailupdateevent();
  ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallDetailUpdateEvent* mutable_detailupdateevent();
  void set_allocated_detailupdateevent(::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallDetailUpdateEvent* detailupdateevent);
  private:
  const ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallDetailUpdateEvent& _internal_detailupdateevent() const;
  ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallDetailUpdateEvent* _internal_mutable_detailupdateevent();
  public:
  void unsafe_arena_set_allocated_detailupdateevent(
      ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallDetailUpdateEvent* detailupdateevent);
  ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallDetailUpdateEvent* unsafe_arena_release_detailupdateevent();

  void clear_voiceCallEvent();
  VoiceCallEventCase voiceCallEvent_case() const;
  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush)
 private:
  class _Internal;
  void set_has_requestevent();
  void set_has_acceptedevent();
  void set_has_rejectedevent();
  void set_has_closedevent();
  void set_has_cancelledevent();
  void set_has_alreadyprocessedevent();
  void set_has_timeoutevent();
  void set_has_detailupdateevent();

  inline bool has_voiceCallEvent() const;
  inline void clear_has_voiceCallEvent();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomid_;
    ::AcFunDanmu::Im::Basic::User* operator__;
    union VoiceCallEventUnion {
      constexpr VoiceCallEventUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallRequestEvent* requestevent_;
      ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallAcceptedEvent* acceptedevent_;
      ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallRejectedEvent* rejectedevent_;
      ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallClosedEvent* closedevent_;
      ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallCancelledEvent* cancelledevent_;
      ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallAlreadyProcessedEvent* alreadyprocessedevent_;
      ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallTimeoutEvent* timeoutevent_;
      ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallDetailUpdateEvent* detailupdateevent_;
    } voiceCallEvent_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_VoiceCallEventPush_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VoiceCallEventPush

// .AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallRequestEvent requestEvent = 20;
inline bool VoiceCallEventPush::_internal_has_requestevent() const {
  return voiceCallEvent_case() == kRequestEvent;
}
inline bool VoiceCallEventPush::has_requestevent() const {
  return _internal_has_requestevent();
}
inline void VoiceCallEventPush::set_has_requestevent() {
  _impl_._oneof_case_[0] = kRequestEvent;
}
inline ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallRequestEvent* VoiceCallEventPush::release_requestevent() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush.requestEvent)
  if (_internal_has_requestevent()) {
    clear_has_voiceCallEvent();
    ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallRequestEvent* temp = _impl_.voiceCallEvent_.requestevent_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.voiceCallEvent_.requestevent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallRequestEvent& VoiceCallEventPush::_internal_requestevent() const {
  return _internal_has_requestevent()
      ? *_impl_.voiceCallEvent_.requestevent_
      : reinterpret_cast< ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallRequestEvent&>(::AcFunDanmu::Im::Cloud::Voice::Call::_VoiceCallRequestEvent_default_instance_);
}
inline const ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallRequestEvent& VoiceCallEventPush::requestevent() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush.requestEvent)
  return _internal_requestevent();
}
inline ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallRequestEvent* VoiceCallEventPush::unsafe_arena_release_requestevent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush.requestEvent)
  if (_internal_has_requestevent()) {
    clear_has_voiceCallEvent();
    ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallRequestEvent* temp = _impl_.voiceCallEvent_.requestevent_;
    _impl_.voiceCallEvent_.requestevent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VoiceCallEventPush::unsafe_arena_set_allocated_requestevent(::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallRequestEvent* requestevent) {
  clear_voiceCallEvent();
  if (requestevent) {
    set_has_requestevent();
    _impl_.voiceCallEvent_.requestevent_ = requestevent;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush.requestEvent)
}
inline ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallRequestEvent* VoiceCallEventPush::_internal_mutable_requestevent() {
  if (!_internal_has_requestevent()) {
    clear_voiceCallEvent();
    set_has_requestevent();
    _impl_.voiceCallEvent_.requestevent_ = CreateMaybeMessage< ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallRequestEvent >(GetArenaForAllocation());
  }
  return _impl_.voiceCallEvent_.requestevent_;
}
inline ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallRequestEvent* VoiceCallEventPush::mutable_requestevent() {
  ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallRequestEvent* _msg = _internal_mutable_requestevent();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush.requestEvent)
  return _msg;
}

// .AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallAcceptedEvent acceptedEvent = 21;
inline bool VoiceCallEventPush::_internal_has_acceptedevent() const {
  return voiceCallEvent_case() == kAcceptedEvent;
}
inline bool VoiceCallEventPush::has_acceptedevent() const {
  return _internal_has_acceptedevent();
}
inline void VoiceCallEventPush::set_has_acceptedevent() {
  _impl_._oneof_case_[0] = kAcceptedEvent;
}
inline ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallAcceptedEvent* VoiceCallEventPush::release_acceptedevent() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush.acceptedEvent)
  if (_internal_has_acceptedevent()) {
    clear_has_voiceCallEvent();
    ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallAcceptedEvent* temp = _impl_.voiceCallEvent_.acceptedevent_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.voiceCallEvent_.acceptedevent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallAcceptedEvent& VoiceCallEventPush::_internal_acceptedevent() const {
  return _internal_has_acceptedevent()
      ? *_impl_.voiceCallEvent_.acceptedevent_
      : reinterpret_cast< ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallAcceptedEvent&>(::AcFunDanmu::Im::Cloud::Voice::Call::_VoiceCallAcceptedEvent_default_instance_);
}
inline const ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallAcceptedEvent& VoiceCallEventPush::acceptedevent() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush.acceptedEvent)
  return _internal_acceptedevent();
}
inline ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallAcceptedEvent* VoiceCallEventPush::unsafe_arena_release_acceptedevent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush.acceptedEvent)
  if (_internal_has_acceptedevent()) {
    clear_has_voiceCallEvent();
    ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallAcceptedEvent* temp = _impl_.voiceCallEvent_.acceptedevent_;
    _impl_.voiceCallEvent_.acceptedevent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VoiceCallEventPush::unsafe_arena_set_allocated_acceptedevent(::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallAcceptedEvent* acceptedevent) {
  clear_voiceCallEvent();
  if (acceptedevent) {
    set_has_acceptedevent();
    _impl_.voiceCallEvent_.acceptedevent_ = acceptedevent;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush.acceptedEvent)
}
inline ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallAcceptedEvent* VoiceCallEventPush::_internal_mutable_acceptedevent() {
  if (!_internal_has_acceptedevent()) {
    clear_voiceCallEvent();
    set_has_acceptedevent();
    _impl_.voiceCallEvent_.acceptedevent_ = CreateMaybeMessage< ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallAcceptedEvent >(GetArenaForAllocation());
  }
  return _impl_.voiceCallEvent_.acceptedevent_;
}
inline ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallAcceptedEvent* VoiceCallEventPush::mutable_acceptedevent() {
  ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallAcceptedEvent* _msg = _internal_mutable_acceptedevent();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush.acceptedEvent)
  return _msg;
}

// .AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallRejectedEvent rejectedEvent = 22;
inline bool VoiceCallEventPush::_internal_has_rejectedevent() const {
  return voiceCallEvent_case() == kRejectedEvent;
}
inline bool VoiceCallEventPush::has_rejectedevent() const {
  return _internal_has_rejectedevent();
}
inline void VoiceCallEventPush::set_has_rejectedevent() {
  _impl_._oneof_case_[0] = kRejectedEvent;
}
inline ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallRejectedEvent* VoiceCallEventPush::release_rejectedevent() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush.rejectedEvent)
  if (_internal_has_rejectedevent()) {
    clear_has_voiceCallEvent();
    ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallRejectedEvent* temp = _impl_.voiceCallEvent_.rejectedevent_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.voiceCallEvent_.rejectedevent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallRejectedEvent& VoiceCallEventPush::_internal_rejectedevent() const {
  return _internal_has_rejectedevent()
      ? *_impl_.voiceCallEvent_.rejectedevent_
      : reinterpret_cast< ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallRejectedEvent&>(::AcFunDanmu::Im::Cloud::Voice::Call::_VoiceCallRejectedEvent_default_instance_);
}
inline const ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallRejectedEvent& VoiceCallEventPush::rejectedevent() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush.rejectedEvent)
  return _internal_rejectedevent();
}
inline ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallRejectedEvent* VoiceCallEventPush::unsafe_arena_release_rejectedevent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush.rejectedEvent)
  if (_internal_has_rejectedevent()) {
    clear_has_voiceCallEvent();
    ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallRejectedEvent* temp = _impl_.voiceCallEvent_.rejectedevent_;
    _impl_.voiceCallEvent_.rejectedevent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VoiceCallEventPush::unsafe_arena_set_allocated_rejectedevent(::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallRejectedEvent* rejectedevent) {
  clear_voiceCallEvent();
  if (rejectedevent) {
    set_has_rejectedevent();
    _impl_.voiceCallEvent_.rejectedevent_ = rejectedevent;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush.rejectedEvent)
}
inline ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallRejectedEvent* VoiceCallEventPush::_internal_mutable_rejectedevent() {
  if (!_internal_has_rejectedevent()) {
    clear_voiceCallEvent();
    set_has_rejectedevent();
    _impl_.voiceCallEvent_.rejectedevent_ = CreateMaybeMessage< ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallRejectedEvent >(GetArenaForAllocation());
  }
  return _impl_.voiceCallEvent_.rejectedevent_;
}
inline ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallRejectedEvent* VoiceCallEventPush::mutable_rejectedevent() {
  ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallRejectedEvent* _msg = _internal_mutable_rejectedevent();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush.rejectedEvent)
  return _msg;
}

// .AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallClosedEvent closedEvent = 23;
inline bool VoiceCallEventPush::_internal_has_closedevent() const {
  return voiceCallEvent_case() == kClosedEvent;
}
inline bool VoiceCallEventPush::has_closedevent() const {
  return _internal_has_closedevent();
}
inline void VoiceCallEventPush::set_has_closedevent() {
  _impl_._oneof_case_[0] = kClosedEvent;
}
inline ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallClosedEvent* VoiceCallEventPush::release_closedevent() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush.closedEvent)
  if (_internal_has_closedevent()) {
    clear_has_voiceCallEvent();
    ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallClosedEvent* temp = _impl_.voiceCallEvent_.closedevent_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.voiceCallEvent_.closedevent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallClosedEvent& VoiceCallEventPush::_internal_closedevent() const {
  return _internal_has_closedevent()
      ? *_impl_.voiceCallEvent_.closedevent_
      : reinterpret_cast< ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallClosedEvent&>(::AcFunDanmu::Im::Cloud::Voice::Call::_VoiceCallClosedEvent_default_instance_);
}
inline const ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallClosedEvent& VoiceCallEventPush::closedevent() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush.closedEvent)
  return _internal_closedevent();
}
inline ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallClosedEvent* VoiceCallEventPush::unsafe_arena_release_closedevent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush.closedEvent)
  if (_internal_has_closedevent()) {
    clear_has_voiceCallEvent();
    ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallClosedEvent* temp = _impl_.voiceCallEvent_.closedevent_;
    _impl_.voiceCallEvent_.closedevent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VoiceCallEventPush::unsafe_arena_set_allocated_closedevent(::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallClosedEvent* closedevent) {
  clear_voiceCallEvent();
  if (closedevent) {
    set_has_closedevent();
    _impl_.voiceCallEvent_.closedevent_ = closedevent;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush.closedEvent)
}
inline ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallClosedEvent* VoiceCallEventPush::_internal_mutable_closedevent() {
  if (!_internal_has_closedevent()) {
    clear_voiceCallEvent();
    set_has_closedevent();
    _impl_.voiceCallEvent_.closedevent_ = CreateMaybeMessage< ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallClosedEvent >(GetArenaForAllocation());
  }
  return _impl_.voiceCallEvent_.closedevent_;
}
inline ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallClosedEvent* VoiceCallEventPush::mutable_closedevent() {
  ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallClosedEvent* _msg = _internal_mutable_closedevent();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush.closedEvent)
  return _msg;
}

// .AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallCancelledEvent cancelledEvent = 24;
inline bool VoiceCallEventPush::_internal_has_cancelledevent() const {
  return voiceCallEvent_case() == kCancelledEvent;
}
inline bool VoiceCallEventPush::has_cancelledevent() const {
  return _internal_has_cancelledevent();
}
inline void VoiceCallEventPush::set_has_cancelledevent() {
  _impl_._oneof_case_[0] = kCancelledEvent;
}
inline ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallCancelledEvent* VoiceCallEventPush::release_cancelledevent() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush.cancelledEvent)
  if (_internal_has_cancelledevent()) {
    clear_has_voiceCallEvent();
    ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallCancelledEvent* temp = _impl_.voiceCallEvent_.cancelledevent_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.voiceCallEvent_.cancelledevent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallCancelledEvent& VoiceCallEventPush::_internal_cancelledevent() const {
  return _internal_has_cancelledevent()
      ? *_impl_.voiceCallEvent_.cancelledevent_
      : reinterpret_cast< ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallCancelledEvent&>(::AcFunDanmu::Im::Cloud::Voice::Call::_VoiceCallCancelledEvent_default_instance_);
}
inline const ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallCancelledEvent& VoiceCallEventPush::cancelledevent() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush.cancelledEvent)
  return _internal_cancelledevent();
}
inline ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallCancelledEvent* VoiceCallEventPush::unsafe_arena_release_cancelledevent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush.cancelledEvent)
  if (_internal_has_cancelledevent()) {
    clear_has_voiceCallEvent();
    ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallCancelledEvent* temp = _impl_.voiceCallEvent_.cancelledevent_;
    _impl_.voiceCallEvent_.cancelledevent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VoiceCallEventPush::unsafe_arena_set_allocated_cancelledevent(::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallCancelledEvent* cancelledevent) {
  clear_voiceCallEvent();
  if (cancelledevent) {
    set_has_cancelledevent();
    _impl_.voiceCallEvent_.cancelledevent_ = cancelledevent;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush.cancelledEvent)
}
inline ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallCancelledEvent* VoiceCallEventPush::_internal_mutable_cancelledevent() {
  if (!_internal_has_cancelledevent()) {
    clear_voiceCallEvent();
    set_has_cancelledevent();
    _impl_.voiceCallEvent_.cancelledevent_ = CreateMaybeMessage< ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallCancelledEvent >(GetArenaForAllocation());
  }
  return _impl_.voiceCallEvent_.cancelledevent_;
}
inline ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallCancelledEvent* VoiceCallEventPush::mutable_cancelledevent() {
  ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallCancelledEvent* _msg = _internal_mutable_cancelledevent();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush.cancelledEvent)
  return _msg;
}

// .AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallAlreadyProcessedEvent alreadyProcessedEvent = 25;
inline bool VoiceCallEventPush::_internal_has_alreadyprocessedevent() const {
  return voiceCallEvent_case() == kAlreadyProcessedEvent;
}
inline bool VoiceCallEventPush::has_alreadyprocessedevent() const {
  return _internal_has_alreadyprocessedevent();
}
inline void VoiceCallEventPush::set_has_alreadyprocessedevent() {
  _impl_._oneof_case_[0] = kAlreadyProcessedEvent;
}
inline ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallAlreadyProcessedEvent* VoiceCallEventPush::release_alreadyprocessedevent() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush.alreadyProcessedEvent)
  if (_internal_has_alreadyprocessedevent()) {
    clear_has_voiceCallEvent();
    ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallAlreadyProcessedEvent* temp = _impl_.voiceCallEvent_.alreadyprocessedevent_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.voiceCallEvent_.alreadyprocessedevent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallAlreadyProcessedEvent& VoiceCallEventPush::_internal_alreadyprocessedevent() const {
  return _internal_has_alreadyprocessedevent()
      ? *_impl_.voiceCallEvent_.alreadyprocessedevent_
      : reinterpret_cast< ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallAlreadyProcessedEvent&>(::AcFunDanmu::Im::Cloud::Voice::Call::_VoiceCallAlreadyProcessedEvent_default_instance_);
}
inline const ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallAlreadyProcessedEvent& VoiceCallEventPush::alreadyprocessedevent() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush.alreadyProcessedEvent)
  return _internal_alreadyprocessedevent();
}
inline ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallAlreadyProcessedEvent* VoiceCallEventPush::unsafe_arena_release_alreadyprocessedevent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush.alreadyProcessedEvent)
  if (_internal_has_alreadyprocessedevent()) {
    clear_has_voiceCallEvent();
    ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallAlreadyProcessedEvent* temp = _impl_.voiceCallEvent_.alreadyprocessedevent_;
    _impl_.voiceCallEvent_.alreadyprocessedevent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VoiceCallEventPush::unsafe_arena_set_allocated_alreadyprocessedevent(::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallAlreadyProcessedEvent* alreadyprocessedevent) {
  clear_voiceCallEvent();
  if (alreadyprocessedevent) {
    set_has_alreadyprocessedevent();
    _impl_.voiceCallEvent_.alreadyprocessedevent_ = alreadyprocessedevent;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush.alreadyProcessedEvent)
}
inline ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallAlreadyProcessedEvent* VoiceCallEventPush::_internal_mutable_alreadyprocessedevent() {
  if (!_internal_has_alreadyprocessedevent()) {
    clear_voiceCallEvent();
    set_has_alreadyprocessedevent();
    _impl_.voiceCallEvent_.alreadyprocessedevent_ = CreateMaybeMessage< ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallAlreadyProcessedEvent >(GetArenaForAllocation());
  }
  return _impl_.voiceCallEvent_.alreadyprocessedevent_;
}
inline ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallAlreadyProcessedEvent* VoiceCallEventPush::mutable_alreadyprocessedevent() {
  ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallAlreadyProcessedEvent* _msg = _internal_mutable_alreadyprocessedevent();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush.alreadyProcessedEvent)
  return _msg;
}

// .AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallTimeoutEvent timeoutEvent = 26;
inline bool VoiceCallEventPush::_internal_has_timeoutevent() const {
  return voiceCallEvent_case() == kTimeoutEvent;
}
inline bool VoiceCallEventPush::has_timeoutevent() const {
  return _internal_has_timeoutevent();
}
inline void VoiceCallEventPush::set_has_timeoutevent() {
  _impl_._oneof_case_[0] = kTimeoutEvent;
}
inline ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallTimeoutEvent* VoiceCallEventPush::release_timeoutevent() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush.timeoutEvent)
  if (_internal_has_timeoutevent()) {
    clear_has_voiceCallEvent();
    ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallTimeoutEvent* temp = _impl_.voiceCallEvent_.timeoutevent_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.voiceCallEvent_.timeoutevent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallTimeoutEvent& VoiceCallEventPush::_internal_timeoutevent() const {
  return _internal_has_timeoutevent()
      ? *_impl_.voiceCallEvent_.timeoutevent_
      : reinterpret_cast< ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallTimeoutEvent&>(::AcFunDanmu::Im::Cloud::Voice::Call::_VoiceCallTimeoutEvent_default_instance_);
}
inline const ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallTimeoutEvent& VoiceCallEventPush::timeoutevent() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush.timeoutEvent)
  return _internal_timeoutevent();
}
inline ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallTimeoutEvent* VoiceCallEventPush::unsafe_arena_release_timeoutevent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush.timeoutEvent)
  if (_internal_has_timeoutevent()) {
    clear_has_voiceCallEvent();
    ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallTimeoutEvent* temp = _impl_.voiceCallEvent_.timeoutevent_;
    _impl_.voiceCallEvent_.timeoutevent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VoiceCallEventPush::unsafe_arena_set_allocated_timeoutevent(::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallTimeoutEvent* timeoutevent) {
  clear_voiceCallEvent();
  if (timeoutevent) {
    set_has_timeoutevent();
    _impl_.voiceCallEvent_.timeoutevent_ = timeoutevent;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush.timeoutEvent)
}
inline ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallTimeoutEvent* VoiceCallEventPush::_internal_mutable_timeoutevent() {
  if (!_internal_has_timeoutevent()) {
    clear_voiceCallEvent();
    set_has_timeoutevent();
    _impl_.voiceCallEvent_.timeoutevent_ = CreateMaybeMessage< ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallTimeoutEvent >(GetArenaForAllocation());
  }
  return _impl_.voiceCallEvent_.timeoutevent_;
}
inline ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallTimeoutEvent* VoiceCallEventPush::mutable_timeoutevent() {
  ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallTimeoutEvent* _msg = _internal_mutable_timeoutevent();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush.timeoutEvent)
  return _msg;
}

// .AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallDetailUpdateEvent detailUpdateEvent = 27;
inline bool VoiceCallEventPush::_internal_has_detailupdateevent() const {
  return voiceCallEvent_case() == kDetailUpdateEvent;
}
inline bool VoiceCallEventPush::has_detailupdateevent() const {
  return _internal_has_detailupdateevent();
}
inline void VoiceCallEventPush::set_has_detailupdateevent() {
  _impl_._oneof_case_[0] = kDetailUpdateEvent;
}
inline ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallDetailUpdateEvent* VoiceCallEventPush::release_detailupdateevent() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush.detailUpdateEvent)
  if (_internal_has_detailupdateevent()) {
    clear_has_voiceCallEvent();
    ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallDetailUpdateEvent* temp = _impl_.voiceCallEvent_.detailupdateevent_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.voiceCallEvent_.detailupdateevent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallDetailUpdateEvent& VoiceCallEventPush::_internal_detailupdateevent() const {
  return _internal_has_detailupdateevent()
      ? *_impl_.voiceCallEvent_.detailupdateevent_
      : reinterpret_cast< ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallDetailUpdateEvent&>(::AcFunDanmu::Im::Cloud::Voice::Call::_VoiceCallDetailUpdateEvent_default_instance_);
}
inline const ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallDetailUpdateEvent& VoiceCallEventPush::detailupdateevent() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush.detailUpdateEvent)
  return _internal_detailupdateevent();
}
inline ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallDetailUpdateEvent* VoiceCallEventPush::unsafe_arena_release_detailupdateevent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush.detailUpdateEvent)
  if (_internal_has_detailupdateevent()) {
    clear_has_voiceCallEvent();
    ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallDetailUpdateEvent* temp = _impl_.voiceCallEvent_.detailupdateevent_;
    _impl_.voiceCallEvent_.detailupdateevent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VoiceCallEventPush::unsafe_arena_set_allocated_detailupdateevent(::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallDetailUpdateEvent* detailupdateevent) {
  clear_voiceCallEvent();
  if (detailupdateevent) {
    set_has_detailupdateevent();
    _impl_.voiceCallEvent_.detailupdateevent_ = detailupdateevent;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush.detailUpdateEvent)
}
inline ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallDetailUpdateEvent* VoiceCallEventPush::_internal_mutable_detailupdateevent() {
  if (!_internal_has_detailupdateevent()) {
    clear_voiceCallEvent();
    set_has_detailupdateevent();
    _impl_.voiceCallEvent_.detailupdateevent_ = CreateMaybeMessage< ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallDetailUpdateEvent >(GetArenaForAllocation());
  }
  return _impl_.voiceCallEvent_.detailupdateevent_;
}
inline ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallDetailUpdateEvent* VoiceCallEventPush::mutable_detailupdateevent() {
  ::AcFunDanmu::Im::Cloud::Voice::Call::VoiceCallDetailUpdateEvent* _msg = _internal_mutable_detailupdateevent();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush.detailUpdateEvent)
  return _msg;
}

// string roomId = 1;
inline void VoiceCallEventPush::clear_roomid() {
  _impl_.roomid_.ClearToEmpty();
}
inline const std::string& VoiceCallEventPush::roomid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush.roomId)
  return _internal_roomid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VoiceCallEventPush::set_roomid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.roomid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush.roomId)
}
inline std::string* VoiceCallEventPush::mutable_roomid() {
  std::string* _s = _internal_mutable_roomid();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush.roomId)
  return _s;
}
inline const std::string& VoiceCallEventPush::_internal_roomid() const {
  return _impl_.roomid_.Get();
}
inline void VoiceCallEventPush::_internal_set_roomid(const std::string& value) {
  
  _impl_.roomid_.Set(value, GetArenaForAllocation());
}
inline std::string* VoiceCallEventPush::_internal_mutable_roomid() {
  
  return _impl_.roomid_.Mutable(GetArenaForAllocation());
}
inline std::string* VoiceCallEventPush::release_roomid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush.roomId)
  return _impl_.roomid_.Release();
}
inline void VoiceCallEventPush::set_allocated_roomid(std::string* roomid) {
  if (roomid != nullptr) {
    
  } else {
    
  }
  _impl_.roomid_.SetAllocated(roomid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.roomid_.IsDefault()) {
    _impl_.roomid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush.roomId)
}

// .AcFunDanmu.Im.Basic.User operator = 2;
inline bool VoiceCallEventPush::_internal_has_operator_() const {
  return this != internal_default_instance() && _impl_.operator__ != nullptr;
}
inline bool VoiceCallEventPush::has_operator_() const {
  return _internal_has_operator_();
}
inline const ::AcFunDanmu::Im::Basic::User& VoiceCallEventPush::_internal_operator_() const {
  const ::AcFunDanmu::Im::Basic::User* p = _impl_.operator__;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic::User&>(
      ::AcFunDanmu::Im::Basic::_User_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic::User& VoiceCallEventPush::operator_() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush.operator)
  return _internal_operator_();
}
inline void VoiceCallEventPush::unsafe_arena_set_allocated_operator_(
    ::AcFunDanmu::Im::Basic::User* operator_) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.operator__);
  }
  _impl_.operator__ = operator_;
  if (operator_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush.operator)
}
inline ::AcFunDanmu::Im::Basic::User* VoiceCallEventPush::release_operator_() {
  
  ::AcFunDanmu::Im::Basic::User* temp = _impl_.operator__;
  _impl_.operator__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AcFunDanmu::Im::Basic::User* VoiceCallEventPush::unsafe_arena_release_operator_() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush.operator)
  
  ::AcFunDanmu::Im::Basic::User* temp = _impl_.operator__;
  _impl_.operator__ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic::User* VoiceCallEventPush::_internal_mutable_operator_() {
  
  if (_impl_.operator__ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic::User>(GetArenaForAllocation());
    _impl_.operator__ = p;
  }
  return _impl_.operator__;
}
inline ::AcFunDanmu::Im::Basic::User* VoiceCallEventPush::mutable_operator_() {
  ::AcFunDanmu::Im::Basic::User* _msg = _internal_mutable_operator_();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush.operator)
  return _msg;
}
inline void VoiceCallEventPush::set_allocated_operator_(::AcFunDanmu::Im::Basic::User* operator_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.operator__);
  }
  if (operator_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(operator_));
    if (message_arena != submessage_arena) {
      operator_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, operator_, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.operator__ = operator_;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Voice.Call.VoiceCallEventPush.operator)
}

inline bool VoiceCallEventPush::has_voiceCallEvent() const {
  return voiceCallEvent_case() != VOICECALLEVENT_NOT_SET;
}
inline void VoiceCallEventPush::clear_has_voiceCallEvent() {
  _impl_._oneof_case_[0] = VOICECALLEVENT_NOT_SET;
}
inline VoiceCallEventPush::VoiceCallEventCase VoiceCallEventPush::voiceCallEvent_case() const {
  return VoiceCallEventPush::VoiceCallEventCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Call
}  // namespace Voice
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_VoiceCallEventPush_2eproto
