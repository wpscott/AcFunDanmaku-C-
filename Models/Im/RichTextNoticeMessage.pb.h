// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RichTextNoticeMessage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_RichTextNoticeMessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_RichTextNoticeMessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_RichTextNoticeMessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_RichTextNoticeMessage_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_RichTextNoticeMessage_2eproto;
namespace AcFunDanmu {
namespace Im {
namespace Message {
class RichTextNoticeMessage;
struct RichTextNoticeMessageDefaultTypeInternal;
extern RichTextNoticeMessageDefaultTypeInternal _RichTextNoticeMessage_default_instance_;
class RichTextNoticeMessage_RichTextItem;
struct RichTextNoticeMessage_RichTextItemDefaultTypeInternal;
extern RichTextNoticeMessage_RichTextItemDefaultTypeInternal _RichTextNoticeMessage_RichTextItem_default_instance_;
}  // namespace Message
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::Im::Message::RichTextNoticeMessage* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Message::RichTextNoticeMessage>(Arena*);
template<> ::AcFunDanmu::Im::Message::RichTextNoticeMessage_RichTextItem* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Message::RichTextNoticeMessage_RichTextItem>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {
namespace Im {
namespace Message {

// ===================================================================

class RichTextNoticeMessage_RichTextItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Message.RichTextNoticeMessage.RichTextItem) */ {
 public:
  inline RichTextNoticeMessage_RichTextItem() : RichTextNoticeMessage_RichTextItem(nullptr) {}
  ~RichTextNoticeMessage_RichTextItem() override;
  explicit PROTOBUF_CONSTEXPR RichTextNoticeMessage_RichTextItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RichTextNoticeMessage_RichTextItem(const RichTextNoticeMessage_RichTextItem& from);
  RichTextNoticeMessage_RichTextItem(RichTextNoticeMessage_RichTextItem&& from) noexcept
    : RichTextNoticeMessage_RichTextItem() {
    *this = ::std::move(from);
  }

  inline RichTextNoticeMessage_RichTextItem& operator=(const RichTextNoticeMessage_RichTextItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline RichTextNoticeMessage_RichTextItem& operator=(RichTextNoticeMessage_RichTextItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RichTextNoticeMessage_RichTextItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const RichTextNoticeMessage_RichTextItem* internal_default_instance() {
    return reinterpret_cast<const RichTextNoticeMessage_RichTextItem*>(
               &_RichTextNoticeMessage_RichTextItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RichTextNoticeMessage_RichTextItem& a, RichTextNoticeMessage_RichTextItem& b) {
    a.Swap(&b);
  }
  inline void Swap(RichTextNoticeMessage_RichTextItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RichTextNoticeMessage_RichTextItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RichTextNoticeMessage_RichTextItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RichTextNoticeMessage_RichTextItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RichTextNoticeMessage_RichTextItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RichTextNoticeMessage_RichTextItem& from) {
    RichTextNoticeMessage_RichTextItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RichTextNoticeMessage_RichTextItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Message.RichTextNoticeMessage.RichTextItem";
  }
  protected:
  explicit RichTextNoticeMessage_RichTextItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClickActionFieldNumber = 4,
    kColorFieldNumber = 1,
    kStartFieldNumber = 2,
    kLenFieldNumber = 3,
    kUnderlineFieldNumber = 5,
  };
  // string clickAction = 4;
  void clear_clickaction();
  const std::string& clickaction() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clickaction(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clickaction();
  PROTOBUF_NODISCARD std::string* release_clickaction();
  void set_allocated_clickaction(std::string* clickaction);
  private:
  const std::string& _internal_clickaction() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clickaction(const std::string& value);
  std::string* _internal_mutable_clickaction();
  public:

  // int32 color = 1;
  void clear_color();
  int32_t color() const;
  void set_color(int32_t value);
  private:
  int32_t _internal_color() const;
  void _internal_set_color(int32_t value);
  public:

  // int32 start = 2;
  void clear_start();
  int32_t start() const;
  void set_start(int32_t value);
  private:
  int32_t _internal_start() const;
  void _internal_set_start(int32_t value);
  public:

  // int32 len = 3;
  void clear_len();
  int32_t len() const;
  void set_len(int32_t value);
  private:
  int32_t _internal_len() const;
  void _internal_set_len(int32_t value);
  public:

  // bool underline = 5;
  void clear_underline();
  bool underline() const;
  void set_underline(bool value);
  private:
  bool _internal_underline() const;
  void _internal_set_underline(bool value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Message.RichTextNoticeMessage.RichTextItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clickaction_;
    int32_t color_;
    int32_t start_;
    int32_t len_;
    bool underline_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RichTextNoticeMessage_2eproto;
};
// -------------------------------------------------------------------

class RichTextNoticeMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Message.RichTextNoticeMessage) */ {
 public:
  inline RichTextNoticeMessage() : RichTextNoticeMessage(nullptr) {}
  ~RichTextNoticeMessage() override;
  explicit PROTOBUF_CONSTEXPR RichTextNoticeMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RichTextNoticeMessage(const RichTextNoticeMessage& from);
  RichTextNoticeMessage(RichTextNoticeMessage&& from) noexcept
    : RichTextNoticeMessage() {
    *this = ::std::move(from);
  }

  inline RichTextNoticeMessage& operator=(const RichTextNoticeMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RichTextNoticeMessage& operator=(RichTextNoticeMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RichTextNoticeMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const RichTextNoticeMessage* internal_default_instance() {
    return reinterpret_cast<const RichTextNoticeMessage*>(
               &_RichTextNoticeMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RichTextNoticeMessage& a, RichTextNoticeMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RichTextNoticeMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RichTextNoticeMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RichTextNoticeMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RichTextNoticeMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RichTextNoticeMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RichTextNoticeMessage& from) {
    RichTextNoticeMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RichTextNoticeMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Message.RichTextNoticeMessage";
  }
  protected:
  explicit RichTextNoticeMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RichTextNoticeMessage_RichTextItem RichTextItem;

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .AcFunDanmu.Im.Message.RichTextNoticeMessage.RichTextItem items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::AcFunDanmu::Im::Message::RichTextNoticeMessage_RichTextItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Message::RichTextNoticeMessage_RichTextItem >*
      mutable_items();
  private:
  const ::AcFunDanmu::Im::Message::RichTextNoticeMessage_RichTextItem& _internal_items(int index) const;
  ::AcFunDanmu::Im::Message::RichTextNoticeMessage_RichTextItem* _internal_add_items();
  public:
  const ::AcFunDanmu::Im::Message::RichTextNoticeMessage_RichTextItem& items(int index) const;
  ::AcFunDanmu::Im::Message::RichTextNoticeMessage_RichTextItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Message::RichTextNoticeMessage_RichTextItem >&
      items() const;

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Message.RichTextNoticeMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Message::RichTextNoticeMessage_RichTextItem > items_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RichTextNoticeMessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RichTextNoticeMessage_RichTextItem

// int32 color = 1;
inline void RichTextNoticeMessage_RichTextItem::clear_color() {
  _impl_.color_ = 0;
}
inline int32_t RichTextNoticeMessage_RichTextItem::_internal_color() const {
  return _impl_.color_;
}
inline int32_t RichTextNoticeMessage_RichTextItem::color() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.RichTextNoticeMessage.RichTextItem.color)
  return _internal_color();
}
inline void RichTextNoticeMessage_RichTextItem::_internal_set_color(int32_t value) {
  
  _impl_.color_ = value;
}
inline void RichTextNoticeMessage_RichTextItem::set_color(int32_t value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Message.RichTextNoticeMessage.RichTextItem.color)
}

// int32 start = 2;
inline void RichTextNoticeMessage_RichTextItem::clear_start() {
  _impl_.start_ = 0;
}
inline int32_t RichTextNoticeMessage_RichTextItem::_internal_start() const {
  return _impl_.start_;
}
inline int32_t RichTextNoticeMessage_RichTextItem::start() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.RichTextNoticeMessage.RichTextItem.start)
  return _internal_start();
}
inline void RichTextNoticeMessage_RichTextItem::_internal_set_start(int32_t value) {
  
  _impl_.start_ = value;
}
inline void RichTextNoticeMessage_RichTextItem::set_start(int32_t value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Message.RichTextNoticeMessage.RichTextItem.start)
}

// int32 len = 3;
inline void RichTextNoticeMessage_RichTextItem::clear_len() {
  _impl_.len_ = 0;
}
inline int32_t RichTextNoticeMessage_RichTextItem::_internal_len() const {
  return _impl_.len_;
}
inline int32_t RichTextNoticeMessage_RichTextItem::len() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.RichTextNoticeMessage.RichTextItem.len)
  return _internal_len();
}
inline void RichTextNoticeMessage_RichTextItem::_internal_set_len(int32_t value) {
  
  _impl_.len_ = value;
}
inline void RichTextNoticeMessage_RichTextItem::set_len(int32_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Message.RichTextNoticeMessage.RichTextItem.len)
}

// string clickAction = 4;
inline void RichTextNoticeMessage_RichTextItem::clear_clickaction() {
  _impl_.clickaction_.ClearToEmpty();
}
inline const std::string& RichTextNoticeMessage_RichTextItem::clickaction() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.RichTextNoticeMessage.RichTextItem.clickAction)
  return _internal_clickaction();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RichTextNoticeMessage_RichTextItem::set_clickaction(ArgT0&& arg0, ArgT... args) {
 
 _impl_.clickaction_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Message.RichTextNoticeMessage.RichTextItem.clickAction)
}
inline std::string* RichTextNoticeMessage_RichTextItem::mutable_clickaction() {
  std::string* _s = _internal_mutable_clickaction();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Message.RichTextNoticeMessage.RichTextItem.clickAction)
  return _s;
}
inline const std::string& RichTextNoticeMessage_RichTextItem::_internal_clickaction() const {
  return _impl_.clickaction_.Get();
}
inline void RichTextNoticeMessage_RichTextItem::_internal_set_clickaction(const std::string& value) {
  
  _impl_.clickaction_.Set(value, GetArenaForAllocation());
}
inline std::string* RichTextNoticeMessage_RichTextItem::_internal_mutable_clickaction() {
  
  return _impl_.clickaction_.Mutable(GetArenaForAllocation());
}
inline std::string* RichTextNoticeMessage_RichTextItem::release_clickaction() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Message.RichTextNoticeMessage.RichTextItem.clickAction)
  return _impl_.clickaction_.Release();
}
inline void RichTextNoticeMessage_RichTextItem::set_allocated_clickaction(std::string* clickaction) {
  if (clickaction != nullptr) {
    
  } else {
    
  }
  _impl_.clickaction_.SetAllocated(clickaction, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.clickaction_.IsDefault()) {
    _impl_.clickaction_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Message.RichTextNoticeMessage.RichTextItem.clickAction)
}

// bool underline = 5;
inline void RichTextNoticeMessage_RichTextItem::clear_underline() {
  _impl_.underline_ = false;
}
inline bool RichTextNoticeMessage_RichTextItem::_internal_underline() const {
  return _impl_.underline_;
}
inline bool RichTextNoticeMessage_RichTextItem::underline() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.RichTextNoticeMessage.RichTextItem.underline)
  return _internal_underline();
}
inline void RichTextNoticeMessage_RichTextItem::_internal_set_underline(bool value) {
  
  _impl_.underline_ = value;
}
inline void RichTextNoticeMessage_RichTextItem::set_underline(bool value) {
  _internal_set_underline(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Message.RichTextNoticeMessage.RichTextItem.underline)
}

// -------------------------------------------------------------------

// RichTextNoticeMessage

// repeated .AcFunDanmu.Im.Message.RichTextNoticeMessage.RichTextItem items = 1;
inline int RichTextNoticeMessage::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int RichTextNoticeMessage::items_size() const {
  return _internal_items_size();
}
inline void RichTextNoticeMessage::clear_items() {
  _impl_.items_.Clear();
}
inline ::AcFunDanmu::Im::Message::RichTextNoticeMessage_RichTextItem* RichTextNoticeMessage::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Message.RichTextNoticeMessage.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Message::RichTextNoticeMessage_RichTextItem >*
RichTextNoticeMessage::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Message.RichTextNoticeMessage.items)
  return &_impl_.items_;
}
inline const ::AcFunDanmu::Im::Message::RichTextNoticeMessage_RichTextItem& RichTextNoticeMessage::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::AcFunDanmu::Im::Message::RichTextNoticeMessage_RichTextItem& RichTextNoticeMessage::items(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Message.RichTextNoticeMessage.items)
  return _internal_items(index);
}
inline ::AcFunDanmu::Im::Message::RichTextNoticeMessage_RichTextItem* RichTextNoticeMessage::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::AcFunDanmu::Im::Message::RichTextNoticeMessage_RichTextItem* RichTextNoticeMessage::add_items() {
  ::AcFunDanmu::Im::Message::RichTextNoticeMessage_RichTextItem* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Message.RichTextNoticeMessage.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Message::RichTextNoticeMessage_RichTextItem >&
RichTextNoticeMessage::items() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Message.RichTextNoticeMessage.items)
  return _impl_.items_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Message
}  // namespace Im
}  // namespace AcFunDanmu

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_RichTextNoticeMessage_2eproto
