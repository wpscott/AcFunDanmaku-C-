// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VoiceCallMessageContent.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_VoiceCallMessageContent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_VoiceCallMessageContent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "CallStatus.pb.h"
#include "CallType.pb.h"
#include "ChatMode.pb.h"
#include "User.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_VoiceCallMessageContent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_VoiceCallMessageContent_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_VoiceCallMessageContent_2eproto;
namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Message {
class VoiceCallMessageContent;
struct VoiceCallMessageContentDefaultTypeInternal;
extern VoiceCallMessageContentDefaultTypeInternal _VoiceCallMessageContent_default_instance_;
}  // namespace Message
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::Im::Cloud::Message::VoiceCallMessageContent* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud::Message::VoiceCallMessageContent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Message {

// ===================================================================

class VoiceCallMessageContent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.VoiceCallMessageContent) */ {
 public:
  inline VoiceCallMessageContent() : VoiceCallMessageContent(nullptr) {}
  ~VoiceCallMessageContent() override;
  explicit PROTOBUF_CONSTEXPR VoiceCallMessageContent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VoiceCallMessageContent(const VoiceCallMessageContent& from);
  VoiceCallMessageContent(VoiceCallMessageContent&& from) noexcept
    : VoiceCallMessageContent() {
    *this = ::std::move(from);
  }

  inline VoiceCallMessageContent& operator=(const VoiceCallMessageContent& from) {
    CopyFrom(from);
    return *this;
  }
  inline VoiceCallMessageContent& operator=(VoiceCallMessageContent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VoiceCallMessageContent& default_instance() {
    return *internal_default_instance();
  }
  static inline const VoiceCallMessageContent* internal_default_instance() {
    return reinterpret_cast<const VoiceCallMessageContent*>(
               &_VoiceCallMessageContent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VoiceCallMessageContent& a, VoiceCallMessageContent& b) {
    a.Swap(&b);
  }
  inline void Swap(VoiceCallMessageContent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VoiceCallMessageContent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VoiceCallMessageContent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VoiceCallMessageContent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VoiceCallMessageContent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VoiceCallMessageContent& from) {
    VoiceCallMessageContent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VoiceCallMessageContent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.VoiceCallMessageContent";
  }
  protected:
  explicit VoiceCallMessageContent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParticipantFieldNumber = 23,
    kRoomIdFieldNumber = 1,
    kTitleFieldNumber = 21,
    kFromUserFieldNumber = 6,
    kHostFieldNumber = 22,
    kCallTypeFieldNumber = 2,
    kStatusFieldNumber = 3,
    kStartTimeMsFieldNumber = 4,
    kEndTimeMsFieldNumber = 5,
    kChatModeFieldNumber = 7,
    kMaxCountFieldNumber = 24,
  };
  // repeated .AcFunDanmu.Im.Basic.User participant = 23;
  int participant_size() const;
  private:
  int _internal_participant_size() const;
  public:
  void clear_participant();
  ::AcFunDanmu::Im::Basic::User* mutable_participant(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic::User >*
      mutable_participant();
  private:
  const ::AcFunDanmu::Im::Basic::User& _internal_participant(int index) const;
  ::AcFunDanmu::Im::Basic::User* _internal_add_participant();
  public:
  const ::AcFunDanmu::Im::Basic::User& participant(int index) const;
  ::AcFunDanmu::Im::Basic::User* add_participant();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic::User >&
      participant() const;

  // string roomId = 1;
  void clear_roomid();
  const std::string& roomid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_roomid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_roomid();
  PROTOBUF_NODISCARD std::string* release_roomid();
  void set_allocated_roomid(std::string* roomid);
  private:
  const std::string& _internal_roomid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_roomid(const std::string& value);
  std::string* _internal_mutable_roomid();
  public:

  // string title = 21;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // .AcFunDanmu.Im.Basic.User fromUser = 6;
  bool has_fromuser() const;
  private:
  bool _internal_has_fromuser() const;
  public:
  void clear_fromuser();
  const ::AcFunDanmu::Im::Basic::User& fromuser() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Basic::User* release_fromuser();
  ::AcFunDanmu::Im::Basic::User* mutable_fromuser();
  void set_allocated_fromuser(::AcFunDanmu::Im::Basic::User* fromuser);
  private:
  const ::AcFunDanmu::Im::Basic::User& _internal_fromuser() const;
  ::AcFunDanmu::Im::Basic::User* _internal_mutable_fromuser();
  public:
  void unsafe_arena_set_allocated_fromuser(
      ::AcFunDanmu::Im::Basic::User* fromuser);
  ::AcFunDanmu::Im::Basic::User* unsafe_arena_release_fromuser();

  // .AcFunDanmu.Im.Basic.User host = 22;
  bool has_host() const;
  private:
  bool _internal_has_host() const;
  public:
  void clear_host();
  const ::AcFunDanmu::Im::Basic::User& host() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Basic::User* release_host();
  ::AcFunDanmu::Im::Basic::User* mutable_host();
  void set_allocated_host(::AcFunDanmu::Im::Basic::User* host);
  private:
  const ::AcFunDanmu::Im::Basic::User& _internal_host() const;
  ::AcFunDanmu::Im::Basic::User* _internal_mutable_host();
  public:
  void unsafe_arena_set_allocated_host(
      ::AcFunDanmu::Im::Basic::User* host);
  ::AcFunDanmu::Im::Basic::User* unsafe_arena_release_host();

  // .AcFunDanmu.Im.Cloud.Voice.Call.CallType callType = 2;
  void clear_calltype();
  ::AcFunDanmu::Im::Cloud::Voice::Call::CallType calltype() const;
  void set_calltype(::AcFunDanmu::Im::Cloud::Voice::Call::CallType value);
  private:
  ::AcFunDanmu::Im::Cloud::Voice::Call::CallType _internal_calltype() const;
  void _internal_set_calltype(::AcFunDanmu::Im::Cloud::Voice::Call::CallType value);
  public:

  // .AcFunDanmu.Im.Cloud.Voice.Call.CallStatus status = 3;
  void clear_status();
  ::AcFunDanmu::Im::Cloud::Voice::Call::CallStatus status() const;
  void set_status(::AcFunDanmu::Im::Cloud::Voice::Call::CallStatus value);
  private:
  ::AcFunDanmu::Im::Cloud::Voice::Call::CallStatus _internal_status() const;
  void _internal_set_status(::AcFunDanmu::Im::Cloud::Voice::Call::CallStatus value);
  public:

  // int64 startTimeMs = 4;
  void clear_starttimems();
  int64_t starttimems() const;
  void set_starttimems(int64_t value);
  private:
  int64_t _internal_starttimems() const;
  void _internal_set_starttimems(int64_t value);
  public:

  // int64 endTimeMs = 5;
  void clear_endtimems();
  int64_t endtimems() const;
  void set_endtimems(int64_t value);
  private:
  int64_t _internal_endtimems() const;
  void _internal_set_endtimems(int64_t value);
  public:

  // .AcFunDanmu.Im.Cloud.Voice.Call.ChatMode chatMode = 7;
  void clear_chatmode();
  ::AcFunDanmu::Im::Cloud::Voice::Call::ChatMode chatmode() const;
  void set_chatmode(::AcFunDanmu::Im::Cloud::Voice::Call::ChatMode value);
  private:
  ::AcFunDanmu::Im::Cloud::Voice::Call::ChatMode _internal_chatmode() const;
  void _internal_set_chatmode(::AcFunDanmu::Im::Cloud::Voice::Call::ChatMode value);
  public:

  // int32 maxCount = 24;
  void clear_maxcount();
  int32_t maxcount() const;
  void set_maxcount(int32_t value);
  private:
  int32_t _internal_maxcount() const;
  void _internal_set_maxcount(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.VoiceCallMessageContent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic::User > participant_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::AcFunDanmu::Im::Basic::User* fromuser_;
    ::AcFunDanmu::Im::Basic::User* host_;
    int calltype_;
    int status_;
    int64_t starttimems_;
    int64_t endtimems_;
    int chatmode_;
    int32_t maxcount_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_VoiceCallMessageContent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VoiceCallMessageContent

// string roomId = 1;
inline void VoiceCallMessageContent::clear_roomid() {
  _impl_.roomid_.ClearToEmpty();
}
inline const std::string& VoiceCallMessageContent::roomid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.VoiceCallMessageContent.roomId)
  return _internal_roomid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VoiceCallMessageContent::set_roomid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.roomid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.VoiceCallMessageContent.roomId)
}
inline std::string* VoiceCallMessageContent::mutable_roomid() {
  std::string* _s = _internal_mutable_roomid();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.VoiceCallMessageContent.roomId)
  return _s;
}
inline const std::string& VoiceCallMessageContent::_internal_roomid() const {
  return _impl_.roomid_.Get();
}
inline void VoiceCallMessageContent::_internal_set_roomid(const std::string& value) {
  
  _impl_.roomid_.Set(value, GetArenaForAllocation());
}
inline std::string* VoiceCallMessageContent::_internal_mutable_roomid() {
  
  return _impl_.roomid_.Mutable(GetArenaForAllocation());
}
inline std::string* VoiceCallMessageContent::release_roomid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.VoiceCallMessageContent.roomId)
  return _impl_.roomid_.Release();
}
inline void VoiceCallMessageContent::set_allocated_roomid(std::string* roomid) {
  if (roomid != nullptr) {
    
  } else {
    
  }
  _impl_.roomid_.SetAllocated(roomid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.roomid_.IsDefault()) {
    _impl_.roomid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.VoiceCallMessageContent.roomId)
}

// .AcFunDanmu.Im.Cloud.Voice.Call.CallType callType = 2;
inline void VoiceCallMessageContent::clear_calltype() {
  _impl_.calltype_ = 0;
}
inline ::AcFunDanmu::Im::Cloud::Voice::Call::CallType VoiceCallMessageContent::_internal_calltype() const {
  return static_cast< ::AcFunDanmu::Im::Cloud::Voice::Call::CallType >(_impl_.calltype_);
}
inline ::AcFunDanmu::Im::Cloud::Voice::Call::CallType VoiceCallMessageContent::calltype() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.VoiceCallMessageContent.callType)
  return _internal_calltype();
}
inline void VoiceCallMessageContent::_internal_set_calltype(::AcFunDanmu::Im::Cloud::Voice::Call::CallType value) {
  
  _impl_.calltype_ = value;
}
inline void VoiceCallMessageContent::set_calltype(::AcFunDanmu::Im::Cloud::Voice::Call::CallType value) {
  _internal_set_calltype(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.VoiceCallMessageContent.callType)
}

// .AcFunDanmu.Im.Cloud.Voice.Call.CallStatus status = 3;
inline void VoiceCallMessageContent::clear_status() {
  _impl_.status_ = 0;
}
inline ::AcFunDanmu::Im::Cloud::Voice::Call::CallStatus VoiceCallMessageContent::_internal_status() const {
  return static_cast< ::AcFunDanmu::Im::Cloud::Voice::Call::CallStatus >(_impl_.status_);
}
inline ::AcFunDanmu::Im::Cloud::Voice::Call::CallStatus VoiceCallMessageContent::status() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.VoiceCallMessageContent.status)
  return _internal_status();
}
inline void VoiceCallMessageContent::_internal_set_status(::AcFunDanmu::Im::Cloud::Voice::Call::CallStatus value) {
  
  _impl_.status_ = value;
}
inline void VoiceCallMessageContent::set_status(::AcFunDanmu::Im::Cloud::Voice::Call::CallStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.VoiceCallMessageContent.status)
}

// int64 startTimeMs = 4;
inline void VoiceCallMessageContent::clear_starttimems() {
  _impl_.starttimems_ = int64_t{0};
}
inline int64_t VoiceCallMessageContent::_internal_starttimems() const {
  return _impl_.starttimems_;
}
inline int64_t VoiceCallMessageContent::starttimems() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.VoiceCallMessageContent.startTimeMs)
  return _internal_starttimems();
}
inline void VoiceCallMessageContent::_internal_set_starttimems(int64_t value) {
  
  _impl_.starttimems_ = value;
}
inline void VoiceCallMessageContent::set_starttimems(int64_t value) {
  _internal_set_starttimems(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.VoiceCallMessageContent.startTimeMs)
}

// int64 endTimeMs = 5;
inline void VoiceCallMessageContent::clear_endtimems() {
  _impl_.endtimems_ = int64_t{0};
}
inline int64_t VoiceCallMessageContent::_internal_endtimems() const {
  return _impl_.endtimems_;
}
inline int64_t VoiceCallMessageContent::endtimems() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.VoiceCallMessageContent.endTimeMs)
  return _internal_endtimems();
}
inline void VoiceCallMessageContent::_internal_set_endtimems(int64_t value) {
  
  _impl_.endtimems_ = value;
}
inline void VoiceCallMessageContent::set_endtimems(int64_t value) {
  _internal_set_endtimems(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.VoiceCallMessageContent.endTimeMs)
}

// .AcFunDanmu.Im.Basic.User fromUser = 6;
inline bool VoiceCallMessageContent::_internal_has_fromuser() const {
  return this != internal_default_instance() && _impl_.fromuser_ != nullptr;
}
inline bool VoiceCallMessageContent::has_fromuser() const {
  return _internal_has_fromuser();
}
inline const ::AcFunDanmu::Im::Basic::User& VoiceCallMessageContent::_internal_fromuser() const {
  const ::AcFunDanmu::Im::Basic::User* p = _impl_.fromuser_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic::User&>(
      ::AcFunDanmu::Im::Basic::_User_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic::User& VoiceCallMessageContent::fromuser() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.VoiceCallMessageContent.fromUser)
  return _internal_fromuser();
}
inline void VoiceCallMessageContent::unsafe_arena_set_allocated_fromuser(
    ::AcFunDanmu::Im::Basic::User* fromuser) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fromuser_);
  }
  _impl_.fromuser_ = fromuser;
  if (fromuser) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Message.VoiceCallMessageContent.fromUser)
}
inline ::AcFunDanmu::Im::Basic::User* VoiceCallMessageContent::release_fromuser() {
  
  ::AcFunDanmu::Im::Basic::User* temp = _impl_.fromuser_;
  _impl_.fromuser_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AcFunDanmu::Im::Basic::User* VoiceCallMessageContent::unsafe_arena_release_fromuser() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.VoiceCallMessageContent.fromUser)
  
  ::AcFunDanmu::Im::Basic::User* temp = _impl_.fromuser_;
  _impl_.fromuser_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic::User* VoiceCallMessageContent::_internal_mutable_fromuser() {
  
  if (_impl_.fromuser_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic::User>(GetArenaForAllocation());
    _impl_.fromuser_ = p;
  }
  return _impl_.fromuser_;
}
inline ::AcFunDanmu::Im::Basic::User* VoiceCallMessageContent::mutable_fromuser() {
  ::AcFunDanmu::Im::Basic::User* _msg = _internal_mutable_fromuser();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.VoiceCallMessageContent.fromUser)
  return _msg;
}
inline void VoiceCallMessageContent::set_allocated_fromuser(::AcFunDanmu::Im::Basic::User* fromuser) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fromuser_);
  }
  if (fromuser) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fromuser));
    if (message_arena != submessage_arena) {
      fromuser = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fromuser, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.fromuser_ = fromuser;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.VoiceCallMessageContent.fromUser)
}

// .AcFunDanmu.Im.Cloud.Voice.Call.ChatMode chatMode = 7;
inline void VoiceCallMessageContent::clear_chatmode() {
  _impl_.chatmode_ = 0;
}
inline ::AcFunDanmu::Im::Cloud::Voice::Call::ChatMode VoiceCallMessageContent::_internal_chatmode() const {
  return static_cast< ::AcFunDanmu::Im::Cloud::Voice::Call::ChatMode >(_impl_.chatmode_);
}
inline ::AcFunDanmu::Im::Cloud::Voice::Call::ChatMode VoiceCallMessageContent::chatmode() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.VoiceCallMessageContent.chatMode)
  return _internal_chatmode();
}
inline void VoiceCallMessageContent::_internal_set_chatmode(::AcFunDanmu::Im::Cloud::Voice::Call::ChatMode value) {
  
  _impl_.chatmode_ = value;
}
inline void VoiceCallMessageContent::set_chatmode(::AcFunDanmu::Im::Cloud::Voice::Call::ChatMode value) {
  _internal_set_chatmode(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.VoiceCallMessageContent.chatMode)
}

// string title = 21;
inline void VoiceCallMessageContent::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& VoiceCallMessageContent::title() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.VoiceCallMessageContent.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VoiceCallMessageContent::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.VoiceCallMessageContent.title)
}
inline std::string* VoiceCallMessageContent::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.VoiceCallMessageContent.title)
  return _s;
}
inline const std::string& VoiceCallMessageContent::_internal_title() const {
  return _impl_.title_.Get();
}
inline void VoiceCallMessageContent::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* VoiceCallMessageContent::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* VoiceCallMessageContent::release_title() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.VoiceCallMessageContent.title)
  return _impl_.title_.Release();
}
inline void VoiceCallMessageContent::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.VoiceCallMessageContent.title)
}

// .AcFunDanmu.Im.Basic.User host = 22;
inline bool VoiceCallMessageContent::_internal_has_host() const {
  return this != internal_default_instance() && _impl_.host_ != nullptr;
}
inline bool VoiceCallMessageContent::has_host() const {
  return _internal_has_host();
}
inline const ::AcFunDanmu::Im::Basic::User& VoiceCallMessageContent::_internal_host() const {
  const ::AcFunDanmu::Im::Basic::User* p = _impl_.host_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic::User&>(
      ::AcFunDanmu::Im::Basic::_User_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic::User& VoiceCallMessageContent::host() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.VoiceCallMessageContent.host)
  return _internal_host();
}
inline void VoiceCallMessageContent::unsafe_arena_set_allocated_host(
    ::AcFunDanmu::Im::Basic::User* host) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.host_);
  }
  _impl_.host_ = host;
  if (host) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Message.VoiceCallMessageContent.host)
}
inline ::AcFunDanmu::Im::Basic::User* VoiceCallMessageContent::release_host() {
  
  ::AcFunDanmu::Im::Basic::User* temp = _impl_.host_;
  _impl_.host_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AcFunDanmu::Im::Basic::User* VoiceCallMessageContent::unsafe_arena_release_host() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.VoiceCallMessageContent.host)
  
  ::AcFunDanmu::Im::Basic::User* temp = _impl_.host_;
  _impl_.host_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic::User* VoiceCallMessageContent::_internal_mutable_host() {
  
  if (_impl_.host_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic::User>(GetArenaForAllocation());
    _impl_.host_ = p;
  }
  return _impl_.host_;
}
inline ::AcFunDanmu::Im::Basic::User* VoiceCallMessageContent::mutable_host() {
  ::AcFunDanmu::Im::Basic::User* _msg = _internal_mutable_host();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.VoiceCallMessageContent.host)
  return _msg;
}
inline void VoiceCallMessageContent::set_allocated_host(::AcFunDanmu::Im::Basic::User* host) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.host_);
  }
  if (host) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(host));
    if (message_arena != submessage_arena) {
      host = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, host, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.host_ = host;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.VoiceCallMessageContent.host)
}

// repeated .AcFunDanmu.Im.Basic.User participant = 23;
inline int VoiceCallMessageContent::_internal_participant_size() const {
  return _impl_.participant_.size();
}
inline int VoiceCallMessageContent::participant_size() const {
  return _internal_participant_size();
}
inline ::AcFunDanmu::Im::Basic::User* VoiceCallMessageContent::mutable_participant(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.VoiceCallMessageContent.participant)
  return _impl_.participant_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic::User >*
VoiceCallMessageContent::mutable_participant() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Cloud.Message.VoiceCallMessageContent.participant)
  return &_impl_.participant_;
}
inline const ::AcFunDanmu::Im::Basic::User& VoiceCallMessageContent::_internal_participant(int index) const {
  return _impl_.participant_.Get(index);
}
inline const ::AcFunDanmu::Im::Basic::User& VoiceCallMessageContent::participant(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.VoiceCallMessageContent.participant)
  return _internal_participant(index);
}
inline ::AcFunDanmu::Im::Basic::User* VoiceCallMessageContent::_internal_add_participant() {
  return _impl_.participant_.Add();
}
inline ::AcFunDanmu::Im::Basic::User* VoiceCallMessageContent::add_participant() {
  ::AcFunDanmu::Im::Basic::User* _add = _internal_add_participant();
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Cloud.Message.VoiceCallMessageContent.participant)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic::User >&
VoiceCallMessageContent::participant() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Cloud.Message.VoiceCallMessageContent.participant)
  return _impl_.participant_;
}

// int32 maxCount = 24;
inline void VoiceCallMessageContent::clear_maxcount() {
  _impl_.maxcount_ = 0;
}
inline int32_t VoiceCallMessageContent::_internal_maxcount() const {
  return _impl_.maxcount_;
}
inline int32_t VoiceCallMessageContent::maxcount() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.VoiceCallMessageContent.maxCount)
  return _internal_maxcount();
}
inline void VoiceCallMessageContent::_internal_set_maxcount(int32_t value) {
  
  _impl_.maxcount_ = value;
}
inline void VoiceCallMessageContent::set_maxcount(int32_t value) {
  _internal_set_maxcount(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.VoiceCallMessageContent.maxCount)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Message
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_VoiceCallMessageContent_2eproto
