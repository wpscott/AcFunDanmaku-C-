// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DownstreamPayload.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_DownstreamPayload_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_DownstreamPayload_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_DownstreamPayload_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_DownstreamPayload_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DownstreamPayload_2eproto;
namespace AcFunDanmu {
namespace Im {
namespace Basic {
class DownstreamPayload;
struct DownstreamPayloadDefaultTypeInternal;
extern DownstreamPayloadDefaultTypeInternal _DownstreamPayload_default_instance_;
}  // namespace Basic
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::Im::Basic::DownstreamPayload* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Basic::DownstreamPayload>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {
namespace Im {
namespace Basic {

// ===================================================================

class DownstreamPayload final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Basic.DownstreamPayload) */ {
 public:
  inline DownstreamPayload() : DownstreamPayload(nullptr) {}
  ~DownstreamPayload() override;
  explicit PROTOBUF_CONSTEXPR DownstreamPayload(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DownstreamPayload(const DownstreamPayload& from);
  DownstreamPayload(DownstreamPayload&& from) noexcept
    : DownstreamPayload() {
    *this = ::std::move(from);
  }

  inline DownstreamPayload& operator=(const DownstreamPayload& from) {
    CopyFrom(from);
    return *this;
  }
  inline DownstreamPayload& operator=(DownstreamPayload&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DownstreamPayload& default_instance() {
    return *internal_default_instance();
  }
  static inline const DownstreamPayload* internal_default_instance() {
    return reinterpret_cast<const DownstreamPayload*>(
               &_DownstreamPayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DownstreamPayload& a, DownstreamPayload& b) {
    a.Swap(&b);
  }
  inline void Swap(DownstreamPayload* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DownstreamPayload* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DownstreamPayload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DownstreamPayload>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DownstreamPayload& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DownstreamPayload& from) {
    DownstreamPayload::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DownstreamPayload* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Basic.DownstreamPayload";
  }
  protected:
  explicit DownstreamPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kPayloadDataFieldNumber = 4,
    kErrorMsgFieldNumber = 5,
    kErrorDataFieldNumber = 6,
    kSubBizFieldNumber = 7,
    kSeqIdFieldNumber = 2,
    kKlinkPushIdFieldNumber = 8,
    kErrorCodeFieldNumber = 3,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_command(ArgT0&& arg0, ArgT... args);
  std::string* mutable_command();
  PROTOBUF_NODISCARD std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // bytes payloadData = 4;
  void clear_payloaddata();
  const std::string& payloaddata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payloaddata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payloaddata();
  PROTOBUF_NODISCARD std::string* release_payloaddata();
  void set_allocated_payloaddata(std::string* payloaddata);
  private:
  const std::string& _internal_payloaddata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payloaddata(const std::string& value);
  std::string* _internal_mutable_payloaddata();
  public:

  // string errorMsg = 5;
  void clear_errormsg();
  const std::string& errormsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errormsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errormsg();
  PROTOBUF_NODISCARD std::string* release_errormsg();
  void set_allocated_errormsg(std::string* errormsg);
  private:
  const std::string& _internal_errormsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errormsg(const std::string& value);
  std::string* _internal_mutable_errormsg();
  public:

  // bytes errorData = 6;
  void clear_errordata();
  const std::string& errordata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errordata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errordata();
  PROTOBUF_NODISCARD std::string* release_errordata();
  void set_allocated_errordata(std::string* errordata);
  private:
  const std::string& _internal_errordata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errordata(const std::string& value);
  std::string* _internal_mutable_errordata();
  public:

  // string subBiz = 7;
  void clear_subbiz();
  const std::string& subbiz() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subbiz(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subbiz();
  PROTOBUF_NODISCARD std::string* release_subbiz();
  void set_allocated_subbiz(std::string* subbiz);
  private:
  const std::string& _internal_subbiz() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subbiz(const std::string& value);
  std::string* _internal_mutable_subbiz();
  public:

  // int64 seqId = 2;
  void clear_seqid();
  int64_t seqid() const;
  void set_seqid(int64_t value);
  private:
  int64_t _internal_seqid() const;
  void _internal_set_seqid(int64_t value);
  public:

  // int64 klinkPushId = 8;
  void clear_klinkpushid();
  int64_t klinkpushid() const;
  void set_klinkpushid(int64_t value);
  private:
  int64_t _internal_klinkpushid() const;
  void _internal_set_klinkpushid(int64_t value);
  public:

  // int32 errorCode = 3;
  void clear_errorcode();
  int32_t errorcode() const;
  void set_errorcode(int32_t value);
  private:
  int32_t _internal_errorcode() const;
  void _internal_set_errorcode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Basic.DownstreamPayload)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payloaddata_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errormsg_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errordata_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subbiz_;
    int64_t seqid_;
    int64_t klinkpushid_;
    int32_t errorcode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_DownstreamPayload_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DownstreamPayload

// string command = 1;
inline void DownstreamPayload::clear_command() {
  _impl_.command_.ClearToEmpty();
}
inline const std::string& DownstreamPayload::command() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.DownstreamPayload.command)
  return _internal_command();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DownstreamPayload::set_command(ArgT0&& arg0, ArgT... args) {
 
 _impl_.command_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.DownstreamPayload.command)
}
inline std::string* DownstreamPayload::mutable_command() {
  std::string* _s = _internal_mutable_command();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.DownstreamPayload.command)
  return _s;
}
inline const std::string& DownstreamPayload::_internal_command() const {
  return _impl_.command_.Get();
}
inline void DownstreamPayload::_internal_set_command(const std::string& value) {
  
  _impl_.command_.Set(value, GetArenaForAllocation());
}
inline std::string* DownstreamPayload::_internal_mutable_command() {
  
  return _impl_.command_.Mutable(GetArenaForAllocation());
}
inline std::string* DownstreamPayload::release_command() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.DownstreamPayload.command)
  return _impl_.command_.Release();
}
inline void DownstreamPayload::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  _impl_.command_.SetAllocated(command, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.command_.IsDefault()) {
    _impl_.command_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.DownstreamPayload.command)
}

// int64 seqId = 2;
inline void DownstreamPayload::clear_seqid() {
  _impl_.seqid_ = int64_t{0};
}
inline int64_t DownstreamPayload::_internal_seqid() const {
  return _impl_.seqid_;
}
inline int64_t DownstreamPayload::seqid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.DownstreamPayload.seqId)
  return _internal_seqid();
}
inline void DownstreamPayload::_internal_set_seqid(int64_t value) {
  
  _impl_.seqid_ = value;
}
inline void DownstreamPayload::set_seqid(int64_t value) {
  _internal_set_seqid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.DownstreamPayload.seqId)
}

// int32 errorCode = 3;
inline void DownstreamPayload::clear_errorcode() {
  _impl_.errorcode_ = 0;
}
inline int32_t DownstreamPayload::_internal_errorcode() const {
  return _impl_.errorcode_;
}
inline int32_t DownstreamPayload::errorcode() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.DownstreamPayload.errorCode)
  return _internal_errorcode();
}
inline void DownstreamPayload::_internal_set_errorcode(int32_t value) {
  
  _impl_.errorcode_ = value;
}
inline void DownstreamPayload::set_errorcode(int32_t value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.DownstreamPayload.errorCode)
}

// bytes payloadData = 4;
inline void DownstreamPayload::clear_payloaddata() {
  _impl_.payloaddata_.ClearToEmpty();
}
inline const std::string& DownstreamPayload::payloaddata() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.DownstreamPayload.payloadData)
  return _internal_payloaddata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DownstreamPayload::set_payloaddata(ArgT0&& arg0, ArgT... args) {
 
 _impl_.payloaddata_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.DownstreamPayload.payloadData)
}
inline std::string* DownstreamPayload::mutable_payloaddata() {
  std::string* _s = _internal_mutable_payloaddata();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.DownstreamPayload.payloadData)
  return _s;
}
inline const std::string& DownstreamPayload::_internal_payloaddata() const {
  return _impl_.payloaddata_.Get();
}
inline void DownstreamPayload::_internal_set_payloaddata(const std::string& value) {
  
  _impl_.payloaddata_.Set(value, GetArenaForAllocation());
}
inline std::string* DownstreamPayload::_internal_mutable_payloaddata() {
  
  return _impl_.payloaddata_.Mutable(GetArenaForAllocation());
}
inline std::string* DownstreamPayload::release_payloaddata() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.DownstreamPayload.payloadData)
  return _impl_.payloaddata_.Release();
}
inline void DownstreamPayload::set_allocated_payloaddata(std::string* payloaddata) {
  if (payloaddata != nullptr) {
    
  } else {
    
  }
  _impl_.payloaddata_.SetAllocated(payloaddata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.payloaddata_.IsDefault()) {
    _impl_.payloaddata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.DownstreamPayload.payloadData)
}

// string errorMsg = 5;
inline void DownstreamPayload::clear_errormsg() {
  _impl_.errormsg_.ClearToEmpty();
}
inline const std::string& DownstreamPayload::errormsg() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.DownstreamPayload.errorMsg)
  return _internal_errormsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DownstreamPayload::set_errormsg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.errormsg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.DownstreamPayload.errorMsg)
}
inline std::string* DownstreamPayload::mutable_errormsg() {
  std::string* _s = _internal_mutable_errormsg();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.DownstreamPayload.errorMsg)
  return _s;
}
inline const std::string& DownstreamPayload::_internal_errormsg() const {
  return _impl_.errormsg_.Get();
}
inline void DownstreamPayload::_internal_set_errormsg(const std::string& value) {
  
  _impl_.errormsg_.Set(value, GetArenaForAllocation());
}
inline std::string* DownstreamPayload::_internal_mutable_errormsg() {
  
  return _impl_.errormsg_.Mutable(GetArenaForAllocation());
}
inline std::string* DownstreamPayload::release_errormsg() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.DownstreamPayload.errorMsg)
  return _impl_.errormsg_.Release();
}
inline void DownstreamPayload::set_allocated_errormsg(std::string* errormsg) {
  if (errormsg != nullptr) {
    
  } else {
    
  }
  _impl_.errormsg_.SetAllocated(errormsg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errormsg_.IsDefault()) {
    _impl_.errormsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.DownstreamPayload.errorMsg)
}

// bytes errorData = 6;
inline void DownstreamPayload::clear_errordata() {
  _impl_.errordata_.ClearToEmpty();
}
inline const std::string& DownstreamPayload::errordata() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.DownstreamPayload.errorData)
  return _internal_errordata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DownstreamPayload::set_errordata(ArgT0&& arg0, ArgT... args) {
 
 _impl_.errordata_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.DownstreamPayload.errorData)
}
inline std::string* DownstreamPayload::mutable_errordata() {
  std::string* _s = _internal_mutable_errordata();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.DownstreamPayload.errorData)
  return _s;
}
inline const std::string& DownstreamPayload::_internal_errordata() const {
  return _impl_.errordata_.Get();
}
inline void DownstreamPayload::_internal_set_errordata(const std::string& value) {
  
  _impl_.errordata_.Set(value, GetArenaForAllocation());
}
inline std::string* DownstreamPayload::_internal_mutable_errordata() {
  
  return _impl_.errordata_.Mutable(GetArenaForAllocation());
}
inline std::string* DownstreamPayload::release_errordata() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.DownstreamPayload.errorData)
  return _impl_.errordata_.Release();
}
inline void DownstreamPayload::set_allocated_errordata(std::string* errordata) {
  if (errordata != nullptr) {
    
  } else {
    
  }
  _impl_.errordata_.SetAllocated(errordata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errordata_.IsDefault()) {
    _impl_.errordata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.DownstreamPayload.errorData)
}

// string subBiz = 7;
inline void DownstreamPayload::clear_subbiz() {
  _impl_.subbiz_.ClearToEmpty();
}
inline const std::string& DownstreamPayload::subbiz() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.DownstreamPayload.subBiz)
  return _internal_subbiz();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DownstreamPayload::set_subbiz(ArgT0&& arg0, ArgT... args) {
 
 _impl_.subbiz_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.DownstreamPayload.subBiz)
}
inline std::string* DownstreamPayload::mutable_subbiz() {
  std::string* _s = _internal_mutable_subbiz();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.DownstreamPayload.subBiz)
  return _s;
}
inline const std::string& DownstreamPayload::_internal_subbiz() const {
  return _impl_.subbiz_.Get();
}
inline void DownstreamPayload::_internal_set_subbiz(const std::string& value) {
  
  _impl_.subbiz_.Set(value, GetArenaForAllocation());
}
inline std::string* DownstreamPayload::_internal_mutable_subbiz() {
  
  return _impl_.subbiz_.Mutable(GetArenaForAllocation());
}
inline std::string* DownstreamPayload::release_subbiz() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.DownstreamPayload.subBiz)
  return _impl_.subbiz_.Release();
}
inline void DownstreamPayload::set_allocated_subbiz(std::string* subbiz) {
  if (subbiz != nullptr) {
    
  } else {
    
  }
  _impl_.subbiz_.SetAllocated(subbiz, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.subbiz_.IsDefault()) {
    _impl_.subbiz_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.DownstreamPayload.subBiz)
}

// int64 klinkPushId = 8;
inline void DownstreamPayload::clear_klinkpushid() {
  _impl_.klinkpushid_ = int64_t{0};
}
inline int64_t DownstreamPayload::_internal_klinkpushid() const {
  return _impl_.klinkpushid_;
}
inline int64_t DownstreamPayload::klinkpushid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.DownstreamPayload.klinkPushId)
  return _internal_klinkpushid();
}
inline void DownstreamPayload::_internal_set_klinkpushid(int64_t value) {
  
  _impl_.klinkpushid_ = value;
}
inline void DownstreamPayload::set_klinkpushid(int64_t value) {
  _internal_set_klinkpushid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.DownstreamPayload.klinkPushId)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Basic
}  // namespace Im
}  // namespace AcFunDanmu

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_DownstreamPayload_2eproto
