// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SessionFolderUpdateRequest.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_SessionFolderUpdateRequest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_SessionFolderUpdateRequest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_SessionFolderUpdateRequest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_SessionFolderUpdateRequest_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SessionFolderUpdateRequest_2eproto;
namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace SessionFolder {
class SessionFolderUpdateRequest;
struct SessionFolderUpdateRequestDefaultTypeInternal;
extern SessionFolderUpdateRequestDefaultTypeInternal _SessionFolderUpdateRequest_default_instance_;
}  // namespace SessionFolder
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::Im::Cloud::SessionFolder::SessionFolderUpdateRequest* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud::SessionFolder::SessionFolderUpdateRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace SessionFolder {

enum SessionFolderUpdateRequest_UpdateField : int {
  SessionFolderUpdateRequest_UpdateField_UN_KNOWN_FIELD = 0,
  SessionFolderUpdateRequest_UpdateField_FOLDER_NAME = 1,
  SessionFolderUpdateRequest_UpdateField_ICON_URL = 2,
  SessionFolderUpdateRequest_UpdateField_EXTRA = 3,
  SessionFolderUpdateRequest_UpdateField_SessionFolderUpdateRequest_UpdateField_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SessionFolderUpdateRequest_UpdateField_SessionFolderUpdateRequest_UpdateField_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SessionFolderUpdateRequest_UpdateField_IsValid(int value);
constexpr SessionFolderUpdateRequest_UpdateField SessionFolderUpdateRequest_UpdateField_UpdateField_MIN = SessionFolderUpdateRequest_UpdateField_UN_KNOWN_FIELD;
constexpr SessionFolderUpdateRequest_UpdateField SessionFolderUpdateRequest_UpdateField_UpdateField_MAX = SessionFolderUpdateRequest_UpdateField_EXTRA;
constexpr int SessionFolderUpdateRequest_UpdateField_UpdateField_ARRAYSIZE = SessionFolderUpdateRequest_UpdateField_UpdateField_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SessionFolderUpdateRequest_UpdateField_descriptor();
template<typename T>
inline const std::string& SessionFolderUpdateRequest_UpdateField_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SessionFolderUpdateRequest_UpdateField>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SessionFolderUpdateRequest_UpdateField_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SessionFolderUpdateRequest_UpdateField_descriptor(), enum_t_value);
}
inline bool SessionFolderUpdateRequest_UpdateField_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SessionFolderUpdateRequest_UpdateField* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SessionFolderUpdateRequest_UpdateField>(
    SessionFolderUpdateRequest_UpdateField_descriptor(), name, value);
}
// ===================================================================

class SessionFolderUpdateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.SessionFolder.SessionFolderUpdateRequest) */ {
 public:
  inline SessionFolderUpdateRequest() : SessionFolderUpdateRequest(nullptr) {}
  ~SessionFolderUpdateRequest() override;
  explicit PROTOBUF_CONSTEXPR SessionFolderUpdateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SessionFolderUpdateRequest(const SessionFolderUpdateRequest& from);
  SessionFolderUpdateRequest(SessionFolderUpdateRequest&& from) noexcept
    : SessionFolderUpdateRequest() {
    *this = ::std::move(from);
  }

  inline SessionFolderUpdateRequest& operator=(const SessionFolderUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionFolderUpdateRequest& operator=(SessionFolderUpdateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SessionFolderUpdateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SessionFolderUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const SessionFolderUpdateRequest*>(
               &_SessionFolderUpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SessionFolderUpdateRequest& a, SessionFolderUpdateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionFolderUpdateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionFolderUpdateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SessionFolderUpdateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SessionFolderUpdateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SessionFolderUpdateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SessionFolderUpdateRequest& from) {
    SessionFolderUpdateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionFolderUpdateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.SessionFolder.SessionFolderUpdateRequest";
  }
  protected:
  explicit SessionFolderUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SessionFolderUpdateRequest_UpdateField UpdateField;
  static constexpr UpdateField UN_KNOWN_FIELD =
    SessionFolderUpdateRequest_UpdateField_UN_KNOWN_FIELD;
  static constexpr UpdateField FOLDER_NAME =
    SessionFolderUpdateRequest_UpdateField_FOLDER_NAME;
  static constexpr UpdateField ICON_URL =
    SessionFolderUpdateRequest_UpdateField_ICON_URL;
  static constexpr UpdateField EXTRA =
    SessionFolderUpdateRequest_UpdateField_EXTRA;
  static inline bool UpdateField_IsValid(int value) {
    return SessionFolderUpdateRequest_UpdateField_IsValid(value);
  }
  static constexpr UpdateField UpdateField_MIN =
    SessionFolderUpdateRequest_UpdateField_UpdateField_MIN;
  static constexpr UpdateField UpdateField_MAX =
    SessionFolderUpdateRequest_UpdateField_UpdateField_MAX;
  static constexpr int UpdateField_ARRAYSIZE =
    SessionFolderUpdateRequest_UpdateField_UpdateField_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  UpdateField_descriptor() {
    return SessionFolderUpdateRequest_UpdateField_descriptor();
  }
  template<typename T>
  static inline const std::string& UpdateField_Name(T enum_t_value) {
    static_assert(::std::is_same<T, UpdateField>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function UpdateField_Name.");
    return SessionFolderUpdateRequest_UpdateField_Name(enum_t_value);
  }
  static inline bool UpdateField_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      UpdateField* value) {
    return SessionFolderUpdateRequest_UpdateField_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 2,
    kSessionFolderIdFieldNumber = 1,
    kFolderNameFieldNumber = 3,
    kIconUrlFieldNumber = 4,
    kExtraFieldNumber = 5,
  };
  // repeated .AcFunDanmu.Im.Cloud.SessionFolder.SessionFolderUpdateRequest.UpdateField fields = 2;
  int fields_size() const;
  private:
  int _internal_fields_size() const;
  public:
  void clear_fields();
  private:
  ::AcFunDanmu::Im::Cloud::SessionFolder::SessionFolderUpdateRequest_UpdateField _internal_fields(int index) const;
  void _internal_add_fields(::AcFunDanmu::Im::Cloud::SessionFolder::SessionFolderUpdateRequest_UpdateField value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_fields();
  public:
  ::AcFunDanmu::Im::Cloud::SessionFolder::SessionFolderUpdateRequest_UpdateField fields(int index) const;
  void set_fields(int index, ::AcFunDanmu::Im::Cloud::SessionFolder::SessionFolderUpdateRequest_UpdateField value);
  void add_fields(::AcFunDanmu::Im::Cloud::SessionFolder::SessionFolderUpdateRequest_UpdateField value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& fields() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_fields();

  // string sessionFolderId = 1;
  void clear_sessionfolderid();
  const std::string& sessionfolderid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sessionfolderid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sessionfolderid();
  PROTOBUF_NODISCARD std::string* release_sessionfolderid();
  void set_allocated_sessionfolderid(std::string* sessionfolderid);
  private:
  const std::string& _internal_sessionfolderid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sessionfolderid(const std::string& value);
  std::string* _internal_mutable_sessionfolderid();
  public:

  // string folderName = 3;
  void clear_foldername();
  const std::string& foldername() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_foldername(ArgT0&& arg0, ArgT... args);
  std::string* mutable_foldername();
  PROTOBUF_NODISCARD std::string* release_foldername();
  void set_allocated_foldername(std::string* foldername);
  private:
  const std::string& _internal_foldername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_foldername(const std::string& value);
  std::string* _internal_mutable_foldername();
  public:

  // string iconUrl = 4;
  void clear_iconurl();
  const std::string& iconurl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_iconurl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_iconurl();
  PROTOBUF_NODISCARD std::string* release_iconurl();
  void set_allocated_iconurl(std::string* iconurl);
  private:
  const std::string& _internal_iconurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_iconurl(const std::string& value);
  std::string* _internal_mutable_iconurl();
  public:

  // bytes extra = 5;
  void clear_extra();
  const std::string& extra() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_extra(ArgT0&& arg0, ArgT... args);
  std::string* mutable_extra();
  PROTOBUF_NODISCARD std::string* release_extra();
  void set_allocated_extra(std::string* extra);
  private:
  const std::string& _internal_extra() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_extra(const std::string& value);
  std::string* _internal_mutable_extra();
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.SessionFolder.SessionFolderUpdateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> fields_;
    mutable std::atomic<int> _fields_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sessionfolderid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr foldername_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr iconurl_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extra_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_SessionFolderUpdateRequest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SessionFolderUpdateRequest

// string sessionFolderId = 1;
inline void SessionFolderUpdateRequest::clear_sessionfolderid() {
  _impl_.sessionfolderid_.ClearToEmpty();
}
inline const std::string& SessionFolderUpdateRequest::sessionfolderid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.SessionFolder.SessionFolderUpdateRequest.sessionFolderId)
  return _internal_sessionfolderid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SessionFolderUpdateRequest::set_sessionfolderid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sessionfolderid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.SessionFolder.SessionFolderUpdateRequest.sessionFolderId)
}
inline std::string* SessionFolderUpdateRequest::mutable_sessionfolderid() {
  std::string* _s = _internal_mutable_sessionfolderid();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.SessionFolder.SessionFolderUpdateRequest.sessionFolderId)
  return _s;
}
inline const std::string& SessionFolderUpdateRequest::_internal_sessionfolderid() const {
  return _impl_.sessionfolderid_.Get();
}
inline void SessionFolderUpdateRequest::_internal_set_sessionfolderid(const std::string& value) {
  
  _impl_.sessionfolderid_.Set(value, GetArenaForAllocation());
}
inline std::string* SessionFolderUpdateRequest::_internal_mutable_sessionfolderid() {
  
  return _impl_.sessionfolderid_.Mutable(GetArenaForAllocation());
}
inline std::string* SessionFolderUpdateRequest::release_sessionfolderid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.SessionFolder.SessionFolderUpdateRequest.sessionFolderId)
  return _impl_.sessionfolderid_.Release();
}
inline void SessionFolderUpdateRequest::set_allocated_sessionfolderid(std::string* sessionfolderid) {
  if (sessionfolderid != nullptr) {
    
  } else {
    
  }
  _impl_.sessionfolderid_.SetAllocated(sessionfolderid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sessionfolderid_.IsDefault()) {
    _impl_.sessionfolderid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.SessionFolder.SessionFolderUpdateRequest.sessionFolderId)
}

// repeated .AcFunDanmu.Im.Cloud.SessionFolder.SessionFolderUpdateRequest.UpdateField fields = 2;
inline int SessionFolderUpdateRequest::_internal_fields_size() const {
  return _impl_.fields_.size();
}
inline int SessionFolderUpdateRequest::fields_size() const {
  return _internal_fields_size();
}
inline void SessionFolderUpdateRequest::clear_fields() {
  _impl_.fields_.Clear();
}
inline ::AcFunDanmu::Im::Cloud::SessionFolder::SessionFolderUpdateRequest_UpdateField SessionFolderUpdateRequest::_internal_fields(int index) const {
  return static_cast< ::AcFunDanmu::Im::Cloud::SessionFolder::SessionFolderUpdateRequest_UpdateField >(_impl_.fields_.Get(index));
}
inline ::AcFunDanmu::Im::Cloud::SessionFolder::SessionFolderUpdateRequest_UpdateField SessionFolderUpdateRequest::fields(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.SessionFolder.SessionFolderUpdateRequest.fields)
  return _internal_fields(index);
}
inline void SessionFolderUpdateRequest::set_fields(int index, ::AcFunDanmu::Im::Cloud::SessionFolder::SessionFolderUpdateRequest_UpdateField value) {
  _impl_.fields_.Set(index, value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.SessionFolder.SessionFolderUpdateRequest.fields)
}
inline void SessionFolderUpdateRequest::_internal_add_fields(::AcFunDanmu::Im::Cloud::SessionFolder::SessionFolderUpdateRequest_UpdateField value) {
  _impl_.fields_.Add(value);
}
inline void SessionFolderUpdateRequest::add_fields(::AcFunDanmu::Im::Cloud::SessionFolder::SessionFolderUpdateRequest_UpdateField value) {
  _internal_add_fields(value);
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Cloud.SessionFolder.SessionFolderUpdateRequest.fields)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
SessionFolderUpdateRequest::fields() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Cloud.SessionFolder.SessionFolderUpdateRequest.fields)
  return _impl_.fields_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SessionFolderUpdateRequest::_internal_mutable_fields() {
  return &_impl_.fields_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SessionFolderUpdateRequest::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Cloud.SessionFolder.SessionFolderUpdateRequest.fields)
  return _internal_mutable_fields();
}

// string folderName = 3;
inline void SessionFolderUpdateRequest::clear_foldername() {
  _impl_.foldername_.ClearToEmpty();
}
inline const std::string& SessionFolderUpdateRequest::foldername() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.SessionFolder.SessionFolderUpdateRequest.folderName)
  return _internal_foldername();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SessionFolderUpdateRequest::set_foldername(ArgT0&& arg0, ArgT... args) {
 
 _impl_.foldername_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.SessionFolder.SessionFolderUpdateRequest.folderName)
}
inline std::string* SessionFolderUpdateRequest::mutable_foldername() {
  std::string* _s = _internal_mutable_foldername();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.SessionFolder.SessionFolderUpdateRequest.folderName)
  return _s;
}
inline const std::string& SessionFolderUpdateRequest::_internal_foldername() const {
  return _impl_.foldername_.Get();
}
inline void SessionFolderUpdateRequest::_internal_set_foldername(const std::string& value) {
  
  _impl_.foldername_.Set(value, GetArenaForAllocation());
}
inline std::string* SessionFolderUpdateRequest::_internal_mutable_foldername() {
  
  return _impl_.foldername_.Mutable(GetArenaForAllocation());
}
inline std::string* SessionFolderUpdateRequest::release_foldername() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.SessionFolder.SessionFolderUpdateRequest.folderName)
  return _impl_.foldername_.Release();
}
inline void SessionFolderUpdateRequest::set_allocated_foldername(std::string* foldername) {
  if (foldername != nullptr) {
    
  } else {
    
  }
  _impl_.foldername_.SetAllocated(foldername, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.foldername_.IsDefault()) {
    _impl_.foldername_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.SessionFolder.SessionFolderUpdateRequest.folderName)
}

// string iconUrl = 4;
inline void SessionFolderUpdateRequest::clear_iconurl() {
  _impl_.iconurl_.ClearToEmpty();
}
inline const std::string& SessionFolderUpdateRequest::iconurl() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.SessionFolder.SessionFolderUpdateRequest.iconUrl)
  return _internal_iconurl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SessionFolderUpdateRequest::set_iconurl(ArgT0&& arg0, ArgT... args) {
 
 _impl_.iconurl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.SessionFolder.SessionFolderUpdateRequest.iconUrl)
}
inline std::string* SessionFolderUpdateRequest::mutable_iconurl() {
  std::string* _s = _internal_mutable_iconurl();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.SessionFolder.SessionFolderUpdateRequest.iconUrl)
  return _s;
}
inline const std::string& SessionFolderUpdateRequest::_internal_iconurl() const {
  return _impl_.iconurl_.Get();
}
inline void SessionFolderUpdateRequest::_internal_set_iconurl(const std::string& value) {
  
  _impl_.iconurl_.Set(value, GetArenaForAllocation());
}
inline std::string* SessionFolderUpdateRequest::_internal_mutable_iconurl() {
  
  return _impl_.iconurl_.Mutable(GetArenaForAllocation());
}
inline std::string* SessionFolderUpdateRequest::release_iconurl() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.SessionFolder.SessionFolderUpdateRequest.iconUrl)
  return _impl_.iconurl_.Release();
}
inline void SessionFolderUpdateRequest::set_allocated_iconurl(std::string* iconurl) {
  if (iconurl != nullptr) {
    
  } else {
    
  }
  _impl_.iconurl_.SetAllocated(iconurl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.iconurl_.IsDefault()) {
    _impl_.iconurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.SessionFolder.SessionFolderUpdateRequest.iconUrl)
}

// bytes extra = 5;
inline void SessionFolderUpdateRequest::clear_extra() {
  _impl_.extra_.ClearToEmpty();
}
inline const std::string& SessionFolderUpdateRequest::extra() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.SessionFolder.SessionFolderUpdateRequest.extra)
  return _internal_extra();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SessionFolderUpdateRequest::set_extra(ArgT0&& arg0, ArgT... args) {
 
 _impl_.extra_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.SessionFolder.SessionFolderUpdateRequest.extra)
}
inline std::string* SessionFolderUpdateRequest::mutable_extra() {
  std::string* _s = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.SessionFolder.SessionFolderUpdateRequest.extra)
  return _s;
}
inline const std::string& SessionFolderUpdateRequest::_internal_extra() const {
  return _impl_.extra_.Get();
}
inline void SessionFolderUpdateRequest::_internal_set_extra(const std::string& value) {
  
  _impl_.extra_.Set(value, GetArenaForAllocation());
}
inline std::string* SessionFolderUpdateRequest::_internal_mutable_extra() {
  
  return _impl_.extra_.Mutable(GetArenaForAllocation());
}
inline std::string* SessionFolderUpdateRequest::release_extra() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.SessionFolder.SessionFolderUpdateRequest.extra)
  return _impl_.extra_.Release();
}
inline void SessionFolderUpdateRequest::set_allocated_extra(std::string* extra) {
  if (extra != nullptr) {
    
  } else {
    
  }
  _impl_.extra_.SetAllocated(extra, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.extra_.IsDefault()) {
    _impl_.extra_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.SessionFolder.SessionFolderUpdateRequest.extra)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace SessionFolder
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::AcFunDanmu::Im::Cloud::SessionFolder::SessionFolderUpdateRequest_UpdateField> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::Im::Cloud::SessionFolder::SessionFolderUpdateRequest_UpdateField>() {
  return ::AcFunDanmu::Im::Cloud::SessionFolder::SessionFolderUpdateRequest_UpdateField_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_SessionFolderUpdateRequest_2eproto
