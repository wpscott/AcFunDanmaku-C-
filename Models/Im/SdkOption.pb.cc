// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SdkOption.proto

#include "SdkOption.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace AcFunDanmu {
namespace Im {
namespace Basic {
PROTOBUF_CONSTEXPR SdkOption::SdkOption(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.netcheckservers_)*/{}
  , /*decltype(_impl_.reportsecurity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.reportintervalseconds_)*/0
  , /*decltype(_impl_.lz4compressionthresholdbytes_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SdkOptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SdkOptionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SdkOptionDefaultTypeInternal() {}
  union {
    SdkOption _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SdkOptionDefaultTypeInternal _SdkOption_default_instance_;
}  // namespace Basic
}  // namespace Im
}  // namespace AcFunDanmu
static ::_pb::Metadata file_level_metadata_SdkOption_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_SdkOption_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_SdkOption_2eproto = nullptr;

const uint32_t TableStruct_SdkOption_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::SdkOption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::SdkOption, _impl_.reportintervalseconds_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::SdkOption, _impl_.reportsecurity_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::SdkOption, _impl_.lz4compressionthresholdbytes_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::Im::Basic::SdkOption, _impl_.netcheckservers_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::AcFunDanmu::Im::Basic::SdkOption)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::AcFunDanmu::Im::Basic::_SdkOption_default_instance_._instance,
};

const char descriptor_table_protodef_SdkOption_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017SdkOption.proto\022\023AcFunDanmu.Im.Basic\"\201"
  "\001\n\tSdkOption\022\035\n\025reportIntervalSeconds\030\001 "
  "\001(\005\022\026\n\016reportSecurity\030\002 \001(\t\022$\n\034lz4Compre"
  "ssionThresholdBytes\030\003 \001(\005\022\027\n\017netCheckSer"
  "vers\030\004 \003(\tb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_SdkOption_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_SdkOption_2eproto = {
    false, false, 178, descriptor_table_protodef_SdkOption_2eproto,
    "SdkOption.proto",
    &descriptor_table_SdkOption_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_SdkOption_2eproto::offsets,
    file_level_metadata_SdkOption_2eproto, file_level_enum_descriptors_SdkOption_2eproto,
    file_level_service_descriptors_SdkOption_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_SdkOption_2eproto_getter() {
  return &descriptor_table_SdkOption_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_SdkOption_2eproto(&descriptor_table_SdkOption_2eproto);
namespace AcFunDanmu {
namespace Im {
namespace Basic {

// ===================================================================

class SdkOption::_Internal {
 public:
};

SdkOption::SdkOption(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.Im.Basic.SdkOption)
}
SdkOption::SdkOption(const SdkOption& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SdkOption* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.netcheckservers_){from._impl_.netcheckservers_}
    , decltype(_impl_.reportsecurity_){}
    , decltype(_impl_.reportintervalseconds_){}
    , decltype(_impl_.lz4compressionthresholdbytes_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.reportsecurity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reportsecurity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reportsecurity().empty()) {
    _this->_impl_.reportsecurity_.Set(from._internal_reportsecurity(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.reportintervalseconds_, &from._impl_.reportintervalseconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lz4compressionthresholdbytes_) -
    reinterpret_cast<char*>(&_impl_.reportintervalseconds_)) + sizeof(_impl_.lz4compressionthresholdbytes_));
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.Im.Basic.SdkOption)
}

inline void SdkOption::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.netcheckservers_){arena}
    , decltype(_impl_.reportsecurity_){}
    , decltype(_impl_.reportintervalseconds_){0}
    , decltype(_impl_.lz4compressionthresholdbytes_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.reportsecurity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reportsecurity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SdkOption::~SdkOption() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.Im.Basic.SdkOption)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SdkOption::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.netcheckservers_.~RepeatedPtrField();
  _impl_.reportsecurity_.Destroy();
}

void SdkOption::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SdkOption::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.Im.Basic.SdkOption)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.netcheckservers_.Clear();
  _impl_.reportsecurity_.ClearToEmpty();
  ::memset(&_impl_.reportintervalseconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.lz4compressionthresholdbytes_) -
      reinterpret_cast<char*>(&_impl_.reportintervalseconds_)) + sizeof(_impl_.lz4compressionthresholdbytes_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SdkOption::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 reportIntervalSeconds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.reportintervalseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string reportSecurity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_reportsecurity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Basic.SdkOption.reportSecurity"));
        } else
          goto handle_unusual;
        continue;
      // int32 lz4CompressionThresholdBytes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.lz4compressionthresholdbytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string netCheckServers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_netcheckservers();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.Im.Basic.SdkOption.netCheckServers"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SdkOption::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.Im.Basic.SdkOption)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 reportIntervalSeconds = 1;
  if (this->_internal_reportintervalseconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_reportintervalseconds(), target);
  }

  // string reportSecurity = 2;
  if (!this->_internal_reportsecurity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reportsecurity().data(), static_cast<int>(this->_internal_reportsecurity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Basic.SdkOption.reportSecurity");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reportsecurity(), target);
  }

  // int32 lz4CompressionThresholdBytes = 3;
  if (this->_internal_lz4compressionthresholdbytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_lz4compressionthresholdbytes(), target);
  }

  // repeated string netCheckServers = 4;
  for (int i = 0, n = this->_internal_netcheckservers_size(); i < n; i++) {
    const auto& s = this->_internal_netcheckservers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.Im.Basic.SdkOption.netCheckServers");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.Im.Basic.SdkOption)
  return target;
}

size_t SdkOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.Im.Basic.SdkOption)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string netCheckServers = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.netcheckservers_.size());
  for (int i = 0, n = _impl_.netcheckservers_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.netcheckservers_.Get(i));
  }

  // string reportSecurity = 2;
  if (!this->_internal_reportsecurity().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reportsecurity());
  }

  // int32 reportIntervalSeconds = 1;
  if (this->_internal_reportintervalseconds() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_reportintervalseconds());
  }

  // int32 lz4CompressionThresholdBytes = 3;
  if (this->_internal_lz4compressionthresholdbytes() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_lz4compressionthresholdbytes());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SdkOption::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SdkOption::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SdkOption::GetClassData() const { return &_class_data_; }


void SdkOption::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SdkOption*>(&to_msg);
  auto& from = static_cast<const SdkOption&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.Im.Basic.SdkOption)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.netcheckservers_.MergeFrom(from._impl_.netcheckservers_);
  if (!from._internal_reportsecurity().empty()) {
    _this->_internal_set_reportsecurity(from._internal_reportsecurity());
  }
  if (from._internal_reportintervalseconds() != 0) {
    _this->_internal_set_reportintervalseconds(from._internal_reportintervalseconds());
  }
  if (from._internal_lz4compressionthresholdbytes() != 0) {
    _this->_internal_set_lz4compressionthresholdbytes(from._internal_lz4compressionthresholdbytes());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SdkOption::CopyFrom(const SdkOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.Im.Basic.SdkOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkOption::IsInitialized() const {
  return true;
}

void SdkOption::InternalSwap(SdkOption* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.netcheckservers_.InternalSwap(&other->_impl_.netcheckservers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reportsecurity_, lhs_arena,
      &other->_impl_.reportsecurity_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SdkOption, _impl_.lz4compressionthresholdbytes_)
      + sizeof(SdkOption::_impl_.lz4compressionthresholdbytes_)
      - PROTOBUF_FIELD_OFFSET(SdkOption, _impl_.reportintervalseconds_)>(
          reinterpret_cast<char*>(&_impl_.reportintervalseconds_),
          reinterpret_cast<char*>(&other->_impl_.reportintervalseconds_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SdkOption::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_SdkOption_2eproto_getter, &descriptor_table_SdkOption_2eproto_once,
      file_level_metadata_SdkOption_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Basic
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AcFunDanmu::Im::Basic::SdkOption*
Arena::CreateMaybeMessage< ::AcFunDanmu::Im::Basic::SdkOption >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::Im::Basic::SdkOption >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
