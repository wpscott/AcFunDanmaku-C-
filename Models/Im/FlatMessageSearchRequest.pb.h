// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FlatMessageSearchRequest.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_FlatMessageSearchRequest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_FlatMessageSearchRequest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ImcMessageType.pb.h"
#include "TimeFilter.pb.h"
#include "User.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_FlatMessageSearchRequest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_FlatMessageSearchRequest_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_FlatMessageSearchRequest_2eproto;
namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Search {
class FlatMessageSearchRequest;
struct FlatMessageSearchRequestDefaultTypeInternal;
extern FlatMessageSearchRequestDefaultTypeInternal _FlatMessageSearchRequest_default_instance_;
}  // namespace Search
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::Im::Cloud::Search::FlatMessageSearchRequest* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud::Search::FlatMessageSearchRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Search {

// ===================================================================

class FlatMessageSearchRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest) */ {
 public:
  inline FlatMessageSearchRequest() : FlatMessageSearchRequest(nullptr) {}
  ~FlatMessageSearchRequest() override;
  explicit PROTOBUF_CONSTEXPR FlatMessageSearchRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FlatMessageSearchRequest(const FlatMessageSearchRequest& from);
  FlatMessageSearchRequest(FlatMessageSearchRequest&& from) noexcept
    : FlatMessageSearchRequest() {
    *this = ::std::move(from);
  }

  inline FlatMessageSearchRequest& operator=(const FlatMessageSearchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlatMessageSearchRequest& operator=(FlatMessageSearchRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FlatMessageSearchRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FlatMessageSearchRequest* internal_default_instance() {
    return reinterpret_cast<const FlatMessageSearchRequest*>(
               &_FlatMessageSearchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FlatMessageSearchRequest& a, FlatMessageSearchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FlatMessageSearchRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlatMessageSearchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FlatMessageSearchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FlatMessageSearchRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FlatMessageSearchRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FlatMessageSearchRequest& from) {
    FlatMessageSearchRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlatMessageSearchRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest";
  }
  protected:
  explicit FlatMessageSearchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
    kFromFieldNumber = 2,
    kGroupIdFieldNumber = 4,
    kMessageTypeFieldNumber = 8,
    kOffsetFieldNumber = 6,
    kTimeFilterFieldNumber = 5,
    kMsgTypeFieldNumber = 3,
    kMsgCountFieldNumber = 7,
  };
  // repeated string query = 1;
  int query_size() const;
  private:
  int _internal_query_size() const;
  public:
  void clear_query();
  const std::string& query(int index) const;
  std::string* mutable_query(int index);
  void set_query(int index, const std::string& value);
  void set_query(int index, std::string&& value);
  void set_query(int index, const char* value);
  void set_query(int index, const char* value, size_t size);
  std::string* add_query();
  void add_query(const std::string& value);
  void add_query(std::string&& value);
  void add_query(const char* value);
  void add_query(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& query() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_query();
  private:
  const std::string& _internal_query(int index) const;
  std::string* _internal_add_query();
  public:

  // repeated .AcFunDanmu.Im.Basic.User from = 2;
  int from_size() const;
  private:
  int _internal_from_size() const;
  public:
  void clear_from();
  ::AcFunDanmu::Im::Basic::User* mutable_from(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic::User >*
      mutable_from();
  private:
  const ::AcFunDanmu::Im::Basic::User& _internal_from(int index) const;
  ::AcFunDanmu::Im::Basic::User* _internal_add_from();
  public:
  const ::AcFunDanmu::Im::Basic::User& from(int index) const;
  ::AcFunDanmu::Im::Basic::User* add_from();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic::User >&
      from() const;

  // repeated string groupId = 4;
  int groupid_size() const;
  private:
  int _internal_groupid_size() const;
  public:
  void clear_groupid();
  const std::string& groupid(int index) const;
  std::string* mutable_groupid(int index);
  void set_groupid(int index, const std::string& value);
  void set_groupid(int index, std::string&& value);
  void set_groupid(int index, const char* value);
  void set_groupid(int index, const char* value, size_t size);
  std::string* add_groupid();
  void add_groupid(const std::string& value);
  void add_groupid(std::string&& value);
  void add_groupid(const char* value);
  void add_groupid(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& groupid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_groupid();
  private:
  const std::string& _internal_groupid(int index) const;
  std::string* _internal_add_groupid();
  public:

  // repeated int32 messageType = 8;
  int messagetype_size() const;
  private:
  int _internal_messagetype_size() const;
  public:
  void clear_messagetype();
  private:
  int32_t _internal_messagetype(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_messagetype() const;
  void _internal_add_messagetype(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_messagetype();
  public:
  int32_t messagetype(int index) const;
  void set_messagetype(int index, int32_t value);
  void add_messagetype(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      messagetype() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_messagetype();

  // string offset = 6;
  void clear_offset();
  const std::string& offset() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_offset(ArgT0&& arg0, ArgT... args);
  std::string* mutable_offset();
  PROTOBUF_NODISCARD std::string* release_offset();
  void set_allocated_offset(std::string* offset);
  private:
  const std::string& _internal_offset() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_offset(const std::string& value);
  std::string* _internal_mutable_offset();
  public:

  // .AcFunDanmu.Im.Cloud.Search.TimeFilter timeFilter = 5;
  bool has_timefilter() const;
  private:
  bool _internal_has_timefilter() const;
  public:
  void clear_timefilter();
  const ::AcFunDanmu::Im::Cloud::Search::TimeFilter& timefilter() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Cloud::Search::TimeFilter* release_timefilter();
  ::AcFunDanmu::Im::Cloud::Search::TimeFilter* mutable_timefilter();
  void set_allocated_timefilter(::AcFunDanmu::Im::Cloud::Search::TimeFilter* timefilter);
  private:
  const ::AcFunDanmu::Im::Cloud::Search::TimeFilter& _internal_timefilter() const;
  ::AcFunDanmu::Im::Cloud::Search::TimeFilter* _internal_mutable_timefilter();
  public:
  void unsafe_arena_set_allocated_timefilter(
      ::AcFunDanmu::Im::Cloud::Search::TimeFilter* timefilter);
  ::AcFunDanmu::Im::Cloud::Search::TimeFilter* unsafe_arena_release_timefilter();

  // .AcFunDanmu.Im.Cloud.Message.ImcMessageType msgType = 3;
  void clear_msgtype();
  ::AcFunDanmu::Im::Cloud::Message::ImcMessageType msgtype() const;
  void set_msgtype(::AcFunDanmu::Im::Cloud::Message::ImcMessageType value);
  private:
  ::AcFunDanmu::Im::Cloud::Message::ImcMessageType _internal_msgtype() const;
  void _internal_set_msgtype(::AcFunDanmu::Im::Cloud::Message::ImcMessageType value);
  public:

  // int32 msgCount = 7;
  void clear_msgcount();
  int32_t msgcount() const;
  void set_msgcount(int32_t value);
  private:
  int32_t _internal_msgcount() const;
  void _internal_set_msgcount(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> query_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic::User > from_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> groupid_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > messagetype_;
    mutable std::atomic<int> _messagetype_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr offset_;
    ::AcFunDanmu::Im::Cloud::Search::TimeFilter* timefilter_;
    int msgtype_;
    int32_t msgcount_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FlatMessageSearchRequest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FlatMessageSearchRequest

// repeated string query = 1;
inline int FlatMessageSearchRequest::_internal_query_size() const {
  return _impl_.query_.size();
}
inline int FlatMessageSearchRequest::query_size() const {
  return _internal_query_size();
}
inline void FlatMessageSearchRequest::clear_query() {
  _impl_.query_.Clear();
}
inline std::string* FlatMessageSearchRequest::add_query() {
  std::string* _s = _internal_add_query();
  // @@protoc_insertion_point(field_add_mutable:AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest.query)
  return _s;
}
inline const std::string& FlatMessageSearchRequest::_internal_query(int index) const {
  return _impl_.query_.Get(index);
}
inline const std::string& FlatMessageSearchRequest::query(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest.query)
  return _internal_query(index);
}
inline std::string* FlatMessageSearchRequest::mutable_query(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest.query)
  return _impl_.query_.Mutable(index);
}
inline void FlatMessageSearchRequest::set_query(int index, const std::string& value) {
  _impl_.query_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest.query)
}
inline void FlatMessageSearchRequest::set_query(int index, std::string&& value) {
  _impl_.query_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest.query)
}
inline void FlatMessageSearchRequest::set_query(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.query_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest.query)
}
inline void FlatMessageSearchRequest::set_query(int index, const char* value, size_t size) {
  _impl_.query_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest.query)
}
inline std::string* FlatMessageSearchRequest::_internal_add_query() {
  return _impl_.query_.Add();
}
inline void FlatMessageSearchRequest::add_query(const std::string& value) {
  _impl_.query_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest.query)
}
inline void FlatMessageSearchRequest::add_query(std::string&& value) {
  _impl_.query_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest.query)
}
inline void FlatMessageSearchRequest::add_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.query_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest.query)
}
inline void FlatMessageSearchRequest::add_query(const char* value, size_t size) {
  _impl_.query_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest.query)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FlatMessageSearchRequest::query() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest.query)
  return _impl_.query_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FlatMessageSearchRequest::mutable_query() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest.query)
  return &_impl_.query_;
}

// repeated .AcFunDanmu.Im.Basic.User from = 2;
inline int FlatMessageSearchRequest::_internal_from_size() const {
  return _impl_.from_.size();
}
inline int FlatMessageSearchRequest::from_size() const {
  return _internal_from_size();
}
inline ::AcFunDanmu::Im::Basic::User* FlatMessageSearchRequest::mutable_from(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest.from)
  return _impl_.from_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic::User >*
FlatMessageSearchRequest::mutable_from() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest.from)
  return &_impl_.from_;
}
inline const ::AcFunDanmu::Im::Basic::User& FlatMessageSearchRequest::_internal_from(int index) const {
  return _impl_.from_.Get(index);
}
inline const ::AcFunDanmu::Im::Basic::User& FlatMessageSearchRequest::from(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest.from)
  return _internal_from(index);
}
inline ::AcFunDanmu::Im::Basic::User* FlatMessageSearchRequest::_internal_add_from() {
  return _impl_.from_.Add();
}
inline ::AcFunDanmu::Im::Basic::User* FlatMessageSearchRequest::add_from() {
  ::AcFunDanmu::Im::Basic::User* _add = _internal_add_from();
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest.from)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic::User >&
FlatMessageSearchRequest::from() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest.from)
  return _impl_.from_;
}

// .AcFunDanmu.Im.Cloud.Message.ImcMessageType msgType = 3;
inline void FlatMessageSearchRequest::clear_msgtype() {
  _impl_.msgtype_ = 0;
}
inline ::AcFunDanmu::Im::Cloud::Message::ImcMessageType FlatMessageSearchRequest::_internal_msgtype() const {
  return static_cast< ::AcFunDanmu::Im::Cloud::Message::ImcMessageType >(_impl_.msgtype_);
}
inline ::AcFunDanmu::Im::Cloud::Message::ImcMessageType FlatMessageSearchRequest::msgtype() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest.msgType)
  return _internal_msgtype();
}
inline void FlatMessageSearchRequest::_internal_set_msgtype(::AcFunDanmu::Im::Cloud::Message::ImcMessageType value) {
  
  _impl_.msgtype_ = value;
}
inline void FlatMessageSearchRequest::set_msgtype(::AcFunDanmu::Im::Cloud::Message::ImcMessageType value) {
  _internal_set_msgtype(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest.msgType)
}

// repeated string groupId = 4;
inline int FlatMessageSearchRequest::_internal_groupid_size() const {
  return _impl_.groupid_.size();
}
inline int FlatMessageSearchRequest::groupid_size() const {
  return _internal_groupid_size();
}
inline void FlatMessageSearchRequest::clear_groupid() {
  _impl_.groupid_.Clear();
}
inline std::string* FlatMessageSearchRequest::add_groupid() {
  std::string* _s = _internal_add_groupid();
  // @@protoc_insertion_point(field_add_mutable:AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest.groupId)
  return _s;
}
inline const std::string& FlatMessageSearchRequest::_internal_groupid(int index) const {
  return _impl_.groupid_.Get(index);
}
inline const std::string& FlatMessageSearchRequest::groupid(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest.groupId)
  return _internal_groupid(index);
}
inline std::string* FlatMessageSearchRequest::mutable_groupid(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest.groupId)
  return _impl_.groupid_.Mutable(index);
}
inline void FlatMessageSearchRequest::set_groupid(int index, const std::string& value) {
  _impl_.groupid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest.groupId)
}
inline void FlatMessageSearchRequest::set_groupid(int index, std::string&& value) {
  _impl_.groupid_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest.groupId)
}
inline void FlatMessageSearchRequest::set_groupid(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.groupid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest.groupId)
}
inline void FlatMessageSearchRequest::set_groupid(int index, const char* value, size_t size) {
  _impl_.groupid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest.groupId)
}
inline std::string* FlatMessageSearchRequest::_internal_add_groupid() {
  return _impl_.groupid_.Add();
}
inline void FlatMessageSearchRequest::add_groupid(const std::string& value) {
  _impl_.groupid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest.groupId)
}
inline void FlatMessageSearchRequest::add_groupid(std::string&& value) {
  _impl_.groupid_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest.groupId)
}
inline void FlatMessageSearchRequest::add_groupid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.groupid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest.groupId)
}
inline void FlatMessageSearchRequest::add_groupid(const char* value, size_t size) {
  _impl_.groupid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest.groupId)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FlatMessageSearchRequest::groupid() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest.groupId)
  return _impl_.groupid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FlatMessageSearchRequest::mutable_groupid() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest.groupId)
  return &_impl_.groupid_;
}

// .AcFunDanmu.Im.Cloud.Search.TimeFilter timeFilter = 5;
inline bool FlatMessageSearchRequest::_internal_has_timefilter() const {
  return this != internal_default_instance() && _impl_.timefilter_ != nullptr;
}
inline bool FlatMessageSearchRequest::has_timefilter() const {
  return _internal_has_timefilter();
}
inline const ::AcFunDanmu::Im::Cloud::Search::TimeFilter& FlatMessageSearchRequest::_internal_timefilter() const {
  const ::AcFunDanmu::Im::Cloud::Search::TimeFilter* p = _impl_.timefilter_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Cloud::Search::TimeFilter&>(
      ::AcFunDanmu::Im::Cloud::Search::_TimeFilter_default_instance_);
}
inline const ::AcFunDanmu::Im::Cloud::Search::TimeFilter& FlatMessageSearchRequest::timefilter() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest.timeFilter)
  return _internal_timefilter();
}
inline void FlatMessageSearchRequest::unsafe_arena_set_allocated_timefilter(
    ::AcFunDanmu::Im::Cloud::Search::TimeFilter* timefilter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timefilter_);
  }
  _impl_.timefilter_ = timefilter;
  if (timefilter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest.timeFilter)
}
inline ::AcFunDanmu::Im::Cloud::Search::TimeFilter* FlatMessageSearchRequest::release_timefilter() {
  
  ::AcFunDanmu::Im::Cloud::Search::TimeFilter* temp = _impl_.timefilter_;
  _impl_.timefilter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AcFunDanmu::Im::Cloud::Search::TimeFilter* FlatMessageSearchRequest::unsafe_arena_release_timefilter() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest.timeFilter)
  
  ::AcFunDanmu::Im::Cloud::Search::TimeFilter* temp = _impl_.timefilter_;
  _impl_.timefilter_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Cloud::Search::TimeFilter* FlatMessageSearchRequest::_internal_mutable_timefilter() {
  
  if (_impl_.timefilter_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Cloud::Search::TimeFilter>(GetArenaForAllocation());
    _impl_.timefilter_ = p;
  }
  return _impl_.timefilter_;
}
inline ::AcFunDanmu::Im::Cloud::Search::TimeFilter* FlatMessageSearchRequest::mutable_timefilter() {
  ::AcFunDanmu::Im::Cloud::Search::TimeFilter* _msg = _internal_mutable_timefilter();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest.timeFilter)
  return _msg;
}
inline void FlatMessageSearchRequest::set_allocated_timefilter(::AcFunDanmu::Im::Cloud::Search::TimeFilter* timefilter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timefilter_);
  }
  if (timefilter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timefilter));
    if (message_arena != submessage_arena) {
      timefilter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timefilter, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.timefilter_ = timefilter;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest.timeFilter)
}

// string offset = 6;
inline void FlatMessageSearchRequest::clear_offset() {
  _impl_.offset_.ClearToEmpty();
}
inline const std::string& FlatMessageSearchRequest::offset() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest.offset)
  return _internal_offset();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FlatMessageSearchRequest::set_offset(ArgT0&& arg0, ArgT... args) {
 
 _impl_.offset_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest.offset)
}
inline std::string* FlatMessageSearchRequest::mutable_offset() {
  std::string* _s = _internal_mutable_offset();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest.offset)
  return _s;
}
inline const std::string& FlatMessageSearchRequest::_internal_offset() const {
  return _impl_.offset_.Get();
}
inline void FlatMessageSearchRequest::_internal_set_offset(const std::string& value) {
  
  _impl_.offset_.Set(value, GetArenaForAllocation());
}
inline std::string* FlatMessageSearchRequest::_internal_mutable_offset() {
  
  return _impl_.offset_.Mutable(GetArenaForAllocation());
}
inline std::string* FlatMessageSearchRequest::release_offset() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest.offset)
  return _impl_.offset_.Release();
}
inline void FlatMessageSearchRequest::set_allocated_offset(std::string* offset) {
  if (offset != nullptr) {
    
  } else {
    
  }
  _impl_.offset_.SetAllocated(offset, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.offset_.IsDefault()) {
    _impl_.offset_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest.offset)
}

// int32 msgCount = 7;
inline void FlatMessageSearchRequest::clear_msgcount() {
  _impl_.msgcount_ = 0;
}
inline int32_t FlatMessageSearchRequest::_internal_msgcount() const {
  return _impl_.msgcount_;
}
inline int32_t FlatMessageSearchRequest::msgcount() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest.msgCount)
  return _internal_msgcount();
}
inline void FlatMessageSearchRequest::_internal_set_msgcount(int32_t value) {
  
  _impl_.msgcount_ = value;
}
inline void FlatMessageSearchRequest::set_msgcount(int32_t value) {
  _internal_set_msgcount(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest.msgCount)
}

// repeated int32 messageType = 8;
inline int FlatMessageSearchRequest::_internal_messagetype_size() const {
  return _impl_.messagetype_.size();
}
inline int FlatMessageSearchRequest::messagetype_size() const {
  return _internal_messagetype_size();
}
inline void FlatMessageSearchRequest::clear_messagetype() {
  _impl_.messagetype_.Clear();
}
inline int32_t FlatMessageSearchRequest::_internal_messagetype(int index) const {
  return _impl_.messagetype_.Get(index);
}
inline int32_t FlatMessageSearchRequest::messagetype(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest.messageType)
  return _internal_messagetype(index);
}
inline void FlatMessageSearchRequest::set_messagetype(int index, int32_t value) {
  _impl_.messagetype_.Set(index, value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest.messageType)
}
inline void FlatMessageSearchRequest::_internal_add_messagetype(int32_t value) {
  _impl_.messagetype_.Add(value);
}
inline void FlatMessageSearchRequest::add_messagetype(int32_t value) {
  _internal_add_messagetype(value);
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest.messageType)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
FlatMessageSearchRequest::_internal_messagetype() const {
  return _impl_.messagetype_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
FlatMessageSearchRequest::messagetype() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest.messageType)
  return _internal_messagetype();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
FlatMessageSearchRequest::_internal_mutable_messagetype() {
  return &_impl_.messagetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
FlatMessageSearchRequest::mutable_messagetype() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Cloud.Search.FlatMessageSearchRequest.messageType)
  return _internal_mutable_messagetype();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Search
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_FlatMessageSearchRequest_2eproto
