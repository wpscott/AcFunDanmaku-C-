// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientConfig.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ClientConfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ClientConfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ClientStatisticalDataConfig.pb.h"
#include "NetworkQualityDetectionConfig.pb.h"
#include "SubBizAggregationConfig.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ClientConfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ClientConfig_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ClientConfig_2eproto;
namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Config {
class ClientConfig;
struct ClientConfigDefaultTypeInternal;
extern ClientConfigDefaultTypeInternal _ClientConfig_default_instance_;
}  // namespace Config
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::Im::Cloud::Config::ClientConfig* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud::Config::ClientConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {
namespace Im {
namespace Cloud {
namespace Config {

// ===================================================================

class ClientConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Config.ClientConfig) */ {
 public:
  inline ClientConfig() : ClientConfig(nullptr) {}
  ~ClientConfig() override;
  explicit PROTOBUF_CONSTEXPR ClientConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientConfig(const ClientConfig& from);
  ClientConfig(ClientConfig&& from) noexcept
    : ClientConfig() {
    *this = ::std::move(from);
  }

  inline ClientConfig& operator=(const ClientConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientConfig& operator=(ClientConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientConfig* internal_default_instance() {
    return reinterpret_cast<const ClientConfig*>(
               &_ClientConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ClientConfig& a, ClientConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClientConfig& from) {
    ClientConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Config.ClientConfig";
  }
  protected:
  explicit ClientConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClickMessageTypeFieldNumber = 22,
    kResourceUploadingDomainFieldNumber = 6,
    kKtpUploadingDomainFieldNumber = 8,
    kZtImApiDomainFieldNumber = 19,
    kNetworkQualityDetectionConfigFieldNumber = 3,
    kClientStatisticalDataConfigFieldNumber = 11,
    kSubBizAggregationConfigFieldNumber = 14,
    kFetchUserStatusIntervalFieldNumber = 1,
    kChannelUserHeartbeatIntervalFieldNumber = 2,
    kInputtingTipDisplayIntervalFieldNumber = 4,
    kBatchSendMessageMaxCountFieldNumber = 5,
    kKtpFileLenThresholdFieldNumber = 7,
    kClientSyncMinIntervalMsFieldNumber = 9,
    kDownloadFileMaxLenPerRequestFieldNumber = 10,
    kMaxMessageBytesLengthFieldNumber = 12,
    kSessionDeletionNotOverAllDeviceFieldNumber = 13,
    kDisableSessionSyncWhenAppSwitchToForegroundFieldNumber = 16,
    kCountVisibleMessageThresholdFieldNumber = 15,
    kMaxMessagesPreloadAfterSessionSyncFieldNumber = 17,
    kMaxSessionsNeedPreloadMessageAfterSessionSyncFieldNumber = 18,
    kVoiceCallTimeoutIntervalFieldNumber = 20,
    kVoiceCallHeartbeatIntervalFieldNumber = 21,
    kAutoRetryMaxIntervalFieldNumber = 23,
    kAutoRetryMaxTimesFieldNumber = 24,
  };
  // repeated int32 clickMessageType = 22;
  int clickmessagetype_size() const;
  private:
  int _internal_clickmessagetype_size() const;
  public:
  void clear_clickmessagetype();
  private:
  int32_t _internal_clickmessagetype(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_clickmessagetype() const;
  void _internal_add_clickmessagetype(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_clickmessagetype();
  public:
  int32_t clickmessagetype(int index) const;
  void set_clickmessagetype(int index, int32_t value);
  void add_clickmessagetype(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      clickmessagetype() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_clickmessagetype();

  // string resourceUploadingDomain = 6;
  void clear_resourceuploadingdomain();
  const std::string& resourceuploadingdomain() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_resourceuploadingdomain(ArgT0&& arg0, ArgT... args);
  std::string* mutable_resourceuploadingdomain();
  PROTOBUF_NODISCARD std::string* release_resourceuploadingdomain();
  void set_allocated_resourceuploadingdomain(std::string* resourceuploadingdomain);
  private:
  const std::string& _internal_resourceuploadingdomain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resourceuploadingdomain(const std::string& value);
  std::string* _internal_mutable_resourceuploadingdomain();
  public:

  // string ktpUploadingDomain = 8;
  void clear_ktpuploadingdomain();
  const std::string& ktpuploadingdomain() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ktpuploadingdomain(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ktpuploadingdomain();
  PROTOBUF_NODISCARD std::string* release_ktpuploadingdomain();
  void set_allocated_ktpuploadingdomain(std::string* ktpuploadingdomain);
  private:
  const std::string& _internal_ktpuploadingdomain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ktpuploadingdomain(const std::string& value);
  std::string* _internal_mutable_ktpuploadingdomain();
  public:

  // string ztImApiDomain = 19;
  void clear_ztimapidomain();
  const std::string& ztimapidomain() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ztimapidomain(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ztimapidomain();
  PROTOBUF_NODISCARD std::string* release_ztimapidomain();
  void set_allocated_ztimapidomain(std::string* ztimapidomain);
  private:
  const std::string& _internal_ztimapidomain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ztimapidomain(const std::string& value);
  std::string* _internal_mutable_ztimapidomain();
  public:

  // .AcFunDanmu.Im.Cloud.Config.NetworkQualityDetectionConfig networkQualityDetectionConfig = 3;
  bool has_networkqualitydetectionconfig() const;
  private:
  bool _internal_has_networkqualitydetectionconfig() const;
  public:
  void clear_networkqualitydetectionconfig();
  const ::AcFunDanmu::Im::Cloud::Config::NetworkQualityDetectionConfig& networkqualitydetectionconfig() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Cloud::Config::NetworkQualityDetectionConfig* release_networkqualitydetectionconfig();
  ::AcFunDanmu::Im::Cloud::Config::NetworkQualityDetectionConfig* mutable_networkqualitydetectionconfig();
  void set_allocated_networkqualitydetectionconfig(::AcFunDanmu::Im::Cloud::Config::NetworkQualityDetectionConfig* networkqualitydetectionconfig);
  private:
  const ::AcFunDanmu::Im::Cloud::Config::NetworkQualityDetectionConfig& _internal_networkqualitydetectionconfig() const;
  ::AcFunDanmu::Im::Cloud::Config::NetworkQualityDetectionConfig* _internal_mutable_networkqualitydetectionconfig();
  public:
  void unsafe_arena_set_allocated_networkqualitydetectionconfig(
      ::AcFunDanmu::Im::Cloud::Config::NetworkQualityDetectionConfig* networkqualitydetectionconfig);
  ::AcFunDanmu::Im::Cloud::Config::NetworkQualityDetectionConfig* unsafe_arena_release_networkqualitydetectionconfig();

  // .AcFunDanmu.Im.Cloud.Config.ClientStatisticalDataConfig clientStatisticalDataConfig = 11;
  bool has_clientstatisticaldataconfig() const;
  private:
  bool _internal_has_clientstatisticaldataconfig() const;
  public:
  void clear_clientstatisticaldataconfig();
  const ::AcFunDanmu::Im::Cloud::Config::ClientStatisticalDataConfig& clientstatisticaldataconfig() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Cloud::Config::ClientStatisticalDataConfig* release_clientstatisticaldataconfig();
  ::AcFunDanmu::Im::Cloud::Config::ClientStatisticalDataConfig* mutable_clientstatisticaldataconfig();
  void set_allocated_clientstatisticaldataconfig(::AcFunDanmu::Im::Cloud::Config::ClientStatisticalDataConfig* clientstatisticaldataconfig);
  private:
  const ::AcFunDanmu::Im::Cloud::Config::ClientStatisticalDataConfig& _internal_clientstatisticaldataconfig() const;
  ::AcFunDanmu::Im::Cloud::Config::ClientStatisticalDataConfig* _internal_mutable_clientstatisticaldataconfig();
  public:
  void unsafe_arena_set_allocated_clientstatisticaldataconfig(
      ::AcFunDanmu::Im::Cloud::Config::ClientStatisticalDataConfig* clientstatisticaldataconfig);
  ::AcFunDanmu::Im::Cloud::Config::ClientStatisticalDataConfig* unsafe_arena_release_clientstatisticaldataconfig();

  // .AcFunDanmu.Im.Cloud.Config.SubBizAggregationConfig subBizAggregationConfig = 14;
  bool has_subbizaggregationconfig() const;
  private:
  bool _internal_has_subbizaggregationconfig() const;
  public:
  void clear_subbizaggregationconfig();
  const ::AcFunDanmu::Im::Cloud::Config::SubBizAggregationConfig& subbizaggregationconfig() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::Im::Cloud::Config::SubBizAggregationConfig* release_subbizaggregationconfig();
  ::AcFunDanmu::Im::Cloud::Config::SubBizAggregationConfig* mutable_subbizaggregationconfig();
  void set_allocated_subbizaggregationconfig(::AcFunDanmu::Im::Cloud::Config::SubBizAggregationConfig* subbizaggregationconfig);
  private:
  const ::AcFunDanmu::Im::Cloud::Config::SubBizAggregationConfig& _internal_subbizaggregationconfig() const;
  ::AcFunDanmu::Im::Cloud::Config::SubBizAggregationConfig* _internal_mutable_subbizaggregationconfig();
  public:
  void unsafe_arena_set_allocated_subbizaggregationconfig(
      ::AcFunDanmu::Im::Cloud::Config::SubBizAggregationConfig* subbizaggregationconfig);
  ::AcFunDanmu::Im::Cloud::Config::SubBizAggregationConfig* unsafe_arena_release_subbizaggregationconfig();

  // int32 fetchUserStatusInterval = 1;
  void clear_fetchuserstatusinterval();
  int32_t fetchuserstatusinterval() const;
  void set_fetchuserstatusinterval(int32_t value);
  private:
  int32_t _internal_fetchuserstatusinterval() const;
  void _internal_set_fetchuserstatusinterval(int32_t value);
  public:

  // int32 channelUserHeartbeatInterval = 2;
  void clear_channeluserheartbeatinterval();
  int32_t channeluserheartbeatinterval() const;
  void set_channeluserheartbeatinterval(int32_t value);
  private:
  int32_t _internal_channeluserheartbeatinterval() const;
  void _internal_set_channeluserheartbeatinterval(int32_t value);
  public:

  // int32 inputtingTipDisplayInterval = 4;
  void clear_inputtingtipdisplayinterval();
  int32_t inputtingtipdisplayinterval() const;
  void set_inputtingtipdisplayinterval(int32_t value);
  private:
  int32_t _internal_inputtingtipdisplayinterval() const;
  void _internal_set_inputtingtipdisplayinterval(int32_t value);
  public:

  // int32 batchSendMessageMaxCount = 5;
  void clear_batchsendmessagemaxcount();
  int32_t batchsendmessagemaxcount() const;
  void set_batchsendmessagemaxcount(int32_t value);
  private:
  int32_t _internal_batchsendmessagemaxcount() const;
  void _internal_set_batchsendmessagemaxcount(int32_t value);
  public:

  // int32 ktpFileLenThreshold = 7;
  void clear_ktpfilelenthreshold();
  int32_t ktpfilelenthreshold() const;
  void set_ktpfilelenthreshold(int32_t value);
  private:
  int32_t _internal_ktpfilelenthreshold() const;
  void _internal_set_ktpfilelenthreshold(int32_t value);
  public:

  // int32 clientSyncMinIntervalMs = 9;
  void clear_clientsyncminintervalms();
  int32_t clientsyncminintervalms() const;
  void set_clientsyncminintervalms(int32_t value);
  private:
  int32_t _internal_clientsyncminintervalms() const;
  void _internal_set_clientsyncminintervalms(int32_t value);
  public:

  // int32 downloadFileMaxLenPerRequest = 10;
  void clear_downloadfilemaxlenperrequest();
  int32_t downloadfilemaxlenperrequest() const;
  void set_downloadfilemaxlenperrequest(int32_t value);
  private:
  int32_t _internal_downloadfilemaxlenperrequest() const;
  void _internal_set_downloadfilemaxlenperrequest(int32_t value);
  public:

  // int32 maxMessageBytesLength = 12;
  void clear_maxmessagebyteslength();
  int32_t maxmessagebyteslength() const;
  void set_maxmessagebyteslength(int32_t value);
  private:
  int32_t _internal_maxmessagebyteslength() const;
  void _internal_set_maxmessagebyteslength(int32_t value);
  public:

  // bool sessionDeletionNotOverAllDevice = 13;
  void clear_sessiondeletionnotoveralldevice();
  bool sessiondeletionnotoveralldevice() const;
  void set_sessiondeletionnotoveralldevice(bool value);
  private:
  bool _internal_sessiondeletionnotoveralldevice() const;
  void _internal_set_sessiondeletionnotoveralldevice(bool value);
  public:

  // bool disableSessionSyncWhenAppSwitchToForeground = 16;
  void clear_disablesessionsyncwhenappswitchtoforeground();
  bool disablesessionsyncwhenappswitchtoforeground() const;
  void set_disablesessionsyncwhenappswitchtoforeground(bool value);
  private:
  bool _internal_disablesessionsyncwhenappswitchtoforeground() const;
  void _internal_set_disablesessionsyncwhenappswitchtoforeground(bool value);
  public:

  // int32 countVisibleMessageThreshold = 15;
  void clear_countvisiblemessagethreshold();
  int32_t countvisiblemessagethreshold() const;
  void set_countvisiblemessagethreshold(int32_t value);
  private:
  int32_t _internal_countvisiblemessagethreshold() const;
  void _internal_set_countvisiblemessagethreshold(int32_t value);
  public:

  // int32 maxMessagesPreloadAfterSessionSync = 17;
  void clear_maxmessagespreloadaftersessionsync();
  int32_t maxmessagespreloadaftersessionsync() const;
  void set_maxmessagespreloadaftersessionsync(int32_t value);
  private:
  int32_t _internal_maxmessagespreloadaftersessionsync() const;
  void _internal_set_maxmessagespreloadaftersessionsync(int32_t value);
  public:

  // int32 maxSessionsNeedPreloadMessageAfterSessionSync = 18;
  void clear_maxsessionsneedpreloadmessageaftersessionsync();
  int32_t maxsessionsneedpreloadmessageaftersessionsync() const;
  void set_maxsessionsneedpreloadmessageaftersessionsync(int32_t value);
  private:
  int32_t _internal_maxsessionsneedpreloadmessageaftersessionsync() const;
  void _internal_set_maxsessionsneedpreloadmessageaftersessionsync(int32_t value);
  public:

  // int32 voiceCallTimeoutInterval = 20;
  void clear_voicecalltimeoutinterval();
  int32_t voicecalltimeoutinterval() const;
  void set_voicecalltimeoutinterval(int32_t value);
  private:
  int32_t _internal_voicecalltimeoutinterval() const;
  void _internal_set_voicecalltimeoutinterval(int32_t value);
  public:

  // int32 voiceCallHeartbeatInterval = 21;
  void clear_voicecallheartbeatinterval();
  int32_t voicecallheartbeatinterval() const;
  void set_voicecallheartbeatinterval(int32_t value);
  private:
  int32_t _internal_voicecallheartbeatinterval() const;
  void _internal_set_voicecallheartbeatinterval(int32_t value);
  public:

  // int32 autoRetryMaxInterval = 23;
  void clear_autoretrymaxinterval();
  int32_t autoretrymaxinterval() const;
  void set_autoretrymaxinterval(int32_t value);
  private:
  int32_t _internal_autoretrymaxinterval() const;
  void _internal_set_autoretrymaxinterval(int32_t value);
  public:

  // int32 autoRetryMaxTimes = 24;
  void clear_autoretrymaxtimes();
  int32_t autoretrymaxtimes() const;
  void set_autoretrymaxtimes(int32_t value);
  private:
  int32_t _internal_autoretrymaxtimes() const;
  void _internal_set_autoretrymaxtimes(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Config.ClientConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > clickmessagetype_;
    mutable std::atomic<int> _clickmessagetype_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resourceuploadingdomain_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ktpuploadingdomain_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ztimapidomain_;
    ::AcFunDanmu::Im::Cloud::Config::NetworkQualityDetectionConfig* networkqualitydetectionconfig_;
    ::AcFunDanmu::Im::Cloud::Config::ClientStatisticalDataConfig* clientstatisticaldataconfig_;
    ::AcFunDanmu::Im::Cloud::Config::SubBizAggregationConfig* subbizaggregationconfig_;
    int32_t fetchuserstatusinterval_;
    int32_t channeluserheartbeatinterval_;
    int32_t inputtingtipdisplayinterval_;
    int32_t batchsendmessagemaxcount_;
    int32_t ktpfilelenthreshold_;
    int32_t clientsyncminintervalms_;
    int32_t downloadfilemaxlenperrequest_;
    int32_t maxmessagebyteslength_;
    bool sessiondeletionnotoveralldevice_;
    bool disablesessionsyncwhenappswitchtoforeground_;
    int32_t countvisiblemessagethreshold_;
    int32_t maxmessagespreloadaftersessionsync_;
    int32_t maxsessionsneedpreloadmessageaftersessionsync_;
    int32_t voicecalltimeoutinterval_;
    int32_t voicecallheartbeatinterval_;
    int32_t autoretrymaxinterval_;
    int32_t autoretrymaxtimes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ClientConfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClientConfig

// int32 fetchUserStatusInterval = 1;
inline void ClientConfig::clear_fetchuserstatusinterval() {
  _impl_.fetchuserstatusinterval_ = 0;
}
inline int32_t ClientConfig::_internal_fetchuserstatusinterval() const {
  return _impl_.fetchuserstatusinterval_;
}
inline int32_t ClientConfig::fetchuserstatusinterval() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Config.ClientConfig.fetchUserStatusInterval)
  return _internal_fetchuserstatusinterval();
}
inline void ClientConfig::_internal_set_fetchuserstatusinterval(int32_t value) {
  
  _impl_.fetchuserstatusinterval_ = value;
}
inline void ClientConfig::set_fetchuserstatusinterval(int32_t value) {
  _internal_set_fetchuserstatusinterval(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Config.ClientConfig.fetchUserStatusInterval)
}

// int32 channelUserHeartbeatInterval = 2;
inline void ClientConfig::clear_channeluserheartbeatinterval() {
  _impl_.channeluserheartbeatinterval_ = 0;
}
inline int32_t ClientConfig::_internal_channeluserheartbeatinterval() const {
  return _impl_.channeluserheartbeatinterval_;
}
inline int32_t ClientConfig::channeluserheartbeatinterval() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Config.ClientConfig.channelUserHeartbeatInterval)
  return _internal_channeluserheartbeatinterval();
}
inline void ClientConfig::_internal_set_channeluserheartbeatinterval(int32_t value) {
  
  _impl_.channeluserheartbeatinterval_ = value;
}
inline void ClientConfig::set_channeluserheartbeatinterval(int32_t value) {
  _internal_set_channeluserheartbeatinterval(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Config.ClientConfig.channelUserHeartbeatInterval)
}

// .AcFunDanmu.Im.Cloud.Config.NetworkQualityDetectionConfig networkQualityDetectionConfig = 3;
inline bool ClientConfig::_internal_has_networkqualitydetectionconfig() const {
  return this != internal_default_instance() && _impl_.networkqualitydetectionconfig_ != nullptr;
}
inline bool ClientConfig::has_networkqualitydetectionconfig() const {
  return _internal_has_networkqualitydetectionconfig();
}
inline const ::AcFunDanmu::Im::Cloud::Config::NetworkQualityDetectionConfig& ClientConfig::_internal_networkqualitydetectionconfig() const {
  const ::AcFunDanmu::Im::Cloud::Config::NetworkQualityDetectionConfig* p = _impl_.networkqualitydetectionconfig_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Cloud::Config::NetworkQualityDetectionConfig&>(
      ::AcFunDanmu::Im::Cloud::Config::_NetworkQualityDetectionConfig_default_instance_);
}
inline const ::AcFunDanmu::Im::Cloud::Config::NetworkQualityDetectionConfig& ClientConfig::networkqualitydetectionconfig() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Config.ClientConfig.networkQualityDetectionConfig)
  return _internal_networkqualitydetectionconfig();
}
inline void ClientConfig::unsafe_arena_set_allocated_networkqualitydetectionconfig(
    ::AcFunDanmu::Im::Cloud::Config::NetworkQualityDetectionConfig* networkqualitydetectionconfig) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.networkqualitydetectionconfig_);
  }
  _impl_.networkqualitydetectionconfig_ = networkqualitydetectionconfig;
  if (networkqualitydetectionconfig) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Config.ClientConfig.networkQualityDetectionConfig)
}
inline ::AcFunDanmu::Im::Cloud::Config::NetworkQualityDetectionConfig* ClientConfig::release_networkqualitydetectionconfig() {
  
  ::AcFunDanmu::Im::Cloud::Config::NetworkQualityDetectionConfig* temp = _impl_.networkqualitydetectionconfig_;
  _impl_.networkqualitydetectionconfig_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AcFunDanmu::Im::Cloud::Config::NetworkQualityDetectionConfig* ClientConfig::unsafe_arena_release_networkqualitydetectionconfig() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Config.ClientConfig.networkQualityDetectionConfig)
  
  ::AcFunDanmu::Im::Cloud::Config::NetworkQualityDetectionConfig* temp = _impl_.networkqualitydetectionconfig_;
  _impl_.networkqualitydetectionconfig_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Cloud::Config::NetworkQualityDetectionConfig* ClientConfig::_internal_mutable_networkqualitydetectionconfig() {
  
  if (_impl_.networkqualitydetectionconfig_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Cloud::Config::NetworkQualityDetectionConfig>(GetArenaForAllocation());
    _impl_.networkqualitydetectionconfig_ = p;
  }
  return _impl_.networkqualitydetectionconfig_;
}
inline ::AcFunDanmu::Im::Cloud::Config::NetworkQualityDetectionConfig* ClientConfig::mutable_networkqualitydetectionconfig() {
  ::AcFunDanmu::Im::Cloud::Config::NetworkQualityDetectionConfig* _msg = _internal_mutable_networkqualitydetectionconfig();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Config.ClientConfig.networkQualityDetectionConfig)
  return _msg;
}
inline void ClientConfig::set_allocated_networkqualitydetectionconfig(::AcFunDanmu::Im::Cloud::Config::NetworkQualityDetectionConfig* networkqualitydetectionconfig) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.networkqualitydetectionconfig_);
  }
  if (networkqualitydetectionconfig) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(networkqualitydetectionconfig));
    if (message_arena != submessage_arena) {
      networkqualitydetectionconfig = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, networkqualitydetectionconfig, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.networkqualitydetectionconfig_ = networkqualitydetectionconfig;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Config.ClientConfig.networkQualityDetectionConfig)
}

// int32 inputtingTipDisplayInterval = 4;
inline void ClientConfig::clear_inputtingtipdisplayinterval() {
  _impl_.inputtingtipdisplayinterval_ = 0;
}
inline int32_t ClientConfig::_internal_inputtingtipdisplayinterval() const {
  return _impl_.inputtingtipdisplayinterval_;
}
inline int32_t ClientConfig::inputtingtipdisplayinterval() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Config.ClientConfig.inputtingTipDisplayInterval)
  return _internal_inputtingtipdisplayinterval();
}
inline void ClientConfig::_internal_set_inputtingtipdisplayinterval(int32_t value) {
  
  _impl_.inputtingtipdisplayinterval_ = value;
}
inline void ClientConfig::set_inputtingtipdisplayinterval(int32_t value) {
  _internal_set_inputtingtipdisplayinterval(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Config.ClientConfig.inputtingTipDisplayInterval)
}

// int32 batchSendMessageMaxCount = 5;
inline void ClientConfig::clear_batchsendmessagemaxcount() {
  _impl_.batchsendmessagemaxcount_ = 0;
}
inline int32_t ClientConfig::_internal_batchsendmessagemaxcount() const {
  return _impl_.batchsendmessagemaxcount_;
}
inline int32_t ClientConfig::batchsendmessagemaxcount() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Config.ClientConfig.batchSendMessageMaxCount)
  return _internal_batchsendmessagemaxcount();
}
inline void ClientConfig::_internal_set_batchsendmessagemaxcount(int32_t value) {
  
  _impl_.batchsendmessagemaxcount_ = value;
}
inline void ClientConfig::set_batchsendmessagemaxcount(int32_t value) {
  _internal_set_batchsendmessagemaxcount(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Config.ClientConfig.batchSendMessageMaxCount)
}

// string resourceUploadingDomain = 6;
inline void ClientConfig::clear_resourceuploadingdomain() {
  _impl_.resourceuploadingdomain_.ClearToEmpty();
}
inline const std::string& ClientConfig::resourceuploadingdomain() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Config.ClientConfig.resourceUploadingDomain)
  return _internal_resourceuploadingdomain();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientConfig::set_resourceuploadingdomain(ArgT0&& arg0, ArgT... args) {
 
 _impl_.resourceuploadingdomain_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Config.ClientConfig.resourceUploadingDomain)
}
inline std::string* ClientConfig::mutable_resourceuploadingdomain() {
  std::string* _s = _internal_mutable_resourceuploadingdomain();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Config.ClientConfig.resourceUploadingDomain)
  return _s;
}
inline const std::string& ClientConfig::_internal_resourceuploadingdomain() const {
  return _impl_.resourceuploadingdomain_.Get();
}
inline void ClientConfig::_internal_set_resourceuploadingdomain(const std::string& value) {
  
  _impl_.resourceuploadingdomain_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientConfig::_internal_mutable_resourceuploadingdomain() {
  
  return _impl_.resourceuploadingdomain_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientConfig::release_resourceuploadingdomain() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Config.ClientConfig.resourceUploadingDomain)
  return _impl_.resourceuploadingdomain_.Release();
}
inline void ClientConfig::set_allocated_resourceuploadingdomain(std::string* resourceuploadingdomain) {
  if (resourceuploadingdomain != nullptr) {
    
  } else {
    
  }
  _impl_.resourceuploadingdomain_.SetAllocated(resourceuploadingdomain, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.resourceuploadingdomain_.IsDefault()) {
    _impl_.resourceuploadingdomain_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Config.ClientConfig.resourceUploadingDomain)
}

// int32 ktpFileLenThreshold = 7;
inline void ClientConfig::clear_ktpfilelenthreshold() {
  _impl_.ktpfilelenthreshold_ = 0;
}
inline int32_t ClientConfig::_internal_ktpfilelenthreshold() const {
  return _impl_.ktpfilelenthreshold_;
}
inline int32_t ClientConfig::ktpfilelenthreshold() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Config.ClientConfig.ktpFileLenThreshold)
  return _internal_ktpfilelenthreshold();
}
inline void ClientConfig::_internal_set_ktpfilelenthreshold(int32_t value) {
  
  _impl_.ktpfilelenthreshold_ = value;
}
inline void ClientConfig::set_ktpfilelenthreshold(int32_t value) {
  _internal_set_ktpfilelenthreshold(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Config.ClientConfig.ktpFileLenThreshold)
}

// string ktpUploadingDomain = 8;
inline void ClientConfig::clear_ktpuploadingdomain() {
  _impl_.ktpuploadingdomain_.ClearToEmpty();
}
inline const std::string& ClientConfig::ktpuploadingdomain() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Config.ClientConfig.ktpUploadingDomain)
  return _internal_ktpuploadingdomain();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientConfig::set_ktpuploadingdomain(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ktpuploadingdomain_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Config.ClientConfig.ktpUploadingDomain)
}
inline std::string* ClientConfig::mutable_ktpuploadingdomain() {
  std::string* _s = _internal_mutable_ktpuploadingdomain();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Config.ClientConfig.ktpUploadingDomain)
  return _s;
}
inline const std::string& ClientConfig::_internal_ktpuploadingdomain() const {
  return _impl_.ktpuploadingdomain_.Get();
}
inline void ClientConfig::_internal_set_ktpuploadingdomain(const std::string& value) {
  
  _impl_.ktpuploadingdomain_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientConfig::_internal_mutable_ktpuploadingdomain() {
  
  return _impl_.ktpuploadingdomain_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientConfig::release_ktpuploadingdomain() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Config.ClientConfig.ktpUploadingDomain)
  return _impl_.ktpuploadingdomain_.Release();
}
inline void ClientConfig::set_allocated_ktpuploadingdomain(std::string* ktpuploadingdomain) {
  if (ktpuploadingdomain != nullptr) {
    
  } else {
    
  }
  _impl_.ktpuploadingdomain_.SetAllocated(ktpuploadingdomain, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ktpuploadingdomain_.IsDefault()) {
    _impl_.ktpuploadingdomain_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Config.ClientConfig.ktpUploadingDomain)
}

// int32 clientSyncMinIntervalMs = 9;
inline void ClientConfig::clear_clientsyncminintervalms() {
  _impl_.clientsyncminintervalms_ = 0;
}
inline int32_t ClientConfig::_internal_clientsyncminintervalms() const {
  return _impl_.clientsyncminintervalms_;
}
inline int32_t ClientConfig::clientsyncminintervalms() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Config.ClientConfig.clientSyncMinIntervalMs)
  return _internal_clientsyncminintervalms();
}
inline void ClientConfig::_internal_set_clientsyncminintervalms(int32_t value) {
  
  _impl_.clientsyncminintervalms_ = value;
}
inline void ClientConfig::set_clientsyncminintervalms(int32_t value) {
  _internal_set_clientsyncminintervalms(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Config.ClientConfig.clientSyncMinIntervalMs)
}

// int32 downloadFileMaxLenPerRequest = 10;
inline void ClientConfig::clear_downloadfilemaxlenperrequest() {
  _impl_.downloadfilemaxlenperrequest_ = 0;
}
inline int32_t ClientConfig::_internal_downloadfilemaxlenperrequest() const {
  return _impl_.downloadfilemaxlenperrequest_;
}
inline int32_t ClientConfig::downloadfilemaxlenperrequest() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Config.ClientConfig.downloadFileMaxLenPerRequest)
  return _internal_downloadfilemaxlenperrequest();
}
inline void ClientConfig::_internal_set_downloadfilemaxlenperrequest(int32_t value) {
  
  _impl_.downloadfilemaxlenperrequest_ = value;
}
inline void ClientConfig::set_downloadfilemaxlenperrequest(int32_t value) {
  _internal_set_downloadfilemaxlenperrequest(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Config.ClientConfig.downloadFileMaxLenPerRequest)
}

// .AcFunDanmu.Im.Cloud.Config.ClientStatisticalDataConfig clientStatisticalDataConfig = 11;
inline bool ClientConfig::_internal_has_clientstatisticaldataconfig() const {
  return this != internal_default_instance() && _impl_.clientstatisticaldataconfig_ != nullptr;
}
inline bool ClientConfig::has_clientstatisticaldataconfig() const {
  return _internal_has_clientstatisticaldataconfig();
}
inline const ::AcFunDanmu::Im::Cloud::Config::ClientStatisticalDataConfig& ClientConfig::_internal_clientstatisticaldataconfig() const {
  const ::AcFunDanmu::Im::Cloud::Config::ClientStatisticalDataConfig* p = _impl_.clientstatisticaldataconfig_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Cloud::Config::ClientStatisticalDataConfig&>(
      ::AcFunDanmu::Im::Cloud::Config::_ClientStatisticalDataConfig_default_instance_);
}
inline const ::AcFunDanmu::Im::Cloud::Config::ClientStatisticalDataConfig& ClientConfig::clientstatisticaldataconfig() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Config.ClientConfig.clientStatisticalDataConfig)
  return _internal_clientstatisticaldataconfig();
}
inline void ClientConfig::unsafe_arena_set_allocated_clientstatisticaldataconfig(
    ::AcFunDanmu::Im::Cloud::Config::ClientStatisticalDataConfig* clientstatisticaldataconfig) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.clientstatisticaldataconfig_);
  }
  _impl_.clientstatisticaldataconfig_ = clientstatisticaldataconfig;
  if (clientstatisticaldataconfig) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Config.ClientConfig.clientStatisticalDataConfig)
}
inline ::AcFunDanmu::Im::Cloud::Config::ClientStatisticalDataConfig* ClientConfig::release_clientstatisticaldataconfig() {
  
  ::AcFunDanmu::Im::Cloud::Config::ClientStatisticalDataConfig* temp = _impl_.clientstatisticaldataconfig_;
  _impl_.clientstatisticaldataconfig_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AcFunDanmu::Im::Cloud::Config::ClientStatisticalDataConfig* ClientConfig::unsafe_arena_release_clientstatisticaldataconfig() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Config.ClientConfig.clientStatisticalDataConfig)
  
  ::AcFunDanmu::Im::Cloud::Config::ClientStatisticalDataConfig* temp = _impl_.clientstatisticaldataconfig_;
  _impl_.clientstatisticaldataconfig_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Cloud::Config::ClientStatisticalDataConfig* ClientConfig::_internal_mutable_clientstatisticaldataconfig() {
  
  if (_impl_.clientstatisticaldataconfig_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Cloud::Config::ClientStatisticalDataConfig>(GetArenaForAllocation());
    _impl_.clientstatisticaldataconfig_ = p;
  }
  return _impl_.clientstatisticaldataconfig_;
}
inline ::AcFunDanmu::Im::Cloud::Config::ClientStatisticalDataConfig* ClientConfig::mutable_clientstatisticaldataconfig() {
  ::AcFunDanmu::Im::Cloud::Config::ClientStatisticalDataConfig* _msg = _internal_mutable_clientstatisticaldataconfig();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Config.ClientConfig.clientStatisticalDataConfig)
  return _msg;
}
inline void ClientConfig::set_allocated_clientstatisticaldataconfig(::AcFunDanmu::Im::Cloud::Config::ClientStatisticalDataConfig* clientstatisticaldataconfig) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.clientstatisticaldataconfig_);
  }
  if (clientstatisticaldataconfig) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(clientstatisticaldataconfig));
    if (message_arena != submessage_arena) {
      clientstatisticaldataconfig = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clientstatisticaldataconfig, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.clientstatisticaldataconfig_ = clientstatisticaldataconfig;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Config.ClientConfig.clientStatisticalDataConfig)
}

// int32 maxMessageBytesLength = 12;
inline void ClientConfig::clear_maxmessagebyteslength() {
  _impl_.maxmessagebyteslength_ = 0;
}
inline int32_t ClientConfig::_internal_maxmessagebyteslength() const {
  return _impl_.maxmessagebyteslength_;
}
inline int32_t ClientConfig::maxmessagebyteslength() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Config.ClientConfig.maxMessageBytesLength)
  return _internal_maxmessagebyteslength();
}
inline void ClientConfig::_internal_set_maxmessagebyteslength(int32_t value) {
  
  _impl_.maxmessagebyteslength_ = value;
}
inline void ClientConfig::set_maxmessagebyteslength(int32_t value) {
  _internal_set_maxmessagebyteslength(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Config.ClientConfig.maxMessageBytesLength)
}

// bool sessionDeletionNotOverAllDevice = 13;
inline void ClientConfig::clear_sessiondeletionnotoveralldevice() {
  _impl_.sessiondeletionnotoveralldevice_ = false;
}
inline bool ClientConfig::_internal_sessiondeletionnotoveralldevice() const {
  return _impl_.sessiondeletionnotoveralldevice_;
}
inline bool ClientConfig::sessiondeletionnotoveralldevice() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Config.ClientConfig.sessionDeletionNotOverAllDevice)
  return _internal_sessiondeletionnotoveralldevice();
}
inline void ClientConfig::_internal_set_sessiondeletionnotoveralldevice(bool value) {
  
  _impl_.sessiondeletionnotoveralldevice_ = value;
}
inline void ClientConfig::set_sessiondeletionnotoveralldevice(bool value) {
  _internal_set_sessiondeletionnotoveralldevice(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Config.ClientConfig.sessionDeletionNotOverAllDevice)
}

// .AcFunDanmu.Im.Cloud.Config.SubBizAggregationConfig subBizAggregationConfig = 14;
inline bool ClientConfig::_internal_has_subbizaggregationconfig() const {
  return this != internal_default_instance() && _impl_.subbizaggregationconfig_ != nullptr;
}
inline bool ClientConfig::has_subbizaggregationconfig() const {
  return _internal_has_subbizaggregationconfig();
}
inline const ::AcFunDanmu::Im::Cloud::Config::SubBizAggregationConfig& ClientConfig::_internal_subbizaggregationconfig() const {
  const ::AcFunDanmu::Im::Cloud::Config::SubBizAggregationConfig* p = _impl_.subbizaggregationconfig_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Cloud::Config::SubBizAggregationConfig&>(
      ::AcFunDanmu::Im::Cloud::Config::_SubBizAggregationConfig_default_instance_);
}
inline const ::AcFunDanmu::Im::Cloud::Config::SubBizAggregationConfig& ClientConfig::subbizaggregationconfig() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Config.ClientConfig.subBizAggregationConfig)
  return _internal_subbizaggregationconfig();
}
inline void ClientConfig::unsafe_arena_set_allocated_subbizaggregationconfig(
    ::AcFunDanmu::Im::Cloud::Config::SubBizAggregationConfig* subbizaggregationconfig) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.subbizaggregationconfig_);
  }
  _impl_.subbizaggregationconfig_ = subbizaggregationconfig;
  if (subbizaggregationconfig) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Config.ClientConfig.subBizAggregationConfig)
}
inline ::AcFunDanmu::Im::Cloud::Config::SubBizAggregationConfig* ClientConfig::release_subbizaggregationconfig() {
  
  ::AcFunDanmu::Im::Cloud::Config::SubBizAggregationConfig* temp = _impl_.subbizaggregationconfig_;
  _impl_.subbizaggregationconfig_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AcFunDanmu::Im::Cloud::Config::SubBizAggregationConfig* ClientConfig::unsafe_arena_release_subbizaggregationconfig() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Config.ClientConfig.subBizAggregationConfig)
  
  ::AcFunDanmu::Im::Cloud::Config::SubBizAggregationConfig* temp = _impl_.subbizaggregationconfig_;
  _impl_.subbizaggregationconfig_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Cloud::Config::SubBizAggregationConfig* ClientConfig::_internal_mutable_subbizaggregationconfig() {
  
  if (_impl_.subbizaggregationconfig_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Cloud::Config::SubBizAggregationConfig>(GetArenaForAllocation());
    _impl_.subbizaggregationconfig_ = p;
  }
  return _impl_.subbizaggregationconfig_;
}
inline ::AcFunDanmu::Im::Cloud::Config::SubBizAggregationConfig* ClientConfig::mutable_subbizaggregationconfig() {
  ::AcFunDanmu::Im::Cloud::Config::SubBizAggregationConfig* _msg = _internal_mutable_subbizaggregationconfig();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Config.ClientConfig.subBizAggregationConfig)
  return _msg;
}
inline void ClientConfig::set_allocated_subbizaggregationconfig(::AcFunDanmu::Im::Cloud::Config::SubBizAggregationConfig* subbizaggregationconfig) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.subbizaggregationconfig_);
  }
  if (subbizaggregationconfig) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(subbizaggregationconfig));
    if (message_arena != submessage_arena) {
      subbizaggregationconfig = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subbizaggregationconfig, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.subbizaggregationconfig_ = subbizaggregationconfig;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Config.ClientConfig.subBizAggregationConfig)
}

// int32 countVisibleMessageThreshold = 15;
inline void ClientConfig::clear_countvisiblemessagethreshold() {
  _impl_.countvisiblemessagethreshold_ = 0;
}
inline int32_t ClientConfig::_internal_countvisiblemessagethreshold() const {
  return _impl_.countvisiblemessagethreshold_;
}
inline int32_t ClientConfig::countvisiblemessagethreshold() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Config.ClientConfig.countVisibleMessageThreshold)
  return _internal_countvisiblemessagethreshold();
}
inline void ClientConfig::_internal_set_countvisiblemessagethreshold(int32_t value) {
  
  _impl_.countvisiblemessagethreshold_ = value;
}
inline void ClientConfig::set_countvisiblemessagethreshold(int32_t value) {
  _internal_set_countvisiblemessagethreshold(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Config.ClientConfig.countVisibleMessageThreshold)
}

// bool disableSessionSyncWhenAppSwitchToForeground = 16;
inline void ClientConfig::clear_disablesessionsyncwhenappswitchtoforeground() {
  _impl_.disablesessionsyncwhenappswitchtoforeground_ = false;
}
inline bool ClientConfig::_internal_disablesessionsyncwhenappswitchtoforeground() const {
  return _impl_.disablesessionsyncwhenappswitchtoforeground_;
}
inline bool ClientConfig::disablesessionsyncwhenappswitchtoforeground() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Config.ClientConfig.disableSessionSyncWhenAppSwitchToForeground)
  return _internal_disablesessionsyncwhenappswitchtoforeground();
}
inline void ClientConfig::_internal_set_disablesessionsyncwhenappswitchtoforeground(bool value) {
  
  _impl_.disablesessionsyncwhenappswitchtoforeground_ = value;
}
inline void ClientConfig::set_disablesessionsyncwhenappswitchtoforeground(bool value) {
  _internal_set_disablesessionsyncwhenappswitchtoforeground(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Config.ClientConfig.disableSessionSyncWhenAppSwitchToForeground)
}

// int32 maxMessagesPreloadAfterSessionSync = 17;
inline void ClientConfig::clear_maxmessagespreloadaftersessionsync() {
  _impl_.maxmessagespreloadaftersessionsync_ = 0;
}
inline int32_t ClientConfig::_internal_maxmessagespreloadaftersessionsync() const {
  return _impl_.maxmessagespreloadaftersessionsync_;
}
inline int32_t ClientConfig::maxmessagespreloadaftersessionsync() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Config.ClientConfig.maxMessagesPreloadAfterSessionSync)
  return _internal_maxmessagespreloadaftersessionsync();
}
inline void ClientConfig::_internal_set_maxmessagespreloadaftersessionsync(int32_t value) {
  
  _impl_.maxmessagespreloadaftersessionsync_ = value;
}
inline void ClientConfig::set_maxmessagespreloadaftersessionsync(int32_t value) {
  _internal_set_maxmessagespreloadaftersessionsync(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Config.ClientConfig.maxMessagesPreloadAfterSessionSync)
}

// int32 maxSessionsNeedPreloadMessageAfterSessionSync = 18;
inline void ClientConfig::clear_maxsessionsneedpreloadmessageaftersessionsync() {
  _impl_.maxsessionsneedpreloadmessageaftersessionsync_ = 0;
}
inline int32_t ClientConfig::_internal_maxsessionsneedpreloadmessageaftersessionsync() const {
  return _impl_.maxsessionsneedpreloadmessageaftersessionsync_;
}
inline int32_t ClientConfig::maxsessionsneedpreloadmessageaftersessionsync() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Config.ClientConfig.maxSessionsNeedPreloadMessageAfterSessionSync)
  return _internal_maxsessionsneedpreloadmessageaftersessionsync();
}
inline void ClientConfig::_internal_set_maxsessionsneedpreloadmessageaftersessionsync(int32_t value) {
  
  _impl_.maxsessionsneedpreloadmessageaftersessionsync_ = value;
}
inline void ClientConfig::set_maxsessionsneedpreloadmessageaftersessionsync(int32_t value) {
  _internal_set_maxsessionsneedpreloadmessageaftersessionsync(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Config.ClientConfig.maxSessionsNeedPreloadMessageAfterSessionSync)
}

// string ztImApiDomain = 19;
inline void ClientConfig::clear_ztimapidomain() {
  _impl_.ztimapidomain_.ClearToEmpty();
}
inline const std::string& ClientConfig::ztimapidomain() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Config.ClientConfig.ztImApiDomain)
  return _internal_ztimapidomain();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientConfig::set_ztimapidomain(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ztimapidomain_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Config.ClientConfig.ztImApiDomain)
}
inline std::string* ClientConfig::mutable_ztimapidomain() {
  std::string* _s = _internal_mutable_ztimapidomain();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Config.ClientConfig.ztImApiDomain)
  return _s;
}
inline const std::string& ClientConfig::_internal_ztimapidomain() const {
  return _impl_.ztimapidomain_.Get();
}
inline void ClientConfig::_internal_set_ztimapidomain(const std::string& value) {
  
  _impl_.ztimapidomain_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientConfig::_internal_mutable_ztimapidomain() {
  
  return _impl_.ztimapidomain_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientConfig::release_ztimapidomain() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Config.ClientConfig.ztImApiDomain)
  return _impl_.ztimapidomain_.Release();
}
inline void ClientConfig::set_allocated_ztimapidomain(std::string* ztimapidomain) {
  if (ztimapidomain != nullptr) {
    
  } else {
    
  }
  _impl_.ztimapidomain_.SetAllocated(ztimapidomain, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ztimapidomain_.IsDefault()) {
    _impl_.ztimapidomain_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Config.ClientConfig.ztImApiDomain)
}

// int32 voiceCallTimeoutInterval = 20;
inline void ClientConfig::clear_voicecalltimeoutinterval() {
  _impl_.voicecalltimeoutinterval_ = 0;
}
inline int32_t ClientConfig::_internal_voicecalltimeoutinterval() const {
  return _impl_.voicecalltimeoutinterval_;
}
inline int32_t ClientConfig::voicecalltimeoutinterval() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Config.ClientConfig.voiceCallTimeoutInterval)
  return _internal_voicecalltimeoutinterval();
}
inline void ClientConfig::_internal_set_voicecalltimeoutinterval(int32_t value) {
  
  _impl_.voicecalltimeoutinterval_ = value;
}
inline void ClientConfig::set_voicecalltimeoutinterval(int32_t value) {
  _internal_set_voicecalltimeoutinterval(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Config.ClientConfig.voiceCallTimeoutInterval)
}

// int32 voiceCallHeartbeatInterval = 21;
inline void ClientConfig::clear_voicecallheartbeatinterval() {
  _impl_.voicecallheartbeatinterval_ = 0;
}
inline int32_t ClientConfig::_internal_voicecallheartbeatinterval() const {
  return _impl_.voicecallheartbeatinterval_;
}
inline int32_t ClientConfig::voicecallheartbeatinterval() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Config.ClientConfig.voiceCallHeartbeatInterval)
  return _internal_voicecallheartbeatinterval();
}
inline void ClientConfig::_internal_set_voicecallheartbeatinterval(int32_t value) {
  
  _impl_.voicecallheartbeatinterval_ = value;
}
inline void ClientConfig::set_voicecallheartbeatinterval(int32_t value) {
  _internal_set_voicecallheartbeatinterval(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Config.ClientConfig.voiceCallHeartbeatInterval)
}

// repeated int32 clickMessageType = 22;
inline int ClientConfig::_internal_clickmessagetype_size() const {
  return _impl_.clickmessagetype_.size();
}
inline int ClientConfig::clickmessagetype_size() const {
  return _internal_clickmessagetype_size();
}
inline void ClientConfig::clear_clickmessagetype() {
  _impl_.clickmessagetype_.Clear();
}
inline int32_t ClientConfig::_internal_clickmessagetype(int index) const {
  return _impl_.clickmessagetype_.Get(index);
}
inline int32_t ClientConfig::clickmessagetype(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Config.ClientConfig.clickMessageType)
  return _internal_clickmessagetype(index);
}
inline void ClientConfig::set_clickmessagetype(int index, int32_t value) {
  _impl_.clickmessagetype_.Set(index, value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Config.ClientConfig.clickMessageType)
}
inline void ClientConfig::_internal_add_clickmessagetype(int32_t value) {
  _impl_.clickmessagetype_.Add(value);
}
inline void ClientConfig::add_clickmessagetype(int32_t value) {
  _internal_add_clickmessagetype(value);
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Cloud.Config.ClientConfig.clickMessageType)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ClientConfig::_internal_clickmessagetype() const {
  return _impl_.clickmessagetype_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ClientConfig::clickmessagetype() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Cloud.Config.ClientConfig.clickMessageType)
  return _internal_clickmessagetype();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ClientConfig::_internal_mutable_clickmessagetype() {
  return &_impl_.clickmessagetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ClientConfig::mutable_clickmessagetype() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Cloud.Config.ClientConfig.clickMessageType)
  return _internal_mutable_clickmessagetype();
}

// int32 autoRetryMaxInterval = 23;
inline void ClientConfig::clear_autoretrymaxinterval() {
  _impl_.autoretrymaxinterval_ = 0;
}
inline int32_t ClientConfig::_internal_autoretrymaxinterval() const {
  return _impl_.autoretrymaxinterval_;
}
inline int32_t ClientConfig::autoretrymaxinterval() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Config.ClientConfig.autoRetryMaxInterval)
  return _internal_autoretrymaxinterval();
}
inline void ClientConfig::_internal_set_autoretrymaxinterval(int32_t value) {
  
  _impl_.autoretrymaxinterval_ = value;
}
inline void ClientConfig::set_autoretrymaxinterval(int32_t value) {
  _internal_set_autoretrymaxinterval(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Config.ClientConfig.autoRetryMaxInterval)
}

// int32 autoRetryMaxTimes = 24;
inline void ClientConfig::clear_autoretrymaxtimes() {
  _impl_.autoretrymaxtimes_ = 0;
}
inline int32_t ClientConfig::_internal_autoretrymaxtimes() const {
  return _impl_.autoretrymaxtimes_;
}
inline int32_t ClientConfig::autoretrymaxtimes() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Config.ClientConfig.autoRetryMaxTimes)
  return _internal_autoretrymaxtimes();
}
inline void ClientConfig::_internal_set_autoretrymaxtimes(int32_t value) {
  
  _impl_.autoretrymaxtimes_ = value;
}
inline void ClientConfig::set_autoretrymaxtimes(int32_t value) {
  _internal_set_autoretrymaxtimes(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Config.ClientConfig.autoRetryMaxTimes)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace Cloud
}  // namespace Im
}  // namespace AcFunDanmu

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ClientConfig_2eproto
