// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ZtLiveWidgetProto.proto

#include "ZtLiveWidgetProto.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace AcFunDanmu {
}  // namespace AcFunDanmu
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_ZtLiveWidgetProto_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ZtLiveWidgetProto_2eproto = nullptr;
const uint32_t TableStruct_ZtLiveWidgetProto_2eproto::offsets[1] = {};
static constexpr ::_pbi::MigrationSchema* schemas = nullptr;
static constexpr ::_pb::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_ZtLiveWidgetProto_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027ZtLiveWidgetProto.proto\022\nAcFunDanmu*\221\001"
  "\n\022ZtLiveWidgetProtoA\022\027\n\023ZtLiveWidgetProt"
  "oAa\020\000\022\027\n\023ZtLiveWidgetProtoAb\020\001\022\027\n\023ZtLive"
  "WidgetProtoAc\020\002\022\027\n\023ZtLiveWidgetProtoAd\020\003"
  "\022\027\n\023ZtLiveWidgetProtoAe\020\004*\252\001\n\022ZtLiveWidg"
  "etProtoB\022\027\n\023ZtLiveWidgetProtoBa\020\000\022\027\n\023ZtL"
  "iveWidgetProtoBb\020\001\022\027\n\023ZtLiveWidgetProtoB"
  "c\020\002\022\027\n\023ZtLiveWidgetProtoBd\020\003\022\027\n\023ZtLiveWi"
  "dgetProtoBe\020\004\022\027\n\023ZtLiveWidgetProtoBf\020\005*x"
  "\n\022ZtLiveWidgetProtoC\022\027\n\023ZtLiveWidgetProt"
  "oCa\020\000\022\027\n\023ZtLiveWidgetProtoCb\020\001\022\027\n\023ZtLive"
  "WidgetProtoCc\020\002\022\027\n\023ZtLiveWidgetProtoCd\020\003"
  "b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_ZtLiveWidgetProto_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ZtLiveWidgetProto_2eproto = {
    false, false, 488, descriptor_table_protodef_ZtLiveWidgetProto_2eproto,
    "ZtLiveWidgetProto.proto",
    &descriptor_table_ZtLiveWidgetProto_2eproto_once, nullptr, 0, 0,
    schemas, file_default_instances, TableStruct_ZtLiveWidgetProto_2eproto::offsets,
    nullptr, file_level_enum_descriptors_ZtLiveWidgetProto_2eproto,
    file_level_service_descriptors_ZtLiveWidgetProto_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ZtLiveWidgetProto_2eproto_getter() {
  return &descriptor_table_ZtLiveWidgetProto_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ZtLiveWidgetProto_2eproto(&descriptor_table_ZtLiveWidgetProto_2eproto);
namespace AcFunDanmu {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ZtLiveWidgetProtoA_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ZtLiveWidgetProto_2eproto);
  return file_level_enum_descriptors_ZtLiveWidgetProto_2eproto[0];
}
bool ZtLiveWidgetProtoA_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ZtLiveWidgetProtoB_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ZtLiveWidgetProto_2eproto);
  return file_level_enum_descriptors_ZtLiveWidgetProto_2eproto[1];
}
bool ZtLiveWidgetProtoB_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ZtLiveWidgetProtoC_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ZtLiveWidgetProto_2eproto);
  return file_level_enum_descriptors_ZtLiveWidgetProto_2eproto[2];
}
bool ZtLiveWidgetProtoC_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
