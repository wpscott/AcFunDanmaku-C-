// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommentNotice.proto

#include "CommentNotice.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace AcFunDanmu {
PROTOBUF_CONSTEXPR CommentNotice::CommentNotice(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.d_)*/{}
  , /*decltype(_impl_.e_)*/{}
  , /*decltype(_impl_.a_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.b_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.c_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.f_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.g_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.h_)*/nullptr
  , /*decltype(_impl_.i_)*/nullptr
  , /*decltype(_impl_.k_)*/int64_t{0}
  , /*decltype(_impl_.j_)*/0
  , /*decltype(_impl_.m_)*/0
  , /*decltype(_impl_.l_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CommentNoticeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommentNoticeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommentNoticeDefaultTypeInternal() {}
  union {
    CommentNotice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommentNoticeDefaultTypeInternal _CommentNotice_default_instance_;
}  // namespace AcFunDanmu
static ::_pb::Metadata file_level_metadata_CommentNotice_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_CommentNotice_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_CommentNotice_2eproto = nullptr;

const uint32_t TableStruct_CommentNotice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommentNotice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommentNotice, _impl_.a_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommentNotice, _impl_.b_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommentNotice, _impl_.c_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommentNotice, _impl_.d_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommentNotice, _impl_.e_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommentNotice, _impl_.f_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommentNotice, _impl_.g_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommentNotice, _impl_.h_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommentNotice, _impl_.i_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommentNotice, _impl_.j_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommentNotice, _impl_.k_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommentNotice, _impl_.l_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommentNotice, _impl_.m_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::AcFunDanmu::CommentNotice)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::AcFunDanmu::_CommentNotice_default_instance_._instance,
};

const char descriptor_table_protodef_CommentNotice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023CommentNotice.proto\022\nAcFunDanmu\032\014Butto"
  "n.proto\032\020ClickEvent.proto\032\022ImageCdnNode."
  "proto\"\376\001\n\rCommentNotice\022\t\n\001a\030\001 \001(\t\022\t\n\001b\030"
  "\002 \001(\014\022\t\n\001c\030\003 \001(\t\022#\n\001d\030\004 \003(\0132\030.AcFunDanmu"
  ".ImageCdnNode\022#\n\001e\030\005 \003(\0132\030.AcFunDanmu.Im"
  "ageCdnNode\022\t\n\001f\030\006 \001(\t\022\t\n\001g\030\007 \001(\t\022\035\n\001h\030\010 "
  "\001(\0132\022.AcFunDanmu.Button\022!\n\001i\030\t \001(\0132\026.AcF"
  "unDanmu.ClickEvent\022\t\n\001j\030\n \001(\005\022\t\n\001k\030\013 \001(\003"
  "\022\t\n\001l\030\014 \001(\003\022\t\n\001m\030\r \001(\005b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_CommentNotice_2eproto_deps[3] = {
  &::descriptor_table_Button_2eproto,
  &::descriptor_table_ClickEvent_2eproto,
  &::descriptor_table_ImageCdnNode_2eproto,
};
static ::_pbi::once_flag descriptor_table_CommentNotice_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_CommentNotice_2eproto = {
    false, false, 350, descriptor_table_protodef_CommentNotice_2eproto,
    "CommentNotice.proto",
    &descriptor_table_CommentNotice_2eproto_once, descriptor_table_CommentNotice_2eproto_deps, 3, 1,
    schemas, file_default_instances, TableStruct_CommentNotice_2eproto::offsets,
    file_level_metadata_CommentNotice_2eproto, file_level_enum_descriptors_CommentNotice_2eproto,
    file_level_service_descriptors_CommentNotice_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_CommentNotice_2eproto_getter() {
  return &descriptor_table_CommentNotice_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_CommentNotice_2eproto(&descriptor_table_CommentNotice_2eproto);
namespace AcFunDanmu {

// ===================================================================

class CommentNotice::_Internal {
 public:
  static const ::AcFunDanmu::Button& h(const CommentNotice* msg);
  static const ::AcFunDanmu::ClickEvent& i(const CommentNotice* msg);
};

const ::AcFunDanmu::Button&
CommentNotice::_Internal::h(const CommentNotice* msg) {
  return *msg->_impl_.h_;
}
const ::AcFunDanmu::ClickEvent&
CommentNotice::_Internal::i(const CommentNotice* msg) {
  return *msg->_impl_.i_;
}
void CommentNotice::clear_d() {
  _impl_.d_.Clear();
}
void CommentNotice::clear_e() {
  _impl_.e_.Clear();
}
void CommentNotice::clear_h() {
  if (GetArenaForAllocation() == nullptr && _impl_.h_ != nullptr) {
    delete _impl_.h_;
  }
  _impl_.h_ = nullptr;
}
void CommentNotice::clear_i() {
  if (GetArenaForAllocation() == nullptr && _impl_.i_ != nullptr) {
    delete _impl_.i_;
  }
  _impl_.i_ = nullptr;
}
CommentNotice::CommentNotice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.CommentNotice)
}
CommentNotice::CommentNotice(const CommentNotice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommentNotice* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.d_){from._impl_.d_}
    , decltype(_impl_.e_){from._impl_.e_}
    , decltype(_impl_.a_){}
    , decltype(_impl_.b_){}
    , decltype(_impl_.c_){}
    , decltype(_impl_.f_){}
    , decltype(_impl_.g_){}
    , decltype(_impl_.h_){nullptr}
    , decltype(_impl_.i_){nullptr}
    , decltype(_impl_.k_){}
    , decltype(_impl_.j_){}
    , decltype(_impl_.m_){}
    , decltype(_impl_.l_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.a_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.a_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_a().empty()) {
    _this->_impl_.a_.Set(from._internal_a(), 
      _this->GetArenaForAllocation());
  }
  _impl_.b_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.b_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_b().empty()) {
    _this->_impl_.b_.Set(from._internal_b(), 
      _this->GetArenaForAllocation());
  }
  _impl_.c_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.c_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_c().empty()) {
    _this->_impl_.c_.Set(from._internal_c(), 
      _this->GetArenaForAllocation());
  }
  _impl_.f_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.f_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_f().empty()) {
    _this->_impl_.f_.Set(from._internal_f(), 
      _this->GetArenaForAllocation());
  }
  _impl_.g_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.g_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_g().empty()) {
    _this->_impl_.g_.Set(from._internal_g(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_h()) {
    _this->_impl_.h_ = new ::AcFunDanmu::Button(*from._impl_.h_);
  }
  if (from._internal_has_i()) {
    _this->_impl_.i_ = new ::AcFunDanmu::ClickEvent(*from._impl_.i_);
  }
  ::memcpy(&_impl_.k_, &from._impl_.k_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.l_) -
    reinterpret_cast<char*>(&_impl_.k_)) + sizeof(_impl_.l_));
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.CommentNotice)
}

inline void CommentNotice::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.d_){arena}
    , decltype(_impl_.e_){arena}
    , decltype(_impl_.a_){}
    , decltype(_impl_.b_){}
    , decltype(_impl_.c_){}
    , decltype(_impl_.f_){}
    , decltype(_impl_.g_){}
    , decltype(_impl_.h_){nullptr}
    , decltype(_impl_.i_){nullptr}
    , decltype(_impl_.k_){int64_t{0}}
    , decltype(_impl_.j_){0}
    , decltype(_impl_.m_){0}
    , decltype(_impl_.l_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.a_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.a_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.b_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.b_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.c_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.c_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.f_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.g_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.g_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CommentNotice::~CommentNotice() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.CommentNotice)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommentNotice::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.d_.~RepeatedPtrField();
  _impl_.e_.~RepeatedPtrField();
  _impl_.a_.Destroy();
  _impl_.b_.Destroy();
  _impl_.c_.Destroy();
  _impl_.f_.Destroy();
  _impl_.g_.Destroy();
  if (this != internal_default_instance()) delete _impl_.h_;
  if (this != internal_default_instance()) delete _impl_.i_;
}

void CommentNotice::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommentNotice::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.CommentNotice)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.d_.Clear();
  _impl_.e_.Clear();
  _impl_.a_.ClearToEmpty();
  _impl_.b_.ClearToEmpty();
  _impl_.c_.ClearToEmpty();
  _impl_.f_.ClearToEmpty();
  _impl_.g_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.h_ != nullptr) {
    delete _impl_.h_;
  }
  _impl_.h_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.i_ != nullptr) {
    delete _impl_.i_;
  }
  _impl_.i_ = nullptr;
  ::memset(&_impl_.k_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.l_) -
      reinterpret_cast<char*>(&_impl_.k_)) + sizeof(_impl_.l_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommentNotice::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string a = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_a();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.CommentNotice.a"));
        } else
          goto handle_unusual;
        continue;
      // bytes b = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_b();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string c = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_c();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.CommentNotice.c"));
        } else
          goto handle_unusual;
        continue;
      // repeated .AcFunDanmu.ImageCdnNode d = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_d(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .AcFunDanmu.ImageCdnNode e = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_e(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string f = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_f();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.CommentNotice.f"));
        } else
          goto handle_unusual;
        continue;
      // string g = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_g();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.CommentNotice.g"));
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.Button h = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_h(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AcFunDanmu.ClickEvent i = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_i(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 j = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.j_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 k = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 l = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.l_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 m = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.m_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommentNotice::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.CommentNotice)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string a = 1;
  if (!this->_internal_a().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_a().data(), static_cast<int>(this->_internal_a().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.CommentNotice.a");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_a(), target);
  }

  // bytes b = 2;
  if (!this->_internal_b().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_b(), target);
  }

  // string c = 3;
  if (!this->_internal_c().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_c().data(), static_cast<int>(this->_internal_c().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.CommentNotice.c");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_c(), target);
  }

  // repeated .AcFunDanmu.ImageCdnNode d = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_d_size()); i < n; i++) {
    const auto& repfield = this->_internal_d(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .AcFunDanmu.ImageCdnNode e = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_e_size()); i < n; i++) {
    const auto& repfield = this->_internal_e(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string f = 6;
  if (!this->_internal_f().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_f().data(), static_cast<int>(this->_internal_f().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.CommentNotice.f");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_f(), target);
  }

  // string g = 7;
  if (!this->_internal_g().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_g().data(), static_cast<int>(this->_internal_g().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.CommentNotice.g");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_g(), target);
  }

  // .AcFunDanmu.Button h = 8;
  if (this->_internal_has_h()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::h(this),
        _Internal::h(this).GetCachedSize(), target, stream);
  }

  // .AcFunDanmu.ClickEvent i = 9;
  if (this->_internal_has_i()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::i(this),
        _Internal::i(this).GetCachedSize(), target, stream);
  }

  // int32 j = 10;
  if (this->_internal_j() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_j(), target);
  }

  // int64 k = 11;
  if (this->_internal_k() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_k(), target);
  }

  // int64 l = 12;
  if (this->_internal_l() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_l(), target);
  }

  // int32 m = 13;
  if (this->_internal_m() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.CommentNotice)
  return target;
}

size_t CommentNotice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.CommentNotice)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .AcFunDanmu.ImageCdnNode d = 4;
  total_size += 1UL * this->_internal_d_size();
  for (const auto& msg : this->_impl_.d_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .AcFunDanmu.ImageCdnNode e = 5;
  total_size += 1UL * this->_internal_e_size();
  for (const auto& msg : this->_impl_.e_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string a = 1;
  if (!this->_internal_a().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_a());
  }

  // bytes b = 2;
  if (!this->_internal_b().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_b());
  }

  // string c = 3;
  if (!this->_internal_c().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_c());
  }

  // string f = 6;
  if (!this->_internal_f().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_f());
  }

  // string g = 7;
  if (!this->_internal_g().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_g());
  }

  // .AcFunDanmu.Button h = 8;
  if (this->_internal_has_h()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.h_);
  }

  // .AcFunDanmu.ClickEvent i = 9;
  if (this->_internal_has_i()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.i_);
  }

  // int64 k = 11;
  if (this->_internal_k() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_k());
  }

  // int32 j = 10;
  if (this->_internal_j() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_j());
  }

  // int32 m = 13;
  if (this->_internal_m() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m());
  }

  // int64 l = 12;
  if (this->_internal_l() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_l());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommentNotice::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommentNotice::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommentNotice::GetClassData() const { return &_class_data_; }


void CommentNotice::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommentNotice*>(&to_msg);
  auto& from = static_cast<const CommentNotice&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.CommentNotice)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.d_.MergeFrom(from._impl_.d_);
  _this->_impl_.e_.MergeFrom(from._impl_.e_);
  if (!from._internal_a().empty()) {
    _this->_internal_set_a(from._internal_a());
  }
  if (!from._internal_b().empty()) {
    _this->_internal_set_b(from._internal_b());
  }
  if (!from._internal_c().empty()) {
    _this->_internal_set_c(from._internal_c());
  }
  if (!from._internal_f().empty()) {
    _this->_internal_set_f(from._internal_f());
  }
  if (!from._internal_g().empty()) {
    _this->_internal_set_g(from._internal_g());
  }
  if (from._internal_has_h()) {
    _this->_internal_mutable_h()->::AcFunDanmu::Button::MergeFrom(
        from._internal_h());
  }
  if (from._internal_has_i()) {
    _this->_internal_mutable_i()->::AcFunDanmu::ClickEvent::MergeFrom(
        from._internal_i());
  }
  if (from._internal_k() != 0) {
    _this->_internal_set_k(from._internal_k());
  }
  if (from._internal_j() != 0) {
    _this->_internal_set_j(from._internal_j());
  }
  if (from._internal_m() != 0) {
    _this->_internal_set_m(from._internal_m());
  }
  if (from._internal_l() != 0) {
    _this->_internal_set_l(from._internal_l());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommentNotice::CopyFrom(const CommentNotice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.CommentNotice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommentNotice::IsInitialized() const {
  return true;
}

void CommentNotice::InternalSwap(CommentNotice* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.d_.InternalSwap(&other->_impl_.d_);
  _impl_.e_.InternalSwap(&other->_impl_.e_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.a_, lhs_arena,
      &other->_impl_.a_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.b_, lhs_arena,
      &other->_impl_.b_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.c_, lhs_arena,
      &other->_impl_.c_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.f_, lhs_arena,
      &other->_impl_.f_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.g_, lhs_arena,
      &other->_impl_.g_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommentNotice, _impl_.l_)
      + sizeof(CommentNotice::_impl_.l_)
      - PROTOBUF_FIELD_OFFSET(CommentNotice, _impl_.h_)>(
          reinterpret_cast<char*>(&_impl_.h_),
          reinterpret_cast<char*>(&other->_impl_.h_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommentNotice::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CommentNotice_2eproto_getter, &descriptor_table_CommentNotice_2eproto_once,
      file_level_metadata_CommentNotice_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AcFunDanmu::CommentNotice*
Arena::CreateMaybeMessage< ::AcFunDanmu::CommentNotice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::CommentNotice >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
