// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommonActionSignalRichText.proto

#include "CommonActionSignalRichText.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace AcFunDanmu {
constexpr CommonActionSignalRichText_ImageSegment::CommonActionSignalRichText_ImageSegment(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pictures_()
  , alternativetext_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , alternativecolor_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CommonActionSignalRichText_ImageSegmentDefaultTypeInternal {
  constexpr CommonActionSignalRichText_ImageSegmentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommonActionSignalRichText_ImageSegmentDefaultTypeInternal() {}
  union {
    CommonActionSignalRichText_ImageSegment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommonActionSignalRichText_ImageSegmentDefaultTypeInternal _CommonActionSignalRichText_ImageSegment_default_instance_;
constexpr CommonActionSignalRichText_PlainSegment::CommonActionSignalRichText_PlainSegment(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , color_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CommonActionSignalRichText_PlainSegmentDefaultTypeInternal {
  constexpr CommonActionSignalRichText_PlainSegmentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommonActionSignalRichText_PlainSegmentDefaultTypeInternal() {}
  union {
    CommonActionSignalRichText_PlainSegment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommonActionSignalRichText_PlainSegmentDefaultTypeInternal _CommonActionSignalRichText_PlainSegment_default_instance_;
constexpr CommonActionSignalRichText_RichTextSegment::CommonActionSignalRichText_RichTextSegment(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct CommonActionSignalRichText_RichTextSegmentDefaultTypeInternal {
  constexpr CommonActionSignalRichText_RichTextSegmentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommonActionSignalRichText_RichTextSegmentDefaultTypeInternal() {}
  union {
    CommonActionSignalRichText_RichTextSegment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommonActionSignalRichText_RichTextSegmentDefaultTypeInternal _CommonActionSignalRichText_RichTextSegment_default_instance_;
constexpr CommonActionSignalRichText_UserInfoSegment::CommonActionSignalRichText_UserInfoSegment(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : color_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_(nullptr){}
struct CommonActionSignalRichText_UserInfoSegmentDefaultTypeInternal {
  constexpr CommonActionSignalRichText_UserInfoSegmentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommonActionSignalRichText_UserInfoSegmentDefaultTypeInternal() {}
  union {
    CommonActionSignalRichText_UserInfoSegment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommonActionSignalRichText_UserInfoSegmentDefaultTypeInternal _CommonActionSignalRichText_UserInfoSegment_default_instance_;
constexpr CommonActionSignalRichText::CommonActionSignalRichText(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : segments_()
  , sendtimems_(int64_t{0}){}
struct CommonActionSignalRichTextDefaultTypeInternal {
  constexpr CommonActionSignalRichTextDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommonActionSignalRichTextDefaultTypeInternal() {}
  union {
    CommonActionSignalRichText _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommonActionSignalRichTextDefaultTypeInternal _CommonActionSignalRichText_default_instance_;
}  // namespace AcFunDanmu
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_CommonActionSignalRichText_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_CommonActionSignalRichText_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_CommonActionSignalRichText_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_CommonActionSignalRichText_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonActionSignalRichText_ImageSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonActionSignalRichText_ImageSegment, pictures_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonActionSignalRichText_ImageSegment, alternativetext_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonActionSignalRichText_ImageSegment, alternativecolor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonActionSignalRichText_PlainSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonActionSignalRichText_PlainSegment, text_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonActionSignalRichText_PlainSegment, color_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonActionSignalRichText_RichTextSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonActionSignalRichText_RichTextSegment, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonActionSignalRichText_RichTextSegment, segment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonActionSignalRichText_UserInfoSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonActionSignalRichText_UserInfoSegment, user_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonActionSignalRichText_UserInfoSegment, color_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonActionSignalRichText, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonActionSignalRichText, segments_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonActionSignalRichText, sendtimems_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::AcFunDanmu::CommonActionSignalRichText_ImageSegment)},
  { 8, -1, sizeof(::AcFunDanmu::CommonActionSignalRichText_PlainSegment)},
  { 15, -1, sizeof(::AcFunDanmu::CommonActionSignalRichText_RichTextSegment)},
  { 24, -1, sizeof(::AcFunDanmu::CommonActionSignalRichText_UserInfoSegment)},
  { 31, -1, sizeof(::AcFunDanmu::CommonActionSignalRichText)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AcFunDanmu::_CommonActionSignalRichText_ImageSegment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AcFunDanmu::_CommonActionSignalRichText_PlainSegment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AcFunDanmu::_CommonActionSignalRichText_RichTextSegment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AcFunDanmu::_CommonActionSignalRichText_UserInfoSegment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AcFunDanmu::_CommonActionSignalRichText_default_instance_),
};

const char descriptor_table_protodef_CommonActionSignalRichText_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n CommonActionSignalRichText.proto\022\nAcFu"
  "nDanmu\032\024ZtLiveUserInfo.proto\032\022ImageCdnNo"
  "de.proto\"\331\004\n\032CommonActionSignalRichText\022"
  "H\n\010segments\030\001 \003(\01326.AcFunDanmu.CommonAct"
  "ionSignalRichText.RichTextSegment\022\022\n\nsen"
  "dTimeMs\030\002 \001(\003\032m\n\014ImageSegment\022*\n\010picture"
  "s\030\001 \003(\0132\030.AcFunDanmu.ImageCdnNode\022\027\n\017alt"
  "ernativeText\030\002 \001(\t\022\030\n\020alternativeColor\030\003"
  " \001(\t\032+\n\014PlainSegment\022\014\n\004text\030\001 \001(\t\022\r\n\005co"
  "lor\030\002 \001(\t\032\364\001\n\017RichTextSegment\022J\n\010userInf"
  "o\030\001 \001(\01326.AcFunDanmu.CommonActionSignalR"
  "ichText.UserInfoSegmentH\000\022D\n\005plain\030\002 \001(\013"
  "23.AcFunDanmu.CommonActionSignalRichText"
  ".PlainSegmentH\000\022D\n\005image\030\003 \001(\01323.AcFunDa"
  "nmu.CommonActionSignalRichText.ImageSegm"
  "entH\000B\t\n\007segment\032J\n\017UserInfoSegment\022(\n\004u"
  "ser\030\001 \001(\0132\032.AcFunDanmu.ZtLiveUserInfo\022\r\n"
  "\005color\030\002 \001(\tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_CommonActionSignalRichText_2eproto_deps[2] = {
  &::descriptor_table_ImageCdnNode_2eproto,
  &::descriptor_table_ZtLiveUserInfo_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_CommonActionSignalRichText_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_CommonActionSignalRichText_2eproto = {
  false, false, 700, descriptor_table_protodef_CommonActionSignalRichText_2eproto, "CommonActionSignalRichText.proto", 
  &descriptor_table_CommonActionSignalRichText_2eproto_once, descriptor_table_CommonActionSignalRichText_2eproto_deps, 2, 5,
  schemas, file_default_instances, TableStruct_CommonActionSignalRichText_2eproto::offsets,
  file_level_metadata_CommonActionSignalRichText_2eproto, file_level_enum_descriptors_CommonActionSignalRichText_2eproto, file_level_service_descriptors_CommonActionSignalRichText_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_CommonActionSignalRichText_2eproto_getter() {
  return &descriptor_table_CommonActionSignalRichText_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_CommonActionSignalRichText_2eproto(&descriptor_table_CommonActionSignalRichText_2eproto);
namespace AcFunDanmu {

// ===================================================================

class CommonActionSignalRichText_ImageSegment::_Internal {
 public:
};

void CommonActionSignalRichText_ImageSegment::clear_pictures() {
  pictures_.Clear();
}
CommonActionSignalRichText_ImageSegment::CommonActionSignalRichText_ImageSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pictures_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.CommonActionSignalRichText.ImageSegment)
}
CommonActionSignalRichText_ImageSegment::CommonActionSignalRichText_ImageSegment(const CommonActionSignalRichText_ImageSegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pictures_(from.pictures_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  alternativetext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_alternativetext().empty()) {
    alternativetext_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_alternativetext(), 
      GetArenaForAllocation());
  }
  alternativecolor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_alternativecolor().empty()) {
    alternativecolor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_alternativecolor(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.CommonActionSignalRichText.ImageSegment)
}

void CommonActionSignalRichText_ImageSegment::SharedCtor() {
alternativetext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
alternativecolor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CommonActionSignalRichText_ImageSegment::~CommonActionSignalRichText_ImageSegment() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.CommonActionSignalRichText.ImageSegment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommonActionSignalRichText_ImageSegment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  alternativetext_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alternativecolor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CommonActionSignalRichText_ImageSegment::ArenaDtor(void* object) {
  CommonActionSignalRichText_ImageSegment* _this = reinterpret_cast< CommonActionSignalRichText_ImageSegment* >(object);
  (void)_this;
}
void CommonActionSignalRichText_ImageSegment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommonActionSignalRichText_ImageSegment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommonActionSignalRichText_ImageSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.CommonActionSignalRichText.ImageSegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pictures_.Clear();
  alternativetext_.ClearToEmpty();
  alternativecolor_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommonActionSignalRichText_ImageSegment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .AcFunDanmu.ImageCdnNode pictures = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pictures(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string alternativeText = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_alternativetext();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AcFunDanmu.CommonActionSignalRichText.ImageSegment.alternativeText"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string alternativeColor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_alternativecolor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AcFunDanmu.CommonActionSignalRichText.ImageSegment.alternativeColor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommonActionSignalRichText_ImageSegment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.CommonActionSignalRichText.ImageSegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .AcFunDanmu.ImageCdnNode pictures = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pictures_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_pictures(i), target, stream);
  }

  // string alternativeText = 2;
  if (!this->alternativetext().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_alternativetext().data(), static_cast<int>(this->_internal_alternativetext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.CommonActionSignalRichText.ImageSegment.alternativeText");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_alternativetext(), target);
  }

  // string alternativeColor = 3;
  if (!this->alternativecolor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_alternativecolor().data(), static_cast<int>(this->_internal_alternativecolor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.CommonActionSignalRichText.ImageSegment.alternativeColor");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_alternativecolor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.CommonActionSignalRichText.ImageSegment)
  return target;
}

size_t CommonActionSignalRichText_ImageSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.CommonActionSignalRichText.ImageSegment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .AcFunDanmu.ImageCdnNode pictures = 1;
  total_size += 1UL * this->_internal_pictures_size();
  for (const auto& msg : this->pictures_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string alternativeText = 2;
  if (!this->alternativetext().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_alternativetext());
  }

  // string alternativeColor = 3;
  if (!this->alternativecolor().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_alternativecolor());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommonActionSignalRichText_ImageSegment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AcFunDanmu.CommonActionSignalRichText.ImageSegment)
  GOOGLE_DCHECK_NE(&from, this);
  const CommonActionSignalRichText_ImageSegment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommonActionSignalRichText_ImageSegment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AcFunDanmu.CommonActionSignalRichText.ImageSegment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AcFunDanmu.CommonActionSignalRichText.ImageSegment)
    MergeFrom(*source);
  }
}

void CommonActionSignalRichText_ImageSegment::MergeFrom(const CommonActionSignalRichText_ImageSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.CommonActionSignalRichText.ImageSegment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pictures_.MergeFrom(from.pictures_);
  if (!from.alternativetext().empty()) {
    _internal_set_alternativetext(from._internal_alternativetext());
  }
  if (!from.alternativecolor().empty()) {
    _internal_set_alternativecolor(from._internal_alternativecolor());
  }
}

void CommonActionSignalRichText_ImageSegment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AcFunDanmu.CommonActionSignalRichText.ImageSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonActionSignalRichText_ImageSegment::CopyFrom(const CommonActionSignalRichText_ImageSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.CommonActionSignalRichText.ImageSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonActionSignalRichText_ImageSegment::IsInitialized() const {
  return true;
}

void CommonActionSignalRichText_ImageSegment::InternalSwap(CommonActionSignalRichText_ImageSegment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  pictures_.InternalSwap(&other->pictures_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &alternativetext_, GetArenaForAllocation(),
      &other->alternativetext_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &alternativecolor_, GetArenaForAllocation(),
      &other->alternativecolor_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CommonActionSignalRichText_ImageSegment::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CommonActionSignalRichText_2eproto_getter, &descriptor_table_CommonActionSignalRichText_2eproto_once,
      file_level_metadata_CommonActionSignalRichText_2eproto[0]);
}

// ===================================================================

class CommonActionSignalRichText_PlainSegment::_Internal {
 public:
};

CommonActionSignalRichText_PlainSegment::CommonActionSignalRichText_PlainSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.CommonActionSignalRichText.PlainSegment)
}
CommonActionSignalRichText_PlainSegment::CommonActionSignalRichText_PlainSegment(const CommonActionSignalRichText_PlainSegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_text().empty()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArenaForAllocation());
  }
  color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_color().empty()) {
    color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_color(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.CommonActionSignalRichText.PlainSegment)
}

void CommonActionSignalRichText_PlainSegment::SharedCtor() {
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CommonActionSignalRichText_PlainSegment::~CommonActionSignalRichText_PlainSegment() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.CommonActionSignalRichText.PlainSegment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommonActionSignalRichText_PlainSegment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  color_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CommonActionSignalRichText_PlainSegment::ArenaDtor(void* object) {
  CommonActionSignalRichText_PlainSegment* _this = reinterpret_cast< CommonActionSignalRichText_PlainSegment* >(object);
  (void)_this;
}
void CommonActionSignalRichText_PlainSegment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommonActionSignalRichText_PlainSegment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommonActionSignalRichText_PlainSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.CommonActionSignalRichText.PlainSegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.ClearToEmpty();
  color_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommonActionSignalRichText_PlainSegment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AcFunDanmu.CommonActionSignalRichText.PlainSegment.text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_color();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AcFunDanmu.CommonActionSignalRichText.PlainSegment.color"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommonActionSignalRichText_PlainSegment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.CommonActionSignalRichText.PlainSegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (!this->text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.CommonActionSignalRichText.PlainSegment.text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  // string color = 2;
  if (!this->color().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_color().data(), static_cast<int>(this->_internal_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.CommonActionSignalRichText.PlainSegment.color");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.CommonActionSignalRichText.PlainSegment)
  return target;
}

size_t CommonActionSignalRichText_PlainSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.CommonActionSignalRichText.PlainSegment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 1;
  if (!this->text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // string color = 2;
  if (!this->color().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_color());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommonActionSignalRichText_PlainSegment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AcFunDanmu.CommonActionSignalRichText.PlainSegment)
  GOOGLE_DCHECK_NE(&from, this);
  const CommonActionSignalRichText_PlainSegment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommonActionSignalRichText_PlainSegment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AcFunDanmu.CommonActionSignalRichText.PlainSegment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AcFunDanmu.CommonActionSignalRichText.PlainSegment)
    MergeFrom(*source);
  }
}

void CommonActionSignalRichText_PlainSegment::MergeFrom(const CommonActionSignalRichText_PlainSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.CommonActionSignalRichText.PlainSegment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.text().empty()) {
    _internal_set_text(from._internal_text());
  }
  if (!from.color().empty()) {
    _internal_set_color(from._internal_color());
  }
}

void CommonActionSignalRichText_PlainSegment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AcFunDanmu.CommonActionSignalRichText.PlainSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonActionSignalRichText_PlainSegment::CopyFrom(const CommonActionSignalRichText_PlainSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.CommonActionSignalRichText.PlainSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonActionSignalRichText_PlainSegment::IsInitialized() const {
  return true;
}

void CommonActionSignalRichText_PlainSegment::InternalSwap(CommonActionSignalRichText_PlainSegment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &text_, GetArenaForAllocation(),
      &other->text_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &color_, GetArenaForAllocation(),
      &other->color_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CommonActionSignalRichText_PlainSegment::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CommonActionSignalRichText_2eproto_getter, &descriptor_table_CommonActionSignalRichText_2eproto_once,
      file_level_metadata_CommonActionSignalRichText_2eproto[1]);
}

// ===================================================================

class CommonActionSignalRichText_RichTextSegment::_Internal {
 public:
  static const ::AcFunDanmu::CommonActionSignalRichText_UserInfoSegment& userinfo(const CommonActionSignalRichText_RichTextSegment* msg);
  static const ::AcFunDanmu::CommonActionSignalRichText_PlainSegment& plain(const CommonActionSignalRichText_RichTextSegment* msg);
  static const ::AcFunDanmu::CommonActionSignalRichText_ImageSegment& image(const CommonActionSignalRichText_RichTextSegment* msg);
};

const ::AcFunDanmu::CommonActionSignalRichText_UserInfoSegment&
CommonActionSignalRichText_RichTextSegment::_Internal::userinfo(const CommonActionSignalRichText_RichTextSegment* msg) {
  return *msg->segment_.userinfo_;
}
const ::AcFunDanmu::CommonActionSignalRichText_PlainSegment&
CommonActionSignalRichText_RichTextSegment::_Internal::plain(const CommonActionSignalRichText_RichTextSegment* msg) {
  return *msg->segment_.plain_;
}
const ::AcFunDanmu::CommonActionSignalRichText_ImageSegment&
CommonActionSignalRichText_RichTextSegment::_Internal::image(const CommonActionSignalRichText_RichTextSegment* msg) {
  return *msg->segment_.image_;
}
void CommonActionSignalRichText_RichTextSegment::set_allocated_userinfo(::AcFunDanmu::CommonActionSignalRichText_UserInfoSegment* userinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_segment();
  if (userinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::AcFunDanmu::CommonActionSignalRichText_UserInfoSegment>::GetOwningArena(userinfo);
    if (message_arena != submessage_arena) {
      userinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userinfo, submessage_arena);
    }
    set_has_userinfo();
    segment_.userinfo_ = userinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.CommonActionSignalRichText.RichTextSegment.userInfo)
}
void CommonActionSignalRichText_RichTextSegment::set_allocated_plain(::AcFunDanmu::CommonActionSignalRichText_PlainSegment* plain) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_segment();
  if (plain) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::AcFunDanmu::CommonActionSignalRichText_PlainSegment>::GetOwningArena(plain);
    if (message_arena != submessage_arena) {
      plain = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plain, submessage_arena);
    }
    set_has_plain();
    segment_.plain_ = plain;
  }
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.CommonActionSignalRichText.RichTextSegment.plain)
}
void CommonActionSignalRichText_RichTextSegment::set_allocated_image(::AcFunDanmu::CommonActionSignalRichText_ImageSegment* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_segment();
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::AcFunDanmu::CommonActionSignalRichText_ImageSegment>::GetOwningArena(image);
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    set_has_image();
    segment_.image_ = image;
  }
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.CommonActionSignalRichText.RichTextSegment.image)
}
CommonActionSignalRichText_RichTextSegment::CommonActionSignalRichText_RichTextSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.CommonActionSignalRichText.RichTextSegment)
}
CommonActionSignalRichText_RichTextSegment::CommonActionSignalRichText_RichTextSegment(const CommonActionSignalRichText_RichTextSegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_segment();
  switch (from.segment_case()) {
    case kUserInfo: {
      _internal_mutable_userinfo()->::AcFunDanmu::CommonActionSignalRichText_UserInfoSegment::MergeFrom(from._internal_userinfo());
      break;
    }
    case kPlain: {
      _internal_mutable_plain()->::AcFunDanmu::CommonActionSignalRichText_PlainSegment::MergeFrom(from._internal_plain());
      break;
    }
    case kImage: {
      _internal_mutable_image()->::AcFunDanmu::CommonActionSignalRichText_ImageSegment::MergeFrom(from._internal_image());
      break;
    }
    case SEGMENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.CommonActionSignalRichText.RichTextSegment)
}

void CommonActionSignalRichText_RichTextSegment::SharedCtor() {
clear_has_segment();
}

CommonActionSignalRichText_RichTextSegment::~CommonActionSignalRichText_RichTextSegment() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.CommonActionSignalRichText.RichTextSegment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommonActionSignalRichText_RichTextSegment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_segment()) {
    clear_segment();
  }
}

void CommonActionSignalRichText_RichTextSegment::ArenaDtor(void* object) {
  CommonActionSignalRichText_RichTextSegment* _this = reinterpret_cast< CommonActionSignalRichText_RichTextSegment* >(object);
  (void)_this;
}
void CommonActionSignalRichText_RichTextSegment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommonActionSignalRichText_RichTextSegment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommonActionSignalRichText_RichTextSegment::clear_segment() {
// @@protoc_insertion_point(one_of_clear_start:AcFunDanmu.CommonActionSignalRichText.RichTextSegment)
  switch (segment_case()) {
    case kUserInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete segment_.userinfo_;
      }
      break;
    }
    case kPlain: {
      if (GetArenaForAllocation() == nullptr) {
        delete segment_.plain_;
      }
      break;
    }
    case kImage: {
      if (GetArenaForAllocation() == nullptr) {
        delete segment_.image_;
      }
      break;
    }
    case SEGMENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SEGMENT_NOT_SET;
}


void CommonActionSignalRichText_RichTextSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.CommonActionSignalRichText.RichTextSegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_segment();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommonActionSignalRichText_RichTextSegment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .AcFunDanmu.CommonActionSignalRichText.UserInfoSegment userInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_userinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AcFunDanmu.CommonActionSignalRichText.PlainSegment plain = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_plain(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AcFunDanmu.CommonActionSignalRichText.ImageSegment image = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommonActionSignalRichText_RichTextSegment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.CommonActionSignalRichText.RichTextSegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AcFunDanmu.CommonActionSignalRichText.UserInfoSegment userInfo = 1;
  if (_internal_has_userinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::userinfo(this), target, stream);
  }

  // .AcFunDanmu.CommonActionSignalRichText.PlainSegment plain = 2;
  if (_internal_has_plain()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::plain(this), target, stream);
  }

  // .AcFunDanmu.CommonActionSignalRichText.ImageSegment image = 3;
  if (_internal_has_image()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::image(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.CommonActionSignalRichText.RichTextSegment)
  return target;
}

size_t CommonActionSignalRichText_RichTextSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.CommonActionSignalRichText.RichTextSegment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (segment_case()) {
    // .AcFunDanmu.CommonActionSignalRichText.UserInfoSegment userInfo = 1;
    case kUserInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *segment_.userinfo_);
      break;
    }
    // .AcFunDanmu.CommonActionSignalRichText.PlainSegment plain = 2;
    case kPlain: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *segment_.plain_);
      break;
    }
    // .AcFunDanmu.CommonActionSignalRichText.ImageSegment image = 3;
    case kImage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *segment_.image_);
      break;
    }
    case SEGMENT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommonActionSignalRichText_RichTextSegment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AcFunDanmu.CommonActionSignalRichText.RichTextSegment)
  GOOGLE_DCHECK_NE(&from, this);
  const CommonActionSignalRichText_RichTextSegment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommonActionSignalRichText_RichTextSegment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AcFunDanmu.CommonActionSignalRichText.RichTextSegment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AcFunDanmu.CommonActionSignalRichText.RichTextSegment)
    MergeFrom(*source);
  }
}

void CommonActionSignalRichText_RichTextSegment::MergeFrom(const CommonActionSignalRichText_RichTextSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.CommonActionSignalRichText.RichTextSegment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.segment_case()) {
    case kUserInfo: {
      _internal_mutable_userinfo()->::AcFunDanmu::CommonActionSignalRichText_UserInfoSegment::MergeFrom(from._internal_userinfo());
      break;
    }
    case kPlain: {
      _internal_mutable_plain()->::AcFunDanmu::CommonActionSignalRichText_PlainSegment::MergeFrom(from._internal_plain());
      break;
    }
    case kImage: {
      _internal_mutable_image()->::AcFunDanmu::CommonActionSignalRichText_ImageSegment::MergeFrom(from._internal_image());
      break;
    }
    case SEGMENT_NOT_SET: {
      break;
    }
  }
}

void CommonActionSignalRichText_RichTextSegment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AcFunDanmu.CommonActionSignalRichText.RichTextSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonActionSignalRichText_RichTextSegment::CopyFrom(const CommonActionSignalRichText_RichTextSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.CommonActionSignalRichText.RichTextSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonActionSignalRichText_RichTextSegment::IsInitialized() const {
  return true;
}

void CommonActionSignalRichText_RichTextSegment::InternalSwap(CommonActionSignalRichText_RichTextSegment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(segment_, other->segment_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommonActionSignalRichText_RichTextSegment::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CommonActionSignalRichText_2eproto_getter, &descriptor_table_CommonActionSignalRichText_2eproto_once,
      file_level_metadata_CommonActionSignalRichText_2eproto[2]);
}

// ===================================================================

class CommonActionSignalRichText_UserInfoSegment::_Internal {
 public:
  static const ::AcFunDanmu::ZtLiveUserInfo& user(const CommonActionSignalRichText_UserInfoSegment* msg);
};

const ::AcFunDanmu::ZtLiveUserInfo&
CommonActionSignalRichText_UserInfoSegment::_Internal::user(const CommonActionSignalRichText_UserInfoSegment* msg) {
  return *msg->user_;
}
void CommonActionSignalRichText_UserInfoSegment::clear_user() {
  if (GetArenaForAllocation() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
CommonActionSignalRichText_UserInfoSegment::CommonActionSignalRichText_UserInfoSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.CommonActionSignalRichText.UserInfoSegment)
}
CommonActionSignalRichText_UserInfoSegment::CommonActionSignalRichText_UserInfoSegment(const CommonActionSignalRichText_UserInfoSegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_color().empty()) {
    color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_color(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user()) {
    user_ = new ::AcFunDanmu::ZtLiveUserInfo(*from.user_);
  } else {
    user_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.CommonActionSignalRichText.UserInfoSegment)
}

void CommonActionSignalRichText_UserInfoSegment::SharedCtor() {
color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
user_ = nullptr;
}

CommonActionSignalRichText_UserInfoSegment::~CommonActionSignalRichText_UserInfoSegment() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.CommonActionSignalRichText.UserInfoSegment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommonActionSignalRichText_UserInfoSegment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  color_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_;
}

void CommonActionSignalRichText_UserInfoSegment::ArenaDtor(void* object) {
  CommonActionSignalRichText_UserInfoSegment* _this = reinterpret_cast< CommonActionSignalRichText_UserInfoSegment* >(object);
  (void)_this;
}
void CommonActionSignalRichText_UserInfoSegment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommonActionSignalRichText_UserInfoSegment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommonActionSignalRichText_UserInfoSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.CommonActionSignalRichText.UserInfoSegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  color_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommonActionSignalRichText_UserInfoSegment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .AcFunDanmu.ZtLiveUserInfo user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_color();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AcFunDanmu.CommonActionSignalRichText.UserInfoSegment.color"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommonActionSignalRichText_UserInfoSegment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.CommonActionSignalRichText.UserInfoSegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AcFunDanmu.ZtLiveUserInfo user = 1;
  if (this->has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user(this), target, stream);
  }

  // string color = 2;
  if (!this->color().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_color().data(), static_cast<int>(this->_internal_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.CommonActionSignalRichText.UserInfoSegment.color");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.CommonActionSignalRichText.UserInfoSegment)
  return target;
}

size_t CommonActionSignalRichText_UserInfoSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.CommonActionSignalRichText.UserInfoSegment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string color = 2;
  if (!this->color().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_color());
  }

  // .AcFunDanmu.ZtLiveUserInfo user = 1;
  if (this->has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommonActionSignalRichText_UserInfoSegment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AcFunDanmu.CommonActionSignalRichText.UserInfoSegment)
  GOOGLE_DCHECK_NE(&from, this);
  const CommonActionSignalRichText_UserInfoSegment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommonActionSignalRichText_UserInfoSegment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AcFunDanmu.CommonActionSignalRichText.UserInfoSegment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AcFunDanmu.CommonActionSignalRichText.UserInfoSegment)
    MergeFrom(*source);
  }
}

void CommonActionSignalRichText_UserInfoSegment::MergeFrom(const CommonActionSignalRichText_UserInfoSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.CommonActionSignalRichText.UserInfoSegment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.color().empty()) {
    _internal_set_color(from._internal_color());
  }
  if (from.has_user()) {
    _internal_mutable_user()->::AcFunDanmu::ZtLiveUserInfo::MergeFrom(from._internal_user());
  }
}

void CommonActionSignalRichText_UserInfoSegment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AcFunDanmu.CommonActionSignalRichText.UserInfoSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonActionSignalRichText_UserInfoSegment::CopyFrom(const CommonActionSignalRichText_UserInfoSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.CommonActionSignalRichText.UserInfoSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonActionSignalRichText_UserInfoSegment::IsInitialized() const {
  return true;
}

void CommonActionSignalRichText_UserInfoSegment::InternalSwap(CommonActionSignalRichText_UserInfoSegment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &color_, GetArenaForAllocation(),
      &other->color_, other->GetArenaForAllocation()
  );
  swap(user_, other->user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommonActionSignalRichText_UserInfoSegment::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CommonActionSignalRichText_2eproto_getter, &descriptor_table_CommonActionSignalRichText_2eproto_once,
      file_level_metadata_CommonActionSignalRichText_2eproto[3]);
}

// ===================================================================

class CommonActionSignalRichText::_Internal {
 public:
};

CommonActionSignalRichText::CommonActionSignalRichText(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  segments_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.CommonActionSignalRichText)
}
CommonActionSignalRichText::CommonActionSignalRichText(const CommonActionSignalRichText& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      segments_(from.segments_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sendtimems_ = from.sendtimems_;
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.CommonActionSignalRichText)
}

void CommonActionSignalRichText::SharedCtor() {
sendtimems_ = int64_t{0};
}

CommonActionSignalRichText::~CommonActionSignalRichText() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.CommonActionSignalRichText)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommonActionSignalRichText::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CommonActionSignalRichText::ArenaDtor(void* object) {
  CommonActionSignalRichText* _this = reinterpret_cast< CommonActionSignalRichText* >(object);
  (void)_this;
}
void CommonActionSignalRichText::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommonActionSignalRichText::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommonActionSignalRichText::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.CommonActionSignalRichText)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segments_.Clear();
  sendtimems_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommonActionSignalRichText::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .AcFunDanmu.CommonActionSignalRichText.RichTextSegment segments = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_segments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 sendTimeMs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sendtimems_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommonActionSignalRichText::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.CommonActionSignalRichText)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .AcFunDanmu.CommonActionSignalRichText.RichTextSegment segments = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_segments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_segments(i), target, stream);
  }

  // int64 sendTimeMs = 2;
  if (this->sendtimems() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_sendtimems(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.CommonActionSignalRichText)
  return target;
}

size_t CommonActionSignalRichText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.CommonActionSignalRichText)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .AcFunDanmu.CommonActionSignalRichText.RichTextSegment segments = 1;
  total_size += 1UL * this->_internal_segments_size();
  for (const auto& msg : this->segments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 sendTimeMs = 2;
  if (this->sendtimems() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_sendtimems());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommonActionSignalRichText::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AcFunDanmu.CommonActionSignalRichText)
  GOOGLE_DCHECK_NE(&from, this);
  const CommonActionSignalRichText* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommonActionSignalRichText>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AcFunDanmu.CommonActionSignalRichText)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AcFunDanmu.CommonActionSignalRichText)
    MergeFrom(*source);
  }
}

void CommonActionSignalRichText::MergeFrom(const CommonActionSignalRichText& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.CommonActionSignalRichText)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  segments_.MergeFrom(from.segments_);
  if (from.sendtimems() != 0) {
    _internal_set_sendtimems(from._internal_sendtimems());
  }
}

void CommonActionSignalRichText::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AcFunDanmu.CommonActionSignalRichText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonActionSignalRichText::CopyFrom(const CommonActionSignalRichText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.CommonActionSignalRichText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonActionSignalRichText::IsInitialized() const {
  return true;
}

void CommonActionSignalRichText::InternalSwap(CommonActionSignalRichText* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  segments_.InternalSwap(&other->segments_);
  swap(sendtimems_, other->sendtimems_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommonActionSignalRichText::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CommonActionSignalRichText_2eproto_getter, &descriptor_table_CommonActionSignalRichText_2eproto_once,
      file_level_metadata_CommonActionSignalRichText_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AcFunDanmu::CommonActionSignalRichText_ImageSegment* Arena::CreateMaybeMessage< ::AcFunDanmu::CommonActionSignalRichText_ImageSegment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::CommonActionSignalRichText_ImageSegment >(arena);
}
template<> PROTOBUF_NOINLINE ::AcFunDanmu::CommonActionSignalRichText_PlainSegment* Arena::CreateMaybeMessage< ::AcFunDanmu::CommonActionSignalRichText_PlainSegment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::CommonActionSignalRichText_PlainSegment >(arena);
}
template<> PROTOBUF_NOINLINE ::AcFunDanmu::CommonActionSignalRichText_RichTextSegment* Arena::CreateMaybeMessage< ::AcFunDanmu::CommonActionSignalRichText_RichTextSegment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::CommonActionSignalRichText_RichTextSegment >(arena);
}
template<> PROTOBUF_NOINLINE ::AcFunDanmu::CommonActionSignalRichText_UserInfoSegment* Arena::CreateMaybeMessage< ::AcFunDanmu::CommonActionSignalRichText_UserInfoSegment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::CommonActionSignalRichText_UserInfoSegment >(arena);
}
template<> PROTOBUF_NOINLINE ::AcFunDanmu::CommonActionSignalRichText* Arena::CreateMaybeMessage< ::AcFunDanmu::CommonActionSignalRichText >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::CommonActionSignalRichText >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
