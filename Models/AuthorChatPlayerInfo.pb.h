// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AuthorChatPlayerInfo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_AuthorChatPlayerInfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_AuthorChatPlayerInfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ZtLiveUserInfo.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_AuthorChatPlayerInfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_AuthorChatPlayerInfo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_AuthorChatPlayerInfo_2eproto;
namespace AcFunDanmu {
class AuthorChatPlayerInfo;
struct AuthorChatPlayerInfoDefaultTypeInternal;
extern AuthorChatPlayerInfoDefaultTypeInternal _AuthorChatPlayerInfo_default_instance_;
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::AuthorChatPlayerInfo* Arena::CreateMaybeMessage<::AcFunDanmu::AuthorChatPlayerInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {

// ===================================================================

class AuthorChatPlayerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.AuthorChatPlayerInfo) */ {
 public:
  inline AuthorChatPlayerInfo() : AuthorChatPlayerInfo(nullptr) {}
  ~AuthorChatPlayerInfo() override;
  explicit constexpr AuthorChatPlayerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthorChatPlayerInfo(const AuthorChatPlayerInfo& from);
  AuthorChatPlayerInfo(AuthorChatPlayerInfo&& from) noexcept
    : AuthorChatPlayerInfo() {
    *this = ::std::move(from);
  }

  inline AuthorChatPlayerInfo& operator=(const AuthorChatPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthorChatPlayerInfo& operator=(AuthorChatPlayerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthorChatPlayerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthorChatPlayerInfo* internal_default_instance() {
    return reinterpret_cast<const AuthorChatPlayerInfo*>(
               &_AuthorChatPlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AuthorChatPlayerInfo& a, AuthorChatPlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthorChatPlayerInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthorChatPlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthorChatPlayerInfo* New() const final {
    return new AuthorChatPlayerInfo();
  }

  AuthorChatPlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthorChatPlayerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthorChatPlayerInfo& from);
  void MergeFrom(const AuthorChatPlayerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthorChatPlayerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.AuthorChatPlayerInfo";
  }
  protected:
  explicit AuthorChatPlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLiveIdFieldNumber = 2,
    kPlayerFieldNumber = 1,
    kEnableJumpPeerLiveRoomFieldNumber = 3,
  };
  // string liveId = 2;
  void clear_liveid();
  const std::string& liveid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_liveid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_liveid();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_liveid();
  void set_allocated_liveid(std::string* liveid);
  private:
  const std::string& _internal_liveid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_liveid(const std::string& value);
  std::string* _internal_mutable_liveid();
  public:

  // .AcFunDanmu.ZtLiveUserInfo player = 1;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::AcFunDanmu::ZtLiveUserInfo& player() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::AcFunDanmu::ZtLiveUserInfo* release_player();
  ::AcFunDanmu::ZtLiveUserInfo* mutable_player();
  void set_allocated_player(::AcFunDanmu::ZtLiveUserInfo* player);
  private:
  const ::AcFunDanmu::ZtLiveUserInfo& _internal_player() const;
  ::AcFunDanmu::ZtLiveUserInfo* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::AcFunDanmu::ZtLiveUserInfo* player);
  ::AcFunDanmu::ZtLiveUserInfo* unsafe_arena_release_player();

  // bool enableJumpPeerLiveRoom = 3;
  void clear_enablejumppeerliveroom();
  bool enablejumppeerliveroom() const;
  void set_enablejumppeerliveroom(bool value);
  private:
  bool _internal_enablejumppeerliveroom() const;
  void _internal_set_enablejumppeerliveroom(bool value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.AuthorChatPlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr liveid_;
  ::AcFunDanmu::ZtLiveUserInfo* player_;
  bool enablejumppeerliveroom_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AuthorChatPlayerInfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AuthorChatPlayerInfo

// .AcFunDanmu.ZtLiveUserInfo player = 1;
inline bool AuthorChatPlayerInfo::_internal_has_player() const {
  return this != internal_default_instance() && player_ != nullptr;
}
inline bool AuthorChatPlayerInfo::has_player() const {
  return _internal_has_player();
}
inline const ::AcFunDanmu::ZtLiveUserInfo& AuthorChatPlayerInfo::_internal_player() const {
  const ::AcFunDanmu::ZtLiveUserInfo* p = player_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::ZtLiveUserInfo&>(
      ::AcFunDanmu::_ZtLiveUserInfo_default_instance_);
}
inline const ::AcFunDanmu::ZtLiveUserInfo& AuthorChatPlayerInfo::player() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.AuthorChatPlayerInfo.player)
  return _internal_player();
}
inline void AuthorChatPlayerInfo::unsafe_arena_set_allocated_player(
    ::AcFunDanmu::ZtLiveUserInfo* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.AuthorChatPlayerInfo.player)
}
inline ::AcFunDanmu::ZtLiveUserInfo* AuthorChatPlayerInfo::release_player() {
  
  ::AcFunDanmu::ZtLiveUserInfo* temp = player_;
  player_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::ZtLiveUserInfo* AuthorChatPlayerInfo::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.AuthorChatPlayerInfo.player)
  
  ::AcFunDanmu::ZtLiveUserInfo* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::ZtLiveUserInfo* AuthorChatPlayerInfo::_internal_mutable_player() {
  
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::ZtLiveUserInfo>(GetArenaForAllocation());
    player_ = p;
  }
  return player_;
}
inline ::AcFunDanmu::ZtLiveUserInfo* AuthorChatPlayerInfo::mutable_player() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.AuthorChatPlayerInfo.player)
  return _internal_mutable_player();
}
inline void AuthorChatPlayerInfo::set_allocated_player(::AcFunDanmu::ZtLiveUserInfo* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player));
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.AuthorChatPlayerInfo.player)
}

// string liveId = 2;
inline void AuthorChatPlayerInfo::clear_liveid() {
  liveid_.ClearToEmpty();
}
inline const std::string& AuthorChatPlayerInfo::liveid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.AuthorChatPlayerInfo.liveId)
  return _internal_liveid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthorChatPlayerInfo::set_liveid(ArgT0&& arg0, ArgT... args) {
 
 liveid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.AuthorChatPlayerInfo.liveId)
}
inline std::string* AuthorChatPlayerInfo::mutable_liveid() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.AuthorChatPlayerInfo.liveId)
  return _internal_mutable_liveid();
}
inline const std::string& AuthorChatPlayerInfo::_internal_liveid() const {
  return liveid_.Get();
}
inline void AuthorChatPlayerInfo::_internal_set_liveid(const std::string& value) {
  
  liveid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AuthorChatPlayerInfo::_internal_mutable_liveid() {
  
  return liveid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AuthorChatPlayerInfo::release_liveid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.AuthorChatPlayerInfo.liveId)
  return liveid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AuthorChatPlayerInfo::set_allocated_liveid(std::string* liveid) {
  if (liveid != nullptr) {
    
  } else {
    
  }
  liveid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), liveid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.AuthorChatPlayerInfo.liveId)
}

// bool enableJumpPeerLiveRoom = 3;
inline void AuthorChatPlayerInfo::clear_enablejumppeerliveroom() {
  enablejumppeerliveroom_ = false;
}
inline bool AuthorChatPlayerInfo::_internal_enablejumppeerliveroom() const {
  return enablejumppeerliveroom_;
}
inline bool AuthorChatPlayerInfo::enablejumppeerliveroom() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.AuthorChatPlayerInfo.enableJumpPeerLiveRoom)
  return _internal_enablejumppeerliveroom();
}
inline void AuthorChatPlayerInfo::_internal_set_enablejumppeerliveroom(bool value) {
  
  enablejumppeerliveroom_ = value;
}
inline void AuthorChatPlayerInfo::set_enablejumppeerliveroom(bool value) {
  _internal_set_enablejumppeerliveroom(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.AuthorChatPlayerInfo.enableJumpPeerLiveRoom)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace AcFunDanmu

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_AuthorChatPlayerInfo_2eproto
