// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommonActionSignalUserShareLive.proto

#include "CommonActionSignalUserShareLive.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace AcFunDanmu {
PROTOBUF_CONSTEXPR CommonActionSignalUserShareLive::CommonActionSignalUserShareLive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.shareplatformicon_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.userinfo_)*/nullptr
  , /*decltype(_impl_.sendtimems_)*/int64_t{0}
  , /*decltype(_impl_.shareplatformid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CommonActionSignalUserShareLiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommonActionSignalUserShareLiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommonActionSignalUserShareLiveDefaultTypeInternal() {}
  union {
    CommonActionSignalUserShareLive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommonActionSignalUserShareLiveDefaultTypeInternal _CommonActionSignalUserShareLive_default_instance_;
}  // namespace AcFunDanmu
static ::_pb::Metadata file_level_metadata_CommonActionSignalUserShareLive_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_CommonActionSignalUserShareLive_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_CommonActionSignalUserShareLive_2eproto = nullptr;

const uint32_t TableStruct_CommonActionSignalUserShareLive_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonActionSignalUserShareLive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonActionSignalUserShareLive, _impl_.userinfo_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonActionSignalUserShareLive, _impl_.shareplatformid_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonActionSignalUserShareLive, _impl_.shareplatformicon_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonActionSignalUserShareLive, _impl_.sendtimems_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::AcFunDanmu::CommonActionSignalUserShareLive)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::AcFunDanmu::_CommonActionSignalUserShareLive_default_instance_._instance,
};

const char descriptor_table_protodef_CommonActionSignalUserShareLive_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%CommonActionSignalUserShareLive.proto\022"
  "\nAcFunDanmu\032\024ZtLiveUserInfo.proto\"\260\001\n\037Co"
  "mmonActionSignalUserShareLive\022,\n\010userInf"
  "o\030\001 \001(\0132\032.AcFunDanmu.ZtLiveUserInfo\022\027\n\017s"
  "harePlatformId\030\002 \001(\005\022\031\n\021sharePlatformIco"
  "n\030\003 \001(\t\022\022\n\nsendTimeMs\030\004 \001(\003\"\027\n\007unknown\022\005"
  "\n\001e\020\000\022\005\n\001f\020\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_CommonActionSignalUserShareLive_2eproto_deps[1] = {
  &::descriptor_table_ZtLiveUserInfo_2eproto,
};
static ::_pbi::once_flag descriptor_table_CommonActionSignalUserShareLive_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_CommonActionSignalUserShareLive_2eproto = {
    false, false, 260, descriptor_table_protodef_CommonActionSignalUserShareLive_2eproto,
    "CommonActionSignalUserShareLive.proto",
    &descriptor_table_CommonActionSignalUserShareLive_2eproto_once, descriptor_table_CommonActionSignalUserShareLive_2eproto_deps, 1, 1,
    schemas, file_default_instances, TableStruct_CommonActionSignalUserShareLive_2eproto::offsets,
    file_level_metadata_CommonActionSignalUserShareLive_2eproto, file_level_enum_descriptors_CommonActionSignalUserShareLive_2eproto,
    file_level_service_descriptors_CommonActionSignalUserShareLive_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_CommonActionSignalUserShareLive_2eproto_getter() {
  return &descriptor_table_CommonActionSignalUserShareLive_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_CommonActionSignalUserShareLive_2eproto(&descriptor_table_CommonActionSignalUserShareLive_2eproto);
namespace AcFunDanmu {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommonActionSignalUserShareLive_unknown_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_CommonActionSignalUserShareLive_2eproto);
  return file_level_enum_descriptors_CommonActionSignalUserShareLive_2eproto[0];
}
bool CommonActionSignalUserShareLive_unknown_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CommonActionSignalUserShareLive_unknown CommonActionSignalUserShareLive::e;
constexpr CommonActionSignalUserShareLive_unknown CommonActionSignalUserShareLive::f;
constexpr CommonActionSignalUserShareLive_unknown CommonActionSignalUserShareLive::unknown_MIN;
constexpr CommonActionSignalUserShareLive_unknown CommonActionSignalUserShareLive::unknown_MAX;
constexpr int CommonActionSignalUserShareLive::unknown_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class CommonActionSignalUserShareLive::_Internal {
 public:
  static const ::AcFunDanmu::ZtLiveUserInfo& userinfo(const CommonActionSignalUserShareLive* msg);
};

const ::AcFunDanmu::ZtLiveUserInfo&
CommonActionSignalUserShareLive::_Internal::userinfo(const CommonActionSignalUserShareLive* msg) {
  return *msg->_impl_.userinfo_;
}
void CommonActionSignalUserShareLive::clear_userinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.userinfo_ != nullptr) {
    delete _impl_.userinfo_;
  }
  _impl_.userinfo_ = nullptr;
}
CommonActionSignalUserShareLive::CommonActionSignalUserShareLive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.CommonActionSignalUserShareLive)
}
CommonActionSignalUserShareLive::CommonActionSignalUserShareLive(const CommonActionSignalUserShareLive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommonActionSignalUserShareLive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.shareplatformicon_){}
    , decltype(_impl_.userinfo_){nullptr}
    , decltype(_impl_.sendtimems_){}
    , decltype(_impl_.shareplatformid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.shareplatformicon_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.shareplatformicon_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_shareplatformicon().empty()) {
    _this->_impl_.shareplatformicon_.Set(from._internal_shareplatformicon(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_userinfo()) {
    _this->_impl_.userinfo_ = new ::AcFunDanmu::ZtLiveUserInfo(*from._impl_.userinfo_);
  }
  ::memcpy(&_impl_.sendtimems_, &from._impl_.sendtimems_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.shareplatformid_) -
    reinterpret_cast<char*>(&_impl_.sendtimems_)) + sizeof(_impl_.shareplatformid_));
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.CommonActionSignalUserShareLive)
}

inline void CommonActionSignalUserShareLive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.shareplatformicon_){}
    , decltype(_impl_.userinfo_){nullptr}
    , decltype(_impl_.sendtimems_){int64_t{0}}
    , decltype(_impl_.shareplatformid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.shareplatformicon_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.shareplatformicon_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CommonActionSignalUserShareLive::~CommonActionSignalUserShareLive() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.CommonActionSignalUserShareLive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommonActionSignalUserShareLive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.shareplatformicon_.Destroy();
  if (this != internal_default_instance()) delete _impl_.userinfo_;
}

void CommonActionSignalUserShareLive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommonActionSignalUserShareLive::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.CommonActionSignalUserShareLive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.shareplatformicon_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.userinfo_ != nullptr) {
    delete _impl_.userinfo_;
  }
  _impl_.userinfo_ = nullptr;
  ::memset(&_impl_.sendtimems_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.shareplatformid_) -
      reinterpret_cast<char*>(&_impl_.sendtimems_)) + sizeof(_impl_.shareplatformid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommonActionSignalUserShareLive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .AcFunDanmu.ZtLiveUserInfo userInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_userinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 sharePlatformId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.shareplatformid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string sharePlatformIcon = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_shareplatformicon();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.CommonActionSignalUserShareLive.sharePlatformIcon"));
        } else
          goto handle_unusual;
        continue;
      // int64 sendTimeMs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.sendtimems_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommonActionSignalUserShareLive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.CommonActionSignalUserShareLive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .AcFunDanmu.ZtLiveUserInfo userInfo = 1;
  if (this->_internal_has_userinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::userinfo(this),
        _Internal::userinfo(this).GetCachedSize(), target, stream);
  }

  // int32 sharePlatformId = 2;
  if (this->_internal_shareplatformid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_shareplatformid(), target);
  }

  // string sharePlatformIcon = 3;
  if (!this->_internal_shareplatformicon().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_shareplatformicon().data(), static_cast<int>(this->_internal_shareplatformicon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.CommonActionSignalUserShareLive.sharePlatformIcon");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_shareplatformicon(), target);
  }

  // int64 sendTimeMs = 4;
  if (this->_internal_sendtimems() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_sendtimems(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.CommonActionSignalUserShareLive)
  return target;
}

size_t CommonActionSignalUserShareLive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.CommonActionSignalUserShareLive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sharePlatformIcon = 3;
  if (!this->_internal_shareplatformicon().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_shareplatformicon());
  }

  // .AcFunDanmu.ZtLiveUserInfo userInfo = 1;
  if (this->_internal_has_userinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.userinfo_);
  }

  // int64 sendTimeMs = 4;
  if (this->_internal_sendtimems() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_sendtimems());
  }

  // int32 sharePlatformId = 2;
  if (this->_internal_shareplatformid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_shareplatformid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommonActionSignalUserShareLive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommonActionSignalUserShareLive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommonActionSignalUserShareLive::GetClassData() const { return &_class_data_; }


void CommonActionSignalUserShareLive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommonActionSignalUserShareLive*>(&to_msg);
  auto& from = static_cast<const CommonActionSignalUserShareLive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.CommonActionSignalUserShareLive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_shareplatformicon().empty()) {
    _this->_internal_set_shareplatformicon(from._internal_shareplatformicon());
  }
  if (from._internal_has_userinfo()) {
    _this->_internal_mutable_userinfo()->::AcFunDanmu::ZtLiveUserInfo::MergeFrom(
        from._internal_userinfo());
  }
  if (from._internal_sendtimems() != 0) {
    _this->_internal_set_sendtimems(from._internal_sendtimems());
  }
  if (from._internal_shareplatformid() != 0) {
    _this->_internal_set_shareplatformid(from._internal_shareplatformid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommonActionSignalUserShareLive::CopyFrom(const CommonActionSignalUserShareLive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.CommonActionSignalUserShareLive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonActionSignalUserShareLive::IsInitialized() const {
  return true;
}

void CommonActionSignalUserShareLive::InternalSwap(CommonActionSignalUserShareLive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.shareplatformicon_, lhs_arena,
      &other->_impl_.shareplatformicon_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommonActionSignalUserShareLive, _impl_.shareplatformid_)
      + sizeof(CommonActionSignalUserShareLive::_impl_.shareplatformid_)
      - PROTOBUF_FIELD_OFFSET(CommonActionSignalUserShareLive, _impl_.userinfo_)>(
          reinterpret_cast<char*>(&_impl_.userinfo_),
          reinterpret_cast<char*>(&other->_impl_.userinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommonActionSignalUserShareLive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CommonActionSignalUserShareLive_2eproto_getter, &descriptor_table_CommonActionSignalUserShareLive_2eproto_once,
      file_level_metadata_CommonActionSignalUserShareLive_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AcFunDanmu::CommonActionSignalUserShareLive*
Arena::CreateMaybeMessage< ::AcFunDanmu::CommonActionSignalUserShareLive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::CommonActionSignalUserShareLive >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
