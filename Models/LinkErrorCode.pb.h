// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LinkErrorCode.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_LinkErrorCode_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_LinkErrorCode_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_LinkErrorCode_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_LinkErrorCode_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_LinkErrorCode_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {

enum LinkErrorCode : int {
  SUCC = 0,
  BASIC_MIN = 10000,
  INTERNEL_ERROR = 10001,
  SERVICE_UNAVAILABLE = 10002,
  SERVICE_TIMEOUT = 10003,
  INVALID_TOKEN = 10004,
  REG_ENCYRPT_WITHOUT_TOKEN = 10005,
  PARSE_PB_HDR_FAIL = 10006,
  PARSE_PB_PLD_FAIL = 10007,
  PARSE_PB_FAIL = 10008,
  DECODED_LEN_FAIL = 10009,
  INVALID_KEY = 10010,
  ENCRYPT_FAIL = 10011,
  DECRYPT_FAIL = 10012,
  INVALID_TAG = 10013,
  INVALID_VER = 10014,
  INVALID_COMPRESS_TYPE = 10016,
  INVALID_ENCRYPT_TYPE = 10017,
  NOT_REGISTER = 10018,
  USER_NOT_ONLINE = 10019,
  INVALID_COMMAND = 10020,
  PUSH_UNREGISTER_ERROR = 10021,
  INVALID_SID = 10022,
  INVALID_INSTANCE_ID = 10023,
  CLIENT_LOCALE_NOT_MATCH = 10024,
  INVALID_TOKEN_PASSWORD_CHANGED = 10025,
  INVALID_TOKEN_TOKEN_EXPIRED = 10026,
  INVALID_TOKEN_TOKEN_VALUE_ERROR = 10027,
  INVALID_TOKEN_LOGIN_ON_OTHER_DEVICE = 10028,
  FORCE_RECONNECT = 10029,
  CLIENT_TIMEOUT = 10030,
  INVALID_ARGUMENT = 10031,
  INVALID_FORMAT_TOKEN = 10032,
  EMPTY_PAYLOAD = 10033,
  COMPRESS_FAIL = 10034,
  DECOMPRESS_FAIL = 10035,
  OUT_OF_ORDER = 10036,
  OUT_OF_LIMIT = 10037,
  TOO_LARGE_PAYLOAD = 10038,
  ANONYMOUSE_ERROR = 10039,
  BASIC_MAX = 19999,
  LinkErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LinkErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LinkErrorCode_IsValid(int value);
constexpr LinkErrorCode LinkErrorCode_MIN = SUCC;
constexpr LinkErrorCode LinkErrorCode_MAX = BASIC_MAX;
constexpr int LinkErrorCode_ARRAYSIZE = LinkErrorCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LinkErrorCode_descriptor();
template<typename T>
inline const std::string& LinkErrorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LinkErrorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LinkErrorCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LinkErrorCode_descriptor(), enum_t_value);
}
inline bool LinkErrorCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LinkErrorCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LinkErrorCode>(
    LinkErrorCode_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace AcFunDanmu

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::AcFunDanmu::LinkErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::LinkErrorCode>() {
  return ::AcFunDanmu::LinkErrorCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_LinkErrorCode_2eproto
