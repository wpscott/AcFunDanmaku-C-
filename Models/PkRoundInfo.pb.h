// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PkRoundInfo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_PkRoundInfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_PkRoundInfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_PkRoundInfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_PkRoundInfo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_PkRoundInfo_2eproto;
namespace AcFunDanmu {
class PkRoundInfo;
struct PkRoundInfoDefaultTypeInternal;
extern PkRoundInfoDefaultTypeInternal _PkRoundInfo_default_instance_;
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::PkRoundInfo* Arena::CreateMaybeMessage<::AcFunDanmu::PkRoundInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {

// ===================================================================

class PkRoundInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.PkRoundInfo) */ {
 public:
  inline PkRoundInfo() : PkRoundInfo(nullptr) {}
  ~PkRoundInfo() override;
  explicit constexpr PkRoundInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PkRoundInfo(const PkRoundInfo& from);
  PkRoundInfo(PkRoundInfo&& from) noexcept
    : PkRoundInfo() {
    *this = ::std::move(from);
  }

  inline PkRoundInfo& operator=(const PkRoundInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PkRoundInfo& operator=(PkRoundInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PkRoundInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PkRoundInfo* internal_default_instance() {
    return reinterpret_cast<const PkRoundInfo*>(
               &_PkRoundInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PkRoundInfo& a, PkRoundInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PkRoundInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PkRoundInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PkRoundInfo* New() const final {
    return new PkRoundInfo();
  }

  PkRoundInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PkRoundInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PkRoundInfo& from);
  void MergeFrom(const PkRoundInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PkRoundInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.PkRoundInfo";
  }
  protected:
  explicit PkRoundInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAFieldNumber = 1,
    kBFieldNumber = 2,
    kCFieldNumber = 3,
    kDFieldNumber = 4,
    kEFieldNumber = 5,
  };
  // int64 a = 1;
  void clear_a();
  ::PROTOBUF_NAMESPACE_ID::int64 a() const;
  void set_a(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_a() const;
  void _internal_set_a(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 b = 2;
  void clear_b();
  ::PROTOBUF_NAMESPACE_ID::int32 b() const;
  void set_b(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_b() const;
  void _internal_set_b(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 c = 3;
  void clear_c();
  ::PROTOBUF_NAMESPACE_ID::int32 c() const;
  void set_c(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_c() const;
  void _internal_set_c(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 d = 4;
  void clear_d();
  ::PROTOBUF_NAMESPACE_ID::int64 d() const;
  void set_d(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_d() const;
  void _internal_set_d(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 e = 5;
  void clear_e();
  ::PROTOBUF_NAMESPACE_ID::int32 e() const;
  void set_e(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_e() const;
  void _internal_set_e(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.PkRoundInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 a_;
  ::PROTOBUF_NAMESPACE_ID::int32 b_;
  ::PROTOBUF_NAMESPACE_ID::int32 c_;
  ::PROTOBUF_NAMESPACE_ID::int64 d_;
  ::PROTOBUF_NAMESPACE_ID::int32 e_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PkRoundInfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PkRoundInfo

// int64 a = 1;
inline void PkRoundInfo::clear_a() {
  a_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PkRoundInfo::_internal_a() const {
  return a_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PkRoundInfo::a() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.PkRoundInfo.a)
  return _internal_a();
}
inline void PkRoundInfo::_internal_set_a(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  a_ = value;
}
inline void PkRoundInfo::set_a(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.PkRoundInfo.a)
}

// int32 b = 2;
inline void PkRoundInfo::clear_b() {
  b_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PkRoundInfo::_internal_b() const {
  return b_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PkRoundInfo::b() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.PkRoundInfo.b)
  return _internal_b();
}
inline void PkRoundInfo::_internal_set_b(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  b_ = value;
}
inline void PkRoundInfo::set_b(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.PkRoundInfo.b)
}

// int32 c = 3;
inline void PkRoundInfo::clear_c() {
  c_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PkRoundInfo::_internal_c() const {
  return c_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PkRoundInfo::c() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.PkRoundInfo.c)
  return _internal_c();
}
inline void PkRoundInfo::_internal_set_c(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  c_ = value;
}
inline void PkRoundInfo::set_c(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_c(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.PkRoundInfo.c)
}

// int64 d = 4;
inline void PkRoundInfo::clear_d() {
  d_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PkRoundInfo::_internal_d() const {
  return d_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PkRoundInfo::d() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.PkRoundInfo.d)
  return _internal_d();
}
inline void PkRoundInfo::_internal_set_d(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  d_ = value;
}
inline void PkRoundInfo::set_d(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_d(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.PkRoundInfo.d)
}

// int32 e = 5;
inline void PkRoundInfo::clear_e() {
  e_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PkRoundInfo::_internal_e() const {
  return e_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PkRoundInfo::e() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.PkRoundInfo.e)
  return _internal_e();
}
inline void PkRoundInfo::_internal_set_e(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  e_ = value;
}
inline void PkRoundInfo::set_e(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_e(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.PkRoundInfo.e)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace AcFunDanmu

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_PkRoundInfo_2eproto
