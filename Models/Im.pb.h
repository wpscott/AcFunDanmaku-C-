// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Im.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Im_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Im_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Im_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Im_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[184]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Im_2eproto;
namespace AcFunDanmu {
namespace Im {
class Basic;
class BasicDefaultTypeInternal;
extern BasicDefaultTypeInternal _Basic_default_instance_;
class Basic_AccessPoint;
class Basic_AccessPointDefaultTypeInternal;
extern Basic_AccessPointDefaultTypeInternal _Basic_AccessPoint_default_instance_;
class Basic_AccessPointsConfig;
class Basic_AccessPointsConfigDefaultTypeInternal;
extern Basic_AccessPointsConfigDefaultTypeInternal _Basic_AccessPointsConfig_default_instance_;
class Basic_AppInfo;
class Basic_AppInfoDefaultTypeInternal;
extern Basic_AppInfoDefaultTypeInternal _Basic_AppInfo_default_instance_;
class Basic_DeviceInfo;
class Basic_DeviceInfoDefaultTypeInternal;
extern Basic_DeviceInfoDefaultTypeInternal _Basic_DeviceInfo_default_instance_;
class Basic_DownstreamPayload;
class Basic_DownstreamPayloadDefaultTypeInternal;
extern Basic_DownstreamPayloadDefaultTypeInternal _Basic_DownstreamPayload_default_instance_;
class Basic_EnvInfo;
class Basic_EnvInfoDefaultTypeInternal;
extern Basic_EnvInfoDefaultTypeInternal _Basic_EnvInfo_default_instance_;
class Basic_ErrorMessage;
class Basic_ErrorMessageDefaultTypeInternal;
extern Basic_ErrorMessageDefaultTypeInternal _Basic_ErrorMessage_default_instance_;
class Basic_I18nCopyWriting;
class Basic_I18nCopyWritingDefaultTypeInternal;
extern Basic_I18nCopyWritingDefaultTypeInternal _Basic_I18nCopyWriting_default_instance_;
class Basic_KeepAliveRequest;
class Basic_KeepAliveRequestDefaultTypeInternal;
extern Basic_KeepAliveRequestDefaultTypeInternal _Basic_KeepAliveRequest_default_instance_;
class Basic_KeepAliveResponse;
class Basic_KeepAliveResponseDefaultTypeInternal;
extern Basic_KeepAliveResponseDefaultTypeInternal _Basic_KeepAliveResponse_default_instance_;
class Basic_LocaleMessage;
class Basic_LocaleMessageDefaultTypeInternal;
extern Basic_LocaleMessageDefaultTypeInternal _Basic_LocaleMessage_default_instance_;
class Basic_LocaleMessage_ErrorMessageEntry_DoNotUse;
class Basic_LocaleMessage_ErrorMessageEntry_DoNotUseDefaultTypeInternal;
extern Basic_LocaleMessage_ErrorMessageEntry_DoNotUseDefaultTypeInternal _Basic_LocaleMessage_ErrorMessageEntry_DoNotUse_default_instance_;
class Basic_PacketHeader;
class Basic_PacketHeaderDefaultTypeInternal;
extern Basic_PacketHeaderDefaultTypeInternal _Basic_PacketHeader_default_instance_;
class Basic_PingRequest;
class Basic_PingRequestDefaultTypeInternal;
extern Basic_PingRequestDefaultTypeInternal _Basic_PingRequest_default_instance_;
class Basic_PingResponse;
class Basic_PingResponseDefaultTypeInternal;
extern Basic_PingResponseDefaultTypeInternal _Basic_PingResponse_default_instance_;
class Basic_PushServiceToken;
class Basic_PushServiceTokenDefaultTypeInternal;
extern Basic_PushServiceTokenDefaultTypeInternal _Basic_PushServiceToken_default_instance_;
class Basic_RegisterRequest;
class Basic_RegisterRequestDefaultTypeInternal;
extern Basic_RegisterRequestDefaultTypeInternal _Basic_RegisterRequest_default_instance_;
class Basic_RegisterResponse;
class Basic_RegisterResponseDefaultTypeInternal;
extern Basic_RegisterResponseDefaultTypeInternal _Basic_RegisterResponse_default_instance_;
class Basic_RequestBasicInfo;
class Basic_RequestBasicInfoDefaultTypeInternal;
extern Basic_RequestBasicInfoDefaultTypeInternal _Basic_RequestBasicInfo_default_instance_;
class Basic_SdkOption;
class Basic_SdkOptionDefaultTypeInternal;
extern Basic_SdkOptionDefaultTypeInternal _Basic_SdkOption_default_instance_;
class Basic_SettingInfo;
class Basic_SettingInfoDefaultTypeInternal;
extern Basic_SettingInfoDefaultTypeInternal _Basic_SettingInfo_default_instance_;
class Basic_SyncCookie;
class Basic_SyncCookieDefaultTypeInternal;
extern Basic_SyncCookieDefaultTypeInternal _Basic_SyncCookie_default_instance_;
class Basic_TokenInfo;
class Basic_TokenInfoDefaultTypeInternal;
extern Basic_TokenInfoDefaultTypeInternal _Basic_TokenInfo_default_instance_;
class Basic_UnregisterRequest;
class Basic_UnregisterRequestDefaultTypeInternal;
extern Basic_UnregisterRequestDefaultTypeInternal _Basic_UnregisterRequest_default_instance_;
class Basic_UnregisterResponse;
class Basic_UnregisterResponseDefaultTypeInternal;
extern Basic_UnregisterResponseDefaultTypeInternal _Basic_UnregisterResponse_default_instance_;
class Basic_UpstreamPayload;
class Basic_UpstreamPayloadDefaultTypeInternal;
extern Basic_UpstreamPayloadDefaultTypeInternal _Basic_UpstreamPayload_default_instance_;
class Basic_User;
class Basic_UserDefaultTypeInternal;
extern Basic_UserDefaultTypeInternal _Basic_User_default_instance_;
class Basic_UserInstance;
class Basic_UserInstanceDefaultTypeInternal;
extern Basic_UserInstanceDefaultTypeInternal _Basic_UserInstance_default_instance_;
class Cloud;
class CloudDefaultTypeInternal;
extern CloudDefaultTypeInternal _Cloud_default_instance_;
class Cloud_Channel;
class Cloud_ChannelDefaultTypeInternal;
extern Cloud_ChannelDefaultTypeInternal _Cloud_Channel_default_instance_;
class Cloud_Channel_ChannelBasicInfo;
class Cloud_Channel_ChannelBasicInfoDefaultTypeInternal;
extern Cloud_Channel_ChannelBasicInfoDefaultTypeInternal _Cloud_Channel_ChannelBasicInfo_default_instance_;
class Cloud_Channel_ChannelBasicInfoGetRequest;
class Cloud_Channel_ChannelBasicInfoGetRequestDefaultTypeInternal;
extern Cloud_Channel_ChannelBasicInfoGetRequestDefaultTypeInternal _Cloud_Channel_ChannelBasicInfoGetRequest_default_instance_;
class Cloud_Channel_ChannelBasicInfoGetResponse;
class Cloud_Channel_ChannelBasicInfoGetResponseDefaultTypeInternal;
extern Cloud_Channel_ChannelBasicInfoGetResponseDefaultTypeInternal _Cloud_Channel_ChannelBasicInfoGetResponse_default_instance_;
class Cloud_Channel_ChannelBasicInfoNotify;
class Cloud_Channel_ChannelBasicInfoNotifyDefaultTypeInternal;
extern Cloud_Channel_ChannelBasicInfoNotifyDefaultTypeInternal _Cloud_Channel_ChannelBasicInfoNotify_default_instance_;
class Cloud_Channel_ChannelHeartbeatRequest;
class Cloud_Channel_ChannelHeartbeatRequestDefaultTypeInternal;
extern Cloud_Channel_ChannelHeartbeatRequestDefaultTypeInternal _Cloud_Channel_ChannelHeartbeatRequest_default_instance_;
class Cloud_Channel_ChannelHeartbeatResponse;
class Cloud_Channel_ChannelHeartbeatResponseDefaultTypeInternal;
extern Cloud_Channel_ChannelHeartbeatResponseDefaultTypeInternal _Cloud_Channel_ChannelHeartbeatResponse_default_instance_;
class Cloud_Channel_ChannelSubscribeRequest;
class Cloud_Channel_ChannelSubscribeRequestDefaultTypeInternal;
extern Cloud_Channel_ChannelSubscribeRequestDefaultTypeInternal _Cloud_Channel_ChannelSubscribeRequest_default_instance_;
class Cloud_Channel_ChannelSubscribeResponse;
class Cloud_Channel_ChannelSubscribeResponseDefaultTypeInternal;
extern Cloud_Channel_ChannelSubscribeResponseDefaultTypeInternal _Cloud_Channel_ChannelSubscribeResponse_default_instance_;
class Cloud_Channel_ChannelSubscribersGetRequest;
class Cloud_Channel_ChannelSubscribersGetRequestDefaultTypeInternal;
extern Cloud_Channel_ChannelSubscribersGetRequestDefaultTypeInternal _Cloud_Channel_ChannelSubscribersGetRequest_default_instance_;
class Cloud_Channel_ChannelSubscribersGetResposne;
class Cloud_Channel_ChannelSubscribersGetResposneDefaultTypeInternal;
extern Cloud_Channel_ChannelSubscribersGetResposneDefaultTypeInternal _Cloud_Channel_ChannelSubscribersGetResposne_default_instance_;
class Cloud_Channel_ChannelUnsubscribeRequest;
class Cloud_Channel_ChannelUnsubscribeRequestDefaultTypeInternal;
extern Cloud_Channel_ChannelUnsubscribeRequestDefaultTypeInternal _Cloud_Channel_ChannelUnsubscribeRequest_default_instance_;
class Cloud_Channel_UserActionInfo;
class Cloud_Channel_UserActionInfoDefaultTypeInternal;
extern Cloud_Channel_UserActionInfoDefaultTypeInternal _Cloud_Channel_UserActionInfo_default_instance_;
class Cloud_Config;
class Cloud_ConfigDefaultTypeInternal;
extern Cloud_ConfigDefaultTypeInternal _Cloud_Config_default_instance_;
class Cloud_Config_ClientConfig;
class Cloud_Config_ClientConfigDefaultTypeInternal;
extern Cloud_Config_ClientConfigDefaultTypeInternal _Cloud_Config_ClientConfig_default_instance_;
class Cloud_Config_ClientConfigGetRequest;
class Cloud_Config_ClientConfigGetRequestDefaultTypeInternal;
extern Cloud_Config_ClientConfigGetRequestDefaultTypeInternal _Cloud_Config_ClientConfigGetRequest_default_instance_;
class Cloud_Config_ClientConfigGetResponse;
class Cloud_Config_ClientConfigGetResponseDefaultTypeInternal;
extern Cloud_Config_ClientConfigGetResponseDefaultTypeInternal _Cloud_Config_ClientConfigGetResponse_default_instance_;
class Cloud_Config_NetworkQualityDetectionConfig;
class Cloud_Config_NetworkQualityDetectionConfigDefaultTypeInternal;
extern Cloud_Config_NetworkQualityDetectionConfigDefaultTypeInternal _Cloud_Config_NetworkQualityDetectionConfig_default_instance_;
class Cloud_Data;
class Cloud_DataDefaultTypeInternal;
extern Cloud_DataDefaultTypeInternal _Cloud_Data_default_instance_;
class Cloud_Data_Update;
class Cloud_Data_UpdateDefaultTypeInternal;
extern Cloud_Data_UpdateDefaultTypeInternal _Cloud_Data_Update_default_instance_;
class Cloud_Data_Update_GroupInfoDataUpdate;
class Cloud_Data_Update_GroupInfoDataUpdateDefaultTypeInternal;
extern Cloud_Data_Update_GroupInfoDataUpdateDefaultTypeInternal _Cloud_Data_Update_GroupInfoDataUpdate_default_instance_;
class Cloud_Data_Update_GroupMemberListUpdate;
class Cloud_Data_Update_GroupMemberListUpdateDefaultTypeInternal;
extern Cloud_Data_Update_GroupMemberListUpdateDefaultTypeInternal _Cloud_Data_Update_GroupMemberListUpdate_default_instance_;
class Cloud_Data_Update_KsImDataUpdatePushPayload;
class Cloud_Data_Update_KsImDataUpdatePushPayloadDefaultTypeInternal;
extern Cloud_Data_Update_KsImDataUpdatePushPayloadDefaultTypeInternal _Cloud_Data_Update_KsImDataUpdatePushPayload_default_instance_;
class Cloud_Data_Update_MessageRead;
class Cloud_Data_Update_MessageReadDefaultTypeInternal;
extern Cloud_Data_Update_MessageReadDefaultTypeInternal _Cloud_Data_Update_MessageRead_default_instance_;
class Cloud_Data_Update_MessageReceipt;
class Cloud_Data_Update_MessageReceiptDefaultTypeInternal;
extern Cloud_Data_Update_MessageReceiptDefaultTypeInternal _Cloud_Data_Update_MessageReceipt_default_instance_;
class Cloud_Data_Update_YouBeKicked;
class Cloud_Data_Update_YouBeKickedDefaultTypeInternal;
extern Cloud_Data_Update_YouBeKickedDefaultTypeInternal _Cloud_Data_Update_YouBeKicked_default_instance_;
class Cloud_Message;
class Cloud_MessageDefaultTypeInternal;
extern Cloud_MessageDefaultTypeInternal _Cloud_Message_default_instance_;
class Cloud_Message_Audio;
class Cloud_Message_AudioDefaultTypeInternal;
extern Cloud_Message_AudioDefaultTypeInternal _Cloud_Message_Audio_default_instance_;
class Cloud_Message_ConfirmInviteIntoGroupNoticeMetaInfo;
class Cloud_Message_ConfirmInviteIntoGroupNoticeMetaInfoDefaultTypeInternal;
extern Cloud_Message_ConfirmInviteIntoGroupNoticeMetaInfoDefaultTypeInternal _Cloud_Message_ConfirmInviteIntoGroupNoticeMetaInfo_default_instance_;
class Cloud_Message_ConfirmJoinIntoGroupNoticeMetaInfo;
class Cloud_Message_ConfirmJoinIntoGroupNoticeMetaInfoDefaultTypeInternal;
extern Cloud_Message_ConfirmJoinIntoGroupNoticeMetaInfoDefaultTypeInternal _Cloud_Message_ConfirmJoinIntoGroupNoticeMetaInfo_default_instance_;
class Cloud_Message_Custom;
class Cloud_Message_CustomDefaultTypeInternal;
extern Cloud_Message_CustomDefaultTypeInternal _Cloud_Message_Custom_default_instance_;
class Cloud_Message_Emoticon;
class Cloud_Message_EmoticonDefaultTypeInternal;
extern Cloud_Message_EmoticonDefaultTypeInternal _Cloud_Message_Emoticon_default_instance_;
class Cloud_Message_Emoticon_Code;
class Cloud_Message_Emoticon_CodeDefaultTypeInternal;
extern Cloud_Message_Emoticon_CodeDefaultTypeInternal _Cloud_Message_Emoticon_Code_default_instance_;
class Cloud_Message_File;
class Cloud_Message_FileDefaultTypeInternal;
extern Cloud_Message_FileDefaultTypeInternal _Cloud_Message_File_default_instance_;
class Cloud_Message_ForwardMessageContent;
class Cloud_Message_ForwardMessageContentDefaultTypeInternal;
extern Cloud_Message_ForwardMessageContentDefaultTypeInternal _Cloud_Message_ForwardMessageContent_default_instance_;
class Cloud_Message_GroupBasicInfo;
class Cloud_Message_GroupBasicInfoDefaultTypeInternal;
extern Cloud_Message_GroupBasicInfoDefaultTypeInternal _Cloud_Message_GroupBasicInfo_default_instance_;
class Cloud_Message_GroupCreateReponse;
class Cloud_Message_GroupCreateReponseDefaultTypeInternal;
extern Cloud_Message_GroupCreateReponseDefaultTypeInternal _Cloud_Message_GroupCreateReponse_default_instance_;
class Cloud_Message_GroupCreateRequest;
class Cloud_Message_GroupCreateRequestDefaultTypeInternal;
extern Cloud_Message_GroupCreateRequestDefaultTypeInternal _Cloud_Message_GroupCreateRequest_default_instance_;
class Cloud_Message_GroupDeleteRequest;
class Cloud_Message_GroupDeleteRequestDefaultTypeInternal;
extern Cloud_Message_GroupDeleteRequestDefaultTypeInternal _Cloud_Message_GroupDeleteRequest_default_instance_;
class Cloud_Message_GroupDeleteResponse;
class Cloud_Message_GroupDeleteResponseDefaultTypeInternal;
extern Cloud_Message_GroupDeleteResponseDefaultTypeInternal _Cloud_Message_GroupDeleteResponse_default_instance_;
class Cloud_Message_GroupInfo;
class Cloud_Message_GroupInfoDefaultTypeInternal;
extern Cloud_Message_GroupInfoDefaultTypeInternal _Cloud_Message_GroupInfo_default_instance_;
class Cloud_Message_GroupInvideResponse;
class Cloud_Message_GroupInvideResponseDefaultTypeInternal;
extern Cloud_Message_GroupInvideResponseDefaultTypeInternal _Cloud_Message_GroupInvideResponse_default_instance_;
class Cloud_Message_GroupInviteRequest;
class Cloud_Message_GroupInviteRequestDefaultTypeInternal;
extern Cloud_Message_GroupInviteRequestDefaultTypeInternal _Cloud_Message_GroupInviteRequest_default_instance_;
class Cloud_Message_GroupJoinRequest;
class Cloud_Message_GroupJoinRequestDefaultTypeInternal;
extern Cloud_Message_GroupJoinRequestDefaultTypeInternal _Cloud_Message_GroupJoinRequest_default_instance_;
class Cloud_Message_GroupJoinRequestAckRequest;
class Cloud_Message_GroupJoinRequestAckRequestDefaultTypeInternal;
extern Cloud_Message_GroupJoinRequestAckRequestDefaultTypeInternal _Cloud_Message_GroupJoinRequestAckRequest_default_instance_;
class Cloud_Message_GroupJoinRequestAckResponse;
class Cloud_Message_GroupJoinRequestAckResponseDefaultTypeInternal;
extern Cloud_Message_GroupJoinRequestAckResponseDefaultTypeInternal _Cloud_Message_GroupJoinRequestAckResponse_default_instance_;
class Cloud_Message_GroupJoinRequestCancelRequest;
class Cloud_Message_GroupJoinRequestCancelRequestDefaultTypeInternal;
extern Cloud_Message_GroupJoinRequestCancelRequestDefaultTypeInternal _Cloud_Message_GroupJoinRequestCancelRequest_default_instance_;
class Cloud_Message_GroupJoinRequestCancelResposne;
class Cloud_Message_GroupJoinRequestCancelResposneDefaultTypeInternal;
extern Cloud_Message_GroupJoinRequestCancelResposneDefaultTypeInternal _Cloud_Message_GroupJoinRequestCancelResposne_default_instance_;
class Cloud_Message_GroupJoinRequestGetRequest;
class Cloud_Message_GroupJoinRequestGetRequestDefaultTypeInternal;
extern Cloud_Message_GroupJoinRequestGetRequestDefaultTypeInternal _Cloud_Message_GroupJoinRequestGetRequest_default_instance_;
class Cloud_Message_GroupJoinRequestGetResponse;
class Cloud_Message_GroupJoinRequestGetResponseDefaultTypeInternal;
extern Cloud_Message_GroupJoinRequestGetResponseDefaultTypeInternal _Cloud_Message_GroupJoinRequestGetResponse_default_instance_;
class Cloud_Message_GroupJoinResponse;
class Cloud_Message_GroupJoinResponseDefaultTypeInternal;
extern Cloud_Message_GroupJoinResponseDefaultTypeInternal _Cloud_Message_GroupJoinResponse_default_instance_;
class Cloud_Message_GroupKickRequest;
class Cloud_Message_GroupKickRequestDefaultTypeInternal;
extern Cloud_Message_GroupKickRequestDefaultTypeInternal _Cloud_Message_GroupKickRequest_default_instance_;
class Cloud_Message_GroupKickResponse;
class Cloud_Message_GroupKickResponseDefaultTypeInternal;
extern Cloud_Message_GroupKickResponseDefaultTypeInternal _Cloud_Message_GroupKickResponse_default_instance_;
class Cloud_Message_GroupMember;
class Cloud_Message_GroupMemberDefaultTypeInternal;
extern Cloud_Message_GroupMemberDefaultTypeInternal _Cloud_Message_GroupMember_default_instance_;
class Cloud_Message_GroupMemberBriefInfo;
class Cloud_Message_GroupMemberBriefInfoDefaultTypeInternal;
extern Cloud_Message_GroupMemberBriefInfoDefaultTypeInternal _Cloud_Message_GroupMemberBriefInfo_default_instance_;
class Cloud_Message_GroupMemberGetRequest;
class Cloud_Message_GroupMemberGetRequestDefaultTypeInternal;
extern Cloud_Message_GroupMemberGetRequestDefaultTypeInternal _Cloud_Message_GroupMemberGetRequest_default_instance_;
class Cloud_Message_GroupMemberGetResponse;
class Cloud_Message_GroupMemberGetResponseDefaultTypeInternal;
extern Cloud_Message_GroupMemberGetResponseDefaultTypeInternal _Cloud_Message_GroupMemberGetResponse_default_instance_;
class Cloud_Message_GroupMemberListGetRequest;
class Cloud_Message_GroupMemberListGetRequestDefaultTypeInternal;
extern Cloud_Message_GroupMemberListGetRequestDefaultTypeInternal _Cloud_Message_GroupMemberListGetRequest_default_instance_;
class Cloud_Message_GroupMemberListGetResponse;
class Cloud_Message_GroupMemberListGetResponseDefaultTypeInternal;
extern Cloud_Message_GroupMemberListGetResponseDefaultTypeInternal _Cloud_Message_GroupMemberListGetResponse_default_instance_;
class Cloud_Message_GroupMemberSettingRequest;
class Cloud_Message_GroupMemberSettingRequestDefaultTypeInternal;
extern Cloud_Message_GroupMemberSettingRequestDefaultTypeInternal _Cloud_Message_GroupMemberSettingRequest_default_instance_;
class Cloud_Message_GroupMemberSettingResponse;
class Cloud_Message_GroupMemberSettingResponseDefaultTypeInternal;
extern Cloud_Message_GroupMemberSettingResponseDefaultTypeInternal _Cloud_Message_GroupMemberSettingResponse_default_instance_;
class Cloud_Message_GroupQuitRequest;
class Cloud_Message_GroupQuitRequestDefaultTypeInternal;
extern Cloud_Message_GroupQuitRequestDefaultTypeInternal _Cloud_Message_GroupQuitRequest_default_instance_;
class Cloud_Message_GroupQuitResponse;
class Cloud_Message_GroupQuitResponseDefaultTypeInternal;
extern Cloud_Message_GroupQuitResponseDefaultTypeInternal _Cloud_Message_GroupQuitResponse_default_instance_;
class Cloud_Message_GroupSettingDesc;
class Cloud_Message_GroupSettingDescDefaultTypeInternal;
extern Cloud_Message_GroupSettingDescDefaultTypeInternal _Cloud_Message_GroupSettingDesc_default_instance_;
class Cloud_Message_GroupSettingJoinNeedPermission;
class Cloud_Message_GroupSettingJoinNeedPermissionDefaultTypeInternal;
extern Cloud_Message_GroupSettingJoinNeedPermissionDefaultTypeInternal _Cloud_Message_GroupSettingJoinNeedPermission_default_instance_;
class Cloud_Message_GroupSettingRename;
class Cloud_Message_GroupSettingRenameDefaultTypeInternal;
extern Cloud_Message_GroupSettingRenameDefaultTypeInternal _Cloud_Message_GroupSettingRename_default_instance_;
class Cloud_Message_GroupSettingRequest;
class Cloud_Message_GroupSettingRequestDefaultTypeInternal;
extern Cloud_Message_GroupSettingRequestDefaultTypeInternal _Cloud_Message_GroupSettingRequest_default_instance_;
class Cloud_Message_GroupSettingResponse;
class Cloud_Message_GroupSettingResponseDefaultTypeInternal;
extern Cloud_Message_GroupSettingResponseDefaultTypeInternal _Cloud_Message_GroupSettingResponse_default_instance_;
class Cloud_Message_Image;
class Cloud_Message_ImageDefaultTypeInternal;
extern Cloud_Message_ImageDefaultTypeInternal _Cloud_Message_Image_default_instance_;
class Cloud_Message_ImcNoticeMessage;
class Cloud_Message_ImcNoticeMessageDefaultTypeInternal;
extern Cloud_Message_ImcNoticeMessageDefaultTypeInternal _Cloud_Message_ImcNoticeMessage_default_instance_;
class Cloud_Message_ImcPassThroughPush;
class Cloud_Message_ImcPassThroughPushDefaultTypeInternal;
extern Cloud_Message_ImcPassThroughPushDefaultTypeInternal _Cloud_Message_ImcPassThroughPush_default_instance_;
class Cloud_Message_ImcPassThroughRequest;
class Cloud_Message_ImcPassThroughRequestDefaultTypeInternal;
extern Cloud_Message_ImcPassThroughRequestDefaultTypeInternal _Cloud_Message_ImcPassThroughRequest_default_instance_;
class Cloud_Message_ImcPassThroughResponse;
class Cloud_Message_ImcPassThroughResponseDefaultTypeInternal;
extern Cloud_Message_ImcPassThroughResponseDefaultTypeInternal _Cloud_Message_ImcPassThroughResponse_default_instance_;
class Cloud_Message_ImcRecalledMessage;
class Cloud_Message_ImcRecalledMessageDefaultTypeInternal;
extern Cloud_Message_ImcRecalledMessageDefaultTypeInternal _Cloud_Message_ImcRecalledMessage_default_instance_;
class Cloud_Message_ImcReplaceMessage;
class Cloud_Message_ImcReplaceMessageDefaultTypeInternal;
extern Cloud_Message_ImcReplaceMessageDefaultTypeInternal _Cloud_Message_ImcReplaceMessage_default_instance_;
class Cloud_Message_InputtingContent;
class Cloud_Message_InputtingContentDefaultTypeInternal;
extern Cloud_Message_InputtingContentDefaultTypeInternal _Cloud_Message_InputtingContent_default_instance_;
class Cloud_Message_NoticePlaceholderMeta;
class Cloud_Message_NoticePlaceholderMetaDefaultTypeInternal;
extern Cloud_Message_NoticePlaceholderMetaDefaultTypeInternal _Cloud_Message_NoticePlaceholderMeta_default_instance_;
class Cloud_Message_PicUrl;
class Cloud_Message_PicUrlDefaultTypeInternal;
extern Cloud_Message_PicUrlDefaultTypeInternal _Cloud_Message_PicUrl_default_instance_;
class Cloud_Message_Reference;
class Cloud_Message_ReferenceDefaultTypeInternal;
extern Cloud_Message_ReferenceDefaultTypeInternal _Cloud_Message_Reference_default_instance_;
class Cloud_Message_Reference_ReferenceMessage;
class Cloud_Message_Reference_ReferenceMessageDefaultTypeInternal;
extern Cloud_Message_Reference_ReferenceMessageDefaultTypeInternal _Cloud_Message_Reference_ReferenceMessage_default_instance_;
class Cloud_Message_SetUserAntiDisturbing;
class Cloud_Message_SetUserAntiDisturbingDefaultTypeInternal;
extern Cloud_Message_SetUserAntiDisturbingDefaultTypeInternal _Cloud_Message_SetUserAntiDisturbing_default_instance_;
class Cloud_Message_SetUserNickname;
class Cloud_Message_SetUserNicknameDefaultTypeInternal;
extern Cloud_Message_SetUserNicknameDefaultTypeInternal _Cloud_Message_SetUserNickname_default_instance_;
class Cloud_Message_Text;
class Cloud_Message_TextDefaultTypeInternal;
extern Cloud_Message_TextDefaultTypeInternal _Cloud_Message_Text_default_instance_;
class Cloud_Message_UserGroupGetRequest;
class Cloud_Message_UserGroupGetRequestDefaultTypeInternal;
extern Cloud_Message_UserGroupGetRequestDefaultTypeInternal _Cloud_Message_UserGroupGetRequest_default_instance_;
class Cloud_Message_UserGroupGetResponse;
class Cloud_Message_UserGroupGetResponseDefaultTypeInternal;
extern Cloud_Message_UserGroupGetResponseDefaultTypeInternal _Cloud_Message_UserGroupGetResponse_default_instance_;
class Cloud_Message_UserGroupInfo;
class Cloud_Message_UserGroupInfoDefaultTypeInternal;
extern Cloud_Message_UserGroupInfoDefaultTypeInternal _Cloud_Message_UserGroupInfo_default_instance_;
class Cloud_Message_UserGroupListRequest;
class Cloud_Message_UserGroupListRequestDefaultTypeInternal;
extern Cloud_Message_UserGroupListRequestDefaultTypeInternal _Cloud_Message_UserGroupListRequest_default_instance_;
class Cloud_Message_UserGroupListResponse;
class Cloud_Message_UserGroupListResponseDefaultTypeInternal;
extern Cloud_Message_UserGroupListResponseDefaultTypeInternal _Cloud_Message_UserGroupListResponse_default_instance_;
class Cloud_Message_UserGroupRecord;
class Cloud_Message_UserGroupRecordDefaultTypeInternal;
extern Cloud_Message_UserGroupRecordDefaultTypeInternal _Cloud_Message_UserGroupRecord_default_instance_;
class Cloud_Message_Video;
class Cloud_Message_VideoDefaultTypeInternal;
extern Cloud_Message_VideoDefaultTypeInternal _Cloud_Message_Video_default_instance_;
class Cloud_Profile;
class Cloud_ProfileDefaultTypeInternal;
extern Cloud_ProfileDefaultTypeInternal _Cloud_Profile_default_instance_;
class Cloud_Profile_ProfileBatchOnlineTimeRequest;
class Cloud_Profile_ProfileBatchOnlineTimeRequestDefaultTypeInternal;
extern Cloud_Profile_ProfileBatchOnlineTimeRequestDefaultTypeInternal _Cloud_Profile_ProfileBatchOnlineTimeRequest_default_instance_;
class Cloud_Profile_ProfileBatchOnlineTimeResponse;
class Cloud_Profile_ProfileBatchOnlineTimeResponseDefaultTypeInternal;
extern Cloud_Profile_ProfileBatchOnlineTimeResponseDefaultTypeInternal _Cloud_Profile_ProfileBatchOnlineTimeResponse_default_instance_;
class Cloud_Profile_UserOnlineStatus;
class Cloud_Profile_UserOnlineStatusDefaultTypeInternal;
extern Cloud_Profile_UserOnlineStatusDefaultTypeInternal _Cloud_Profile_UserOnlineStatus_default_instance_;
class ImMessage;
class ImMessageDefaultTypeInternal;
extern ImMessageDefaultTypeInternal _ImMessage_default_instance_;
class ImMessage_AllUnreadCountRequest;
class ImMessage_AllUnreadCountRequestDefaultTypeInternal;
extern ImMessage_AllUnreadCountRequestDefaultTypeInternal _ImMessage_AllUnreadCountRequest_default_instance_;
class ImMessage_AllUnreadCountResponse;
class ImMessage_AllUnreadCountResponseDefaultTypeInternal;
extern ImMessage_AllUnreadCountResponseDefaultTypeInternal _ImMessage_AllUnreadCountResponse_default_instance_;
class ImMessage_Attachment;
class ImMessage_AttachmentDefaultTypeInternal;
extern ImMessage_AttachmentDefaultTypeInternal _ImMessage_Attachment_default_instance_;
class ImMessage_Attachments;
class ImMessage_AttachmentsDefaultTypeInternal;
extern ImMessage_AttachmentsDefaultTypeInternal _ImMessage_Attachments_default_instance_;
class ImMessage_AudioAttachment;
class ImMessage_AudioAttachmentDefaultTypeInternal;
extern ImMessage_AudioAttachmentDefaultTypeInternal _ImMessage_AudioAttachment_default_instance_;
class ImMessage_ChatSession;
class ImMessage_ChatSessionDefaultTypeInternal;
extern ImMessage_ChatSessionDefaultTypeInternal _ImMessage_ChatSession_default_instance_;
class ImMessage_ChatTarget;
class ImMessage_ChatTargetDefaultTypeInternal;
extern ImMessage_ChatTargetDefaultTypeInternal _ImMessage_ChatTarget_default_instance_;
class ImMessage_GifAttachment;
class ImMessage_GifAttachmentDefaultTypeInternal;
extern ImMessage_GifAttachmentDefaultTypeInternal _ImMessage_GifAttachment_default_instance_;
class ImMessage_ImageAttachment;
class ImMessage_ImageAttachmentDefaultTypeInternal;
extern ImMessage_ImageAttachmentDefaultTypeInternal _ImMessage_ImageAttachment_default_instance_;
class ImMessage_ImageTextMessage;
class ImMessage_ImageTextMessageDefaultTypeInternal;
extern ImMessage_ImageTextMessageDefaultTypeInternal _ImMessage_ImageTextMessage_default_instance_;
class ImMessage_Message;
class ImMessage_MessageDefaultTypeInternal;
extern ImMessage_MessageDefaultTypeInternal _ImMessage_Message_default_instance_;
class ImMessage_MessageBatchSendRequest;
class ImMessage_MessageBatchSendRequestDefaultTypeInternal;
extern ImMessage_MessageBatchSendRequestDefaultTypeInternal _ImMessage_MessageBatchSendRequest_default_instance_;
class ImMessage_MessageBatchSendResponse;
class ImMessage_MessageBatchSendResponseDefaultTypeInternal;
extern ImMessage_MessageBatchSendResponseDefaultTypeInternal _ImMessage_MessageBatchSendResponse_default_instance_;
class ImMessage_MessageCancelRequest;
class ImMessage_MessageCancelRequestDefaultTypeInternal;
extern ImMessage_MessageCancelRequestDefaultTypeInternal _ImMessage_MessageCancelRequest_default_instance_;
class ImMessage_MessageCancelResponse;
class ImMessage_MessageCancelResponseDefaultTypeInternal;
extern ImMessage_MessageCancelResponseDefaultTypeInternal _ImMessage_MessageCancelResponse_default_instance_;
class ImMessage_MessageClearRequest;
class ImMessage_MessageClearRequestDefaultTypeInternal;
extern ImMessage_MessageClearRequestDefaultTypeInternal _ImMessage_MessageClearRequest_default_instance_;
class ImMessage_MessageClearResponse;
class ImMessage_MessageClearResponseDefaultTypeInternal;
extern ImMessage_MessageClearResponseDefaultTypeInternal _ImMessage_MessageClearResponse_default_instance_;
class ImMessage_MessageDeleteRequest;
class ImMessage_MessageDeleteRequestDefaultTypeInternal;
extern ImMessage_MessageDeleteRequestDefaultTypeInternal _ImMessage_MessageDeleteRequest_default_instance_;
class ImMessage_MessageDeleteResponse;
class ImMessage_MessageDeleteResponseDefaultTypeInternal;
extern ImMessage_MessageDeleteResponseDefaultTypeInternal _ImMessage_MessageDeleteResponse_default_instance_;
class ImMessage_MessageReadAllRequest;
class ImMessage_MessageReadAllRequestDefaultTypeInternal;
extern ImMessage_MessageReadAllRequestDefaultTypeInternal _ImMessage_MessageReadAllRequest_default_instance_;
class ImMessage_MessageReadAllResponse;
class ImMessage_MessageReadAllResponseDefaultTypeInternal;
extern ImMessage_MessageReadAllResponseDefaultTypeInternal _ImMessage_MessageReadAllResponse_default_instance_;
class ImMessage_MessageReadPush;
class ImMessage_MessageReadPushDefaultTypeInternal;
extern ImMessage_MessageReadPushDefaultTypeInternal _ImMessage_MessageReadPush_default_instance_;
class ImMessage_MessageReadSeqRequest;
class ImMessage_MessageReadSeqRequestDefaultTypeInternal;
extern ImMessage_MessageReadSeqRequestDefaultTypeInternal _ImMessage_MessageReadSeqRequest_default_instance_;
class ImMessage_MessageReadSeqResponse;
class ImMessage_MessageReadSeqResponseDefaultTypeInternal;
extern ImMessage_MessageReadSeqResponseDefaultTypeInternal _ImMessage_MessageReadSeqResponse_default_instance_;
class ImMessage_MessageRecallRequest;
class ImMessage_MessageRecallRequestDefaultTypeInternal;
extern ImMessage_MessageRecallRequestDefaultTypeInternal _ImMessage_MessageRecallRequest_default_instance_;
class ImMessage_MessageRecallResponse;
class ImMessage_MessageRecallResponseDefaultTypeInternal;
extern ImMessage_MessageRecallResponseDefaultTypeInternal _ImMessage_MessageRecallResponse_default_instance_;
class ImMessage_MessageReceiptCountGetRequest;
class ImMessage_MessageReceiptCountGetRequestDefaultTypeInternal;
extern ImMessage_MessageReceiptCountGetRequestDefaultTypeInternal _ImMessage_MessageReceiptCountGetRequest_default_instance_;
class ImMessage_MessageReceiptCountGetResponse;
class ImMessage_MessageReceiptCountGetResponseDefaultTypeInternal;
extern ImMessage_MessageReceiptCountGetResponseDefaultTypeInternal _ImMessage_MessageReceiptCountGetResponse_default_instance_;
class ImMessage_MessageReceiptDetailGetRequest;
class ImMessage_MessageReceiptDetailGetRequestDefaultTypeInternal;
extern ImMessage_MessageReceiptDetailGetRequestDefaultTypeInternal _ImMessage_MessageReceiptDetailGetRequest_default_instance_;
class ImMessage_MessageReceiptDetailGetResponse;
class ImMessage_MessageReceiptDetailGetResponseDefaultTypeInternal;
extern ImMessage_MessageReceiptDetailGetResponseDefaultTypeInternal _ImMessage_MessageReceiptDetailGetResponse_default_instance_;
class ImMessage_MessageReceiptInfo;
class ImMessage_MessageReceiptInfoDefaultTypeInternal;
extern ImMessage_MessageReceiptInfoDefaultTypeInternal _ImMessage_MessageReceiptInfo_default_instance_;
class ImMessage_MessageReceiptRequest;
class ImMessage_MessageReceiptRequestDefaultTypeInternal;
extern ImMessage_MessageReceiptRequestDefaultTypeInternal _ImMessage_MessageReceiptRequest_default_instance_;
class ImMessage_MessageReceiptResponse;
class ImMessage_MessageReceiptResponseDefaultTypeInternal;
extern ImMessage_MessageReceiptResponseDefaultTypeInternal _ImMessage_MessageReceiptResponse_default_instance_;
class ImMessage_MessageReceiptStatus;
class ImMessage_MessageReceiptStatusDefaultTypeInternal;
extern ImMessage_MessageReceiptStatusDefaultTypeInternal _ImMessage_MessageReceiptStatus_default_instance_;
class ImMessage_NoticeMessage;
class ImMessage_NoticeMessageDefaultTypeInternal;
extern ImMessage_NoticeMessageDefaultTypeInternal _ImMessage_NoticeMessage_default_instance_;
class ImMessage_PlaceHolderMessage;
class ImMessage_PlaceHolderMessageDefaultTypeInternal;
extern ImMessage_PlaceHolderMessageDefaultTypeInternal _ImMessage_PlaceHolderMessage_default_instance_;
class ImMessage_PullNewRequest;
class ImMessage_PullNewRequestDefaultTypeInternal;
extern ImMessage_PullNewRequestDefaultTypeInternal _ImMessage_PullNewRequest_default_instance_;
class ImMessage_PullNewResponse;
class ImMessage_PullNewResponseDefaultTypeInternal;
extern ImMessage_PullNewResponseDefaultTypeInternal _ImMessage_PullNewResponse_default_instance_;
class ImMessage_PullOldRequest;
class ImMessage_PullOldRequestDefaultTypeInternal;
extern ImMessage_PullOldRequestDefaultTypeInternal _ImMessage_PullOldRequest_default_instance_;
class ImMessage_PullOldResponse;
class ImMessage_PullOldResponseDefaultTypeInternal;
extern ImMessage_PullOldResponseDefaultTypeInternal _ImMessage_PullOldResponse_default_instance_;
class ImMessage_ReadSeqInfo;
class ImMessage_ReadSeqInfoDefaultTypeInternal;
extern ImMessage_ReadSeqInfoDefaultTypeInternal _ImMessage_ReadSeqInfo_default_instance_;
class ImMessage_RemindBody;
class ImMessage_RemindBodyDefaultTypeInternal;
extern ImMessage_RemindBodyDefaultTypeInternal _ImMessage_RemindBody_default_instance_;
class ImMessage_Reminder;
class ImMessage_ReminderDefaultTypeInternal;
extern ImMessage_ReminderDefaultTypeInternal _ImMessage_Reminder_default_instance_;
class ImMessage_RichTextMessage;
class ImMessage_RichTextMessageDefaultTypeInternal;
extern ImMessage_RichTextMessageDefaultTypeInternal _ImMessage_RichTextMessage_default_instance_;
class ImMessage_RichTextNoticeMessage;
class ImMessage_RichTextNoticeMessageDefaultTypeInternal;
extern ImMessage_RichTextNoticeMessageDefaultTypeInternal _ImMessage_RichTextNoticeMessage_default_instance_;
class ImMessage_RichTextNoticeMessage_RichTextItem;
class ImMessage_RichTextNoticeMessage_RichTextItemDefaultTypeInternal;
extern ImMessage_RichTextNoticeMessage_RichTextItemDefaultTypeInternal _ImMessage_RichTextNoticeMessage_RichTextItem_default_instance_;
class ImMessage_SendMessageResponse;
class ImMessage_SendMessageResponseDefaultTypeInternal;
extern ImMessage_SendMessageResponseDefaultTypeInternal _ImMessage_SendMessageResponse_default_instance_;
class ImMessage_SesionStickyOnTopRequest;
class ImMessage_SesionStickyOnTopRequestDefaultTypeInternal;
extern ImMessage_SesionStickyOnTopRequestDefaultTypeInternal _ImMessage_SesionStickyOnTopRequest_default_instance_;
class ImMessage_SessionCleanRequest;
class ImMessage_SessionCleanRequestDefaultTypeInternal;
extern ImMessage_SessionCleanRequestDefaultTypeInternal _ImMessage_SessionCleanRequest_default_instance_;
class ImMessage_SessionCleanResponse;
class ImMessage_SessionCleanResponseDefaultTypeInternal;
extern ImMessage_SessionCleanResponseDefaultTypeInternal _ImMessage_SessionCleanResponse_default_instance_;
class ImMessage_SessionListRequest;
class ImMessage_SessionListRequestDefaultTypeInternal;
extern ImMessage_SessionListRequestDefaultTypeInternal _ImMessage_SessionListRequest_default_instance_;
class ImMessage_SessionListResponse;
class ImMessage_SessionListResponseDefaultTypeInternal;
extern ImMessage_SessionListResponseDefaultTypeInternal _ImMessage_SessionListResponse_default_instance_;
class ImMessage_SessionPageListRequest;
class ImMessage_SessionPageListRequestDefaultTypeInternal;
extern ImMessage_SessionPageListRequestDefaultTypeInternal _ImMessage_SessionPageListRequest_default_instance_;
class ImMessage_SessionPageListResponse;
class ImMessage_SessionPageListResponseDefaultTypeInternal;
extern ImMessage_SessionPageListResponseDefaultTypeInternal _ImMessage_SessionPageListResponse_default_instance_;
class ImMessage_SessionRaw;
class ImMessage_SessionRawDefaultTypeInternal;
extern ImMessage_SessionRawDefaultTypeInternal _ImMessage_SessionRaw_default_instance_;
class ImMessage_SessionRaw_RawEntry_DoNotUse;
class ImMessage_SessionRaw_RawEntry_DoNotUseDefaultTypeInternal;
extern ImMessage_SessionRaw_RawEntry_DoNotUseDefaultTypeInternal _ImMessage_SessionRaw_RawEntry_DoNotUse_default_instance_;
class ImMessage_SessionRemoveRequest;
class ImMessage_SessionRemoveRequestDefaultTypeInternal;
extern ImMessage_SessionRemoveRequestDefaultTypeInternal _ImMessage_SessionRemoveRequest_default_instance_;
class ImMessage_SessionRemoveResponse;
class ImMessage_SessionRemoveResponseDefaultTypeInternal;
extern ImMessage_SessionRemoveResponseDefaultTypeInternal _ImMessage_SessionRemoveResponse_default_instance_;
class ImMessage_SessionStickyOnTopResponse;
class ImMessage_SessionStickyOnTopResponseDefaultTypeInternal;
extern ImMessage_SessionStickyOnTopResponseDefaultTypeInternal _ImMessage_SessionStickyOnTopResponse_default_instance_;
}  // namespace Im
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::Im::Basic* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Basic>(Arena*);
template<> ::AcFunDanmu::Im::Basic_AccessPoint* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Basic_AccessPoint>(Arena*);
template<> ::AcFunDanmu::Im::Basic_AccessPointsConfig* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Basic_AccessPointsConfig>(Arena*);
template<> ::AcFunDanmu::Im::Basic_AppInfo* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Basic_AppInfo>(Arena*);
template<> ::AcFunDanmu::Im::Basic_DeviceInfo* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Basic_DeviceInfo>(Arena*);
template<> ::AcFunDanmu::Im::Basic_DownstreamPayload* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Basic_DownstreamPayload>(Arena*);
template<> ::AcFunDanmu::Im::Basic_EnvInfo* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Basic_EnvInfo>(Arena*);
template<> ::AcFunDanmu::Im::Basic_ErrorMessage* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Basic_ErrorMessage>(Arena*);
template<> ::AcFunDanmu::Im::Basic_I18nCopyWriting* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Basic_I18nCopyWriting>(Arena*);
template<> ::AcFunDanmu::Im::Basic_KeepAliveRequest* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Basic_KeepAliveRequest>(Arena*);
template<> ::AcFunDanmu::Im::Basic_KeepAliveResponse* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Basic_KeepAliveResponse>(Arena*);
template<> ::AcFunDanmu::Im::Basic_LocaleMessage* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Basic_LocaleMessage>(Arena*);
template<> ::AcFunDanmu::Im::Basic_LocaleMessage_ErrorMessageEntry_DoNotUse* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Basic_LocaleMessage_ErrorMessageEntry_DoNotUse>(Arena*);
template<> ::AcFunDanmu::Im::Basic_PacketHeader* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Basic_PacketHeader>(Arena*);
template<> ::AcFunDanmu::Im::Basic_PingRequest* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Basic_PingRequest>(Arena*);
template<> ::AcFunDanmu::Im::Basic_PingResponse* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Basic_PingResponse>(Arena*);
template<> ::AcFunDanmu::Im::Basic_PushServiceToken* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Basic_PushServiceToken>(Arena*);
template<> ::AcFunDanmu::Im::Basic_RegisterRequest* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Basic_RegisterRequest>(Arena*);
template<> ::AcFunDanmu::Im::Basic_RegisterResponse* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Basic_RegisterResponse>(Arena*);
template<> ::AcFunDanmu::Im::Basic_RequestBasicInfo* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Basic_RequestBasicInfo>(Arena*);
template<> ::AcFunDanmu::Im::Basic_SdkOption* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Basic_SdkOption>(Arena*);
template<> ::AcFunDanmu::Im::Basic_SettingInfo* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Basic_SettingInfo>(Arena*);
template<> ::AcFunDanmu::Im::Basic_SyncCookie* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Basic_SyncCookie>(Arena*);
template<> ::AcFunDanmu::Im::Basic_TokenInfo* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Basic_TokenInfo>(Arena*);
template<> ::AcFunDanmu::Im::Basic_UnregisterRequest* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Basic_UnregisterRequest>(Arena*);
template<> ::AcFunDanmu::Im::Basic_UnregisterResponse* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Basic_UnregisterResponse>(Arena*);
template<> ::AcFunDanmu::Im::Basic_UpstreamPayload* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Basic_UpstreamPayload>(Arena*);
template<> ::AcFunDanmu::Im::Basic_User* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Basic_User>(Arena*);
template<> ::AcFunDanmu::Im::Basic_UserInstance* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Basic_UserInstance>(Arena*);
template<> ::AcFunDanmu::Im::Cloud* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Channel* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Channel>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Channel_ChannelBasicInfo* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Channel_ChannelBasicInfo>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Channel_ChannelBasicInfoGetRequest* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Channel_ChannelBasicInfoGetRequest>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Channel_ChannelBasicInfoGetResponse* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Channel_ChannelBasicInfoGetResponse>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Channel_ChannelBasicInfoNotify* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Channel_ChannelBasicInfoNotify>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Channel_ChannelHeartbeatRequest* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Channel_ChannelHeartbeatRequest>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Channel_ChannelHeartbeatResponse* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Channel_ChannelHeartbeatResponse>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Channel_ChannelSubscribeRequest* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Channel_ChannelSubscribeRequest>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Channel_ChannelSubscribeResponse* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Channel_ChannelSubscribeResponse>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Channel_ChannelSubscribersGetRequest* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Channel_ChannelSubscribersGetRequest>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Channel_ChannelSubscribersGetResposne* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Channel_ChannelSubscribersGetResposne>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Channel_ChannelUnsubscribeRequest* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Channel_ChannelUnsubscribeRequest>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Channel_UserActionInfo* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Channel_UserActionInfo>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Config* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Config>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Config_ClientConfig* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Config_ClientConfig>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Config_ClientConfigGetRequest* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Config_ClientConfigGetRequest>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Config_ClientConfigGetResponse* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Config_ClientConfigGetResponse>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Config_NetworkQualityDetectionConfig* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Config_NetworkQualityDetectionConfig>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Data* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Data>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Data_Update* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Data_Update>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Data_Update_GroupInfoDataUpdate* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Data_Update_GroupInfoDataUpdate>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Data_Update_GroupMemberListUpdate* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Data_Update_GroupMemberListUpdate>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Data_Update_KsImDataUpdatePushPayload* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Data_Update_KsImDataUpdatePushPayload>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Data_Update_MessageRead* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Data_Update_MessageRead>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Data_Update_MessageReceipt* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Data_Update_MessageReceipt>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Data_Update_YouBeKicked* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Data_Update_YouBeKicked>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_Audio* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_Audio>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_ConfirmInviteIntoGroupNoticeMetaInfo* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_ConfirmInviteIntoGroupNoticeMetaInfo>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_ConfirmJoinIntoGroupNoticeMetaInfo* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_ConfirmJoinIntoGroupNoticeMetaInfo>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_Custom* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_Custom>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_Emoticon* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_Emoticon>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_Emoticon_Code* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_Emoticon_Code>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_File* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_File>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_ForwardMessageContent* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_ForwardMessageContent>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_GroupBasicInfo* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_GroupBasicInfo>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_GroupCreateReponse* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_GroupCreateReponse>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_GroupCreateRequest* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_GroupCreateRequest>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_GroupDeleteRequest* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_GroupDeleteRequest>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_GroupDeleteResponse* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_GroupDeleteResponse>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_GroupInfo* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_GroupInfo>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_GroupInvideResponse* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_GroupInvideResponse>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_GroupInviteRequest* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_GroupInviteRequest>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_GroupJoinRequest* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_GroupJoinRequest>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_GroupJoinRequestAckRequest* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_GroupJoinRequestAckRequest>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_GroupJoinRequestAckResponse* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_GroupJoinRequestAckResponse>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_GroupJoinRequestCancelRequest* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_GroupJoinRequestCancelRequest>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_GroupJoinRequestCancelResposne* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_GroupJoinRequestCancelResposne>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_GroupJoinRequestGetRequest* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_GroupJoinRequestGetRequest>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_GroupJoinRequestGetResponse* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_GroupJoinRequestGetResponse>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_GroupJoinResponse* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_GroupJoinResponse>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_GroupKickRequest* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_GroupKickRequest>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_GroupKickResponse* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_GroupKickResponse>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_GroupMember* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_GroupMember>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_GroupMemberBriefInfo* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_GroupMemberBriefInfo>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_GroupMemberGetRequest* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_GroupMemberGetRequest>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_GroupMemberGetResponse* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_GroupMemberGetResponse>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_GroupMemberListGetRequest* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_GroupMemberListGetRequest>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_GroupMemberListGetResponse* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_GroupMemberListGetResponse>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_GroupMemberSettingRequest* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_GroupMemberSettingRequest>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_GroupMemberSettingResponse* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_GroupMemberSettingResponse>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_GroupQuitRequest* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_GroupQuitRequest>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_GroupQuitResponse* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_GroupQuitResponse>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_GroupSettingDesc* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_GroupSettingDesc>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_GroupSettingJoinNeedPermission* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_GroupSettingJoinNeedPermission>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_GroupSettingRename* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_GroupSettingRename>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_GroupSettingRequest* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_GroupSettingRequest>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_GroupSettingResponse* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_GroupSettingResponse>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_Image* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_Image>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_ImcNoticeMessage* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_ImcNoticeMessage>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_ImcPassThroughPush* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_ImcPassThroughPush>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_ImcPassThroughRequest* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_ImcPassThroughRequest>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_ImcPassThroughResponse* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_ImcPassThroughResponse>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_ImcRecalledMessage* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_ImcRecalledMessage>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_ImcReplaceMessage* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_ImcReplaceMessage>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_InputtingContent* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_InputtingContent>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_NoticePlaceholderMeta* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_NoticePlaceholderMeta>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_PicUrl* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_PicUrl>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_Reference* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_Reference>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_Reference_ReferenceMessage* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_Reference_ReferenceMessage>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_SetUserAntiDisturbing* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_SetUserAntiDisturbing>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_SetUserNickname* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_SetUserNickname>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_Text* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_Text>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_UserGroupGetRequest* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_UserGroupGetRequest>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_UserGroupGetResponse* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_UserGroupGetResponse>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_UserGroupInfo* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_UserGroupInfo>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_UserGroupListRequest* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_UserGroupListRequest>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_UserGroupListResponse* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_UserGroupListResponse>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_UserGroupRecord* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_UserGroupRecord>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Message_Video* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_Video>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Profile* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Profile>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Profile_ProfileBatchOnlineTimeRequest* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Profile_ProfileBatchOnlineTimeRequest>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Profile_ProfileBatchOnlineTimeResponse* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Profile_ProfileBatchOnlineTimeResponse>(Arena*);
template<> ::AcFunDanmu::Im::Cloud_Profile_UserOnlineStatus* Arena::CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Profile_UserOnlineStatus>(Arena*);
template<> ::AcFunDanmu::Im::ImMessage* Arena::CreateMaybeMessage<::AcFunDanmu::Im::ImMessage>(Arena*);
template<> ::AcFunDanmu::Im::ImMessage_AllUnreadCountRequest* Arena::CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_AllUnreadCountRequest>(Arena*);
template<> ::AcFunDanmu::Im::ImMessage_AllUnreadCountResponse* Arena::CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_AllUnreadCountResponse>(Arena*);
template<> ::AcFunDanmu::Im::ImMessage_Attachment* Arena::CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_Attachment>(Arena*);
template<> ::AcFunDanmu::Im::ImMessage_Attachments* Arena::CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_Attachments>(Arena*);
template<> ::AcFunDanmu::Im::ImMessage_AudioAttachment* Arena::CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_AudioAttachment>(Arena*);
template<> ::AcFunDanmu::Im::ImMessage_ChatSession* Arena::CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_ChatSession>(Arena*);
template<> ::AcFunDanmu::Im::ImMessage_ChatTarget* Arena::CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_ChatTarget>(Arena*);
template<> ::AcFunDanmu::Im::ImMessage_GifAttachment* Arena::CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_GifAttachment>(Arena*);
template<> ::AcFunDanmu::Im::ImMessage_ImageAttachment* Arena::CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_ImageAttachment>(Arena*);
template<> ::AcFunDanmu::Im::ImMessage_ImageTextMessage* Arena::CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_ImageTextMessage>(Arena*);
template<> ::AcFunDanmu::Im::ImMessage_Message* Arena::CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_Message>(Arena*);
template<> ::AcFunDanmu::Im::ImMessage_MessageBatchSendRequest* Arena::CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_MessageBatchSendRequest>(Arena*);
template<> ::AcFunDanmu::Im::ImMessage_MessageBatchSendResponse* Arena::CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_MessageBatchSendResponse>(Arena*);
template<> ::AcFunDanmu::Im::ImMessage_MessageCancelRequest* Arena::CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_MessageCancelRequest>(Arena*);
template<> ::AcFunDanmu::Im::ImMessage_MessageCancelResponse* Arena::CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_MessageCancelResponse>(Arena*);
template<> ::AcFunDanmu::Im::ImMessage_MessageClearRequest* Arena::CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_MessageClearRequest>(Arena*);
template<> ::AcFunDanmu::Im::ImMessage_MessageClearResponse* Arena::CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_MessageClearResponse>(Arena*);
template<> ::AcFunDanmu::Im::ImMessage_MessageDeleteRequest* Arena::CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_MessageDeleteRequest>(Arena*);
template<> ::AcFunDanmu::Im::ImMessage_MessageDeleteResponse* Arena::CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_MessageDeleteResponse>(Arena*);
template<> ::AcFunDanmu::Im::ImMessage_MessageReadAllRequest* Arena::CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_MessageReadAllRequest>(Arena*);
template<> ::AcFunDanmu::Im::ImMessage_MessageReadAllResponse* Arena::CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_MessageReadAllResponse>(Arena*);
template<> ::AcFunDanmu::Im::ImMessage_MessageReadPush* Arena::CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_MessageReadPush>(Arena*);
template<> ::AcFunDanmu::Im::ImMessage_MessageReadSeqRequest* Arena::CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_MessageReadSeqRequest>(Arena*);
template<> ::AcFunDanmu::Im::ImMessage_MessageReadSeqResponse* Arena::CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_MessageReadSeqResponse>(Arena*);
template<> ::AcFunDanmu::Im::ImMessage_MessageRecallRequest* Arena::CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_MessageRecallRequest>(Arena*);
template<> ::AcFunDanmu::Im::ImMessage_MessageRecallResponse* Arena::CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_MessageRecallResponse>(Arena*);
template<> ::AcFunDanmu::Im::ImMessage_MessageReceiptCountGetRequest* Arena::CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_MessageReceiptCountGetRequest>(Arena*);
template<> ::AcFunDanmu::Im::ImMessage_MessageReceiptCountGetResponse* Arena::CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_MessageReceiptCountGetResponse>(Arena*);
template<> ::AcFunDanmu::Im::ImMessage_MessageReceiptDetailGetRequest* Arena::CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_MessageReceiptDetailGetRequest>(Arena*);
template<> ::AcFunDanmu::Im::ImMessage_MessageReceiptDetailGetResponse* Arena::CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_MessageReceiptDetailGetResponse>(Arena*);
template<> ::AcFunDanmu::Im::ImMessage_MessageReceiptInfo* Arena::CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_MessageReceiptInfo>(Arena*);
template<> ::AcFunDanmu::Im::ImMessage_MessageReceiptRequest* Arena::CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_MessageReceiptRequest>(Arena*);
template<> ::AcFunDanmu::Im::ImMessage_MessageReceiptResponse* Arena::CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_MessageReceiptResponse>(Arena*);
template<> ::AcFunDanmu::Im::ImMessage_MessageReceiptStatus* Arena::CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_MessageReceiptStatus>(Arena*);
template<> ::AcFunDanmu::Im::ImMessage_NoticeMessage* Arena::CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_NoticeMessage>(Arena*);
template<> ::AcFunDanmu::Im::ImMessage_PlaceHolderMessage* Arena::CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_PlaceHolderMessage>(Arena*);
template<> ::AcFunDanmu::Im::ImMessage_PullNewRequest* Arena::CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_PullNewRequest>(Arena*);
template<> ::AcFunDanmu::Im::ImMessage_PullNewResponse* Arena::CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_PullNewResponse>(Arena*);
template<> ::AcFunDanmu::Im::ImMessage_PullOldRequest* Arena::CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_PullOldRequest>(Arena*);
template<> ::AcFunDanmu::Im::ImMessage_PullOldResponse* Arena::CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_PullOldResponse>(Arena*);
template<> ::AcFunDanmu::Im::ImMessage_ReadSeqInfo* Arena::CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_ReadSeqInfo>(Arena*);
template<> ::AcFunDanmu::Im::ImMessage_RemindBody* Arena::CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_RemindBody>(Arena*);
template<> ::AcFunDanmu::Im::ImMessage_Reminder* Arena::CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_Reminder>(Arena*);
template<> ::AcFunDanmu::Im::ImMessage_RichTextMessage* Arena::CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_RichTextMessage>(Arena*);
template<> ::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage* Arena::CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage>(Arena*);
template<> ::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage_RichTextItem* Arena::CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage_RichTextItem>(Arena*);
template<> ::AcFunDanmu::Im::ImMessage_SendMessageResponse* Arena::CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_SendMessageResponse>(Arena*);
template<> ::AcFunDanmu::Im::ImMessage_SesionStickyOnTopRequest* Arena::CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_SesionStickyOnTopRequest>(Arena*);
template<> ::AcFunDanmu::Im::ImMessage_SessionCleanRequest* Arena::CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_SessionCleanRequest>(Arena*);
template<> ::AcFunDanmu::Im::ImMessage_SessionCleanResponse* Arena::CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_SessionCleanResponse>(Arena*);
template<> ::AcFunDanmu::Im::ImMessage_SessionListRequest* Arena::CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_SessionListRequest>(Arena*);
template<> ::AcFunDanmu::Im::ImMessage_SessionListResponse* Arena::CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_SessionListResponse>(Arena*);
template<> ::AcFunDanmu::Im::ImMessage_SessionPageListRequest* Arena::CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_SessionPageListRequest>(Arena*);
template<> ::AcFunDanmu::Im::ImMessage_SessionPageListResponse* Arena::CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_SessionPageListResponse>(Arena*);
template<> ::AcFunDanmu::Im::ImMessage_SessionRaw* Arena::CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_SessionRaw>(Arena*);
template<> ::AcFunDanmu::Im::ImMessage_SessionRaw_RawEntry_DoNotUse* Arena::CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_SessionRaw_RawEntry_DoNotUse>(Arena*);
template<> ::AcFunDanmu::Im::ImMessage_SessionRemoveRequest* Arena::CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_SessionRemoveRequest>(Arena*);
template<> ::AcFunDanmu::Im::ImMessage_SessionRemoveResponse* Arena::CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_SessionRemoveResponse>(Arena*);
template<> ::AcFunDanmu::Im::ImMessage_SessionStickyOnTopResponse* Arena::CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_SessionStickyOnTopResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {
namespace Im {

enum Basic_PacketHeader_Flags : int {
  Basic_PacketHeader_Flags_kDirUpstream = 0,
  Basic_PacketHeader_Flags_kDirDownstream = 1,
  Basic_PacketHeader_Flags_kDirMask = 1,
  Basic_PacketHeader_Flags_Basic_PacketHeader_Flags_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Basic_PacketHeader_Flags_Basic_PacketHeader_Flags_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Basic_PacketHeader_Flags_IsValid(int value);
constexpr Basic_PacketHeader_Flags Basic_PacketHeader_Flags_Flags_MIN = Basic_PacketHeader_Flags_kDirUpstream;
constexpr Basic_PacketHeader_Flags Basic_PacketHeader_Flags_Flags_MAX = Basic_PacketHeader_Flags_kDirDownstream;
constexpr int Basic_PacketHeader_Flags_Flags_ARRAYSIZE = Basic_PacketHeader_Flags_Flags_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Basic_PacketHeader_Flags_descriptor();
template<typename T>
inline const std::string& Basic_PacketHeader_Flags_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Basic_PacketHeader_Flags>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Basic_PacketHeader_Flags_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Basic_PacketHeader_Flags_descriptor(), enum_t_value);
}
inline bool Basic_PacketHeader_Flags_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Basic_PacketHeader_Flags* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Basic_PacketHeader_Flags>(
    Basic_PacketHeader_Flags_descriptor(), name, value);
}
enum Basic_PacketHeader_EncodingType : int {
  Basic_PacketHeader_EncodingType_kEncodingNone = 0,
  Basic_PacketHeader_EncodingType_kEncodingLz4 = 1,
  Basic_PacketHeader_EncodingType_Basic_PacketHeader_EncodingType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Basic_PacketHeader_EncodingType_Basic_PacketHeader_EncodingType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Basic_PacketHeader_EncodingType_IsValid(int value);
constexpr Basic_PacketHeader_EncodingType Basic_PacketHeader_EncodingType_EncodingType_MIN = Basic_PacketHeader_EncodingType_kEncodingNone;
constexpr Basic_PacketHeader_EncodingType Basic_PacketHeader_EncodingType_EncodingType_MAX = Basic_PacketHeader_EncodingType_kEncodingLz4;
constexpr int Basic_PacketHeader_EncodingType_EncodingType_ARRAYSIZE = Basic_PacketHeader_EncodingType_EncodingType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Basic_PacketHeader_EncodingType_descriptor();
template<typename T>
inline const std::string& Basic_PacketHeader_EncodingType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Basic_PacketHeader_EncodingType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Basic_PacketHeader_EncodingType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Basic_PacketHeader_EncodingType_descriptor(), enum_t_value);
}
inline bool Basic_PacketHeader_EncodingType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Basic_PacketHeader_EncodingType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Basic_PacketHeader_EncodingType>(
    Basic_PacketHeader_EncodingType_descriptor(), name, value);
}
enum Basic_PacketHeader_EncryptionMode : int {
  Basic_PacketHeader_EncryptionMode_kEncryptionNone = 0,
  Basic_PacketHeader_EncryptionMode_kEncryptionServiceToken = 1,
  Basic_PacketHeader_EncryptionMode_kEncryptionSessionKey = 2,
  Basic_PacketHeader_EncryptionMode_Basic_PacketHeader_EncryptionMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Basic_PacketHeader_EncryptionMode_Basic_PacketHeader_EncryptionMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Basic_PacketHeader_EncryptionMode_IsValid(int value);
constexpr Basic_PacketHeader_EncryptionMode Basic_PacketHeader_EncryptionMode_EncryptionMode_MIN = Basic_PacketHeader_EncryptionMode_kEncryptionNone;
constexpr Basic_PacketHeader_EncryptionMode Basic_PacketHeader_EncryptionMode_EncryptionMode_MAX = Basic_PacketHeader_EncryptionMode_kEncryptionSessionKey;
constexpr int Basic_PacketHeader_EncryptionMode_EncryptionMode_ARRAYSIZE = Basic_PacketHeader_EncryptionMode_EncryptionMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Basic_PacketHeader_EncryptionMode_descriptor();
template<typename T>
inline const std::string& Basic_PacketHeader_EncryptionMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Basic_PacketHeader_EncryptionMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Basic_PacketHeader_EncryptionMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Basic_PacketHeader_EncryptionMode_descriptor(), enum_t_value);
}
inline bool Basic_PacketHeader_EncryptionMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Basic_PacketHeader_EncryptionMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Basic_PacketHeader_EncryptionMode>(
    Basic_PacketHeader_EncryptionMode_descriptor(), name, value);
}
enum Basic_PacketHeader_Feature : int {
  Basic_PacketHeader_Feature_kReserve = 0,
  Basic_PacketHeader_Feature_kCompressLz4 = 1,
  Basic_PacketHeader_Feature_Basic_PacketHeader_Feature_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Basic_PacketHeader_Feature_Basic_PacketHeader_Feature_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Basic_PacketHeader_Feature_IsValid(int value);
constexpr Basic_PacketHeader_Feature Basic_PacketHeader_Feature_Feature_MIN = Basic_PacketHeader_Feature_kReserve;
constexpr Basic_PacketHeader_Feature Basic_PacketHeader_Feature_Feature_MAX = Basic_PacketHeader_Feature_kCompressLz4;
constexpr int Basic_PacketHeader_Feature_Feature_ARRAYSIZE = Basic_PacketHeader_Feature_Feature_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Basic_PacketHeader_Feature_descriptor();
template<typename T>
inline const std::string& Basic_PacketHeader_Feature_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Basic_PacketHeader_Feature>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Basic_PacketHeader_Feature_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Basic_PacketHeader_Feature_descriptor(), enum_t_value);
}
inline bool Basic_PacketHeader_Feature_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Basic_PacketHeader_Feature* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Basic_PacketHeader_Feature>(
    Basic_PacketHeader_Feature_descriptor(), name, value);
}
enum Basic_PingRequest_PingType : int {
  Basic_PingRequest_PingType_kInvalid = 0,
  Basic_PingRequest_PingType_kPriorRegister = 1,
  Basic_PingRequest_PingType_kPostRegister = 2,
  Basic_PingRequest_PingType_Basic_PingRequest_PingType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Basic_PingRequest_PingType_Basic_PingRequest_PingType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Basic_PingRequest_PingType_IsValid(int value);
constexpr Basic_PingRequest_PingType Basic_PingRequest_PingType_PingType_MIN = Basic_PingRequest_PingType_kInvalid;
constexpr Basic_PingRequest_PingType Basic_PingRequest_PingType_PingType_MAX = Basic_PingRequest_PingType_kPostRegister;
constexpr int Basic_PingRequest_PingType_PingType_ARRAYSIZE = Basic_PingRequest_PingType_PingType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Basic_PingRequest_PingType_descriptor();
template<typename T>
inline const std::string& Basic_PingRequest_PingType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Basic_PingRequest_PingType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Basic_PingRequest_PingType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Basic_PingRequest_PingType_descriptor(), enum_t_value);
}
inline bool Basic_PingRequest_PingType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Basic_PingRequest_PingType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Basic_PingRequest_PingType>(
    Basic_PingRequest_PingType_descriptor(), name, value);
}
enum Basic_RegisterRequest_PresenceStatus : int {
  Basic_RegisterRequest_PresenceStatus_kPresenceOffline = 0,
  Basic_RegisterRequest_PresenceStatus_kPresenceOnline = 1,
  Basic_RegisterRequest_PresenceStatus_Basic_RegisterRequest_PresenceStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Basic_RegisterRequest_PresenceStatus_Basic_RegisterRequest_PresenceStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Basic_RegisterRequest_PresenceStatus_IsValid(int value);
constexpr Basic_RegisterRequest_PresenceStatus Basic_RegisterRequest_PresenceStatus_PresenceStatus_MIN = Basic_RegisterRequest_PresenceStatus_kPresenceOffline;
constexpr Basic_RegisterRequest_PresenceStatus Basic_RegisterRequest_PresenceStatus_PresenceStatus_MAX = Basic_RegisterRequest_PresenceStatus_kPresenceOnline;
constexpr int Basic_RegisterRequest_PresenceStatus_PresenceStatus_ARRAYSIZE = Basic_RegisterRequest_PresenceStatus_PresenceStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Basic_RegisterRequest_PresenceStatus_descriptor();
template<typename T>
inline const std::string& Basic_RegisterRequest_PresenceStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Basic_RegisterRequest_PresenceStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Basic_RegisterRequest_PresenceStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Basic_RegisterRequest_PresenceStatus_descriptor(), enum_t_value);
}
inline bool Basic_RegisterRequest_PresenceStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Basic_RegisterRequest_PresenceStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Basic_RegisterRequest_PresenceStatus>(
    Basic_RegisterRequest_PresenceStatus_descriptor(), name, value);
}
enum Basic_RegisterRequest_ActiveStatus : int {
  Basic_RegisterRequest_ActiveStatus_kInvalid = 0,
  Basic_RegisterRequest_ActiveStatus_kAppInForeground = 1,
  Basic_RegisterRequest_ActiveStatus_kAppinBackground = 2,
  Basic_RegisterRequest_ActiveStatus_Basic_RegisterRequest_ActiveStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Basic_RegisterRequest_ActiveStatus_Basic_RegisterRequest_ActiveStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Basic_RegisterRequest_ActiveStatus_IsValid(int value);
constexpr Basic_RegisterRequest_ActiveStatus Basic_RegisterRequest_ActiveStatus_ActiveStatus_MIN = Basic_RegisterRequest_ActiveStatus_kInvalid;
constexpr Basic_RegisterRequest_ActiveStatus Basic_RegisterRequest_ActiveStatus_ActiveStatus_MAX = Basic_RegisterRequest_ActiveStatus_kAppinBackground;
constexpr int Basic_RegisterRequest_ActiveStatus_ActiveStatus_ARRAYSIZE = Basic_RegisterRequest_ActiveStatus_ActiveStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Basic_RegisterRequest_ActiveStatus_descriptor();
template<typename T>
inline const std::string& Basic_RegisterRequest_ActiveStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Basic_RegisterRequest_ActiveStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Basic_RegisterRequest_ActiveStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Basic_RegisterRequest_ActiveStatus_descriptor(), enum_t_value);
}
inline bool Basic_RegisterRequest_ActiveStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Basic_RegisterRequest_ActiveStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Basic_RegisterRequest_ActiveStatus>(
    Basic_RegisterRequest_ActiveStatus_descriptor(), name, value);
}
enum Basic_AccessPoint_AddressType : int {
  Basic_AccessPoint_AddressType_kIPV4 = 0,
  Basic_AccessPoint_AddressType_kIPV6 = 1,
  Basic_AccessPoint_AddressType_kDomain = 2,
  Basic_AccessPoint_AddressType_Basic_AccessPoint_AddressType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Basic_AccessPoint_AddressType_Basic_AccessPoint_AddressType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Basic_AccessPoint_AddressType_IsValid(int value);
constexpr Basic_AccessPoint_AddressType Basic_AccessPoint_AddressType_AddressType_MIN = Basic_AccessPoint_AddressType_kIPV4;
constexpr Basic_AccessPoint_AddressType Basic_AccessPoint_AddressType_AddressType_MAX = Basic_AccessPoint_AddressType_kDomain;
constexpr int Basic_AccessPoint_AddressType_AddressType_ARRAYSIZE = Basic_AccessPoint_AddressType_AddressType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Basic_AccessPoint_AddressType_descriptor();
template<typename T>
inline const std::string& Basic_AccessPoint_AddressType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Basic_AccessPoint_AddressType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Basic_AccessPoint_AddressType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Basic_AccessPoint_AddressType_descriptor(), enum_t_value);
}
inline bool Basic_AccessPoint_AddressType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Basic_AccessPoint_AddressType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Basic_AccessPoint_AddressType>(
    Basic_AccessPoint_AddressType_descriptor(), name, value);
}
enum Basic_TokenInfo_TokenType : int {
  Basic_TokenInfo_TokenType_kInvalid = 0,
  Basic_TokenInfo_TokenType_kServiceToken = 1,
  Basic_TokenInfo_TokenType_Basic_TokenInfo_TokenType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Basic_TokenInfo_TokenType_Basic_TokenInfo_TokenType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Basic_TokenInfo_TokenType_IsValid(int value);
constexpr Basic_TokenInfo_TokenType Basic_TokenInfo_TokenType_TokenType_MIN = Basic_TokenInfo_TokenType_kInvalid;
constexpr Basic_TokenInfo_TokenType Basic_TokenInfo_TokenType_TokenType_MAX = Basic_TokenInfo_TokenType_kServiceToken;
constexpr int Basic_TokenInfo_TokenType_TokenType_ARRAYSIZE = Basic_TokenInfo_TokenType_TokenType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Basic_TokenInfo_TokenType_descriptor();
template<typename T>
inline const std::string& Basic_TokenInfo_TokenType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Basic_TokenInfo_TokenType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Basic_TokenInfo_TokenType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Basic_TokenInfo_TokenType_descriptor(), enum_t_value);
}
inline bool Basic_TokenInfo_TokenType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Basic_TokenInfo_TokenType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Basic_TokenInfo_TokenType>(
    Basic_TokenInfo_TokenType_descriptor(), name, value);
}
enum Basic_PushServiceToken_PushType : int {
  Basic_PushServiceToken_PushType_kPushTypeInvalid = 0,
  Basic_PushServiceToken_PushType_kPushTypeAPNS = 1,
  Basic_PushServiceToken_PushType_kPushTypeXmPush = 2,
  Basic_PushServiceToken_PushType_kPushTypeJgPush = 3,
  Basic_PushServiceToken_PushType_kPushTypeGtPUsh = 4,
  Basic_PushServiceToken_PushType_kPushTypeOpPush = 5,
  Basic_PushServiceToken_PushType_kPushTYpeVvPush = 6,
  Basic_PushServiceToken_PushType_kPushTypeHwPush = 7,
  Basic_PushServiceToken_PushType_kPushTYpeFcm = 8,
  Basic_PushServiceToken_PushType_Basic_PushServiceToken_PushType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Basic_PushServiceToken_PushType_Basic_PushServiceToken_PushType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Basic_PushServiceToken_PushType_IsValid(int value);
constexpr Basic_PushServiceToken_PushType Basic_PushServiceToken_PushType_PushType_MIN = Basic_PushServiceToken_PushType_kPushTypeInvalid;
constexpr Basic_PushServiceToken_PushType Basic_PushServiceToken_PushType_PushType_MAX = Basic_PushServiceToken_PushType_kPushTYpeFcm;
constexpr int Basic_PushServiceToken_PushType_PushType_ARRAYSIZE = Basic_PushServiceToken_PushType_PushType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Basic_PushServiceToken_PushType_descriptor();
template<typename T>
inline const std::string& Basic_PushServiceToken_PushType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Basic_PushServiceToken_PushType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Basic_PushServiceToken_PushType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Basic_PushServiceToken_PushType_descriptor(), enum_t_value);
}
inline bool Basic_PushServiceToken_PushType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Basic_PushServiceToken_PushType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Basic_PushServiceToken_PushType>(
    Basic_PushServiceToken_PushType_descriptor(), name, value);
}
enum Basic_DeviceInfo_PlatformType : int {
  Basic_DeviceInfo_PlatformType_kInvalid = 0,
  Basic_DeviceInfo_PlatformType_kAndroid = 1,
  Basic_DeviceInfo_PlatformType_kiOS = 2,
  Basic_DeviceInfo_PlatformType_kWindows = 3,
  Basic_DeviceInfo_PlatformType_WECHAT_ANDROID = 4,
  Basic_DeviceInfo_PlatformType_WECHAT_IOS = 5,
  Basic_DeviceInfo_PlatformType_H5 = 6,
  Basic_DeviceInfo_PlatformType_kPlatformNum = 7,
  Basic_DeviceInfo_PlatformType_Basic_DeviceInfo_PlatformType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Basic_DeviceInfo_PlatformType_Basic_DeviceInfo_PlatformType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Basic_DeviceInfo_PlatformType_IsValid(int value);
constexpr Basic_DeviceInfo_PlatformType Basic_DeviceInfo_PlatformType_PlatformType_MIN = Basic_DeviceInfo_PlatformType_kInvalid;
constexpr Basic_DeviceInfo_PlatformType Basic_DeviceInfo_PlatformType_PlatformType_MAX = Basic_DeviceInfo_PlatformType_kPlatformNum;
constexpr int Basic_DeviceInfo_PlatformType_PlatformType_ARRAYSIZE = Basic_DeviceInfo_PlatformType_PlatformType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Basic_DeviceInfo_PlatformType_descriptor();
template<typename T>
inline const std::string& Basic_DeviceInfo_PlatformType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Basic_DeviceInfo_PlatformType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Basic_DeviceInfo_PlatformType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Basic_DeviceInfo_PlatformType_descriptor(), enum_t_value);
}
inline bool Basic_DeviceInfo_PlatformType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Basic_DeviceInfo_PlatformType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Basic_DeviceInfo_PlatformType>(
    Basic_DeviceInfo_PlatformType_descriptor(), name, value);
}
enum Basic_EnvInfo_NetworkType : int {
  Basic_EnvInfo_NetworkType_kInvalid = 0,
  Basic_EnvInfo_NetworkType_kWIFI = 1,
  Basic_EnvInfo_NetworkType_kCellular = 2,
  Basic_EnvInfo_NetworkType_Basic_EnvInfo_NetworkType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Basic_EnvInfo_NetworkType_Basic_EnvInfo_NetworkType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Basic_EnvInfo_NetworkType_IsValid(int value);
constexpr Basic_EnvInfo_NetworkType Basic_EnvInfo_NetworkType_NetworkType_MIN = Basic_EnvInfo_NetworkType_kInvalid;
constexpr Basic_EnvInfo_NetworkType Basic_EnvInfo_NetworkType_NetworkType_MAX = Basic_EnvInfo_NetworkType_kCellular;
constexpr int Basic_EnvInfo_NetworkType_NetworkType_ARRAYSIZE = Basic_EnvInfo_NetworkType_NetworkType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Basic_EnvInfo_NetworkType_descriptor();
template<typename T>
inline const std::string& Basic_EnvInfo_NetworkType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Basic_EnvInfo_NetworkType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Basic_EnvInfo_NetworkType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Basic_EnvInfo_NetworkType_descriptor(), enum_t_value);
}
inline bool Basic_EnvInfo_NetworkType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Basic_EnvInfo_NetworkType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Basic_EnvInfo_NetworkType>(
    Basic_EnvInfo_NetworkType_descriptor(), name, value);
}
enum Basic_SharePlatform : int {
  Basic_SharePlatform_kSharePlatformInvalid = 0,
  Basic_SharePlatform_kSharePlatformWechat = 1,
  Basic_SharePlatform_kSharePlatformWechatMoments = 2,
  Basic_SharePlatform_kSharePlatformQQ = 3,
  Basic_SharePlatform_kSharePlatformQzone = 4,
  Basic_SharePlatform_kSharePlatformWeibo = 5,
  Basic_SharePlatform_kSharePlatformKuaishou = 6,
  Basic_SharePlatform_kSharePlatformFacebook = 7,
  Basic_SharePlatform_kSharePlatformTwitter = 8,
  Basic_SharePlatform_kSharePlatformGoogle = 9,
  Basic_SharePlatform_kSharePlatformKakao = 10,
  Basic_SharePlatform_kSharePlatformZalo = 11,
  Basic_SharePlatform_Basic_SharePlatform_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Basic_SharePlatform_Basic_SharePlatform_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Basic_SharePlatform_IsValid(int value);
constexpr Basic_SharePlatform Basic_SharePlatform_SharePlatform_MIN = Basic_SharePlatform_kSharePlatformInvalid;
constexpr Basic_SharePlatform Basic_SharePlatform_SharePlatform_MAX = Basic_SharePlatform_kSharePlatformZalo;
constexpr int Basic_SharePlatform_SharePlatform_ARRAYSIZE = Basic_SharePlatform_SharePlatform_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Basic_SharePlatform_descriptor();
template<typename T>
inline const std::string& Basic_SharePlatform_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Basic_SharePlatform>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Basic_SharePlatform_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Basic_SharePlatform_descriptor(), enum_t_value);
}
inline bool Basic_SharePlatform_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Basic_SharePlatform* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Basic_SharePlatform>(
    Basic_SharePlatform_descriptor(), name, value);
}
enum Basic_ErrorCode : int {
  Basic_ErrorCode_SUCC = 0,
  Basic_ErrorCode_BASIC_MIN = 10000,
  Basic_ErrorCode_INTERNEL_ERROR = 10001,
  Basic_ErrorCode_SERVICE_UNAVAILABLE = 10002,
  Basic_ErrorCode_SERVICE_TIMEOUT = 10003,
  Basic_ErrorCode_INVALID_TOKEN = 10004,
  Basic_ErrorCode_REG_ENCYRPT_WITHOUT_TOKEN = 10005,
  Basic_ErrorCode_PARSE_PB_HDR_FAIL = 10006,
  Basic_ErrorCode_PARSE_PB_PLD_FAIL = 10007,
  Basic_ErrorCode_PARSE_PB_FAIL = 10008,
  Basic_ErrorCode_DECODED_LEN_FAIL = 10009,
  Basic_ErrorCode_INVALID_KEY = 10010,
  Basic_ErrorCode_ENCRYPT_FAIL = 10011,
  Basic_ErrorCode_DECRYPT_FAIL = 10012,
  Basic_ErrorCode_INVALID_TAG = 10013,
  Basic_ErrorCode_INVALID_VER = 10014,
  Basic_ErrorCode_INVALID_COMPRESS_TYPE = 10016,
  Basic_ErrorCode_INVALID_ENCRYPT_TYPE = 10017,
  Basic_ErrorCode_NOT_REGISTER = 10018,
  Basic_ErrorCode_USER_NOT_ONLINE = 10019,
  Basic_ErrorCode_INVALID_COMMAND = 10020,
  Basic_ErrorCode_PUSH_UNREGISTER_ERROR = 10021,
  Basic_ErrorCode_INVALID_SID = 10022,
  Basic_ErrorCode_INVALID_INSTANCE_ID = 10023,
  Basic_ErrorCode_CLIENT_LOCALE_NOT_MATCH = 10024,
  Basic_ErrorCode_INVALID_TOKEN_PASSWORD_CHANGED = 10025,
  Basic_ErrorCode_INVALID_TOKEN_TOKEN_EXPIRED = 10026,
  Basic_ErrorCode_INVALID_TOKEN_TOKEN_VALUE_ERROR = 10027,
  Basic_ErrorCode_INVALID_TOKEN_LOGIN_ON_OTHER_DEVICE = 10028,
  Basic_ErrorCode_FORCE_RECONNECT = 10029,
  Basic_ErrorCode_CLIENT_TIMEOUT = 10030,
  Basic_ErrorCode_INVALID_ARGUMENT = 10031,
  Basic_ErrorCode_INVALID_FORMAT_TOKEN = 10032,
  Basic_ErrorCode_EMPTY_PAYLOAD = 10033,
  Basic_ErrorCode_COMPRESS_FAIL = 10034,
  Basic_ErrorCode_DECOMPRESS_FAIL = 10035,
  Basic_ErrorCode_OUT_OF_ORDER = 10036,
  Basic_ErrorCode_MESSAGE_MIN = 20000,
  Basic_ErrorCode_ILLEGAL_PARAMETER = 20001,
  Basic_ErrorCode_SYSTEM_BUSY = 20002,
  Basic_ErrorCode_ILLEGAL_USER = 20003,
  Basic_ErrorCode_PARAMETER_LEN_TOO_LONG = 20004,
  Basic_ErrorCode_DATABASE_ERROR_MYSQL = 20005,
  Basic_ErrorCode_DATABASE_ERROR_HBASE = 20006,
  Basic_ErrorCode_DATABASE_ERROR_REDIS = 20007,
  Basic_ErrorCode_USER_REGISTER_LIMIT_IN_ALPHA = 20008,
  Basic_ErrorCode_FLOW_CONTROL = 20009,
  Basic_ErrorCode_LOCKED_USER_ACCOUNT_NEED_UPDATE_VERSION = 20010,
  Basic_ErrorCode_USER_NOT_REGISTER = 21003,
  Basic_ErrorCode_USER_NOT_FOUND = 21004,
  Basic_ErrorCode_FRIEND_ADD_NEED_VERIFY = 21005,
  Basic_ErrorCode_NO_FRIEND_REQUEST = 21006,
  Basic_ErrorCode_TOO_MANY_FRIENDS = 21007,
  Basic_ErrorCode_FRIEND_REQUEST_TOO_FREQUENTLY = 21008,
  Basic_ErrorCode_CHAT_NEED_TO_BE_FRIEND = 21009,
  Basic_ErrorCode_ADD_FRIEND_BLOCKED = 21010,
  Basic_ErrorCode_CANNOT_ADD_FRIEND_TO_SELF = 21011,
  Basic_ErrorCode_CANNOT_FOLLOW_SELF = 21012,
  Basic_ErrorCode_ADD_FOLLOW_BLOCKED = 21013,
  Basic_ErrorCode_TARGET_FRIEND_TOO_MANY = 21014,
  Basic_ErrorCode_TOO_MANY_IDOLS = 21015,
  Basic_ErrorCode_FRIEND_FOLLOW_OVER_LIMIT = 21016,
  Basic_ErrorCode_FRIEND_FOLLOW_SPAM = 21017,
  Basic_ErrorCode_CLIENT_CONFIG_READ_ERROR = 22000,
  Basic_ErrorCode_CLIENT_CONFIG_NOT_EXISTS_ERROR = 22001,
  Basic_ErrorCode_CONTENT_HIT_SENSITIVE_WORDS = 23000,
  Basic_ErrorCode_MORE_THAN_MAX_LENGTH = 24000,
  Basic_ErrorCode_MSG_TEXT_MAX_LENGTH = 24001,
  Basic_ErrorCode_MSG_CANCEL_OVERDUE = 24002,
  Basic_ErrorCode_CANNOT_RECALL_NON_SELF_MSG = 24003,
  Basic_ErrorCode_RECALL_NOT_EXIST_MSG = 24004,
  Basic_ErrorCode_REF_MSG_NESTING_DEPTH_REACH_LIMIT = 24005,
  Basic_ErrorCode_SEND_KS_MESSAGE_NOT_MATCH_RULE = 24100,
  Basic_ErrorCode_FIND_USER_FREQUENCY = 24101,
  Basic_ErrorCode_KUAISHOU_FANS_TOKEN_INVALID = 24102,
  Basic_ErrorCode_KUAISHOU_AUTHORIZE_FAILED = 24103,
  Basic_ErrorCode_ADD_FRIEND_TOO_FREQUENTLY = 24104,
  Basic_ErrorCode_BLACK_LIST_REACHED_LIMIT = 24105,
  Basic_ErrorCode_GAME_ROOM_IS_RELEASED = 50001,
  Basic_ErrorCode_CREATE_GAME_ROOM_FAIL = 50002,
  Basic_ErrorCode_GAME_SERVER_ERROR = 50003,
  Basic_ErrorCode_GAME_ROOM_IS_EXPIRED = 50004,
  Basic_ErrorCode_ALREADY_IN_GAME = 50006,
  Basic_ErrorCode_TARGET_ALREADY_IN_GAME = 50007,
  Basic_ErrorCode_GAME_NOT_EXIST = 50008,
  Basic_ErrorCode_GAME_ACCEPT_BUT_ALREAD_IN_GAME = 50009,
  Basic_ErrorCode_GAME_ACCEPT_BUT_TARGET_ALREADY_IN_GAME = 50010,
  Basic_ErrorCode_GAME_ACCEPT_BUT_APP_VERSION_TOO_LOW = 50011,
  Basic_ErrorCode_GAME_USER_MATCH_FAIL = 50012,
  Basic_ErrorCode_USER_FREQUENT_LEAVE_GAME_BE_PUNISHED = 50013,
  Basic_ErrorCode_RELATIONSHIP_INVALID_CANNOT_SEND_GAME_INVITE = 50014,
  Basic_ErrorCode_GAME_USER_MATCH_SYNC_NO_MATCH = 50015,
  Basic_ErrorCode_FORBID_MATCH = 50016,
  Basic_ErrorCode_GAME_RESOURCE_NO_EXIST = 50017,
  Basic_ErrorCode_GAME_MATCH_SYNC_NO_MATCH = 50018,
  Basic_ErrorCode_GAME_MATCH_SYNC_ALREADY_FINISH = 50019,
  Basic_ErrorCode_INVITATION_SEND_REACH_LIMITATION = 50020,
  Basic_ErrorCode_GAME_MATCH_TEAM_NOT_EXIST = 50021,
  Basic_ErrorCode_GAME_MATCH_TEAM_NO_TARGET = 50022,
  Basic_ErrorCode_GAME_MATCH_TEAM_OTHER_ALREADY_JOIN_SUCC = 50023,
  Basic_ErrorCode_FORZEN_USER = 50024,
  Basic_ErrorCode_FORZEN_USER_PROFILE = 50025,
  Basic_ErrorCode_FORZEN_USER_ACCOUNT = 50026,
  Basic_ErrorCode_TEMP_FORZEN_USER_ACCOUNT = 50027,
  Basic_ErrorCode_LOCKED_USER_ACCOUNT = 50028,
  Basic_ErrorCode_UNFREEZE_USER_ACCOUNT_APPLY_IN_PROCESS = 50029,
  Basic_ErrorCode_GAME_MATH_TEAM_DISBANDED = 50030,
  Basic_ErrorCode_USER_ACCOUNT_IS_NOT_FORZEN = 50031,
  Basic_ErrorCode_CAPTCHA_VERIFY_FAILED = 50032,
  Basic_ErrorCode_PROFILE_UPDATE_NOT_PERMIT = 50033,
  Basic_ErrorCode_GAME_REQUEST_TOO_FREQUENTLY = 50034,
  Basic_ErrorCode_WECHAT_GAME_INVITE_CANCEL = 50050,
  Basic_ErrorCode_WECHAT_GAME_INVITE_ACCEPTED = 50051,
  Basic_ErrorCode_THIRD_PARTY_NOT_BIND = 50040,
  Basic_ErrorCode_THIRD_PARTY_TOKEN_EXPIRE = 50041,
  Basic_ErrorCode_THIRD_PARTY_NO_FRIEND_PERMISSION = 50042,
  Basic_ErrorCode_GAME_INVITE_INFO_NOT_EXIST = 50060,
  Basic_ErrorCode_GAME_ACCEPT_IS_INVALID = 50061,
  Basic_ErrorCode_GAME_ARENA_NOT_EXIST = 50062,
  Basic_ErrorCode_GAME_SHOP_PROPS_BUY_FAIL = 50063,
  Basic_ErrorCode_GAME_SHOP_PROPS_USE_FAIL = 50064,
  Basic_ErrorCode_GAME_SHOP_PROPS_NOT_EXIST = 50065,
  Basic_ErrorCode_GAME_SHOP_PROPS_COUNT_UNMATCH = 50066,
  Basic_ErrorCode_GAME_SKIN_NOT_EXIST = 50067,
  Basic_ErrorCode_GAME_COIN_SHARE_TAKE_OVER_LIMIT = 50068,
  Basic_ErrorCode_GAME_COIN_TIMELY_TAKE_IN_CD = 50069,
  Basic_ErrorCode_GAME_SKIN_IN_LOCKED = 50070,
  Basic_ErrorCode_GAME_SHOP_BALANCE_NOT_ENOUGH = 50071,
  Basic_ErrorCode_GAME_SKIN_ALREADY_UNLOCKED = 50072,
  Basic_ErrorCode_GAME_SKIN_UPDATE_FAIL = 50073,
  Basic_ErrorCode_GAME_SKIN_IS_IN_USED = 50074,
  Basic_ErrorCode_GAME_USER_MATCH_TIMES_LIMIT = 50075,
  Basic_ErrorCode_GAME_SKIN_BUY_FAIL = 50076,
  Basic_ErrorCode_GAME_RESULT_VERIFY_NOT_PASS = 50077,
  Basic_ErrorCode_USE_RANK_TITLE_FAILED = 50078,
  Basic_ErrorCode_USER_LOCATION_FAILD = 50079,
  Basic_ErrorCode_GAME_ACHIEVEMENT_NOT_EXIST = 50080,
  Basic_ErrorCode_BALANCE_NOT_ENOUGH = 50081,
  Basic_ErrorCode_COIN_USE_FAIL = 50082,
  Basic_ErrorCode_COIN_ADD_FAIL = 50083,
  Basic_ErrorCode_GAME_LINK_MIC_ROOM_NOT_EXIST = 50100,
  Basic_ErrorCode_GAME_LINK_MIC_USER_NOT_IN_ROOM = 50101,
  Basic_ErrorCode_GAME_LINK_MIC_ROOM_UNEXPECTED_MESSAGE = 50102,
  Basic_ErrorCode_GAME_LINK_MIC_USER_ALREADY_IN_ROOM = 50103,
  Basic_ErrorCode_CHAT_ROOM_NOT_EXIST = 50200,
  Basic_ErrorCode_CHAT_ROOM_NOT_MEMBER = 50201,
  Basic_ErrorCode_CHAT_ROOM_TARGET_LEAVE = 50202,
  Basic_ErrorCode_CHAT_ROOM_TARGET_LEAVE_2P = 50203,
  Basic_ErrorCode_CHAT_ROOM_FORBID_IMAGE_BETWEEN_STRANGER = 50204,
  Basic_ErrorCode_CHAT_ROOM_LEAVE_TOO_FREQUENTLY = 50205,
  Basic_ErrorCode_SESSION_FORBID_IMAGE_BETWEEN_STRANGER = 50210,
  Basic_ErrorCode_SEND_MESSAGE_IS_BANNED = 50211,
  Basic_ErrorCode_QUIZZES_NOT_EXIST = 50300,
  Basic_ErrorCode_QUIZZES_ANSWER_TIMEOUT = 50301,
  Basic_ErrorCode_ALREADY_USED_INVITATION_CODE = 50302,
  Basic_ErrorCode_CANNOT_USE_ONESELF_INVITATION_CODE = 50303,
  Basic_ErrorCode_INVITATION_CODE_IS_INVALID = 50304,
  Basic_ErrorCode_MULTIPLAYER_GAME_ROOM_NOT_EXIST = 50400,
  Basic_ErrorCode_MULTIPLAYER_GAME_ROOM_NOT_MEMBER = 50401,
  Basic_ErrorCode_MULTIPLAYER_GAME_ROOM_MEMBER_KICKED = 50402,
  Basic_ErrorCode_MULTIPLAYER_GAME_ROOM_LEAVE_FREQUENCY = 50403,
  Basic_ErrorCode_DRAW_GUESS_ROOM_NOT_EXIST = 50500,
  Basic_ErrorCode_GUESS_WORD_NOT_EXIST = 50501,
  Basic_ErrorCode_DRAW_GUESS_ROOM_NOT_MEMBER = 50502,
  Basic_ErrorCode_NOT_DRAW_USER = 50503,
  Basic_ErrorCode_CANNOT_GUESS_NOW = 50504,
  Basic_ErrorCode_DRAW_USER_CANNOT_GUESS = 50505,
  Basic_ErrorCode_CANNOT_DRAW_NOW = 50506,
  Basic_ErrorCode_GUESS_WORD_EXCEED_MAX_LENGTH = 50507,
  Basic_ErrorCode_GUESS_WORD_HIT_SENSITIVE_WORDS = 50508,
  Basic_ErrorCode_USER_IN_TRAVEL_FOR_INVITOR = 50600,
  Basic_ErrorCode_PEER_IN_TRAVEL = 50601,
  Basic_ErrorCode_TRAVEL_FINISHED = 50602,
  Basic_ErrorCode_TRAVEL_INVITE_INVALID = 50603,
  Basic_ErrorCode_TRAVEL_NOT_FRIEND = 50604,
  Basic_ErrorCode_TRAVEL_NOT_EXIST = 50605,
  Basic_ErrorCode_TRAVEL_SELF_FORBID = 50606,
  Basic_ErrorCode_TRAVEL_SCENARIO_END = 50607,
  Basic_ErrorCode_USER_IN_TRAVEL_FOR_ACCEPTOR = 50608,
  Basic_ErrorCode_TRAVEL_ENTRANCE_CLOSED = 50609,
  Basic_ErrorCode_USER_HAS_OPERATED_MESSAGE = 50610,
  Basic_ErrorCode_TRAVEL_NOT_FRIEND_FOR_ACCEPTOR = 50611,
  Basic_ErrorCode_WHO_SPY_ROOM_NOT_EXIST = 50700,
  Basic_ErrorCode_WHO_SPY_ROOM_NOT_MEMBER = 50701,
  Basic_ErrorCode_CANNOT_DESCRIBE_NOW = 50703,
  Basic_ErrorCode_CANNOT_VOTE_NOW = 50704,
  Basic_ErrorCode_SPY_CANNOT_GUESS = 50705,
  Basic_ErrorCode_NOT_DESCRIBE_USER = 50706,
  Basic_ErrorCode_NOT_VOTE_USER = 50707,
  Basic_ErrorCode_INVALID_VOTE_TARGET = 50708,
  Basic_ErrorCode_DESCRIPTION_EXCEED_MAX_LENGTH = 50709,
  Basic_ErrorCode_DESCRIPTION_HIT_SENSITIVE_WORDS = 50710,
  Basic_ErrorCode_SPY_GUESS_WORD_EXCEED_MAX_LENGTH = 50711,
  Basic_ErrorCode_SPY_GUESS_WORD_HIT_SENSITIVE_WORDS = 50712,
  Basic_ErrorCode_ALREADY_IN_MULTI_PLAYER_CHAT_ROOM = 50800,
  Basic_ErrorCode_CHAT_ROOM_TOPIC_HIT_SENSITIVE_WORDS = 50801,
  Basic_ErrorCode_MULTI_PLAYER_CHAT_ROOM_CREATE_FAIL = 50802,
  Basic_ErrorCode_MULTI_PLAYER_CHAT_ROOM_CREATE_FREQUENT = 50803,
  Basic_ErrorCode_MULTI_PLAYER_CHAT_ROOM_NOT_EXIST = 50804,
  Basic_ErrorCode_OPERATION_ALLOWED_FOR_OWNER_ONLY = 50805,
  Basic_ErrorCode_MULTI_PLAYER_CHAT_ROOM_GAME_CREATE_FAIL = 50806,
  Basic_ErrorCode_MULTI_PLAYER_CHAT_ROOM_GAME_NOT_MATCH = 50807,
  Basic_ErrorCode_NOT_MEMBER_FOR_MULTI_PLAYER_CHAT_ROOM = 50808,
  Basic_ErrorCode_MULTI_PLAYER_CHAT_ROOM_RELEASED = 50809,
  Basic_ErrorCode_MULTI_PLAYER_CHAT_ROOM_FULL = 50810,
  Basic_ErrorCode_ALREADY_IN_OTHER_MULTI_PLAYER_CHAT_ROOM = 50811,
  Basic_ErrorCode_FORBID_JOIN_PRIVATE_MULTI_PLAYER_CHAT_ROOM = 50812,
  Basic_ErrorCode_MULTI_PLAYER_CHAT_ROOM_JOIN_FAIL = 50813,
  Basic_ErrorCode_QUICK_MATCH_SYNC_NO_MATCH = 50814,
  Basic_ErrorCode_PLAYER_LEAVE_MULTI_PLAYER_CHAT_ROOM = 50815,
  Basic_ErrorCode_LINKMIC_COUNT_REACH_LIMIT = 50816,
  Basic_ErrorCode_PLAYER_ALREADY_LINKMIC_ONLINE = 50817,
  Basic_ErrorCode_PLAYER_ALREADY_LINKMIC_OFFLINE = 50818,
  Basic_ErrorCode_PLAYER_ALREADY_LEAVE_CHAT_ROOM = 50819,
  Basic_ErrorCode_FORBID_LINK_MIC_OFFLINE_FOR_OWNER = 50820,
  Basic_ErrorCode_FORBID_LINK_MIC_OFFLINE_PLAYING_GAME = 50821,
  Basic_ErrorCode_FORBID_LINK_MIC_ONLINE_PLAYING_GAME = 50822,
  Basic_ErrorCode_MULTI_PLAYER_CHAT_ROOM_MEMBER_KICKEDOUT = 50823,
  Basic_ErrorCode_FORBID_KICKOUT_PLAYER_PLAYING_GAME = 50824,
  Basic_ErrorCode_MULTI_PLAYER_CHAT_ROOM_GAME_NOT_EXIST = 50825,
  Basic_ErrorCode_MULTI_PLAYER_CHAT_ROOM_MEMBER_TIMEOUT = 50826,
  Basic_ErrorCode_FORBID_GAME_UNREADY_FOR_OWNER = 50827,
  Basic_ErrorCode_FORBID_CREATE_CHAT_ROOM = 50828,
  Basic_ErrorCode_CHAT_ROOM_TOPIC_NOT_ALLOWED_EMPTY = 50829,
  Basic_ErrorCode_MULTI_PLAYER_CHAT_ROOM_GAME_ROOM_FULL = 50830,
  Basic_ErrorCode_PLAYER_NOT_LINKMIC_ONLINE = 50831,
  Basic_ErrorCode_LINKMIC_STATUS_ALREADY_UPDATE = 50832,
  Basic_ErrorCode_CANNOT_APPLY_LINKMIC = 50833,
  Basic_ErrorCode_CANNOT_CREATE_CHAT_ROOM_FOR_BLACKLIST = 50834,
  Basic_ErrorCode_CANNOT_CREATE_CHAT_ROOM_FOR_NOT_BIND = 50835,
  Basic_ErrorCode_CANNOT_JOIN_CHAT_ROOM_FOR_BLACKLIST = 50836,
  Basic_ErrorCode_NO_AVAILABLE_CHAT_ROOM = 50837,
  Basic_ErrorCode_MAX_PLAYER_COUNT_REACH_LIMIT = 50838,
  Basic_ErrorCode_MULTI_PLAYER_CHAT_ROOM_NEED_UPDATE_VERSION = 50839,
  Basic_ErrorCode_MULTI_PLAYER_CHAT_ROOM_START_GAME_UPDATE_VERSION = 50840,
  Basic_ErrorCode_MULTI_PLAYER_CHAT_ROOM_ALREADY_IN_GAME = 50841,
  Basic_ErrorCode_MULTI_PLAYER_CHAT_ROOM_FORBID_CANCEL_CREATE = 50842,
  Basic_ErrorCode_CHAT_ROOM_SEATNAME_HIT_SENSITIVE_WORDS = 50843,
  Basic_ErrorCode_CHAT_ROOM_THEME_NOT_EXIST = 50844,
  Basic_ErrorCode_ONLY_VIP_CAN_UPLOAD_BACKGROUND = 50845,
  Basic_ErrorCode_MORE_THAN_BACKGROUND_MAX_COUNT = 50846,
  Basic_ErrorCode_MODIFY_BACKGROUND_FOR_NORMAL_ROOM = 50847,
  Basic_ErrorCode_CHAT_ROOM_ANNOUNCEMENT_EXCEED_MAX_LENGTH = 50848,
  Basic_ErrorCode_CHAT_ROOM_ANNOUNCEMENT_HIT_SENSITIVE_WORDS = 50849,
  Basic_ErrorCode_NOT_THEME_ROOM = 50850,
  Basic_ErrorCode_FEED_NOT_EXIST = 50900,
  Basic_ErrorCode_FEED_NOT_OWNER = 50901,
  Basic_ErrorCode_FEED_PUBLISHED = 50902,
  Basic_ErrorCode_FEED_TEXT_EXCEED_MAX_LENGTH = 50903,
  Basic_ErrorCode_FEED_TEXT_HIT_SENSITIVE_WORDS = 50904,
  Basic_ErrorCode_FEED_ATTACHMENT_MISSING_INFO = 50905,
  Basic_ErrorCode_FEED_USER_LIKED = 50906,
  Basic_ErrorCode_FEED_CITY_NOT_LOCATED = 50907,
  Basic_ErrorCode_FEED_PROFILE_AUTHOR_BLOCK_USER = 50908,
  Basic_ErrorCode_FEED_PROFILE_USER_BLOCK_AUTHOR = 50909,
  Basic_ErrorCode_FEED_USER_NOT_LIKED = 50910,
  Basic_ErrorCode_FEED_PUBLISH_BANNED = 50911,
  Basic_ErrorCode_FEED_FROZEN_USER = 50912,
  Basic_ErrorCode_FEED_PUBLISH_OVER_LIMIT = 50913,
  Basic_ErrorCode_FEED_PUBLISH_REQUEST_OVER_LIMIT = 50914,
  Basic_ErrorCode_FEED_LIKE_SPAM = 50915,
  Basic_ErrorCode_TRADE_PRODUCT_NOT_FOUND = 50921,
  Basic_ErrorCode_TRADE_PRODUCT_CHANGED = 50922,
  Basic_ErrorCode_TRADE_ORDER_DUPLICATE = 50923,
  Basic_ErrorCode_TRADE_ORDER_FAILED = 50924,
  Basic_ErrorCode_TRADE_ORDER_NOT_FOUND = 50925,
  Basic_ErrorCode_TRADE_RECEIPT_BINDED = 50926,
  Basic_ErrorCode_TRADE_RECEIPT_VERIFY_FAILED = 50927,
  Basic_ErrorCode_TRADE_RECEIPT_VERIFY_SYSTEM_ERROR = 50928,
  Basic_ErrorCode_TRADE_RECEIPT_VERIFY_CHECK_FAILED = 50929,
  Basic_ErrorCode_TRADE_RECEIPT_UNSUPPORTED_VERSION = 50930,
  Basic_ErrorCode_TRADE_RECEIPT_BUY_FAILED = 50931,
  Basic_ErrorCode_TRADE_SERVICE_UNAVAILABLE = 50932,
  Basic_ErrorCode_TRADE_AGREEMENT_NOT_FOUND = 50933,
  Basic_ErrorCode_TRADE_AGREEMENT_UNSIGN_FAILED = 50934,
  Basic_ErrorCode_C2C_STRANGER_SESSION_OVER_LIMIT = 51100,
  Basic_ErrorCode_GAME_INVALID_COMMAND = 60001,
  Basic_ErrorCode_GAME_USER_NOT_FOUND = 60002,
  Basic_ErrorCode_GAME_INVALID_MESSAGE = 60003,
  Basic_ErrorCode_GAME_FINISHED = 60004,
  Basic_ErrorCode_REPORT_TOO_FREQUENTLY = 70001,
  Basic_ErrorCode_GROUP_CREATE_FAIL = 80100,
  Basic_ErrorCode_NOT_GROUP_MEMBER = 80101,
  Basic_ErrorCode_NOT_GROUP_ADMIN = 80102,
  Basic_ErrorCode_GROUP_DELETE_FAIL = 80103,
  Basic_ErrorCode_ADMIN_TRANSFER_FAIL = 80104,
  Basic_ErrorCode_GROUP_SETTING_FAIL = 80105,
  Basic_ErrorCode_GROUP_EXCEED_MAX_NUMBERS = 80106,
  Basic_ErrorCode_GROUP_ADMIN_CANNOT_QUIT = 80107,
  Basic_ErrorCode_CANNOT_KICK_ADMIN = 80108,
  Basic_ErrorCode_GROUP_NOT_EXISTS = 80109,
  Basic_ErrorCode_GROUP_NOT_ENOUGH_MEMBERS = 80110,
  Basic_ErrorCode_USER_CREATE_GROUP_EXCEED_MAX_COUNT = 80111,
  Basic_ErrorCode_GROUP_NAME_UNAVAILABLE = 80112,
  Basic_ErrorCode_USER_NICK_NAME_UNAVAILABLE = 80113,
  Basic_ErrorCode_GROUP_OFF_LINE = 80114,
  Basic_ErrorCode_FORBID_USER_CREATE_GROUP = 80115,
  Basic_ErrorCode_GROUP_SHARE_GROUP_NOT_EXIST = 80116,
  Basic_ErrorCode_GROUP_SHARE_INVITEOR_NOT_GROUP_MEMBER = 80117,
  Basic_ErrorCode_GROUP_SHARE_QR_CODE_EXPIRE = 80118,
  Basic_ErrorCode_GROUP_SHARE_GROUP_EXCEED_MAX_NUMBERS = 80119,
  Basic_ErrorCode_GROUP_SHARE_QR_CODE_INVALID = 80120,
  Basic_ErrorCode_GROUP_SHARE_LINK_INVALID = 80121,
  Basic_ErrorCode_GROUP_SHARE_WITHIN_NEED_PERMISSION = 80124,
  Basic_ErrorCode_GROUP_BULLETIN_SIZE_OVER_LIMIT = 80122,
  Basic_ErrorCode_GROUP_BULLETIN_NOT_ADMIN = 80123,
  Basic_ErrorCode_GROUP_JOIN_REQUEST_NOT_FOUND = 80125,
  Basic_ErrorCode_GROUP_JOIN_REQUEST_HAS_BEEN_PROCESSED = 80126,
  Basic_ErrorCode_GROUP_NAME_LENGTH_OVER_LIMIT = 80127,
  Basic_ErrorCode_GROUP_PK_NOT_QUIT = 80128,
  Basic_ErrorCode_GROUP_PK_NOT_RENAME = 80129,
  Basic_ErrorCode_GROUP_PK_NOT_INVITE = 80130,
  Basic_ErrorCode_GROUP_PK_NOT_INVITE_QR_CODE = 80131,
  Basic_ErrorCode_GROUP_MEMBER_NICK_NAME_LENGTH_OVER_LIMIT = 80132,
  Basic_ErrorCode_CHANNEL_INVALID_CHANNEL_ID = 81000,
  Basic_ErrorCode_CHANNEL_USER_HAS_BEEN_KICKED = 81001,
  Basic_ErrorCode_MESSAGE_TOO_LARGE_TO_SEND = 82000,
  Basic_ErrorCode_MESSAGE_BATCH_SEND_COUNT_EXCEED_LIMIT = 82001,
  Basic_ErrorCode_DIAN_DIAN_COVER_IMAGE_NOT_REAL = 50860,
  Basic_ErrorCode_DIAN_DIAN_COVER_IMAGE_NOT_SET = 50861,
  Basic_ErrorCode_DIAN_DIAN_SETTING_UPDATE_FAIL = 50862,
  Basic_ErrorCode_DIAN_DIAN_ALBUM_UPDATE_FAIL = 50863,
  Basic_ErrorCode_DIAN_DIAN_USER_FROZEN = 50864,
  Basic_ErrorCode_DIAN_DIAN_LIKE_FREQUENCY_LIMIT = 50865,
  Basic_ErrorCode_DIAN_DIAN_YOUNG_AGE_LIMIT = 50866,
  Basic_ErrorCode_GIFT_BALANCE_NOT_ENOUGH = 51000,
  Basic_ErrorCode_GIFT_GIVED = 51001,
  Basic_ErrorCode_GIFT_RECEIVER_NOT_EXIST = 51002,
  Basic_ErrorCode_GIFT_RECEIVER_NOT_IN_ROOM = 51003,
  Basic_ErrorCode_GIFT_INFO_NOT_EXIST = 51004,
  Basic_ErrorCode_FREE_VIP_CARD_NO_EXIST = 51050,
  Basic_ErrorCode_FREE_VIP_CARD_EXPIRE = 51051,
  Basic_ErrorCode_FREE_VIP_CARD_USE_FAILED = 51052,
  Basic_ErrorCode_SECRET_SIGNAL_GENERATE_FAIL = 50950,
  Basic_ErrorCode_SECRET_SIGNAL_SHARE_FAIL = 50951,
  Basic_ErrorCode_SECRET_SIGNAL_INVALID_PREFIX = 50952,
  Basic_ErrorCode_SECRET_SIGNAL_MATCH_FAIL = 50953,
  Basic_ErrorCode_SECRET_SIGNAL_DUPLICATE_MATCH = 50954,
  Basic_ErrorCode_SECRET_SIGNAL_FORBID_MATCH_SELF = 50955,
  Basic_ErrorCode_Basic_ErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Basic_ErrorCode_Basic_ErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Basic_ErrorCode_IsValid(int value);
constexpr Basic_ErrorCode Basic_ErrorCode_ErrorCode_MIN = Basic_ErrorCode_SUCC;
constexpr Basic_ErrorCode Basic_ErrorCode_ErrorCode_MAX = Basic_ErrorCode_MESSAGE_BATCH_SEND_COUNT_EXCEED_LIMIT;
constexpr int Basic_ErrorCode_ErrorCode_ARRAYSIZE = Basic_ErrorCode_ErrorCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Basic_ErrorCode_descriptor();
template<typename T>
inline const std::string& Basic_ErrorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Basic_ErrorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Basic_ErrorCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Basic_ErrorCode_descriptor(), enum_t_value);
}
inline bool Basic_ErrorCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Basic_ErrorCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Basic_ErrorCode>(
    Basic_ErrorCode_descriptor(), name, value);
}
enum ImMessage_RemindBody_RemindType : int {
  ImMessage_RemindBody_RemindType_UNKNOWN = 0,
  ImMessage_RemindBody_RemindType_AT_ALL = 1,
  ImMessage_RemindBody_RemindType_AT_USER = 2,
  ImMessage_RemindBody_RemindType_GROUP_BULLETIN = 3,
  ImMessage_RemindBody_RemindType_RECEIPT_MESSAGE = 4,
  ImMessage_RemindBody_RemindType_GROUP_JOIN_REQUEST = 5,
  ImMessage_RemindBody_RemindType_ImMessage_RemindBody_RemindType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ImMessage_RemindBody_RemindType_ImMessage_RemindBody_RemindType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ImMessage_RemindBody_RemindType_IsValid(int value);
constexpr ImMessage_RemindBody_RemindType ImMessage_RemindBody_RemindType_RemindType_MIN = ImMessage_RemindBody_RemindType_UNKNOWN;
constexpr ImMessage_RemindBody_RemindType ImMessage_RemindBody_RemindType_RemindType_MAX = ImMessage_RemindBody_RemindType_GROUP_JOIN_REQUEST;
constexpr int ImMessage_RemindBody_RemindType_RemindType_ARRAYSIZE = ImMessage_RemindBody_RemindType_RemindType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImMessage_RemindBody_RemindType_descriptor();
template<typename T>
inline const std::string& ImMessage_RemindBody_RemindType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ImMessage_RemindBody_RemindType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ImMessage_RemindBody_RemindType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ImMessage_RemindBody_RemindType_descriptor(), enum_t_value);
}
inline bool ImMessage_RemindBody_RemindType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ImMessage_RemindBody_RemindType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ImMessage_RemindBody_RemindType>(
    ImMessage_RemindBody_RemindType_descriptor(), name, value);
}
enum ImMessage_MessageType : int {
  ImMessage_MessageType_Text = 0,
  ImMessage_MessageType_Image = 2,
  ImMessage_MessageType_Audio = 3,
  ImMessage_MessageType_Movie = 4,
  ImMessage_MessageType_File = 5,
  ImMessage_MessageType_Gif = 7,
  ImMessage_MessageType_ImageText = 8,
  ImMessage_MessageType_PlaceHolder = 100,
  ImMessage_MessageType_Notice = 101,
  ImMessage_MessageType_MultiFormNotice = 103,
  ImMessage_MessageType_MessageCancel = 104,
  ImMessage_MessageType_MessageCancelOrigin = 105,
  ImMessage_MessageType_GameInvite = 200,
  ImMessage_MessageType_FavouriteGame = 201,
  ImMessage_MessageType_TeamInvite = 202,
  ImMessage_MessageType_MultiPlayerGame = 210,
  ImMessage_MessageType_MultiPlayerGameInvite = 211,
  ImMessage_MessageType_GameFriendTravel = 300,
  ImMessage_MessageType_GameTravelInvite = 301,
  ImMessage_MessageType_MultiPlayerChatRoom = 400,
  ImMessage_MessageType_MultiPlayerChatRoomInvite = 401,
  ImMessage_MessageType_MultiPlayerChatRoomGameInvite = 402,
  ImMessage_MessageType_FeedShare = 500,
  ImMessage_MessageType_DianDianMatchSuccess = 600,
  ImMessage_MessageType_DianDianNotification = 601,
  ImMessage_MessageType_Gift = 700,
  ImMessage_MessageType_SOGAME_MESSAGE_TYPE_MAX = 999,
  ImMessage_MessageType_ImMessage_MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ImMessage_MessageType_ImMessage_MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ImMessage_MessageType_IsValid(int value);
constexpr ImMessage_MessageType ImMessage_MessageType_MessageType_MIN = ImMessage_MessageType_Text;
constexpr ImMessage_MessageType ImMessage_MessageType_MessageType_MAX = ImMessage_MessageType_SOGAME_MESSAGE_TYPE_MAX;
constexpr int ImMessage_MessageType_MessageType_ARRAYSIZE = ImMessage_MessageType_MessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImMessage_MessageType_descriptor();
template<typename T>
inline const std::string& ImMessage_MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ImMessage_MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ImMessage_MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ImMessage_MessageType_descriptor(), enum_t_value);
}
inline bool ImMessage_MessageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ImMessage_MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ImMessage_MessageType>(
    ImMessage_MessageType_descriptor(), name, value);
}
enum ImMessage_KsUserRelationShip : int {
  ImMessage_KsUserRelationShip_kUNKNOW = 0,
  ImMessage_KsUserRelationShip_FOLLOW_EACH_OTHER = 1,
  ImMessage_KsUserRelationShip_TO_FOLLOW_FROM = 2,
  ImMessage_KsUserRelationShip_FROM_FOLLOW_TO = 3,
  ImMessage_KsUserRelationShip_ImMessage_KsUserRelationShip_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ImMessage_KsUserRelationShip_ImMessage_KsUserRelationShip_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ImMessage_KsUserRelationShip_IsValid(int value);
constexpr ImMessage_KsUserRelationShip ImMessage_KsUserRelationShip_KsUserRelationShip_MIN = ImMessage_KsUserRelationShip_kUNKNOW;
constexpr ImMessage_KsUserRelationShip ImMessage_KsUserRelationShip_KsUserRelationShip_MAX = ImMessage_KsUserRelationShip_FROM_FOLLOW_TO;
constexpr int ImMessage_KsUserRelationShip_KsUserRelationShip_ARRAYSIZE = ImMessage_KsUserRelationShip_KsUserRelationShip_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImMessage_KsUserRelationShip_descriptor();
template<typename T>
inline const std::string& ImMessage_KsUserRelationShip_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ImMessage_KsUserRelationShip>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ImMessage_KsUserRelationShip_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ImMessage_KsUserRelationShip_descriptor(), enum_t_value);
}
inline bool ImMessage_KsUserRelationShip_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ImMessage_KsUserRelationShip* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ImMessage_KsUserRelationShip>(
    ImMessage_KsUserRelationShip_descriptor(), name, value);
}
enum ImMessage_AccountType : int {
  ImMessage_AccountType_UNKNOWN = 0,
  ImMessage_AccountType_OFFICIAL = 1,
  ImMessage_AccountType_NORMAL = 2,
  ImMessage_AccountType_STRANGER = 3,
  ImMessage_AccountType_ImMessage_AccountType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ImMessage_AccountType_ImMessage_AccountType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ImMessage_AccountType_IsValid(int value);
constexpr ImMessage_AccountType ImMessage_AccountType_AccountType_MIN = ImMessage_AccountType_UNKNOWN;
constexpr ImMessage_AccountType ImMessage_AccountType_AccountType_MAX = ImMessage_AccountType_STRANGER;
constexpr int ImMessage_AccountType_AccountType_ARRAYSIZE = ImMessage_AccountType_AccountType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImMessage_AccountType_descriptor();
template<typename T>
inline const std::string& ImMessage_AccountType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ImMessage_AccountType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ImMessage_AccountType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ImMessage_AccountType_descriptor(), enum_t_value);
}
inline bool ImMessage_AccountType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ImMessage_AccountType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ImMessage_AccountType>(
    ImMessage_AccountType_descriptor(), name, value);
}
enum ImMessage_ChatTargetType : int {
  ImMessage_ChatTargetType_CTT_USER = 0,
  ImMessage_ChatTargetType_CTT_CHAT_ROOM = 2,
  ImMessage_ChatTargetType_CTT_MULTI_PLAYER_ROOM = 3,
  ImMessage_ChatTargetType_CTT_GROUP = 4,
  ImMessage_ChatTargetType_CTT_CHANNEL = 5,
  ImMessage_ChatTargetType_CTT_AGGREGATE = 6,
  ImMessage_ChatTargetType_ImMessage_ChatTargetType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ImMessage_ChatTargetType_ImMessage_ChatTargetType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ImMessage_ChatTargetType_IsValid(int value);
constexpr ImMessage_ChatTargetType ImMessage_ChatTargetType_ChatTargetType_MIN = ImMessage_ChatTargetType_CTT_USER;
constexpr ImMessage_ChatTargetType ImMessage_ChatTargetType_ChatTargetType_MAX = ImMessage_ChatTargetType_CTT_AGGREGATE;
constexpr int ImMessage_ChatTargetType_ChatTargetType_ARRAYSIZE = ImMessage_ChatTargetType_ChatTargetType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImMessage_ChatTargetType_descriptor();
template<typename T>
inline const std::string& ImMessage_ChatTargetType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ImMessage_ChatTargetType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ImMessage_ChatTargetType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ImMessage_ChatTargetType_descriptor(), enum_t_value);
}
inline bool ImMessage_ChatTargetType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ImMessage_ChatTargetType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ImMessage_ChatTargetType>(
    ImMessage_ChatTargetType_descriptor(), name, value);
}
enum ImMessage_SystemUser : int {
  ImMessage_SystemUser_kSystemUserInvalid = 0,
  ImMessage_SystemUser_SYSTEM_USER_ID = 10000,
  ImMessage_SystemUser_ImMessage_SystemUser_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ImMessage_SystemUser_ImMessage_SystemUser_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ImMessage_SystemUser_IsValid(int value);
constexpr ImMessage_SystemUser ImMessage_SystemUser_SystemUser_MIN = ImMessage_SystemUser_kSystemUserInvalid;
constexpr ImMessage_SystemUser ImMessage_SystemUser_SystemUser_MAX = ImMessage_SystemUser_SYSTEM_USER_ID;
constexpr int ImMessage_SystemUser_SystemUser_ARRAYSIZE = ImMessage_SystemUser_SystemUser_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImMessage_SystemUser_descriptor();
template<typename T>
inline const std::string& ImMessage_SystemUser_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ImMessage_SystemUser>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ImMessage_SystemUser_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ImMessage_SystemUser_descriptor(), enum_t_value);
}
inline bool ImMessage_SystemUser_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ImMessage_SystemUser* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ImMessage_SystemUser>(
    ImMessage_SystemUser_descriptor(), name, value);
}
enum Cloud_Channel_UserAction : int {
  Cloud_Channel_UserAction_USER_ACTION_UNKNOWN = 0,
  Cloud_Channel_UserAction_USER_JOIN_CHANNEL = 1,
  Cloud_Channel_UserAction_USER_QUIT_CHANNEL = 2,
  Cloud_Channel_UserAction_USER_OFFLINE = 3,
  Cloud_Channel_UserAction_Cloud_Channel_UserAction_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Cloud_Channel_UserAction_Cloud_Channel_UserAction_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Cloud_Channel_UserAction_IsValid(int value);
constexpr Cloud_Channel_UserAction Cloud_Channel_UserAction_UserAction_MIN = Cloud_Channel_UserAction_USER_ACTION_UNKNOWN;
constexpr Cloud_Channel_UserAction Cloud_Channel_UserAction_UserAction_MAX = Cloud_Channel_UserAction_USER_OFFLINE;
constexpr int Cloud_Channel_UserAction_UserAction_ARRAYSIZE = Cloud_Channel_UserAction_UserAction_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Cloud_Channel_UserAction_descriptor();
template<typename T>
inline const std::string& Cloud_Channel_UserAction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Cloud_Channel_UserAction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Cloud_Channel_UserAction_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Cloud_Channel_UserAction_descriptor(), enum_t_value);
}
inline bool Cloud_Channel_UserAction_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Cloud_Channel_UserAction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Cloud_Channel_UserAction>(
    Cloud_Channel_UserAction_descriptor(), name, value);
}
enum Cloud_Profile_UserOnlineStatus_Status : int {
  Cloud_Profile_UserOnlineStatus_Status_UNKNOWN = 0,
  Cloud_Profile_UserOnlineStatus_Status_ONLINE = 1,
  Cloud_Profile_UserOnlineStatus_Status_OFFLINE = 2,
  Cloud_Profile_UserOnlineStatus_Status_Cloud_Profile_UserOnlineStatus_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Cloud_Profile_UserOnlineStatus_Status_Cloud_Profile_UserOnlineStatus_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Cloud_Profile_UserOnlineStatus_Status_IsValid(int value);
constexpr Cloud_Profile_UserOnlineStatus_Status Cloud_Profile_UserOnlineStatus_Status_Status_MIN = Cloud_Profile_UserOnlineStatus_Status_UNKNOWN;
constexpr Cloud_Profile_UserOnlineStatus_Status Cloud_Profile_UserOnlineStatus_Status_Status_MAX = Cloud_Profile_UserOnlineStatus_Status_OFFLINE;
constexpr int Cloud_Profile_UserOnlineStatus_Status_Status_ARRAYSIZE = Cloud_Profile_UserOnlineStatus_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Cloud_Profile_UserOnlineStatus_Status_descriptor();
template<typename T>
inline const std::string& Cloud_Profile_UserOnlineStatus_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Cloud_Profile_UserOnlineStatus_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Cloud_Profile_UserOnlineStatus_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Cloud_Profile_UserOnlineStatus_Status_descriptor(), enum_t_value);
}
inline bool Cloud_Profile_UserOnlineStatus_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Cloud_Profile_UserOnlineStatus_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Cloud_Profile_UserOnlineStatus_Status>(
    Cloud_Profile_UserOnlineStatus_Status_descriptor(), name, value);
}
enum Cloud_Data_Update_KsImDataUpdateType : int {
  Cloud_Data_Update_KsImDataUpdateType_INVALID = 0,
  Cloud_Data_Update_KsImDataUpdateType_GROUP_INFO_UPDATE = 1,
  Cloud_Data_Update_KsImDataUpdateType_GROUP_MEMBER_LIST_UPDATE = 2,
  Cloud_Data_Update_KsImDataUpdateType_YOU_BE_KICKED = 3,
  Cloud_Data_Update_KsImDataUpdateType_MESSAGE_READ_EVENT = 4,
  Cloud_Data_Update_KsImDataUpdateType_MESSAGE_RECEIPT_EVENT = 5,
  Cloud_Data_Update_KsImDataUpdateType_Cloud_Data_Update_KsImDataUpdateType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Cloud_Data_Update_KsImDataUpdateType_Cloud_Data_Update_KsImDataUpdateType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Cloud_Data_Update_KsImDataUpdateType_IsValid(int value);
constexpr Cloud_Data_Update_KsImDataUpdateType Cloud_Data_Update_KsImDataUpdateType_KsImDataUpdateType_MIN = Cloud_Data_Update_KsImDataUpdateType_INVALID;
constexpr Cloud_Data_Update_KsImDataUpdateType Cloud_Data_Update_KsImDataUpdateType_KsImDataUpdateType_MAX = Cloud_Data_Update_KsImDataUpdateType_MESSAGE_RECEIPT_EVENT;
constexpr int Cloud_Data_Update_KsImDataUpdateType_KsImDataUpdateType_ARRAYSIZE = Cloud_Data_Update_KsImDataUpdateType_KsImDataUpdateType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Cloud_Data_Update_KsImDataUpdateType_descriptor();
template<typename T>
inline const std::string& Cloud_Data_Update_KsImDataUpdateType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Cloud_Data_Update_KsImDataUpdateType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Cloud_Data_Update_KsImDataUpdateType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Cloud_Data_Update_KsImDataUpdateType_descriptor(), enum_t_value);
}
inline bool Cloud_Data_Update_KsImDataUpdateType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Cloud_Data_Update_KsImDataUpdateType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Cloud_Data_Update_KsImDataUpdateType>(
    Cloud_Data_Update_KsImDataUpdateType_descriptor(), name, value);
}
enum Cloud_Message_Emoticon_Type : int {
  Cloud_Message_Emoticon_Type_UNKNOWN = 0,
  Cloud_Message_Emoticon_Type_BASIC = 1,
  Cloud_Message_Emoticon_Type_IMAGE = 2,
  Cloud_Message_Emoticon_Type_GIF = 3,
  Cloud_Message_Emoticon_Type_SPECIAL_EFFECT = 4,
  Cloud_Message_Emoticon_Type_SCRIPT = 5,
  Cloud_Message_Emoticon_Type_Cloud_Message_Emoticon_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Cloud_Message_Emoticon_Type_Cloud_Message_Emoticon_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Cloud_Message_Emoticon_Type_IsValid(int value);
constexpr Cloud_Message_Emoticon_Type Cloud_Message_Emoticon_Type_Type_MIN = Cloud_Message_Emoticon_Type_UNKNOWN;
constexpr Cloud_Message_Emoticon_Type Cloud_Message_Emoticon_Type_Type_MAX = Cloud_Message_Emoticon_Type_SCRIPT;
constexpr int Cloud_Message_Emoticon_Type_Type_ARRAYSIZE = Cloud_Message_Emoticon_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Cloud_Message_Emoticon_Type_descriptor();
template<typename T>
inline const std::string& Cloud_Message_Emoticon_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Cloud_Message_Emoticon_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Cloud_Message_Emoticon_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Cloud_Message_Emoticon_Type_descriptor(), enum_t_value);
}
inline bool Cloud_Message_Emoticon_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Cloud_Message_Emoticon_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Cloud_Message_Emoticon_Type>(
    Cloud_Message_Emoticon_Type_descriptor(), name, value);
}
enum Cloud_Message_GroupInvideResponse_InviteStatus : int {
  Cloud_Message_GroupInvideResponse_InviteStatus_UNKNOWN_STATUS = 0,
  Cloud_Message_GroupInvideResponse_InviteStatus_SUCC = 1,
  Cloud_Message_GroupInvideResponse_InviteStatus_PENDING = 2,
  Cloud_Message_GroupInvideResponse_InviteStatus_Cloud_Message_GroupInvideResponse_InviteStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Cloud_Message_GroupInvideResponse_InviteStatus_Cloud_Message_GroupInvideResponse_InviteStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Cloud_Message_GroupInvideResponse_InviteStatus_IsValid(int value);
constexpr Cloud_Message_GroupInvideResponse_InviteStatus Cloud_Message_GroupInvideResponse_InviteStatus_InviteStatus_MIN = Cloud_Message_GroupInvideResponse_InviteStatus_UNKNOWN_STATUS;
constexpr Cloud_Message_GroupInvideResponse_InviteStatus Cloud_Message_GroupInvideResponse_InviteStatus_InviteStatus_MAX = Cloud_Message_GroupInvideResponse_InviteStatus_PENDING;
constexpr int Cloud_Message_GroupInvideResponse_InviteStatus_InviteStatus_ARRAYSIZE = Cloud_Message_GroupInvideResponse_InviteStatus_InviteStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Cloud_Message_GroupInvideResponse_InviteStatus_descriptor();
template<typename T>
inline const std::string& Cloud_Message_GroupInvideResponse_InviteStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Cloud_Message_GroupInvideResponse_InviteStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Cloud_Message_GroupInvideResponse_InviteStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Cloud_Message_GroupInvideResponse_InviteStatus_descriptor(), enum_t_value);
}
inline bool Cloud_Message_GroupInvideResponse_InviteStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Cloud_Message_GroupInvideResponse_InviteStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Cloud_Message_GroupInvideResponse_InviteStatus>(
    Cloud_Message_GroupInvideResponse_InviteStatus_descriptor(), name, value);
}
enum Cloud_Message_GroupJoinResponse_JoinStatus : int {
  Cloud_Message_GroupJoinResponse_JoinStatus_UNKNOWN_STATUS = 0,
  Cloud_Message_GroupJoinResponse_JoinStatus_SUCC = 1,
  Cloud_Message_GroupJoinResponse_JoinStatus_PENDING = 2,
  Cloud_Message_GroupJoinResponse_JoinStatus_Cloud_Message_GroupJoinResponse_JoinStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Cloud_Message_GroupJoinResponse_JoinStatus_Cloud_Message_GroupJoinResponse_JoinStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Cloud_Message_GroupJoinResponse_JoinStatus_IsValid(int value);
constexpr Cloud_Message_GroupJoinResponse_JoinStatus Cloud_Message_GroupJoinResponse_JoinStatus_JoinStatus_MIN = Cloud_Message_GroupJoinResponse_JoinStatus_UNKNOWN_STATUS;
constexpr Cloud_Message_GroupJoinResponse_JoinStatus Cloud_Message_GroupJoinResponse_JoinStatus_JoinStatus_MAX = Cloud_Message_GroupJoinResponse_JoinStatus_PENDING;
constexpr int Cloud_Message_GroupJoinResponse_JoinStatus_JoinStatus_ARRAYSIZE = Cloud_Message_GroupJoinResponse_JoinStatus_JoinStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Cloud_Message_GroupJoinResponse_JoinStatus_descriptor();
template<typename T>
inline const std::string& Cloud_Message_GroupJoinResponse_JoinStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Cloud_Message_GroupJoinResponse_JoinStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Cloud_Message_GroupJoinResponse_JoinStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Cloud_Message_GroupJoinResponse_JoinStatus_descriptor(), enum_t_value);
}
inline bool Cloud_Message_GroupJoinResponse_JoinStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Cloud_Message_GroupJoinResponse_JoinStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Cloud_Message_GroupJoinResponse_JoinStatus>(
    Cloud_Message_GroupJoinResponse_JoinStatus_descriptor(), name, value);
}
enum Cloud_Message_GroupJoinRequestAckRequest_GroupJoinAckType : int {
  Cloud_Message_GroupJoinRequestAckRequest_GroupJoinAckType_UNKNOWN_TYPE = 0,
  Cloud_Message_GroupJoinRequestAckRequest_GroupJoinAckType_AGREE = 1,
  Cloud_Message_GroupJoinRequestAckRequest_GroupJoinAckType_REFUSE = 2,
  Cloud_Message_GroupJoinRequestAckRequest_GroupJoinAckType_IGNORE = 3,
  Cloud_Message_GroupJoinRequestAckRequest_GroupJoinAckType_Cloud_Message_GroupJoinRequestAckRequest_GroupJoinAckType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Cloud_Message_GroupJoinRequestAckRequest_GroupJoinAckType_Cloud_Message_GroupJoinRequestAckRequest_GroupJoinAckType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Cloud_Message_GroupJoinRequestAckRequest_GroupJoinAckType_IsValid(int value);
constexpr Cloud_Message_GroupJoinRequestAckRequest_GroupJoinAckType Cloud_Message_GroupJoinRequestAckRequest_GroupJoinAckType_GroupJoinAckType_MIN = Cloud_Message_GroupJoinRequestAckRequest_GroupJoinAckType_UNKNOWN_TYPE;
constexpr Cloud_Message_GroupJoinRequestAckRequest_GroupJoinAckType Cloud_Message_GroupJoinRequestAckRequest_GroupJoinAckType_GroupJoinAckType_MAX = Cloud_Message_GroupJoinRequestAckRequest_GroupJoinAckType_IGNORE;
constexpr int Cloud_Message_GroupJoinRequestAckRequest_GroupJoinAckType_GroupJoinAckType_ARRAYSIZE = Cloud_Message_GroupJoinRequestAckRequest_GroupJoinAckType_GroupJoinAckType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Cloud_Message_GroupJoinRequestAckRequest_GroupJoinAckType_descriptor();
template<typename T>
inline const std::string& Cloud_Message_GroupJoinRequestAckRequest_GroupJoinAckType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Cloud_Message_GroupJoinRequestAckRequest_GroupJoinAckType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Cloud_Message_GroupJoinRequestAckRequest_GroupJoinAckType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Cloud_Message_GroupJoinRequestAckRequest_GroupJoinAckType_descriptor(), enum_t_value);
}
inline bool Cloud_Message_GroupJoinRequestAckRequest_GroupJoinAckType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Cloud_Message_GroupJoinRequestAckRequest_GroupJoinAckType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Cloud_Message_GroupJoinRequestAckRequest_GroupJoinAckType>(
    Cloud_Message_GroupJoinRequestAckRequest_GroupJoinAckType_descriptor(), name, value);
}
enum Cloud_Message_GroupMember_GroupMemberStatus : int {
  Cloud_Message_GroupMember_GroupMemberStatus_UNKNOWN_MEMBER_STATUS = 0,
  Cloud_Message_GroupMember_GroupMemberStatus_NORMAL = 1,
  Cloud_Message_GroupMember_GroupMemberStatus_QUITTED = 2,
  Cloud_Message_GroupMember_GroupMemberStatus_KICKED = 3,
  Cloud_Message_GroupMember_GroupMemberStatus_DISMISSED = 4,
  Cloud_Message_GroupMember_GroupMemberStatus_Cloud_Message_GroupMember_GroupMemberStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Cloud_Message_GroupMember_GroupMemberStatus_Cloud_Message_GroupMember_GroupMemberStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Cloud_Message_GroupMember_GroupMemberStatus_IsValid(int value);
constexpr Cloud_Message_GroupMember_GroupMemberStatus Cloud_Message_GroupMember_GroupMemberStatus_GroupMemberStatus_MIN = Cloud_Message_GroupMember_GroupMemberStatus_UNKNOWN_MEMBER_STATUS;
constexpr Cloud_Message_GroupMember_GroupMemberStatus Cloud_Message_GroupMember_GroupMemberStatus_GroupMemberStatus_MAX = Cloud_Message_GroupMember_GroupMemberStatus_DISMISSED;
constexpr int Cloud_Message_GroupMember_GroupMemberStatus_GroupMemberStatus_ARRAYSIZE = Cloud_Message_GroupMember_GroupMemberStatus_GroupMemberStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Cloud_Message_GroupMember_GroupMemberStatus_descriptor();
template<typename T>
inline const std::string& Cloud_Message_GroupMember_GroupMemberStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Cloud_Message_GroupMember_GroupMemberStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Cloud_Message_GroupMember_GroupMemberStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Cloud_Message_GroupMember_GroupMemberStatus_descriptor(), enum_t_value);
}
inline bool Cloud_Message_GroupMember_GroupMemberStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Cloud_Message_GroupMember_GroupMemberStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Cloud_Message_GroupMember_GroupMemberStatus>(
    Cloud_Message_GroupMember_GroupMemberStatus_descriptor(), name, value);
}
enum Cloud_Message_GroupMember_GroupMemberRole : int {
  Cloud_Message_GroupMember_GroupMemberRole_UNKNOWN_ROLE = 0,
  Cloud_Message_GroupMember_GroupMemberRole_COMMON = 1,
  Cloud_Message_GroupMember_GroupMemberRole_ADMIN = 2,
  Cloud_Message_GroupMember_GroupMemberRole_Cloud_Message_GroupMember_GroupMemberRole_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Cloud_Message_GroupMember_GroupMemberRole_Cloud_Message_GroupMember_GroupMemberRole_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Cloud_Message_GroupMember_GroupMemberRole_IsValid(int value);
constexpr Cloud_Message_GroupMember_GroupMemberRole Cloud_Message_GroupMember_GroupMemberRole_GroupMemberRole_MIN = Cloud_Message_GroupMember_GroupMemberRole_UNKNOWN_ROLE;
constexpr Cloud_Message_GroupMember_GroupMemberRole Cloud_Message_GroupMember_GroupMemberRole_GroupMemberRole_MAX = Cloud_Message_GroupMember_GroupMemberRole_ADMIN;
constexpr int Cloud_Message_GroupMember_GroupMemberRole_GroupMemberRole_ARRAYSIZE = Cloud_Message_GroupMember_GroupMemberRole_GroupMemberRole_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Cloud_Message_GroupMember_GroupMemberRole_descriptor();
template<typename T>
inline const std::string& Cloud_Message_GroupMember_GroupMemberRole_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Cloud_Message_GroupMember_GroupMemberRole>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Cloud_Message_GroupMember_GroupMemberRole_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Cloud_Message_GroupMember_GroupMemberRole_descriptor(), enum_t_value);
}
inline bool Cloud_Message_GroupMember_GroupMemberRole_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Cloud_Message_GroupMember_GroupMemberRole* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Cloud_Message_GroupMember_GroupMemberRole>(
    Cloud_Message_GroupMember_GroupMemberRole_descriptor(), name, value);
}
enum Cloud_Message_ImcMessageType : int {
  Cloud_Message_ImcMessageType_TEXT = 0,
  Cloud_Message_ImcMessageType_IMAGE = 1,
  Cloud_Message_ImcMessageType_CUSTOM = 2,
  Cloud_Message_ImcMessageType_AUDIO = 3,
  Cloud_Message_ImcMessageType_VIDEO = 4,
  Cloud_Message_ImcMessageType_EMOTICON = 5,
  Cloud_Message_ImcMessageType_FILE = 6,
  Cloud_Message_ImcMessageType_NOTICE = 10,
  Cloud_Message_ImcMessageType_RECALLED = 11,
  Cloud_Message_ImcMessageType_REFERENCE = 12,
  Cloud_Message_ImcMessageType_MERGE_FORWARD = 13,
  Cloud_Message_ImcMessageType_PLACE_HOLDER = 100,
  Cloud_Message_ImcMessageType_REPLACE = 101,
  Cloud_Message_ImcMessageType_INVISIBLE_TYPE_MAS = 199,
  Cloud_Message_ImcMessageType_RICH_NOTICE = 200,
  Cloud_Message_ImcMessageType_Cloud_Message_ImcMessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Cloud_Message_ImcMessageType_Cloud_Message_ImcMessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Cloud_Message_ImcMessageType_IsValid(int value);
constexpr Cloud_Message_ImcMessageType Cloud_Message_ImcMessageType_ImcMessageType_MIN = Cloud_Message_ImcMessageType_TEXT;
constexpr Cloud_Message_ImcMessageType Cloud_Message_ImcMessageType_ImcMessageType_MAX = Cloud_Message_ImcMessageType_RICH_NOTICE;
constexpr int Cloud_Message_ImcMessageType_ImcMessageType_ARRAYSIZE = Cloud_Message_ImcMessageType_ImcMessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Cloud_Message_ImcMessageType_descriptor();
template<typename T>
inline const std::string& Cloud_Message_ImcMessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Cloud_Message_ImcMessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Cloud_Message_ImcMessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Cloud_Message_ImcMessageType_descriptor(), enum_t_value);
}
inline bool Cloud_Message_ImcMessageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Cloud_Message_ImcMessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Cloud_Message_ImcMessageType>(
    Cloud_Message_ImcMessageType_descriptor(), name, value);
}
enum Cloud_Message_NoticeMetaType : int {
  Cloud_Message_NoticeMetaType_UNKNOWN_NOTICE_META_TYPE = 0,
  Cloud_Message_NoticeMetaType_COMMON_NOTICE_META_TYPE = 1,
  Cloud_Message_NoticeMetaType_CONFIRM_INVITE_INTO_GROUP_META = 2,
  Cloud_Message_NoticeMetaType_CONFIRM_JOIN_INTO_GROUP_META = 3,
  Cloud_Message_NoticeMetaType_Cloud_Message_NoticeMetaType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Cloud_Message_NoticeMetaType_Cloud_Message_NoticeMetaType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Cloud_Message_NoticeMetaType_IsValid(int value);
constexpr Cloud_Message_NoticeMetaType Cloud_Message_NoticeMetaType_NoticeMetaType_MIN = Cloud_Message_NoticeMetaType_UNKNOWN_NOTICE_META_TYPE;
constexpr Cloud_Message_NoticeMetaType Cloud_Message_NoticeMetaType_NoticeMetaType_MAX = Cloud_Message_NoticeMetaType_CONFIRM_JOIN_INTO_GROUP_META;
constexpr int Cloud_Message_NoticeMetaType_NoticeMetaType_ARRAYSIZE = Cloud_Message_NoticeMetaType_NoticeMetaType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Cloud_Message_NoticeMetaType_descriptor();
template<typename T>
inline const std::string& Cloud_Message_NoticeMetaType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Cloud_Message_NoticeMetaType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Cloud_Message_NoticeMetaType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Cloud_Message_NoticeMetaType_descriptor(), enum_t_value);
}
inline bool Cloud_Message_NoticeMetaType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Cloud_Message_NoticeMetaType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Cloud_Message_NoticeMetaType>(
    Cloud_Message_NoticeMetaType_descriptor(), name, value);
}
enum Cloud_Message_GroupFindType : int {
  Cloud_Message_GroupFindType_BY_UNKNOWN = 0,
  Cloud_Message_GroupFindType_BY_ID = 1,
  Cloud_Message_GroupFindType_BY_NAME = 2,
  Cloud_Message_GroupFindType_BY_QR_CODE = 3,
  Cloud_Message_GroupFindType_BY_CARD = 4,
  Cloud_Message_GroupFindType_BY_INVITATION = 5,
  Cloud_Message_GroupFindType_BY_SHARE_LINK = 6,
  Cloud_Message_GroupFindType_Cloud_Message_GroupFindType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Cloud_Message_GroupFindType_Cloud_Message_GroupFindType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Cloud_Message_GroupFindType_IsValid(int value);
constexpr Cloud_Message_GroupFindType Cloud_Message_GroupFindType_GroupFindType_MIN = Cloud_Message_GroupFindType_BY_UNKNOWN;
constexpr Cloud_Message_GroupFindType Cloud_Message_GroupFindType_GroupFindType_MAX = Cloud_Message_GroupFindType_BY_SHARE_LINK;
constexpr int Cloud_Message_GroupFindType_GroupFindType_ARRAYSIZE = Cloud_Message_GroupFindType_GroupFindType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Cloud_Message_GroupFindType_descriptor();
template<typename T>
inline const std::string& Cloud_Message_GroupFindType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Cloud_Message_GroupFindType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Cloud_Message_GroupFindType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Cloud_Message_GroupFindType_descriptor(), enum_t_value);
}
inline bool Cloud_Message_GroupFindType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Cloud_Message_GroupFindType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Cloud_Message_GroupFindType>(
    Cloud_Message_GroupFindType_descriptor(), name, value);
}
enum Cloud_Message_JoinRequestStatus : int {
  Cloud_Message_JoinRequestStatus_UNKNOWN_STATUS = 0,
  Cloud_Message_JoinRequestStatus_REQUESTED = 1,
  Cloud_Message_JoinRequestStatus_APPROVED = 2,
  Cloud_Message_JoinRequestStatus_REFUSED = 3,
  Cloud_Message_JoinRequestStatus_Cloud_Message_JoinRequestStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Cloud_Message_JoinRequestStatus_Cloud_Message_JoinRequestStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Cloud_Message_JoinRequestStatus_IsValid(int value);
constexpr Cloud_Message_JoinRequestStatus Cloud_Message_JoinRequestStatus_JoinRequestStatus_MIN = Cloud_Message_JoinRequestStatus_UNKNOWN_STATUS;
constexpr Cloud_Message_JoinRequestStatus Cloud_Message_JoinRequestStatus_JoinRequestStatus_MAX = Cloud_Message_JoinRequestStatus_REFUSED;
constexpr int Cloud_Message_JoinRequestStatus_JoinRequestStatus_ARRAYSIZE = Cloud_Message_JoinRequestStatus_JoinRequestStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Cloud_Message_JoinRequestStatus_descriptor();
template<typename T>
inline const std::string& Cloud_Message_JoinRequestStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Cloud_Message_JoinRequestStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Cloud_Message_JoinRequestStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Cloud_Message_JoinRequestStatus_descriptor(), enum_t_value);
}
inline bool Cloud_Message_JoinRequestStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Cloud_Message_JoinRequestStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Cloud_Message_JoinRequestStatus>(
    Cloud_Message_JoinRequestStatus_descriptor(), name, value);
}
enum Cloud_Message_JoinNeedPermissionType : int {
  Cloud_Message_JoinNeedPermissionType_UNKNOWN_JOIN_NEED_PERMISSION_TYPE = 0,
  Cloud_Message_JoinNeedPermissionType_NONE = 1,
  Cloud_Message_JoinNeedPermissionType_ADMIN = 2,
  Cloud_Message_JoinNeedPermissionType_Cloud_Message_JoinNeedPermissionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Cloud_Message_JoinNeedPermissionType_Cloud_Message_JoinNeedPermissionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Cloud_Message_JoinNeedPermissionType_IsValid(int value);
constexpr Cloud_Message_JoinNeedPermissionType Cloud_Message_JoinNeedPermissionType_JoinNeedPermissionType_MIN = Cloud_Message_JoinNeedPermissionType_UNKNOWN_JOIN_NEED_PERMISSION_TYPE;
constexpr Cloud_Message_JoinNeedPermissionType Cloud_Message_JoinNeedPermissionType_JoinNeedPermissionType_MAX = Cloud_Message_JoinNeedPermissionType_ADMIN;
constexpr int Cloud_Message_JoinNeedPermissionType_JoinNeedPermissionType_ARRAYSIZE = Cloud_Message_JoinNeedPermissionType_JoinNeedPermissionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Cloud_Message_JoinNeedPermissionType_descriptor();
template<typename T>
inline const std::string& Cloud_Message_JoinNeedPermissionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Cloud_Message_JoinNeedPermissionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Cloud_Message_JoinNeedPermissionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Cloud_Message_JoinNeedPermissionType_descriptor(), enum_t_value);
}
inline bool Cloud_Message_JoinNeedPermissionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Cloud_Message_JoinNeedPermissionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Cloud_Message_JoinNeedPermissionType>(
    Cloud_Message_JoinNeedPermissionType_descriptor(), name, value);
}
enum Cloud_Message_GroupStatus : int {
  Cloud_Message_GroupStatus_UNKNOW_GROUP_STATUS = 0,
  Cloud_Message_GroupStatus_VALID = 1,
  Cloud_Message_GroupStatus_INVALID = 2,
  Cloud_Message_GroupStatus_Cloud_Message_GroupStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Cloud_Message_GroupStatus_Cloud_Message_GroupStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Cloud_Message_GroupStatus_IsValid(int value);
constexpr Cloud_Message_GroupStatus Cloud_Message_GroupStatus_GroupStatus_MIN = Cloud_Message_GroupStatus_UNKNOW_GROUP_STATUS;
constexpr Cloud_Message_GroupStatus Cloud_Message_GroupStatus_GroupStatus_MAX = Cloud_Message_GroupStatus_INVALID;
constexpr int Cloud_Message_GroupStatus_GroupStatus_ARRAYSIZE = Cloud_Message_GroupStatus_GroupStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Cloud_Message_GroupStatus_descriptor();
template<typename T>
inline const std::string& Cloud_Message_GroupStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Cloud_Message_GroupStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Cloud_Message_GroupStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Cloud_Message_GroupStatus_descriptor(), enum_t_value);
}
inline bool Cloud_Message_GroupStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Cloud_Message_GroupStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Cloud_Message_GroupStatus>(
    Cloud_Message_GroupStatus_descriptor(), name, value);
}
enum Cloud_Message_GroupType : int {
  Cloud_Message_GroupType_UNKNOW_GROUP_TYPE = 0,
  Cloud_Message_GroupType_PRIVATE = 3,
  Cloud_Message_GroupType_PUBLIC = 4,
  Cloud_Message_GroupType_Cloud_Message_GroupType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Cloud_Message_GroupType_Cloud_Message_GroupType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Cloud_Message_GroupType_IsValid(int value);
constexpr Cloud_Message_GroupType Cloud_Message_GroupType_GroupType_MIN = Cloud_Message_GroupType_UNKNOW_GROUP_TYPE;
constexpr Cloud_Message_GroupType Cloud_Message_GroupType_GroupType_MAX = Cloud_Message_GroupType_PUBLIC;
constexpr int Cloud_Message_GroupType_GroupType_ARRAYSIZE = Cloud_Message_GroupType_GroupType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Cloud_Message_GroupType_descriptor();
template<typename T>
inline const std::string& Cloud_Message_GroupType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Cloud_Message_GroupType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Cloud_Message_GroupType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Cloud_Message_GroupType_descriptor(), enum_t_value);
}
inline bool Cloud_Message_GroupType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Cloud_Message_GroupType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Cloud_Message_GroupType>(
    Cloud_Message_GroupType_descriptor(), name, value);
}
enum Cloud_Message_ForbiddenState : int {
  Cloud_Message_ForbiddenState_UNKNOWN_FORBIDDEN_STATE = 0,
  Cloud_Message_ForbiddenState_UN_FORBIDDEN = 1,
  Cloud_Message_ForbiddenState_FORBID_MESSAGE = 2,
  Cloud_Message_ForbiddenState_Cloud_Message_ForbiddenState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Cloud_Message_ForbiddenState_Cloud_Message_ForbiddenState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Cloud_Message_ForbiddenState_IsValid(int value);
constexpr Cloud_Message_ForbiddenState Cloud_Message_ForbiddenState_ForbiddenState_MIN = Cloud_Message_ForbiddenState_UNKNOWN_FORBIDDEN_STATE;
constexpr Cloud_Message_ForbiddenState Cloud_Message_ForbiddenState_ForbiddenState_MAX = Cloud_Message_ForbiddenState_FORBID_MESSAGE;
constexpr int Cloud_Message_ForbiddenState_ForbiddenState_ARRAYSIZE = Cloud_Message_ForbiddenState_ForbiddenState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Cloud_Message_ForbiddenState_descriptor();
template<typename T>
inline const std::string& Cloud_Message_ForbiddenState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Cloud_Message_ForbiddenState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Cloud_Message_ForbiddenState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Cloud_Message_ForbiddenState_descriptor(), enum_t_value);
}
inline bool Cloud_Message_ForbiddenState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Cloud_Message_ForbiddenState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Cloud_Message_ForbiddenState>(
    Cloud_Message_ForbiddenState_descriptor(), name, value);
}
enum Cloud_Message_PassThroughType : int {
  Cloud_Message_PassThroughType_INVALID_PTT = 0,
  Cloud_Message_PassThroughType_INPUTTING = 1,
  Cloud_Message_PassThroughType_Cloud_Message_PassThroughType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Cloud_Message_PassThroughType_Cloud_Message_PassThroughType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Cloud_Message_PassThroughType_IsValid(int value);
constexpr Cloud_Message_PassThroughType Cloud_Message_PassThroughType_PassThroughType_MIN = Cloud_Message_PassThroughType_INVALID_PTT;
constexpr Cloud_Message_PassThroughType Cloud_Message_PassThroughType_PassThroughType_MAX = Cloud_Message_PassThroughType_INPUTTING;
constexpr int Cloud_Message_PassThroughType_PassThroughType_ARRAYSIZE = Cloud_Message_PassThroughType_PassThroughType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Cloud_Message_PassThroughType_descriptor();
template<typename T>
inline const std::string& Cloud_Message_PassThroughType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Cloud_Message_PassThroughType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Cloud_Message_PassThroughType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Cloud_Message_PassThroughType_descriptor(), enum_t_value);
}
inline bool Cloud_Message_PassThroughType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Cloud_Message_PassThroughType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Cloud_Message_PassThroughType>(
    Cloud_Message_PassThroughType_descriptor(), name, value);
}
// ===================================================================

class Basic_PacketHeader PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Basic.PacketHeader) */ {
 public:
  inline Basic_PacketHeader() : Basic_PacketHeader(nullptr) {}
  virtual ~Basic_PacketHeader();

  Basic_PacketHeader(const Basic_PacketHeader& from);
  Basic_PacketHeader(Basic_PacketHeader&& from) noexcept
    : Basic_PacketHeader() {
    *this = ::std::move(from);
  }

  inline Basic_PacketHeader& operator=(const Basic_PacketHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline Basic_PacketHeader& operator=(Basic_PacketHeader&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Basic_PacketHeader& default_instance();

  static inline const Basic_PacketHeader* internal_default_instance() {
    return reinterpret_cast<const Basic_PacketHeader*>(
               &_Basic_PacketHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Basic_PacketHeader& a, Basic_PacketHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(Basic_PacketHeader* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Basic_PacketHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Basic_PacketHeader* New() const final {
    return CreateMaybeMessage<Basic_PacketHeader>(nullptr);
  }

  Basic_PacketHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Basic_PacketHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Basic_PacketHeader& from);
  void MergeFrom(const Basic_PacketHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Basic_PacketHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Basic.PacketHeader";
  }
  protected:
  explicit Basic_PacketHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Basic_PacketHeader_Flags Flags;
  static constexpr Flags kDirUpstream =
    Basic_PacketHeader_Flags_kDirUpstream;
  static constexpr Flags kDirDownstream =
    Basic_PacketHeader_Flags_kDirDownstream;
  static constexpr Flags kDirMask =
    Basic_PacketHeader_Flags_kDirMask;
  static inline bool Flags_IsValid(int value) {
    return Basic_PacketHeader_Flags_IsValid(value);
  }
  static constexpr Flags Flags_MIN =
    Basic_PacketHeader_Flags_Flags_MIN;
  static constexpr Flags Flags_MAX =
    Basic_PacketHeader_Flags_Flags_MAX;
  static constexpr int Flags_ARRAYSIZE =
    Basic_PacketHeader_Flags_Flags_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Flags_descriptor() {
    return Basic_PacketHeader_Flags_descriptor();
  }
  template<typename T>
  static inline const std::string& Flags_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Flags>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Flags_Name.");
    return Basic_PacketHeader_Flags_Name(enum_t_value);
  }
  static inline bool Flags_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Flags* value) {
    return Basic_PacketHeader_Flags_Parse(name, value);
  }

  typedef Basic_PacketHeader_EncodingType EncodingType;
  static constexpr EncodingType kEncodingNone =
    Basic_PacketHeader_EncodingType_kEncodingNone;
  static constexpr EncodingType kEncodingLz4 =
    Basic_PacketHeader_EncodingType_kEncodingLz4;
  static inline bool EncodingType_IsValid(int value) {
    return Basic_PacketHeader_EncodingType_IsValid(value);
  }
  static constexpr EncodingType EncodingType_MIN =
    Basic_PacketHeader_EncodingType_EncodingType_MIN;
  static constexpr EncodingType EncodingType_MAX =
    Basic_PacketHeader_EncodingType_EncodingType_MAX;
  static constexpr int EncodingType_ARRAYSIZE =
    Basic_PacketHeader_EncodingType_EncodingType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EncodingType_descriptor() {
    return Basic_PacketHeader_EncodingType_descriptor();
  }
  template<typename T>
  static inline const std::string& EncodingType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EncodingType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EncodingType_Name.");
    return Basic_PacketHeader_EncodingType_Name(enum_t_value);
  }
  static inline bool EncodingType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EncodingType* value) {
    return Basic_PacketHeader_EncodingType_Parse(name, value);
  }

  typedef Basic_PacketHeader_EncryptionMode EncryptionMode;
  static constexpr EncryptionMode kEncryptionNone =
    Basic_PacketHeader_EncryptionMode_kEncryptionNone;
  static constexpr EncryptionMode kEncryptionServiceToken =
    Basic_PacketHeader_EncryptionMode_kEncryptionServiceToken;
  static constexpr EncryptionMode kEncryptionSessionKey =
    Basic_PacketHeader_EncryptionMode_kEncryptionSessionKey;
  static inline bool EncryptionMode_IsValid(int value) {
    return Basic_PacketHeader_EncryptionMode_IsValid(value);
  }
  static constexpr EncryptionMode EncryptionMode_MIN =
    Basic_PacketHeader_EncryptionMode_EncryptionMode_MIN;
  static constexpr EncryptionMode EncryptionMode_MAX =
    Basic_PacketHeader_EncryptionMode_EncryptionMode_MAX;
  static constexpr int EncryptionMode_ARRAYSIZE =
    Basic_PacketHeader_EncryptionMode_EncryptionMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EncryptionMode_descriptor() {
    return Basic_PacketHeader_EncryptionMode_descriptor();
  }
  template<typename T>
  static inline const std::string& EncryptionMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EncryptionMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EncryptionMode_Name.");
    return Basic_PacketHeader_EncryptionMode_Name(enum_t_value);
  }
  static inline bool EncryptionMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EncryptionMode* value) {
    return Basic_PacketHeader_EncryptionMode_Parse(name, value);
  }

  typedef Basic_PacketHeader_Feature Feature;
  static constexpr Feature kReserve =
    Basic_PacketHeader_Feature_kReserve;
  static constexpr Feature kCompressLz4 =
    Basic_PacketHeader_Feature_kCompressLz4;
  static inline bool Feature_IsValid(int value) {
    return Basic_PacketHeader_Feature_IsValid(value);
  }
  static constexpr Feature Feature_MIN =
    Basic_PacketHeader_Feature_Feature_MIN;
  static constexpr Feature Feature_MAX =
    Basic_PacketHeader_Feature_Feature_MAX;
  static constexpr int Feature_ARRAYSIZE =
    Basic_PacketHeader_Feature_Feature_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Feature_descriptor() {
    return Basic_PacketHeader_Feature_descriptor();
  }
  template<typename T>
  static inline const std::string& Feature_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Feature>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Feature_Name.");
    return Basic_PacketHeader_Feature_Name(enum_t_value);
  }
  static inline bool Feature_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Feature* value) {
    return Basic_PacketHeader_Feature_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFeaturesFieldNumber = 11,
    kTokenInfoFieldNumber = 9,
    kUidFieldNumber = 2,
    kInstanceIdFieldNumber = 3,
    kAppIdFieldNumber = 1,
    kFlagsFieldNumber = 5,
    kEncodingTypeFieldNumber = 6,
    kDecodedPayloadLenFieldNumber = 7,
    kSeqIdFieldNumber = 10,
    kEncryptionModeFieldNumber = 8,
  };
  // repeated .AcFunDanmu.Im.Basic.PacketHeader.Feature features = 11;
  int features_size() const;
  private:
  int _internal_features_size() const;
  public:
  void clear_features();
  private:
  ::AcFunDanmu::Im::Basic_PacketHeader_Feature _internal_features(int index) const;
  void _internal_add_features(::AcFunDanmu::Im::Basic_PacketHeader_Feature value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_features();
  public:
  ::AcFunDanmu::Im::Basic_PacketHeader_Feature features(int index) const;
  void set_features(int index, ::AcFunDanmu::Im::Basic_PacketHeader_Feature value);
  void add_features(::AcFunDanmu::Im::Basic_PacketHeader_Feature value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& features() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_features();

  // .AcFunDanmu.Im.Basic.TokenInfo tokenInfo = 9;
  bool has_tokeninfo() const;
  private:
  bool _internal_has_tokeninfo() const;
  public:
  void clear_tokeninfo();
  const ::AcFunDanmu::Im::Basic_TokenInfo& tokeninfo() const;
  ::AcFunDanmu::Im::Basic_TokenInfo* release_tokeninfo();
  ::AcFunDanmu::Im::Basic_TokenInfo* mutable_tokeninfo();
  void set_allocated_tokeninfo(::AcFunDanmu::Im::Basic_TokenInfo* tokeninfo);
  private:
  const ::AcFunDanmu::Im::Basic_TokenInfo& _internal_tokeninfo() const;
  ::AcFunDanmu::Im::Basic_TokenInfo* _internal_mutable_tokeninfo();
  public:
  void unsafe_arena_set_allocated_tokeninfo(
      ::AcFunDanmu::Im::Basic_TokenInfo* tokeninfo);
  ::AcFunDanmu::Im::Basic_TokenInfo* unsafe_arena_release_tokeninfo();

  // int64 uid = 2;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int64 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 instanceId = 3;
  void clear_instanceid();
  ::PROTOBUF_NAMESPACE_ID::int64 instanceid() const;
  void set_instanceid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_instanceid() const;
  void _internal_set_instanceid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 appId = 1;
  void clear_appid();
  ::PROTOBUF_NAMESPACE_ID::int32 appid() const;
  void set_appid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_appid() const;
  void _internal_set_appid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 flags = 5;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .AcFunDanmu.Im.Basic.PacketHeader.EncodingType encodingType = 6;
  void clear_encodingtype();
  ::AcFunDanmu::Im::Basic_PacketHeader_EncodingType encodingtype() const;
  void set_encodingtype(::AcFunDanmu::Im::Basic_PacketHeader_EncodingType value);
  private:
  ::AcFunDanmu::Im::Basic_PacketHeader_EncodingType _internal_encodingtype() const;
  void _internal_set_encodingtype(::AcFunDanmu::Im::Basic_PacketHeader_EncodingType value);
  public:

  // int32 decodedPayloadLen = 7;
  void clear_decodedpayloadlen();
  ::PROTOBUF_NAMESPACE_ID::int32 decodedpayloadlen() const;
  void set_decodedpayloadlen(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_decodedpayloadlen() const;
  void _internal_set_decodedpayloadlen(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 seqId = 10;
  void clear_seqid();
  ::PROTOBUF_NAMESPACE_ID::int64 seqid() const;
  void set_seqid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_seqid() const;
  void _internal_set_seqid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .AcFunDanmu.Im.Basic.PacketHeader.EncryptionMode encryptionMode = 8;
  void clear_encryptionmode();
  ::AcFunDanmu::Im::Basic_PacketHeader_EncryptionMode encryptionmode() const;
  void set_encryptionmode(::AcFunDanmu::Im::Basic_PacketHeader_EncryptionMode value);
  private:
  ::AcFunDanmu::Im::Basic_PacketHeader_EncryptionMode _internal_encryptionmode() const;
  void _internal_set_encryptionmode(::AcFunDanmu::Im::Basic_PacketHeader_EncryptionMode value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Basic.PacketHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> features_;
  mutable std::atomic<int> _features_cached_byte_size_;
  ::AcFunDanmu::Im::Basic_TokenInfo* tokeninfo_;
  ::PROTOBUF_NAMESPACE_ID::int64 uid_;
  ::PROTOBUF_NAMESPACE_ID::int64 instanceid_;
  ::PROTOBUF_NAMESPACE_ID::int32 appid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  int encodingtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 decodedpayloadlen_;
  ::PROTOBUF_NAMESPACE_ID::int64 seqid_;
  int encryptionmode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Basic_User PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Basic.User) */ {
 public:
  inline Basic_User() : Basic_User(nullptr) {}
  virtual ~Basic_User();

  Basic_User(const Basic_User& from);
  Basic_User(Basic_User&& from) noexcept
    : Basic_User() {
    *this = ::std::move(from);
  }

  inline Basic_User& operator=(const Basic_User& from) {
    CopyFrom(from);
    return *this;
  }
  inline Basic_User& operator=(Basic_User&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Basic_User& default_instance();

  static inline const Basic_User* internal_default_instance() {
    return reinterpret_cast<const Basic_User*>(
               &_Basic_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Basic_User& a, Basic_User& b) {
    a.Swap(&b);
  }
  inline void Swap(Basic_User* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Basic_User* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Basic_User* New() const final {
    return CreateMaybeMessage<Basic_User>(nullptr);
  }

  Basic_User* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Basic_User>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Basic_User& from);
  void MergeFrom(const Basic_User& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Basic_User* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Basic.User";
  }
  protected:
  explicit Basic_User(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 2,
    kAppIdFieldNumber = 1,
  };
  // int64 uid = 2;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int64 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 appId = 1;
  void clear_appid();
  ::PROTOBUF_NAMESPACE_ID::int32 appid() const;
  void set_appid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_appid() const;
  void _internal_set_appid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Basic.User)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 appid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Basic_UserInstance PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Basic.UserInstance) */ {
 public:
  inline Basic_UserInstance() : Basic_UserInstance(nullptr) {}
  virtual ~Basic_UserInstance();

  Basic_UserInstance(const Basic_UserInstance& from);
  Basic_UserInstance(Basic_UserInstance&& from) noexcept
    : Basic_UserInstance() {
    *this = ::std::move(from);
  }

  inline Basic_UserInstance& operator=(const Basic_UserInstance& from) {
    CopyFrom(from);
    return *this;
  }
  inline Basic_UserInstance& operator=(Basic_UserInstance&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Basic_UserInstance& default_instance();

  static inline const Basic_UserInstance* internal_default_instance() {
    return reinterpret_cast<const Basic_UserInstance*>(
               &_Basic_UserInstance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Basic_UserInstance& a, Basic_UserInstance& b) {
    a.Swap(&b);
  }
  inline void Swap(Basic_UserInstance* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Basic_UserInstance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Basic_UserInstance* New() const final {
    return CreateMaybeMessage<Basic_UserInstance>(nullptr);
  }

  Basic_UserInstance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Basic_UserInstance>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Basic_UserInstance& from);
  void MergeFrom(const Basic_UserInstance& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Basic_UserInstance* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Basic.UserInstance";
  }
  protected:
  explicit Basic_UserInstance(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
    kInstanceIdFieldNumber = 2,
  };
  // .AcFunDanmu.Im.Basic.User user = 1;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::AcFunDanmu::Im::Basic_User& user() const;
  ::AcFunDanmu::Im::Basic_User* release_user();
  ::AcFunDanmu::Im::Basic_User* mutable_user();
  void set_allocated_user(::AcFunDanmu::Im::Basic_User* user);
  private:
  const ::AcFunDanmu::Im::Basic_User& _internal_user() const;
  ::AcFunDanmu::Im::Basic_User* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::AcFunDanmu::Im::Basic_User* user);
  ::AcFunDanmu::Im::Basic_User* unsafe_arena_release_user();

  // int64 instanceId = 2;
  void clear_instanceid();
  ::PROTOBUF_NAMESPACE_ID::int64 instanceid() const;
  void set_instanceid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_instanceid() const;
  void _internal_set_instanceid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Basic.UserInstance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::AcFunDanmu::Im::Basic_User* user_;
  ::PROTOBUF_NAMESPACE_ID::int64 instanceid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Basic_UpstreamPayload PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Basic.UpstreamPayload) */ {
 public:
  inline Basic_UpstreamPayload() : Basic_UpstreamPayload(nullptr) {}
  virtual ~Basic_UpstreamPayload();

  Basic_UpstreamPayload(const Basic_UpstreamPayload& from);
  Basic_UpstreamPayload(Basic_UpstreamPayload&& from) noexcept
    : Basic_UpstreamPayload() {
    *this = ::std::move(from);
  }

  inline Basic_UpstreamPayload& operator=(const Basic_UpstreamPayload& from) {
    CopyFrom(from);
    return *this;
  }
  inline Basic_UpstreamPayload& operator=(Basic_UpstreamPayload&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Basic_UpstreamPayload& default_instance();

  static inline const Basic_UpstreamPayload* internal_default_instance() {
    return reinterpret_cast<const Basic_UpstreamPayload*>(
               &_Basic_UpstreamPayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Basic_UpstreamPayload& a, Basic_UpstreamPayload& b) {
    a.Swap(&b);
  }
  inline void Swap(Basic_UpstreamPayload* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Basic_UpstreamPayload* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Basic_UpstreamPayload* New() const final {
    return CreateMaybeMessage<Basic_UpstreamPayload>(nullptr);
  }

  Basic_UpstreamPayload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Basic_UpstreamPayload>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Basic_UpstreamPayload& from);
  void MergeFrom(const Basic_UpstreamPayload& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Basic_UpstreamPayload* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Basic.UpstreamPayload";
  }
  protected:
  explicit Basic_UpstreamPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kPayloadDataFieldNumber = 4,
    kUserInstanceFieldNumber = 5,
    kSettingInfoFieldNumber = 7,
    kRequestBasicInfoFieldNumber = 8,
    kSeqIdFieldNumber = 2,
    kRetryCountFieldNumber = 3,
    kErrorCodeFieldNumber = 6,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // bytes payloadData = 4;
  void clear_payloaddata();
  const std::string& payloaddata() const;
  void set_payloaddata(const std::string& value);
  void set_payloaddata(std::string&& value);
  void set_payloaddata(const char* value);
  void set_payloaddata(const void* value, size_t size);
  std::string* mutable_payloaddata();
  std::string* release_payloaddata();
  void set_allocated_payloaddata(std::string* payloaddata);
  private:
  const std::string& _internal_payloaddata() const;
  void _internal_set_payloaddata(const std::string& value);
  std::string* _internal_mutable_payloaddata();
  public:

  // .AcFunDanmu.Im.Basic.UserInstance userInstance = 5;
  bool has_userinstance() const;
  private:
  bool _internal_has_userinstance() const;
  public:
  void clear_userinstance();
  const ::AcFunDanmu::Im::Basic_UserInstance& userinstance() const;
  ::AcFunDanmu::Im::Basic_UserInstance* release_userinstance();
  ::AcFunDanmu::Im::Basic_UserInstance* mutable_userinstance();
  void set_allocated_userinstance(::AcFunDanmu::Im::Basic_UserInstance* userinstance);
  private:
  const ::AcFunDanmu::Im::Basic_UserInstance& _internal_userinstance() const;
  ::AcFunDanmu::Im::Basic_UserInstance* _internal_mutable_userinstance();
  public:
  void unsafe_arena_set_allocated_userinstance(
      ::AcFunDanmu::Im::Basic_UserInstance* userinstance);
  ::AcFunDanmu::Im::Basic_UserInstance* unsafe_arena_release_userinstance();

  // .AcFunDanmu.Im.Basic.SettingInfo settingInfo = 7;
  bool has_settinginfo() const;
  private:
  bool _internal_has_settinginfo() const;
  public:
  void clear_settinginfo();
  const ::AcFunDanmu::Im::Basic_SettingInfo& settinginfo() const;
  ::AcFunDanmu::Im::Basic_SettingInfo* release_settinginfo();
  ::AcFunDanmu::Im::Basic_SettingInfo* mutable_settinginfo();
  void set_allocated_settinginfo(::AcFunDanmu::Im::Basic_SettingInfo* settinginfo);
  private:
  const ::AcFunDanmu::Im::Basic_SettingInfo& _internal_settinginfo() const;
  ::AcFunDanmu::Im::Basic_SettingInfo* _internal_mutable_settinginfo();
  public:
  void unsafe_arena_set_allocated_settinginfo(
      ::AcFunDanmu::Im::Basic_SettingInfo* settinginfo);
  ::AcFunDanmu::Im::Basic_SettingInfo* unsafe_arena_release_settinginfo();

  // .AcFunDanmu.Im.Basic.RequestBasicInfo requestBasicInfo = 8;
  bool has_requestbasicinfo() const;
  private:
  bool _internal_has_requestbasicinfo() const;
  public:
  void clear_requestbasicinfo();
  const ::AcFunDanmu::Im::Basic_RequestBasicInfo& requestbasicinfo() const;
  ::AcFunDanmu::Im::Basic_RequestBasicInfo* release_requestbasicinfo();
  ::AcFunDanmu::Im::Basic_RequestBasicInfo* mutable_requestbasicinfo();
  void set_allocated_requestbasicinfo(::AcFunDanmu::Im::Basic_RequestBasicInfo* requestbasicinfo);
  private:
  const ::AcFunDanmu::Im::Basic_RequestBasicInfo& _internal_requestbasicinfo() const;
  ::AcFunDanmu::Im::Basic_RequestBasicInfo* _internal_mutable_requestbasicinfo();
  public:
  void unsafe_arena_set_allocated_requestbasicinfo(
      ::AcFunDanmu::Im::Basic_RequestBasicInfo* requestbasicinfo);
  ::AcFunDanmu::Im::Basic_RequestBasicInfo* unsafe_arena_release_requestbasicinfo();

  // int64 seqId = 2;
  void clear_seqid();
  ::PROTOBUF_NAMESPACE_ID::int64 seqid() const;
  void set_seqid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_seqid() const;
  void _internal_set_seqid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 retryCount = 3;
  void clear_retrycount();
  ::PROTOBUF_NAMESPACE_ID::uint32 retrycount() const;
  void set_retrycount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_retrycount() const;
  void _internal_set_retrycount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 errorCode = 6;
  void clear_errorcode();
  ::PROTOBUF_NAMESPACE_ID::int32 errorcode() const;
  void set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_errorcode() const;
  void _internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Basic.UpstreamPayload)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payloaddata_;
  ::AcFunDanmu::Im::Basic_UserInstance* userinstance_;
  ::AcFunDanmu::Im::Basic_SettingInfo* settinginfo_;
  ::AcFunDanmu::Im::Basic_RequestBasicInfo* requestbasicinfo_;
  ::PROTOBUF_NAMESPACE_ID::int64 seqid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 retrycount_;
  ::PROTOBUF_NAMESPACE_ID::int32 errorcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Basic_DownstreamPayload PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Basic.DownstreamPayload) */ {
 public:
  inline Basic_DownstreamPayload() : Basic_DownstreamPayload(nullptr) {}
  virtual ~Basic_DownstreamPayload();

  Basic_DownstreamPayload(const Basic_DownstreamPayload& from);
  Basic_DownstreamPayload(Basic_DownstreamPayload&& from) noexcept
    : Basic_DownstreamPayload() {
    *this = ::std::move(from);
  }

  inline Basic_DownstreamPayload& operator=(const Basic_DownstreamPayload& from) {
    CopyFrom(from);
    return *this;
  }
  inline Basic_DownstreamPayload& operator=(Basic_DownstreamPayload&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Basic_DownstreamPayload& default_instance();

  static inline const Basic_DownstreamPayload* internal_default_instance() {
    return reinterpret_cast<const Basic_DownstreamPayload*>(
               &_Basic_DownstreamPayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Basic_DownstreamPayload& a, Basic_DownstreamPayload& b) {
    a.Swap(&b);
  }
  inline void Swap(Basic_DownstreamPayload* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Basic_DownstreamPayload* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Basic_DownstreamPayload* New() const final {
    return CreateMaybeMessage<Basic_DownstreamPayload>(nullptr);
  }

  Basic_DownstreamPayload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Basic_DownstreamPayload>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Basic_DownstreamPayload& from);
  void MergeFrom(const Basic_DownstreamPayload& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Basic_DownstreamPayload* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Basic.DownstreamPayload";
  }
  protected:
  explicit Basic_DownstreamPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kPayloadDataFieldNumber = 4,
    kErrorMsgFieldNumber = 5,
    kErrorDataFieldNumber = 6,
    kSeqIdFieldNumber = 2,
    kErrorCodeFieldNumber = 3,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // bytes payloadData = 4;
  void clear_payloaddata();
  const std::string& payloaddata() const;
  void set_payloaddata(const std::string& value);
  void set_payloaddata(std::string&& value);
  void set_payloaddata(const char* value);
  void set_payloaddata(const void* value, size_t size);
  std::string* mutable_payloaddata();
  std::string* release_payloaddata();
  void set_allocated_payloaddata(std::string* payloaddata);
  private:
  const std::string& _internal_payloaddata() const;
  void _internal_set_payloaddata(const std::string& value);
  std::string* _internal_mutable_payloaddata();
  public:

  // string errorMsg = 5;
  void clear_errormsg();
  const std::string& errormsg() const;
  void set_errormsg(const std::string& value);
  void set_errormsg(std::string&& value);
  void set_errormsg(const char* value);
  void set_errormsg(const char* value, size_t size);
  std::string* mutable_errormsg();
  std::string* release_errormsg();
  void set_allocated_errormsg(std::string* errormsg);
  private:
  const std::string& _internal_errormsg() const;
  void _internal_set_errormsg(const std::string& value);
  std::string* _internal_mutable_errormsg();
  public:

  // bytes errorData = 6;
  void clear_errordata();
  const std::string& errordata() const;
  void set_errordata(const std::string& value);
  void set_errordata(std::string&& value);
  void set_errordata(const char* value);
  void set_errordata(const void* value, size_t size);
  std::string* mutable_errordata();
  std::string* release_errordata();
  void set_allocated_errordata(std::string* errordata);
  private:
  const std::string& _internal_errordata() const;
  void _internal_set_errordata(const std::string& value);
  std::string* _internal_mutable_errordata();
  public:

  // int64 seqId = 2;
  void clear_seqid();
  ::PROTOBUF_NAMESPACE_ID::int64 seqid() const;
  void set_seqid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_seqid() const;
  void _internal_set_seqid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 errorCode = 3;
  void clear_errorcode();
  ::PROTOBUF_NAMESPACE_ID::int32 errorcode() const;
  void set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_errorcode() const;
  void _internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Basic.DownstreamPayload)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payloaddata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errormsg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errordata_;
  ::PROTOBUF_NAMESPACE_ID::int64 seqid_;
  ::PROTOBUF_NAMESPACE_ID::int32 errorcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Basic_PingRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Basic.PingRequest) */ {
 public:
  inline Basic_PingRequest() : Basic_PingRequest(nullptr) {}
  virtual ~Basic_PingRequest();

  Basic_PingRequest(const Basic_PingRequest& from);
  Basic_PingRequest(Basic_PingRequest&& from) noexcept
    : Basic_PingRequest() {
    *this = ::std::move(from);
  }

  inline Basic_PingRequest& operator=(const Basic_PingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Basic_PingRequest& operator=(Basic_PingRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Basic_PingRequest& default_instance();

  static inline const Basic_PingRequest* internal_default_instance() {
    return reinterpret_cast<const Basic_PingRequest*>(
               &_Basic_PingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Basic_PingRequest& a, Basic_PingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Basic_PingRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Basic_PingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Basic_PingRequest* New() const final {
    return CreateMaybeMessage<Basic_PingRequest>(nullptr);
  }

  Basic_PingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Basic_PingRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Basic_PingRequest& from);
  void MergeFrom(const Basic_PingRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Basic_PingRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Basic.PingRequest";
  }
  protected:
  explicit Basic_PingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Basic_PingRequest_PingType PingType;
  static constexpr PingType kInvalid =
    Basic_PingRequest_PingType_kInvalid;
  static constexpr PingType kPriorRegister =
    Basic_PingRequest_PingType_kPriorRegister;
  static constexpr PingType kPostRegister =
    Basic_PingRequest_PingType_kPostRegister;
  static inline bool PingType_IsValid(int value) {
    return Basic_PingRequest_PingType_IsValid(value);
  }
  static constexpr PingType PingType_MIN =
    Basic_PingRequest_PingType_PingType_MIN;
  static constexpr PingType PingType_MAX =
    Basic_PingRequest_PingType_PingType_MAX;
  static constexpr int PingType_ARRAYSIZE =
    Basic_PingRequest_PingType_PingType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PingType_descriptor() {
    return Basic_PingRequest_PingType_descriptor();
  }
  template<typename T>
  static inline const std::string& PingType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PingType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PingType_Name.");
    return Basic_PingRequest_PingType_Name(enum_t_value);
  }
  static inline bool PingType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PingType* value) {
    return Basic_PingRequest_PingType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPingTypeFieldNumber = 1,
    kPingRoundFieldNumber = 2,
  };
  // .AcFunDanmu.Im.Basic.PingRequest.PingType pingType = 1;
  void clear_pingtype();
  ::AcFunDanmu::Im::Basic_PingRequest_PingType pingtype() const;
  void set_pingtype(::AcFunDanmu::Im::Basic_PingRequest_PingType value);
  private:
  ::AcFunDanmu::Im::Basic_PingRequest_PingType _internal_pingtype() const;
  void _internal_set_pingtype(::AcFunDanmu::Im::Basic_PingRequest_PingType value);
  public:

  // uint32 pingRound = 2;
  void clear_pinground();
  ::PROTOBUF_NAMESPACE_ID::uint32 pinground() const;
  void set_pinground(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pinground() const;
  void _internal_set_pinground(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Basic.PingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int pingtype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pinground_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Basic_PingResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Basic.PingResponse) */ {
 public:
  inline Basic_PingResponse() : Basic_PingResponse(nullptr) {}
  virtual ~Basic_PingResponse();

  Basic_PingResponse(const Basic_PingResponse& from);
  Basic_PingResponse(Basic_PingResponse&& from) noexcept
    : Basic_PingResponse() {
    *this = ::std::move(from);
  }

  inline Basic_PingResponse& operator=(const Basic_PingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Basic_PingResponse& operator=(Basic_PingResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Basic_PingResponse& default_instance();

  static inline const Basic_PingResponse* internal_default_instance() {
    return reinterpret_cast<const Basic_PingResponse*>(
               &_Basic_PingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Basic_PingResponse& a, Basic_PingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(Basic_PingResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Basic_PingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Basic_PingResponse* New() const final {
    return CreateMaybeMessage<Basic_PingResponse>(nullptr);
  }

  Basic_PingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Basic_PingResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Basic_PingResponse& from);
  void MergeFrom(const Basic_PingResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Basic_PingResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Basic.PingResponse";
  }
  protected:
  explicit Basic_PingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerTimestampFieldNumber = 1,
    kClientIpFieldNumber = 2,
    kRedirectIpFieldNumber = 3,
    kRedirectPortFieldNumber = 4,
  };
  // sfixed32 serverTimestamp = 1;
  void clear_servertimestamp();
  ::PROTOBUF_NAMESPACE_ID::int32 servertimestamp() const;
  void set_servertimestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_servertimestamp() const;
  void _internal_set_servertimestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // fixed32 clientIp = 2;
  void clear_clientip();
  ::PROTOBUF_NAMESPACE_ID::uint32 clientip() const;
  void set_clientip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_clientip() const;
  void _internal_set_clientip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // fixed32 redirectIp = 3;
  void clear_redirectip();
  ::PROTOBUF_NAMESPACE_ID::uint32 redirectip() const;
  void set_redirectip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_redirectip() const;
  void _internal_set_redirectip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 redirectPort = 4;
  void clear_redirectport();
  ::PROTOBUF_NAMESPACE_ID::uint32 redirectport() const;
  void set_redirectport(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_redirectport() const;
  void _internal_set_redirectport(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Basic.PingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 servertimestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 clientip_;
  ::PROTOBUF_NAMESPACE_ID::uint32 redirectip_;
  ::PROTOBUF_NAMESPACE_ID::uint32 redirectport_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Basic_RegisterRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Basic.RegisterRequest) */ {
 public:
  inline Basic_RegisterRequest() : Basic_RegisterRequest(nullptr) {}
  virtual ~Basic_RegisterRequest();

  Basic_RegisterRequest(const Basic_RegisterRequest& from);
  Basic_RegisterRequest(Basic_RegisterRequest&& from) noexcept
    : Basic_RegisterRequest() {
    *this = ::std::move(from);
  }

  inline Basic_RegisterRequest& operator=(const Basic_RegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Basic_RegisterRequest& operator=(Basic_RegisterRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Basic_RegisterRequest& default_instance();

  static inline const Basic_RegisterRequest* internal_default_instance() {
    return reinterpret_cast<const Basic_RegisterRequest*>(
               &_Basic_RegisterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Basic_RegisterRequest& a, Basic_RegisterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Basic_RegisterRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Basic_RegisterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Basic_RegisterRequest* New() const final {
    return CreateMaybeMessage<Basic_RegisterRequest>(nullptr);
  }

  Basic_RegisterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Basic_RegisterRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Basic_RegisterRequest& from);
  void MergeFrom(const Basic_RegisterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Basic_RegisterRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Basic.RegisterRequest";
  }
  protected:
  explicit Basic_RegisterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Basic_RegisterRequest_PresenceStatus PresenceStatus;
  static constexpr PresenceStatus kPresenceOffline =
    Basic_RegisterRequest_PresenceStatus_kPresenceOffline;
  static constexpr PresenceStatus kPresenceOnline =
    Basic_RegisterRequest_PresenceStatus_kPresenceOnline;
  static inline bool PresenceStatus_IsValid(int value) {
    return Basic_RegisterRequest_PresenceStatus_IsValid(value);
  }
  static constexpr PresenceStatus PresenceStatus_MIN =
    Basic_RegisterRequest_PresenceStatus_PresenceStatus_MIN;
  static constexpr PresenceStatus PresenceStatus_MAX =
    Basic_RegisterRequest_PresenceStatus_PresenceStatus_MAX;
  static constexpr int PresenceStatus_ARRAYSIZE =
    Basic_RegisterRequest_PresenceStatus_PresenceStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PresenceStatus_descriptor() {
    return Basic_RegisterRequest_PresenceStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& PresenceStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PresenceStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PresenceStatus_Name.");
    return Basic_RegisterRequest_PresenceStatus_Name(enum_t_value);
  }
  static inline bool PresenceStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PresenceStatus* value) {
    return Basic_RegisterRequest_PresenceStatus_Parse(name, value);
  }

  typedef Basic_RegisterRequest_ActiveStatus ActiveStatus;
  static constexpr ActiveStatus kInvalid =
    Basic_RegisterRequest_ActiveStatus_kInvalid;
  static constexpr ActiveStatus kAppInForeground =
    Basic_RegisterRequest_ActiveStatus_kAppInForeground;
  static constexpr ActiveStatus kAppinBackground =
    Basic_RegisterRequest_ActiveStatus_kAppinBackground;
  static inline bool ActiveStatus_IsValid(int value) {
    return Basic_RegisterRequest_ActiveStatus_IsValid(value);
  }
  static constexpr ActiveStatus ActiveStatus_MIN =
    Basic_RegisterRequest_ActiveStatus_ActiveStatus_MIN;
  static constexpr ActiveStatus ActiveStatus_MAX =
    Basic_RegisterRequest_ActiveStatus_ActiveStatus_MAX;
  static constexpr int ActiveStatus_ARRAYSIZE =
    Basic_RegisterRequest_ActiveStatus_ActiveStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ActiveStatus_descriptor() {
    return Basic_RegisterRequest_ActiveStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& ActiveStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ActiveStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ActiveStatus_Name.");
    return Basic_RegisterRequest_ActiveStatus_Name(enum_t_value);
  }
  static inline bool ActiveStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ActiveStatus* value) {
    return Basic_RegisterRequest_ActiveStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPushServiceTokenListFieldNumber = 9,
    kAppCustomStatusFieldNumber = 6,
    kAppInfoFieldNumber = 1,
    kDeviceInfoFieldNumber = 2,
    kEnvInfoFieldNumber = 3,
    kPushServiceTokenFieldNumber = 7,
    kPresenceStatusFieldNumber = 4,
    kAppActiveStatusFieldNumber = 5,
    kInstanceIdFieldNumber = 8,
    kKeepaliveIntervalSecFieldNumber = 10,
  };
  // repeated .AcFunDanmu.Im.Basic.PushServiceToken pushServiceTokenList = 9;
  int pushservicetokenlist_size() const;
  private:
  int _internal_pushservicetokenlist_size() const;
  public:
  void clear_pushservicetokenlist();
  ::AcFunDanmu::Im::Basic_PushServiceToken* mutable_pushservicetokenlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_PushServiceToken >*
      mutable_pushservicetokenlist();
  private:
  const ::AcFunDanmu::Im::Basic_PushServiceToken& _internal_pushservicetokenlist(int index) const;
  ::AcFunDanmu::Im::Basic_PushServiceToken* _internal_add_pushservicetokenlist();
  public:
  const ::AcFunDanmu::Im::Basic_PushServiceToken& pushservicetokenlist(int index) const;
  ::AcFunDanmu::Im::Basic_PushServiceToken* add_pushservicetokenlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_PushServiceToken >&
      pushservicetokenlist() const;

  // bytes appCustomStatus = 6;
  void clear_appcustomstatus();
  const std::string& appcustomstatus() const;
  void set_appcustomstatus(const std::string& value);
  void set_appcustomstatus(std::string&& value);
  void set_appcustomstatus(const char* value);
  void set_appcustomstatus(const void* value, size_t size);
  std::string* mutable_appcustomstatus();
  std::string* release_appcustomstatus();
  void set_allocated_appcustomstatus(std::string* appcustomstatus);
  private:
  const std::string& _internal_appcustomstatus() const;
  void _internal_set_appcustomstatus(const std::string& value);
  std::string* _internal_mutable_appcustomstatus();
  public:

  // .AcFunDanmu.Im.Basic.AppInfo appInfo = 1;
  bool has_appinfo() const;
  private:
  bool _internal_has_appinfo() const;
  public:
  void clear_appinfo();
  const ::AcFunDanmu::Im::Basic_AppInfo& appinfo() const;
  ::AcFunDanmu::Im::Basic_AppInfo* release_appinfo();
  ::AcFunDanmu::Im::Basic_AppInfo* mutable_appinfo();
  void set_allocated_appinfo(::AcFunDanmu::Im::Basic_AppInfo* appinfo);
  private:
  const ::AcFunDanmu::Im::Basic_AppInfo& _internal_appinfo() const;
  ::AcFunDanmu::Im::Basic_AppInfo* _internal_mutable_appinfo();
  public:
  void unsafe_arena_set_allocated_appinfo(
      ::AcFunDanmu::Im::Basic_AppInfo* appinfo);
  ::AcFunDanmu::Im::Basic_AppInfo* unsafe_arena_release_appinfo();

  // .AcFunDanmu.Im.Basic.DeviceInfo deviceInfo = 2;
  bool has_deviceinfo() const;
  private:
  bool _internal_has_deviceinfo() const;
  public:
  void clear_deviceinfo();
  const ::AcFunDanmu::Im::Basic_DeviceInfo& deviceinfo() const;
  ::AcFunDanmu::Im::Basic_DeviceInfo* release_deviceinfo();
  ::AcFunDanmu::Im::Basic_DeviceInfo* mutable_deviceinfo();
  void set_allocated_deviceinfo(::AcFunDanmu::Im::Basic_DeviceInfo* deviceinfo);
  private:
  const ::AcFunDanmu::Im::Basic_DeviceInfo& _internal_deviceinfo() const;
  ::AcFunDanmu::Im::Basic_DeviceInfo* _internal_mutable_deviceinfo();
  public:
  void unsafe_arena_set_allocated_deviceinfo(
      ::AcFunDanmu::Im::Basic_DeviceInfo* deviceinfo);
  ::AcFunDanmu::Im::Basic_DeviceInfo* unsafe_arena_release_deviceinfo();

  // .AcFunDanmu.Im.Basic.EnvInfo envInfo = 3;
  bool has_envinfo() const;
  private:
  bool _internal_has_envinfo() const;
  public:
  void clear_envinfo();
  const ::AcFunDanmu::Im::Basic_EnvInfo& envinfo() const;
  ::AcFunDanmu::Im::Basic_EnvInfo* release_envinfo();
  ::AcFunDanmu::Im::Basic_EnvInfo* mutable_envinfo();
  void set_allocated_envinfo(::AcFunDanmu::Im::Basic_EnvInfo* envinfo);
  private:
  const ::AcFunDanmu::Im::Basic_EnvInfo& _internal_envinfo() const;
  ::AcFunDanmu::Im::Basic_EnvInfo* _internal_mutable_envinfo();
  public:
  void unsafe_arena_set_allocated_envinfo(
      ::AcFunDanmu::Im::Basic_EnvInfo* envinfo);
  ::AcFunDanmu::Im::Basic_EnvInfo* unsafe_arena_release_envinfo();

  // .AcFunDanmu.Im.Basic.PushServiceToken pushServiceToken = 7;
  bool has_pushservicetoken() const;
  private:
  bool _internal_has_pushservicetoken() const;
  public:
  void clear_pushservicetoken();
  const ::AcFunDanmu::Im::Basic_PushServiceToken& pushservicetoken() const;
  ::AcFunDanmu::Im::Basic_PushServiceToken* release_pushservicetoken();
  ::AcFunDanmu::Im::Basic_PushServiceToken* mutable_pushservicetoken();
  void set_allocated_pushservicetoken(::AcFunDanmu::Im::Basic_PushServiceToken* pushservicetoken);
  private:
  const ::AcFunDanmu::Im::Basic_PushServiceToken& _internal_pushservicetoken() const;
  ::AcFunDanmu::Im::Basic_PushServiceToken* _internal_mutable_pushservicetoken();
  public:
  void unsafe_arena_set_allocated_pushservicetoken(
      ::AcFunDanmu::Im::Basic_PushServiceToken* pushservicetoken);
  ::AcFunDanmu::Im::Basic_PushServiceToken* unsafe_arena_release_pushservicetoken();

  // .AcFunDanmu.Im.Basic.RegisterRequest.PresenceStatus presenceStatus = 4;
  void clear_presencestatus();
  ::AcFunDanmu::Im::Basic_RegisterRequest_PresenceStatus presencestatus() const;
  void set_presencestatus(::AcFunDanmu::Im::Basic_RegisterRequest_PresenceStatus value);
  private:
  ::AcFunDanmu::Im::Basic_RegisterRequest_PresenceStatus _internal_presencestatus() const;
  void _internal_set_presencestatus(::AcFunDanmu::Im::Basic_RegisterRequest_PresenceStatus value);
  public:

  // .AcFunDanmu.Im.Basic.RegisterRequest.ActiveStatus appActiveStatus = 5;
  void clear_appactivestatus();
  ::AcFunDanmu::Im::Basic_RegisterRequest_ActiveStatus appactivestatus() const;
  void set_appactivestatus(::AcFunDanmu::Im::Basic_RegisterRequest_ActiveStatus value);
  private:
  ::AcFunDanmu::Im::Basic_RegisterRequest_ActiveStatus _internal_appactivestatus() const;
  void _internal_set_appactivestatus(::AcFunDanmu::Im::Basic_RegisterRequest_ActiveStatus value);
  public:

  // int64 instanceId = 8;
  void clear_instanceid();
  ::PROTOBUF_NAMESPACE_ID::int64 instanceid() const;
  void set_instanceid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_instanceid() const;
  void _internal_set_instanceid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 keepaliveIntervalSec = 10;
  void clear_keepaliveintervalsec();
  ::PROTOBUF_NAMESPACE_ID::int32 keepaliveintervalsec() const;
  void set_keepaliveintervalsec(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_keepaliveintervalsec() const;
  void _internal_set_keepaliveintervalsec(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Basic.RegisterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_PushServiceToken > pushservicetokenlist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appcustomstatus_;
  ::AcFunDanmu::Im::Basic_AppInfo* appinfo_;
  ::AcFunDanmu::Im::Basic_DeviceInfo* deviceinfo_;
  ::AcFunDanmu::Im::Basic_EnvInfo* envinfo_;
  ::AcFunDanmu::Im::Basic_PushServiceToken* pushservicetoken_;
  int presencestatus_;
  int appactivestatus_;
  ::PROTOBUF_NAMESPACE_ID::int64 instanceid_;
  ::PROTOBUF_NAMESPACE_ID::int32 keepaliveintervalsec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Basic_RegisterResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Basic.RegisterResponse) */ {
 public:
  inline Basic_RegisterResponse() : Basic_RegisterResponse(nullptr) {}
  virtual ~Basic_RegisterResponse();

  Basic_RegisterResponse(const Basic_RegisterResponse& from);
  Basic_RegisterResponse(Basic_RegisterResponse&& from) noexcept
    : Basic_RegisterResponse() {
    *this = ::std::move(from);
  }

  inline Basic_RegisterResponse& operator=(const Basic_RegisterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Basic_RegisterResponse& operator=(Basic_RegisterResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Basic_RegisterResponse& default_instance();

  static inline const Basic_RegisterResponse* internal_default_instance() {
    return reinterpret_cast<const Basic_RegisterResponse*>(
               &_Basic_RegisterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Basic_RegisterResponse& a, Basic_RegisterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(Basic_RegisterResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Basic_RegisterResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Basic_RegisterResponse* New() const final {
    return CreateMaybeMessage<Basic_RegisterResponse>(nullptr);
  }

  Basic_RegisterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Basic_RegisterResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Basic_RegisterResponse& from);
  void MergeFrom(const Basic_RegisterResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Basic_RegisterResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Basic.RegisterResponse";
  }
  protected:
  explicit Basic_RegisterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessKeyFieldNumber = 2,
    kAccessPointsConfigFieldNumber = 1,
    kSdkOptionFieldNumber = 4,
    kInstanceIdFieldNumber = 3,
  };
  // bytes sessKey = 2;
  void clear_sesskey();
  const std::string& sesskey() const;
  void set_sesskey(const std::string& value);
  void set_sesskey(std::string&& value);
  void set_sesskey(const char* value);
  void set_sesskey(const void* value, size_t size);
  std::string* mutable_sesskey();
  std::string* release_sesskey();
  void set_allocated_sesskey(std::string* sesskey);
  private:
  const std::string& _internal_sesskey() const;
  void _internal_set_sesskey(const std::string& value);
  std::string* _internal_mutable_sesskey();
  public:

  // .AcFunDanmu.Im.Basic.AccessPointsConfig accessPointsConfig = 1;
  bool has_accesspointsconfig() const;
  private:
  bool _internal_has_accesspointsconfig() const;
  public:
  void clear_accesspointsconfig();
  const ::AcFunDanmu::Im::Basic_AccessPointsConfig& accesspointsconfig() const;
  ::AcFunDanmu::Im::Basic_AccessPointsConfig* release_accesspointsconfig();
  ::AcFunDanmu::Im::Basic_AccessPointsConfig* mutable_accesspointsconfig();
  void set_allocated_accesspointsconfig(::AcFunDanmu::Im::Basic_AccessPointsConfig* accesspointsconfig);
  private:
  const ::AcFunDanmu::Im::Basic_AccessPointsConfig& _internal_accesspointsconfig() const;
  ::AcFunDanmu::Im::Basic_AccessPointsConfig* _internal_mutable_accesspointsconfig();
  public:
  void unsafe_arena_set_allocated_accesspointsconfig(
      ::AcFunDanmu::Im::Basic_AccessPointsConfig* accesspointsconfig);
  ::AcFunDanmu::Im::Basic_AccessPointsConfig* unsafe_arena_release_accesspointsconfig();

  // .AcFunDanmu.Im.Basic.SdkOption sdkOption = 4;
  bool has_sdkoption() const;
  private:
  bool _internal_has_sdkoption() const;
  public:
  void clear_sdkoption();
  const ::AcFunDanmu::Im::Basic_SdkOption& sdkoption() const;
  ::AcFunDanmu::Im::Basic_SdkOption* release_sdkoption();
  ::AcFunDanmu::Im::Basic_SdkOption* mutable_sdkoption();
  void set_allocated_sdkoption(::AcFunDanmu::Im::Basic_SdkOption* sdkoption);
  private:
  const ::AcFunDanmu::Im::Basic_SdkOption& _internal_sdkoption() const;
  ::AcFunDanmu::Im::Basic_SdkOption* _internal_mutable_sdkoption();
  public:
  void unsafe_arena_set_allocated_sdkoption(
      ::AcFunDanmu::Im::Basic_SdkOption* sdkoption);
  ::AcFunDanmu::Im::Basic_SdkOption* unsafe_arena_release_sdkoption();

  // int64 instanceId = 3;
  void clear_instanceid();
  ::PROTOBUF_NAMESPACE_ID::int64 instanceid() const;
  void set_instanceid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_instanceid() const;
  void _internal_set_instanceid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Basic.RegisterResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sesskey_;
  ::AcFunDanmu::Im::Basic_AccessPointsConfig* accesspointsconfig_;
  ::AcFunDanmu::Im::Basic_SdkOption* sdkoption_;
  ::PROTOBUF_NAMESPACE_ID::int64 instanceid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Basic_AccessPointsConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Basic.AccessPointsConfig) */ {
 public:
  inline Basic_AccessPointsConfig() : Basic_AccessPointsConfig(nullptr) {}
  virtual ~Basic_AccessPointsConfig();

  Basic_AccessPointsConfig(const Basic_AccessPointsConfig& from);
  Basic_AccessPointsConfig(Basic_AccessPointsConfig&& from) noexcept
    : Basic_AccessPointsConfig() {
    *this = ::std::move(from);
  }

  inline Basic_AccessPointsConfig& operator=(const Basic_AccessPointsConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline Basic_AccessPointsConfig& operator=(Basic_AccessPointsConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Basic_AccessPointsConfig& default_instance();

  static inline const Basic_AccessPointsConfig* internal_default_instance() {
    return reinterpret_cast<const Basic_AccessPointsConfig*>(
               &_Basic_AccessPointsConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Basic_AccessPointsConfig& a, Basic_AccessPointsConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(Basic_AccessPointsConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Basic_AccessPointsConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Basic_AccessPointsConfig* New() const final {
    return CreateMaybeMessage<Basic_AccessPointsConfig>(nullptr);
  }

  Basic_AccessPointsConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Basic_AccessPointsConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Basic_AccessPointsConfig& from);
  void MergeFrom(const Basic_AccessPointsConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Basic_AccessPointsConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Basic.AccessPointsConfig";
  }
  protected:
  explicit Basic_AccessPointsConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOptimalApsFieldNumber = 1,
    kBackupApsFieldNumber = 2,
    kAvailablePortsFieldNumber = 3,
    kForeceLastConnectedApFieldNumber = 4,
  };
  // repeated .AcFunDanmu.Im.Basic.AccessPoint optimalAps = 1;
  int optimalaps_size() const;
  private:
  int _internal_optimalaps_size() const;
  public:
  void clear_optimalaps();
  ::AcFunDanmu::Im::Basic_AccessPoint* mutable_optimalaps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_AccessPoint >*
      mutable_optimalaps();
  private:
  const ::AcFunDanmu::Im::Basic_AccessPoint& _internal_optimalaps(int index) const;
  ::AcFunDanmu::Im::Basic_AccessPoint* _internal_add_optimalaps();
  public:
  const ::AcFunDanmu::Im::Basic_AccessPoint& optimalaps(int index) const;
  ::AcFunDanmu::Im::Basic_AccessPoint* add_optimalaps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_AccessPoint >&
      optimalaps() const;

  // repeated .AcFunDanmu.Im.Basic.AccessPoint backupAps = 2;
  int backupaps_size() const;
  private:
  int _internal_backupaps_size() const;
  public:
  void clear_backupaps();
  ::AcFunDanmu::Im::Basic_AccessPoint* mutable_backupaps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_AccessPoint >*
      mutable_backupaps();
  private:
  const ::AcFunDanmu::Im::Basic_AccessPoint& _internal_backupaps(int index) const;
  ::AcFunDanmu::Im::Basic_AccessPoint* _internal_add_backupaps();
  public:
  const ::AcFunDanmu::Im::Basic_AccessPoint& backupaps(int index) const;
  ::AcFunDanmu::Im::Basic_AccessPoint* add_backupaps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_AccessPoint >&
      backupaps() const;

  // repeated uint32 availablePorts = 3;
  int availableports_size() const;
  private:
  int _internal_availableports_size() const;
  public:
  void clear_availableports();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_availableports(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_availableports() const;
  void _internal_add_availableports(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_availableports();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 availableports(int index) const;
  void set_availableports(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_availableports(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      availableports() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_availableports();

  // .AcFunDanmu.Im.Basic.AccessPoint foreceLastConnectedAp = 4;
  bool has_forecelastconnectedap() const;
  private:
  bool _internal_has_forecelastconnectedap() const;
  public:
  void clear_forecelastconnectedap();
  const ::AcFunDanmu::Im::Basic_AccessPoint& forecelastconnectedap() const;
  ::AcFunDanmu::Im::Basic_AccessPoint* release_forecelastconnectedap();
  ::AcFunDanmu::Im::Basic_AccessPoint* mutable_forecelastconnectedap();
  void set_allocated_forecelastconnectedap(::AcFunDanmu::Im::Basic_AccessPoint* forecelastconnectedap);
  private:
  const ::AcFunDanmu::Im::Basic_AccessPoint& _internal_forecelastconnectedap() const;
  ::AcFunDanmu::Im::Basic_AccessPoint* _internal_mutable_forecelastconnectedap();
  public:
  void unsafe_arena_set_allocated_forecelastconnectedap(
      ::AcFunDanmu::Im::Basic_AccessPoint* forecelastconnectedap);
  ::AcFunDanmu::Im::Basic_AccessPoint* unsafe_arena_release_forecelastconnectedap();

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Basic.AccessPointsConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_AccessPoint > optimalaps_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_AccessPoint > backupaps_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > availableports_;
  mutable std::atomic<int> _availableports_cached_byte_size_;
  ::AcFunDanmu::Im::Basic_AccessPoint* forecelastconnectedap_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Basic_UnregisterRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Basic.UnregisterRequest) */ {
 public:
  inline Basic_UnregisterRequest() : Basic_UnregisterRequest(nullptr) {}
  virtual ~Basic_UnregisterRequest();

  Basic_UnregisterRequest(const Basic_UnregisterRequest& from);
  Basic_UnregisterRequest(Basic_UnregisterRequest&& from) noexcept
    : Basic_UnregisterRequest() {
    *this = ::std::move(from);
  }

  inline Basic_UnregisterRequest& operator=(const Basic_UnregisterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Basic_UnregisterRequest& operator=(Basic_UnregisterRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Basic_UnregisterRequest& default_instance();

  static inline const Basic_UnregisterRequest* internal_default_instance() {
    return reinterpret_cast<const Basic_UnregisterRequest*>(
               &_Basic_UnregisterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Basic_UnregisterRequest& a, Basic_UnregisterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Basic_UnregisterRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Basic_UnregisterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Basic_UnregisterRequest* New() const final {
    return CreateMaybeMessage<Basic_UnregisterRequest>(nullptr);
  }

  Basic_UnregisterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Basic_UnregisterRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Basic_UnregisterRequest& from);
  void MergeFrom(const Basic_UnregisterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Basic_UnregisterRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Basic.UnregisterRequest";
  }
  protected:
  explicit Basic_UnregisterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Basic.UnregisterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Basic_UnregisterResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Basic.UnregisterResponse) */ {
 public:
  inline Basic_UnregisterResponse() : Basic_UnregisterResponse(nullptr) {}
  virtual ~Basic_UnregisterResponse();

  Basic_UnregisterResponse(const Basic_UnregisterResponse& from);
  Basic_UnregisterResponse(Basic_UnregisterResponse&& from) noexcept
    : Basic_UnregisterResponse() {
    *this = ::std::move(from);
  }

  inline Basic_UnregisterResponse& operator=(const Basic_UnregisterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Basic_UnregisterResponse& operator=(Basic_UnregisterResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Basic_UnregisterResponse& default_instance();

  static inline const Basic_UnregisterResponse* internal_default_instance() {
    return reinterpret_cast<const Basic_UnregisterResponse*>(
               &_Basic_UnregisterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Basic_UnregisterResponse& a, Basic_UnregisterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(Basic_UnregisterResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Basic_UnregisterResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Basic_UnregisterResponse* New() const final {
    return CreateMaybeMessage<Basic_UnregisterResponse>(nullptr);
  }

  Basic_UnregisterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Basic_UnregisterResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Basic_UnregisterResponse& from);
  void MergeFrom(const Basic_UnregisterResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Basic_UnregisterResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Basic.UnregisterResponse";
  }
  protected:
  explicit Basic_UnregisterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Basic.UnregisterResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Basic_KeepAliveRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Basic.KeepAliveRequest) */ {
 public:
  inline Basic_KeepAliveRequest() : Basic_KeepAliveRequest(nullptr) {}
  virtual ~Basic_KeepAliveRequest();

  Basic_KeepAliveRequest(const Basic_KeepAliveRequest& from);
  Basic_KeepAliveRequest(Basic_KeepAliveRequest&& from) noexcept
    : Basic_KeepAliveRequest() {
    *this = ::std::move(from);
  }

  inline Basic_KeepAliveRequest& operator=(const Basic_KeepAliveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Basic_KeepAliveRequest& operator=(Basic_KeepAliveRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Basic_KeepAliveRequest& default_instance();

  static inline const Basic_KeepAliveRequest* internal_default_instance() {
    return reinterpret_cast<const Basic_KeepAliveRequest*>(
               &_Basic_KeepAliveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Basic_KeepAliveRequest& a, Basic_KeepAliveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Basic_KeepAliveRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Basic_KeepAliveRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Basic_KeepAliveRequest* New() const final {
    return CreateMaybeMessage<Basic_KeepAliveRequest>(nullptr);
  }

  Basic_KeepAliveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Basic_KeepAliveRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Basic_KeepAliveRequest& from);
  void MergeFrom(const Basic_KeepAliveRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Basic_KeepAliveRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Basic.KeepAliveRequest";
  }
  protected:
  explicit Basic_KeepAliveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPushServiceTokenListFieldNumber = 4,
    kPushServiceTokenFieldNumber = 3,
    kPresenceStatusFieldNumber = 1,
    kAppActiveStatusFieldNumber = 2,
    kKeepaliveIntervalSecFieldNumber = 5,
  };
  // repeated .AcFunDanmu.Im.Basic.PushServiceToken pushServiceTokenList = 4;
  int pushservicetokenlist_size() const;
  private:
  int _internal_pushservicetokenlist_size() const;
  public:
  void clear_pushservicetokenlist();
  ::AcFunDanmu::Im::Basic_PushServiceToken* mutable_pushservicetokenlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_PushServiceToken >*
      mutable_pushservicetokenlist();
  private:
  const ::AcFunDanmu::Im::Basic_PushServiceToken& _internal_pushservicetokenlist(int index) const;
  ::AcFunDanmu::Im::Basic_PushServiceToken* _internal_add_pushservicetokenlist();
  public:
  const ::AcFunDanmu::Im::Basic_PushServiceToken& pushservicetokenlist(int index) const;
  ::AcFunDanmu::Im::Basic_PushServiceToken* add_pushservicetokenlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_PushServiceToken >&
      pushservicetokenlist() const;

  // .AcFunDanmu.Im.Basic.PushServiceToken pushServiceToken = 3;
  bool has_pushservicetoken() const;
  private:
  bool _internal_has_pushservicetoken() const;
  public:
  void clear_pushservicetoken();
  const ::AcFunDanmu::Im::Basic_PushServiceToken& pushservicetoken() const;
  ::AcFunDanmu::Im::Basic_PushServiceToken* release_pushservicetoken();
  ::AcFunDanmu::Im::Basic_PushServiceToken* mutable_pushservicetoken();
  void set_allocated_pushservicetoken(::AcFunDanmu::Im::Basic_PushServiceToken* pushservicetoken);
  private:
  const ::AcFunDanmu::Im::Basic_PushServiceToken& _internal_pushservicetoken() const;
  ::AcFunDanmu::Im::Basic_PushServiceToken* _internal_mutable_pushservicetoken();
  public:
  void unsafe_arena_set_allocated_pushservicetoken(
      ::AcFunDanmu::Im::Basic_PushServiceToken* pushservicetoken);
  ::AcFunDanmu::Im::Basic_PushServiceToken* unsafe_arena_release_pushservicetoken();

  // .AcFunDanmu.Im.Basic.RegisterRequest.PresenceStatus presenceStatus = 1;
  void clear_presencestatus();
  ::AcFunDanmu::Im::Basic_RegisterRequest_PresenceStatus presencestatus() const;
  void set_presencestatus(::AcFunDanmu::Im::Basic_RegisterRequest_PresenceStatus value);
  private:
  ::AcFunDanmu::Im::Basic_RegisterRequest_PresenceStatus _internal_presencestatus() const;
  void _internal_set_presencestatus(::AcFunDanmu::Im::Basic_RegisterRequest_PresenceStatus value);
  public:

  // .AcFunDanmu.Im.Basic.RegisterRequest.ActiveStatus appActiveStatus = 2;
  void clear_appactivestatus();
  ::AcFunDanmu::Im::Basic_RegisterRequest_ActiveStatus appactivestatus() const;
  void set_appactivestatus(::AcFunDanmu::Im::Basic_RegisterRequest_ActiveStatus value);
  private:
  ::AcFunDanmu::Im::Basic_RegisterRequest_ActiveStatus _internal_appactivestatus() const;
  void _internal_set_appactivestatus(::AcFunDanmu::Im::Basic_RegisterRequest_ActiveStatus value);
  public:

  // int32 keepaliveIntervalSec = 5;
  void clear_keepaliveintervalsec();
  ::PROTOBUF_NAMESPACE_ID::int32 keepaliveintervalsec() const;
  void set_keepaliveintervalsec(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_keepaliveintervalsec() const;
  void _internal_set_keepaliveintervalsec(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Basic.KeepAliveRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_PushServiceToken > pushservicetokenlist_;
  ::AcFunDanmu::Im::Basic_PushServiceToken* pushservicetoken_;
  int presencestatus_;
  int appactivestatus_;
  ::PROTOBUF_NAMESPACE_ID::int32 keepaliveintervalsec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Basic_KeepAliveResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Basic.KeepAliveResponse) */ {
 public:
  inline Basic_KeepAliveResponse() : Basic_KeepAliveResponse(nullptr) {}
  virtual ~Basic_KeepAliveResponse();

  Basic_KeepAliveResponse(const Basic_KeepAliveResponse& from);
  Basic_KeepAliveResponse(Basic_KeepAliveResponse&& from) noexcept
    : Basic_KeepAliveResponse() {
    *this = ::std::move(from);
  }

  inline Basic_KeepAliveResponse& operator=(const Basic_KeepAliveResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Basic_KeepAliveResponse& operator=(Basic_KeepAliveResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Basic_KeepAliveResponse& default_instance();

  static inline const Basic_KeepAliveResponse* internal_default_instance() {
    return reinterpret_cast<const Basic_KeepAliveResponse*>(
               &_Basic_KeepAliveResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Basic_KeepAliveResponse& a, Basic_KeepAliveResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(Basic_KeepAliveResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Basic_KeepAliveResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Basic_KeepAliveResponse* New() const final {
    return CreateMaybeMessage<Basic_KeepAliveResponse>(nullptr);
  }

  Basic_KeepAliveResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Basic_KeepAliveResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Basic_KeepAliveResponse& from);
  void MergeFrom(const Basic_KeepAliveResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Basic_KeepAliveResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Basic.KeepAliveResponse";
  }
  protected:
  explicit Basic_KeepAliveResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccessPointsConfigFieldNumber = 1,
    kServerMsecFieldNumber = 2,
  };
  // .AcFunDanmu.Im.Basic.AccessPointsConfig accessPointsConfig = 1;
  bool has_accesspointsconfig() const;
  private:
  bool _internal_has_accesspointsconfig() const;
  public:
  void clear_accesspointsconfig();
  const ::AcFunDanmu::Im::Basic_AccessPointsConfig& accesspointsconfig() const;
  ::AcFunDanmu::Im::Basic_AccessPointsConfig* release_accesspointsconfig();
  ::AcFunDanmu::Im::Basic_AccessPointsConfig* mutable_accesspointsconfig();
  void set_allocated_accesspointsconfig(::AcFunDanmu::Im::Basic_AccessPointsConfig* accesspointsconfig);
  private:
  const ::AcFunDanmu::Im::Basic_AccessPointsConfig& _internal_accesspointsconfig() const;
  ::AcFunDanmu::Im::Basic_AccessPointsConfig* _internal_mutable_accesspointsconfig();
  public:
  void unsafe_arena_set_allocated_accesspointsconfig(
      ::AcFunDanmu::Im::Basic_AccessPointsConfig* accesspointsconfig);
  ::AcFunDanmu::Im::Basic_AccessPointsConfig* unsafe_arena_release_accesspointsconfig();

  // int64 serverMsec = 2;
  void clear_servermsec();
  ::PROTOBUF_NAMESPACE_ID::int64 servermsec() const;
  void set_servermsec(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_servermsec() const;
  void _internal_set_servermsec(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Basic.KeepAliveResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::AcFunDanmu::Im::Basic_AccessPointsConfig* accesspointsconfig_;
  ::PROTOBUF_NAMESPACE_ID::int64 servermsec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Basic_AccessPoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Basic.AccessPoint) */ {
 public:
  inline Basic_AccessPoint() : Basic_AccessPoint(nullptr) {}
  virtual ~Basic_AccessPoint();

  Basic_AccessPoint(const Basic_AccessPoint& from);
  Basic_AccessPoint(Basic_AccessPoint&& from) noexcept
    : Basic_AccessPoint() {
    *this = ::std::move(from);
  }

  inline Basic_AccessPoint& operator=(const Basic_AccessPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline Basic_AccessPoint& operator=(Basic_AccessPoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Basic_AccessPoint& default_instance();

  static inline const Basic_AccessPoint* internal_default_instance() {
    return reinterpret_cast<const Basic_AccessPoint*>(
               &_Basic_AccessPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Basic_AccessPoint& a, Basic_AccessPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(Basic_AccessPoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Basic_AccessPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Basic_AccessPoint* New() const final {
    return CreateMaybeMessage<Basic_AccessPoint>(nullptr);
  }

  Basic_AccessPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Basic_AccessPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Basic_AccessPoint& from);
  void MergeFrom(const Basic_AccessPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Basic_AccessPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Basic.AccessPoint";
  }
  protected:
  explicit Basic_AccessPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Basic_AccessPoint_AddressType AddressType;
  static constexpr AddressType kIPV4 =
    Basic_AccessPoint_AddressType_kIPV4;
  static constexpr AddressType kIPV6 =
    Basic_AccessPoint_AddressType_kIPV6;
  static constexpr AddressType kDomain =
    Basic_AccessPoint_AddressType_kDomain;
  static inline bool AddressType_IsValid(int value) {
    return Basic_AccessPoint_AddressType_IsValid(value);
  }
  static constexpr AddressType AddressType_MIN =
    Basic_AccessPoint_AddressType_AddressType_MIN;
  static constexpr AddressType AddressType_MAX =
    Basic_AccessPoint_AddressType_AddressType_MAX;
  static constexpr int AddressType_ARRAYSIZE =
    Basic_AccessPoint_AddressType_AddressType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AddressType_descriptor() {
    return Basic_AccessPoint_AddressType_descriptor();
  }
  template<typename T>
  static inline const std::string& AddressType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AddressType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AddressType_Name.");
    return Basic_AccessPoint_AddressType_Name(enum_t_value);
  }
  static inline bool AddressType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AddressType* value) {
    return Basic_AccessPoint_AddressType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIpV6FieldNumber = 4,
    kDomainFieldNumber = 5,
    kAddressTypeFieldNumber = 1,
    kPortFieldNumber = 2,
    kIpV4FieldNumber = 3,
  };
  // bytes ipV6 = 4;
  void clear_ipv6();
  const std::string& ipv6() const;
  void set_ipv6(const std::string& value);
  void set_ipv6(std::string&& value);
  void set_ipv6(const char* value);
  void set_ipv6(const void* value, size_t size);
  std::string* mutable_ipv6();
  std::string* release_ipv6();
  void set_allocated_ipv6(std::string* ipv6);
  private:
  const std::string& _internal_ipv6() const;
  void _internal_set_ipv6(const std::string& value);
  std::string* _internal_mutable_ipv6();
  public:

  // string domain = 5;
  void clear_domain();
  const std::string& domain() const;
  void set_domain(const std::string& value);
  void set_domain(std::string&& value);
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  std::string* mutable_domain();
  std::string* release_domain();
  void set_allocated_domain(std::string* domain);
  private:
  const std::string& _internal_domain() const;
  void _internal_set_domain(const std::string& value);
  std::string* _internal_mutable_domain();
  public:

  // .AcFunDanmu.Im.Basic.AccessPoint.AddressType addressType = 1;
  void clear_addresstype();
  ::AcFunDanmu::Im::Basic_AccessPoint_AddressType addresstype() const;
  void set_addresstype(::AcFunDanmu::Im::Basic_AccessPoint_AddressType value);
  private:
  ::AcFunDanmu::Im::Basic_AccessPoint_AddressType _internal_addresstype() const;
  void _internal_set_addresstype(::AcFunDanmu::Im::Basic_AccessPoint_AddressType value);
  public:

  // uint32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // fixed32 ipV4 = 3;
  void clear_ipv4();
  ::PROTOBUF_NAMESPACE_ID::uint32 ipv4() const;
  void set_ipv4(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ipv4() const;
  void _internal_set_ipv4(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Basic.AccessPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipv6_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_;
  int addresstype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ipv4_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Basic_TokenInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Basic.TokenInfo) */ {
 public:
  inline Basic_TokenInfo() : Basic_TokenInfo(nullptr) {}
  virtual ~Basic_TokenInfo();

  Basic_TokenInfo(const Basic_TokenInfo& from);
  Basic_TokenInfo(Basic_TokenInfo&& from) noexcept
    : Basic_TokenInfo() {
    *this = ::std::move(from);
  }

  inline Basic_TokenInfo& operator=(const Basic_TokenInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Basic_TokenInfo& operator=(Basic_TokenInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Basic_TokenInfo& default_instance();

  static inline const Basic_TokenInfo* internal_default_instance() {
    return reinterpret_cast<const Basic_TokenInfo*>(
               &_Basic_TokenInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Basic_TokenInfo& a, Basic_TokenInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(Basic_TokenInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Basic_TokenInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Basic_TokenInfo* New() const final {
    return CreateMaybeMessage<Basic_TokenInfo>(nullptr);
  }

  Basic_TokenInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Basic_TokenInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Basic_TokenInfo& from);
  void MergeFrom(const Basic_TokenInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Basic_TokenInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Basic.TokenInfo";
  }
  protected:
  explicit Basic_TokenInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Basic_TokenInfo_TokenType TokenType;
  static constexpr TokenType kInvalid =
    Basic_TokenInfo_TokenType_kInvalid;
  static constexpr TokenType kServiceToken =
    Basic_TokenInfo_TokenType_kServiceToken;
  static inline bool TokenType_IsValid(int value) {
    return Basic_TokenInfo_TokenType_IsValid(value);
  }
  static constexpr TokenType TokenType_MIN =
    Basic_TokenInfo_TokenType_TokenType_MIN;
  static constexpr TokenType TokenType_MAX =
    Basic_TokenInfo_TokenType_TokenType_MAX;
  static constexpr int TokenType_ARRAYSIZE =
    Basic_TokenInfo_TokenType_TokenType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TokenType_descriptor() {
    return Basic_TokenInfo_TokenType_descriptor();
  }
  template<typename T>
  static inline const std::string& TokenType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TokenType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TokenType_Name.");
    return Basic_TokenInfo_TokenType_Name(enum_t_value);
  }
  static inline bool TokenType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TokenType* value) {
    return Basic_TokenInfo_TokenType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 2,
    kTokenTypeFieldNumber = 1,
  };
  // bytes token = 2;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const void* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // .AcFunDanmu.Im.Basic.TokenInfo.TokenType tokenType = 1;
  void clear_tokentype();
  ::AcFunDanmu::Im::Basic_TokenInfo_TokenType tokentype() const;
  void set_tokentype(::AcFunDanmu::Im::Basic_TokenInfo_TokenType value);
  private:
  ::AcFunDanmu::Im::Basic_TokenInfo_TokenType _internal_tokentype() const;
  void _internal_set_tokentype(::AcFunDanmu::Im::Basic_TokenInfo_TokenType value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Basic.TokenInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  int tokentype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Basic_PushServiceToken PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Basic.PushServiceToken) */ {
 public:
  inline Basic_PushServiceToken() : Basic_PushServiceToken(nullptr) {}
  virtual ~Basic_PushServiceToken();

  Basic_PushServiceToken(const Basic_PushServiceToken& from);
  Basic_PushServiceToken(Basic_PushServiceToken&& from) noexcept
    : Basic_PushServiceToken() {
    *this = ::std::move(from);
  }

  inline Basic_PushServiceToken& operator=(const Basic_PushServiceToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline Basic_PushServiceToken& operator=(Basic_PushServiceToken&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Basic_PushServiceToken& default_instance();

  static inline const Basic_PushServiceToken* internal_default_instance() {
    return reinterpret_cast<const Basic_PushServiceToken*>(
               &_Basic_PushServiceToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Basic_PushServiceToken& a, Basic_PushServiceToken& b) {
    a.Swap(&b);
  }
  inline void Swap(Basic_PushServiceToken* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Basic_PushServiceToken* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Basic_PushServiceToken* New() const final {
    return CreateMaybeMessage<Basic_PushServiceToken>(nullptr);
  }

  Basic_PushServiceToken* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Basic_PushServiceToken>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Basic_PushServiceToken& from);
  void MergeFrom(const Basic_PushServiceToken& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Basic_PushServiceToken* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Basic.PushServiceToken";
  }
  protected:
  explicit Basic_PushServiceToken(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Basic_PushServiceToken_PushType PushType;
  static constexpr PushType kPushTypeInvalid =
    Basic_PushServiceToken_PushType_kPushTypeInvalid;
  static constexpr PushType kPushTypeAPNS =
    Basic_PushServiceToken_PushType_kPushTypeAPNS;
  static constexpr PushType kPushTypeXmPush =
    Basic_PushServiceToken_PushType_kPushTypeXmPush;
  static constexpr PushType kPushTypeJgPush =
    Basic_PushServiceToken_PushType_kPushTypeJgPush;
  static constexpr PushType kPushTypeGtPUsh =
    Basic_PushServiceToken_PushType_kPushTypeGtPUsh;
  static constexpr PushType kPushTypeOpPush =
    Basic_PushServiceToken_PushType_kPushTypeOpPush;
  static constexpr PushType kPushTYpeVvPush =
    Basic_PushServiceToken_PushType_kPushTYpeVvPush;
  static constexpr PushType kPushTypeHwPush =
    Basic_PushServiceToken_PushType_kPushTypeHwPush;
  static constexpr PushType kPushTYpeFcm =
    Basic_PushServiceToken_PushType_kPushTYpeFcm;
  static inline bool PushType_IsValid(int value) {
    return Basic_PushServiceToken_PushType_IsValid(value);
  }
  static constexpr PushType PushType_MIN =
    Basic_PushServiceToken_PushType_PushType_MIN;
  static constexpr PushType PushType_MAX =
    Basic_PushServiceToken_PushType_PushType_MAX;
  static constexpr int PushType_ARRAYSIZE =
    Basic_PushServiceToken_PushType_PushType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PushType_descriptor() {
    return Basic_PushServiceToken_PushType_descriptor();
  }
  template<typename T>
  static inline const std::string& PushType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PushType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PushType_Name.");
    return Basic_PushServiceToken_PushType_Name(enum_t_value);
  }
  static inline bool PushType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PushType* value) {
    return Basic_PushServiceToken_PushType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 2,
    kPushTypeFieldNumber = 1,
    kIsPassThroughFieldNumber = 3,
  };
  // bytes token = 2;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const void* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // .AcFunDanmu.Im.Basic.PushServiceToken.PushType pushType = 1;
  void clear_pushtype();
  ::AcFunDanmu::Im::Basic_PushServiceToken_PushType pushtype() const;
  void set_pushtype(::AcFunDanmu::Im::Basic_PushServiceToken_PushType value);
  private:
  ::AcFunDanmu::Im::Basic_PushServiceToken_PushType _internal_pushtype() const;
  void _internal_set_pushtype(::AcFunDanmu::Im::Basic_PushServiceToken_PushType value);
  public:

  // bool isPassThrough = 3;
  void clear_ispassthrough();
  bool ispassthrough() const;
  void set_ispassthrough(bool value);
  private:
  bool _internal_ispassthrough() const;
  void _internal_set_ispassthrough(bool value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Basic.PushServiceToken)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  int pushtype_;
  bool ispassthrough_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Basic_SettingInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Basic.SettingInfo) */ {
 public:
  inline Basic_SettingInfo() : Basic_SettingInfo(nullptr) {}
  virtual ~Basic_SettingInfo();

  Basic_SettingInfo(const Basic_SettingInfo& from);
  Basic_SettingInfo(Basic_SettingInfo&& from) noexcept
    : Basic_SettingInfo() {
    *this = ::std::move(from);
  }

  inline Basic_SettingInfo& operator=(const Basic_SettingInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Basic_SettingInfo& operator=(Basic_SettingInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Basic_SettingInfo& default_instance();

  static inline const Basic_SettingInfo* internal_default_instance() {
    return reinterpret_cast<const Basic_SettingInfo*>(
               &_Basic_SettingInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Basic_SettingInfo& a, Basic_SettingInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(Basic_SettingInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Basic_SettingInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Basic_SettingInfo* New() const final {
    return CreateMaybeMessage<Basic_SettingInfo>(nullptr);
  }

  Basic_SettingInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Basic_SettingInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Basic_SettingInfo& from);
  void MergeFrom(const Basic_SettingInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Basic_SettingInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Basic.SettingInfo";
  }
  protected:
  explicit Basic_SettingInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocaleFieldNumber = 1,
    kTimezoneFieldNumber = 2,
  };
  // string locale = 1;
  void clear_locale();
  const std::string& locale() const;
  void set_locale(const std::string& value);
  void set_locale(std::string&& value);
  void set_locale(const char* value);
  void set_locale(const char* value, size_t size);
  std::string* mutable_locale();
  std::string* release_locale();
  void set_allocated_locale(std::string* locale);
  private:
  const std::string& _internal_locale() const;
  void _internal_set_locale(const std::string& value);
  std::string* _internal_mutable_locale();
  public:

  // sint32 timezone = 2;
  void clear_timezone();
  ::PROTOBUF_NAMESPACE_ID::int32 timezone() const;
  void set_timezone(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_timezone() const;
  void _internal_set_timezone(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Basic.SettingInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr locale_;
  ::PROTOBUF_NAMESPACE_ID::int32 timezone_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Basic_AppInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Basic.AppInfo) */ {
 public:
  inline Basic_AppInfo() : Basic_AppInfo(nullptr) {}
  virtual ~Basic_AppInfo();

  Basic_AppInfo(const Basic_AppInfo& from);
  Basic_AppInfo(Basic_AppInfo&& from) noexcept
    : Basic_AppInfo() {
    *this = ::std::move(from);
  }

  inline Basic_AppInfo& operator=(const Basic_AppInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Basic_AppInfo& operator=(Basic_AppInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Basic_AppInfo& default_instance();

  static inline const Basic_AppInfo* internal_default_instance() {
    return reinterpret_cast<const Basic_AppInfo*>(
               &_Basic_AppInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(Basic_AppInfo& a, Basic_AppInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(Basic_AppInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Basic_AppInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Basic_AppInfo* New() const final {
    return CreateMaybeMessage<Basic_AppInfo>(nullptr);
  }

  Basic_AppInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Basic_AppInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Basic_AppInfo& from);
  void MergeFrom(const Basic_AppInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Basic_AppInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Basic.AppInfo";
  }
  protected:
  explicit Basic_AppInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppNameFieldNumber = 1,
    kAppVersionFieldNumber = 2,
    kAppChannelFieldNumber = 3,
    kSdkVersionFieldNumber = 4,
    kExtensionInfoFieldNumber = 11,
  };
  // string appName = 1;
  void clear_appname();
  const std::string& appname() const;
  void set_appname(const std::string& value);
  void set_appname(std::string&& value);
  void set_appname(const char* value);
  void set_appname(const char* value, size_t size);
  std::string* mutable_appname();
  std::string* release_appname();
  void set_allocated_appname(std::string* appname);
  private:
  const std::string& _internal_appname() const;
  void _internal_set_appname(const std::string& value);
  std::string* _internal_mutable_appname();
  public:

  // string appVersion = 2;
  void clear_appversion();
  const std::string& appversion() const;
  void set_appversion(const std::string& value);
  void set_appversion(std::string&& value);
  void set_appversion(const char* value);
  void set_appversion(const char* value, size_t size);
  std::string* mutable_appversion();
  std::string* release_appversion();
  void set_allocated_appversion(std::string* appversion);
  private:
  const std::string& _internal_appversion() const;
  void _internal_set_appversion(const std::string& value);
  std::string* _internal_mutable_appversion();
  public:

  // string appChannel = 3;
  void clear_appchannel();
  const std::string& appchannel() const;
  void set_appchannel(const std::string& value);
  void set_appchannel(std::string&& value);
  void set_appchannel(const char* value);
  void set_appchannel(const char* value, size_t size);
  std::string* mutable_appchannel();
  std::string* release_appchannel();
  void set_allocated_appchannel(std::string* appchannel);
  private:
  const std::string& _internal_appchannel() const;
  void _internal_set_appchannel(const std::string& value);
  std::string* _internal_mutable_appchannel();
  public:

  // string sdkVersion = 4;
  void clear_sdkversion();
  const std::string& sdkversion() const;
  void set_sdkversion(const std::string& value);
  void set_sdkversion(std::string&& value);
  void set_sdkversion(const char* value);
  void set_sdkversion(const char* value, size_t size);
  std::string* mutable_sdkversion();
  std::string* release_sdkversion();
  void set_allocated_sdkversion(std::string* sdkversion);
  private:
  const std::string& _internal_sdkversion() const;
  void _internal_set_sdkversion(const std::string& value);
  std::string* _internal_mutable_sdkversion();
  public:

  // string extensionInfo = 11;
  void clear_extensioninfo();
  const std::string& extensioninfo() const;
  void set_extensioninfo(const std::string& value);
  void set_extensioninfo(std::string&& value);
  void set_extensioninfo(const char* value);
  void set_extensioninfo(const char* value, size_t size);
  std::string* mutable_extensioninfo();
  std::string* release_extensioninfo();
  void set_allocated_extensioninfo(std::string* extensioninfo);
  private:
  const std::string& _internal_extensioninfo() const;
  void _internal_set_extensioninfo(const std::string& value);
  std::string* _internal_mutable_extensioninfo();
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Basic.AppInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appversion_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appchannel_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sdkversion_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extensioninfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Basic_DeviceInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Basic.DeviceInfo) */ {
 public:
  inline Basic_DeviceInfo() : Basic_DeviceInfo(nullptr) {}
  virtual ~Basic_DeviceInfo();

  Basic_DeviceInfo(const Basic_DeviceInfo& from);
  Basic_DeviceInfo(Basic_DeviceInfo&& from) noexcept
    : Basic_DeviceInfo() {
    *this = ::std::move(from);
  }

  inline Basic_DeviceInfo& operator=(const Basic_DeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Basic_DeviceInfo& operator=(Basic_DeviceInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Basic_DeviceInfo& default_instance();

  static inline const Basic_DeviceInfo* internal_default_instance() {
    return reinterpret_cast<const Basic_DeviceInfo*>(
               &_Basic_DeviceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(Basic_DeviceInfo& a, Basic_DeviceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(Basic_DeviceInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Basic_DeviceInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Basic_DeviceInfo* New() const final {
    return CreateMaybeMessage<Basic_DeviceInfo>(nullptr);
  }

  Basic_DeviceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Basic_DeviceInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Basic_DeviceInfo& from);
  void MergeFrom(const Basic_DeviceInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Basic_DeviceInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Basic.DeviceInfo";
  }
  protected:
  explicit Basic_DeviceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Basic_DeviceInfo_PlatformType PlatformType;
  static constexpr PlatformType kInvalid =
    Basic_DeviceInfo_PlatformType_kInvalid;
  static constexpr PlatformType kAndroid =
    Basic_DeviceInfo_PlatformType_kAndroid;
  static constexpr PlatformType kiOS =
    Basic_DeviceInfo_PlatformType_kiOS;
  static constexpr PlatformType kWindows =
    Basic_DeviceInfo_PlatformType_kWindows;
  static constexpr PlatformType WECHAT_ANDROID =
    Basic_DeviceInfo_PlatformType_WECHAT_ANDROID;
  static constexpr PlatformType WECHAT_IOS =
    Basic_DeviceInfo_PlatformType_WECHAT_IOS;
  static constexpr PlatformType H5 =
    Basic_DeviceInfo_PlatformType_H5;
  static constexpr PlatformType kPlatformNum =
    Basic_DeviceInfo_PlatformType_kPlatformNum;
  static inline bool PlatformType_IsValid(int value) {
    return Basic_DeviceInfo_PlatformType_IsValid(value);
  }
  static constexpr PlatformType PlatformType_MIN =
    Basic_DeviceInfo_PlatformType_PlatformType_MIN;
  static constexpr PlatformType PlatformType_MAX =
    Basic_DeviceInfo_PlatformType_PlatformType_MAX;
  static constexpr int PlatformType_ARRAYSIZE =
    Basic_DeviceInfo_PlatformType_PlatformType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PlatformType_descriptor() {
    return Basic_DeviceInfo_PlatformType_descriptor();
  }
  template<typename T>
  static inline const std::string& PlatformType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PlatformType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PlatformType_Name.");
    return Basic_DeviceInfo_PlatformType_Name(enum_t_value);
  }
  static inline bool PlatformType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PlatformType* value) {
    return Basic_DeviceInfo_PlatformType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kOsVersionFieldNumber = 2,
    kDeviceModelFieldNumber = 3,
    kImeiMd5FieldNumber = 4,
    kDeviceIdFieldNumber = 5,
    kSoftDidFieldNumber = 6,
    kKwaiDidFieldNumber = 7,
    kManufacturerFieldNumber = 8,
    kPlatformTypeFieldNumber = 1,
  };
  // string osVersion = 2;
  void clear_osversion();
  const std::string& osversion() const;
  void set_osversion(const std::string& value);
  void set_osversion(std::string&& value);
  void set_osversion(const char* value);
  void set_osversion(const char* value, size_t size);
  std::string* mutable_osversion();
  std::string* release_osversion();
  void set_allocated_osversion(std::string* osversion);
  private:
  const std::string& _internal_osversion() const;
  void _internal_set_osversion(const std::string& value);
  std::string* _internal_mutable_osversion();
  public:

  // string deviceModel = 3;
  void clear_devicemodel();
  const std::string& devicemodel() const;
  void set_devicemodel(const std::string& value);
  void set_devicemodel(std::string&& value);
  void set_devicemodel(const char* value);
  void set_devicemodel(const char* value, size_t size);
  std::string* mutable_devicemodel();
  std::string* release_devicemodel();
  void set_allocated_devicemodel(std::string* devicemodel);
  private:
  const std::string& _internal_devicemodel() const;
  void _internal_set_devicemodel(const std::string& value);
  std::string* _internal_mutable_devicemodel();
  public:

  // bytes imeiMd5 = 4;
  void clear_imeimd5();
  const std::string& imeimd5() const;
  void set_imeimd5(const std::string& value);
  void set_imeimd5(std::string&& value);
  void set_imeimd5(const char* value);
  void set_imeimd5(const void* value, size_t size);
  std::string* mutable_imeimd5();
  std::string* release_imeimd5();
  void set_allocated_imeimd5(std::string* imeimd5);
  private:
  const std::string& _internal_imeimd5() const;
  void _internal_set_imeimd5(const std::string& value);
  std::string* _internal_mutable_imeimd5();
  public:

  // string deviceId = 5;
  void clear_deviceid();
  const std::string& deviceid() const;
  void set_deviceid(const std::string& value);
  void set_deviceid(std::string&& value);
  void set_deviceid(const char* value);
  void set_deviceid(const char* value, size_t size);
  std::string* mutable_deviceid();
  std::string* release_deviceid();
  void set_allocated_deviceid(std::string* deviceid);
  private:
  const std::string& _internal_deviceid() const;
  void _internal_set_deviceid(const std::string& value);
  std::string* _internal_mutable_deviceid();
  public:

  // string softDid = 6;
  void clear_softdid();
  const std::string& softdid() const;
  void set_softdid(const std::string& value);
  void set_softdid(std::string&& value);
  void set_softdid(const char* value);
  void set_softdid(const char* value, size_t size);
  std::string* mutable_softdid();
  std::string* release_softdid();
  void set_allocated_softdid(std::string* softdid);
  private:
  const std::string& _internal_softdid() const;
  void _internal_set_softdid(const std::string& value);
  std::string* _internal_mutable_softdid();
  public:

  // string kwaiDid = 7;
  void clear_kwaidid();
  const std::string& kwaidid() const;
  void set_kwaidid(const std::string& value);
  void set_kwaidid(std::string&& value);
  void set_kwaidid(const char* value);
  void set_kwaidid(const char* value, size_t size);
  std::string* mutable_kwaidid();
  std::string* release_kwaidid();
  void set_allocated_kwaidid(std::string* kwaidid);
  private:
  const std::string& _internal_kwaidid() const;
  void _internal_set_kwaidid(const std::string& value);
  std::string* _internal_mutable_kwaidid();
  public:

  // string manufacturer = 8;
  void clear_manufacturer();
  const std::string& manufacturer() const;
  void set_manufacturer(const std::string& value);
  void set_manufacturer(std::string&& value);
  void set_manufacturer(const char* value);
  void set_manufacturer(const char* value, size_t size);
  std::string* mutable_manufacturer();
  std::string* release_manufacturer();
  void set_allocated_manufacturer(std::string* manufacturer);
  private:
  const std::string& _internal_manufacturer() const;
  void _internal_set_manufacturer(const std::string& value);
  std::string* _internal_mutable_manufacturer();
  public:

  // .AcFunDanmu.Im.Basic.DeviceInfo.PlatformType platformType = 1;
  void clear_platformtype();
  ::AcFunDanmu::Im::Basic_DeviceInfo_PlatformType platformtype() const;
  void set_platformtype(::AcFunDanmu::Im::Basic_DeviceInfo_PlatformType value);
  private:
  ::AcFunDanmu::Im::Basic_DeviceInfo_PlatformType _internal_platformtype() const;
  void _internal_set_platformtype(::AcFunDanmu::Im::Basic_DeviceInfo_PlatformType value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Basic.DeviceInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr osversion_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr devicemodel_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imeimd5_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr softdid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kwaidid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr manufacturer_;
  int platformtype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Basic_EnvInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Basic.EnvInfo) */ {
 public:
  inline Basic_EnvInfo() : Basic_EnvInfo(nullptr) {}
  virtual ~Basic_EnvInfo();

  Basic_EnvInfo(const Basic_EnvInfo& from);
  Basic_EnvInfo(Basic_EnvInfo&& from) noexcept
    : Basic_EnvInfo() {
    *this = ::std::move(from);
  }

  inline Basic_EnvInfo& operator=(const Basic_EnvInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Basic_EnvInfo& operator=(Basic_EnvInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Basic_EnvInfo& default_instance();

  static inline const Basic_EnvInfo* internal_default_instance() {
    return reinterpret_cast<const Basic_EnvInfo*>(
               &_Basic_EnvInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(Basic_EnvInfo& a, Basic_EnvInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(Basic_EnvInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Basic_EnvInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Basic_EnvInfo* New() const final {
    return CreateMaybeMessage<Basic_EnvInfo>(nullptr);
  }

  Basic_EnvInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Basic_EnvInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Basic_EnvInfo& from);
  void MergeFrom(const Basic_EnvInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Basic_EnvInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Basic.EnvInfo";
  }
  protected:
  explicit Basic_EnvInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Basic_EnvInfo_NetworkType NetworkType;
  static constexpr NetworkType kInvalid =
    Basic_EnvInfo_NetworkType_kInvalid;
  static constexpr NetworkType kWIFI =
    Basic_EnvInfo_NetworkType_kWIFI;
  static constexpr NetworkType kCellular =
    Basic_EnvInfo_NetworkType_kCellular;
  static inline bool NetworkType_IsValid(int value) {
    return Basic_EnvInfo_NetworkType_IsValid(value);
  }
  static constexpr NetworkType NetworkType_MIN =
    Basic_EnvInfo_NetworkType_NetworkType_MIN;
  static constexpr NetworkType NetworkType_MAX =
    Basic_EnvInfo_NetworkType_NetworkType_MAX;
  static constexpr int NetworkType_ARRAYSIZE =
    Basic_EnvInfo_NetworkType_NetworkType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  NetworkType_descriptor() {
    return Basic_EnvInfo_NetworkType_descriptor();
  }
  template<typename T>
  static inline const std::string& NetworkType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, NetworkType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function NetworkType_Name.");
    return Basic_EnvInfo_NetworkType_Name(enum_t_value);
  }
  static inline bool NetworkType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      NetworkType* value) {
    return Basic_EnvInfo_NetworkType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAppNameFieldNumber = 2,
    kNetworkTypeFieldNumber = 1,
  };
  // bytes appName = 2;
  void clear_appname();
  const std::string& appname() const;
  void set_appname(const std::string& value);
  void set_appname(std::string&& value);
  void set_appname(const char* value);
  void set_appname(const void* value, size_t size);
  std::string* mutable_appname();
  std::string* release_appname();
  void set_allocated_appname(std::string* appname);
  private:
  const std::string& _internal_appname() const;
  void _internal_set_appname(const std::string& value);
  std::string* _internal_mutable_appname();
  public:

  // .AcFunDanmu.Im.Basic.EnvInfo.NetworkType networkType = 1;
  void clear_networktype();
  ::AcFunDanmu::Im::Basic_EnvInfo_NetworkType networktype() const;
  void set_networktype(::AcFunDanmu::Im::Basic_EnvInfo_NetworkType value);
  private:
  ::AcFunDanmu::Im::Basic_EnvInfo_NetworkType _internal_networktype() const;
  void _internal_set_networktype(::AcFunDanmu::Im::Basic_EnvInfo_NetworkType value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Basic.EnvInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appname_;
  int networktype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Basic_RequestBasicInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Basic.RequestBasicInfo) */ {
 public:
  inline Basic_RequestBasicInfo() : Basic_RequestBasicInfo(nullptr) {}
  virtual ~Basic_RequestBasicInfo();

  Basic_RequestBasicInfo(const Basic_RequestBasicInfo& from);
  Basic_RequestBasicInfo(Basic_RequestBasicInfo&& from) noexcept
    : Basic_RequestBasicInfo() {
    *this = ::std::move(from);
  }

  inline Basic_RequestBasicInfo& operator=(const Basic_RequestBasicInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Basic_RequestBasicInfo& operator=(Basic_RequestBasicInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Basic_RequestBasicInfo& default_instance();

  static inline const Basic_RequestBasicInfo* internal_default_instance() {
    return reinterpret_cast<const Basic_RequestBasicInfo*>(
               &_Basic_RequestBasicInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(Basic_RequestBasicInfo& a, Basic_RequestBasicInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(Basic_RequestBasicInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Basic_RequestBasicInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Basic_RequestBasicInfo* New() const final {
    return CreateMaybeMessage<Basic_RequestBasicInfo>(nullptr);
  }

  Basic_RequestBasicInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Basic_RequestBasicInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Basic_RequestBasicInfo& from);
  void MergeFrom(const Basic_RequestBasicInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Basic_RequestBasicInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Basic.RequestBasicInfo";
  }
  protected:
  explicit Basic_RequestBasicInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 2,
    kClientIpFieldNumber = 3,
    kAppVersionFieldNumber = 4,
    kChannelFieldNumber = 5,
    kLocationFieldNumber = 10,
    kAppInfoFieldNumber = 6,
    kDeviceInfoFieldNumber = 7,
    kEnvInfoFieldNumber = 8,
    kClientTypeFieldNumber = 1,
    kClientPortFieldNumber = 9,
  };
  // string deviceId = 2;
  void clear_deviceid();
  const std::string& deviceid() const;
  void set_deviceid(const std::string& value);
  void set_deviceid(std::string&& value);
  void set_deviceid(const char* value);
  void set_deviceid(const char* value, size_t size);
  std::string* mutable_deviceid();
  std::string* release_deviceid();
  void set_allocated_deviceid(std::string* deviceid);
  private:
  const std::string& _internal_deviceid() const;
  void _internal_set_deviceid(const std::string& value);
  std::string* _internal_mutable_deviceid();
  public:

  // string clientIp = 3;
  void clear_clientip();
  const std::string& clientip() const;
  void set_clientip(const std::string& value);
  void set_clientip(std::string&& value);
  void set_clientip(const char* value);
  void set_clientip(const char* value, size_t size);
  std::string* mutable_clientip();
  std::string* release_clientip();
  void set_allocated_clientip(std::string* clientip);
  private:
  const std::string& _internal_clientip() const;
  void _internal_set_clientip(const std::string& value);
  std::string* _internal_mutable_clientip();
  public:

  // string appVersion = 4;
  void clear_appversion();
  const std::string& appversion() const;
  void set_appversion(const std::string& value);
  void set_appversion(std::string&& value);
  void set_appversion(const char* value);
  void set_appversion(const char* value, size_t size);
  std::string* mutable_appversion();
  std::string* release_appversion();
  void set_allocated_appversion(std::string* appversion);
  private:
  const std::string& _internal_appversion() const;
  void _internal_set_appversion(const std::string& value);
  std::string* _internal_mutable_appversion();
  public:

  // string channel = 5;
  void clear_channel();
  const std::string& channel() const;
  void set_channel(const std::string& value);
  void set_channel(std::string&& value);
  void set_channel(const char* value);
  void set_channel(const char* value, size_t size);
  std::string* mutable_channel();
  std::string* release_channel();
  void set_allocated_channel(std::string* channel);
  private:
  const std::string& _internal_channel() const;
  void _internal_set_channel(const std::string& value);
  std::string* _internal_mutable_channel();
  public:

  // string location = 10;
  void clear_location();
  const std::string& location() const;
  void set_location(const std::string& value);
  void set_location(std::string&& value);
  void set_location(const char* value);
  void set_location(const char* value, size_t size);
  std::string* mutable_location();
  std::string* release_location();
  void set_allocated_location(std::string* location);
  private:
  const std::string& _internal_location() const;
  void _internal_set_location(const std::string& value);
  std::string* _internal_mutable_location();
  public:

  // .AcFunDanmu.Im.Basic.AppInfo appInfo = 6;
  bool has_appinfo() const;
  private:
  bool _internal_has_appinfo() const;
  public:
  void clear_appinfo();
  const ::AcFunDanmu::Im::Basic_AppInfo& appinfo() const;
  ::AcFunDanmu::Im::Basic_AppInfo* release_appinfo();
  ::AcFunDanmu::Im::Basic_AppInfo* mutable_appinfo();
  void set_allocated_appinfo(::AcFunDanmu::Im::Basic_AppInfo* appinfo);
  private:
  const ::AcFunDanmu::Im::Basic_AppInfo& _internal_appinfo() const;
  ::AcFunDanmu::Im::Basic_AppInfo* _internal_mutable_appinfo();
  public:
  void unsafe_arena_set_allocated_appinfo(
      ::AcFunDanmu::Im::Basic_AppInfo* appinfo);
  ::AcFunDanmu::Im::Basic_AppInfo* unsafe_arena_release_appinfo();

  // .AcFunDanmu.Im.Basic.DeviceInfo deviceInfo = 7;
  bool has_deviceinfo() const;
  private:
  bool _internal_has_deviceinfo() const;
  public:
  void clear_deviceinfo();
  const ::AcFunDanmu::Im::Basic_DeviceInfo& deviceinfo() const;
  ::AcFunDanmu::Im::Basic_DeviceInfo* release_deviceinfo();
  ::AcFunDanmu::Im::Basic_DeviceInfo* mutable_deviceinfo();
  void set_allocated_deviceinfo(::AcFunDanmu::Im::Basic_DeviceInfo* deviceinfo);
  private:
  const ::AcFunDanmu::Im::Basic_DeviceInfo& _internal_deviceinfo() const;
  ::AcFunDanmu::Im::Basic_DeviceInfo* _internal_mutable_deviceinfo();
  public:
  void unsafe_arena_set_allocated_deviceinfo(
      ::AcFunDanmu::Im::Basic_DeviceInfo* deviceinfo);
  ::AcFunDanmu::Im::Basic_DeviceInfo* unsafe_arena_release_deviceinfo();

  // .AcFunDanmu.Im.Basic.EnvInfo envInfo = 8;
  bool has_envinfo() const;
  private:
  bool _internal_has_envinfo() const;
  public:
  void clear_envinfo();
  const ::AcFunDanmu::Im::Basic_EnvInfo& envinfo() const;
  ::AcFunDanmu::Im::Basic_EnvInfo* release_envinfo();
  ::AcFunDanmu::Im::Basic_EnvInfo* mutable_envinfo();
  void set_allocated_envinfo(::AcFunDanmu::Im::Basic_EnvInfo* envinfo);
  private:
  const ::AcFunDanmu::Im::Basic_EnvInfo& _internal_envinfo() const;
  ::AcFunDanmu::Im::Basic_EnvInfo* _internal_mutable_envinfo();
  public:
  void unsafe_arena_set_allocated_envinfo(
      ::AcFunDanmu::Im::Basic_EnvInfo* envinfo);
  ::AcFunDanmu::Im::Basic_EnvInfo* unsafe_arena_release_envinfo();

  // .AcFunDanmu.Im.Basic.DeviceInfo.PlatformType clientType = 1;
  void clear_clienttype();
  ::AcFunDanmu::Im::Basic_DeviceInfo_PlatformType clienttype() const;
  void set_clienttype(::AcFunDanmu::Im::Basic_DeviceInfo_PlatformType value);
  private:
  ::AcFunDanmu::Im::Basic_DeviceInfo_PlatformType _internal_clienttype() const;
  void _internal_set_clienttype(::AcFunDanmu::Im::Basic_DeviceInfo_PlatformType value);
  public:

  // int32 clientPort = 9;
  void clear_clientport();
  ::PROTOBUF_NAMESPACE_ID::int32 clientport() const;
  void set_clientport(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_clientport() const;
  void _internal_set_clientport(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Basic.RequestBasicInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appversion_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
  ::AcFunDanmu::Im::Basic_AppInfo* appinfo_;
  ::AcFunDanmu::Im::Basic_DeviceInfo* deviceinfo_;
  ::AcFunDanmu::Im::Basic_EnvInfo* envinfo_;
  int clienttype_;
  ::PROTOBUF_NAMESPACE_ID::int32 clientport_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Basic_SyncCookie PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Basic.SyncCookie) */ {
 public:
  inline Basic_SyncCookie() : Basic_SyncCookie(nullptr) {}
  virtual ~Basic_SyncCookie();

  Basic_SyncCookie(const Basic_SyncCookie& from);
  Basic_SyncCookie(Basic_SyncCookie&& from) noexcept
    : Basic_SyncCookie() {
    *this = ::std::move(from);
  }

  inline Basic_SyncCookie& operator=(const Basic_SyncCookie& from) {
    CopyFrom(from);
    return *this;
  }
  inline Basic_SyncCookie& operator=(Basic_SyncCookie&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Basic_SyncCookie& default_instance();

  static inline const Basic_SyncCookie* internal_default_instance() {
    return reinterpret_cast<const Basic_SyncCookie*>(
               &_Basic_SyncCookie_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(Basic_SyncCookie& a, Basic_SyncCookie& b) {
    a.Swap(&b);
  }
  inline void Swap(Basic_SyncCookie* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Basic_SyncCookie* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Basic_SyncCookie* New() const final {
    return CreateMaybeMessage<Basic_SyncCookie>(nullptr);
  }

  Basic_SyncCookie* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Basic_SyncCookie>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Basic_SyncCookie& from);
  void MergeFrom(const Basic_SyncCookie& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Basic_SyncCookie* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Basic.SyncCookie";
  }
  protected:
  explicit Basic_SyncCookie(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSyncOffsetFieldNumber = 1,
  };
  // int64 syncOffset = 1;
  void clear_syncoffset();
  ::PROTOBUF_NAMESPACE_ID::int64 syncoffset() const;
  void set_syncoffset(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_syncoffset() const;
  void _internal_set_syncoffset(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Basic.SyncCookie)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 syncoffset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Basic_I18nCopyWriting PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Basic.I18nCopyWriting) */ {
 public:
  inline Basic_I18nCopyWriting() : Basic_I18nCopyWriting(nullptr) {}
  virtual ~Basic_I18nCopyWriting();

  Basic_I18nCopyWriting(const Basic_I18nCopyWriting& from);
  Basic_I18nCopyWriting(Basic_I18nCopyWriting&& from) noexcept
    : Basic_I18nCopyWriting() {
    *this = ::std::move(from);
  }

  inline Basic_I18nCopyWriting& operator=(const Basic_I18nCopyWriting& from) {
    CopyFrom(from);
    return *this;
  }
  inline Basic_I18nCopyWriting& operator=(Basic_I18nCopyWriting&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Basic_I18nCopyWriting& default_instance();

  static inline const Basic_I18nCopyWriting* internal_default_instance() {
    return reinterpret_cast<const Basic_I18nCopyWriting*>(
               &_Basic_I18nCopyWriting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(Basic_I18nCopyWriting& a, Basic_I18nCopyWriting& b) {
    a.Swap(&b);
  }
  inline void Swap(Basic_I18nCopyWriting* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Basic_I18nCopyWriting* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Basic_I18nCopyWriting* New() const final {
    return CreateMaybeMessage<Basic_I18nCopyWriting>(nullptr);
  }

  Basic_I18nCopyWriting* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Basic_I18nCopyWriting>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Basic_I18nCopyWriting& from);
  void MergeFrom(const Basic_I18nCopyWriting& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Basic_I18nCopyWriting* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Basic.I18nCopyWriting";
  }
  protected:
  explicit Basic_I18nCopyWriting(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFormatParamFieldNumber = 2,
    kFormatKeyFieldNumber = 1,
  };
  // repeated string formatParam = 2;
  int formatparam_size() const;
  private:
  int _internal_formatparam_size() const;
  public:
  void clear_formatparam();
  const std::string& formatparam(int index) const;
  std::string* mutable_formatparam(int index);
  void set_formatparam(int index, const std::string& value);
  void set_formatparam(int index, std::string&& value);
  void set_formatparam(int index, const char* value);
  void set_formatparam(int index, const char* value, size_t size);
  std::string* add_formatparam();
  void add_formatparam(const std::string& value);
  void add_formatparam(std::string&& value);
  void add_formatparam(const char* value);
  void add_formatparam(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& formatparam() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_formatparam();
  private:
  const std::string& _internal_formatparam(int index) const;
  std::string* _internal_add_formatparam();
  public:

  // string formatKey = 1;
  void clear_formatkey();
  const std::string& formatkey() const;
  void set_formatkey(const std::string& value);
  void set_formatkey(std::string&& value);
  void set_formatkey(const char* value);
  void set_formatkey(const char* value, size_t size);
  std::string* mutable_formatkey();
  std::string* release_formatkey();
  void set_allocated_formatkey(std::string* formatkey);
  private:
  const std::string& _internal_formatkey() const;
  void _internal_set_formatkey(const std::string& value);
  std::string* _internal_mutable_formatkey();
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Basic.I18nCopyWriting)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> formatparam_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr formatkey_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Basic_SdkOption PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Basic.SdkOption) */ {
 public:
  inline Basic_SdkOption() : Basic_SdkOption(nullptr) {}
  virtual ~Basic_SdkOption();

  Basic_SdkOption(const Basic_SdkOption& from);
  Basic_SdkOption(Basic_SdkOption&& from) noexcept
    : Basic_SdkOption() {
    *this = ::std::move(from);
  }

  inline Basic_SdkOption& operator=(const Basic_SdkOption& from) {
    CopyFrom(from);
    return *this;
  }
  inline Basic_SdkOption& operator=(Basic_SdkOption&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Basic_SdkOption& default_instance();

  static inline const Basic_SdkOption* internal_default_instance() {
    return reinterpret_cast<const Basic_SdkOption*>(
               &_Basic_SdkOption_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(Basic_SdkOption& a, Basic_SdkOption& b) {
    a.Swap(&b);
  }
  inline void Swap(Basic_SdkOption* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Basic_SdkOption* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Basic_SdkOption* New() const final {
    return CreateMaybeMessage<Basic_SdkOption>(nullptr);
  }

  Basic_SdkOption* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Basic_SdkOption>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Basic_SdkOption& from);
  void MergeFrom(const Basic_SdkOption& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Basic_SdkOption* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Basic.SdkOption";
  }
  protected:
  explicit Basic_SdkOption(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReportSecurityFieldNumber = 2,
    kReportIntervalSecondsFieldNumber = 1,
    kLz4CompressionThresholdBytesFieldNumber = 3,
  };
  // string reportSecurity = 2;
  void clear_reportsecurity();
  const std::string& reportsecurity() const;
  void set_reportsecurity(const std::string& value);
  void set_reportsecurity(std::string&& value);
  void set_reportsecurity(const char* value);
  void set_reportsecurity(const char* value, size_t size);
  std::string* mutable_reportsecurity();
  std::string* release_reportsecurity();
  void set_allocated_reportsecurity(std::string* reportsecurity);
  private:
  const std::string& _internal_reportsecurity() const;
  void _internal_set_reportsecurity(const std::string& value);
  std::string* _internal_mutable_reportsecurity();
  public:

  // int32 reportIntervalSeconds = 1;
  void clear_reportintervalseconds();
  ::PROTOBUF_NAMESPACE_ID::int32 reportintervalseconds() const;
  void set_reportintervalseconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reportintervalseconds() const;
  void _internal_set_reportintervalseconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 lz4CompressionThresholdBytes = 3;
  void clear_lz4compressionthresholdbytes();
  ::PROTOBUF_NAMESPACE_ID::int32 lz4compressionthresholdbytes() const;
  void set_lz4compressionthresholdbytes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lz4compressionthresholdbytes() const;
  void _internal_set_lz4compressionthresholdbytes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Basic.SdkOption)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reportsecurity_;
  ::PROTOBUF_NAMESPACE_ID::int32 reportintervalseconds_;
  ::PROTOBUF_NAMESPACE_ID::int32 lz4compressionthresholdbytes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Basic_LocaleMessage_ErrorMessageEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Basic_LocaleMessage_ErrorMessageEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Basic_LocaleMessage_ErrorMessageEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Basic_LocaleMessage_ErrorMessageEntry_DoNotUse();
  explicit Basic_LocaleMessage_ErrorMessageEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Basic_LocaleMessage_ErrorMessageEntry_DoNotUse& other);
  static const Basic_LocaleMessage_ErrorMessageEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Basic_LocaleMessage_ErrorMessageEntry_DoNotUse*>(&_Basic_LocaleMessage_ErrorMessageEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "AcFunDanmu.Im.Basic.LocaleMessage.ErrorMessageEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[25];
  }

  public:
};

// -------------------------------------------------------------------

class Basic_LocaleMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Basic.LocaleMessage) */ {
 public:
  inline Basic_LocaleMessage() : Basic_LocaleMessage(nullptr) {}
  virtual ~Basic_LocaleMessage();

  Basic_LocaleMessage(const Basic_LocaleMessage& from);
  Basic_LocaleMessage(Basic_LocaleMessage&& from) noexcept
    : Basic_LocaleMessage() {
    *this = ::std::move(from);
  }

  inline Basic_LocaleMessage& operator=(const Basic_LocaleMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline Basic_LocaleMessage& operator=(Basic_LocaleMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Basic_LocaleMessage& default_instance();

  static inline const Basic_LocaleMessage* internal_default_instance() {
    return reinterpret_cast<const Basic_LocaleMessage*>(
               &_Basic_LocaleMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(Basic_LocaleMessage& a, Basic_LocaleMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(Basic_LocaleMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Basic_LocaleMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Basic_LocaleMessage* New() const final {
    return CreateMaybeMessage<Basic_LocaleMessage>(nullptr);
  }

  Basic_LocaleMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Basic_LocaleMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Basic_LocaleMessage& from);
  void MergeFrom(const Basic_LocaleMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Basic_LocaleMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Basic.LocaleMessage";
  }
  protected:
  explicit Basic_LocaleMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kErrorMessageFieldNumber = 2,
    kLocaleFieldNumber = 1,
  };
  // map<int32, string> errorMessage = 2;
  int errormessage_size() const;
  private:
  int _internal_errormessage_size() const;
  public:
  void clear_errormessage();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
      _internal_errormessage() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
      _internal_mutable_errormessage();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
      errormessage() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
      mutable_errormessage();

  // string locale = 1;
  void clear_locale();
  const std::string& locale() const;
  void set_locale(const std::string& value);
  void set_locale(std::string&& value);
  void set_locale(const char* value);
  void set_locale(const char* value, size_t size);
  std::string* mutable_locale();
  std::string* release_locale();
  void set_allocated_locale(std::string* locale);
  private:
  const std::string& _internal_locale() const;
  void _internal_set_locale(const std::string& value);
  std::string* _internal_mutable_locale();
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Basic.LocaleMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Basic_LocaleMessage_ErrorMessageEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> errormessage_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr locale_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Basic_ErrorMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Basic.ErrorMessage) */ {
 public:
  inline Basic_ErrorMessage() : Basic_ErrorMessage(nullptr) {}
  virtual ~Basic_ErrorMessage();

  Basic_ErrorMessage(const Basic_ErrorMessage& from);
  Basic_ErrorMessage(Basic_ErrorMessage&& from) noexcept
    : Basic_ErrorMessage() {
    *this = ::std::move(from);
  }

  inline Basic_ErrorMessage& operator=(const Basic_ErrorMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline Basic_ErrorMessage& operator=(Basic_ErrorMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Basic_ErrorMessage& default_instance();

  static inline const Basic_ErrorMessage* internal_default_instance() {
    return reinterpret_cast<const Basic_ErrorMessage*>(
               &_Basic_ErrorMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(Basic_ErrorMessage& a, Basic_ErrorMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(Basic_ErrorMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Basic_ErrorMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Basic_ErrorMessage* New() const final {
    return CreateMaybeMessage<Basic_ErrorMessage>(nullptr);
  }

  Basic_ErrorMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Basic_ErrorMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Basic_ErrorMessage& from);
  void MergeFrom(const Basic_ErrorMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Basic_ErrorMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Basic.ErrorMessage";
  }
  protected:
  explicit Basic_ErrorMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocaleMessagesFieldNumber = 1,
  };
  // repeated .AcFunDanmu.Im.Basic.LocaleMessage localeMessages = 1;
  int localemessages_size() const;
  private:
  int _internal_localemessages_size() const;
  public:
  void clear_localemessages();
  ::AcFunDanmu::Im::Basic_LocaleMessage* mutable_localemessages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_LocaleMessage >*
      mutable_localemessages();
  private:
  const ::AcFunDanmu::Im::Basic_LocaleMessage& _internal_localemessages(int index) const;
  ::AcFunDanmu::Im::Basic_LocaleMessage* _internal_add_localemessages();
  public:
  const ::AcFunDanmu::Im::Basic_LocaleMessage& localemessages(int index) const;
  ::AcFunDanmu::Im::Basic_LocaleMessage* add_localemessages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_LocaleMessage >&
      localemessages() const;

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Basic.ErrorMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_LocaleMessage > localemessages_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Basic PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Basic) */ {
 public:
  inline Basic() : Basic(nullptr) {}
  virtual ~Basic();

  Basic(const Basic& from);
  Basic(Basic&& from) noexcept
    : Basic() {
    *this = ::std::move(from);
  }

  inline Basic& operator=(const Basic& from) {
    CopyFrom(from);
    return *this;
  }
  inline Basic& operator=(Basic&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Basic& default_instance();

  static inline const Basic* internal_default_instance() {
    return reinterpret_cast<const Basic*>(
               &_Basic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(Basic& a, Basic& b) {
    a.Swap(&b);
  }
  inline void Swap(Basic* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Basic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Basic* New() const final {
    return CreateMaybeMessage<Basic>(nullptr);
  }

  Basic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Basic>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Basic& from);
  void MergeFrom(const Basic& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Basic* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Basic";
  }
  protected:
  explicit Basic(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Basic_PacketHeader PacketHeader;
  typedef Basic_User User;
  typedef Basic_UserInstance UserInstance;
  typedef Basic_UpstreamPayload UpstreamPayload;
  typedef Basic_DownstreamPayload DownstreamPayload;
  typedef Basic_PingRequest PingRequest;
  typedef Basic_PingResponse PingResponse;
  typedef Basic_RegisterRequest RegisterRequest;
  typedef Basic_RegisterResponse RegisterResponse;
  typedef Basic_AccessPointsConfig AccessPointsConfig;
  typedef Basic_UnregisterRequest UnregisterRequest;
  typedef Basic_UnregisterResponse UnregisterResponse;
  typedef Basic_KeepAliveRequest KeepAliveRequest;
  typedef Basic_KeepAliveResponse KeepAliveResponse;
  typedef Basic_AccessPoint AccessPoint;
  typedef Basic_TokenInfo TokenInfo;
  typedef Basic_PushServiceToken PushServiceToken;
  typedef Basic_SettingInfo SettingInfo;
  typedef Basic_AppInfo AppInfo;
  typedef Basic_DeviceInfo DeviceInfo;
  typedef Basic_EnvInfo EnvInfo;
  typedef Basic_RequestBasicInfo RequestBasicInfo;
  typedef Basic_SyncCookie SyncCookie;
  typedef Basic_I18nCopyWriting I18nCopyWriting;
  typedef Basic_SdkOption SdkOption;
  typedef Basic_LocaleMessage LocaleMessage;
  typedef Basic_ErrorMessage ErrorMessage;

  typedef Basic_SharePlatform SharePlatform;
  static constexpr SharePlatform kSharePlatformInvalid =
    Basic_SharePlatform_kSharePlatformInvalid;
  static constexpr SharePlatform kSharePlatformWechat =
    Basic_SharePlatform_kSharePlatformWechat;
  static constexpr SharePlatform kSharePlatformWechatMoments =
    Basic_SharePlatform_kSharePlatformWechatMoments;
  static constexpr SharePlatform kSharePlatformQQ =
    Basic_SharePlatform_kSharePlatformQQ;
  static constexpr SharePlatform kSharePlatformQzone =
    Basic_SharePlatform_kSharePlatformQzone;
  static constexpr SharePlatform kSharePlatformWeibo =
    Basic_SharePlatform_kSharePlatformWeibo;
  static constexpr SharePlatform kSharePlatformKuaishou =
    Basic_SharePlatform_kSharePlatformKuaishou;
  static constexpr SharePlatform kSharePlatformFacebook =
    Basic_SharePlatform_kSharePlatformFacebook;
  static constexpr SharePlatform kSharePlatformTwitter =
    Basic_SharePlatform_kSharePlatformTwitter;
  static constexpr SharePlatform kSharePlatformGoogle =
    Basic_SharePlatform_kSharePlatformGoogle;
  static constexpr SharePlatform kSharePlatformKakao =
    Basic_SharePlatform_kSharePlatformKakao;
  static constexpr SharePlatform kSharePlatformZalo =
    Basic_SharePlatform_kSharePlatformZalo;
  static inline bool SharePlatform_IsValid(int value) {
    return Basic_SharePlatform_IsValid(value);
  }
  static constexpr SharePlatform SharePlatform_MIN =
    Basic_SharePlatform_SharePlatform_MIN;
  static constexpr SharePlatform SharePlatform_MAX =
    Basic_SharePlatform_SharePlatform_MAX;
  static constexpr int SharePlatform_ARRAYSIZE =
    Basic_SharePlatform_SharePlatform_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SharePlatform_descriptor() {
    return Basic_SharePlatform_descriptor();
  }
  template<typename T>
  static inline const std::string& SharePlatform_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SharePlatform>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SharePlatform_Name.");
    return Basic_SharePlatform_Name(enum_t_value);
  }
  static inline bool SharePlatform_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SharePlatform* value) {
    return Basic_SharePlatform_Parse(name, value);
  }

  typedef Basic_ErrorCode ErrorCode;
  static constexpr ErrorCode SUCC =
    Basic_ErrorCode_SUCC;
  static constexpr ErrorCode BASIC_MIN =
    Basic_ErrorCode_BASIC_MIN;
  static constexpr ErrorCode INTERNEL_ERROR =
    Basic_ErrorCode_INTERNEL_ERROR;
  static constexpr ErrorCode SERVICE_UNAVAILABLE =
    Basic_ErrorCode_SERVICE_UNAVAILABLE;
  static constexpr ErrorCode SERVICE_TIMEOUT =
    Basic_ErrorCode_SERVICE_TIMEOUT;
  static constexpr ErrorCode INVALID_TOKEN =
    Basic_ErrorCode_INVALID_TOKEN;
  static constexpr ErrorCode REG_ENCYRPT_WITHOUT_TOKEN =
    Basic_ErrorCode_REG_ENCYRPT_WITHOUT_TOKEN;
  static constexpr ErrorCode PARSE_PB_HDR_FAIL =
    Basic_ErrorCode_PARSE_PB_HDR_FAIL;
  static constexpr ErrorCode PARSE_PB_PLD_FAIL =
    Basic_ErrorCode_PARSE_PB_PLD_FAIL;
  static constexpr ErrorCode PARSE_PB_FAIL =
    Basic_ErrorCode_PARSE_PB_FAIL;
  static constexpr ErrorCode DECODED_LEN_FAIL =
    Basic_ErrorCode_DECODED_LEN_FAIL;
  static constexpr ErrorCode INVALID_KEY =
    Basic_ErrorCode_INVALID_KEY;
  static constexpr ErrorCode ENCRYPT_FAIL =
    Basic_ErrorCode_ENCRYPT_FAIL;
  static constexpr ErrorCode DECRYPT_FAIL =
    Basic_ErrorCode_DECRYPT_FAIL;
  static constexpr ErrorCode INVALID_TAG =
    Basic_ErrorCode_INVALID_TAG;
  static constexpr ErrorCode INVALID_VER =
    Basic_ErrorCode_INVALID_VER;
  static constexpr ErrorCode INVALID_COMPRESS_TYPE =
    Basic_ErrorCode_INVALID_COMPRESS_TYPE;
  static constexpr ErrorCode INVALID_ENCRYPT_TYPE =
    Basic_ErrorCode_INVALID_ENCRYPT_TYPE;
  static constexpr ErrorCode NOT_REGISTER =
    Basic_ErrorCode_NOT_REGISTER;
  static constexpr ErrorCode USER_NOT_ONLINE =
    Basic_ErrorCode_USER_NOT_ONLINE;
  static constexpr ErrorCode INVALID_COMMAND =
    Basic_ErrorCode_INVALID_COMMAND;
  static constexpr ErrorCode PUSH_UNREGISTER_ERROR =
    Basic_ErrorCode_PUSH_UNREGISTER_ERROR;
  static constexpr ErrorCode INVALID_SID =
    Basic_ErrorCode_INVALID_SID;
  static constexpr ErrorCode INVALID_INSTANCE_ID =
    Basic_ErrorCode_INVALID_INSTANCE_ID;
  static constexpr ErrorCode CLIENT_LOCALE_NOT_MATCH =
    Basic_ErrorCode_CLIENT_LOCALE_NOT_MATCH;
  static constexpr ErrorCode INVALID_TOKEN_PASSWORD_CHANGED =
    Basic_ErrorCode_INVALID_TOKEN_PASSWORD_CHANGED;
  static constexpr ErrorCode INVALID_TOKEN_TOKEN_EXPIRED =
    Basic_ErrorCode_INVALID_TOKEN_TOKEN_EXPIRED;
  static constexpr ErrorCode INVALID_TOKEN_TOKEN_VALUE_ERROR =
    Basic_ErrorCode_INVALID_TOKEN_TOKEN_VALUE_ERROR;
  static constexpr ErrorCode INVALID_TOKEN_LOGIN_ON_OTHER_DEVICE =
    Basic_ErrorCode_INVALID_TOKEN_LOGIN_ON_OTHER_DEVICE;
  static constexpr ErrorCode FORCE_RECONNECT =
    Basic_ErrorCode_FORCE_RECONNECT;
  static constexpr ErrorCode CLIENT_TIMEOUT =
    Basic_ErrorCode_CLIENT_TIMEOUT;
  static constexpr ErrorCode INVALID_ARGUMENT =
    Basic_ErrorCode_INVALID_ARGUMENT;
  static constexpr ErrorCode INVALID_FORMAT_TOKEN =
    Basic_ErrorCode_INVALID_FORMAT_TOKEN;
  static constexpr ErrorCode EMPTY_PAYLOAD =
    Basic_ErrorCode_EMPTY_PAYLOAD;
  static constexpr ErrorCode COMPRESS_FAIL =
    Basic_ErrorCode_COMPRESS_FAIL;
  static constexpr ErrorCode DECOMPRESS_FAIL =
    Basic_ErrorCode_DECOMPRESS_FAIL;
  static constexpr ErrorCode OUT_OF_ORDER =
    Basic_ErrorCode_OUT_OF_ORDER;
  static constexpr ErrorCode MESSAGE_MIN =
    Basic_ErrorCode_MESSAGE_MIN;
  static constexpr ErrorCode ILLEGAL_PARAMETER =
    Basic_ErrorCode_ILLEGAL_PARAMETER;
  static constexpr ErrorCode SYSTEM_BUSY =
    Basic_ErrorCode_SYSTEM_BUSY;
  static constexpr ErrorCode ILLEGAL_USER =
    Basic_ErrorCode_ILLEGAL_USER;
  static constexpr ErrorCode PARAMETER_LEN_TOO_LONG =
    Basic_ErrorCode_PARAMETER_LEN_TOO_LONG;
  static constexpr ErrorCode DATABASE_ERROR_MYSQL =
    Basic_ErrorCode_DATABASE_ERROR_MYSQL;
  static constexpr ErrorCode DATABASE_ERROR_HBASE =
    Basic_ErrorCode_DATABASE_ERROR_HBASE;
  static constexpr ErrorCode DATABASE_ERROR_REDIS =
    Basic_ErrorCode_DATABASE_ERROR_REDIS;
  static constexpr ErrorCode USER_REGISTER_LIMIT_IN_ALPHA =
    Basic_ErrorCode_USER_REGISTER_LIMIT_IN_ALPHA;
  static constexpr ErrorCode FLOW_CONTROL =
    Basic_ErrorCode_FLOW_CONTROL;
  static constexpr ErrorCode LOCKED_USER_ACCOUNT_NEED_UPDATE_VERSION =
    Basic_ErrorCode_LOCKED_USER_ACCOUNT_NEED_UPDATE_VERSION;
  static constexpr ErrorCode USER_NOT_REGISTER =
    Basic_ErrorCode_USER_NOT_REGISTER;
  static constexpr ErrorCode USER_NOT_FOUND =
    Basic_ErrorCode_USER_NOT_FOUND;
  static constexpr ErrorCode FRIEND_ADD_NEED_VERIFY =
    Basic_ErrorCode_FRIEND_ADD_NEED_VERIFY;
  static constexpr ErrorCode NO_FRIEND_REQUEST =
    Basic_ErrorCode_NO_FRIEND_REQUEST;
  static constexpr ErrorCode TOO_MANY_FRIENDS =
    Basic_ErrorCode_TOO_MANY_FRIENDS;
  static constexpr ErrorCode FRIEND_REQUEST_TOO_FREQUENTLY =
    Basic_ErrorCode_FRIEND_REQUEST_TOO_FREQUENTLY;
  static constexpr ErrorCode CHAT_NEED_TO_BE_FRIEND =
    Basic_ErrorCode_CHAT_NEED_TO_BE_FRIEND;
  static constexpr ErrorCode ADD_FRIEND_BLOCKED =
    Basic_ErrorCode_ADD_FRIEND_BLOCKED;
  static constexpr ErrorCode CANNOT_ADD_FRIEND_TO_SELF =
    Basic_ErrorCode_CANNOT_ADD_FRIEND_TO_SELF;
  static constexpr ErrorCode CANNOT_FOLLOW_SELF =
    Basic_ErrorCode_CANNOT_FOLLOW_SELF;
  static constexpr ErrorCode ADD_FOLLOW_BLOCKED =
    Basic_ErrorCode_ADD_FOLLOW_BLOCKED;
  static constexpr ErrorCode TARGET_FRIEND_TOO_MANY =
    Basic_ErrorCode_TARGET_FRIEND_TOO_MANY;
  static constexpr ErrorCode TOO_MANY_IDOLS =
    Basic_ErrorCode_TOO_MANY_IDOLS;
  static constexpr ErrorCode FRIEND_FOLLOW_OVER_LIMIT =
    Basic_ErrorCode_FRIEND_FOLLOW_OVER_LIMIT;
  static constexpr ErrorCode FRIEND_FOLLOW_SPAM =
    Basic_ErrorCode_FRIEND_FOLLOW_SPAM;
  static constexpr ErrorCode CLIENT_CONFIG_READ_ERROR =
    Basic_ErrorCode_CLIENT_CONFIG_READ_ERROR;
  static constexpr ErrorCode CLIENT_CONFIG_NOT_EXISTS_ERROR =
    Basic_ErrorCode_CLIENT_CONFIG_NOT_EXISTS_ERROR;
  static constexpr ErrorCode CONTENT_HIT_SENSITIVE_WORDS =
    Basic_ErrorCode_CONTENT_HIT_SENSITIVE_WORDS;
  static constexpr ErrorCode MORE_THAN_MAX_LENGTH =
    Basic_ErrorCode_MORE_THAN_MAX_LENGTH;
  static constexpr ErrorCode MSG_TEXT_MAX_LENGTH =
    Basic_ErrorCode_MSG_TEXT_MAX_LENGTH;
  static constexpr ErrorCode MSG_CANCEL_OVERDUE =
    Basic_ErrorCode_MSG_CANCEL_OVERDUE;
  static constexpr ErrorCode CANNOT_RECALL_NON_SELF_MSG =
    Basic_ErrorCode_CANNOT_RECALL_NON_SELF_MSG;
  static constexpr ErrorCode RECALL_NOT_EXIST_MSG =
    Basic_ErrorCode_RECALL_NOT_EXIST_MSG;
  static constexpr ErrorCode REF_MSG_NESTING_DEPTH_REACH_LIMIT =
    Basic_ErrorCode_REF_MSG_NESTING_DEPTH_REACH_LIMIT;
  static constexpr ErrorCode SEND_KS_MESSAGE_NOT_MATCH_RULE =
    Basic_ErrorCode_SEND_KS_MESSAGE_NOT_MATCH_RULE;
  static constexpr ErrorCode FIND_USER_FREQUENCY =
    Basic_ErrorCode_FIND_USER_FREQUENCY;
  static constexpr ErrorCode KUAISHOU_FANS_TOKEN_INVALID =
    Basic_ErrorCode_KUAISHOU_FANS_TOKEN_INVALID;
  static constexpr ErrorCode KUAISHOU_AUTHORIZE_FAILED =
    Basic_ErrorCode_KUAISHOU_AUTHORIZE_FAILED;
  static constexpr ErrorCode ADD_FRIEND_TOO_FREQUENTLY =
    Basic_ErrorCode_ADD_FRIEND_TOO_FREQUENTLY;
  static constexpr ErrorCode BLACK_LIST_REACHED_LIMIT =
    Basic_ErrorCode_BLACK_LIST_REACHED_LIMIT;
  static constexpr ErrorCode GAME_ROOM_IS_RELEASED =
    Basic_ErrorCode_GAME_ROOM_IS_RELEASED;
  static constexpr ErrorCode CREATE_GAME_ROOM_FAIL =
    Basic_ErrorCode_CREATE_GAME_ROOM_FAIL;
  static constexpr ErrorCode GAME_SERVER_ERROR =
    Basic_ErrorCode_GAME_SERVER_ERROR;
  static constexpr ErrorCode GAME_ROOM_IS_EXPIRED =
    Basic_ErrorCode_GAME_ROOM_IS_EXPIRED;
  static constexpr ErrorCode ALREADY_IN_GAME =
    Basic_ErrorCode_ALREADY_IN_GAME;
  static constexpr ErrorCode TARGET_ALREADY_IN_GAME =
    Basic_ErrorCode_TARGET_ALREADY_IN_GAME;
  static constexpr ErrorCode GAME_NOT_EXIST =
    Basic_ErrorCode_GAME_NOT_EXIST;
  static constexpr ErrorCode GAME_ACCEPT_BUT_ALREAD_IN_GAME =
    Basic_ErrorCode_GAME_ACCEPT_BUT_ALREAD_IN_GAME;
  static constexpr ErrorCode GAME_ACCEPT_BUT_TARGET_ALREADY_IN_GAME =
    Basic_ErrorCode_GAME_ACCEPT_BUT_TARGET_ALREADY_IN_GAME;
  static constexpr ErrorCode GAME_ACCEPT_BUT_APP_VERSION_TOO_LOW =
    Basic_ErrorCode_GAME_ACCEPT_BUT_APP_VERSION_TOO_LOW;
  static constexpr ErrorCode GAME_USER_MATCH_FAIL =
    Basic_ErrorCode_GAME_USER_MATCH_FAIL;
  static constexpr ErrorCode USER_FREQUENT_LEAVE_GAME_BE_PUNISHED =
    Basic_ErrorCode_USER_FREQUENT_LEAVE_GAME_BE_PUNISHED;
  static constexpr ErrorCode RELATIONSHIP_INVALID_CANNOT_SEND_GAME_INVITE =
    Basic_ErrorCode_RELATIONSHIP_INVALID_CANNOT_SEND_GAME_INVITE;
  static constexpr ErrorCode GAME_USER_MATCH_SYNC_NO_MATCH =
    Basic_ErrorCode_GAME_USER_MATCH_SYNC_NO_MATCH;
  static constexpr ErrorCode FORBID_MATCH =
    Basic_ErrorCode_FORBID_MATCH;
  static constexpr ErrorCode GAME_RESOURCE_NO_EXIST =
    Basic_ErrorCode_GAME_RESOURCE_NO_EXIST;
  static constexpr ErrorCode GAME_MATCH_SYNC_NO_MATCH =
    Basic_ErrorCode_GAME_MATCH_SYNC_NO_MATCH;
  static constexpr ErrorCode GAME_MATCH_SYNC_ALREADY_FINISH =
    Basic_ErrorCode_GAME_MATCH_SYNC_ALREADY_FINISH;
  static constexpr ErrorCode INVITATION_SEND_REACH_LIMITATION =
    Basic_ErrorCode_INVITATION_SEND_REACH_LIMITATION;
  static constexpr ErrorCode GAME_MATCH_TEAM_NOT_EXIST =
    Basic_ErrorCode_GAME_MATCH_TEAM_NOT_EXIST;
  static constexpr ErrorCode GAME_MATCH_TEAM_NO_TARGET =
    Basic_ErrorCode_GAME_MATCH_TEAM_NO_TARGET;
  static constexpr ErrorCode GAME_MATCH_TEAM_OTHER_ALREADY_JOIN_SUCC =
    Basic_ErrorCode_GAME_MATCH_TEAM_OTHER_ALREADY_JOIN_SUCC;
  static constexpr ErrorCode FORZEN_USER =
    Basic_ErrorCode_FORZEN_USER;
  static constexpr ErrorCode FORZEN_USER_PROFILE =
    Basic_ErrorCode_FORZEN_USER_PROFILE;
  static constexpr ErrorCode FORZEN_USER_ACCOUNT =
    Basic_ErrorCode_FORZEN_USER_ACCOUNT;
  static constexpr ErrorCode TEMP_FORZEN_USER_ACCOUNT =
    Basic_ErrorCode_TEMP_FORZEN_USER_ACCOUNT;
  static constexpr ErrorCode LOCKED_USER_ACCOUNT =
    Basic_ErrorCode_LOCKED_USER_ACCOUNT;
  static constexpr ErrorCode UNFREEZE_USER_ACCOUNT_APPLY_IN_PROCESS =
    Basic_ErrorCode_UNFREEZE_USER_ACCOUNT_APPLY_IN_PROCESS;
  static constexpr ErrorCode GAME_MATH_TEAM_DISBANDED =
    Basic_ErrorCode_GAME_MATH_TEAM_DISBANDED;
  static constexpr ErrorCode USER_ACCOUNT_IS_NOT_FORZEN =
    Basic_ErrorCode_USER_ACCOUNT_IS_NOT_FORZEN;
  static constexpr ErrorCode CAPTCHA_VERIFY_FAILED =
    Basic_ErrorCode_CAPTCHA_VERIFY_FAILED;
  static constexpr ErrorCode PROFILE_UPDATE_NOT_PERMIT =
    Basic_ErrorCode_PROFILE_UPDATE_NOT_PERMIT;
  static constexpr ErrorCode GAME_REQUEST_TOO_FREQUENTLY =
    Basic_ErrorCode_GAME_REQUEST_TOO_FREQUENTLY;
  static constexpr ErrorCode WECHAT_GAME_INVITE_CANCEL =
    Basic_ErrorCode_WECHAT_GAME_INVITE_CANCEL;
  static constexpr ErrorCode WECHAT_GAME_INVITE_ACCEPTED =
    Basic_ErrorCode_WECHAT_GAME_INVITE_ACCEPTED;
  static constexpr ErrorCode THIRD_PARTY_NOT_BIND =
    Basic_ErrorCode_THIRD_PARTY_NOT_BIND;
  static constexpr ErrorCode THIRD_PARTY_TOKEN_EXPIRE =
    Basic_ErrorCode_THIRD_PARTY_TOKEN_EXPIRE;
  static constexpr ErrorCode THIRD_PARTY_NO_FRIEND_PERMISSION =
    Basic_ErrorCode_THIRD_PARTY_NO_FRIEND_PERMISSION;
  static constexpr ErrorCode GAME_INVITE_INFO_NOT_EXIST =
    Basic_ErrorCode_GAME_INVITE_INFO_NOT_EXIST;
  static constexpr ErrorCode GAME_ACCEPT_IS_INVALID =
    Basic_ErrorCode_GAME_ACCEPT_IS_INVALID;
  static constexpr ErrorCode GAME_ARENA_NOT_EXIST =
    Basic_ErrorCode_GAME_ARENA_NOT_EXIST;
  static constexpr ErrorCode GAME_SHOP_PROPS_BUY_FAIL =
    Basic_ErrorCode_GAME_SHOP_PROPS_BUY_FAIL;
  static constexpr ErrorCode GAME_SHOP_PROPS_USE_FAIL =
    Basic_ErrorCode_GAME_SHOP_PROPS_USE_FAIL;
  static constexpr ErrorCode GAME_SHOP_PROPS_NOT_EXIST =
    Basic_ErrorCode_GAME_SHOP_PROPS_NOT_EXIST;
  static constexpr ErrorCode GAME_SHOP_PROPS_COUNT_UNMATCH =
    Basic_ErrorCode_GAME_SHOP_PROPS_COUNT_UNMATCH;
  static constexpr ErrorCode GAME_SKIN_NOT_EXIST =
    Basic_ErrorCode_GAME_SKIN_NOT_EXIST;
  static constexpr ErrorCode GAME_COIN_SHARE_TAKE_OVER_LIMIT =
    Basic_ErrorCode_GAME_COIN_SHARE_TAKE_OVER_LIMIT;
  static constexpr ErrorCode GAME_COIN_TIMELY_TAKE_IN_CD =
    Basic_ErrorCode_GAME_COIN_TIMELY_TAKE_IN_CD;
  static constexpr ErrorCode GAME_SKIN_IN_LOCKED =
    Basic_ErrorCode_GAME_SKIN_IN_LOCKED;
  static constexpr ErrorCode GAME_SHOP_BALANCE_NOT_ENOUGH =
    Basic_ErrorCode_GAME_SHOP_BALANCE_NOT_ENOUGH;
  static constexpr ErrorCode GAME_SKIN_ALREADY_UNLOCKED =
    Basic_ErrorCode_GAME_SKIN_ALREADY_UNLOCKED;
  static constexpr ErrorCode GAME_SKIN_UPDATE_FAIL =
    Basic_ErrorCode_GAME_SKIN_UPDATE_FAIL;
  static constexpr ErrorCode GAME_SKIN_IS_IN_USED =
    Basic_ErrorCode_GAME_SKIN_IS_IN_USED;
  static constexpr ErrorCode GAME_USER_MATCH_TIMES_LIMIT =
    Basic_ErrorCode_GAME_USER_MATCH_TIMES_LIMIT;
  static constexpr ErrorCode GAME_SKIN_BUY_FAIL =
    Basic_ErrorCode_GAME_SKIN_BUY_FAIL;
  static constexpr ErrorCode GAME_RESULT_VERIFY_NOT_PASS =
    Basic_ErrorCode_GAME_RESULT_VERIFY_NOT_PASS;
  static constexpr ErrorCode USE_RANK_TITLE_FAILED =
    Basic_ErrorCode_USE_RANK_TITLE_FAILED;
  static constexpr ErrorCode USER_LOCATION_FAILD =
    Basic_ErrorCode_USER_LOCATION_FAILD;
  static constexpr ErrorCode GAME_ACHIEVEMENT_NOT_EXIST =
    Basic_ErrorCode_GAME_ACHIEVEMENT_NOT_EXIST;
  static constexpr ErrorCode BALANCE_NOT_ENOUGH =
    Basic_ErrorCode_BALANCE_NOT_ENOUGH;
  static constexpr ErrorCode COIN_USE_FAIL =
    Basic_ErrorCode_COIN_USE_FAIL;
  static constexpr ErrorCode COIN_ADD_FAIL =
    Basic_ErrorCode_COIN_ADD_FAIL;
  static constexpr ErrorCode GAME_LINK_MIC_ROOM_NOT_EXIST =
    Basic_ErrorCode_GAME_LINK_MIC_ROOM_NOT_EXIST;
  static constexpr ErrorCode GAME_LINK_MIC_USER_NOT_IN_ROOM =
    Basic_ErrorCode_GAME_LINK_MIC_USER_NOT_IN_ROOM;
  static constexpr ErrorCode GAME_LINK_MIC_ROOM_UNEXPECTED_MESSAGE =
    Basic_ErrorCode_GAME_LINK_MIC_ROOM_UNEXPECTED_MESSAGE;
  static constexpr ErrorCode GAME_LINK_MIC_USER_ALREADY_IN_ROOM =
    Basic_ErrorCode_GAME_LINK_MIC_USER_ALREADY_IN_ROOM;
  static constexpr ErrorCode CHAT_ROOM_NOT_EXIST =
    Basic_ErrorCode_CHAT_ROOM_NOT_EXIST;
  static constexpr ErrorCode CHAT_ROOM_NOT_MEMBER =
    Basic_ErrorCode_CHAT_ROOM_NOT_MEMBER;
  static constexpr ErrorCode CHAT_ROOM_TARGET_LEAVE =
    Basic_ErrorCode_CHAT_ROOM_TARGET_LEAVE;
  static constexpr ErrorCode CHAT_ROOM_TARGET_LEAVE_2P =
    Basic_ErrorCode_CHAT_ROOM_TARGET_LEAVE_2P;
  static constexpr ErrorCode CHAT_ROOM_FORBID_IMAGE_BETWEEN_STRANGER =
    Basic_ErrorCode_CHAT_ROOM_FORBID_IMAGE_BETWEEN_STRANGER;
  static constexpr ErrorCode CHAT_ROOM_LEAVE_TOO_FREQUENTLY =
    Basic_ErrorCode_CHAT_ROOM_LEAVE_TOO_FREQUENTLY;
  static constexpr ErrorCode SESSION_FORBID_IMAGE_BETWEEN_STRANGER =
    Basic_ErrorCode_SESSION_FORBID_IMAGE_BETWEEN_STRANGER;
  static constexpr ErrorCode SEND_MESSAGE_IS_BANNED =
    Basic_ErrorCode_SEND_MESSAGE_IS_BANNED;
  static constexpr ErrorCode QUIZZES_NOT_EXIST =
    Basic_ErrorCode_QUIZZES_NOT_EXIST;
  static constexpr ErrorCode QUIZZES_ANSWER_TIMEOUT =
    Basic_ErrorCode_QUIZZES_ANSWER_TIMEOUT;
  static constexpr ErrorCode ALREADY_USED_INVITATION_CODE =
    Basic_ErrorCode_ALREADY_USED_INVITATION_CODE;
  static constexpr ErrorCode CANNOT_USE_ONESELF_INVITATION_CODE =
    Basic_ErrorCode_CANNOT_USE_ONESELF_INVITATION_CODE;
  static constexpr ErrorCode INVITATION_CODE_IS_INVALID =
    Basic_ErrorCode_INVITATION_CODE_IS_INVALID;
  static constexpr ErrorCode MULTIPLAYER_GAME_ROOM_NOT_EXIST =
    Basic_ErrorCode_MULTIPLAYER_GAME_ROOM_NOT_EXIST;
  static constexpr ErrorCode MULTIPLAYER_GAME_ROOM_NOT_MEMBER =
    Basic_ErrorCode_MULTIPLAYER_GAME_ROOM_NOT_MEMBER;
  static constexpr ErrorCode MULTIPLAYER_GAME_ROOM_MEMBER_KICKED =
    Basic_ErrorCode_MULTIPLAYER_GAME_ROOM_MEMBER_KICKED;
  static constexpr ErrorCode MULTIPLAYER_GAME_ROOM_LEAVE_FREQUENCY =
    Basic_ErrorCode_MULTIPLAYER_GAME_ROOM_LEAVE_FREQUENCY;
  static constexpr ErrorCode DRAW_GUESS_ROOM_NOT_EXIST =
    Basic_ErrorCode_DRAW_GUESS_ROOM_NOT_EXIST;
  static constexpr ErrorCode GUESS_WORD_NOT_EXIST =
    Basic_ErrorCode_GUESS_WORD_NOT_EXIST;
  static constexpr ErrorCode DRAW_GUESS_ROOM_NOT_MEMBER =
    Basic_ErrorCode_DRAW_GUESS_ROOM_NOT_MEMBER;
  static constexpr ErrorCode NOT_DRAW_USER =
    Basic_ErrorCode_NOT_DRAW_USER;
  static constexpr ErrorCode CANNOT_GUESS_NOW =
    Basic_ErrorCode_CANNOT_GUESS_NOW;
  static constexpr ErrorCode DRAW_USER_CANNOT_GUESS =
    Basic_ErrorCode_DRAW_USER_CANNOT_GUESS;
  static constexpr ErrorCode CANNOT_DRAW_NOW =
    Basic_ErrorCode_CANNOT_DRAW_NOW;
  static constexpr ErrorCode GUESS_WORD_EXCEED_MAX_LENGTH =
    Basic_ErrorCode_GUESS_WORD_EXCEED_MAX_LENGTH;
  static constexpr ErrorCode GUESS_WORD_HIT_SENSITIVE_WORDS =
    Basic_ErrorCode_GUESS_WORD_HIT_SENSITIVE_WORDS;
  static constexpr ErrorCode USER_IN_TRAVEL_FOR_INVITOR =
    Basic_ErrorCode_USER_IN_TRAVEL_FOR_INVITOR;
  static constexpr ErrorCode PEER_IN_TRAVEL =
    Basic_ErrorCode_PEER_IN_TRAVEL;
  static constexpr ErrorCode TRAVEL_FINISHED =
    Basic_ErrorCode_TRAVEL_FINISHED;
  static constexpr ErrorCode TRAVEL_INVITE_INVALID =
    Basic_ErrorCode_TRAVEL_INVITE_INVALID;
  static constexpr ErrorCode TRAVEL_NOT_FRIEND =
    Basic_ErrorCode_TRAVEL_NOT_FRIEND;
  static constexpr ErrorCode TRAVEL_NOT_EXIST =
    Basic_ErrorCode_TRAVEL_NOT_EXIST;
  static constexpr ErrorCode TRAVEL_SELF_FORBID =
    Basic_ErrorCode_TRAVEL_SELF_FORBID;
  static constexpr ErrorCode TRAVEL_SCENARIO_END =
    Basic_ErrorCode_TRAVEL_SCENARIO_END;
  static constexpr ErrorCode USER_IN_TRAVEL_FOR_ACCEPTOR =
    Basic_ErrorCode_USER_IN_TRAVEL_FOR_ACCEPTOR;
  static constexpr ErrorCode TRAVEL_ENTRANCE_CLOSED =
    Basic_ErrorCode_TRAVEL_ENTRANCE_CLOSED;
  static constexpr ErrorCode USER_HAS_OPERATED_MESSAGE =
    Basic_ErrorCode_USER_HAS_OPERATED_MESSAGE;
  static constexpr ErrorCode TRAVEL_NOT_FRIEND_FOR_ACCEPTOR =
    Basic_ErrorCode_TRAVEL_NOT_FRIEND_FOR_ACCEPTOR;
  static constexpr ErrorCode WHO_SPY_ROOM_NOT_EXIST =
    Basic_ErrorCode_WHO_SPY_ROOM_NOT_EXIST;
  static constexpr ErrorCode WHO_SPY_ROOM_NOT_MEMBER =
    Basic_ErrorCode_WHO_SPY_ROOM_NOT_MEMBER;
  static constexpr ErrorCode CANNOT_DESCRIBE_NOW =
    Basic_ErrorCode_CANNOT_DESCRIBE_NOW;
  static constexpr ErrorCode CANNOT_VOTE_NOW =
    Basic_ErrorCode_CANNOT_VOTE_NOW;
  static constexpr ErrorCode SPY_CANNOT_GUESS =
    Basic_ErrorCode_SPY_CANNOT_GUESS;
  static constexpr ErrorCode NOT_DESCRIBE_USER =
    Basic_ErrorCode_NOT_DESCRIBE_USER;
  static constexpr ErrorCode NOT_VOTE_USER =
    Basic_ErrorCode_NOT_VOTE_USER;
  static constexpr ErrorCode INVALID_VOTE_TARGET =
    Basic_ErrorCode_INVALID_VOTE_TARGET;
  static constexpr ErrorCode DESCRIPTION_EXCEED_MAX_LENGTH =
    Basic_ErrorCode_DESCRIPTION_EXCEED_MAX_LENGTH;
  static constexpr ErrorCode DESCRIPTION_HIT_SENSITIVE_WORDS =
    Basic_ErrorCode_DESCRIPTION_HIT_SENSITIVE_WORDS;
  static constexpr ErrorCode SPY_GUESS_WORD_EXCEED_MAX_LENGTH =
    Basic_ErrorCode_SPY_GUESS_WORD_EXCEED_MAX_LENGTH;
  static constexpr ErrorCode SPY_GUESS_WORD_HIT_SENSITIVE_WORDS =
    Basic_ErrorCode_SPY_GUESS_WORD_HIT_SENSITIVE_WORDS;
  static constexpr ErrorCode ALREADY_IN_MULTI_PLAYER_CHAT_ROOM =
    Basic_ErrorCode_ALREADY_IN_MULTI_PLAYER_CHAT_ROOM;
  static constexpr ErrorCode CHAT_ROOM_TOPIC_HIT_SENSITIVE_WORDS =
    Basic_ErrorCode_CHAT_ROOM_TOPIC_HIT_SENSITIVE_WORDS;
  static constexpr ErrorCode MULTI_PLAYER_CHAT_ROOM_CREATE_FAIL =
    Basic_ErrorCode_MULTI_PLAYER_CHAT_ROOM_CREATE_FAIL;
  static constexpr ErrorCode MULTI_PLAYER_CHAT_ROOM_CREATE_FREQUENT =
    Basic_ErrorCode_MULTI_PLAYER_CHAT_ROOM_CREATE_FREQUENT;
  static constexpr ErrorCode MULTI_PLAYER_CHAT_ROOM_NOT_EXIST =
    Basic_ErrorCode_MULTI_PLAYER_CHAT_ROOM_NOT_EXIST;
  static constexpr ErrorCode OPERATION_ALLOWED_FOR_OWNER_ONLY =
    Basic_ErrorCode_OPERATION_ALLOWED_FOR_OWNER_ONLY;
  static constexpr ErrorCode MULTI_PLAYER_CHAT_ROOM_GAME_CREATE_FAIL =
    Basic_ErrorCode_MULTI_PLAYER_CHAT_ROOM_GAME_CREATE_FAIL;
  static constexpr ErrorCode MULTI_PLAYER_CHAT_ROOM_GAME_NOT_MATCH =
    Basic_ErrorCode_MULTI_PLAYER_CHAT_ROOM_GAME_NOT_MATCH;
  static constexpr ErrorCode NOT_MEMBER_FOR_MULTI_PLAYER_CHAT_ROOM =
    Basic_ErrorCode_NOT_MEMBER_FOR_MULTI_PLAYER_CHAT_ROOM;
  static constexpr ErrorCode MULTI_PLAYER_CHAT_ROOM_RELEASED =
    Basic_ErrorCode_MULTI_PLAYER_CHAT_ROOM_RELEASED;
  static constexpr ErrorCode MULTI_PLAYER_CHAT_ROOM_FULL =
    Basic_ErrorCode_MULTI_PLAYER_CHAT_ROOM_FULL;
  static constexpr ErrorCode ALREADY_IN_OTHER_MULTI_PLAYER_CHAT_ROOM =
    Basic_ErrorCode_ALREADY_IN_OTHER_MULTI_PLAYER_CHAT_ROOM;
  static constexpr ErrorCode FORBID_JOIN_PRIVATE_MULTI_PLAYER_CHAT_ROOM =
    Basic_ErrorCode_FORBID_JOIN_PRIVATE_MULTI_PLAYER_CHAT_ROOM;
  static constexpr ErrorCode MULTI_PLAYER_CHAT_ROOM_JOIN_FAIL =
    Basic_ErrorCode_MULTI_PLAYER_CHAT_ROOM_JOIN_FAIL;
  static constexpr ErrorCode QUICK_MATCH_SYNC_NO_MATCH =
    Basic_ErrorCode_QUICK_MATCH_SYNC_NO_MATCH;
  static constexpr ErrorCode PLAYER_LEAVE_MULTI_PLAYER_CHAT_ROOM =
    Basic_ErrorCode_PLAYER_LEAVE_MULTI_PLAYER_CHAT_ROOM;
  static constexpr ErrorCode LINKMIC_COUNT_REACH_LIMIT =
    Basic_ErrorCode_LINKMIC_COUNT_REACH_LIMIT;
  static constexpr ErrorCode PLAYER_ALREADY_LINKMIC_ONLINE =
    Basic_ErrorCode_PLAYER_ALREADY_LINKMIC_ONLINE;
  static constexpr ErrorCode PLAYER_ALREADY_LINKMIC_OFFLINE =
    Basic_ErrorCode_PLAYER_ALREADY_LINKMIC_OFFLINE;
  static constexpr ErrorCode PLAYER_ALREADY_LEAVE_CHAT_ROOM =
    Basic_ErrorCode_PLAYER_ALREADY_LEAVE_CHAT_ROOM;
  static constexpr ErrorCode FORBID_LINK_MIC_OFFLINE_FOR_OWNER =
    Basic_ErrorCode_FORBID_LINK_MIC_OFFLINE_FOR_OWNER;
  static constexpr ErrorCode FORBID_LINK_MIC_OFFLINE_PLAYING_GAME =
    Basic_ErrorCode_FORBID_LINK_MIC_OFFLINE_PLAYING_GAME;
  static constexpr ErrorCode FORBID_LINK_MIC_ONLINE_PLAYING_GAME =
    Basic_ErrorCode_FORBID_LINK_MIC_ONLINE_PLAYING_GAME;
  static constexpr ErrorCode MULTI_PLAYER_CHAT_ROOM_MEMBER_KICKEDOUT =
    Basic_ErrorCode_MULTI_PLAYER_CHAT_ROOM_MEMBER_KICKEDOUT;
  static constexpr ErrorCode FORBID_KICKOUT_PLAYER_PLAYING_GAME =
    Basic_ErrorCode_FORBID_KICKOUT_PLAYER_PLAYING_GAME;
  static constexpr ErrorCode MULTI_PLAYER_CHAT_ROOM_GAME_NOT_EXIST =
    Basic_ErrorCode_MULTI_PLAYER_CHAT_ROOM_GAME_NOT_EXIST;
  static constexpr ErrorCode MULTI_PLAYER_CHAT_ROOM_MEMBER_TIMEOUT =
    Basic_ErrorCode_MULTI_PLAYER_CHAT_ROOM_MEMBER_TIMEOUT;
  static constexpr ErrorCode FORBID_GAME_UNREADY_FOR_OWNER =
    Basic_ErrorCode_FORBID_GAME_UNREADY_FOR_OWNER;
  static constexpr ErrorCode FORBID_CREATE_CHAT_ROOM =
    Basic_ErrorCode_FORBID_CREATE_CHAT_ROOM;
  static constexpr ErrorCode CHAT_ROOM_TOPIC_NOT_ALLOWED_EMPTY =
    Basic_ErrorCode_CHAT_ROOM_TOPIC_NOT_ALLOWED_EMPTY;
  static constexpr ErrorCode MULTI_PLAYER_CHAT_ROOM_GAME_ROOM_FULL =
    Basic_ErrorCode_MULTI_PLAYER_CHAT_ROOM_GAME_ROOM_FULL;
  static constexpr ErrorCode PLAYER_NOT_LINKMIC_ONLINE =
    Basic_ErrorCode_PLAYER_NOT_LINKMIC_ONLINE;
  static constexpr ErrorCode LINKMIC_STATUS_ALREADY_UPDATE =
    Basic_ErrorCode_LINKMIC_STATUS_ALREADY_UPDATE;
  static constexpr ErrorCode CANNOT_APPLY_LINKMIC =
    Basic_ErrorCode_CANNOT_APPLY_LINKMIC;
  static constexpr ErrorCode CANNOT_CREATE_CHAT_ROOM_FOR_BLACKLIST =
    Basic_ErrorCode_CANNOT_CREATE_CHAT_ROOM_FOR_BLACKLIST;
  static constexpr ErrorCode CANNOT_CREATE_CHAT_ROOM_FOR_NOT_BIND =
    Basic_ErrorCode_CANNOT_CREATE_CHAT_ROOM_FOR_NOT_BIND;
  static constexpr ErrorCode CANNOT_JOIN_CHAT_ROOM_FOR_BLACKLIST =
    Basic_ErrorCode_CANNOT_JOIN_CHAT_ROOM_FOR_BLACKLIST;
  static constexpr ErrorCode NO_AVAILABLE_CHAT_ROOM =
    Basic_ErrorCode_NO_AVAILABLE_CHAT_ROOM;
  static constexpr ErrorCode MAX_PLAYER_COUNT_REACH_LIMIT =
    Basic_ErrorCode_MAX_PLAYER_COUNT_REACH_LIMIT;
  static constexpr ErrorCode MULTI_PLAYER_CHAT_ROOM_NEED_UPDATE_VERSION =
    Basic_ErrorCode_MULTI_PLAYER_CHAT_ROOM_NEED_UPDATE_VERSION;
  static constexpr ErrorCode MULTI_PLAYER_CHAT_ROOM_START_GAME_UPDATE_VERSION =
    Basic_ErrorCode_MULTI_PLAYER_CHAT_ROOM_START_GAME_UPDATE_VERSION;
  static constexpr ErrorCode MULTI_PLAYER_CHAT_ROOM_ALREADY_IN_GAME =
    Basic_ErrorCode_MULTI_PLAYER_CHAT_ROOM_ALREADY_IN_GAME;
  static constexpr ErrorCode MULTI_PLAYER_CHAT_ROOM_FORBID_CANCEL_CREATE =
    Basic_ErrorCode_MULTI_PLAYER_CHAT_ROOM_FORBID_CANCEL_CREATE;
  static constexpr ErrorCode CHAT_ROOM_SEATNAME_HIT_SENSITIVE_WORDS =
    Basic_ErrorCode_CHAT_ROOM_SEATNAME_HIT_SENSITIVE_WORDS;
  static constexpr ErrorCode CHAT_ROOM_THEME_NOT_EXIST =
    Basic_ErrorCode_CHAT_ROOM_THEME_NOT_EXIST;
  static constexpr ErrorCode ONLY_VIP_CAN_UPLOAD_BACKGROUND =
    Basic_ErrorCode_ONLY_VIP_CAN_UPLOAD_BACKGROUND;
  static constexpr ErrorCode MORE_THAN_BACKGROUND_MAX_COUNT =
    Basic_ErrorCode_MORE_THAN_BACKGROUND_MAX_COUNT;
  static constexpr ErrorCode MODIFY_BACKGROUND_FOR_NORMAL_ROOM =
    Basic_ErrorCode_MODIFY_BACKGROUND_FOR_NORMAL_ROOM;
  static constexpr ErrorCode CHAT_ROOM_ANNOUNCEMENT_EXCEED_MAX_LENGTH =
    Basic_ErrorCode_CHAT_ROOM_ANNOUNCEMENT_EXCEED_MAX_LENGTH;
  static constexpr ErrorCode CHAT_ROOM_ANNOUNCEMENT_HIT_SENSITIVE_WORDS =
    Basic_ErrorCode_CHAT_ROOM_ANNOUNCEMENT_HIT_SENSITIVE_WORDS;
  static constexpr ErrorCode NOT_THEME_ROOM =
    Basic_ErrorCode_NOT_THEME_ROOM;
  static constexpr ErrorCode FEED_NOT_EXIST =
    Basic_ErrorCode_FEED_NOT_EXIST;
  static constexpr ErrorCode FEED_NOT_OWNER =
    Basic_ErrorCode_FEED_NOT_OWNER;
  static constexpr ErrorCode FEED_PUBLISHED =
    Basic_ErrorCode_FEED_PUBLISHED;
  static constexpr ErrorCode FEED_TEXT_EXCEED_MAX_LENGTH =
    Basic_ErrorCode_FEED_TEXT_EXCEED_MAX_LENGTH;
  static constexpr ErrorCode FEED_TEXT_HIT_SENSITIVE_WORDS =
    Basic_ErrorCode_FEED_TEXT_HIT_SENSITIVE_WORDS;
  static constexpr ErrorCode FEED_ATTACHMENT_MISSING_INFO =
    Basic_ErrorCode_FEED_ATTACHMENT_MISSING_INFO;
  static constexpr ErrorCode FEED_USER_LIKED =
    Basic_ErrorCode_FEED_USER_LIKED;
  static constexpr ErrorCode FEED_CITY_NOT_LOCATED =
    Basic_ErrorCode_FEED_CITY_NOT_LOCATED;
  static constexpr ErrorCode FEED_PROFILE_AUTHOR_BLOCK_USER =
    Basic_ErrorCode_FEED_PROFILE_AUTHOR_BLOCK_USER;
  static constexpr ErrorCode FEED_PROFILE_USER_BLOCK_AUTHOR =
    Basic_ErrorCode_FEED_PROFILE_USER_BLOCK_AUTHOR;
  static constexpr ErrorCode FEED_USER_NOT_LIKED =
    Basic_ErrorCode_FEED_USER_NOT_LIKED;
  static constexpr ErrorCode FEED_PUBLISH_BANNED =
    Basic_ErrorCode_FEED_PUBLISH_BANNED;
  static constexpr ErrorCode FEED_FROZEN_USER =
    Basic_ErrorCode_FEED_FROZEN_USER;
  static constexpr ErrorCode FEED_PUBLISH_OVER_LIMIT =
    Basic_ErrorCode_FEED_PUBLISH_OVER_LIMIT;
  static constexpr ErrorCode FEED_PUBLISH_REQUEST_OVER_LIMIT =
    Basic_ErrorCode_FEED_PUBLISH_REQUEST_OVER_LIMIT;
  static constexpr ErrorCode FEED_LIKE_SPAM =
    Basic_ErrorCode_FEED_LIKE_SPAM;
  static constexpr ErrorCode TRADE_PRODUCT_NOT_FOUND =
    Basic_ErrorCode_TRADE_PRODUCT_NOT_FOUND;
  static constexpr ErrorCode TRADE_PRODUCT_CHANGED =
    Basic_ErrorCode_TRADE_PRODUCT_CHANGED;
  static constexpr ErrorCode TRADE_ORDER_DUPLICATE =
    Basic_ErrorCode_TRADE_ORDER_DUPLICATE;
  static constexpr ErrorCode TRADE_ORDER_FAILED =
    Basic_ErrorCode_TRADE_ORDER_FAILED;
  static constexpr ErrorCode TRADE_ORDER_NOT_FOUND =
    Basic_ErrorCode_TRADE_ORDER_NOT_FOUND;
  static constexpr ErrorCode TRADE_RECEIPT_BINDED =
    Basic_ErrorCode_TRADE_RECEIPT_BINDED;
  static constexpr ErrorCode TRADE_RECEIPT_VERIFY_FAILED =
    Basic_ErrorCode_TRADE_RECEIPT_VERIFY_FAILED;
  static constexpr ErrorCode TRADE_RECEIPT_VERIFY_SYSTEM_ERROR =
    Basic_ErrorCode_TRADE_RECEIPT_VERIFY_SYSTEM_ERROR;
  static constexpr ErrorCode TRADE_RECEIPT_VERIFY_CHECK_FAILED =
    Basic_ErrorCode_TRADE_RECEIPT_VERIFY_CHECK_FAILED;
  static constexpr ErrorCode TRADE_RECEIPT_UNSUPPORTED_VERSION =
    Basic_ErrorCode_TRADE_RECEIPT_UNSUPPORTED_VERSION;
  static constexpr ErrorCode TRADE_RECEIPT_BUY_FAILED =
    Basic_ErrorCode_TRADE_RECEIPT_BUY_FAILED;
  static constexpr ErrorCode TRADE_SERVICE_UNAVAILABLE =
    Basic_ErrorCode_TRADE_SERVICE_UNAVAILABLE;
  static constexpr ErrorCode TRADE_AGREEMENT_NOT_FOUND =
    Basic_ErrorCode_TRADE_AGREEMENT_NOT_FOUND;
  static constexpr ErrorCode TRADE_AGREEMENT_UNSIGN_FAILED =
    Basic_ErrorCode_TRADE_AGREEMENT_UNSIGN_FAILED;
  static constexpr ErrorCode C2C_STRANGER_SESSION_OVER_LIMIT =
    Basic_ErrorCode_C2C_STRANGER_SESSION_OVER_LIMIT;
  static constexpr ErrorCode GAME_INVALID_COMMAND =
    Basic_ErrorCode_GAME_INVALID_COMMAND;
  static constexpr ErrorCode GAME_USER_NOT_FOUND =
    Basic_ErrorCode_GAME_USER_NOT_FOUND;
  static constexpr ErrorCode GAME_INVALID_MESSAGE =
    Basic_ErrorCode_GAME_INVALID_MESSAGE;
  static constexpr ErrorCode GAME_FINISHED =
    Basic_ErrorCode_GAME_FINISHED;
  static constexpr ErrorCode REPORT_TOO_FREQUENTLY =
    Basic_ErrorCode_REPORT_TOO_FREQUENTLY;
  static constexpr ErrorCode GROUP_CREATE_FAIL =
    Basic_ErrorCode_GROUP_CREATE_FAIL;
  static constexpr ErrorCode NOT_GROUP_MEMBER =
    Basic_ErrorCode_NOT_GROUP_MEMBER;
  static constexpr ErrorCode NOT_GROUP_ADMIN =
    Basic_ErrorCode_NOT_GROUP_ADMIN;
  static constexpr ErrorCode GROUP_DELETE_FAIL =
    Basic_ErrorCode_GROUP_DELETE_FAIL;
  static constexpr ErrorCode ADMIN_TRANSFER_FAIL =
    Basic_ErrorCode_ADMIN_TRANSFER_FAIL;
  static constexpr ErrorCode GROUP_SETTING_FAIL =
    Basic_ErrorCode_GROUP_SETTING_FAIL;
  static constexpr ErrorCode GROUP_EXCEED_MAX_NUMBERS =
    Basic_ErrorCode_GROUP_EXCEED_MAX_NUMBERS;
  static constexpr ErrorCode GROUP_ADMIN_CANNOT_QUIT =
    Basic_ErrorCode_GROUP_ADMIN_CANNOT_QUIT;
  static constexpr ErrorCode CANNOT_KICK_ADMIN =
    Basic_ErrorCode_CANNOT_KICK_ADMIN;
  static constexpr ErrorCode GROUP_NOT_EXISTS =
    Basic_ErrorCode_GROUP_NOT_EXISTS;
  static constexpr ErrorCode GROUP_NOT_ENOUGH_MEMBERS =
    Basic_ErrorCode_GROUP_NOT_ENOUGH_MEMBERS;
  static constexpr ErrorCode USER_CREATE_GROUP_EXCEED_MAX_COUNT =
    Basic_ErrorCode_USER_CREATE_GROUP_EXCEED_MAX_COUNT;
  static constexpr ErrorCode GROUP_NAME_UNAVAILABLE =
    Basic_ErrorCode_GROUP_NAME_UNAVAILABLE;
  static constexpr ErrorCode USER_NICK_NAME_UNAVAILABLE =
    Basic_ErrorCode_USER_NICK_NAME_UNAVAILABLE;
  static constexpr ErrorCode GROUP_OFF_LINE =
    Basic_ErrorCode_GROUP_OFF_LINE;
  static constexpr ErrorCode FORBID_USER_CREATE_GROUP =
    Basic_ErrorCode_FORBID_USER_CREATE_GROUP;
  static constexpr ErrorCode GROUP_SHARE_GROUP_NOT_EXIST =
    Basic_ErrorCode_GROUP_SHARE_GROUP_NOT_EXIST;
  static constexpr ErrorCode GROUP_SHARE_INVITEOR_NOT_GROUP_MEMBER =
    Basic_ErrorCode_GROUP_SHARE_INVITEOR_NOT_GROUP_MEMBER;
  static constexpr ErrorCode GROUP_SHARE_QR_CODE_EXPIRE =
    Basic_ErrorCode_GROUP_SHARE_QR_CODE_EXPIRE;
  static constexpr ErrorCode GROUP_SHARE_GROUP_EXCEED_MAX_NUMBERS =
    Basic_ErrorCode_GROUP_SHARE_GROUP_EXCEED_MAX_NUMBERS;
  static constexpr ErrorCode GROUP_SHARE_QR_CODE_INVALID =
    Basic_ErrorCode_GROUP_SHARE_QR_CODE_INVALID;
  static constexpr ErrorCode GROUP_SHARE_LINK_INVALID =
    Basic_ErrorCode_GROUP_SHARE_LINK_INVALID;
  static constexpr ErrorCode GROUP_SHARE_WITHIN_NEED_PERMISSION =
    Basic_ErrorCode_GROUP_SHARE_WITHIN_NEED_PERMISSION;
  static constexpr ErrorCode GROUP_BULLETIN_SIZE_OVER_LIMIT =
    Basic_ErrorCode_GROUP_BULLETIN_SIZE_OVER_LIMIT;
  static constexpr ErrorCode GROUP_BULLETIN_NOT_ADMIN =
    Basic_ErrorCode_GROUP_BULLETIN_NOT_ADMIN;
  static constexpr ErrorCode GROUP_JOIN_REQUEST_NOT_FOUND =
    Basic_ErrorCode_GROUP_JOIN_REQUEST_NOT_FOUND;
  static constexpr ErrorCode GROUP_JOIN_REQUEST_HAS_BEEN_PROCESSED =
    Basic_ErrorCode_GROUP_JOIN_REQUEST_HAS_BEEN_PROCESSED;
  static constexpr ErrorCode GROUP_NAME_LENGTH_OVER_LIMIT =
    Basic_ErrorCode_GROUP_NAME_LENGTH_OVER_LIMIT;
  static constexpr ErrorCode GROUP_PK_NOT_QUIT =
    Basic_ErrorCode_GROUP_PK_NOT_QUIT;
  static constexpr ErrorCode GROUP_PK_NOT_RENAME =
    Basic_ErrorCode_GROUP_PK_NOT_RENAME;
  static constexpr ErrorCode GROUP_PK_NOT_INVITE =
    Basic_ErrorCode_GROUP_PK_NOT_INVITE;
  static constexpr ErrorCode GROUP_PK_NOT_INVITE_QR_CODE =
    Basic_ErrorCode_GROUP_PK_NOT_INVITE_QR_CODE;
  static constexpr ErrorCode GROUP_MEMBER_NICK_NAME_LENGTH_OVER_LIMIT =
    Basic_ErrorCode_GROUP_MEMBER_NICK_NAME_LENGTH_OVER_LIMIT;
  static constexpr ErrorCode CHANNEL_INVALID_CHANNEL_ID =
    Basic_ErrorCode_CHANNEL_INVALID_CHANNEL_ID;
  static constexpr ErrorCode CHANNEL_USER_HAS_BEEN_KICKED =
    Basic_ErrorCode_CHANNEL_USER_HAS_BEEN_KICKED;
  static constexpr ErrorCode MESSAGE_TOO_LARGE_TO_SEND =
    Basic_ErrorCode_MESSAGE_TOO_LARGE_TO_SEND;
  static constexpr ErrorCode MESSAGE_BATCH_SEND_COUNT_EXCEED_LIMIT =
    Basic_ErrorCode_MESSAGE_BATCH_SEND_COUNT_EXCEED_LIMIT;
  static constexpr ErrorCode DIAN_DIAN_COVER_IMAGE_NOT_REAL =
    Basic_ErrorCode_DIAN_DIAN_COVER_IMAGE_NOT_REAL;
  static constexpr ErrorCode DIAN_DIAN_COVER_IMAGE_NOT_SET =
    Basic_ErrorCode_DIAN_DIAN_COVER_IMAGE_NOT_SET;
  static constexpr ErrorCode DIAN_DIAN_SETTING_UPDATE_FAIL =
    Basic_ErrorCode_DIAN_DIAN_SETTING_UPDATE_FAIL;
  static constexpr ErrorCode DIAN_DIAN_ALBUM_UPDATE_FAIL =
    Basic_ErrorCode_DIAN_DIAN_ALBUM_UPDATE_FAIL;
  static constexpr ErrorCode DIAN_DIAN_USER_FROZEN =
    Basic_ErrorCode_DIAN_DIAN_USER_FROZEN;
  static constexpr ErrorCode DIAN_DIAN_LIKE_FREQUENCY_LIMIT =
    Basic_ErrorCode_DIAN_DIAN_LIKE_FREQUENCY_LIMIT;
  static constexpr ErrorCode DIAN_DIAN_YOUNG_AGE_LIMIT =
    Basic_ErrorCode_DIAN_DIAN_YOUNG_AGE_LIMIT;
  static constexpr ErrorCode GIFT_BALANCE_NOT_ENOUGH =
    Basic_ErrorCode_GIFT_BALANCE_NOT_ENOUGH;
  static constexpr ErrorCode GIFT_GIVED =
    Basic_ErrorCode_GIFT_GIVED;
  static constexpr ErrorCode GIFT_RECEIVER_NOT_EXIST =
    Basic_ErrorCode_GIFT_RECEIVER_NOT_EXIST;
  static constexpr ErrorCode GIFT_RECEIVER_NOT_IN_ROOM =
    Basic_ErrorCode_GIFT_RECEIVER_NOT_IN_ROOM;
  static constexpr ErrorCode GIFT_INFO_NOT_EXIST =
    Basic_ErrorCode_GIFT_INFO_NOT_EXIST;
  static constexpr ErrorCode FREE_VIP_CARD_NO_EXIST =
    Basic_ErrorCode_FREE_VIP_CARD_NO_EXIST;
  static constexpr ErrorCode FREE_VIP_CARD_EXPIRE =
    Basic_ErrorCode_FREE_VIP_CARD_EXPIRE;
  static constexpr ErrorCode FREE_VIP_CARD_USE_FAILED =
    Basic_ErrorCode_FREE_VIP_CARD_USE_FAILED;
  static constexpr ErrorCode SECRET_SIGNAL_GENERATE_FAIL =
    Basic_ErrorCode_SECRET_SIGNAL_GENERATE_FAIL;
  static constexpr ErrorCode SECRET_SIGNAL_SHARE_FAIL =
    Basic_ErrorCode_SECRET_SIGNAL_SHARE_FAIL;
  static constexpr ErrorCode SECRET_SIGNAL_INVALID_PREFIX =
    Basic_ErrorCode_SECRET_SIGNAL_INVALID_PREFIX;
  static constexpr ErrorCode SECRET_SIGNAL_MATCH_FAIL =
    Basic_ErrorCode_SECRET_SIGNAL_MATCH_FAIL;
  static constexpr ErrorCode SECRET_SIGNAL_DUPLICATE_MATCH =
    Basic_ErrorCode_SECRET_SIGNAL_DUPLICATE_MATCH;
  static constexpr ErrorCode SECRET_SIGNAL_FORBID_MATCH_SELF =
    Basic_ErrorCode_SECRET_SIGNAL_FORBID_MATCH_SELF;
  static inline bool ErrorCode_IsValid(int value) {
    return Basic_ErrorCode_IsValid(value);
  }
  static constexpr ErrorCode ErrorCode_MIN =
    Basic_ErrorCode_ErrorCode_MIN;
  static constexpr ErrorCode ErrorCode_MAX =
    Basic_ErrorCode_ErrorCode_MAX;
  static constexpr int ErrorCode_ARRAYSIZE =
    Basic_ErrorCode_ErrorCode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ErrorCode_descriptor() {
    return Basic_ErrorCode_descriptor();
  }
  template<typename T>
  static inline const std::string& ErrorCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ErrorCode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ErrorCode_Name.");
    return Basic_ErrorCode_Name(enum_t_value);
  }
  static inline bool ErrorCode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ErrorCode* value) {
    return Basic_ErrorCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Basic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class ImMessage_Message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.ImMessage.Message) */ {
 public:
  inline ImMessage_Message() : ImMessage_Message(nullptr) {}
  virtual ~ImMessage_Message();

  ImMessage_Message(const ImMessage_Message& from);
  ImMessage_Message(ImMessage_Message&& from) noexcept
    : ImMessage_Message() {
    *this = ::std::move(from);
  }

  inline ImMessage_Message& operator=(const ImMessage_Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImMessage_Message& operator=(ImMessage_Message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImMessage_Message& default_instance();

  static inline const ImMessage_Message* internal_default_instance() {
    return reinterpret_cast<const ImMessage_Message*>(
               &_ImMessage_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(ImMessage_Message& a, ImMessage_Message& b) {
    a.Swap(&b);
  }
  inline void Swap(ImMessage_Message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImMessage_Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImMessage_Message* New() const final {
    return CreateMaybeMessage<ImMessage_Message>(nullptr);
  }

  ImMessage_Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImMessage_Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImMessage_Message& from);
  void MergeFrom(const ImMessage_Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImMessage_Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.ImMessage.Message";
  }
  protected:
  explicit ImMessage_Message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReceiversFieldNumber = 11,
    kExcludeReceiversFieldNumber = 19,
    kTitleFieldNumber = 7,
    kContentFieldNumber = 9,
    kBuckupTipsFieldNumber = 10,
    kStrTargetIdFieldNumber = 18,
    kExtraFieldNumber = 22,
    kFromUserFieldNumber = 4,
    kToUserFieldNumber = 6,
    kReminderFieldNumber = 21,
    kSeqIdFieldNumber = 1,
    kClientSeqIdFieldNumber = 2,
    kTimestampMsFieldNumber = 3,
    kTargetIdFieldNumber = 5,
    kContentTypeFieldNumber = 8,
    kSessionPriorityFieldNumber = 13,
    kSessionCategoryIdFieldNumber = 14,
    kSessionAccountTypeFieldNumber = 15,
    kUserRelationshipFieldNumber = 17,
    kNotContentUnreadFieldNumber = 12,
    kNotAutoCreateSessionFieldNumber = 16,
    kMarkDelteFieldNumber = 20,
    kReceiptRequiredFieldNumber = 23,
  };
  // repeated .AcFunDanmu.Im.Basic.User receivers = 11;
  int receivers_size() const;
  private:
  int _internal_receivers_size() const;
  public:
  void clear_receivers();
  ::AcFunDanmu::Im::Basic_User* mutable_receivers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_User >*
      mutable_receivers();
  private:
  const ::AcFunDanmu::Im::Basic_User& _internal_receivers(int index) const;
  ::AcFunDanmu::Im::Basic_User* _internal_add_receivers();
  public:
  const ::AcFunDanmu::Im::Basic_User& receivers(int index) const;
  ::AcFunDanmu::Im::Basic_User* add_receivers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_User >&
      receivers() const;

  // repeated .AcFunDanmu.Im.Basic.User excludeReceivers = 19;
  int excludereceivers_size() const;
  private:
  int _internal_excludereceivers_size() const;
  public:
  void clear_excludereceivers();
  ::AcFunDanmu::Im::Basic_User* mutable_excludereceivers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_User >*
      mutable_excludereceivers();
  private:
  const ::AcFunDanmu::Im::Basic_User& _internal_excludereceivers(int index) const;
  ::AcFunDanmu::Im::Basic_User* _internal_add_excludereceivers();
  public:
  const ::AcFunDanmu::Im::Basic_User& excludereceivers(int index) const;
  ::AcFunDanmu::Im::Basic_User* add_excludereceivers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_User >&
      excludereceivers() const;

  // string title = 7;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // bytes content = 9;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // string buckupTips = 10;
  void clear_buckuptips();
  const std::string& buckuptips() const;
  void set_buckuptips(const std::string& value);
  void set_buckuptips(std::string&& value);
  void set_buckuptips(const char* value);
  void set_buckuptips(const char* value, size_t size);
  std::string* mutable_buckuptips();
  std::string* release_buckuptips();
  void set_allocated_buckuptips(std::string* buckuptips);
  private:
  const std::string& _internal_buckuptips() const;
  void _internal_set_buckuptips(const std::string& value);
  std::string* _internal_mutable_buckuptips();
  public:

  // string strTargetId = 18;
  void clear_strtargetid();
  const std::string& strtargetid() const;
  void set_strtargetid(const std::string& value);
  void set_strtargetid(std::string&& value);
  void set_strtargetid(const char* value);
  void set_strtargetid(const char* value, size_t size);
  std::string* mutable_strtargetid();
  std::string* release_strtargetid();
  void set_allocated_strtargetid(std::string* strtargetid);
  private:
  const std::string& _internal_strtargetid() const;
  void _internal_set_strtargetid(const std::string& value);
  std::string* _internal_mutable_strtargetid();
  public:

  // bytes extra = 22;
  void clear_extra();
  const std::string& extra() const;
  void set_extra(const std::string& value);
  void set_extra(std::string&& value);
  void set_extra(const char* value);
  void set_extra(const void* value, size_t size);
  std::string* mutable_extra();
  std::string* release_extra();
  void set_allocated_extra(std::string* extra);
  private:
  const std::string& _internal_extra() const;
  void _internal_set_extra(const std::string& value);
  std::string* _internal_mutable_extra();
  public:

  // .AcFunDanmu.Im.Basic.User fromUser = 4;
  bool has_fromuser() const;
  private:
  bool _internal_has_fromuser() const;
  public:
  void clear_fromuser();
  const ::AcFunDanmu::Im::Basic_User& fromuser() const;
  ::AcFunDanmu::Im::Basic_User* release_fromuser();
  ::AcFunDanmu::Im::Basic_User* mutable_fromuser();
  void set_allocated_fromuser(::AcFunDanmu::Im::Basic_User* fromuser);
  private:
  const ::AcFunDanmu::Im::Basic_User& _internal_fromuser() const;
  ::AcFunDanmu::Im::Basic_User* _internal_mutable_fromuser();
  public:
  void unsafe_arena_set_allocated_fromuser(
      ::AcFunDanmu::Im::Basic_User* fromuser);
  ::AcFunDanmu::Im::Basic_User* unsafe_arena_release_fromuser();

  // .AcFunDanmu.Im.Basic.User toUser = 6;
  bool has_touser() const;
  private:
  bool _internal_has_touser() const;
  public:
  void clear_touser();
  const ::AcFunDanmu::Im::Basic_User& touser() const;
  ::AcFunDanmu::Im::Basic_User* release_touser();
  ::AcFunDanmu::Im::Basic_User* mutable_touser();
  void set_allocated_touser(::AcFunDanmu::Im::Basic_User* touser);
  private:
  const ::AcFunDanmu::Im::Basic_User& _internal_touser() const;
  ::AcFunDanmu::Im::Basic_User* _internal_mutable_touser();
  public:
  void unsafe_arena_set_allocated_touser(
      ::AcFunDanmu::Im::Basic_User* touser);
  ::AcFunDanmu::Im::Basic_User* unsafe_arena_release_touser();

  // .AcFunDanmu.Im.ImMessage.Reminder reminder = 21;
  bool has_reminder() const;
  private:
  bool _internal_has_reminder() const;
  public:
  void clear_reminder();
  const ::AcFunDanmu::Im::ImMessage_Reminder& reminder() const;
  ::AcFunDanmu::Im::ImMessage_Reminder* release_reminder();
  ::AcFunDanmu::Im::ImMessage_Reminder* mutable_reminder();
  void set_allocated_reminder(::AcFunDanmu::Im::ImMessage_Reminder* reminder);
  private:
  const ::AcFunDanmu::Im::ImMessage_Reminder& _internal_reminder() const;
  ::AcFunDanmu::Im::ImMessage_Reminder* _internal_mutable_reminder();
  public:
  void unsafe_arena_set_allocated_reminder(
      ::AcFunDanmu::Im::ImMessage_Reminder* reminder);
  ::AcFunDanmu::Im::ImMessage_Reminder* unsafe_arena_release_reminder();

  // int64 seqId = 1;
  void clear_seqid();
  ::PROTOBUF_NAMESPACE_ID::int64 seqid() const;
  void set_seqid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_seqid() const;
  void _internal_set_seqid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 clientSeqId = 2;
  void clear_clientseqid();
  ::PROTOBUF_NAMESPACE_ID::int64 clientseqid() const;
  void set_clientseqid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_clientseqid() const;
  void _internal_set_clientseqid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 timestampMs = 3;
  void clear_timestampms();
  ::PROTOBUF_NAMESPACE_ID::int64 timestampms() const;
  void set_timestampms(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestampms() const;
  void _internal_set_timestampms(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 targetId = 5;
  void clear_targetid();
  ::PROTOBUF_NAMESPACE_ID::int64 targetid() const;
  void set_targetid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_targetid() const;
  void _internal_set_targetid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 contentType = 8;
  void clear_contenttype();
  ::PROTOBUF_NAMESPACE_ID::int32 contenttype() const;
  void set_contenttype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_contenttype() const;
  void _internal_set_contenttype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sessionPriority = 13;
  void clear_sessionpriority();
  ::PROTOBUF_NAMESPACE_ID::int32 sessionpriority() const;
  void set_sessionpriority(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sessionpriority() const;
  void _internal_set_sessionpriority(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sessionCategoryId = 14;
  void clear_sessioncategoryid();
  ::PROTOBUF_NAMESPACE_ID::int32 sessioncategoryid() const;
  void set_sessioncategoryid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sessioncategoryid() const;
  void _internal_set_sessioncategoryid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sessionAccountType = 15;
  void clear_sessionaccounttype();
  ::PROTOBUF_NAMESPACE_ID::int32 sessionaccounttype() const;
  void set_sessionaccounttype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sessionaccounttype() const;
  void _internal_set_sessionaccounttype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 userRelationship = 17;
  void clear_userrelationship();
  ::PROTOBUF_NAMESPACE_ID::int32 userrelationship() const;
  void set_userrelationship(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userrelationship() const;
  void _internal_set_userrelationship(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool notContentUnread = 12;
  void clear_notcontentunread();
  bool notcontentunread() const;
  void set_notcontentunread(bool value);
  private:
  bool _internal_notcontentunread() const;
  void _internal_set_notcontentunread(bool value);
  public:

  // bool notAutoCreateSession = 16;
  void clear_notautocreatesession();
  bool notautocreatesession() const;
  void set_notautocreatesession(bool value);
  private:
  bool _internal_notautocreatesession() const;
  void _internal_set_notautocreatesession(bool value);
  public:

  // bool markDelte = 20;
  void clear_markdelte();
  bool markdelte() const;
  void set_markdelte(bool value);
  private:
  bool _internal_markdelte() const;
  void _internal_set_markdelte(bool value);
  public:

  // bool receiptRequired = 23;
  void clear_receiptrequired();
  bool receiptrequired() const;
  void set_receiptrequired(bool value);
  private:
  bool _internal_receiptrequired() const;
  void _internal_set_receiptrequired(bool value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.ImMessage.Message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_User > receivers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_User > excludereceivers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buckuptips_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strtargetid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extra_;
  ::AcFunDanmu::Im::Basic_User* fromuser_;
  ::AcFunDanmu::Im::Basic_User* touser_;
  ::AcFunDanmu::Im::ImMessage_Reminder* reminder_;
  ::PROTOBUF_NAMESPACE_ID::int64 seqid_;
  ::PROTOBUF_NAMESPACE_ID::int64 clientseqid_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestampms_;
  ::PROTOBUF_NAMESPACE_ID::int64 targetid_;
  ::PROTOBUF_NAMESPACE_ID::int32 contenttype_;
  ::PROTOBUF_NAMESPACE_ID::int32 sessionpriority_;
  ::PROTOBUF_NAMESPACE_ID::int32 sessioncategoryid_;
  ::PROTOBUF_NAMESPACE_ID::int32 sessionaccounttype_;
  ::PROTOBUF_NAMESPACE_ID::int32 userrelationship_;
  bool notcontentunread_;
  bool notautocreatesession_;
  bool markdelte_;
  bool receiptrequired_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class ImMessage_SendMessageResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.ImMessage.SendMessageResponse) */ {
 public:
  inline ImMessage_SendMessageResponse() : ImMessage_SendMessageResponse(nullptr) {}
  virtual ~ImMessage_SendMessageResponse();

  ImMessage_SendMessageResponse(const ImMessage_SendMessageResponse& from);
  ImMessage_SendMessageResponse(ImMessage_SendMessageResponse&& from) noexcept
    : ImMessage_SendMessageResponse() {
    *this = ::std::move(from);
  }

  inline ImMessage_SendMessageResponse& operator=(const ImMessage_SendMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImMessage_SendMessageResponse& operator=(ImMessage_SendMessageResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImMessage_SendMessageResponse& default_instance();

  static inline const ImMessage_SendMessageResponse* internal_default_instance() {
    return reinterpret_cast<const ImMessage_SendMessageResponse*>(
               &_ImMessage_SendMessageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(ImMessage_SendMessageResponse& a, ImMessage_SendMessageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ImMessage_SendMessageResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImMessage_SendMessageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImMessage_SendMessageResponse* New() const final {
    return CreateMaybeMessage<ImMessage_SendMessageResponse>(nullptr);
  }

  ImMessage_SendMessageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImMessage_SendMessageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImMessage_SendMessageResponse& from);
  void MergeFrom(const ImMessage_SendMessageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImMessage_SendMessageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.ImMessage.SendMessageResponse";
  }
  protected:
  explicit ImMessage_SendMessageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientSeqIdFieldNumber = 1,
    kMessageTimestampFieldNumber = 2,
    kSeqIdFieldNumber = 3,
    kSessionAccountTypeFieldNumber = 4,
    kSessionPriorityFieldNumber = 5,
    kSessionCategoryIdFieldNumber = 6,
  };
  // int64 clientSeqId = 1;
  void clear_clientseqid();
  ::PROTOBUF_NAMESPACE_ID::int64 clientseqid() const;
  void set_clientseqid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_clientseqid() const;
  void _internal_set_clientseqid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 messageTimestamp = 2;
  void clear_messagetimestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 messagetimestamp() const;
  void set_messagetimestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_messagetimestamp() const;
  void _internal_set_messagetimestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 seqId = 3;
  void clear_seqid();
  ::PROTOBUF_NAMESPACE_ID::int64 seqid() const;
  void set_seqid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_seqid() const;
  void _internal_set_seqid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 sessionAccountType = 4;
  void clear_sessionaccounttype();
  ::PROTOBUF_NAMESPACE_ID::int32 sessionaccounttype() const;
  void set_sessionaccounttype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sessionaccounttype() const;
  void _internal_set_sessionaccounttype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sessionPriority = 5;
  void clear_sessionpriority();
  ::PROTOBUF_NAMESPACE_ID::int32 sessionpriority() const;
  void set_sessionpriority(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sessionpriority() const;
  void _internal_set_sessionpriority(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sessionCategoryId = 6;
  void clear_sessioncategoryid();
  ::PROTOBUF_NAMESPACE_ID::int32 sessioncategoryid() const;
  void set_sessioncategoryid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sessioncategoryid() const;
  void _internal_set_sessioncategoryid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.ImMessage.SendMessageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 clientseqid_;
  ::PROTOBUF_NAMESPACE_ID::int64 messagetimestamp_;
  ::PROTOBUF_NAMESPACE_ID::int64 seqid_;
  ::PROTOBUF_NAMESPACE_ID::int32 sessionaccounttype_;
  ::PROTOBUF_NAMESPACE_ID::int32 sessionpriority_;
  ::PROTOBUF_NAMESPACE_ID::int32 sessioncategoryid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class ImMessage_PullOldRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.ImMessage.PullOldRequest) */ {
 public:
  inline ImMessage_PullOldRequest() : ImMessage_PullOldRequest(nullptr) {}
  virtual ~ImMessage_PullOldRequest();

  ImMessage_PullOldRequest(const ImMessage_PullOldRequest& from);
  ImMessage_PullOldRequest(ImMessage_PullOldRequest&& from) noexcept
    : ImMessage_PullOldRequest() {
    *this = ::std::move(from);
  }

  inline ImMessage_PullOldRequest& operator=(const ImMessage_PullOldRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImMessage_PullOldRequest& operator=(ImMessage_PullOldRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImMessage_PullOldRequest& default_instance();

  static inline const ImMessage_PullOldRequest* internal_default_instance() {
    return reinterpret_cast<const ImMessage_PullOldRequest*>(
               &_ImMessage_PullOldRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(ImMessage_PullOldRequest& a, ImMessage_PullOldRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ImMessage_PullOldRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImMessage_PullOldRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImMessage_PullOldRequest* New() const final {
    return CreateMaybeMessage<ImMessage_PullOldRequest>(nullptr);
  }

  ImMessage_PullOldRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImMessage_PullOldRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImMessage_PullOldRequest& from);
  void MergeFrom(const ImMessage_PullOldRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImMessage_PullOldRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.ImMessage.PullOldRequest";
  }
  protected:
  explicit ImMessage_PullOldRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrTargetIdFieldNumber = 6,
    kTargetFieldNumber = 1,
    kMinSeqFieldNumber = 2,
    kMaxSeqFieldNumber = 3,
    kTargetIdFieldNumber = 5,
    kCountFieldNumber = 4,
  };
  // string strTargetId = 6;
  void clear_strtargetid();
  const std::string& strtargetid() const;
  void set_strtargetid(const std::string& value);
  void set_strtargetid(std::string&& value);
  void set_strtargetid(const char* value);
  void set_strtargetid(const char* value, size_t size);
  std::string* mutable_strtargetid();
  std::string* release_strtargetid();
  void set_allocated_strtargetid(std::string* strtargetid);
  private:
  const std::string& _internal_strtargetid() const;
  void _internal_set_strtargetid(const std::string& value);
  std::string* _internal_mutable_strtargetid();
  public:

  // .AcFunDanmu.Im.Basic.User target = 1;
  bool has_target() const;
  private:
  bool _internal_has_target() const;
  public:
  void clear_target();
  const ::AcFunDanmu::Im::Basic_User& target() const;
  ::AcFunDanmu::Im::Basic_User* release_target();
  ::AcFunDanmu::Im::Basic_User* mutable_target();
  void set_allocated_target(::AcFunDanmu::Im::Basic_User* target);
  private:
  const ::AcFunDanmu::Im::Basic_User& _internal_target() const;
  ::AcFunDanmu::Im::Basic_User* _internal_mutable_target();
  public:
  void unsafe_arena_set_allocated_target(
      ::AcFunDanmu::Im::Basic_User* target);
  ::AcFunDanmu::Im::Basic_User* unsafe_arena_release_target();

  // int64 minSeq = 2;
  void clear_minseq();
  ::PROTOBUF_NAMESPACE_ID::int64 minseq() const;
  void set_minseq(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_minseq() const;
  void _internal_set_minseq(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 maxSeq = 3;
  void clear_maxseq();
  ::PROTOBUF_NAMESPACE_ID::int64 maxseq() const;
  void set_maxseq(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_maxseq() const;
  void _internal_set_maxseq(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 targetId = 5;
  void clear_targetid();
  ::PROTOBUF_NAMESPACE_ID::int64 targetid() const;
  void set_targetid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_targetid() const;
  void _internal_set_targetid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 count = 4;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.ImMessage.PullOldRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strtargetid_;
  ::AcFunDanmu::Im::Basic_User* target_;
  ::PROTOBUF_NAMESPACE_ID::int64 minseq_;
  ::PROTOBUF_NAMESPACE_ID::int64 maxseq_;
  ::PROTOBUF_NAMESPACE_ID::int64 targetid_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class ImMessage_PullOldResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.ImMessage.PullOldResponse) */ {
 public:
  inline ImMessage_PullOldResponse() : ImMessage_PullOldResponse(nullptr) {}
  virtual ~ImMessage_PullOldResponse();

  ImMessage_PullOldResponse(const ImMessage_PullOldResponse& from);
  ImMessage_PullOldResponse(ImMessage_PullOldResponse&& from) noexcept
    : ImMessage_PullOldResponse() {
    *this = ::std::move(from);
  }

  inline ImMessage_PullOldResponse& operator=(const ImMessage_PullOldResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImMessage_PullOldResponse& operator=(ImMessage_PullOldResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImMessage_PullOldResponse& default_instance();

  static inline const ImMessage_PullOldResponse* internal_default_instance() {
    return reinterpret_cast<const ImMessage_PullOldResponse*>(
               &_ImMessage_PullOldResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(ImMessage_PullOldResponse& a, ImMessage_PullOldResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ImMessage_PullOldResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImMessage_PullOldResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImMessage_PullOldResponse* New() const final {
    return CreateMaybeMessage<ImMessage_PullOldResponse>(nullptr);
  }

  ImMessage_PullOldResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImMessage_PullOldResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImMessage_PullOldResponse& from);
  void MergeFrom(const ImMessage_PullOldResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImMessage_PullOldResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.ImMessage.PullOldResponse";
  }
  protected:
  explicit ImMessage_PullOldResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 1,
    kServerTimeFieldNumber = 2,
  };
  // repeated .AcFunDanmu.Im.ImMessage.Message messages = 1;
  int messages_size() const;
  private:
  int _internal_messages_size() const;
  public:
  void clear_messages();
  ::AcFunDanmu::Im::ImMessage_Message* mutable_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_Message >*
      mutable_messages();
  private:
  const ::AcFunDanmu::Im::ImMessage_Message& _internal_messages(int index) const;
  ::AcFunDanmu::Im::ImMessage_Message* _internal_add_messages();
  public:
  const ::AcFunDanmu::Im::ImMessage_Message& messages(int index) const;
  ::AcFunDanmu::Im::ImMessage_Message* add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_Message >&
      messages() const;

  // int64 serverTime = 2;
  void clear_servertime();
  ::PROTOBUF_NAMESPACE_ID::int64 servertime() const;
  void set_servertime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_servertime() const;
  void _internal_set_servertime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.ImMessage.PullOldResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_Message > messages_;
  ::PROTOBUF_NAMESPACE_ID::int64 servertime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class ImMessage_PullNewRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.ImMessage.PullNewRequest) */ {
 public:
  inline ImMessage_PullNewRequest() : ImMessage_PullNewRequest(nullptr) {}
  virtual ~ImMessage_PullNewRequest();

  ImMessage_PullNewRequest(const ImMessage_PullNewRequest& from);
  ImMessage_PullNewRequest(ImMessage_PullNewRequest&& from) noexcept
    : ImMessage_PullNewRequest() {
    *this = ::std::move(from);
  }

  inline ImMessage_PullNewRequest& operator=(const ImMessage_PullNewRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImMessage_PullNewRequest& operator=(ImMessage_PullNewRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImMessage_PullNewRequest& default_instance();

  static inline const ImMessage_PullNewRequest* internal_default_instance() {
    return reinterpret_cast<const ImMessage_PullNewRequest*>(
               &_ImMessage_PullNewRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(ImMessage_PullNewRequest& a, ImMessage_PullNewRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ImMessage_PullNewRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImMessage_PullNewRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImMessage_PullNewRequest* New() const final {
    return CreateMaybeMessage<ImMessage_PullNewRequest>(nullptr);
  }

  ImMessage_PullNewRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImMessage_PullNewRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImMessage_PullNewRequest& from);
  void MergeFrom(const ImMessage_PullNewRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImMessage_PullNewRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.ImMessage.PullNewRequest";
  }
  protected:
  explicit ImMessage_PullNewRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrTargetIdFieldNumber = 5,
    kTargetFieldNumber = 1,
    kMinSeqFieldNumber = 2,
    kTargetIdFieldNumber = 4,
    kCountFieldNumber = 3,
  };
  // string strTargetId = 5;
  void clear_strtargetid();
  const std::string& strtargetid() const;
  void set_strtargetid(const std::string& value);
  void set_strtargetid(std::string&& value);
  void set_strtargetid(const char* value);
  void set_strtargetid(const char* value, size_t size);
  std::string* mutable_strtargetid();
  std::string* release_strtargetid();
  void set_allocated_strtargetid(std::string* strtargetid);
  private:
  const std::string& _internal_strtargetid() const;
  void _internal_set_strtargetid(const std::string& value);
  std::string* _internal_mutable_strtargetid();
  public:

  // .AcFunDanmu.Im.Basic.User target = 1;
  bool has_target() const;
  private:
  bool _internal_has_target() const;
  public:
  void clear_target();
  const ::AcFunDanmu::Im::Basic_User& target() const;
  ::AcFunDanmu::Im::Basic_User* release_target();
  ::AcFunDanmu::Im::Basic_User* mutable_target();
  void set_allocated_target(::AcFunDanmu::Im::Basic_User* target);
  private:
  const ::AcFunDanmu::Im::Basic_User& _internal_target() const;
  ::AcFunDanmu::Im::Basic_User* _internal_mutable_target();
  public:
  void unsafe_arena_set_allocated_target(
      ::AcFunDanmu::Im::Basic_User* target);
  ::AcFunDanmu::Im::Basic_User* unsafe_arena_release_target();

  // int64 minSeq = 2;
  void clear_minseq();
  ::PROTOBUF_NAMESPACE_ID::int64 minseq() const;
  void set_minseq(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_minseq() const;
  void _internal_set_minseq(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 targetId = 4;
  void clear_targetid();
  ::PROTOBUF_NAMESPACE_ID::int64 targetid() const;
  void set_targetid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_targetid() const;
  void _internal_set_targetid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 count = 3;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.ImMessage.PullNewRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strtargetid_;
  ::AcFunDanmu::Im::Basic_User* target_;
  ::PROTOBUF_NAMESPACE_ID::int64 minseq_;
  ::PROTOBUF_NAMESPACE_ID::int64 targetid_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class ImMessage_PullNewResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.ImMessage.PullNewResponse) */ {
 public:
  inline ImMessage_PullNewResponse() : ImMessage_PullNewResponse(nullptr) {}
  virtual ~ImMessage_PullNewResponse();

  ImMessage_PullNewResponse(const ImMessage_PullNewResponse& from);
  ImMessage_PullNewResponse(ImMessage_PullNewResponse&& from) noexcept
    : ImMessage_PullNewResponse() {
    *this = ::std::move(from);
  }

  inline ImMessage_PullNewResponse& operator=(const ImMessage_PullNewResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImMessage_PullNewResponse& operator=(ImMessage_PullNewResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImMessage_PullNewResponse& default_instance();

  static inline const ImMessage_PullNewResponse* internal_default_instance() {
    return reinterpret_cast<const ImMessage_PullNewResponse*>(
               &_ImMessage_PullNewResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(ImMessage_PullNewResponse& a, ImMessage_PullNewResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ImMessage_PullNewResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImMessage_PullNewResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImMessage_PullNewResponse* New() const final {
    return CreateMaybeMessage<ImMessage_PullNewResponse>(nullptr);
  }

  ImMessage_PullNewResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImMessage_PullNewResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImMessage_PullNewResponse& from);
  void MergeFrom(const ImMessage_PullNewResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImMessage_PullNewResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.ImMessage.PullNewResponse";
  }
  protected:
  explicit ImMessage_PullNewResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 1,
  };
  // repeated .AcFunDanmu.Im.ImMessage.Message messages = 1;
  int messages_size() const;
  private:
  int _internal_messages_size() const;
  public:
  void clear_messages();
  ::AcFunDanmu::Im::ImMessage_Message* mutable_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_Message >*
      mutable_messages();
  private:
  const ::AcFunDanmu::Im::ImMessage_Message& _internal_messages(int index) const;
  ::AcFunDanmu::Im::ImMessage_Message* _internal_add_messages();
  public:
  const ::AcFunDanmu::Im::ImMessage_Message& messages(int index) const;
  ::AcFunDanmu::Im::ImMessage_Message* add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_Message >&
      messages() const;

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.ImMessage.PullNewResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_Message > messages_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class ImMessage_SessionListRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.ImMessage.SessionListRequest) */ {
 public:
  inline ImMessage_SessionListRequest() : ImMessage_SessionListRequest(nullptr) {}
  virtual ~ImMessage_SessionListRequest();

  ImMessage_SessionListRequest(const ImMessage_SessionListRequest& from);
  ImMessage_SessionListRequest(ImMessage_SessionListRequest&& from) noexcept
    : ImMessage_SessionListRequest() {
    *this = ::std::move(from);
  }

  inline ImMessage_SessionListRequest& operator=(const ImMessage_SessionListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImMessage_SessionListRequest& operator=(ImMessage_SessionListRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImMessage_SessionListRequest& default_instance();

  static inline const ImMessage_SessionListRequest* internal_default_instance() {
    return reinterpret_cast<const ImMessage_SessionListRequest*>(
               &_ImMessage_SessionListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(ImMessage_SessionListRequest& a, ImMessage_SessionListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ImMessage_SessionListRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImMessage_SessionListRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImMessage_SessionListRequest* New() const final {
    return CreateMaybeMessage<ImMessage_SessionListRequest>(nullptr);
  }

  ImMessage_SessionListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImMessage_SessionListRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImMessage_SessionListRequest& from);
  void MergeFrom(const ImMessage_SessionListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImMessage_SessionListRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.ImMessage.SessionListRequest";
  }
  protected:
  explicit ImMessage_SessionListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSyncCookieFieldNumber = 1,
    kCategoryIdFieldNumber = 2,
    kLocalDataStatusFieldNumber = 3,
  };
  // .AcFunDanmu.Im.Basic.SyncCookie syncCookie = 1;
  bool has_synccookie() const;
  private:
  bool _internal_has_synccookie() const;
  public:
  void clear_synccookie();
  const ::AcFunDanmu::Im::Basic_SyncCookie& synccookie() const;
  ::AcFunDanmu::Im::Basic_SyncCookie* release_synccookie();
  ::AcFunDanmu::Im::Basic_SyncCookie* mutable_synccookie();
  void set_allocated_synccookie(::AcFunDanmu::Im::Basic_SyncCookie* synccookie);
  private:
  const ::AcFunDanmu::Im::Basic_SyncCookie& _internal_synccookie() const;
  ::AcFunDanmu::Im::Basic_SyncCookie* _internal_mutable_synccookie();
  public:
  void unsafe_arena_set_allocated_synccookie(
      ::AcFunDanmu::Im::Basic_SyncCookie* synccookie);
  ::AcFunDanmu::Im::Basic_SyncCookie* unsafe_arena_release_synccookie();

  // int32 categoryId = 2;
  void clear_categoryid();
  ::PROTOBUF_NAMESPACE_ID::int32 categoryid() const;
  void set_categoryid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_categoryid() const;
  void _internal_set_categoryid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 localDataStatus = 3;
  void clear_localdatastatus();
  ::PROTOBUF_NAMESPACE_ID::int32 localdatastatus() const;
  void set_localdatastatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_localdatastatus() const;
  void _internal_set_localdatastatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.ImMessage.SessionListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::AcFunDanmu::Im::Basic_SyncCookie* synccookie_;
  ::PROTOBUF_NAMESPACE_ID::int32 categoryid_;
  ::PROTOBUF_NAMESPACE_ID::int32 localdatastatus_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class ImMessage_ChatSession PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.ImMessage.ChatSession) */ {
 public:
  inline ImMessage_ChatSession() : ImMessage_ChatSession(nullptr) {}
  virtual ~ImMessage_ChatSession();

  ImMessage_ChatSession(const ImMessage_ChatSession& from);
  ImMessage_ChatSession(ImMessage_ChatSession&& from) noexcept
    : ImMessage_ChatSession() {
    *this = ::std::move(from);
  }

  inline ImMessage_ChatSession& operator=(const ImMessage_ChatSession& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImMessage_ChatSession& operator=(ImMessage_ChatSession&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImMessage_ChatSession& default_instance();

  static inline const ImMessage_ChatSession* internal_default_instance() {
    return reinterpret_cast<const ImMessage_ChatSession*>(
               &_ImMessage_ChatSession_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(ImMessage_ChatSession& a, ImMessage_ChatSession& b) {
    a.Swap(&b);
  }
  inline void Swap(ImMessage_ChatSession* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImMessage_ChatSession* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImMessage_ChatSession* New() const final {
    return CreateMaybeMessage<ImMessage_ChatSession>(nullptr);
  }

  ImMessage_ChatSession* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImMessage_ChatSession>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImMessage_ChatSession& from);
  void MergeFrom(const ImMessage_ChatSession& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImMessage_ChatSession* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.ImMessage.ChatSession";
  }
  protected:
  explicit ImMessage_ChatSession(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatestMessageFieldNumber = 5,
    kRemindBodyFieldNumber = 20,
    kCursorFieldNumber = 13,
    kStrTargetIdFieldNumber = 19,
    kTargetFieldNumber = 1,
    kMaxSeqIdFieldNumber = 2,
    kReadSeqIdFieldNumber = 3,
    kUnreadMsgCountFieldNumber = 4,
    kChatTargetTypeFieldNumber = 8,
    kTargetIdFieldNumber = 9,
    kActiveTimeFieldNumber = 10,
    kPriorityFieldNumber = 11,
    kCategoryIdFieldNumber = 12,
    kAccountTypeFieldNumber = 14,
    kAggregateSessionFieldNumber = 15,
    kExpireAtFieldNumber = 17,
    kEffectiveFromFieldNumber = 18,
    kJumpCategoryIdFieldNumber = 16,
    kTargetReadSeqIdFieldNumber = 21,
  };
  // repeated .AcFunDanmu.Im.ImMessage.Message latestMessage = 5;
  int latestmessage_size() const;
  private:
  int _internal_latestmessage_size() const;
  public:
  void clear_latestmessage();
  ::AcFunDanmu::Im::ImMessage_Message* mutable_latestmessage(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_Message >*
      mutable_latestmessage();
  private:
  const ::AcFunDanmu::Im::ImMessage_Message& _internal_latestmessage(int index) const;
  ::AcFunDanmu::Im::ImMessage_Message* _internal_add_latestmessage();
  public:
  const ::AcFunDanmu::Im::ImMessage_Message& latestmessage(int index) const;
  ::AcFunDanmu::Im::ImMessage_Message* add_latestmessage();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_Message >&
      latestmessage() const;

  // repeated .AcFunDanmu.Im.ImMessage.RemindBody remindBody = 20;
  int remindbody_size() const;
  private:
  int _internal_remindbody_size() const;
  public:
  void clear_remindbody();
  ::AcFunDanmu::Im::ImMessage_RemindBody* mutable_remindbody(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_RemindBody >*
      mutable_remindbody();
  private:
  const ::AcFunDanmu::Im::ImMessage_RemindBody& _internal_remindbody(int index) const;
  ::AcFunDanmu::Im::ImMessage_RemindBody* _internal_add_remindbody();
  public:
  const ::AcFunDanmu::Im::ImMessage_RemindBody& remindbody(int index) const;
  ::AcFunDanmu::Im::ImMessage_RemindBody* add_remindbody();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_RemindBody >&
      remindbody() const;

  // string cursor = 13;
  void clear_cursor();
  const std::string& cursor() const;
  void set_cursor(const std::string& value);
  void set_cursor(std::string&& value);
  void set_cursor(const char* value);
  void set_cursor(const char* value, size_t size);
  std::string* mutable_cursor();
  std::string* release_cursor();
  void set_allocated_cursor(std::string* cursor);
  private:
  const std::string& _internal_cursor() const;
  void _internal_set_cursor(const std::string& value);
  std::string* _internal_mutable_cursor();
  public:

  // string strTargetId = 19;
  void clear_strtargetid();
  const std::string& strtargetid() const;
  void set_strtargetid(const std::string& value);
  void set_strtargetid(std::string&& value);
  void set_strtargetid(const char* value);
  void set_strtargetid(const char* value, size_t size);
  std::string* mutable_strtargetid();
  std::string* release_strtargetid();
  void set_allocated_strtargetid(std::string* strtargetid);
  private:
  const std::string& _internal_strtargetid() const;
  void _internal_set_strtargetid(const std::string& value);
  std::string* _internal_mutable_strtargetid();
  public:

  // .AcFunDanmu.Im.Basic.User target = 1;
  bool has_target() const;
  private:
  bool _internal_has_target() const;
  public:
  void clear_target();
  const ::AcFunDanmu::Im::Basic_User& target() const;
  ::AcFunDanmu::Im::Basic_User* release_target();
  ::AcFunDanmu::Im::Basic_User* mutable_target();
  void set_allocated_target(::AcFunDanmu::Im::Basic_User* target);
  private:
  const ::AcFunDanmu::Im::Basic_User& _internal_target() const;
  ::AcFunDanmu::Im::Basic_User* _internal_mutable_target();
  public:
  void unsafe_arena_set_allocated_target(
      ::AcFunDanmu::Im::Basic_User* target);
  ::AcFunDanmu::Im::Basic_User* unsafe_arena_release_target();

  // int64 maxSeqId = 2;
  void clear_maxseqid();
  ::PROTOBUF_NAMESPACE_ID::int64 maxseqid() const;
  void set_maxseqid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_maxseqid() const;
  void _internal_set_maxseqid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 readSeqId = 3;
  void clear_readseqid();
  ::PROTOBUF_NAMESPACE_ID::int64 readseqid() const;
  void set_readseqid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_readseqid() const;
  void _internal_set_readseqid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 unreadMsgCount = 4;
  void clear_unreadmsgcount();
  ::PROTOBUF_NAMESPACE_ID::int32 unreadmsgcount() const;
  void set_unreadmsgcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_unreadmsgcount() const;
  void _internal_set_unreadmsgcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .AcFunDanmu.Im.ImMessage.ChatTargetType chatTargetType = 8;
  void clear_chattargettype();
  ::AcFunDanmu::Im::ImMessage_ChatTargetType chattargettype() const;
  void set_chattargettype(::AcFunDanmu::Im::ImMessage_ChatTargetType value);
  private:
  ::AcFunDanmu::Im::ImMessage_ChatTargetType _internal_chattargettype() const;
  void _internal_set_chattargettype(::AcFunDanmu::Im::ImMessage_ChatTargetType value);
  public:

  // int64 targetId = 9;
  void clear_targetid();
  ::PROTOBUF_NAMESPACE_ID::int64 targetid() const;
  void set_targetid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_targetid() const;
  void _internal_set_targetid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 activeTime = 10;
  void clear_activetime();
  ::PROTOBUF_NAMESPACE_ID::int64 activetime() const;
  void set_activetime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_activetime() const;
  void _internal_set_activetime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 priority = 11;
  void clear_priority();
  ::PROTOBUF_NAMESPACE_ID::int32 priority() const;
  void set_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_priority() const;
  void _internal_set_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 categoryId = 12;
  void clear_categoryid();
  ::PROTOBUF_NAMESPACE_ID::int32 categoryid() const;
  void set_categoryid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_categoryid() const;
  void _internal_set_categoryid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 accountType = 14;
  void clear_accounttype();
  ::PROTOBUF_NAMESPACE_ID::int32 accounttype() const;
  void set_accounttype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_accounttype() const;
  void _internal_set_accounttype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool aggregateSession = 15;
  void clear_aggregatesession();
  bool aggregatesession() const;
  void set_aggregatesession(bool value);
  private:
  bool _internal_aggregatesession() const;
  void _internal_set_aggregatesession(bool value);
  public:

  // int64 expireAt = 17;
  void clear_expireat();
  ::PROTOBUF_NAMESPACE_ID::int64 expireat() const;
  void set_expireat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_expireat() const;
  void _internal_set_expireat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 effectiveFrom = 18;
  void clear_effectivefrom();
  ::PROTOBUF_NAMESPACE_ID::int64 effectivefrom() const;
  void set_effectivefrom(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_effectivefrom() const;
  void _internal_set_effectivefrom(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 jumpCategoryId = 16;
  void clear_jumpcategoryid();
  ::PROTOBUF_NAMESPACE_ID::int32 jumpcategoryid() const;
  void set_jumpcategoryid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_jumpcategoryid() const;
  void _internal_set_jumpcategoryid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 targetReadSeqId = 21;
  void clear_targetreadseqid();
  ::PROTOBUF_NAMESPACE_ID::int64 targetreadseqid() const;
  void set_targetreadseqid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_targetreadseqid() const;
  void _internal_set_targetreadseqid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.ImMessage.ChatSession)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_Message > latestmessage_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_RemindBody > remindbody_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cursor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strtargetid_;
  ::AcFunDanmu::Im::Basic_User* target_;
  ::PROTOBUF_NAMESPACE_ID::int64 maxseqid_;
  ::PROTOBUF_NAMESPACE_ID::int64 readseqid_;
  ::PROTOBUF_NAMESPACE_ID::int32 unreadmsgcount_;
  int chattargettype_;
  ::PROTOBUF_NAMESPACE_ID::int64 targetid_;
  ::PROTOBUF_NAMESPACE_ID::int64 activetime_;
  ::PROTOBUF_NAMESPACE_ID::int32 priority_;
  ::PROTOBUF_NAMESPACE_ID::int32 categoryid_;
  ::PROTOBUF_NAMESPACE_ID::int32 accounttype_;
  bool aggregatesession_;
  ::PROTOBUF_NAMESPACE_ID::int64 expireat_;
  ::PROTOBUF_NAMESPACE_ID::int64 effectivefrom_;
  ::PROTOBUF_NAMESPACE_ID::int32 jumpcategoryid_;
  ::PROTOBUF_NAMESPACE_ID::int64 targetreadseqid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class ImMessage_Reminder PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.ImMessage.Reminder) */ {
 public:
  inline ImMessage_Reminder() : ImMessage_Reminder(nullptr) {}
  virtual ~ImMessage_Reminder();

  ImMessage_Reminder(const ImMessage_Reminder& from);
  ImMessage_Reminder(ImMessage_Reminder&& from) noexcept
    : ImMessage_Reminder() {
    *this = ::std::move(from);
  }

  inline ImMessage_Reminder& operator=(const ImMessage_Reminder& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImMessage_Reminder& operator=(ImMessage_Reminder&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImMessage_Reminder& default_instance();

  static inline const ImMessage_Reminder* internal_default_instance() {
    return reinterpret_cast<const ImMessage_Reminder*>(
               &_ImMessage_Reminder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(ImMessage_Reminder& a, ImMessage_Reminder& b) {
    a.Swap(&b);
  }
  inline void Swap(ImMessage_Reminder* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImMessage_Reminder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImMessage_Reminder* New() const final {
    return CreateMaybeMessage<ImMessage_Reminder>(nullptr);
  }

  ImMessage_Reminder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImMessage_Reminder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImMessage_Reminder& from);
  void MergeFrom(const ImMessage_Reminder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImMessage_Reminder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.ImMessage.Reminder";
  }
  protected:
  explicit ImMessage_Reminder(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemindBodyFieldNumber = 2,
    kOriginTextFieldNumber = 1,
  };
  // repeated .AcFunDanmu.Im.ImMessage.RemindBody remindBody = 2;
  int remindbody_size() const;
  private:
  int _internal_remindbody_size() const;
  public:
  void clear_remindbody();
  ::AcFunDanmu::Im::ImMessage_RemindBody* mutable_remindbody(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_RemindBody >*
      mutable_remindbody();
  private:
  const ::AcFunDanmu::Im::ImMessage_RemindBody& _internal_remindbody(int index) const;
  ::AcFunDanmu::Im::ImMessage_RemindBody* _internal_add_remindbody();
  public:
  const ::AcFunDanmu::Im::ImMessage_RemindBody& remindbody(int index) const;
  ::AcFunDanmu::Im::ImMessage_RemindBody* add_remindbody();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_RemindBody >&
      remindbody() const;

  // string originText = 1;
  void clear_origintext();
  const std::string& origintext() const;
  void set_origintext(const std::string& value);
  void set_origintext(std::string&& value);
  void set_origintext(const char* value);
  void set_origintext(const char* value, size_t size);
  std::string* mutable_origintext();
  std::string* release_origintext();
  void set_allocated_origintext(std::string* origintext);
  private:
  const std::string& _internal_origintext() const;
  void _internal_set_origintext(const std::string& value);
  std::string* _internal_mutable_origintext();
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.ImMessage.Reminder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_RemindBody > remindbody_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr origintext_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class ImMessage_RemindBody PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.ImMessage.RemindBody) */ {
 public:
  inline ImMessage_RemindBody() : ImMessage_RemindBody(nullptr) {}
  virtual ~ImMessage_RemindBody();

  ImMessage_RemindBody(const ImMessage_RemindBody& from);
  ImMessage_RemindBody(ImMessage_RemindBody&& from) noexcept
    : ImMessage_RemindBody() {
    *this = ::std::move(from);
  }

  inline ImMessage_RemindBody& operator=(const ImMessage_RemindBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImMessage_RemindBody& operator=(ImMessage_RemindBody&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImMessage_RemindBody& default_instance();

  static inline const ImMessage_RemindBody* internal_default_instance() {
    return reinterpret_cast<const ImMessage_RemindBody*>(
               &_ImMessage_RemindBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(ImMessage_RemindBody& a, ImMessage_RemindBody& b) {
    a.Swap(&b);
  }
  inline void Swap(ImMessage_RemindBody* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImMessage_RemindBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImMessage_RemindBody* New() const final {
    return CreateMaybeMessage<ImMessage_RemindBody>(nullptr);
  }

  ImMessage_RemindBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImMessage_RemindBody>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImMessage_RemindBody& from);
  void MergeFrom(const ImMessage_RemindBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImMessage_RemindBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.ImMessage.RemindBody";
  }
  protected:
  explicit ImMessage_RemindBody(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ImMessage_RemindBody_RemindType RemindType;
  static constexpr RemindType UNKNOWN =
    ImMessage_RemindBody_RemindType_UNKNOWN;
  static constexpr RemindType AT_ALL =
    ImMessage_RemindBody_RemindType_AT_ALL;
  static constexpr RemindType AT_USER =
    ImMessage_RemindBody_RemindType_AT_USER;
  static constexpr RemindType GROUP_BULLETIN =
    ImMessage_RemindBody_RemindType_GROUP_BULLETIN;
  static constexpr RemindType RECEIPT_MESSAGE =
    ImMessage_RemindBody_RemindType_RECEIPT_MESSAGE;
  static constexpr RemindType GROUP_JOIN_REQUEST =
    ImMessage_RemindBody_RemindType_GROUP_JOIN_REQUEST;
  static inline bool RemindType_IsValid(int value) {
    return ImMessage_RemindBody_RemindType_IsValid(value);
  }
  static constexpr RemindType RemindType_MIN =
    ImMessage_RemindBody_RemindType_RemindType_MIN;
  static constexpr RemindType RemindType_MAX =
    ImMessage_RemindBody_RemindType_RemindType_MAX;
  static constexpr int RemindType_ARRAYSIZE =
    ImMessage_RemindBody_RemindType_RemindType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RemindType_descriptor() {
    return ImMessage_RemindBody_RemindType_descriptor();
  }
  template<typename T>
  static inline const std::string& RemindType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RemindType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RemindType_Name.");
    return ImMessage_RemindBody_RemindType_Name(enum_t_value);
  }
  static inline bool RemindType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RemindType* value) {
    return ImMessage_RemindBody_RemindType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 4,
    kSeqIdFieldNumber = 2,
    kTargetIdFieldNumber = 3,
    kRemindTypeFieldNumber = 1,
    kStartIndexFieldNumber = 5,
    kLengthFieldNumber = 6,
  };
  // string userName = 4;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // int64 seqId = 2;
  void clear_seqid();
  ::PROTOBUF_NAMESPACE_ID::int64 seqid() const;
  void set_seqid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_seqid() const;
  void _internal_set_seqid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 targetId = 3;
  void clear_targetid();
  ::PROTOBUF_NAMESPACE_ID::int64 targetid() const;
  void set_targetid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_targetid() const;
  void _internal_set_targetid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .AcFunDanmu.Im.ImMessage.RemindBody.RemindType remindType = 1;
  void clear_remindtype();
  ::AcFunDanmu::Im::ImMessage_RemindBody_RemindType remindtype() const;
  void set_remindtype(::AcFunDanmu::Im::ImMessage_RemindBody_RemindType value);
  private:
  ::AcFunDanmu::Im::ImMessage_RemindBody_RemindType _internal_remindtype() const;
  void _internal_set_remindtype(::AcFunDanmu::Im::ImMessage_RemindBody_RemindType value);
  public:

  // int32 startIndex = 5;
  void clear_startindex();
  ::PROTOBUF_NAMESPACE_ID::int32 startindex() const;
  void set_startindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_startindex() const;
  void _internal_set_startindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 length = 6;
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::int32 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_length() const;
  void _internal_set_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.ImMessage.RemindBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::int64 seqid_;
  ::PROTOBUF_NAMESPACE_ID::int64 targetid_;
  int remindtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 startindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 length_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class ImMessage_ChatTarget PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.ImMessage.ChatTarget) */ {
 public:
  inline ImMessage_ChatTarget() : ImMessage_ChatTarget(nullptr) {}
  virtual ~ImMessage_ChatTarget();

  ImMessage_ChatTarget(const ImMessage_ChatTarget& from);
  ImMessage_ChatTarget(ImMessage_ChatTarget&& from) noexcept
    : ImMessage_ChatTarget() {
    *this = ::std::move(from);
  }

  inline ImMessage_ChatTarget& operator=(const ImMessage_ChatTarget& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImMessage_ChatTarget& operator=(ImMessage_ChatTarget&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImMessage_ChatTarget& default_instance();

  static inline const ImMessage_ChatTarget* internal_default_instance() {
    return reinterpret_cast<const ImMessage_ChatTarget*>(
               &_ImMessage_ChatTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(ImMessage_ChatTarget& a, ImMessage_ChatTarget& b) {
    a.Swap(&b);
  }
  inline void Swap(ImMessage_ChatTarget* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImMessage_ChatTarget* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImMessage_ChatTarget* New() const final {
    return CreateMaybeMessage<ImMessage_ChatTarget>(nullptr);
  }

  ImMessage_ChatTarget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImMessage_ChatTarget>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImMessage_ChatTarget& from);
  void MergeFrom(const ImMessage_ChatTarget& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImMessage_ChatTarget* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.ImMessage.ChatTarget";
  }
  protected:
  explicit ImMessage_ChatTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetIdFieldNumber = 1,
    kTargetTypeFieldNumber = 2,
  };
  // string targetId = 1;
  void clear_targetid();
  const std::string& targetid() const;
  void set_targetid(const std::string& value);
  void set_targetid(std::string&& value);
  void set_targetid(const char* value);
  void set_targetid(const char* value, size_t size);
  std::string* mutable_targetid();
  std::string* release_targetid();
  void set_allocated_targetid(std::string* targetid);
  private:
  const std::string& _internal_targetid() const;
  void _internal_set_targetid(const std::string& value);
  std::string* _internal_mutable_targetid();
  public:

  // .AcFunDanmu.Im.ImMessage.ChatTargetType targetType = 2;
  void clear_targettype();
  ::AcFunDanmu::Im::ImMessage_ChatTargetType targettype() const;
  void set_targettype(::AcFunDanmu::Im::ImMessage_ChatTargetType value);
  private:
  ::AcFunDanmu::Im::ImMessage_ChatTargetType _internal_targettype() const;
  void _internal_set_targettype(::AcFunDanmu::Im::ImMessage_ChatTargetType value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.ImMessage.ChatTarget)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr targetid_;
  int targettype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class ImMessage_SessionListResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.ImMessage.SessionListResponse) */ {
 public:
  inline ImMessage_SessionListResponse() : ImMessage_SessionListResponse(nullptr) {}
  virtual ~ImMessage_SessionListResponse();

  ImMessage_SessionListResponse(const ImMessage_SessionListResponse& from);
  ImMessage_SessionListResponse(ImMessage_SessionListResponse&& from) noexcept
    : ImMessage_SessionListResponse() {
    *this = ::std::move(from);
  }

  inline ImMessage_SessionListResponse& operator=(const ImMessage_SessionListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImMessage_SessionListResponse& operator=(ImMessage_SessionListResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImMessage_SessionListResponse& default_instance();

  static inline const ImMessage_SessionListResponse* internal_default_instance() {
    return reinterpret_cast<const ImMessage_SessionListResponse*>(
               &_ImMessage_SessionListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(ImMessage_SessionListResponse& a, ImMessage_SessionListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ImMessage_SessionListResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImMessage_SessionListResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImMessage_SessionListResponse* New() const final {
    return CreateMaybeMessage<ImMessage_SessionListResponse>(nullptr);
  }

  ImMessage_SessionListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImMessage_SessionListResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImMessage_SessionListResponse& from);
  void MergeFrom(const ImMessage_SessionListResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImMessage_SessionListResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.ImMessage.SessionListResponse";
  }
  protected:
  explicit ImMessage_SessionListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionsFieldNumber = 2,
    kSyncCookieFieldNumber = 1,
    kServerTimeFieldNumber = 4,
    kNotFullFetchFieldNumber = 3,
    kClearLocalDataFieldNumber = 5,
    kCategoryIdFieldNumber = 6,
    kClientDataStatusFieldNumber = 7,
  };
  // repeated .AcFunDanmu.Im.ImMessage.ChatSession sessions = 2;
  int sessions_size() const;
  private:
  int _internal_sessions_size() const;
  public:
  void clear_sessions();
  ::AcFunDanmu::Im::ImMessage_ChatSession* mutable_sessions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_ChatSession >*
      mutable_sessions();
  private:
  const ::AcFunDanmu::Im::ImMessage_ChatSession& _internal_sessions(int index) const;
  ::AcFunDanmu::Im::ImMessage_ChatSession* _internal_add_sessions();
  public:
  const ::AcFunDanmu::Im::ImMessage_ChatSession& sessions(int index) const;
  ::AcFunDanmu::Im::ImMessage_ChatSession* add_sessions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_ChatSession >&
      sessions() const;

  // .AcFunDanmu.Im.Basic.SyncCookie syncCookie = 1;
  bool has_synccookie() const;
  private:
  bool _internal_has_synccookie() const;
  public:
  void clear_synccookie();
  const ::AcFunDanmu::Im::Basic_SyncCookie& synccookie() const;
  ::AcFunDanmu::Im::Basic_SyncCookie* release_synccookie();
  ::AcFunDanmu::Im::Basic_SyncCookie* mutable_synccookie();
  void set_allocated_synccookie(::AcFunDanmu::Im::Basic_SyncCookie* synccookie);
  private:
  const ::AcFunDanmu::Im::Basic_SyncCookie& _internal_synccookie() const;
  ::AcFunDanmu::Im::Basic_SyncCookie* _internal_mutable_synccookie();
  public:
  void unsafe_arena_set_allocated_synccookie(
      ::AcFunDanmu::Im::Basic_SyncCookie* synccookie);
  ::AcFunDanmu::Im::Basic_SyncCookie* unsafe_arena_release_synccookie();

  // int64 serverTime = 4;
  void clear_servertime();
  ::PROTOBUF_NAMESPACE_ID::int64 servertime() const;
  void set_servertime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_servertime() const;
  void _internal_set_servertime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool notFullFetch = 3;
  void clear_notfullfetch();
  bool notfullfetch() const;
  void set_notfullfetch(bool value);
  private:
  bool _internal_notfullfetch() const;
  void _internal_set_notfullfetch(bool value);
  public:

  // bool clearLocalData = 5;
  void clear_clearlocaldata();
  bool clearlocaldata() const;
  void set_clearlocaldata(bool value);
  private:
  bool _internal_clearlocaldata() const;
  void _internal_set_clearlocaldata(bool value);
  public:

  // int32 categoryId = 6;
  void clear_categoryid();
  ::PROTOBUF_NAMESPACE_ID::int32 categoryid() const;
  void set_categoryid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_categoryid() const;
  void _internal_set_categoryid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 clientDataStatus = 7;
  void clear_clientdatastatus();
  ::PROTOBUF_NAMESPACE_ID::int32 clientdatastatus() const;
  void set_clientdatastatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_clientdatastatus() const;
  void _internal_set_clientdatastatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.ImMessage.SessionListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_ChatSession > sessions_;
  ::AcFunDanmu::Im::Basic_SyncCookie* synccookie_;
  ::PROTOBUF_NAMESPACE_ID::int64 servertime_;
  bool notfullfetch_;
  bool clearlocaldata_;
  ::PROTOBUF_NAMESPACE_ID::int32 categoryid_;
  ::PROTOBUF_NAMESPACE_ID::int32 clientdatastatus_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class ImMessage_SessionPageListRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.ImMessage.SessionPageListRequest) */ {
 public:
  inline ImMessage_SessionPageListRequest() : ImMessage_SessionPageListRequest(nullptr) {}
  virtual ~ImMessage_SessionPageListRequest();

  ImMessage_SessionPageListRequest(const ImMessage_SessionPageListRequest& from);
  ImMessage_SessionPageListRequest(ImMessage_SessionPageListRequest&& from) noexcept
    : ImMessage_SessionPageListRequest() {
    *this = ::std::move(from);
  }

  inline ImMessage_SessionPageListRequest& operator=(const ImMessage_SessionPageListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImMessage_SessionPageListRequest& operator=(ImMessage_SessionPageListRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImMessage_SessionPageListRequest& default_instance();

  static inline const ImMessage_SessionPageListRequest* internal_default_instance() {
    return reinterpret_cast<const ImMessage_SessionPageListRequest*>(
               &_ImMessage_SessionPageListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(ImMessage_SessionPageListRequest& a, ImMessage_SessionPageListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ImMessage_SessionPageListRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImMessage_SessionPageListRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImMessage_SessionPageListRequest* New() const final {
    return CreateMaybeMessage<ImMessage_SessionPageListRequest>(nullptr);
  }

  ImMessage_SessionPageListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImMessage_SessionPageListRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImMessage_SessionPageListRequest& from);
  void MergeFrom(const ImMessage_SessionPageListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImMessage_SessionPageListRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.ImMessage.SessionPageListRequest";
  }
  protected:
  explicit ImMessage_SessionPageListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCursorFieldNumber = 1,
    kCountFieldNumber = 2,
    kCategoryIdFieldNumber = 3,
  };
  // string cursor = 1;
  void clear_cursor();
  const std::string& cursor() const;
  void set_cursor(const std::string& value);
  void set_cursor(std::string&& value);
  void set_cursor(const char* value);
  void set_cursor(const char* value, size_t size);
  std::string* mutable_cursor();
  std::string* release_cursor();
  void set_allocated_cursor(std::string* cursor);
  private:
  const std::string& _internal_cursor() const;
  void _internal_set_cursor(const std::string& value);
  std::string* _internal_mutable_cursor();
  public:

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 categoryId = 3;
  void clear_categoryid();
  ::PROTOBUF_NAMESPACE_ID::int32 categoryid() const;
  void set_categoryid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_categoryid() const;
  void _internal_set_categoryid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.ImMessage.SessionPageListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cursor_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  ::PROTOBUF_NAMESPACE_ID::int32 categoryid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class ImMessage_SessionPageListResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.ImMessage.SessionPageListResponse) */ {
 public:
  inline ImMessage_SessionPageListResponse() : ImMessage_SessionPageListResponse(nullptr) {}
  virtual ~ImMessage_SessionPageListResponse();

  ImMessage_SessionPageListResponse(const ImMessage_SessionPageListResponse& from);
  ImMessage_SessionPageListResponse(ImMessage_SessionPageListResponse&& from) noexcept
    : ImMessage_SessionPageListResponse() {
    *this = ::std::move(from);
  }

  inline ImMessage_SessionPageListResponse& operator=(const ImMessage_SessionPageListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImMessage_SessionPageListResponse& operator=(ImMessage_SessionPageListResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImMessage_SessionPageListResponse& default_instance();

  static inline const ImMessage_SessionPageListResponse* internal_default_instance() {
    return reinterpret_cast<const ImMessage_SessionPageListResponse*>(
               &_ImMessage_SessionPageListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(ImMessage_SessionPageListResponse& a, ImMessage_SessionPageListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ImMessage_SessionPageListResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImMessage_SessionPageListResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImMessage_SessionPageListResponse* New() const final {
    return CreateMaybeMessage<ImMessage_SessionPageListResponse>(nullptr);
  }

  ImMessage_SessionPageListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImMessage_SessionPageListResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImMessage_SessionPageListResponse& from);
  void MergeFrom(const ImMessage_SessionPageListResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImMessage_SessionPageListResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.ImMessage.SessionPageListResponse";
  }
  protected:
  explicit ImMessage_SessionPageListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionsFieldNumber = 2,
    kHasMoreFieldNumber = 1,
  };
  // repeated .AcFunDanmu.Im.ImMessage.ChatSession sessions = 2;
  int sessions_size() const;
  private:
  int _internal_sessions_size() const;
  public:
  void clear_sessions();
  ::AcFunDanmu::Im::ImMessage_ChatSession* mutable_sessions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_ChatSession >*
      mutable_sessions();
  private:
  const ::AcFunDanmu::Im::ImMessage_ChatSession& _internal_sessions(int index) const;
  ::AcFunDanmu::Im::ImMessage_ChatSession* _internal_add_sessions();
  public:
  const ::AcFunDanmu::Im::ImMessage_ChatSession& sessions(int index) const;
  ::AcFunDanmu::Im::ImMessage_ChatSession* add_sessions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_ChatSession >&
      sessions() const;

  // bool hasMore = 1;
  void clear_hasmore();
  bool hasmore() const;
  void set_hasmore(bool value);
  private:
  bool _internal_hasmore() const;
  void _internal_set_hasmore(bool value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.ImMessage.SessionPageListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_ChatSession > sessions_;
  bool hasmore_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class ImMessage_SessionRemoveRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.ImMessage.SessionRemoveRequest) */ {
 public:
  inline ImMessage_SessionRemoveRequest() : ImMessage_SessionRemoveRequest(nullptr) {}
  virtual ~ImMessage_SessionRemoveRequest();

  ImMessage_SessionRemoveRequest(const ImMessage_SessionRemoveRequest& from);
  ImMessage_SessionRemoveRequest(ImMessage_SessionRemoveRequest&& from) noexcept
    : ImMessage_SessionRemoveRequest() {
    *this = ::std::move(from);
  }

  inline ImMessage_SessionRemoveRequest& operator=(const ImMessage_SessionRemoveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImMessage_SessionRemoveRequest& operator=(ImMessage_SessionRemoveRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImMessage_SessionRemoveRequest& default_instance();

  static inline const ImMessage_SessionRemoveRequest* internal_default_instance() {
    return reinterpret_cast<const ImMessage_SessionRemoveRequest*>(
               &_ImMessage_SessionRemoveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(ImMessage_SessionRemoveRequest& a, ImMessage_SessionRemoveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ImMessage_SessionRemoveRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImMessage_SessionRemoveRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImMessage_SessionRemoveRequest* New() const final {
    return CreateMaybeMessage<ImMessage_SessionRemoveRequest>(nullptr);
  }

  ImMessage_SessionRemoveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImMessage_SessionRemoveRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImMessage_SessionRemoveRequest& from);
  void MergeFrom(const ImMessage_SessionRemoveRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImMessage_SessionRemoveRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.ImMessage.SessionRemoveRequest";
  }
  protected:
  explicit ImMessage_SessionRemoveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrTargetIdFieldNumber = 4,
    kTargetIdFieldNumber = 1,
    kChatTargetTypeFieldNumber = 2,
    kCategoryIdFieldNumber = 3,
    kNotCleanAllMessagesFieldNumber = 5,
  };
  // string strTargetId = 4;
  void clear_strtargetid();
  const std::string& strtargetid() const;
  void set_strtargetid(const std::string& value);
  void set_strtargetid(std::string&& value);
  void set_strtargetid(const char* value);
  void set_strtargetid(const char* value, size_t size);
  std::string* mutable_strtargetid();
  std::string* release_strtargetid();
  void set_allocated_strtargetid(std::string* strtargetid);
  private:
  const std::string& _internal_strtargetid() const;
  void _internal_set_strtargetid(const std::string& value);
  std::string* _internal_mutable_strtargetid();
  public:

  // int64 targetId = 1;
  void clear_targetid();
  ::PROTOBUF_NAMESPACE_ID::int64 targetid() const;
  void set_targetid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_targetid() const;
  void _internal_set_targetid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .AcFunDanmu.Im.ImMessage.ChatTargetType chatTargetType = 2;
  void clear_chattargettype();
  ::AcFunDanmu::Im::ImMessage_ChatTargetType chattargettype() const;
  void set_chattargettype(::AcFunDanmu::Im::ImMessage_ChatTargetType value);
  private:
  ::AcFunDanmu::Im::ImMessage_ChatTargetType _internal_chattargettype() const;
  void _internal_set_chattargettype(::AcFunDanmu::Im::ImMessage_ChatTargetType value);
  public:

  // int32 categoryId = 3;
  void clear_categoryid();
  ::PROTOBUF_NAMESPACE_ID::int32 categoryid() const;
  void set_categoryid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_categoryid() const;
  void _internal_set_categoryid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool notCleanAllMessages = 5;
  void clear_notcleanallmessages();
  bool notcleanallmessages() const;
  void set_notcleanallmessages(bool value);
  private:
  bool _internal_notcleanallmessages() const;
  void _internal_set_notcleanallmessages(bool value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.ImMessage.SessionRemoveRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strtargetid_;
  ::PROTOBUF_NAMESPACE_ID::int64 targetid_;
  int chattargettype_;
  ::PROTOBUF_NAMESPACE_ID::int32 categoryid_;
  bool notcleanallmessages_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class ImMessage_SessionRemoveResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.ImMessage.SessionRemoveResponse) */ {
 public:
  inline ImMessage_SessionRemoveResponse() : ImMessage_SessionRemoveResponse(nullptr) {}
  virtual ~ImMessage_SessionRemoveResponse();

  ImMessage_SessionRemoveResponse(const ImMessage_SessionRemoveResponse& from);
  ImMessage_SessionRemoveResponse(ImMessage_SessionRemoveResponse&& from) noexcept
    : ImMessage_SessionRemoveResponse() {
    *this = ::std::move(from);
  }

  inline ImMessage_SessionRemoveResponse& operator=(const ImMessage_SessionRemoveResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImMessage_SessionRemoveResponse& operator=(ImMessage_SessionRemoveResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImMessage_SessionRemoveResponse& default_instance();

  static inline const ImMessage_SessionRemoveResponse* internal_default_instance() {
    return reinterpret_cast<const ImMessage_SessionRemoveResponse*>(
               &_ImMessage_SessionRemoveResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(ImMessage_SessionRemoveResponse& a, ImMessage_SessionRemoveResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ImMessage_SessionRemoveResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImMessage_SessionRemoveResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImMessage_SessionRemoveResponse* New() const final {
    return CreateMaybeMessage<ImMessage_SessionRemoveResponse>(nullptr);
  }

  ImMessage_SessionRemoveResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImMessage_SessionRemoveResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImMessage_SessionRemoveResponse& from);
  void MergeFrom(const ImMessage_SessionRemoveResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImMessage_SessionRemoveResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.ImMessage.SessionRemoveResponse";
  }
  protected:
  explicit ImMessage_SessionRemoveResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.ImMessage.SessionRemoveResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class ImMessage_SessionCleanRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.ImMessage.SessionCleanRequest) */ {
 public:
  inline ImMessage_SessionCleanRequest() : ImMessage_SessionCleanRequest(nullptr) {}
  virtual ~ImMessage_SessionCleanRequest();

  ImMessage_SessionCleanRequest(const ImMessage_SessionCleanRequest& from);
  ImMessage_SessionCleanRequest(ImMessage_SessionCleanRequest&& from) noexcept
    : ImMessage_SessionCleanRequest() {
    *this = ::std::move(from);
  }

  inline ImMessage_SessionCleanRequest& operator=(const ImMessage_SessionCleanRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImMessage_SessionCleanRequest& operator=(ImMessage_SessionCleanRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImMessage_SessionCleanRequest& default_instance();

  static inline const ImMessage_SessionCleanRequest* internal_default_instance() {
    return reinterpret_cast<const ImMessage_SessionCleanRequest*>(
               &_ImMessage_SessionCleanRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(ImMessage_SessionCleanRequest& a, ImMessage_SessionCleanRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ImMessage_SessionCleanRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImMessage_SessionCleanRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImMessage_SessionCleanRequest* New() const final {
    return CreateMaybeMessage<ImMessage_SessionCleanRequest>(nullptr);
  }

  ImMessage_SessionCleanRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImMessage_SessionCleanRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImMessage_SessionCleanRequest& from);
  void MergeFrom(const ImMessage_SessionCleanRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImMessage_SessionCleanRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.ImMessage.SessionCleanRequest";
  }
  protected:
  explicit ImMessage_SessionCleanRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatTargetFieldNumber = 1,
  };
  // .AcFunDanmu.Im.ImMessage.ChatTarget chatTarget = 1;
  bool has_chattarget() const;
  private:
  bool _internal_has_chattarget() const;
  public:
  void clear_chattarget();
  const ::AcFunDanmu::Im::ImMessage_ChatTarget& chattarget() const;
  ::AcFunDanmu::Im::ImMessage_ChatTarget* release_chattarget();
  ::AcFunDanmu::Im::ImMessage_ChatTarget* mutable_chattarget();
  void set_allocated_chattarget(::AcFunDanmu::Im::ImMessage_ChatTarget* chattarget);
  private:
  const ::AcFunDanmu::Im::ImMessage_ChatTarget& _internal_chattarget() const;
  ::AcFunDanmu::Im::ImMessage_ChatTarget* _internal_mutable_chattarget();
  public:
  void unsafe_arena_set_allocated_chattarget(
      ::AcFunDanmu::Im::ImMessage_ChatTarget* chattarget);
  ::AcFunDanmu::Im::ImMessage_ChatTarget* unsafe_arena_release_chattarget();

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.ImMessage.SessionCleanRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::AcFunDanmu::Im::ImMessage_ChatTarget* chattarget_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class ImMessage_SessionCleanResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.ImMessage.SessionCleanResponse) */ {
 public:
  inline ImMessage_SessionCleanResponse() : ImMessage_SessionCleanResponse(nullptr) {}
  virtual ~ImMessage_SessionCleanResponse();

  ImMessage_SessionCleanResponse(const ImMessage_SessionCleanResponse& from);
  ImMessage_SessionCleanResponse(ImMessage_SessionCleanResponse&& from) noexcept
    : ImMessage_SessionCleanResponse() {
    *this = ::std::move(from);
  }

  inline ImMessage_SessionCleanResponse& operator=(const ImMessage_SessionCleanResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImMessage_SessionCleanResponse& operator=(ImMessage_SessionCleanResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImMessage_SessionCleanResponse& default_instance();

  static inline const ImMessage_SessionCleanResponse* internal_default_instance() {
    return reinterpret_cast<const ImMessage_SessionCleanResponse*>(
               &_ImMessage_SessionCleanResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(ImMessage_SessionCleanResponse& a, ImMessage_SessionCleanResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ImMessage_SessionCleanResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImMessage_SessionCleanResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImMessage_SessionCleanResponse* New() const final {
    return CreateMaybeMessage<ImMessage_SessionCleanResponse>(nullptr);
  }

  ImMessage_SessionCleanResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImMessage_SessionCleanResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImMessage_SessionCleanResponse& from);
  void MergeFrom(const ImMessage_SessionCleanResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImMessage_SessionCleanResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.ImMessage.SessionCleanResponse";
  }
  protected:
  explicit ImMessage_SessionCleanResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.ImMessage.SessionCleanResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class ImMessage_MessageDeleteRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.ImMessage.MessageDeleteRequest) */ {
 public:
  inline ImMessage_MessageDeleteRequest() : ImMessage_MessageDeleteRequest(nullptr) {}
  virtual ~ImMessage_MessageDeleteRequest();

  ImMessage_MessageDeleteRequest(const ImMessage_MessageDeleteRequest& from);
  ImMessage_MessageDeleteRequest(ImMessage_MessageDeleteRequest&& from) noexcept
    : ImMessage_MessageDeleteRequest() {
    *this = ::std::move(from);
  }

  inline ImMessage_MessageDeleteRequest& operator=(const ImMessage_MessageDeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImMessage_MessageDeleteRequest& operator=(ImMessage_MessageDeleteRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImMessage_MessageDeleteRequest& default_instance();

  static inline const ImMessage_MessageDeleteRequest* internal_default_instance() {
    return reinterpret_cast<const ImMessage_MessageDeleteRequest*>(
               &_ImMessage_MessageDeleteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(ImMessage_MessageDeleteRequest& a, ImMessage_MessageDeleteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ImMessage_MessageDeleteRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImMessage_MessageDeleteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImMessage_MessageDeleteRequest* New() const final {
    return CreateMaybeMessage<ImMessage_MessageDeleteRequest>(nullptr);
  }

  ImMessage_MessageDeleteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImMessage_MessageDeleteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImMessage_MessageDeleteRequest& from);
  void MergeFrom(const ImMessage_MessageDeleteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImMessage_MessageDeleteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.ImMessage.MessageDeleteRequest";
  }
  protected:
  explicit ImMessage_MessageDeleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeqIdFieldNumber = 3,
    kStrTargetIdFieldNumber = 4,
    kTargetIdFieldNumber = 1,
    kChatTargetTypeFieldNumber = 2,
  };
  // repeated int64 seqId = 3;
  int seqid_size() const;
  private:
  int _internal_seqid_size() const;
  public:
  void clear_seqid();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_seqid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_seqid() const;
  void _internal_add_seqid(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_seqid();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 seqid(int index) const;
  void set_seqid(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_seqid(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      seqid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_seqid();

  // string strTargetId = 4;
  void clear_strtargetid();
  const std::string& strtargetid() const;
  void set_strtargetid(const std::string& value);
  void set_strtargetid(std::string&& value);
  void set_strtargetid(const char* value);
  void set_strtargetid(const char* value, size_t size);
  std::string* mutable_strtargetid();
  std::string* release_strtargetid();
  void set_allocated_strtargetid(std::string* strtargetid);
  private:
  const std::string& _internal_strtargetid() const;
  void _internal_set_strtargetid(const std::string& value);
  std::string* _internal_mutable_strtargetid();
  public:

  // int64 targetId = 1;
  void clear_targetid();
  ::PROTOBUF_NAMESPACE_ID::int64 targetid() const;
  void set_targetid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_targetid() const;
  void _internal_set_targetid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .AcFunDanmu.Im.ImMessage.ChatTargetType chatTargetType = 2;
  void clear_chattargettype();
  ::AcFunDanmu::Im::ImMessage_ChatTargetType chattargettype() const;
  void set_chattargettype(::AcFunDanmu::Im::ImMessage_ChatTargetType value);
  private:
  ::AcFunDanmu::Im::ImMessage_ChatTargetType _internal_chattargettype() const;
  void _internal_set_chattargettype(::AcFunDanmu::Im::ImMessage_ChatTargetType value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.ImMessage.MessageDeleteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > seqid_;
  mutable std::atomic<int> _seqid_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strtargetid_;
  ::PROTOBUF_NAMESPACE_ID::int64 targetid_;
  int chattargettype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class ImMessage_MessageDeleteResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.ImMessage.MessageDeleteResponse) */ {
 public:
  inline ImMessage_MessageDeleteResponse() : ImMessage_MessageDeleteResponse(nullptr) {}
  virtual ~ImMessage_MessageDeleteResponse();

  ImMessage_MessageDeleteResponse(const ImMessage_MessageDeleteResponse& from);
  ImMessage_MessageDeleteResponse(ImMessage_MessageDeleteResponse&& from) noexcept
    : ImMessage_MessageDeleteResponse() {
    *this = ::std::move(from);
  }

  inline ImMessage_MessageDeleteResponse& operator=(const ImMessage_MessageDeleteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImMessage_MessageDeleteResponse& operator=(ImMessage_MessageDeleteResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImMessage_MessageDeleteResponse& default_instance();

  static inline const ImMessage_MessageDeleteResponse* internal_default_instance() {
    return reinterpret_cast<const ImMessage_MessageDeleteResponse*>(
               &_ImMessage_MessageDeleteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(ImMessage_MessageDeleteResponse& a, ImMessage_MessageDeleteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ImMessage_MessageDeleteResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImMessage_MessageDeleteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImMessage_MessageDeleteResponse* New() const final {
    return CreateMaybeMessage<ImMessage_MessageDeleteResponse>(nullptr);
  }

  ImMessage_MessageDeleteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImMessage_MessageDeleteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImMessage_MessageDeleteResponse& from);
  void MergeFrom(const ImMessage_MessageDeleteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImMessage_MessageDeleteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.ImMessage.MessageDeleteResponse";
  }
  protected:
  explicit ImMessage_MessageDeleteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.ImMessage.MessageDeleteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class ImMessage_MessageCancelRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.ImMessage.MessageCancelRequest) */ {
 public:
  inline ImMessage_MessageCancelRequest() : ImMessage_MessageCancelRequest(nullptr) {}
  virtual ~ImMessage_MessageCancelRequest();

  ImMessage_MessageCancelRequest(const ImMessage_MessageCancelRequest& from);
  ImMessage_MessageCancelRequest(ImMessage_MessageCancelRequest&& from) noexcept
    : ImMessage_MessageCancelRequest() {
    *this = ::std::move(from);
  }

  inline ImMessage_MessageCancelRequest& operator=(const ImMessage_MessageCancelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImMessage_MessageCancelRequest& operator=(ImMessage_MessageCancelRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImMessage_MessageCancelRequest& default_instance();

  static inline const ImMessage_MessageCancelRequest* internal_default_instance() {
    return reinterpret_cast<const ImMessage_MessageCancelRequest*>(
               &_ImMessage_MessageCancelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(ImMessage_MessageCancelRequest& a, ImMessage_MessageCancelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ImMessage_MessageCancelRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImMessage_MessageCancelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImMessage_MessageCancelRequest* New() const final {
    return CreateMaybeMessage<ImMessage_MessageCancelRequest>(nullptr);
  }

  ImMessage_MessageCancelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImMessage_MessageCancelRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImMessage_MessageCancelRequest& from);
  void MergeFrom(const ImMessage_MessageCancelRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImMessage_MessageCancelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.ImMessage.MessageCancelRequest";
  }
  protected:
  explicit ImMessage_MessageCancelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeqIdFieldNumber = 2,
    kChatTargetFieldNumber = 1,
  };
  // repeated int64 seqId = 2;
  int seqid_size() const;
  private:
  int _internal_seqid_size() const;
  public:
  void clear_seqid();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_seqid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_seqid() const;
  void _internal_add_seqid(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_seqid();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 seqid(int index) const;
  void set_seqid(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_seqid(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      seqid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_seqid();

  // .AcFunDanmu.Im.ImMessage.ChatTarget chatTarget = 1;
  bool has_chattarget() const;
  private:
  bool _internal_has_chattarget() const;
  public:
  void clear_chattarget();
  const ::AcFunDanmu::Im::ImMessage_ChatTarget& chattarget() const;
  ::AcFunDanmu::Im::ImMessage_ChatTarget* release_chattarget();
  ::AcFunDanmu::Im::ImMessage_ChatTarget* mutable_chattarget();
  void set_allocated_chattarget(::AcFunDanmu::Im::ImMessage_ChatTarget* chattarget);
  private:
  const ::AcFunDanmu::Im::ImMessage_ChatTarget& _internal_chattarget() const;
  ::AcFunDanmu::Im::ImMessage_ChatTarget* _internal_mutable_chattarget();
  public:
  void unsafe_arena_set_allocated_chattarget(
      ::AcFunDanmu::Im::ImMessage_ChatTarget* chattarget);
  ::AcFunDanmu::Im::ImMessage_ChatTarget* unsafe_arena_release_chattarget();

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.ImMessage.MessageCancelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > seqid_;
  mutable std::atomic<int> _seqid_cached_byte_size_;
  ::AcFunDanmu::Im::ImMessage_ChatTarget* chattarget_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class ImMessage_MessageCancelResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.ImMessage.MessageCancelResponse) */ {
 public:
  inline ImMessage_MessageCancelResponse() : ImMessage_MessageCancelResponse(nullptr) {}
  virtual ~ImMessage_MessageCancelResponse();

  ImMessage_MessageCancelResponse(const ImMessage_MessageCancelResponse& from);
  ImMessage_MessageCancelResponse(ImMessage_MessageCancelResponse&& from) noexcept
    : ImMessage_MessageCancelResponse() {
    *this = ::std::move(from);
  }

  inline ImMessage_MessageCancelResponse& operator=(const ImMessage_MessageCancelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImMessage_MessageCancelResponse& operator=(ImMessage_MessageCancelResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImMessage_MessageCancelResponse& default_instance();

  static inline const ImMessage_MessageCancelResponse* internal_default_instance() {
    return reinterpret_cast<const ImMessage_MessageCancelResponse*>(
               &_ImMessage_MessageCancelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(ImMessage_MessageCancelResponse& a, ImMessage_MessageCancelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ImMessage_MessageCancelResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImMessage_MessageCancelResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImMessage_MessageCancelResponse* New() const final {
    return CreateMaybeMessage<ImMessage_MessageCancelResponse>(nullptr);
  }

  ImMessage_MessageCancelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImMessage_MessageCancelResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImMessage_MessageCancelResponse& from);
  void MergeFrom(const ImMessage_MessageCancelResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImMessage_MessageCancelResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.ImMessage.MessageCancelResponse";
  }
  protected:
  explicit ImMessage_MessageCancelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.ImMessage.MessageCancelResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class ImMessage_MessageClearRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.ImMessage.MessageClearRequest) */ {
 public:
  inline ImMessage_MessageClearRequest() : ImMessage_MessageClearRequest(nullptr) {}
  virtual ~ImMessage_MessageClearRequest();

  ImMessage_MessageClearRequest(const ImMessage_MessageClearRequest& from);
  ImMessage_MessageClearRequest(ImMessage_MessageClearRequest&& from) noexcept
    : ImMessage_MessageClearRequest() {
    *this = ::std::move(from);
  }

  inline ImMessage_MessageClearRequest& operator=(const ImMessage_MessageClearRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImMessage_MessageClearRequest& operator=(ImMessage_MessageClearRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImMessage_MessageClearRequest& default_instance();

  static inline const ImMessage_MessageClearRequest* internal_default_instance() {
    return reinterpret_cast<const ImMessage_MessageClearRequest*>(
               &_ImMessage_MessageClearRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(ImMessage_MessageClearRequest& a, ImMessage_MessageClearRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ImMessage_MessageClearRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImMessage_MessageClearRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImMessage_MessageClearRequest* New() const final {
    return CreateMaybeMessage<ImMessage_MessageClearRequest>(nullptr);
  }

  ImMessage_MessageClearRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImMessage_MessageClearRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImMessage_MessageClearRequest& from);
  void MergeFrom(const ImMessage_MessageClearRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImMessage_MessageClearRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.ImMessage.MessageClearRequest";
  }
  protected:
  explicit ImMessage_MessageClearRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatTargetFieldNumber = 1,
  };
  // .AcFunDanmu.Im.ImMessage.ChatTarget chatTarget = 1;
  bool has_chattarget() const;
  private:
  bool _internal_has_chattarget() const;
  public:
  void clear_chattarget();
  const ::AcFunDanmu::Im::ImMessage_ChatTarget& chattarget() const;
  ::AcFunDanmu::Im::ImMessage_ChatTarget* release_chattarget();
  ::AcFunDanmu::Im::ImMessage_ChatTarget* mutable_chattarget();
  void set_allocated_chattarget(::AcFunDanmu::Im::ImMessage_ChatTarget* chattarget);
  private:
  const ::AcFunDanmu::Im::ImMessage_ChatTarget& _internal_chattarget() const;
  ::AcFunDanmu::Im::ImMessage_ChatTarget* _internal_mutable_chattarget();
  public:
  void unsafe_arena_set_allocated_chattarget(
      ::AcFunDanmu::Im::ImMessage_ChatTarget* chattarget);
  ::AcFunDanmu::Im::ImMessage_ChatTarget* unsafe_arena_release_chattarget();

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.ImMessage.MessageClearRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::AcFunDanmu::Im::ImMessage_ChatTarget* chattarget_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class ImMessage_MessageClearResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.ImMessage.MessageClearResponse) */ {
 public:
  inline ImMessage_MessageClearResponse() : ImMessage_MessageClearResponse(nullptr) {}
  virtual ~ImMessage_MessageClearResponse();

  ImMessage_MessageClearResponse(const ImMessage_MessageClearResponse& from);
  ImMessage_MessageClearResponse(ImMessage_MessageClearResponse&& from) noexcept
    : ImMessage_MessageClearResponse() {
    *this = ::std::move(from);
  }

  inline ImMessage_MessageClearResponse& operator=(const ImMessage_MessageClearResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImMessage_MessageClearResponse& operator=(ImMessage_MessageClearResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImMessage_MessageClearResponse& default_instance();

  static inline const ImMessage_MessageClearResponse* internal_default_instance() {
    return reinterpret_cast<const ImMessage_MessageClearResponse*>(
               &_ImMessage_MessageClearResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(ImMessage_MessageClearResponse& a, ImMessage_MessageClearResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ImMessage_MessageClearResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImMessage_MessageClearResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImMessage_MessageClearResponse* New() const final {
    return CreateMaybeMessage<ImMessage_MessageClearResponse>(nullptr);
  }

  ImMessage_MessageClearResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImMessage_MessageClearResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImMessage_MessageClearResponse& from);
  void MergeFrom(const ImMessage_MessageClearResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImMessage_MessageClearResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.ImMessage.MessageClearResponse";
  }
  protected:
  explicit ImMessage_MessageClearResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.ImMessage.MessageClearResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class ImMessage_ReadSeqInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.ImMessage.ReadSeqInfo) */ {
 public:
  inline ImMessage_ReadSeqInfo() : ImMessage_ReadSeqInfo(nullptr) {}
  virtual ~ImMessage_ReadSeqInfo();

  ImMessage_ReadSeqInfo(const ImMessage_ReadSeqInfo& from);
  ImMessage_ReadSeqInfo(ImMessage_ReadSeqInfo&& from) noexcept
    : ImMessage_ReadSeqInfo() {
    *this = ::std::move(from);
  }

  inline ImMessage_ReadSeqInfo& operator=(const ImMessage_ReadSeqInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImMessage_ReadSeqInfo& operator=(ImMessage_ReadSeqInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImMessage_ReadSeqInfo& default_instance();

  static inline const ImMessage_ReadSeqInfo* internal_default_instance() {
    return reinterpret_cast<const ImMessage_ReadSeqInfo*>(
               &_ImMessage_ReadSeqInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(ImMessage_ReadSeqInfo& a, ImMessage_ReadSeqInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ImMessage_ReadSeqInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImMessage_ReadSeqInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImMessage_ReadSeqInfo* New() const final {
    return CreateMaybeMessage<ImMessage_ReadSeqInfo>(nullptr);
  }

  ImMessage_ReadSeqInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImMessage_ReadSeqInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImMessage_ReadSeqInfo& from);
  void MergeFrom(const ImMessage_ReadSeqInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImMessage_ReadSeqInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.ImMessage.ReadSeqInfo";
  }
  protected:
  explicit ImMessage_ReadSeqInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatTargetFieldNumber = 1,
    kReadSeqFieldNumber = 2,
  };
  // .AcFunDanmu.Im.ImMessage.ChatTarget chatTarget = 1;
  bool has_chattarget() const;
  private:
  bool _internal_has_chattarget() const;
  public:
  void clear_chattarget();
  const ::AcFunDanmu::Im::ImMessage_ChatTarget& chattarget() const;
  ::AcFunDanmu::Im::ImMessage_ChatTarget* release_chattarget();
  ::AcFunDanmu::Im::ImMessage_ChatTarget* mutable_chattarget();
  void set_allocated_chattarget(::AcFunDanmu::Im::ImMessage_ChatTarget* chattarget);
  private:
  const ::AcFunDanmu::Im::ImMessage_ChatTarget& _internal_chattarget() const;
  ::AcFunDanmu::Im::ImMessage_ChatTarget* _internal_mutable_chattarget();
  public:
  void unsafe_arena_set_allocated_chattarget(
      ::AcFunDanmu::Im::ImMessage_ChatTarget* chattarget);
  ::AcFunDanmu::Im::ImMessage_ChatTarget* unsafe_arena_release_chattarget();

  // int64 readSeq = 2;
  void clear_readseq();
  ::PROTOBUF_NAMESPACE_ID::int64 readseq() const;
  void set_readseq(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_readseq() const;
  void _internal_set_readseq(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.ImMessage.ReadSeqInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::AcFunDanmu::Im::ImMessage_ChatTarget* chattarget_;
  ::PROTOBUF_NAMESPACE_ID::int64 readseq_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class ImMessage_MessageReadSeqRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.ImMessage.MessageReadSeqRequest) */ {
 public:
  inline ImMessage_MessageReadSeqRequest() : ImMessage_MessageReadSeqRequest(nullptr) {}
  virtual ~ImMessage_MessageReadSeqRequest();

  ImMessage_MessageReadSeqRequest(const ImMessage_MessageReadSeqRequest& from);
  ImMessage_MessageReadSeqRequest(ImMessage_MessageReadSeqRequest&& from) noexcept
    : ImMessage_MessageReadSeqRequest() {
    *this = ::std::move(from);
  }

  inline ImMessage_MessageReadSeqRequest& operator=(const ImMessage_MessageReadSeqRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImMessage_MessageReadSeqRequest& operator=(ImMessage_MessageReadSeqRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImMessage_MessageReadSeqRequest& default_instance();

  static inline const ImMessage_MessageReadSeqRequest* internal_default_instance() {
    return reinterpret_cast<const ImMessage_MessageReadSeqRequest*>(
               &_ImMessage_MessageReadSeqRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(ImMessage_MessageReadSeqRequest& a, ImMessage_MessageReadSeqRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ImMessage_MessageReadSeqRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImMessage_MessageReadSeqRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImMessage_MessageReadSeqRequest* New() const final {
    return CreateMaybeMessage<ImMessage_MessageReadSeqRequest>(nullptr);
  }

  ImMessage_MessageReadSeqRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImMessage_MessageReadSeqRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImMessage_MessageReadSeqRequest& from);
  void MergeFrom(const ImMessage_MessageReadSeqRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImMessage_MessageReadSeqRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.ImMessage.MessageReadSeqRequest";
  }
  protected:
  explicit ImMessage_MessageReadSeqRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatTargetFieldNumber = 1,
  };
  // repeated .AcFunDanmu.Im.ImMessage.ChatTarget chatTarget = 1;
  int chattarget_size() const;
  private:
  int _internal_chattarget_size() const;
  public:
  void clear_chattarget();
  ::AcFunDanmu::Im::ImMessage_ChatTarget* mutable_chattarget(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_ChatTarget >*
      mutable_chattarget();
  private:
  const ::AcFunDanmu::Im::ImMessage_ChatTarget& _internal_chattarget(int index) const;
  ::AcFunDanmu::Im::ImMessage_ChatTarget* _internal_add_chattarget();
  public:
  const ::AcFunDanmu::Im::ImMessage_ChatTarget& chattarget(int index) const;
  ::AcFunDanmu::Im::ImMessage_ChatTarget* add_chattarget();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_ChatTarget >&
      chattarget() const;

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.ImMessage.MessageReadSeqRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_ChatTarget > chattarget_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class ImMessage_MessageReadSeqResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.ImMessage.MessageReadSeqResponse) */ {
 public:
  inline ImMessage_MessageReadSeqResponse() : ImMessage_MessageReadSeqResponse(nullptr) {}
  virtual ~ImMessage_MessageReadSeqResponse();

  ImMessage_MessageReadSeqResponse(const ImMessage_MessageReadSeqResponse& from);
  ImMessage_MessageReadSeqResponse(ImMessage_MessageReadSeqResponse&& from) noexcept
    : ImMessage_MessageReadSeqResponse() {
    *this = ::std::move(from);
  }

  inline ImMessage_MessageReadSeqResponse& operator=(const ImMessage_MessageReadSeqResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImMessage_MessageReadSeqResponse& operator=(ImMessage_MessageReadSeqResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImMessage_MessageReadSeqResponse& default_instance();

  static inline const ImMessage_MessageReadSeqResponse* internal_default_instance() {
    return reinterpret_cast<const ImMessage_MessageReadSeqResponse*>(
               &_ImMessage_MessageReadSeqResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(ImMessage_MessageReadSeqResponse& a, ImMessage_MessageReadSeqResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ImMessage_MessageReadSeqResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImMessage_MessageReadSeqResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImMessage_MessageReadSeqResponse* New() const final {
    return CreateMaybeMessage<ImMessage_MessageReadSeqResponse>(nullptr);
  }

  ImMessage_MessageReadSeqResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImMessage_MessageReadSeqResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImMessage_MessageReadSeqResponse& from);
  void MergeFrom(const ImMessage_MessageReadSeqResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImMessage_MessageReadSeqResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.ImMessage.MessageReadSeqResponse";
  }
  protected:
  explicit ImMessage_MessageReadSeqResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReadSeqInfoFieldNumber = 1,
  };
  // repeated .AcFunDanmu.Im.ImMessage.ReadSeqInfo readSeqInfo = 1;
  int readseqinfo_size() const;
  private:
  int _internal_readseqinfo_size() const;
  public:
  void clear_readseqinfo();
  ::AcFunDanmu::Im::ImMessage_ReadSeqInfo* mutable_readseqinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_ReadSeqInfo >*
      mutable_readseqinfo();
  private:
  const ::AcFunDanmu::Im::ImMessage_ReadSeqInfo& _internal_readseqinfo(int index) const;
  ::AcFunDanmu::Im::ImMessage_ReadSeqInfo* _internal_add_readseqinfo();
  public:
  const ::AcFunDanmu::Im::ImMessage_ReadSeqInfo& readseqinfo(int index) const;
  ::AcFunDanmu::Im::ImMessage_ReadSeqInfo* add_readseqinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_ReadSeqInfo >&
      readseqinfo() const;

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.ImMessage.MessageReadSeqResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_ReadSeqInfo > readseqinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class ImMessage_MessageReadPush PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.ImMessage.MessageReadPush) */ {
 public:
  inline ImMessage_MessageReadPush() : ImMessage_MessageReadPush(nullptr) {}
  virtual ~ImMessage_MessageReadPush();

  ImMessage_MessageReadPush(const ImMessage_MessageReadPush& from);
  ImMessage_MessageReadPush(ImMessage_MessageReadPush&& from) noexcept
    : ImMessage_MessageReadPush() {
    *this = ::std::move(from);
  }

  inline ImMessage_MessageReadPush& operator=(const ImMessage_MessageReadPush& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImMessage_MessageReadPush& operator=(ImMessage_MessageReadPush&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImMessage_MessageReadPush& default_instance();

  static inline const ImMessage_MessageReadPush* internal_default_instance() {
    return reinterpret_cast<const ImMessage_MessageReadPush*>(
               &_ImMessage_MessageReadPush_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(ImMessage_MessageReadPush& a, ImMessage_MessageReadPush& b) {
    a.Swap(&b);
  }
  inline void Swap(ImMessage_MessageReadPush* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImMessage_MessageReadPush* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImMessage_MessageReadPush* New() const final {
    return CreateMaybeMessage<ImMessage_MessageReadPush>(nullptr);
  }

  ImMessage_MessageReadPush* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImMessage_MessageReadPush>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImMessage_MessageReadPush& from);
  void MergeFrom(const ImMessage_MessageReadPush& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImMessage_MessageReadPush* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.ImMessage.MessageReadPush";
  }
  protected:
  explicit ImMessage_MessageReadPush(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrTargetIdFieldNumber = 4,
    kTargetIdFieldNumber = 1,
    kReadSeqFieldNumber = 2,
    kChatTargetTypeFieldNumber = 3,
  };
  // string strTargetId = 4;
  void clear_strtargetid();
  const std::string& strtargetid() const;
  void set_strtargetid(const std::string& value);
  void set_strtargetid(std::string&& value);
  void set_strtargetid(const char* value);
  void set_strtargetid(const char* value, size_t size);
  std::string* mutable_strtargetid();
  std::string* release_strtargetid();
  void set_allocated_strtargetid(std::string* strtargetid);
  private:
  const std::string& _internal_strtargetid() const;
  void _internal_set_strtargetid(const std::string& value);
  std::string* _internal_mutable_strtargetid();
  public:

  // int64 targetId = 1;
  void clear_targetid();
  ::PROTOBUF_NAMESPACE_ID::int64 targetid() const;
  void set_targetid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_targetid() const;
  void _internal_set_targetid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 readSeq = 2;
  void clear_readseq();
  ::PROTOBUF_NAMESPACE_ID::int64 readseq() const;
  void set_readseq(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_readseq() const;
  void _internal_set_readseq(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .AcFunDanmu.Im.ImMessage.ChatTargetType chatTargetType = 3;
  void clear_chattargettype();
  ::AcFunDanmu::Im::ImMessage_ChatTargetType chattargettype() const;
  void set_chattargettype(::AcFunDanmu::Im::ImMessage_ChatTargetType value);
  private:
  ::AcFunDanmu::Im::ImMessage_ChatTargetType _internal_chattargettype() const;
  void _internal_set_chattargettype(::AcFunDanmu::Im::ImMessage_ChatTargetType value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.ImMessage.MessageReadPush)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strtargetid_;
  ::PROTOBUF_NAMESPACE_ID::int64 targetid_;
  ::PROTOBUF_NAMESPACE_ID::int64 readseq_;
  int chattargettype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class ImMessage_AllUnreadCountRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.ImMessage.AllUnreadCountRequest) */ {
 public:
  inline ImMessage_AllUnreadCountRequest() : ImMessage_AllUnreadCountRequest(nullptr) {}
  virtual ~ImMessage_AllUnreadCountRequest();

  ImMessage_AllUnreadCountRequest(const ImMessage_AllUnreadCountRequest& from);
  ImMessage_AllUnreadCountRequest(ImMessage_AllUnreadCountRequest&& from) noexcept
    : ImMessage_AllUnreadCountRequest() {
    *this = ::std::move(from);
  }

  inline ImMessage_AllUnreadCountRequest& operator=(const ImMessage_AllUnreadCountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImMessage_AllUnreadCountRequest& operator=(ImMessage_AllUnreadCountRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImMessage_AllUnreadCountRequest& default_instance();

  static inline const ImMessage_AllUnreadCountRequest* internal_default_instance() {
    return reinterpret_cast<const ImMessage_AllUnreadCountRequest*>(
               &_ImMessage_AllUnreadCountRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(ImMessage_AllUnreadCountRequest& a, ImMessage_AllUnreadCountRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ImMessage_AllUnreadCountRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImMessage_AllUnreadCountRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImMessage_AllUnreadCountRequest* New() const final {
    return CreateMaybeMessage<ImMessage_AllUnreadCountRequest>(nullptr);
  }

  ImMessage_AllUnreadCountRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImMessage_AllUnreadCountRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImMessage_AllUnreadCountRequest& from);
  void MergeFrom(const ImMessage_AllUnreadCountRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImMessage_AllUnreadCountRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.ImMessage.AllUnreadCountRequest";
  }
  protected:
  explicit ImMessage_AllUnreadCountRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.ImMessage.AllUnreadCountRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class ImMessage_AllUnreadCountResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.ImMessage.AllUnreadCountResponse) */ {
 public:
  inline ImMessage_AllUnreadCountResponse() : ImMessage_AllUnreadCountResponse(nullptr) {}
  virtual ~ImMessage_AllUnreadCountResponse();

  ImMessage_AllUnreadCountResponse(const ImMessage_AllUnreadCountResponse& from);
  ImMessage_AllUnreadCountResponse(ImMessage_AllUnreadCountResponse&& from) noexcept
    : ImMessage_AllUnreadCountResponse() {
    *this = ::std::move(from);
  }

  inline ImMessage_AllUnreadCountResponse& operator=(const ImMessage_AllUnreadCountResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImMessage_AllUnreadCountResponse& operator=(ImMessage_AllUnreadCountResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImMessage_AllUnreadCountResponse& default_instance();

  static inline const ImMessage_AllUnreadCountResponse* internal_default_instance() {
    return reinterpret_cast<const ImMessage_AllUnreadCountResponse*>(
               &_ImMessage_AllUnreadCountResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(ImMessage_AllUnreadCountResponse& a, ImMessage_AllUnreadCountResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ImMessage_AllUnreadCountResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImMessage_AllUnreadCountResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImMessage_AllUnreadCountResponse* New() const final {
    return CreateMaybeMessage<ImMessage_AllUnreadCountResponse>(nullptr);
  }

  ImMessage_AllUnreadCountResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImMessage_AllUnreadCountResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImMessage_AllUnreadCountResponse& from);
  void MergeFrom(const ImMessage_AllUnreadCountResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImMessage_AllUnreadCountResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.ImMessage.AllUnreadCountResponse";
  }
  protected:
  explicit ImMessage_AllUnreadCountResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllUnreadCountFieldNumber = 1,
  };
  // int32 allUnreadCount = 1;
  void clear_allunreadcount();
  ::PROTOBUF_NAMESPACE_ID::int32 allunreadcount() const;
  void set_allunreadcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_allunreadcount() const;
  void _internal_set_allunreadcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.ImMessage.AllUnreadCountResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 allunreadcount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class ImMessage_MessageReadAllRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.ImMessage.MessageReadAllRequest) */ {
 public:
  inline ImMessage_MessageReadAllRequest() : ImMessage_MessageReadAllRequest(nullptr) {}
  virtual ~ImMessage_MessageReadAllRequest();

  ImMessage_MessageReadAllRequest(const ImMessage_MessageReadAllRequest& from);
  ImMessage_MessageReadAllRequest(ImMessage_MessageReadAllRequest&& from) noexcept
    : ImMessage_MessageReadAllRequest() {
    *this = ::std::move(from);
  }

  inline ImMessage_MessageReadAllRequest& operator=(const ImMessage_MessageReadAllRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImMessage_MessageReadAllRequest& operator=(ImMessage_MessageReadAllRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImMessage_MessageReadAllRequest& default_instance();

  static inline const ImMessage_MessageReadAllRequest* internal_default_instance() {
    return reinterpret_cast<const ImMessage_MessageReadAllRequest*>(
               &_ImMessage_MessageReadAllRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(ImMessage_MessageReadAllRequest& a, ImMessage_MessageReadAllRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ImMessage_MessageReadAllRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImMessage_MessageReadAllRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImMessage_MessageReadAllRequest* New() const final {
    return CreateMaybeMessage<ImMessage_MessageReadAllRequest>(nullptr);
  }

  ImMessage_MessageReadAllRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImMessage_MessageReadAllRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImMessage_MessageReadAllRequest& from);
  void MergeFrom(const ImMessage_MessageReadAllRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImMessage_MessageReadAllRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.ImMessage.MessageReadAllRequest";
  }
  protected:
  explicit ImMessage_MessageReadAllRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionCategoryIdFieldNumber = 1,
  };
  // int32 sessionCategoryId = 1;
  void clear_sessioncategoryid();
  ::PROTOBUF_NAMESPACE_ID::int32 sessioncategoryid() const;
  void set_sessioncategoryid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sessioncategoryid() const;
  void _internal_set_sessioncategoryid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.ImMessage.MessageReadAllRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 sessioncategoryid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class ImMessage_MessageReadAllResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.ImMessage.MessageReadAllResponse) */ {
 public:
  inline ImMessage_MessageReadAllResponse() : ImMessage_MessageReadAllResponse(nullptr) {}
  virtual ~ImMessage_MessageReadAllResponse();

  ImMessage_MessageReadAllResponse(const ImMessage_MessageReadAllResponse& from);
  ImMessage_MessageReadAllResponse(ImMessage_MessageReadAllResponse&& from) noexcept
    : ImMessage_MessageReadAllResponse() {
    *this = ::std::move(from);
  }

  inline ImMessage_MessageReadAllResponse& operator=(const ImMessage_MessageReadAllResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImMessage_MessageReadAllResponse& operator=(ImMessage_MessageReadAllResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImMessage_MessageReadAllResponse& default_instance();

  static inline const ImMessage_MessageReadAllResponse* internal_default_instance() {
    return reinterpret_cast<const ImMessage_MessageReadAllResponse*>(
               &_ImMessage_MessageReadAllResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(ImMessage_MessageReadAllResponse& a, ImMessage_MessageReadAllResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ImMessage_MessageReadAllResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImMessage_MessageReadAllResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImMessage_MessageReadAllResponse* New() const final {
    return CreateMaybeMessage<ImMessage_MessageReadAllResponse>(nullptr);
  }

  ImMessage_MessageReadAllResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImMessage_MessageReadAllResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImMessage_MessageReadAllResponse& from);
  void MergeFrom(const ImMessage_MessageReadAllResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImMessage_MessageReadAllResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.ImMessage.MessageReadAllResponse";
  }
  protected:
  explicit ImMessage_MessageReadAllResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReadAllTimestampFieldNumber = 1,
  };
  // int64 readAllTimestamp = 1;
  void clear_readalltimestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 readalltimestamp() const;
  void set_readalltimestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_readalltimestamp() const;
  void _internal_set_readalltimestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.ImMessage.MessageReadAllResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 readalltimestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class ImMessage_SesionStickyOnTopRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.ImMessage.SesionStickyOnTopRequest) */ {
 public:
  inline ImMessage_SesionStickyOnTopRequest() : ImMessage_SesionStickyOnTopRequest(nullptr) {}
  virtual ~ImMessage_SesionStickyOnTopRequest();

  ImMessage_SesionStickyOnTopRequest(const ImMessage_SesionStickyOnTopRequest& from);
  ImMessage_SesionStickyOnTopRequest(ImMessage_SesionStickyOnTopRequest&& from) noexcept
    : ImMessage_SesionStickyOnTopRequest() {
    *this = ::std::move(from);
  }

  inline ImMessage_SesionStickyOnTopRequest& operator=(const ImMessage_SesionStickyOnTopRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImMessage_SesionStickyOnTopRequest& operator=(ImMessage_SesionStickyOnTopRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImMessage_SesionStickyOnTopRequest& default_instance();

  static inline const ImMessage_SesionStickyOnTopRequest* internal_default_instance() {
    return reinterpret_cast<const ImMessage_SesionStickyOnTopRequest*>(
               &_ImMessage_SesionStickyOnTopRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(ImMessage_SesionStickyOnTopRequest& a, ImMessage_SesionStickyOnTopRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ImMessage_SesionStickyOnTopRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImMessage_SesionStickyOnTopRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImMessage_SesionStickyOnTopRequest* New() const final {
    return CreateMaybeMessage<ImMessage_SesionStickyOnTopRequest>(nullptr);
  }

  ImMessage_SesionStickyOnTopRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImMessage_SesionStickyOnTopRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImMessage_SesionStickyOnTopRequest& from);
  void MergeFrom(const ImMessage_SesionStickyOnTopRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImMessage_SesionStickyOnTopRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.ImMessage.SesionStickyOnTopRequest";
  }
  protected:
  explicit ImMessage_SesionStickyOnTopRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatTargetFieldNumber = 1,
    kStickyOnTopFieldNumber = 2,
  };
  // .AcFunDanmu.Im.ImMessage.ChatTarget chatTarget = 1;
  bool has_chattarget() const;
  private:
  bool _internal_has_chattarget() const;
  public:
  void clear_chattarget();
  const ::AcFunDanmu::Im::ImMessage_ChatTarget& chattarget() const;
  ::AcFunDanmu::Im::ImMessage_ChatTarget* release_chattarget();
  ::AcFunDanmu::Im::ImMessage_ChatTarget* mutable_chattarget();
  void set_allocated_chattarget(::AcFunDanmu::Im::ImMessage_ChatTarget* chattarget);
  private:
  const ::AcFunDanmu::Im::ImMessage_ChatTarget& _internal_chattarget() const;
  ::AcFunDanmu::Im::ImMessage_ChatTarget* _internal_mutable_chattarget();
  public:
  void unsafe_arena_set_allocated_chattarget(
      ::AcFunDanmu::Im::ImMessage_ChatTarget* chattarget);
  ::AcFunDanmu::Im::ImMessage_ChatTarget* unsafe_arena_release_chattarget();

  // bool stickyOnTop = 2;
  void clear_stickyontop();
  bool stickyontop() const;
  void set_stickyontop(bool value);
  private:
  bool _internal_stickyontop() const;
  void _internal_set_stickyontop(bool value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.ImMessage.SesionStickyOnTopRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::AcFunDanmu::Im::ImMessage_ChatTarget* chattarget_;
  bool stickyontop_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class ImMessage_SessionStickyOnTopResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.ImMessage.SessionStickyOnTopResponse) */ {
 public:
  inline ImMessage_SessionStickyOnTopResponse() : ImMessage_SessionStickyOnTopResponse(nullptr) {}
  virtual ~ImMessage_SessionStickyOnTopResponse();

  ImMessage_SessionStickyOnTopResponse(const ImMessage_SessionStickyOnTopResponse& from);
  ImMessage_SessionStickyOnTopResponse(ImMessage_SessionStickyOnTopResponse&& from) noexcept
    : ImMessage_SessionStickyOnTopResponse() {
    *this = ::std::move(from);
  }

  inline ImMessage_SessionStickyOnTopResponse& operator=(const ImMessage_SessionStickyOnTopResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImMessage_SessionStickyOnTopResponse& operator=(ImMessage_SessionStickyOnTopResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImMessage_SessionStickyOnTopResponse& default_instance();

  static inline const ImMessage_SessionStickyOnTopResponse* internal_default_instance() {
    return reinterpret_cast<const ImMessage_SessionStickyOnTopResponse*>(
               &_ImMessage_SessionStickyOnTopResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(ImMessage_SessionStickyOnTopResponse& a, ImMessage_SessionStickyOnTopResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ImMessage_SessionStickyOnTopResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImMessage_SessionStickyOnTopResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImMessage_SessionStickyOnTopResponse* New() const final {
    return CreateMaybeMessage<ImMessage_SessionStickyOnTopResponse>(nullptr);
  }

  ImMessage_SessionStickyOnTopResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImMessage_SessionStickyOnTopResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImMessage_SessionStickyOnTopResponse& from);
  void MergeFrom(const ImMessage_SessionStickyOnTopResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImMessage_SessionStickyOnTopResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.ImMessage.SessionStickyOnTopResponse";
  }
  protected:
  explicit ImMessage_SessionStickyOnTopResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionFieldNumber = 1,
  };
  // .AcFunDanmu.Im.ImMessage.ChatSession session = 1;
  bool has_session() const;
  private:
  bool _internal_has_session() const;
  public:
  void clear_session();
  const ::AcFunDanmu::Im::ImMessage_ChatSession& session() const;
  ::AcFunDanmu::Im::ImMessage_ChatSession* release_session();
  ::AcFunDanmu::Im::ImMessage_ChatSession* mutable_session();
  void set_allocated_session(::AcFunDanmu::Im::ImMessage_ChatSession* session);
  private:
  const ::AcFunDanmu::Im::ImMessage_ChatSession& _internal_session() const;
  ::AcFunDanmu::Im::ImMessage_ChatSession* _internal_mutable_session();
  public:
  void unsafe_arena_set_allocated_session(
      ::AcFunDanmu::Im::ImMessage_ChatSession* session);
  ::AcFunDanmu::Im::ImMessage_ChatSession* unsafe_arena_release_session();

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.ImMessage.SessionStickyOnTopResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::AcFunDanmu::Im::ImMessage_ChatSession* session_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class ImMessage_SessionRaw_RawEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ImMessage_SessionRaw_RawEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ImMessage_SessionRaw_RawEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES> SuperType;
  ImMessage_SessionRaw_RawEntry_DoNotUse();
  explicit ImMessage_SessionRaw_RawEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ImMessage_SessionRaw_RawEntry_DoNotUse& other);
  static const ImMessage_SessionRaw_RawEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ImMessage_SessionRaw_RawEntry_DoNotUse*>(&_ImMessage_SessionRaw_RawEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "AcFunDanmu.Im.ImMessage.SessionRaw.RawEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[63];
  }

  public:
};

// -------------------------------------------------------------------

class ImMessage_SessionRaw PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.ImMessage.SessionRaw) */ {
 public:
  inline ImMessage_SessionRaw() : ImMessage_SessionRaw(nullptr) {}
  virtual ~ImMessage_SessionRaw();

  ImMessage_SessionRaw(const ImMessage_SessionRaw& from);
  ImMessage_SessionRaw(ImMessage_SessionRaw&& from) noexcept
    : ImMessage_SessionRaw() {
    *this = ::std::move(from);
  }

  inline ImMessage_SessionRaw& operator=(const ImMessage_SessionRaw& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImMessage_SessionRaw& operator=(ImMessage_SessionRaw&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImMessage_SessionRaw& default_instance();

  static inline const ImMessage_SessionRaw* internal_default_instance() {
    return reinterpret_cast<const ImMessage_SessionRaw*>(
               &_ImMessage_SessionRaw_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(ImMessage_SessionRaw& a, ImMessage_SessionRaw& b) {
    a.Swap(&b);
  }
  inline void Swap(ImMessage_SessionRaw* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImMessage_SessionRaw* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImMessage_SessionRaw* New() const final {
    return CreateMaybeMessage<ImMessage_SessionRaw>(nullptr);
  }

  ImMessage_SessionRaw* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImMessage_SessionRaw>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImMessage_SessionRaw& from);
  void MergeFrom(const ImMessage_SessionRaw& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImMessage_SessionRaw* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.ImMessage.SessionRaw";
  }
  protected:
  explicit ImMessage_SessionRaw(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kRawFieldNumber = 1,
  };
  // map<string, bytes> raw = 1;
  int raw_size() const;
  private:
  int _internal_raw_size() const;
  public:
  void clear_raw();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_raw() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_raw();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      raw() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_raw();

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.ImMessage.SessionRaw)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ImMessage_SessionRaw_RawEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES> raw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class ImMessage_MessageRecallRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.ImMessage.MessageRecallRequest) */ {
 public:
  inline ImMessage_MessageRecallRequest() : ImMessage_MessageRecallRequest(nullptr) {}
  virtual ~ImMessage_MessageRecallRequest();

  ImMessage_MessageRecallRequest(const ImMessage_MessageRecallRequest& from);
  ImMessage_MessageRecallRequest(ImMessage_MessageRecallRequest&& from) noexcept
    : ImMessage_MessageRecallRequest() {
    *this = ::std::move(from);
  }

  inline ImMessage_MessageRecallRequest& operator=(const ImMessage_MessageRecallRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImMessage_MessageRecallRequest& operator=(ImMessage_MessageRecallRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImMessage_MessageRecallRequest& default_instance();

  static inline const ImMessage_MessageRecallRequest* internal_default_instance() {
    return reinterpret_cast<const ImMessage_MessageRecallRequest*>(
               &_ImMessage_MessageRecallRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(ImMessage_MessageRecallRequest& a, ImMessage_MessageRecallRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ImMessage_MessageRecallRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImMessage_MessageRecallRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImMessage_MessageRecallRequest* New() const final {
    return CreateMaybeMessage<ImMessage_MessageRecallRequest>(nullptr);
  }

  ImMessage_MessageRecallRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImMessage_MessageRecallRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImMessage_MessageRecallRequest& from);
  void MergeFrom(const ImMessage_MessageRecallRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImMessage_MessageRecallRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.ImMessage.MessageRecallRequest";
  }
  protected:
  explicit ImMessage_MessageRecallRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatTargetFieldNumber = 1,
    kSeqIdFieldNumber = 2,
  };
  // .AcFunDanmu.Im.ImMessage.ChatTarget chatTarget = 1;
  bool has_chattarget() const;
  private:
  bool _internal_has_chattarget() const;
  public:
  void clear_chattarget();
  const ::AcFunDanmu::Im::ImMessage_ChatTarget& chattarget() const;
  ::AcFunDanmu::Im::ImMessage_ChatTarget* release_chattarget();
  ::AcFunDanmu::Im::ImMessage_ChatTarget* mutable_chattarget();
  void set_allocated_chattarget(::AcFunDanmu::Im::ImMessage_ChatTarget* chattarget);
  private:
  const ::AcFunDanmu::Im::ImMessage_ChatTarget& _internal_chattarget() const;
  ::AcFunDanmu::Im::ImMessage_ChatTarget* _internal_mutable_chattarget();
  public:
  void unsafe_arena_set_allocated_chattarget(
      ::AcFunDanmu::Im::ImMessage_ChatTarget* chattarget);
  ::AcFunDanmu::Im::ImMessage_ChatTarget* unsafe_arena_release_chattarget();

  // int64 seqId = 2;
  void clear_seqid();
  ::PROTOBUF_NAMESPACE_ID::int64 seqid() const;
  void set_seqid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_seqid() const;
  void _internal_set_seqid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.ImMessage.MessageRecallRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::AcFunDanmu::Im::ImMessage_ChatTarget* chattarget_;
  ::PROTOBUF_NAMESPACE_ID::int64 seqid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class ImMessage_MessageRecallResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.ImMessage.MessageRecallResponse) */ {
 public:
  inline ImMessage_MessageRecallResponse() : ImMessage_MessageRecallResponse(nullptr) {}
  virtual ~ImMessage_MessageRecallResponse();

  ImMessage_MessageRecallResponse(const ImMessage_MessageRecallResponse& from);
  ImMessage_MessageRecallResponse(ImMessage_MessageRecallResponse&& from) noexcept
    : ImMessage_MessageRecallResponse() {
    *this = ::std::move(from);
  }

  inline ImMessage_MessageRecallResponse& operator=(const ImMessage_MessageRecallResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImMessage_MessageRecallResponse& operator=(ImMessage_MessageRecallResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImMessage_MessageRecallResponse& default_instance();

  static inline const ImMessage_MessageRecallResponse* internal_default_instance() {
    return reinterpret_cast<const ImMessage_MessageRecallResponse*>(
               &_ImMessage_MessageRecallResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(ImMessage_MessageRecallResponse& a, ImMessage_MessageRecallResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ImMessage_MessageRecallResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImMessage_MessageRecallResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImMessage_MessageRecallResponse* New() const final {
    return CreateMaybeMessage<ImMessage_MessageRecallResponse>(nullptr);
  }

  ImMessage_MessageRecallResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImMessage_MessageRecallResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImMessage_MessageRecallResponse& from);
  void MergeFrom(const ImMessage_MessageRecallResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImMessage_MessageRecallResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.ImMessage.MessageRecallResponse";
  }
  protected:
  explicit ImMessage_MessageRecallResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.ImMessage.MessageRecallResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class ImMessage_MessageReceiptRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.ImMessage.MessageReceiptRequest) */ {
 public:
  inline ImMessage_MessageReceiptRequest() : ImMessage_MessageReceiptRequest(nullptr) {}
  virtual ~ImMessage_MessageReceiptRequest();

  ImMessage_MessageReceiptRequest(const ImMessage_MessageReceiptRequest& from);
  ImMessage_MessageReceiptRequest(ImMessage_MessageReceiptRequest&& from) noexcept
    : ImMessage_MessageReceiptRequest() {
    *this = ::std::move(from);
  }

  inline ImMessage_MessageReceiptRequest& operator=(const ImMessage_MessageReceiptRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImMessage_MessageReceiptRequest& operator=(ImMessage_MessageReceiptRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImMessage_MessageReceiptRequest& default_instance();

  static inline const ImMessage_MessageReceiptRequest* internal_default_instance() {
    return reinterpret_cast<const ImMessage_MessageReceiptRequest*>(
               &_ImMessage_MessageReceiptRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(ImMessage_MessageReceiptRequest& a, ImMessage_MessageReceiptRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ImMessage_MessageReceiptRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImMessage_MessageReceiptRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImMessage_MessageReceiptRequest* New() const final {
    return CreateMaybeMessage<ImMessage_MessageReceiptRequest>(nullptr);
  }

  ImMessage_MessageReceiptRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImMessage_MessageReceiptRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImMessage_MessageReceiptRequest& from);
  void MergeFrom(const ImMessage_MessageReceiptRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImMessage_MessageReceiptRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.ImMessage.MessageReceiptRequest";
  }
  protected:
  explicit ImMessage_MessageReceiptRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageReceiptInfoFieldNumber = 1,
    kChatTargetFieldNumber = 2,
  };
  // repeated .AcFunDanmu.Im.ImMessage.MessageReceiptInfo messageReceiptInfo = 1;
  int messagereceiptinfo_size() const;
  private:
  int _internal_messagereceiptinfo_size() const;
  public:
  void clear_messagereceiptinfo();
  ::AcFunDanmu::Im::ImMessage_MessageReceiptInfo* mutable_messagereceiptinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_MessageReceiptInfo >*
      mutable_messagereceiptinfo();
  private:
  const ::AcFunDanmu::Im::ImMessage_MessageReceiptInfo& _internal_messagereceiptinfo(int index) const;
  ::AcFunDanmu::Im::ImMessage_MessageReceiptInfo* _internal_add_messagereceiptinfo();
  public:
  const ::AcFunDanmu::Im::ImMessage_MessageReceiptInfo& messagereceiptinfo(int index) const;
  ::AcFunDanmu::Im::ImMessage_MessageReceiptInfo* add_messagereceiptinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_MessageReceiptInfo >&
      messagereceiptinfo() const;

  // .AcFunDanmu.Im.ImMessage.ChatTarget chatTarget = 2;
  bool has_chattarget() const;
  private:
  bool _internal_has_chattarget() const;
  public:
  void clear_chattarget();
  const ::AcFunDanmu::Im::ImMessage_ChatTarget& chattarget() const;
  ::AcFunDanmu::Im::ImMessage_ChatTarget* release_chattarget();
  ::AcFunDanmu::Im::ImMessage_ChatTarget* mutable_chattarget();
  void set_allocated_chattarget(::AcFunDanmu::Im::ImMessage_ChatTarget* chattarget);
  private:
  const ::AcFunDanmu::Im::ImMessage_ChatTarget& _internal_chattarget() const;
  ::AcFunDanmu::Im::ImMessage_ChatTarget* _internal_mutable_chattarget();
  public:
  void unsafe_arena_set_allocated_chattarget(
      ::AcFunDanmu::Im::ImMessage_ChatTarget* chattarget);
  ::AcFunDanmu::Im::ImMessage_ChatTarget* unsafe_arena_release_chattarget();

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.ImMessage.MessageReceiptRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_MessageReceiptInfo > messagereceiptinfo_;
  ::AcFunDanmu::Im::ImMessage_ChatTarget* chattarget_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class ImMessage_MessageReceiptResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.ImMessage.MessageReceiptResponse) */ {
 public:
  inline ImMessage_MessageReceiptResponse() : ImMessage_MessageReceiptResponse(nullptr) {}
  virtual ~ImMessage_MessageReceiptResponse();

  ImMessage_MessageReceiptResponse(const ImMessage_MessageReceiptResponse& from);
  ImMessage_MessageReceiptResponse(ImMessage_MessageReceiptResponse&& from) noexcept
    : ImMessage_MessageReceiptResponse() {
    *this = ::std::move(from);
  }

  inline ImMessage_MessageReceiptResponse& operator=(const ImMessage_MessageReceiptResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImMessage_MessageReceiptResponse& operator=(ImMessage_MessageReceiptResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImMessage_MessageReceiptResponse& default_instance();

  static inline const ImMessage_MessageReceiptResponse* internal_default_instance() {
    return reinterpret_cast<const ImMessage_MessageReceiptResponse*>(
               &_ImMessage_MessageReceiptResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(ImMessage_MessageReceiptResponse& a, ImMessage_MessageReceiptResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ImMessage_MessageReceiptResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImMessage_MessageReceiptResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImMessage_MessageReceiptResponse* New() const final {
    return CreateMaybeMessage<ImMessage_MessageReceiptResponse>(nullptr);
  }

  ImMessage_MessageReceiptResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImMessage_MessageReceiptResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImMessage_MessageReceiptResponse& from);
  void MergeFrom(const ImMessage_MessageReceiptResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImMessage_MessageReceiptResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.ImMessage.MessageReceiptResponse";
  }
  protected:
  explicit ImMessage_MessageReceiptResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.ImMessage.MessageReceiptResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class ImMessage_MessageReceiptInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.ImMessage.MessageReceiptInfo) */ {
 public:
  inline ImMessage_MessageReceiptInfo() : ImMessage_MessageReceiptInfo(nullptr) {}
  virtual ~ImMessage_MessageReceiptInfo();

  ImMessage_MessageReceiptInfo(const ImMessage_MessageReceiptInfo& from);
  ImMessage_MessageReceiptInfo(ImMessage_MessageReceiptInfo&& from) noexcept
    : ImMessage_MessageReceiptInfo() {
    *this = ::std::move(from);
  }

  inline ImMessage_MessageReceiptInfo& operator=(const ImMessage_MessageReceiptInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImMessage_MessageReceiptInfo& operator=(ImMessage_MessageReceiptInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImMessage_MessageReceiptInfo& default_instance();

  static inline const ImMessage_MessageReceiptInfo* internal_default_instance() {
    return reinterpret_cast<const ImMessage_MessageReceiptInfo*>(
               &_ImMessage_MessageReceiptInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(ImMessage_MessageReceiptInfo& a, ImMessage_MessageReceiptInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ImMessage_MessageReceiptInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImMessage_MessageReceiptInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImMessage_MessageReceiptInfo* New() const final {
    return CreateMaybeMessage<ImMessage_MessageReceiptInfo>(nullptr);
  }

  ImMessage_MessageReceiptInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImMessage_MessageReceiptInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImMessage_MessageReceiptInfo& from);
  void MergeFrom(const ImMessage_MessageReceiptInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImMessage_MessageReceiptInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.ImMessage.MessageReceiptInfo";
  }
  protected:
  explicit ImMessage_MessageReceiptInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReadSeqFieldNumber = 1,
  };
  // int64 readSeq = 1;
  void clear_readseq();
  ::PROTOBUF_NAMESPACE_ID::int64 readseq() const;
  void set_readseq(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_readseq() const;
  void _internal_set_readseq(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.ImMessage.MessageReceiptInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 readseq_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class ImMessage_MessageReceiptCountGetRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.ImMessage.MessageReceiptCountGetRequest) */ {
 public:
  inline ImMessage_MessageReceiptCountGetRequest() : ImMessage_MessageReceiptCountGetRequest(nullptr) {}
  virtual ~ImMessage_MessageReceiptCountGetRequest();

  ImMessage_MessageReceiptCountGetRequest(const ImMessage_MessageReceiptCountGetRequest& from);
  ImMessage_MessageReceiptCountGetRequest(ImMessage_MessageReceiptCountGetRequest&& from) noexcept
    : ImMessage_MessageReceiptCountGetRequest() {
    *this = ::std::move(from);
  }

  inline ImMessage_MessageReceiptCountGetRequest& operator=(const ImMessage_MessageReceiptCountGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImMessage_MessageReceiptCountGetRequest& operator=(ImMessage_MessageReceiptCountGetRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImMessage_MessageReceiptCountGetRequest& default_instance();

  static inline const ImMessage_MessageReceiptCountGetRequest* internal_default_instance() {
    return reinterpret_cast<const ImMessage_MessageReceiptCountGetRequest*>(
               &_ImMessage_MessageReceiptCountGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(ImMessage_MessageReceiptCountGetRequest& a, ImMessage_MessageReceiptCountGetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ImMessage_MessageReceiptCountGetRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImMessage_MessageReceiptCountGetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImMessage_MessageReceiptCountGetRequest* New() const final {
    return CreateMaybeMessage<ImMessage_MessageReceiptCountGetRequest>(nullptr);
  }

  ImMessage_MessageReceiptCountGetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImMessage_MessageReceiptCountGetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImMessage_MessageReceiptCountGetRequest& from);
  void MergeFrom(const ImMessage_MessageReceiptCountGetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImMessage_MessageReceiptCountGetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.ImMessage.MessageReceiptCountGetRequest";
  }
  protected:
  explicit ImMessage_MessageReceiptCountGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeqIdFieldNumber = 1,
    kChatTargetFieldNumber = 2,
  };
  // repeated int64 seqId = 1;
  int seqid_size() const;
  private:
  int _internal_seqid_size() const;
  public:
  void clear_seqid();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_seqid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_seqid() const;
  void _internal_add_seqid(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_seqid();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 seqid(int index) const;
  void set_seqid(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_seqid(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      seqid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_seqid();

  // .AcFunDanmu.Im.ImMessage.ChatTarget chatTarget = 2;
  bool has_chattarget() const;
  private:
  bool _internal_has_chattarget() const;
  public:
  void clear_chattarget();
  const ::AcFunDanmu::Im::ImMessage_ChatTarget& chattarget() const;
  ::AcFunDanmu::Im::ImMessage_ChatTarget* release_chattarget();
  ::AcFunDanmu::Im::ImMessage_ChatTarget* mutable_chattarget();
  void set_allocated_chattarget(::AcFunDanmu::Im::ImMessage_ChatTarget* chattarget);
  private:
  const ::AcFunDanmu::Im::ImMessage_ChatTarget& _internal_chattarget() const;
  ::AcFunDanmu::Im::ImMessage_ChatTarget* _internal_mutable_chattarget();
  public:
  void unsafe_arena_set_allocated_chattarget(
      ::AcFunDanmu::Im::ImMessage_ChatTarget* chattarget);
  ::AcFunDanmu::Im::ImMessage_ChatTarget* unsafe_arena_release_chattarget();

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.ImMessage.MessageReceiptCountGetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > seqid_;
  mutable std::atomic<int> _seqid_cached_byte_size_;
  ::AcFunDanmu::Im::ImMessage_ChatTarget* chattarget_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class ImMessage_MessageReceiptCountGetResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.ImMessage.MessageReceiptCountGetResponse) */ {
 public:
  inline ImMessage_MessageReceiptCountGetResponse() : ImMessage_MessageReceiptCountGetResponse(nullptr) {}
  virtual ~ImMessage_MessageReceiptCountGetResponse();

  ImMessage_MessageReceiptCountGetResponse(const ImMessage_MessageReceiptCountGetResponse& from);
  ImMessage_MessageReceiptCountGetResponse(ImMessage_MessageReceiptCountGetResponse&& from) noexcept
    : ImMessage_MessageReceiptCountGetResponse() {
    *this = ::std::move(from);
  }

  inline ImMessage_MessageReceiptCountGetResponse& operator=(const ImMessage_MessageReceiptCountGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImMessage_MessageReceiptCountGetResponse& operator=(ImMessage_MessageReceiptCountGetResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImMessage_MessageReceiptCountGetResponse& default_instance();

  static inline const ImMessage_MessageReceiptCountGetResponse* internal_default_instance() {
    return reinterpret_cast<const ImMessage_MessageReceiptCountGetResponse*>(
               &_ImMessage_MessageReceiptCountGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(ImMessage_MessageReceiptCountGetResponse& a, ImMessage_MessageReceiptCountGetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ImMessage_MessageReceiptCountGetResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImMessage_MessageReceiptCountGetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImMessage_MessageReceiptCountGetResponse* New() const final {
    return CreateMaybeMessage<ImMessage_MessageReceiptCountGetResponse>(nullptr);
  }

  ImMessage_MessageReceiptCountGetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImMessage_MessageReceiptCountGetResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImMessage_MessageReceiptCountGetResponse& from);
  void MergeFrom(const ImMessage_MessageReceiptCountGetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImMessage_MessageReceiptCountGetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.ImMessage.MessageReceiptCountGetResponse";
  }
  protected:
  explicit ImMessage_MessageReceiptCountGetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // repeated .AcFunDanmu.Im.ImMessage.MessageReceiptStatus status = 1;
  int status_size() const;
  private:
  int _internal_status_size() const;
  public:
  void clear_status();
  ::AcFunDanmu::Im::ImMessage_MessageReceiptStatus* mutable_status(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_MessageReceiptStatus >*
      mutable_status();
  private:
  const ::AcFunDanmu::Im::ImMessage_MessageReceiptStatus& _internal_status(int index) const;
  ::AcFunDanmu::Im::ImMessage_MessageReceiptStatus* _internal_add_status();
  public:
  const ::AcFunDanmu::Im::ImMessage_MessageReceiptStatus& status(int index) const;
  ::AcFunDanmu::Im::ImMessage_MessageReceiptStatus* add_status();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_MessageReceiptStatus >&
      status() const;

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.ImMessage.MessageReceiptCountGetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_MessageReceiptStatus > status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class ImMessage_MessageReceiptStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.ImMessage.MessageReceiptStatus) */ {
 public:
  inline ImMessage_MessageReceiptStatus() : ImMessage_MessageReceiptStatus(nullptr) {}
  virtual ~ImMessage_MessageReceiptStatus();

  ImMessage_MessageReceiptStatus(const ImMessage_MessageReceiptStatus& from);
  ImMessage_MessageReceiptStatus(ImMessage_MessageReceiptStatus&& from) noexcept
    : ImMessage_MessageReceiptStatus() {
    *this = ::std::move(from);
  }

  inline ImMessage_MessageReceiptStatus& operator=(const ImMessage_MessageReceiptStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImMessage_MessageReceiptStatus& operator=(ImMessage_MessageReceiptStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImMessage_MessageReceiptStatus& default_instance();

  static inline const ImMessage_MessageReceiptStatus* internal_default_instance() {
    return reinterpret_cast<const ImMessage_MessageReceiptStatus*>(
               &_ImMessage_MessageReceiptStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(ImMessage_MessageReceiptStatus& a, ImMessage_MessageReceiptStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ImMessage_MessageReceiptStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImMessage_MessageReceiptStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImMessage_MessageReceiptStatus* New() const final {
    return CreateMaybeMessage<ImMessage_MessageReceiptStatus>(nullptr);
  }

  ImMessage_MessageReceiptStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImMessage_MessageReceiptStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImMessage_MessageReceiptStatus& from);
  void MergeFrom(const ImMessage_MessageReceiptStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImMessage_MessageReceiptStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.ImMessage.MessageReceiptStatus";
  }
  protected:
  explicit ImMessage_MessageReceiptStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReadCountFieldNumber = 1,
    kUnreadCountFieldNumber = 2,
    kSeqIdFieldNumber = 3,
    kServerTimeFieldNumber = 4,
  };
  // int32 readCount = 1;
  void clear_readcount();
  ::PROTOBUF_NAMESPACE_ID::int32 readcount() const;
  void set_readcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_readcount() const;
  void _internal_set_readcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 unreadCount = 2;
  void clear_unreadcount();
  ::PROTOBUF_NAMESPACE_ID::int32 unreadcount() const;
  void set_unreadcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_unreadcount() const;
  void _internal_set_unreadcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 seqId = 3;
  void clear_seqid();
  ::PROTOBUF_NAMESPACE_ID::int64 seqid() const;
  void set_seqid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_seqid() const;
  void _internal_set_seqid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 serverTime = 4;
  void clear_servertime();
  ::PROTOBUF_NAMESPACE_ID::int64 servertime() const;
  void set_servertime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_servertime() const;
  void _internal_set_servertime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.ImMessage.MessageReceiptStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 readcount_;
  ::PROTOBUF_NAMESPACE_ID::int32 unreadcount_;
  ::PROTOBUF_NAMESPACE_ID::int64 seqid_;
  ::PROTOBUF_NAMESPACE_ID::int64 servertime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class ImMessage_MessageReceiptDetailGetRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.ImMessage.MessageReceiptDetailGetRequest) */ {
 public:
  inline ImMessage_MessageReceiptDetailGetRequest() : ImMessage_MessageReceiptDetailGetRequest(nullptr) {}
  virtual ~ImMessage_MessageReceiptDetailGetRequest();

  ImMessage_MessageReceiptDetailGetRequest(const ImMessage_MessageReceiptDetailGetRequest& from);
  ImMessage_MessageReceiptDetailGetRequest(ImMessage_MessageReceiptDetailGetRequest&& from) noexcept
    : ImMessage_MessageReceiptDetailGetRequest() {
    *this = ::std::move(from);
  }

  inline ImMessage_MessageReceiptDetailGetRequest& operator=(const ImMessage_MessageReceiptDetailGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImMessage_MessageReceiptDetailGetRequest& operator=(ImMessage_MessageReceiptDetailGetRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImMessage_MessageReceiptDetailGetRequest& default_instance();

  static inline const ImMessage_MessageReceiptDetailGetRequest* internal_default_instance() {
    return reinterpret_cast<const ImMessage_MessageReceiptDetailGetRequest*>(
               &_ImMessage_MessageReceiptDetailGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(ImMessage_MessageReceiptDetailGetRequest& a, ImMessage_MessageReceiptDetailGetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ImMessage_MessageReceiptDetailGetRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImMessage_MessageReceiptDetailGetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImMessage_MessageReceiptDetailGetRequest* New() const final {
    return CreateMaybeMessage<ImMessage_MessageReceiptDetailGetRequest>(nullptr);
  }

  ImMessage_MessageReceiptDetailGetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImMessage_MessageReceiptDetailGetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImMessage_MessageReceiptDetailGetRequest& from);
  void MergeFrom(const ImMessage_MessageReceiptDetailGetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImMessage_MessageReceiptDetailGetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.ImMessage.MessageReceiptDetailGetRequest";
  }
  protected:
  explicit ImMessage_MessageReceiptDetailGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatTargetFieldNumber = 2,
    kSeqIdFieldNumber = 1,
  };
  // .AcFunDanmu.Im.ImMessage.ChatTarget chatTarget = 2;
  bool has_chattarget() const;
  private:
  bool _internal_has_chattarget() const;
  public:
  void clear_chattarget();
  const ::AcFunDanmu::Im::ImMessage_ChatTarget& chattarget() const;
  ::AcFunDanmu::Im::ImMessage_ChatTarget* release_chattarget();
  ::AcFunDanmu::Im::ImMessage_ChatTarget* mutable_chattarget();
  void set_allocated_chattarget(::AcFunDanmu::Im::ImMessage_ChatTarget* chattarget);
  private:
  const ::AcFunDanmu::Im::ImMessage_ChatTarget& _internal_chattarget() const;
  ::AcFunDanmu::Im::ImMessage_ChatTarget* _internal_mutable_chattarget();
  public:
  void unsafe_arena_set_allocated_chattarget(
      ::AcFunDanmu::Im::ImMessage_ChatTarget* chattarget);
  ::AcFunDanmu::Im::ImMessage_ChatTarget* unsafe_arena_release_chattarget();

  // int64 seqId = 1;
  void clear_seqid();
  ::PROTOBUF_NAMESPACE_ID::int64 seqid() const;
  void set_seqid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_seqid() const;
  void _internal_set_seqid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.ImMessage.MessageReceiptDetailGetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::AcFunDanmu::Im::ImMessage_ChatTarget* chattarget_;
  ::PROTOBUF_NAMESPACE_ID::int64 seqid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class ImMessage_MessageReceiptDetailGetResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.ImMessage.MessageReceiptDetailGetResponse) */ {
 public:
  inline ImMessage_MessageReceiptDetailGetResponse() : ImMessage_MessageReceiptDetailGetResponse(nullptr) {}
  virtual ~ImMessage_MessageReceiptDetailGetResponse();

  ImMessage_MessageReceiptDetailGetResponse(const ImMessage_MessageReceiptDetailGetResponse& from);
  ImMessage_MessageReceiptDetailGetResponse(ImMessage_MessageReceiptDetailGetResponse&& from) noexcept
    : ImMessage_MessageReceiptDetailGetResponse() {
    *this = ::std::move(from);
  }

  inline ImMessage_MessageReceiptDetailGetResponse& operator=(const ImMessage_MessageReceiptDetailGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImMessage_MessageReceiptDetailGetResponse& operator=(ImMessage_MessageReceiptDetailGetResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImMessage_MessageReceiptDetailGetResponse& default_instance();

  static inline const ImMessage_MessageReceiptDetailGetResponse* internal_default_instance() {
    return reinterpret_cast<const ImMessage_MessageReceiptDetailGetResponse*>(
               &_ImMessage_MessageReceiptDetailGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(ImMessage_MessageReceiptDetailGetResponse& a, ImMessage_MessageReceiptDetailGetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ImMessage_MessageReceiptDetailGetResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImMessage_MessageReceiptDetailGetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImMessage_MessageReceiptDetailGetResponse* New() const final {
    return CreateMaybeMessage<ImMessage_MessageReceiptDetailGetResponse>(nullptr);
  }

  ImMessage_MessageReceiptDetailGetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImMessage_MessageReceiptDetailGetResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImMessage_MessageReceiptDetailGetResponse& from);
  void MergeFrom(const ImMessage_MessageReceiptDetailGetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImMessage_MessageReceiptDetailGetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.ImMessage.MessageReceiptDetailGetResponse";
  }
  protected:
  explicit ImMessage_MessageReceiptDetailGetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReadUserFieldNumber = 1,
    kUnreadUserFieldNumber = 2,
  };
  // repeated .AcFunDanmu.Im.Basic.User readUser = 1;
  int readuser_size() const;
  private:
  int _internal_readuser_size() const;
  public:
  void clear_readuser();
  ::AcFunDanmu::Im::Basic_User* mutable_readuser(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_User >*
      mutable_readuser();
  private:
  const ::AcFunDanmu::Im::Basic_User& _internal_readuser(int index) const;
  ::AcFunDanmu::Im::Basic_User* _internal_add_readuser();
  public:
  const ::AcFunDanmu::Im::Basic_User& readuser(int index) const;
  ::AcFunDanmu::Im::Basic_User* add_readuser();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_User >&
      readuser() const;

  // repeated .AcFunDanmu.Im.Basic.User unreadUser = 2;
  int unreaduser_size() const;
  private:
  int _internal_unreaduser_size() const;
  public:
  void clear_unreaduser();
  ::AcFunDanmu::Im::Basic_User* mutable_unreaduser(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_User >*
      mutable_unreaduser();
  private:
  const ::AcFunDanmu::Im::Basic_User& _internal_unreaduser(int index) const;
  ::AcFunDanmu::Im::Basic_User* _internal_add_unreaduser();
  public:
  const ::AcFunDanmu::Im::Basic_User& unreaduser(int index) const;
  ::AcFunDanmu::Im::Basic_User* add_unreaduser();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_User >&
      unreaduser() const;

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.ImMessage.MessageReceiptDetailGetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_User > readuser_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_User > unreaduser_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class ImMessage_MessageBatchSendRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.ImMessage.MessageBatchSendRequest) */ {
 public:
  inline ImMessage_MessageBatchSendRequest() : ImMessage_MessageBatchSendRequest(nullptr) {}
  virtual ~ImMessage_MessageBatchSendRequest();

  ImMessage_MessageBatchSendRequest(const ImMessage_MessageBatchSendRequest& from);
  ImMessage_MessageBatchSendRequest(ImMessage_MessageBatchSendRequest&& from) noexcept
    : ImMessage_MessageBatchSendRequest() {
    *this = ::std::move(from);
  }

  inline ImMessage_MessageBatchSendRequest& operator=(const ImMessage_MessageBatchSendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImMessage_MessageBatchSendRequest& operator=(ImMessage_MessageBatchSendRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImMessage_MessageBatchSendRequest& default_instance();

  static inline const ImMessage_MessageBatchSendRequest* internal_default_instance() {
    return reinterpret_cast<const ImMessage_MessageBatchSendRequest*>(
               &_ImMessage_MessageBatchSendRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(ImMessage_MessageBatchSendRequest& a, ImMessage_MessageBatchSendRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ImMessage_MessageBatchSendRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImMessage_MessageBatchSendRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImMessage_MessageBatchSendRequest* New() const final {
    return CreateMaybeMessage<ImMessage_MessageBatchSendRequest>(nullptr);
  }

  ImMessage_MessageBatchSendRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImMessage_MessageBatchSendRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImMessage_MessageBatchSendRequest& from);
  void MergeFrom(const ImMessage_MessageBatchSendRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImMessage_MessageBatchSendRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.ImMessage.MessageBatchSendRequest";
  }
  protected:
  explicit ImMessage_MessageBatchSendRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // repeated .AcFunDanmu.Im.ImMessage.Message message = 1;
  int message_size() const;
  private:
  int _internal_message_size() const;
  public:
  void clear_message();
  ::AcFunDanmu::Im::ImMessage_Message* mutable_message(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_Message >*
      mutable_message();
  private:
  const ::AcFunDanmu::Im::ImMessage_Message& _internal_message(int index) const;
  ::AcFunDanmu::Im::ImMessage_Message* _internal_add_message();
  public:
  const ::AcFunDanmu::Im::ImMessage_Message& message(int index) const;
  ::AcFunDanmu::Im::ImMessage_Message* add_message();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_Message >&
      message() const;

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.ImMessage.MessageBatchSendRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_Message > message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class ImMessage_MessageBatchSendResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.ImMessage.MessageBatchSendResponse) */ {
 public:
  inline ImMessage_MessageBatchSendResponse() : ImMessage_MessageBatchSendResponse(nullptr) {}
  virtual ~ImMessage_MessageBatchSendResponse();

  ImMessage_MessageBatchSendResponse(const ImMessage_MessageBatchSendResponse& from);
  ImMessage_MessageBatchSendResponse(ImMessage_MessageBatchSendResponse&& from) noexcept
    : ImMessage_MessageBatchSendResponse() {
    *this = ::std::move(from);
  }

  inline ImMessage_MessageBatchSendResponse& operator=(const ImMessage_MessageBatchSendResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImMessage_MessageBatchSendResponse& operator=(ImMessage_MessageBatchSendResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImMessage_MessageBatchSendResponse& default_instance();

  static inline const ImMessage_MessageBatchSendResponse* internal_default_instance() {
    return reinterpret_cast<const ImMessage_MessageBatchSendResponse*>(
               &_ImMessage_MessageBatchSendResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(ImMessage_MessageBatchSendResponse& a, ImMessage_MessageBatchSendResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ImMessage_MessageBatchSendResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImMessage_MessageBatchSendResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImMessage_MessageBatchSendResponse* New() const final {
    return CreateMaybeMessage<ImMessage_MessageBatchSendResponse>(nullptr);
  }

  ImMessage_MessageBatchSendResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImMessage_MessageBatchSendResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImMessage_MessageBatchSendResponse& from);
  void MergeFrom(const ImMessage_MessageBatchSendResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImMessage_MessageBatchSendResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.ImMessage.MessageBatchSendResponse";
  }
  protected:
  explicit ImMessage_MessageBatchSendResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 1,
  };
  // repeated .AcFunDanmu.Im.ImMessage.SendMessageResponse response = 1;
  int response_size() const;
  private:
  int _internal_response_size() const;
  public:
  void clear_response();
  ::AcFunDanmu::Im::ImMessage_SendMessageResponse* mutable_response(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_SendMessageResponse >*
      mutable_response();
  private:
  const ::AcFunDanmu::Im::ImMessage_SendMessageResponse& _internal_response(int index) const;
  ::AcFunDanmu::Im::ImMessage_SendMessageResponse* _internal_add_response();
  public:
  const ::AcFunDanmu::Im::ImMessage_SendMessageResponse& response(int index) const;
  ::AcFunDanmu::Im::ImMessage_SendMessageResponse* add_response();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_SendMessageResponse >&
      response() const;

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.ImMessage.MessageBatchSendResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_SendMessageResponse > response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class ImMessage_ImageAttachment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.ImMessage.ImageAttachment) */ {
 public:
  inline ImMessage_ImageAttachment() : ImMessage_ImageAttachment(nullptr) {}
  virtual ~ImMessage_ImageAttachment();

  ImMessage_ImageAttachment(const ImMessage_ImageAttachment& from);
  ImMessage_ImageAttachment(ImMessage_ImageAttachment&& from) noexcept
    : ImMessage_ImageAttachment() {
    *this = ::std::move(from);
  }

  inline ImMessage_ImageAttachment& operator=(const ImMessage_ImageAttachment& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImMessage_ImageAttachment& operator=(ImMessage_ImageAttachment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImMessage_ImageAttachment& default_instance();

  static inline const ImMessage_ImageAttachment* internal_default_instance() {
    return reinterpret_cast<const ImMessage_ImageAttachment*>(
               &_ImMessage_ImageAttachment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(ImMessage_ImageAttachment& a, ImMessage_ImageAttachment& b) {
    a.Swap(&b);
  }
  inline void Swap(ImMessage_ImageAttachment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImMessage_ImageAttachment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImMessage_ImageAttachment* New() const final {
    return CreateMaybeMessage<ImMessage_ImageAttachment>(nullptr);
  }

  ImMessage_ImageAttachment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImMessage_ImageAttachment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImMessage_ImageAttachment& from);
  void MergeFrom(const ImMessage_ImageAttachment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImMessage_ImageAttachment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.ImMessage.ImageAttachment";
  }
  protected:
  explicit ImMessage_ImageAttachment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMimeTypeFieldNumber = 1,
    kUrlFieldNumber = 2,
    kWidthFieldNumber = 3,
    kHeightFieldNumber = 4,
    kLengthInBytesFieldNumber = 5,
  };
  // string mimeType = 1;
  void clear_mimetype();
  const std::string& mimetype() const;
  void set_mimetype(const std::string& value);
  void set_mimetype(std::string&& value);
  void set_mimetype(const char* value);
  void set_mimetype(const char* value, size_t size);
  std::string* mutable_mimetype();
  std::string* release_mimetype();
  void set_allocated_mimetype(std::string* mimetype);
  private:
  const std::string& _internal_mimetype() const;
  void _internal_set_mimetype(const std::string& value);
  std::string* _internal_mutable_mimetype();
  public:

  // string url = 2;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // int32 width = 3;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 height = 4;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 lengthInBytes = 5;
  void clear_lengthinbytes();
  ::PROTOBUF_NAMESPACE_ID::int64 lengthinbytes() const;
  void set_lengthinbytes(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_lengthinbytes() const;
  void _internal_set_lengthinbytes(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.ImMessage.ImageAttachment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mimetype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int64 lengthinbytes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class ImMessage_AudioAttachment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.ImMessage.AudioAttachment) */ {
 public:
  inline ImMessage_AudioAttachment() : ImMessage_AudioAttachment(nullptr) {}
  virtual ~ImMessage_AudioAttachment();

  ImMessage_AudioAttachment(const ImMessage_AudioAttachment& from);
  ImMessage_AudioAttachment(ImMessage_AudioAttachment&& from) noexcept
    : ImMessage_AudioAttachment() {
    *this = ::std::move(from);
  }

  inline ImMessage_AudioAttachment& operator=(const ImMessage_AudioAttachment& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImMessage_AudioAttachment& operator=(ImMessage_AudioAttachment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImMessage_AudioAttachment& default_instance();

  static inline const ImMessage_AudioAttachment* internal_default_instance() {
    return reinterpret_cast<const ImMessage_AudioAttachment*>(
               &_ImMessage_AudioAttachment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(ImMessage_AudioAttachment& a, ImMessage_AudioAttachment& b) {
    a.Swap(&b);
  }
  inline void Swap(ImMessage_AudioAttachment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImMessage_AudioAttachment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImMessage_AudioAttachment* New() const final {
    return CreateMaybeMessage<ImMessage_AudioAttachment>(nullptr);
  }

  ImMessage_AudioAttachment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImMessage_AudioAttachment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImMessage_AudioAttachment& from);
  void MergeFrom(const ImMessage_AudioAttachment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImMessage_AudioAttachment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.ImMessage.AudioAttachment";
  }
  protected:
  explicit ImMessage_AudioAttachment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMimeTypeFieldNumber = 1,
    kUrlFieldNumber = 2,
    kWidthFieldNumber = 3,
    kHeightFieldNumber = 4,
    kLengthInBytesFieldNumber = 5,
  };
  // string mimeType = 1;
  void clear_mimetype();
  const std::string& mimetype() const;
  void set_mimetype(const std::string& value);
  void set_mimetype(std::string&& value);
  void set_mimetype(const char* value);
  void set_mimetype(const char* value, size_t size);
  std::string* mutable_mimetype();
  std::string* release_mimetype();
  void set_allocated_mimetype(std::string* mimetype);
  private:
  const std::string& _internal_mimetype() const;
  void _internal_set_mimetype(const std::string& value);
  std::string* _internal_mutable_mimetype();
  public:

  // string url = 2;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // int32 width = 3;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 height = 4;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 lengthInBytes = 5;
  void clear_lengthinbytes();
  ::PROTOBUF_NAMESPACE_ID::int64 lengthinbytes() const;
  void set_lengthinbytes(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_lengthinbytes() const;
  void _internal_set_lengthinbytes(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.ImMessage.AudioAttachment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mimetype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int64 lengthinbytes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class ImMessage_GifAttachment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.ImMessage.GifAttachment) */ {
 public:
  inline ImMessage_GifAttachment() : ImMessage_GifAttachment(nullptr) {}
  virtual ~ImMessage_GifAttachment();

  ImMessage_GifAttachment(const ImMessage_GifAttachment& from);
  ImMessage_GifAttachment(ImMessage_GifAttachment&& from) noexcept
    : ImMessage_GifAttachment() {
    *this = ::std::move(from);
  }

  inline ImMessage_GifAttachment& operator=(const ImMessage_GifAttachment& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImMessage_GifAttachment& operator=(ImMessage_GifAttachment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImMessage_GifAttachment& default_instance();

  static inline const ImMessage_GifAttachment* internal_default_instance() {
    return reinterpret_cast<const ImMessage_GifAttachment*>(
               &_ImMessage_GifAttachment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(ImMessage_GifAttachment& a, ImMessage_GifAttachment& b) {
    a.Swap(&b);
  }
  inline void Swap(ImMessage_GifAttachment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImMessage_GifAttachment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImMessage_GifAttachment* New() const final {
    return CreateMaybeMessage<ImMessage_GifAttachment>(nullptr);
  }

  ImMessage_GifAttachment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImMessage_GifAttachment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImMessage_GifAttachment& from);
  void MergeFrom(const ImMessage_GifAttachment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImMessage_GifAttachment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.ImMessage.GifAttachment";
  }
  protected:
  explicit ImMessage_GifAttachment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMimeTypeFieldNumber = 1,
    kUrlFieldNumber = 2,
    kThumbaUrlFieldNumber = 5,
    kTextFieldNumber = 6,
    kWidthFieldNumber = 3,
    kHeightFieldNumber = 4,
  };
  // string mimeType = 1;
  void clear_mimetype();
  const std::string& mimetype() const;
  void set_mimetype(const std::string& value);
  void set_mimetype(std::string&& value);
  void set_mimetype(const char* value);
  void set_mimetype(const char* value, size_t size);
  std::string* mutable_mimetype();
  std::string* release_mimetype();
  void set_allocated_mimetype(std::string* mimetype);
  private:
  const std::string& _internal_mimetype() const;
  void _internal_set_mimetype(const std::string& value);
  std::string* _internal_mutable_mimetype();
  public:

  // string url = 2;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // string thumbaUrl = 5;
  void clear_thumbaurl();
  const std::string& thumbaurl() const;
  void set_thumbaurl(const std::string& value);
  void set_thumbaurl(std::string&& value);
  void set_thumbaurl(const char* value);
  void set_thumbaurl(const char* value, size_t size);
  std::string* mutable_thumbaurl();
  std::string* release_thumbaurl();
  void set_allocated_thumbaurl(std::string* thumbaurl);
  private:
  const std::string& _internal_thumbaurl() const;
  void _internal_set_thumbaurl(const std::string& value);
  std::string* _internal_mutable_thumbaurl();
  public:

  // string text = 6;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // int32 width = 3;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 height = 4;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.ImMessage.GifAttachment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mimetype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr thumbaurl_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class ImMessage_Attachment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.ImMessage.Attachment) */ {
 public:
  inline ImMessage_Attachment() : ImMessage_Attachment(nullptr) {}
  virtual ~ImMessage_Attachment();

  ImMessage_Attachment(const ImMessage_Attachment& from);
  ImMessage_Attachment(ImMessage_Attachment&& from) noexcept
    : ImMessage_Attachment() {
    *this = ::std::move(from);
  }

  inline ImMessage_Attachment& operator=(const ImMessage_Attachment& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImMessage_Attachment& operator=(ImMessage_Attachment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImMessage_Attachment& default_instance();

  enum AttacmnentCase {
    kImageAttachment = 1,
    kAudioAttachment = 2,
    ATTACMNENT_NOT_SET = 0,
  };

  static inline const ImMessage_Attachment* internal_default_instance() {
    return reinterpret_cast<const ImMessage_Attachment*>(
               &_ImMessage_Attachment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(ImMessage_Attachment& a, ImMessage_Attachment& b) {
    a.Swap(&b);
  }
  inline void Swap(ImMessage_Attachment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImMessage_Attachment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImMessage_Attachment* New() const final {
    return CreateMaybeMessage<ImMessage_Attachment>(nullptr);
  }

  ImMessage_Attachment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImMessage_Attachment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImMessage_Attachment& from);
  void MergeFrom(const ImMessage_Attachment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImMessage_Attachment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.ImMessage.Attachment";
  }
  protected:
  explicit ImMessage_Attachment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageAttachmentFieldNumber = 1,
    kAudioAttachmentFieldNumber = 2,
  };
  // .AcFunDanmu.Im.ImMessage.ImageAttachment imageAttachment = 1;
  bool has_imageattachment() const;
  private:
  bool _internal_has_imageattachment() const;
  public:
  void clear_imageattachment();
  const ::AcFunDanmu::Im::ImMessage_ImageAttachment& imageattachment() const;
  ::AcFunDanmu::Im::ImMessage_ImageAttachment* release_imageattachment();
  ::AcFunDanmu::Im::ImMessage_ImageAttachment* mutable_imageattachment();
  void set_allocated_imageattachment(::AcFunDanmu::Im::ImMessage_ImageAttachment* imageattachment);
  private:
  const ::AcFunDanmu::Im::ImMessage_ImageAttachment& _internal_imageattachment() const;
  ::AcFunDanmu::Im::ImMessage_ImageAttachment* _internal_mutable_imageattachment();
  public:
  void unsafe_arena_set_allocated_imageattachment(
      ::AcFunDanmu::Im::ImMessage_ImageAttachment* imageattachment);
  ::AcFunDanmu::Im::ImMessage_ImageAttachment* unsafe_arena_release_imageattachment();

  // .AcFunDanmu.Im.ImMessage.AudioAttachment audioAttachment = 2;
  bool has_audioattachment() const;
  private:
  bool _internal_has_audioattachment() const;
  public:
  void clear_audioattachment();
  const ::AcFunDanmu::Im::ImMessage_AudioAttachment& audioattachment() const;
  ::AcFunDanmu::Im::ImMessage_AudioAttachment* release_audioattachment();
  ::AcFunDanmu::Im::ImMessage_AudioAttachment* mutable_audioattachment();
  void set_allocated_audioattachment(::AcFunDanmu::Im::ImMessage_AudioAttachment* audioattachment);
  private:
  const ::AcFunDanmu::Im::ImMessage_AudioAttachment& _internal_audioattachment() const;
  ::AcFunDanmu::Im::ImMessage_AudioAttachment* _internal_mutable_audioattachment();
  public:
  void unsafe_arena_set_allocated_audioattachment(
      ::AcFunDanmu::Im::ImMessage_AudioAttachment* audioattachment);
  ::AcFunDanmu::Im::ImMessage_AudioAttachment* unsafe_arena_release_audioattachment();

  void clear_attacmnent();
  AttacmnentCase attacmnent_case() const;
  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.ImMessage.Attachment)
 private:
  class _Internal;
  void set_has_imageattachment();
  void set_has_audioattachment();

  inline bool has_attacmnent() const;
  inline void clear_has_attacmnent();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union AttacmnentUnion {
    AttacmnentUnion() {}
    ::AcFunDanmu::Im::ImMessage_ImageAttachment* imageattachment_;
    ::AcFunDanmu::Im::ImMessage_AudioAttachment* audioattachment_;
  } attacmnent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class ImMessage_Attachments PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.ImMessage.Attachments) */ {
 public:
  inline ImMessage_Attachments() : ImMessage_Attachments(nullptr) {}
  virtual ~ImMessage_Attachments();

  ImMessage_Attachments(const ImMessage_Attachments& from);
  ImMessage_Attachments(ImMessage_Attachments&& from) noexcept
    : ImMessage_Attachments() {
    *this = ::std::move(from);
  }

  inline ImMessage_Attachments& operator=(const ImMessage_Attachments& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImMessage_Attachments& operator=(ImMessage_Attachments&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImMessage_Attachments& default_instance();

  static inline const ImMessage_Attachments* internal_default_instance() {
    return reinterpret_cast<const ImMessage_Attachments*>(
               &_ImMessage_Attachments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(ImMessage_Attachments& a, ImMessage_Attachments& b) {
    a.Swap(&b);
  }
  inline void Swap(ImMessage_Attachments* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImMessage_Attachments* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImMessage_Attachments* New() const final {
    return CreateMaybeMessage<ImMessage_Attachments>(nullptr);
  }

  ImMessage_Attachments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImMessage_Attachments>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImMessage_Attachments& from);
  void MergeFrom(const ImMessage_Attachments& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImMessage_Attachments* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.ImMessage.Attachments";
  }
  protected:
  explicit ImMessage_Attachments(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttachmentsFieldNumber = 1,
  };
  // repeated .AcFunDanmu.Im.ImMessage.Attachment attachments = 1;
  int attachments_size() const;
  private:
  int _internal_attachments_size() const;
  public:
  void clear_attachments();
  ::AcFunDanmu::Im::ImMessage_Attachment* mutable_attachments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_Attachment >*
      mutable_attachments();
  private:
  const ::AcFunDanmu::Im::ImMessage_Attachment& _internal_attachments(int index) const;
  ::AcFunDanmu::Im::ImMessage_Attachment* _internal_add_attachments();
  public:
  const ::AcFunDanmu::Im::ImMessage_Attachment& attachments(int index) const;
  ::AcFunDanmu::Im::ImMessage_Attachment* add_attachments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_Attachment >&
      attachments() const;

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.ImMessage.Attachments)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_Attachment > attachments_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class ImMessage_PlaceHolderMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.ImMessage.PlaceHolderMessage) */ {
 public:
  inline ImMessage_PlaceHolderMessage() : ImMessage_PlaceHolderMessage(nullptr) {}
  virtual ~ImMessage_PlaceHolderMessage();

  ImMessage_PlaceHolderMessage(const ImMessage_PlaceHolderMessage& from);
  ImMessage_PlaceHolderMessage(ImMessage_PlaceHolderMessage&& from) noexcept
    : ImMessage_PlaceHolderMessage() {
    *this = ::std::move(from);
  }

  inline ImMessage_PlaceHolderMessage& operator=(const ImMessage_PlaceHolderMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImMessage_PlaceHolderMessage& operator=(ImMessage_PlaceHolderMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImMessage_PlaceHolderMessage& default_instance();

  static inline const ImMessage_PlaceHolderMessage* internal_default_instance() {
    return reinterpret_cast<const ImMessage_PlaceHolderMessage*>(
               &_ImMessage_PlaceHolderMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(ImMessage_PlaceHolderMessage& a, ImMessage_PlaceHolderMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ImMessage_PlaceHolderMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImMessage_PlaceHolderMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImMessage_PlaceHolderMessage* New() const final {
    return CreateMaybeMessage<ImMessage_PlaceHolderMessage>(nullptr);
  }

  ImMessage_PlaceHolderMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImMessage_PlaceHolderMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImMessage_PlaceHolderMessage& from);
  void MergeFrom(const ImMessage_PlaceHolderMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImMessage_PlaceHolderMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.ImMessage.PlaceHolderMessage";
  }
  protected:
  explicit ImMessage_PlaceHolderMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinSeqFieldNumber = 1,
    kMaxSeqFieldNumber = 2,
  };
  // int64 minSeq = 1;
  void clear_minseq();
  ::PROTOBUF_NAMESPACE_ID::int64 minseq() const;
  void set_minseq(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_minseq() const;
  void _internal_set_minseq(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 maxSeq = 2;
  void clear_maxseq();
  ::PROTOBUF_NAMESPACE_ID::int64 maxseq() const;
  void set_maxseq(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_maxseq() const;
  void _internal_set_maxseq(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.ImMessage.PlaceHolderMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 minseq_;
  ::PROTOBUF_NAMESPACE_ID::int64 maxseq_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class ImMessage_ImageTextMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.ImMessage.ImageTextMessage) */ {
 public:
  inline ImMessage_ImageTextMessage() : ImMessage_ImageTextMessage(nullptr) {}
  virtual ~ImMessage_ImageTextMessage();

  ImMessage_ImageTextMessage(const ImMessage_ImageTextMessage& from);
  ImMessage_ImageTextMessage(ImMessage_ImageTextMessage&& from) noexcept
    : ImMessage_ImageTextMessage() {
    *this = ::std::move(from);
  }

  inline ImMessage_ImageTextMessage& operator=(const ImMessage_ImageTextMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImMessage_ImageTextMessage& operator=(ImMessage_ImageTextMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImMessage_ImageTextMessage& default_instance();

  static inline const ImMessage_ImageTextMessage* internal_default_instance() {
    return reinterpret_cast<const ImMessage_ImageTextMessage*>(
               &_ImMessage_ImageTextMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(ImMessage_ImageTextMessage& a, ImMessage_ImageTextMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ImMessage_ImageTextMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImMessage_ImageTextMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImMessage_ImageTextMessage* New() const final {
    return CreateMaybeMessage<ImMessage_ImageTextMessage>(nullptr);
  }

  ImMessage_ImageTextMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImMessage_ImageTextMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImMessage_ImageTextMessage& from);
  void MergeFrom(const ImMessage_ImageTextMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImMessage_ImageTextMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.ImMessage.ImageTextMessage";
  }
  protected:
  explicit ImMessage_ImageTextMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kImageUrlFieldNumber = 3,
    kActionUrlFieldNumber = 4,
    kWidthFieldNumber = 5,
    kAspectRatioFieldNumber = 6,
  };
  // string title = 1;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string imageUrl = 3;
  void clear_imageurl();
  const std::string& imageurl() const;
  void set_imageurl(const std::string& value);
  void set_imageurl(std::string&& value);
  void set_imageurl(const char* value);
  void set_imageurl(const char* value, size_t size);
  std::string* mutable_imageurl();
  std::string* release_imageurl();
  void set_allocated_imageurl(std::string* imageurl);
  private:
  const std::string& _internal_imageurl() const;
  void _internal_set_imageurl(const std::string& value);
  std::string* _internal_mutable_imageurl();
  public:

  // string actionUrl = 4;
  void clear_actionurl();
  const std::string& actionurl() const;
  void set_actionurl(const std::string& value);
  void set_actionurl(std::string&& value);
  void set_actionurl(const char* value);
  void set_actionurl(const char* value, size_t size);
  std::string* mutable_actionurl();
  std::string* release_actionurl();
  void set_allocated_actionurl(std::string* actionurl);
  private:
  const std::string& _internal_actionurl() const;
  void _internal_set_actionurl(const std::string& value);
  std::string* _internal_mutable_actionurl();
  public:

  // int32 width = 5;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float aspectRatio = 6;
  void clear_aspectratio();
  float aspectratio() const;
  void set_aspectratio(float value);
  private:
  float _internal_aspectratio() const;
  void _internal_set_aspectratio(float value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.ImMessage.ImageTextMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imageurl_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr actionurl_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  float aspectratio_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class ImMessage_RichTextMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.ImMessage.RichTextMessage) */ {
 public:
  inline ImMessage_RichTextMessage() : ImMessage_RichTextMessage(nullptr) {}
  virtual ~ImMessage_RichTextMessage();

  ImMessage_RichTextMessage(const ImMessage_RichTextMessage& from);
  ImMessage_RichTextMessage(ImMessage_RichTextMessage&& from) noexcept
    : ImMessage_RichTextMessage() {
    *this = ::std::move(from);
  }

  inline ImMessage_RichTextMessage& operator=(const ImMessage_RichTextMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImMessage_RichTextMessage& operator=(ImMessage_RichTextMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImMessage_RichTextMessage& default_instance();

  static inline const ImMessage_RichTextMessage* internal_default_instance() {
    return reinterpret_cast<const ImMessage_RichTextMessage*>(
               &_ImMessage_RichTextMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(ImMessage_RichTextMessage& a, ImMessage_RichTextMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ImMessage_RichTextMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImMessage_RichTextMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImMessage_RichTextMessage* New() const final {
    return CreateMaybeMessage<ImMessage_RichTextMessage>(nullptr);
  }

  ImMessage_RichTextMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImMessage_RichTextMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImMessage_RichTextMessage& from);
  void MergeFrom(const ImMessage_RichTextMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImMessage_RichTextMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.ImMessage.RichTextMessage";
  }
  protected:
  explicit ImMessage_RichTextMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRichTextMessageFieldNumber = 1,
  };
  // .AcFunDanmu.Im.ImMessage.RichTextNoticeMessage richTextMessage = 1;
  bool has_richtextmessage() const;
  private:
  bool _internal_has_richtextmessage() const;
  public:
  void clear_richtextmessage();
  const ::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage& richtextmessage() const;
  ::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage* release_richtextmessage();
  ::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage* mutable_richtextmessage();
  void set_allocated_richtextmessage(::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage* richtextmessage);
  private:
  const ::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage& _internal_richtextmessage() const;
  ::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage* _internal_mutable_richtextmessage();
  public:
  void unsafe_arena_set_allocated_richtextmessage(
      ::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage* richtextmessage);
  ::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage* unsafe_arena_release_richtextmessage();

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.ImMessage.RichTextMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage* richtextmessage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class ImMessage_NoticeMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.ImMessage.NoticeMessage) */ {
 public:
  inline ImMessage_NoticeMessage() : ImMessage_NoticeMessage(nullptr) {}
  virtual ~ImMessage_NoticeMessage();

  ImMessage_NoticeMessage(const ImMessage_NoticeMessage& from);
  ImMessage_NoticeMessage(ImMessage_NoticeMessage&& from) noexcept
    : ImMessage_NoticeMessage() {
    *this = ::std::move(from);
  }

  inline ImMessage_NoticeMessage& operator=(const ImMessage_NoticeMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImMessage_NoticeMessage& operator=(ImMessage_NoticeMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImMessage_NoticeMessage& default_instance();

  static inline const ImMessage_NoticeMessage* internal_default_instance() {
    return reinterpret_cast<const ImMessage_NoticeMessage*>(
               &_ImMessage_NoticeMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(ImMessage_NoticeMessage& a, ImMessage_NoticeMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ImMessage_NoticeMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImMessage_NoticeMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImMessage_NoticeMessage* New() const final {
    return CreateMaybeMessage<ImMessage_NoticeMessage>(nullptr);
  }

  ImMessage_NoticeMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImMessage_NoticeMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImMessage_NoticeMessage& from);
  void MergeFrom(const ImMessage_NoticeMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImMessage_NoticeMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.ImMessage.NoticeMessage";
  }
  protected:
  explicit ImMessage_NoticeMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 5,
    kRichTextNoticeFieldNumber = 2,
    kI18NCopyWritingFieldNumber = 10,
  };
  // string msg = 5;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // .AcFunDanmu.Im.ImMessage.RichTextNoticeMessage richTextNotice = 2;
  bool has_richtextnotice() const;
  private:
  bool _internal_has_richtextnotice() const;
  public:
  void clear_richtextnotice();
  const ::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage& richtextnotice() const;
  ::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage* release_richtextnotice();
  ::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage* mutable_richtextnotice();
  void set_allocated_richtextnotice(::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage* richtextnotice);
  private:
  const ::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage& _internal_richtextnotice() const;
  ::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage* _internal_mutable_richtextnotice();
  public:
  void unsafe_arena_set_allocated_richtextnotice(
      ::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage* richtextnotice);
  ::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage* unsafe_arena_release_richtextnotice();

  // .AcFunDanmu.Im.Basic.I18nCopyWriting i18nCopyWriting = 10;
  bool has_i18ncopywriting() const;
  private:
  bool _internal_has_i18ncopywriting() const;
  public:
  void clear_i18ncopywriting();
  const ::AcFunDanmu::Im::Basic_I18nCopyWriting& i18ncopywriting() const;
  ::AcFunDanmu::Im::Basic_I18nCopyWriting* release_i18ncopywriting();
  ::AcFunDanmu::Im::Basic_I18nCopyWriting* mutable_i18ncopywriting();
  void set_allocated_i18ncopywriting(::AcFunDanmu::Im::Basic_I18nCopyWriting* i18ncopywriting);
  private:
  const ::AcFunDanmu::Im::Basic_I18nCopyWriting& _internal_i18ncopywriting() const;
  ::AcFunDanmu::Im::Basic_I18nCopyWriting* _internal_mutable_i18ncopywriting();
  public:
  void unsafe_arena_set_allocated_i18ncopywriting(
      ::AcFunDanmu::Im::Basic_I18nCopyWriting* i18ncopywriting);
  ::AcFunDanmu::Im::Basic_I18nCopyWriting* unsafe_arena_release_i18ncopywriting();

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.ImMessage.NoticeMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage* richtextnotice_;
  ::AcFunDanmu::Im::Basic_I18nCopyWriting* i18ncopywriting_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class ImMessage_RichTextNoticeMessage_RichTextItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.ImMessage.RichTextNoticeMessage.RichTextItem) */ {
 public:
  inline ImMessage_RichTextNoticeMessage_RichTextItem() : ImMessage_RichTextNoticeMessage_RichTextItem(nullptr) {}
  virtual ~ImMessage_RichTextNoticeMessage_RichTextItem();

  ImMessage_RichTextNoticeMessage_RichTextItem(const ImMessage_RichTextNoticeMessage_RichTextItem& from);
  ImMessage_RichTextNoticeMessage_RichTextItem(ImMessage_RichTextNoticeMessage_RichTextItem&& from) noexcept
    : ImMessage_RichTextNoticeMessage_RichTextItem() {
    *this = ::std::move(from);
  }

  inline ImMessage_RichTextNoticeMessage_RichTextItem& operator=(const ImMessage_RichTextNoticeMessage_RichTextItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImMessage_RichTextNoticeMessage_RichTextItem& operator=(ImMessage_RichTextNoticeMessage_RichTextItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImMessage_RichTextNoticeMessage_RichTextItem& default_instance();

  static inline const ImMessage_RichTextNoticeMessage_RichTextItem* internal_default_instance() {
    return reinterpret_cast<const ImMessage_RichTextNoticeMessage_RichTextItem*>(
               &_ImMessage_RichTextNoticeMessage_RichTextItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(ImMessage_RichTextNoticeMessage_RichTextItem& a, ImMessage_RichTextNoticeMessage_RichTextItem& b) {
    a.Swap(&b);
  }
  inline void Swap(ImMessage_RichTextNoticeMessage_RichTextItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImMessage_RichTextNoticeMessage_RichTextItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImMessage_RichTextNoticeMessage_RichTextItem* New() const final {
    return CreateMaybeMessage<ImMessage_RichTextNoticeMessage_RichTextItem>(nullptr);
  }

  ImMessage_RichTextNoticeMessage_RichTextItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImMessage_RichTextNoticeMessage_RichTextItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImMessage_RichTextNoticeMessage_RichTextItem& from);
  void MergeFrom(const ImMessage_RichTextNoticeMessage_RichTextItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImMessage_RichTextNoticeMessage_RichTextItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.ImMessage.RichTextNoticeMessage.RichTextItem";
  }
  protected:
  explicit ImMessage_RichTextNoticeMessage_RichTextItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClickActionFieldNumber = 4,
    kColorFieldNumber = 1,
    kStartFieldNumber = 2,
    kLenFieldNumber = 3,
    kUnderlineFieldNumber = 5,
  };
  // string clickAction = 4;
  void clear_clickaction();
  const std::string& clickaction() const;
  void set_clickaction(const std::string& value);
  void set_clickaction(std::string&& value);
  void set_clickaction(const char* value);
  void set_clickaction(const char* value, size_t size);
  std::string* mutable_clickaction();
  std::string* release_clickaction();
  void set_allocated_clickaction(std::string* clickaction);
  private:
  const std::string& _internal_clickaction() const;
  void _internal_set_clickaction(const std::string& value);
  std::string* _internal_mutable_clickaction();
  public:

  // int32 color = 1;
  void clear_color();
  ::PROTOBUF_NAMESPACE_ID::int32 color() const;
  void set_color(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_color() const;
  void _internal_set_color(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 start = 2;
  void clear_start();
  ::PROTOBUF_NAMESPACE_ID::int32 start() const;
  void set_start(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_start() const;
  void _internal_set_start(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 len = 3;
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::int32 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_len() const;
  void _internal_set_len(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool underline = 5;
  void clear_underline();
  bool underline() const;
  void set_underline(bool value);
  private:
  bool _internal_underline() const;
  void _internal_set_underline(bool value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.ImMessage.RichTextNoticeMessage.RichTextItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clickaction_;
  ::PROTOBUF_NAMESPACE_ID::int32 color_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_;
  ::PROTOBUF_NAMESPACE_ID::int32 len_;
  bool underline_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class ImMessage_RichTextNoticeMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.ImMessage.RichTextNoticeMessage) */ {
 public:
  inline ImMessage_RichTextNoticeMessage() : ImMessage_RichTextNoticeMessage(nullptr) {}
  virtual ~ImMessage_RichTextNoticeMessage();

  ImMessage_RichTextNoticeMessage(const ImMessage_RichTextNoticeMessage& from);
  ImMessage_RichTextNoticeMessage(ImMessage_RichTextNoticeMessage&& from) noexcept
    : ImMessage_RichTextNoticeMessage() {
    *this = ::std::move(from);
  }

  inline ImMessage_RichTextNoticeMessage& operator=(const ImMessage_RichTextNoticeMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImMessage_RichTextNoticeMessage& operator=(ImMessage_RichTextNoticeMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImMessage_RichTextNoticeMessage& default_instance();

  static inline const ImMessage_RichTextNoticeMessage* internal_default_instance() {
    return reinterpret_cast<const ImMessage_RichTextNoticeMessage*>(
               &_ImMessage_RichTextNoticeMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(ImMessage_RichTextNoticeMessage& a, ImMessage_RichTextNoticeMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ImMessage_RichTextNoticeMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImMessage_RichTextNoticeMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImMessage_RichTextNoticeMessage* New() const final {
    return CreateMaybeMessage<ImMessage_RichTextNoticeMessage>(nullptr);
  }

  ImMessage_RichTextNoticeMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImMessage_RichTextNoticeMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImMessage_RichTextNoticeMessage& from);
  void MergeFrom(const ImMessage_RichTextNoticeMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImMessage_RichTextNoticeMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.ImMessage.RichTextNoticeMessage";
  }
  protected:
  explicit ImMessage_RichTextNoticeMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ImMessage_RichTextNoticeMessage_RichTextItem RichTextItem;

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .AcFunDanmu.Im.ImMessage.RichTextNoticeMessage.RichTextItem items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage_RichTextItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage_RichTextItem >*
      mutable_items();
  private:
  const ::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage_RichTextItem& _internal_items(int index) const;
  ::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage_RichTextItem* _internal_add_items();
  public:
  const ::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage_RichTextItem& items(int index) const;
  ::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage_RichTextItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage_RichTextItem >&
      items() const;

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.ImMessage.RichTextNoticeMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage_RichTextItem > items_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class ImMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.ImMessage) */ {
 public:
  inline ImMessage() : ImMessage(nullptr) {}
  virtual ~ImMessage();

  ImMessage(const ImMessage& from);
  ImMessage(ImMessage&& from) noexcept
    : ImMessage() {
    *this = ::std::move(from);
  }

  inline ImMessage& operator=(const ImMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImMessage& operator=(ImMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImMessage& default_instance();

  static inline const ImMessage* internal_default_instance() {
    return reinterpret_cast<const ImMessage*>(
               &_ImMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(ImMessage& a, ImMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ImMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImMessage* New() const final {
    return CreateMaybeMessage<ImMessage>(nullptr);
  }

  ImMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImMessage& from);
  void MergeFrom(const ImMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.ImMessage";
  }
  protected:
  explicit ImMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ImMessage_Message Message;
  typedef ImMessage_SendMessageResponse SendMessageResponse;
  typedef ImMessage_PullOldRequest PullOldRequest;
  typedef ImMessage_PullOldResponse PullOldResponse;
  typedef ImMessage_PullNewRequest PullNewRequest;
  typedef ImMessage_PullNewResponse PullNewResponse;
  typedef ImMessage_SessionListRequest SessionListRequest;
  typedef ImMessage_ChatSession ChatSession;
  typedef ImMessage_Reminder Reminder;
  typedef ImMessage_RemindBody RemindBody;
  typedef ImMessage_ChatTarget ChatTarget;
  typedef ImMessage_SessionListResponse SessionListResponse;
  typedef ImMessage_SessionPageListRequest SessionPageListRequest;
  typedef ImMessage_SessionPageListResponse SessionPageListResponse;
  typedef ImMessage_SessionRemoveRequest SessionRemoveRequest;
  typedef ImMessage_SessionRemoveResponse SessionRemoveResponse;
  typedef ImMessage_SessionCleanRequest SessionCleanRequest;
  typedef ImMessage_SessionCleanResponse SessionCleanResponse;
  typedef ImMessage_MessageDeleteRequest MessageDeleteRequest;
  typedef ImMessage_MessageDeleteResponse MessageDeleteResponse;
  typedef ImMessage_MessageCancelRequest MessageCancelRequest;
  typedef ImMessage_MessageCancelResponse MessageCancelResponse;
  typedef ImMessage_MessageClearRequest MessageClearRequest;
  typedef ImMessage_MessageClearResponse MessageClearResponse;
  typedef ImMessage_ReadSeqInfo ReadSeqInfo;
  typedef ImMessage_MessageReadSeqRequest MessageReadSeqRequest;
  typedef ImMessage_MessageReadSeqResponse MessageReadSeqResponse;
  typedef ImMessage_MessageReadPush MessageReadPush;
  typedef ImMessage_AllUnreadCountRequest AllUnreadCountRequest;
  typedef ImMessage_AllUnreadCountResponse AllUnreadCountResponse;
  typedef ImMessage_MessageReadAllRequest MessageReadAllRequest;
  typedef ImMessage_MessageReadAllResponse MessageReadAllResponse;
  typedef ImMessage_SesionStickyOnTopRequest SesionStickyOnTopRequest;
  typedef ImMessage_SessionStickyOnTopResponse SessionStickyOnTopResponse;
  typedef ImMessage_SessionRaw SessionRaw;
  typedef ImMessage_MessageRecallRequest MessageRecallRequest;
  typedef ImMessage_MessageRecallResponse MessageRecallResponse;
  typedef ImMessage_MessageReceiptRequest MessageReceiptRequest;
  typedef ImMessage_MessageReceiptResponse MessageReceiptResponse;
  typedef ImMessage_MessageReceiptInfo MessageReceiptInfo;
  typedef ImMessage_MessageReceiptCountGetRequest MessageReceiptCountGetRequest;
  typedef ImMessage_MessageReceiptCountGetResponse MessageReceiptCountGetResponse;
  typedef ImMessage_MessageReceiptStatus MessageReceiptStatus;
  typedef ImMessage_MessageReceiptDetailGetRequest MessageReceiptDetailGetRequest;
  typedef ImMessage_MessageReceiptDetailGetResponse MessageReceiptDetailGetResponse;
  typedef ImMessage_MessageBatchSendRequest MessageBatchSendRequest;
  typedef ImMessage_MessageBatchSendResponse MessageBatchSendResponse;
  typedef ImMessage_ImageAttachment ImageAttachment;
  typedef ImMessage_AudioAttachment AudioAttachment;
  typedef ImMessage_GifAttachment GifAttachment;
  typedef ImMessage_Attachment Attachment;
  typedef ImMessage_Attachments Attachments;
  typedef ImMessage_PlaceHolderMessage PlaceHolderMessage;
  typedef ImMessage_ImageTextMessage ImageTextMessage;
  typedef ImMessage_RichTextMessage RichTextMessage;
  typedef ImMessage_NoticeMessage NoticeMessage;
  typedef ImMessage_RichTextNoticeMessage RichTextNoticeMessage;

  typedef ImMessage_MessageType MessageType;
  static constexpr MessageType Text =
    ImMessage_MessageType_Text;
  static constexpr MessageType Image =
    ImMessage_MessageType_Image;
  static constexpr MessageType Audio =
    ImMessage_MessageType_Audio;
  static constexpr MessageType Movie =
    ImMessage_MessageType_Movie;
  static constexpr MessageType File =
    ImMessage_MessageType_File;
  static constexpr MessageType Gif =
    ImMessage_MessageType_Gif;
  static constexpr MessageType ImageText =
    ImMessage_MessageType_ImageText;
  static constexpr MessageType PlaceHolder =
    ImMessage_MessageType_PlaceHolder;
  static constexpr MessageType Notice =
    ImMessage_MessageType_Notice;
  static constexpr MessageType MultiFormNotice =
    ImMessage_MessageType_MultiFormNotice;
  static constexpr MessageType MessageCancel =
    ImMessage_MessageType_MessageCancel;
  static constexpr MessageType MessageCancelOrigin =
    ImMessage_MessageType_MessageCancelOrigin;
  static constexpr MessageType GameInvite =
    ImMessage_MessageType_GameInvite;
  static constexpr MessageType FavouriteGame =
    ImMessage_MessageType_FavouriteGame;
  static constexpr MessageType TeamInvite =
    ImMessage_MessageType_TeamInvite;
  static constexpr MessageType MultiPlayerGame =
    ImMessage_MessageType_MultiPlayerGame;
  static constexpr MessageType MultiPlayerGameInvite =
    ImMessage_MessageType_MultiPlayerGameInvite;
  static constexpr MessageType GameFriendTravel =
    ImMessage_MessageType_GameFriendTravel;
  static constexpr MessageType GameTravelInvite =
    ImMessage_MessageType_GameTravelInvite;
  static constexpr MessageType MultiPlayerChatRoom =
    ImMessage_MessageType_MultiPlayerChatRoom;
  static constexpr MessageType MultiPlayerChatRoomInvite =
    ImMessage_MessageType_MultiPlayerChatRoomInvite;
  static constexpr MessageType MultiPlayerChatRoomGameInvite =
    ImMessage_MessageType_MultiPlayerChatRoomGameInvite;
  static constexpr MessageType FeedShare =
    ImMessage_MessageType_FeedShare;
  static constexpr MessageType DianDianMatchSuccess =
    ImMessage_MessageType_DianDianMatchSuccess;
  static constexpr MessageType DianDianNotification =
    ImMessage_MessageType_DianDianNotification;
  static constexpr MessageType Gift =
    ImMessage_MessageType_Gift;
  static constexpr MessageType SOGAME_MESSAGE_TYPE_MAX =
    ImMessage_MessageType_SOGAME_MESSAGE_TYPE_MAX;
  static inline bool MessageType_IsValid(int value) {
    return ImMessage_MessageType_IsValid(value);
  }
  static constexpr MessageType MessageType_MIN =
    ImMessage_MessageType_MessageType_MIN;
  static constexpr MessageType MessageType_MAX =
    ImMessage_MessageType_MessageType_MAX;
  static constexpr int MessageType_ARRAYSIZE =
    ImMessage_MessageType_MessageType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MessageType_descriptor() {
    return ImMessage_MessageType_descriptor();
  }
  template<typename T>
  static inline const std::string& MessageType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MessageType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MessageType_Name.");
    return ImMessage_MessageType_Name(enum_t_value);
  }
  static inline bool MessageType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MessageType* value) {
    return ImMessage_MessageType_Parse(name, value);
  }

  typedef ImMessage_KsUserRelationShip KsUserRelationShip;
  static constexpr KsUserRelationShip kUNKNOW =
    ImMessage_KsUserRelationShip_kUNKNOW;
  static constexpr KsUserRelationShip FOLLOW_EACH_OTHER =
    ImMessage_KsUserRelationShip_FOLLOW_EACH_OTHER;
  static constexpr KsUserRelationShip TO_FOLLOW_FROM =
    ImMessage_KsUserRelationShip_TO_FOLLOW_FROM;
  static constexpr KsUserRelationShip FROM_FOLLOW_TO =
    ImMessage_KsUserRelationShip_FROM_FOLLOW_TO;
  static inline bool KsUserRelationShip_IsValid(int value) {
    return ImMessage_KsUserRelationShip_IsValid(value);
  }
  static constexpr KsUserRelationShip KsUserRelationShip_MIN =
    ImMessage_KsUserRelationShip_KsUserRelationShip_MIN;
  static constexpr KsUserRelationShip KsUserRelationShip_MAX =
    ImMessage_KsUserRelationShip_KsUserRelationShip_MAX;
  static constexpr int KsUserRelationShip_ARRAYSIZE =
    ImMessage_KsUserRelationShip_KsUserRelationShip_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  KsUserRelationShip_descriptor() {
    return ImMessage_KsUserRelationShip_descriptor();
  }
  template<typename T>
  static inline const std::string& KsUserRelationShip_Name(T enum_t_value) {
    static_assert(::std::is_same<T, KsUserRelationShip>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function KsUserRelationShip_Name.");
    return ImMessage_KsUserRelationShip_Name(enum_t_value);
  }
  static inline bool KsUserRelationShip_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      KsUserRelationShip* value) {
    return ImMessage_KsUserRelationShip_Parse(name, value);
  }

  typedef ImMessage_AccountType AccountType;
  static constexpr AccountType UNKNOWN =
    ImMessage_AccountType_UNKNOWN;
  static constexpr AccountType OFFICIAL =
    ImMessage_AccountType_OFFICIAL;
  static constexpr AccountType NORMAL =
    ImMessage_AccountType_NORMAL;
  static constexpr AccountType STRANGER =
    ImMessage_AccountType_STRANGER;
  static inline bool AccountType_IsValid(int value) {
    return ImMessage_AccountType_IsValid(value);
  }
  static constexpr AccountType AccountType_MIN =
    ImMessage_AccountType_AccountType_MIN;
  static constexpr AccountType AccountType_MAX =
    ImMessage_AccountType_AccountType_MAX;
  static constexpr int AccountType_ARRAYSIZE =
    ImMessage_AccountType_AccountType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AccountType_descriptor() {
    return ImMessage_AccountType_descriptor();
  }
  template<typename T>
  static inline const std::string& AccountType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AccountType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AccountType_Name.");
    return ImMessage_AccountType_Name(enum_t_value);
  }
  static inline bool AccountType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AccountType* value) {
    return ImMessage_AccountType_Parse(name, value);
  }

  typedef ImMessage_ChatTargetType ChatTargetType;
  static constexpr ChatTargetType CTT_USER =
    ImMessage_ChatTargetType_CTT_USER;
  static constexpr ChatTargetType CTT_CHAT_ROOM =
    ImMessage_ChatTargetType_CTT_CHAT_ROOM;
  static constexpr ChatTargetType CTT_MULTI_PLAYER_ROOM =
    ImMessage_ChatTargetType_CTT_MULTI_PLAYER_ROOM;
  static constexpr ChatTargetType CTT_GROUP =
    ImMessage_ChatTargetType_CTT_GROUP;
  static constexpr ChatTargetType CTT_CHANNEL =
    ImMessage_ChatTargetType_CTT_CHANNEL;
  static constexpr ChatTargetType CTT_AGGREGATE =
    ImMessage_ChatTargetType_CTT_AGGREGATE;
  static inline bool ChatTargetType_IsValid(int value) {
    return ImMessage_ChatTargetType_IsValid(value);
  }
  static constexpr ChatTargetType ChatTargetType_MIN =
    ImMessage_ChatTargetType_ChatTargetType_MIN;
  static constexpr ChatTargetType ChatTargetType_MAX =
    ImMessage_ChatTargetType_ChatTargetType_MAX;
  static constexpr int ChatTargetType_ARRAYSIZE =
    ImMessage_ChatTargetType_ChatTargetType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ChatTargetType_descriptor() {
    return ImMessage_ChatTargetType_descriptor();
  }
  template<typename T>
  static inline const std::string& ChatTargetType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ChatTargetType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ChatTargetType_Name.");
    return ImMessage_ChatTargetType_Name(enum_t_value);
  }
  static inline bool ChatTargetType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ChatTargetType* value) {
    return ImMessage_ChatTargetType_Parse(name, value);
  }

  typedef ImMessage_SystemUser SystemUser;
  static constexpr SystemUser kSystemUserInvalid =
    ImMessage_SystemUser_kSystemUserInvalid;
  static constexpr SystemUser SYSTEM_USER_ID =
    ImMessage_SystemUser_SYSTEM_USER_ID;
  static inline bool SystemUser_IsValid(int value) {
    return ImMessage_SystemUser_IsValid(value);
  }
  static constexpr SystemUser SystemUser_MIN =
    ImMessage_SystemUser_SystemUser_MIN;
  static constexpr SystemUser SystemUser_MAX =
    ImMessage_SystemUser_SystemUser_MAX;
  static constexpr int SystemUser_ARRAYSIZE =
    ImMessage_SystemUser_SystemUser_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SystemUser_descriptor() {
    return ImMessage_SystemUser_descriptor();
  }
  template<typename T>
  static inline const std::string& SystemUser_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SystemUser>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SystemUser_Name.");
    return ImMessage_SystemUser_Name(enum_t_value);
  }
  static inline bool SystemUser_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SystemUser* value) {
    return ImMessage_SystemUser_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.ImMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Channel_ChannelSubscribeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Channel.ChannelSubscribeRequest) */ {
 public:
  inline Cloud_Channel_ChannelSubscribeRequest() : Cloud_Channel_ChannelSubscribeRequest(nullptr) {}
  virtual ~Cloud_Channel_ChannelSubscribeRequest();

  Cloud_Channel_ChannelSubscribeRequest(const Cloud_Channel_ChannelSubscribeRequest& from);
  Cloud_Channel_ChannelSubscribeRequest(Cloud_Channel_ChannelSubscribeRequest&& from) noexcept
    : Cloud_Channel_ChannelSubscribeRequest() {
    *this = ::std::move(from);
  }

  inline Cloud_Channel_ChannelSubscribeRequest& operator=(const Cloud_Channel_ChannelSubscribeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Channel_ChannelSubscribeRequest& operator=(Cloud_Channel_ChannelSubscribeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Channel_ChannelSubscribeRequest& default_instance();

  static inline const Cloud_Channel_ChannelSubscribeRequest* internal_default_instance() {
    return reinterpret_cast<const Cloud_Channel_ChannelSubscribeRequest*>(
               &_Cloud_Channel_ChannelSubscribeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(Cloud_Channel_ChannelSubscribeRequest& a, Cloud_Channel_ChannelSubscribeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Channel_ChannelSubscribeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Channel_ChannelSubscribeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Channel_ChannelSubscribeRequest* New() const final {
    return CreateMaybeMessage<Cloud_Channel_ChannelSubscribeRequest>(nullptr);
  }

  Cloud_Channel_ChannelSubscribeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Channel_ChannelSubscribeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Channel_ChannelSubscribeRequest& from);
  void MergeFrom(const Cloud_Channel_ChannelSubscribeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Channel_ChannelSubscribeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Channel.ChannelSubscribeRequest";
  }
  protected:
  explicit Cloud_Channel_ChannelSubscribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelIdFieldNumber = 1,
    kSetBarrierFieldNumber = 2,
  };
  // string channelId = 1;
  void clear_channelid();
  const std::string& channelid() const;
  void set_channelid(const std::string& value);
  void set_channelid(std::string&& value);
  void set_channelid(const char* value);
  void set_channelid(const char* value, size_t size);
  std::string* mutable_channelid();
  std::string* release_channelid();
  void set_allocated_channelid(std::string* channelid);
  private:
  const std::string& _internal_channelid() const;
  void _internal_set_channelid(const std::string& value);
  std::string* _internal_mutable_channelid();
  public:

  // bool setBarrier = 2;
  void clear_setbarrier();
  bool setbarrier() const;
  void set_setbarrier(bool value);
  private:
  bool _internal_setbarrier() const;
  void _internal_set_setbarrier(bool value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Channel.ChannelSubscribeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channelid_;
  bool setbarrier_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Channel_ChannelSubscribeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Channel.ChannelSubscribeResponse) */ {
 public:
  inline Cloud_Channel_ChannelSubscribeResponse() : Cloud_Channel_ChannelSubscribeResponse(nullptr) {}
  virtual ~Cloud_Channel_ChannelSubscribeResponse();

  Cloud_Channel_ChannelSubscribeResponse(const Cloud_Channel_ChannelSubscribeResponse& from);
  Cloud_Channel_ChannelSubscribeResponse(Cloud_Channel_ChannelSubscribeResponse&& from) noexcept
    : Cloud_Channel_ChannelSubscribeResponse() {
    *this = ::std::move(from);
  }

  inline Cloud_Channel_ChannelSubscribeResponse& operator=(const Cloud_Channel_ChannelSubscribeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Channel_ChannelSubscribeResponse& operator=(Cloud_Channel_ChannelSubscribeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Channel_ChannelSubscribeResponse& default_instance();

  static inline const Cloud_Channel_ChannelSubscribeResponse* internal_default_instance() {
    return reinterpret_cast<const Cloud_Channel_ChannelSubscribeResponse*>(
               &_Cloud_Channel_ChannelSubscribeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(Cloud_Channel_ChannelSubscribeResponse& a, Cloud_Channel_ChannelSubscribeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Channel_ChannelSubscribeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Channel_ChannelSubscribeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Channel_ChannelSubscribeResponse* New() const final {
    return CreateMaybeMessage<Cloud_Channel_ChannelSubscribeResponse>(nullptr);
  }

  Cloud_Channel_ChannelSubscribeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Channel_ChannelSubscribeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Channel_ChannelSubscribeResponse& from);
  void MergeFrom(const Cloud_Channel_ChannelSubscribeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Channel_ChannelSubscribeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Channel.ChannelSubscribeResponse";
  }
  protected:
  explicit Cloud_Channel_ChannelSubscribeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Channel.ChannelSubscribeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Channel_ChannelUnsubscribeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Channel.ChannelUnsubscribeRequest) */ {
 public:
  inline Cloud_Channel_ChannelUnsubscribeRequest() : Cloud_Channel_ChannelUnsubscribeRequest(nullptr) {}
  virtual ~Cloud_Channel_ChannelUnsubscribeRequest();

  Cloud_Channel_ChannelUnsubscribeRequest(const Cloud_Channel_ChannelUnsubscribeRequest& from);
  Cloud_Channel_ChannelUnsubscribeRequest(Cloud_Channel_ChannelUnsubscribeRequest&& from) noexcept
    : Cloud_Channel_ChannelUnsubscribeRequest() {
    *this = ::std::move(from);
  }

  inline Cloud_Channel_ChannelUnsubscribeRequest& operator=(const Cloud_Channel_ChannelUnsubscribeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Channel_ChannelUnsubscribeRequest& operator=(Cloud_Channel_ChannelUnsubscribeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Channel_ChannelUnsubscribeRequest& default_instance();

  static inline const Cloud_Channel_ChannelUnsubscribeRequest* internal_default_instance() {
    return reinterpret_cast<const Cloud_Channel_ChannelUnsubscribeRequest*>(
               &_Cloud_Channel_ChannelUnsubscribeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(Cloud_Channel_ChannelUnsubscribeRequest& a, Cloud_Channel_ChannelUnsubscribeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Channel_ChannelUnsubscribeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Channel_ChannelUnsubscribeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Channel_ChannelUnsubscribeRequest* New() const final {
    return CreateMaybeMessage<Cloud_Channel_ChannelUnsubscribeRequest>(nullptr);
  }

  Cloud_Channel_ChannelUnsubscribeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Channel_ChannelUnsubscribeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Channel_ChannelUnsubscribeRequest& from);
  void MergeFrom(const Cloud_Channel_ChannelUnsubscribeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Channel_ChannelUnsubscribeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Channel.ChannelUnsubscribeRequest";
  }
  protected:
  explicit Cloud_Channel_ChannelUnsubscribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelIdFieldNumber = 1,
  };
  // string channelId = 1;
  void clear_channelid();
  const std::string& channelid() const;
  void set_channelid(const std::string& value);
  void set_channelid(std::string&& value);
  void set_channelid(const char* value);
  void set_channelid(const char* value, size_t size);
  std::string* mutable_channelid();
  std::string* release_channelid();
  void set_allocated_channelid(std::string* channelid);
  private:
  const std::string& _internal_channelid() const;
  void _internal_set_channelid(const std::string& value);
  std::string* _internal_mutable_channelid();
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Channel.ChannelUnsubscribeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channelid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Channel_ChannelSubscribersGetRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Channel.ChannelSubscribersGetRequest) */ {
 public:
  inline Cloud_Channel_ChannelSubscribersGetRequest() : Cloud_Channel_ChannelSubscribersGetRequest(nullptr) {}
  virtual ~Cloud_Channel_ChannelSubscribersGetRequest();

  Cloud_Channel_ChannelSubscribersGetRequest(const Cloud_Channel_ChannelSubscribersGetRequest& from);
  Cloud_Channel_ChannelSubscribersGetRequest(Cloud_Channel_ChannelSubscribersGetRequest&& from) noexcept
    : Cloud_Channel_ChannelSubscribersGetRequest() {
    *this = ::std::move(from);
  }

  inline Cloud_Channel_ChannelSubscribersGetRequest& operator=(const Cloud_Channel_ChannelSubscribersGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Channel_ChannelSubscribersGetRequest& operator=(Cloud_Channel_ChannelSubscribersGetRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Channel_ChannelSubscribersGetRequest& default_instance();

  static inline const Cloud_Channel_ChannelSubscribersGetRequest* internal_default_instance() {
    return reinterpret_cast<const Cloud_Channel_ChannelSubscribersGetRequest*>(
               &_Cloud_Channel_ChannelSubscribersGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(Cloud_Channel_ChannelSubscribersGetRequest& a, Cloud_Channel_ChannelSubscribersGetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Channel_ChannelSubscribersGetRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Channel_ChannelSubscribersGetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Channel_ChannelSubscribersGetRequest* New() const final {
    return CreateMaybeMessage<Cloud_Channel_ChannelSubscribersGetRequest>(nullptr);
  }

  Cloud_Channel_ChannelSubscribersGetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Channel_ChannelSubscribersGetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Channel_ChannelSubscribersGetRequest& from);
  void MergeFrom(const Cloud_Channel_ChannelSubscribersGetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Channel_ChannelSubscribersGetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Channel.ChannelSubscribersGetRequest";
  }
  protected:
  explicit Cloud_Channel_ChannelSubscribersGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelIdFieldNumber = 1,
  };
  // string channelId = 1;
  void clear_channelid();
  const std::string& channelid() const;
  void set_channelid(const std::string& value);
  void set_channelid(std::string&& value);
  void set_channelid(const char* value);
  void set_channelid(const char* value, size_t size);
  std::string* mutable_channelid();
  std::string* release_channelid();
  void set_allocated_channelid(std::string* channelid);
  private:
  const std::string& _internal_channelid() const;
  void _internal_set_channelid(const std::string& value);
  std::string* _internal_mutable_channelid();
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Channel.ChannelSubscribersGetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channelid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Channel_ChannelSubscribersGetResposne PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Channel.ChannelSubscribersGetResposne) */ {
 public:
  inline Cloud_Channel_ChannelSubscribersGetResposne() : Cloud_Channel_ChannelSubscribersGetResposne(nullptr) {}
  virtual ~Cloud_Channel_ChannelSubscribersGetResposne();

  Cloud_Channel_ChannelSubscribersGetResposne(const Cloud_Channel_ChannelSubscribersGetResposne& from);
  Cloud_Channel_ChannelSubscribersGetResposne(Cloud_Channel_ChannelSubscribersGetResposne&& from) noexcept
    : Cloud_Channel_ChannelSubscribersGetResposne() {
    *this = ::std::move(from);
  }

  inline Cloud_Channel_ChannelSubscribersGetResposne& operator=(const Cloud_Channel_ChannelSubscribersGetResposne& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Channel_ChannelSubscribersGetResposne& operator=(Cloud_Channel_ChannelSubscribersGetResposne&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Channel_ChannelSubscribersGetResposne& default_instance();

  static inline const Cloud_Channel_ChannelSubscribersGetResposne* internal_default_instance() {
    return reinterpret_cast<const Cloud_Channel_ChannelSubscribersGetResposne*>(
               &_Cloud_Channel_ChannelSubscribersGetResposne_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(Cloud_Channel_ChannelSubscribersGetResposne& a, Cloud_Channel_ChannelSubscribersGetResposne& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Channel_ChannelSubscribersGetResposne* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Channel_ChannelSubscribersGetResposne* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Channel_ChannelSubscribersGetResposne* New() const final {
    return CreateMaybeMessage<Cloud_Channel_ChannelSubscribersGetResposne>(nullptr);
  }

  Cloud_Channel_ChannelSubscribersGetResposne* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Channel_ChannelSubscribersGetResposne>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Channel_ChannelSubscribersGetResposne& from);
  void MergeFrom(const Cloud_Channel_ChannelSubscribersGetResposne& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Channel_ChannelSubscribersGetResposne* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Channel.ChannelSubscribersGetResposne";
  }
  protected:
  explicit Cloud_Channel_ChannelSubscribersGetResposne(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubscriberFieldNumber = 1,
  };
  // repeated .AcFunDanmu.Im.Basic.User subscriber = 1;
  int subscriber_size() const;
  private:
  int _internal_subscriber_size() const;
  public:
  void clear_subscriber();
  ::AcFunDanmu::Im::Basic_User* mutable_subscriber(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_User >*
      mutable_subscriber();
  private:
  const ::AcFunDanmu::Im::Basic_User& _internal_subscriber(int index) const;
  ::AcFunDanmu::Im::Basic_User* _internal_add_subscriber();
  public:
  const ::AcFunDanmu::Im::Basic_User& subscriber(int index) const;
  ::AcFunDanmu::Im::Basic_User* add_subscriber();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_User >&
      subscriber() const;

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Channel.ChannelSubscribersGetResposne)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_User > subscriber_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Channel_ChannelBasicInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Channel.ChannelBasicInfo) */ {
 public:
  inline Cloud_Channel_ChannelBasicInfo() : Cloud_Channel_ChannelBasicInfo(nullptr) {}
  virtual ~Cloud_Channel_ChannelBasicInfo();

  Cloud_Channel_ChannelBasicInfo(const Cloud_Channel_ChannelBasicInfo& from);
  Cloud_Channel_ChannelBasicInfo(Cloud_Channel_ChannelBasicInfo&& from) noexcept
    : Cloud_Channel_ChannelBasicInfo() {
    *this = ::std::move(from);
  }

  inline Cloud_Channel_ChannelBasicInfo& operator=(const Cloud_Channel_ChannelBasicInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Channel_ChannelBasicInfo& operator=(Cloud_Channel_ChannelBasicInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Channel_ChannelBasicInfo& default_instance();

  static inline const Cloud_Channel_ChannelBasicInfo* internal_default_instance() {
    return reinterpret_cast<const Cloud_Channel_ChannelBasicInfo*>(
               &_Cloud_Channel_ChannelBasicInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(Cloud_Channel_ChannelBasicInfo& a, Cloud_Channel_ChannelBasicInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Channel_ChannelBasicInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Channel_ChannelBasicInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Channel_ChannelBasicInfo* New() const final {
    return CreateMaybeMessage<Cloud_Channel_ChannelBasicInfo>(nullptr);
  }

  Cloud_Channel_ChannelBasicInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Channel_ChannelBasicInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Channel_ChannelBasicInfo& from);
  void MergeFrom(const Cloud_Channel_ChannelBasicInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Channel_ChannelBasicInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Channel.ChannelBasicInfo";
  }
  protected:
  explicit Cloud_Channel_ChannelBasicInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelIdFieldNumber = 1,
    kSubscriberCountFieldNumber = 2,
  };
  // string channelId = 1;
  void clear_channelid();
  const std::string& channelid() const;
  void set_channelid(const std::string& value);
  void set_channelid(std::string&& value);
  void set_channelid(const char* value);
  void set_channelid(const char* value, size_t size);
  std::string* mutable_channelid();
  std::string* release_channelid();
  void set_allocated_channelid(std::string* channelid);
  private:
  const std::string& _internal_channelid() const;
  void _internal_set_channelid(const std::string& value);
  std::string* _internal_mutable_channelid();
  public:

  // int32 subscriberCount = 2;
  void clear_subscribercount();
  ::PROTOBUF_NAMESPACE_ID::int32 subscribercount() const;
  void set_subscribercount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_subscribercount() const;
  void _internal_set_subscribercount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Channel.ChannelBasicInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channelid_;
  ::PROTOBUF_NAMESPACE_ID::int32 subscribercount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Channel_UserActionInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Channel.UserActionInfo) */ {
 public:
  inline Cloud_Channel_UserActionInfo() : Cloud_Channel_UserActionInfo(nullptr) {}
  virtual ~Cloud_Channel_UserActionInfo();

  Cloud_Channel_UserActionInfo(const Cloud_Channel_UserActionInfo& from);
  Cloud_Channel_UserActionInfo(Cloud_Channel_UserActionInfo&& from) noexcept
    : Cloud_Channel_UserActionInfo() {
    *this = ::std::move(from);
  }

  inline Cloud_Channel_UserActionInfo& operator=(const Cloud_Channel_UserActionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Channel_UserActionInfo& operator=(Cloud_Channel_UserActionInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Channel_UserActionInfo& default_instance();

  static inline const Cloud_Channel_UserActionInfo* internal_default_instance() {
    return reinterpret_cast<const Cloud_Channel_UserActionInfo*>(
               &_Cloud_Channel_UserActionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(Cloud_Channel_UserActionInfo& a, Cloud_Channel_UserActionInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Channel_UserActionInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Channel_UserActionInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Channel_UserActionInfo* New() const final {
    return CreateMaybeMessage<Cloud_Channel_UserActionInfo>(nullptr);
  }

  Cloud_Channel_UserActionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Channel_UserActionInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Channel_UserActionInfo& from);
  void MergeFrom(const Cloud_Channel_UserActionInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Channel_UserActionInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Channel.UserActionInfo";
  }
  protected:
  explicit Cloud_Channel_UserActionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
    kTimestampFieldNumber = 3,
    kActionFieldNumber = 2,
  };
  // .AcFunDanmu.Im.Basic.User user = 1;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::AcFunDanmu::Im::Basic_User& user() const;
  ::AcFunDanmu::Im::Basic_User* release_user();
  ::AcFunDanmu::Im::Basic_User* mutable_user();
  void set_allocated_user(::AcFunDanmu::Im::Basic_User* user);
  private:
  const ::AcFunDanmu::Im::Basic_User& _internal_user() const;
  ::AcFunDanmu::Im::Basic_User* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::AcFunDanmu::Im::Basic_User* user);
  ::AcFunDanmu::Im::Basic_User* unsafe_arena_release_user();

  // int64 timestamp = 3;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .AcFunDanmu.Im.Cloud.Channel.UserAction action = 2;
  void clear_action();
  ::AcFunDanmu::Im::Cloud_Channel_UserAction action() const;
  void set_action(::AcFunDanmu::Im::Cloud_Channel_UserAction value);
  private:
  ::AcFunDanmu::Im::Cloud_Channel_UserAction _internal_action() const;
  void _internal_set_action(::AcFunDanmu::Im::Cloud_Channel_UserAction value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Channel.UserActionInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::AcFunDanmu::Im::Basic_User* user_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  int action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Channel_ChannelBasicInfoGetRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Channel.ChannelBasicInfoGetRequest) */ {
 public:
  inline Cloud_Channel_ChannelBasicInfoGetRequest() : Cloud_Channel_ChannelBasicInfoGetRequest(nullptr) {}
  virtual ~Cloud_Channel_ChannelBasicInfoGetRequest();

  Cloud_Channel_ChannelBasicInfoGetRequest(const Cloud_Channel_ChannelBasicInfoGetRequest& from);
  Cloud_Channel_ChannelBasicInfoGetRequest(Cloud_Channel_ChannelBasicInfoGetRequest&& from) noexcept
    : Cloud_Channel_ChannelBasicInfoGetRequest() {
    *this = ::std::move(from);
  }

  inline Cloud_Channel_ChannelBasicInfoGetRequest& operator=(const Cloud_Channel_ChannelBasicInfoGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Channel_ChannelBasicInfoGetRequest& operator=(Cloud_Channel_ChannelBasicInfoGetRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Channel_ChannelBasicInfoGetRequest& default_instance();

  static inline const Cloud_Channel_ChannelBasicInfoGetRequest* internal_default_instance() {
    return reinterpret_cast<const Cloud_Channel_ChannelBasicInfoGetRequest*>(
               &_Cloud_Channel_ChannelBasicInfoGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(Cloud_Channel_ChannelBasicInfoGetRequest& a, Cloud_Channel_ChannelBasicInfoGetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Channel_ChannelBasicInfoGetRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Channel_ChannelBasicInfoGetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Channel_ChannelBasicInfoGetRequest* New() const final {
    return CreateMaybeMessage<Cloud_Channel_ChannelBasicInfoGetRequest>(nullptr);
  }

  Cloud_Channel_ChannelBasicInfoGetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Channel_ChannelBasicInfoGetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Channel_ChannelBasicInfoGetRequest& from);
  void MergeFrom(const Cloud_Channel_ChannelBasicInfoGetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Channel_ChannelBasicInfoGetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Channel.ChannelBasicInfoGetRequest";
  }
  protected:
  explicit Cloud_Channel_ChannelBasicInfoGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelIdFieldNumber = 1,
  };
  // repeated string channelId = 1;
  int channelid_size() const;
  private:
  int _internal_channelid_size() const;
  public:
  void clear_channelid();
  const std::string& channelid(int index) const;
  std::string* mutable_channelid(int index);
  void set_channelid(int index, const std::string& value);
  void set_channelid(int index, std::string&& value);
  void set_channelid(int index, const char* value);
  void set_channelid(int index, const char* value, size_t size);
  std::string* add_channelid();
  void add_channelid(const std::string& value);
  void add_channelid(std::string&& value);
  void add_channelid(const char* value);
  void add_channelid(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& channelid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_channelid();
  private:
  const std::string& _internal_channelid(int index) const;
  std::string* _internal_add_channelid();
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Channel.ChannelBasicInfoGetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> channelid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Channel_ChannelBasicInfoGetResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Channel.ChannelBasicInfoGetResponse) */ {
 public:
  inline Cloud_Channel_ChannelBasicInfoGetResponse() : Cloud_Channel_ChannelBasicInfoGetResponse(nullptr) {}
  virtual ~Cloud_Channel_ChannelBasicInfoGetResponse();

  Cloud_Channel_ChannelBasicInfoGetResponse(const Cloud_Channel_ChannelBasicInfoGetResponse& from);
  Cloud_Channel_ChannelBasicInfoGetResponse(Cloud_Channel_ChannelBasicInfoGetResponse&& from) noexcept
    : Cloud_Channel_ChannelBasicInfoGetResponse() {
    *this = ::std::move(from);
  }

  inline Cloud_Channel_ChannelBasicInfoGetResponse& operator=(const Cloud_Channel_ChannelBasicInfoGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Channel_ChannelBasicInfoGetResponse& operator=(Cloud_Channel_ChannelBasicInfoGetResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Channel_ChannelBasicInfoGetResponse& default_instance();

  static inline const Cloud_Channel_ChannelBasicInfoGetResponse* internal_default_instance() {
    return reinterpret_cast<const Cloud_Channel_ChannelBasicInfoGetResponse*>(
               &_Cloud_Channel_ChannelBasicInfoGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(Cloud_Channel_ChannelBasicInfoGetResponse& a, Cloud_Channel_ChannelBasicInfoGetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Channel_ChannelBasicInfoGetResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Channel_ChannelBasicInfoGetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Channel_ChannelBasicInfoGetResponse* New() const final {
    return CreateMaybeMessage<Cloud_Channel_ChannelBasicInfoGetResponse>(nullptr);
  }

  Cloud_Channel_ChannelBasicInfoGetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Channel_ChannelBasicInfoGetResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Channel_ChannelBasicInfoGetResponse& from);
  void MergeFrom(const Cloud_Channel_ChannelBasicInfoGetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Channel_ChannelBasicInfoGetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Channel.ChannelBasicInfoGetResponse";
  }
  protected:
  explicit Cloud_Channel_ChannelBasicInfoGetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBasicInfoFieldNumber = 1,
  };
  // repeated .AcFunDanmu.Im.Cloud.Channel.ChannelBasicInfo basicInfo = 1;
  int basicinfo_size() const;
  private:
  int _internal_basicinfo_size() const;
  public:
  void clear_basicinfo();
  ::AcFunDanmu::Im::Cloud_Channel_ChannelBasicInfo* mutable_basicinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud_Channel_ChannelBasicInfo >*
      mutable_basicinfo();
  private:
  const ::AcFunDanmu::Im::Cloud_Channel_ChannelBasicInfo& _internal_basicinfo(int index) const;
  ::AcFunDanmu::Im::Cloud_Channel_ChannelBasicInfo* _internal_add_basicinfo();
  public:
  const ::AcFunDanmu::Im::Cloud_Channel_ChannelBasicInfo& basicinfo(int index) const;
  ::AcFunDanmu::Im::Cloud_Channel_ChannelBasicInfo* add_basicinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud_Channel_ChannelBasicInfo >&
      basicinfo() const;

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Channel.ChannelBasicInfoGetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud_Channel_ChannelBasicInfo > basicinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Channel_ChannelHeartbeatRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Channel.ChannelHeartbeatRequest) */ {
 public:
  inline Cloud_Channel_ChannelHeartbeatRequest() : Cloud_Channel_ChannelHeartbeatRequest(nullptr) {}
  virtual ~Cloud_Channel_ChannelHeartbeatRequest();

  Cloud_Channel_ChannelHeartbeatRequest(const Cloud_Channel_ChannelHeartbeatRequest& from);
  Cloud_Channel_ChannelHeartbeatRequest(Cloud_Channel_ChannelHeartbeatRequest&& from) noexcept
    : Cloud_Channel_ChannelHeartbeatRequest() {
    *this = ::std::move(from);
  }

  inline Cloud_Channel_ChannelHeartbeatRequest& operator=(const Cloud_Channel_ChannelHeartbeatRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Channel_ChannelHeartbeatRequest& operator=(Cloud_Channel_ChannelHeartbeatRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Channel_ChannelHeartbeatRequest& default_instance();

  static inline const Cloud_Channel_ChannelHeartbeatRequest* internal_default_instance() {
    return reinterpret_cast<const Cloud_Channel_ChannelHeartbeatRequest*>(
               &_Cloud_Channel_ChannelHeartbeatRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(Cloud_Channel_ChannelHeartbeatRequest& a, Cloud_Channel_ChannelHeartbeatRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Channel_ChannelHeartbeatRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Channel_ChannelHeartbeatRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Channel_ChannelHeartbeatRequest* New() const final {
    return CreateMaybeMessage<Cloud_Channel_ChannelHeartbeatRequest>(nullptr);
  }

  Cloud_Channel_ChannelHeartbeatRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Channel_ChannelHeartbeatRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Channel_ChannelHeartbeatRequest& from);
  void MergeFrom(const Cloud_Channel_ChannelHeartbeatRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Channel_ChannelHeartbeatRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Channel.ChannelHeartbeatRequest";
  }
  protected:
  explicit Cloud_Channel_ChannelHeartbeatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelIdFieldNumber = 1,
  };
  // repeated string channelId = 1;
  int channelid_size() const;
  private:
  int _internal_channelid_size() const;
  public:
  void clear_channelid();
  const std::string& channelid(int index) const;
  std::string* mutable_channelid(int index);
  void set_channelid(int index, const std::string& value);
  void set_channelid(int index, std::string&& value);
  void set_channelid(int index, const char* value);
  void set_channelid(int index, const char* value, size_t size);
  std::string* add_channelid();
  void add_channelid(const std::string& value);
  void add_channelid(std::string&& value);
  void add_channelid(const char* value);
  void add_channelid(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& channelid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_channelid();
  private:
  const std::string& _internal_channelid(int index) const;
  std::string* _internal_add_channelid();
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Channel.ChannelHeartbeatRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> channelid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Channel_ChannelHeartbeatResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Channel.ChannelHeartbeatResponse) */ {
 public:
  inline Cloud_Channel_ChannelHeartbeatResponse() : Cloud_Channel_ChannelHeartbeatResponse(nullptr) {}
  virtual ~Cloud_Channel_ChannelHeartbeatResponse();

  Cloud_Channel_ChannelHeartbeatResponse(const Cloud_Channel_ChannelHeartbeatResponse& from);
  Cloud_Channel_ChannelHeartbeatResponse(Cloud_Channel_ChannelHeartbeatResponse&& from) noexcept
    : Cloud_Channel_ChannelHeartbeatResponse() {
    *this = ::std::move(from);
  }

  inline Cloud_Channel_ChannelHeartbeatResponse& operator=(const Cloud_Channel_ChannelHeartbeatResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Channel_ChannelHeartbeatResponse& operator=(Cloud_Channel_ChannelHeartbeatResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Channel_ChannelHeartbeatResponse& default_instance();

  static inline const Cloud_Channel_ChannelHeartbeatResponse* internal_default_instance() {
    return reinterpret_cast<const Cloud_Channel_ChannelHeartbeatResponse*>(
               &_Cloud_Channel_ChannelHeartbeatResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(Cloud_Channel_ChannelHeartbeatResponse& a, Cloud_Channel_ChannelHeartbeatResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Channel_ChannelHeartbeatResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Channel_ChannelHeartbeatResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Channel_ChannelHeartbeatResponse* New() const final {
    return CreateMaybeMessage<Cloud_Channel_ChannelHeartbeatResponse>(nullptr);
  }

  Cloud_Channel_ChannelHeartbeatResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Channel_ChannelHeartbeatResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Channel_ChannelHeartbeatResponse& from);
  void MergeFrom(const Cloud_Channel_ChannelHeartbeatResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Channel_ChannelHeartbeatResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Channel.ChannelHeartbeatResponse";
  }
  protected:
  explicit Cloud_Channel_ChannelHeartbeatResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNotExistChannelIdFieldNumber = 1,
  };
  // repeated string notExistChannelId = 1;
  int notexistchannelid_size() const;
  private:
  int _internal_notexistchannelid_size() const;
  public:
  void clear_notexistchannelid();
  const std::string& notexistchannelid(int index) const;
  std::string* mutable_notexistchannelid(int index);
  void set_notexistchannelid(int index, const std::string& value);
  void set_notexistchannelid(int index, std::string&& value);
  void set_notexistchannelid(int index, const char* value);
  void set_notexistchannelid(int index, const char* value, size_t size);
  std::string* add_notexistchannelid();
  void add_notexistchannelid(const std::string& value);
  void add_notexistchannelid(std::string&& value);
  void add_notexistchannelid(const char* value);
  void add_notexistchannelid(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& notexistchannelid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_notexistchannelid();
  private:
  const std::string& _internal_notexistchannelid(int index) const;
  std::string* _internal_add_notexistchannelid();
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Channel.ChannelHeartbeatResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> notexistchannelid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Channel_ChannelBasicInfoNotify PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Channel.ChannelBasicInfoNotify) */ {
 public:
  inline Cloud_Channel_ChannelBasicInfoNotify() : Cloud_Channel_ChannelBasicInfoNotify(nullptr) {}
  virtual ~Cloud_Channel_ChannelBasicInfoNotify();

  Cloud_Channel_ChannelBasicInfoNotify(const Cloud_Channel_ChannelBasicInfoNotify& from);
  Cloud_Channel_ChannelBasicInfoNotify(Cloud_Channel_ChannelBasicInfoNotify&& from) noexcept
    : Cloud_Channel_ChannelBasicInfoNotify() {
    *this = ::std::move(from);
  }

  inline Cloud_Channel_ChannelBasicInfoNotify& operator=(const Cloud_Channel_ChannelBasicInfoNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Channel_ChannelBasicInfoNotify& operator=(Cloud_Channel_ChannelBasicInfoNotify&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Channel_ChannelBasicInfoNotify& default_instance();

  static inline const Cloud_Channel_ChannelBasicInfoNotify* internal_default_instance() {
    return reinterpret_cast<const Cloud_Channel_ChannelBasicInfoNotify*>(
               &_Cloud_Channel_ChannelBasicInfoNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(Cloud_Channel_ChannelBasicInfoNotify& a, Cloud_Channel_ChannelBasicInfoNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Channel_ChannelBasicInfoNotify* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Channel_ChannelBasicInfoNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Channel_ChannelBasicInfoNotify* New() const final {
    return CreateMaybeMessage<Cloud_Channel_ChannelBasicInfoNotify>(nullptr);
  }

  Cloud_Channel_ChannelBasicInfoNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Channel_ChannelBasicInfoNotify>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Channel_ChannelBasicInfoNotify& from);
  void MergeFrom(const Cloud_Channel_ChannelBasicInfoNotify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Channel_ChannelBasicInfoNotify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Channel.ChannelBasicInfoNotify";
  }
  protected:
  explicit Cloud_Channel_ChannelBasicInfoNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserActionInfoFieldNumber = 1,
    kBasicInfoFieldNumber = 2,
  };
  // .AcFunDanmu.Im.Cloud.Channel.UserActionInfo userActionInfo = 1;
  bool has_useractioninfo() const;
  private:
  bool _internal_has_useractioninfo() const;
  public:
  void clear_useractioninfo();
  const ::AcFunDanmu::Im::Cloud_Channel_UserActionInfo& useractioninfo() const;
  ::AcFunDanmu::Im::Cloud_Channel_UserActionInfo* release_useractioninfo();
  ::AcFunDanmu::Im::Cloud_Channel_UserActionInfo* mutable_useractioninfo();
  void set_allocated_useractioninfo(::AcFunDanmu::Im::Cloud_Channel_UserActionInfo* useractioninfo);
  private:
  const ::AcFunDanmu::Im::Cloud_Channel_UserActionInfo& _internal_useractioninfo() const;
  ::AcFunDanmu::Im::Cloud_Channel_UserActionInfo* _internal_mutable_useractioninfo();
  public:
  void unsafe_arena_set_allocated_useractioninfo(
      ::AcFunDanmu::Im::Cloud_Channel_UserActionInfo* useractioninfo);
  ::AcFunDanmu::Im::Cloud_Channel_UserActionInfo* unsafe_arena_release_useractioninfo();

  // .AcFunDanmu.Im.Cloud.Channel.ChannelBasicInfo basicInfo = 2;
  bool has_basicinfo() const;
  private:
  bool _internal_has_basicinfo() const;
  public:
  void clear_basicinfo();
  const ::AcFunDanmu::Im::Cloud_Channel_ChannelBasicInfo& basicinfo() const;
  ::AcFunDanmu::Im::Cloud_Channel_ChannelBasicInfo* release_basicinfo();
  ::AcFunDanmu::Im::Cloud_Channel_ChannelBasicInfo* mutable_basicinfo();
  void set_allocated_basicinfo(::AcFunDanmu::Im::Cloud_Channel_ChannelBasicInfo* basicinfo);
  private:
  const ::AcFunDanmu::Im::Cloud_Channel_ChannelBasicInfo& _internal_basicinfo() const;
  ::AcFunDanmu::Im::Cloud_Channel_ChannelBasicInfo* _internal_mutable_basicinfo();
  public:
  void unsafe_arena_set_allocated_basicinfo(
      ::AcFunDanmu::Im::Cloud_Channel_ChannelBasicInfo* basicinfo);
  ::AcFunDanmu::Im::Cloud_Channel_ChannelBasicInfo* unsafe_arena_release_basicinfo();

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Channel.ChannelBasicInfoNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::AcFunDanmu::Im::Cloud_Channel_UserActionInfo* useractioninfo_;
  ::AcFunDanmu::Im::Cloud_Channel_ChannelBasicInfo* basicinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Channel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Channel) */ {
 public:
  inline Cloud_Channel() : Cloud_Channel(nullptr) {}
  virtual ~Cloud_Channel();

  Cloud_Channel(const Cloud_Channel& from);
  Cloud_Channel(Cloud_Channel&& from) noexcept
    : Cloud_Channel() {
    *this = ::std::move(from);
  }

  inline Cloud_Channel& operator=(const Cloud_Channel& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Channel& operator=(Cloud_Channel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Channel& default_instance();

  static inline const Cloud_Channel* internal_default_instance() {
    return reinterpret_cast<const Cloud_Channel*>(
               &_Cloud_Channel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(Cloud_Channel& a, Cloud_Channel& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Channel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Channel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Channel* New() const final {
    return CreateMaybeMessage<Cloud_Channel>(nullptr);
  }

  Cloud_Channel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Channel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Channel& from);
  void MergeFrom(const Cloud_Channel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Channel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Channel";
  }
  protected:
  explicit Cloud_Channel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Cloud_Channel_ChannelSubscribeRequest ChannelSubscribeRequest;
  typedef Cloud_Channel_ChannelSubscribeResponse ChannelSubscribeResponse;
  typedef Cloud_Channel_ChannelUnsubscribeRequest ChannelUnsubscribeRequest;
  typedef Cloud_Channel_ChannelSubscribersGetRequest ChannelSubscribersGetRequest;
  typedef Cloud_Channel_ChannelSubscribersGetResposne ChannelSubscribersGetResposne;
  typedef Cloud_Channel_ChannelBasicInfo ChannelBasicInfo;
  typedef Cloud_Channel_UserActionInfo UserActionInfo;
  typedef Cloud_Channel_ChannelBasicInfoGetRequest ChannelBasicInfoGetRequest;
  typedef Cloud_Channel_ChannelBasicInfoGetResponse ChannelBasicInfoGetResponse;
  typedef Cloud_Channel_ChannelHeartbeatRequest ChannelHeartbeatRequest;
  typedef Cloud_Channel_ChannelHeartbeatResponse ChannelHeartbeatResponse;
  typedef Cloud_Channel_ChannelBasicInfoNotify ChannelBasicInfoNotify;

  typedef Cloud_Channel_UserAction UserAction;
  static constexpr UserAction USER_ACTION_UNKNOWN =
    Cloud_Channel_UserAction_USER_ACTION_UNKNOWN;
  static constexpr UserAction USER_JOIN_CHANNEL =
    Cloud_Channel_UserAction_USER_JOIN_CHANNEL;
  static constexpr UserAction USER_QUIT_CHANNEL =
    Cloud_Channel_UserAction_USER_QUIT_CHANNEL;
  static constexpr UserAction USER_OFFLINE =
    Cloud_Channel_UserAction_USER_OFFLINE;
  static inline bool UserAction_IsValid(int value) {
    return Cloud_Channel_UserAction_IsValid(value);
  }
  static constexpr UserAction UserAction_MIN =
    Cloud_Channel_UserAction_UserAction_MIN;
  static constexpr UserAction UserAction_MAX =
    Cloud_Channel_UserAction_UserAction_MAX;
  static constexpr int UserAction_ARRAYSIZE =
    Cloud_Channel_UserAction_UserAction_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  UserAction_descriptor() {
    return Cloud_Channel_UserAction_descriptor();
  }
  template<typename T>
  static inline const std::string& UserAction_Name(T enum_t_value) {
    static_assert(::std::is_same<T, UserAction>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function UserAction_Name.");
    return Cloud_Channel_UserAction_Name(enum_t_value);
  }
  static inline bool UserAction_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      UserAction* value) {
    return Cloud_Channel_UserAction_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Channel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Config_ClientConfigGetRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Config.ClientConfigGetRequest) */ {
 public:
  inline Cloud_Config_ClientConfigGetRequest() : Cloud_Config_ClientConfigGetRequest(nullptr) {}
  virtual ~Cloud_Config_ClientConfigGetRequest();

  Cloud_Config_ClientConfigGetRequest(const Cloud_Config_ClientConfigGetRequest& from);
  Cloud_Config_ClientConfigGetRequest(Cloud_Config_ClientConfigGetRequest&& from) noexcept
    : Cloud_Config_ClientConfigGetRequest() {
    *this = ::std::move(from);
  }

  inline Cloud_Config_ClientConfigGetRequest& operator=(const Cloud_Config_ClientConfigGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Config_ClientConfigGetRequest& operator=(Cloud_Config_ClientConfigGetRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Config_ClientConfigGetRequest& default_instance();

  static inline const Cloud_Config_ClientConfigGetRequest* internal_default_instance() {
    return reinterpret_cast<const Cloud_Config_ClientConfigGetRequest*>(
               &_Cloud_Config_ClientConfigGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(Cloud_Config_ClientConfigGetRequest& a, Cloud_Config_ClientConfigGetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Config_ClientConfigGetRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Config_ClientConfigGetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Config_ClientConfigGetRequest* New() const final {
    return CreateMaybeMessage<Cloud_Config_ClientConfigGetRequest>(nullptr);
  }

  Cloud_Config_ClientConfigGetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Config_ClientConfigGetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Config_ClientConfigGetRequest& from);
  void MergeFrom(const Cloud_Config_ClientConfigGetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Config_ClientConfigGetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Config.ClientConfigGetRequest";
  }
  protected:
  explicit Cloud_Config_ClientConfigGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
  };
  // uint32 version = 1;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Config.ClientConfigGetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Config_ClientConfigGetResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Config.ClientConfigGetResponse) */ {
 public:
  inline Cloud_Config_ClientConfigGetResponse() : Cloud_Config_ClientConfigGetResponse(nullptr) {}
  virtual ~Cloud_Config_ClientConfigGetResponse();

  Cloud_Config_ClientConfigGetResponse(const Cloud_Config_ClientConfigGetResponse& from);
  Cloud_Config_ClientConfigGetResponse(Cloud_Config_ClientConfigGetResponse&& from) noexcept
    : Cloud_Config_ClientConfigGetResponse() {
    *this = ::std::move(from);
  }

  inline Cloud_Config_ClientConfigGetResponse& operator=(const Cloud_Config_ClientConfigGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Config_ClientConfigGetResponse& operator=(Cloud_Config_ClientConfigGetResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Config_ClientConfigGetResponse& default_instance();

  static inline const Cloud_Config_ClientConfigGetResponse* internal_default_instance() {
    return reinterpret_cast<const Cloud_Config_ClientConfigGetResponse*>(
               &_Cloud_Config_ClientConfigGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(Cloud_Config_ClientConfigGetResponse& a, Cloud_Config_ClientConfigGetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Config_ClientConfigGetResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Config_ClientConfigGetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Config_ClientConfigGetResponse* New() const final {
    return CreateMaybeMessage<Cloud_Config_ClientConfigGetResponse>(nullptr);
  }

  Cloud_Config_ClientConfigGetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Config_ClientConfigGetResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Config_ClientConfigGetResponse& from);
  void MergeFrom(const Cloud_Config_ClientConfigGetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Config_ClientConfigGetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Config.ClientConfigGetResponse";
  }
  protected:
  explicit Cloud_Config_ClientConfigGetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientConfigFieldNumber = 2,
    kVersionFieldNumber = 1,
  };
  // .AcFunDanmu.Im.Cloud.Config.ClientConfig clientConfig = 2;
  bool has_clientconfig() const;
  private:
  bool _internal_has_clientconfig() const;
  public:
  void clear_clientconfig();
  const ::AcFunDanmu::Im::Cloud_Config_ClientConfig& clientconfig() const;
  ::AcFunDanmu::Im::Cloud_Config_ClientConfig* release_clientconfig();
  ::AcFunDanmu::Im::Cloud_Config_ClientConfig* mutable_clientconfig();
  void set_allocated_clientconfig(::AcFunDanmu::Im::Cloud_Config_ClientConfig* clientconfig);
  private:
  const ::AcFunDanmu::Im::Cloud_Config_ClientConfig& _internal_clientconfig() const;
  ::AcFunDanmu::Im::Cloud_Config_ClientConfig* _internal_mutable_clientconfig();
  public:
  void unsafe_arena_set_allocated_clientconfig(
      ::AcFunDanmu::Im::Cloud_Config_ClientConfig* clientconfig);
  ::AcFunDanmu::Im::Cloud_Config_ClientConfig* unsafe_arena_release_clientconfig();

  // uint32 version = 1;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Config.ClientConfigGetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::AcFunDanmu::Im::Cloud_Config_ClientConfig* clientconfig_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Config_NetworkQualityDetectionConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Config.NetworkQualityDetectionConfig) */ {
 public:
  inline Cloud_Config_NetworkQualityDetectionConfig() : Cloud_Config_NetworkQualityDetectionConfig(nullptr) {}
  virtual ~Cloud_Config_NetworkQualityDetectionConfig();

  Cloud_Config_NetworkQualityDetectionConfig(const Cloud_Config_NetworkQualityDetectionConfig& from);
  Cloud_Config_NetworkQualityDetectionConfig(Cloud_Config_NetworkQualityDetectionConfig&& from) noexcept
    : Cloud_Config_NetworkQualityDetectionConfig() {
    *this = ::std::move(from);
  }

  inline Cloud_Config_NetworkQualityDetectionConfig& operator=(const Cloud_Config_NetworkQualityDetectionConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Config_NetworkQualityDetectionConfig& operator=(Cloud_Config_NetworkQualityDetectionConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Config_NetworkQualityDetectionConfig& default_instance();

  static inline const Cloud_Config_NetworkQualityDetectionConfig* internal_default_instance() {
    return reinterpret_cast<const Cloud_Config_NetworkQualityDetectionConfig*>(
               &_Cloud_Config_NetworkQualityDetectionConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  friend void swap(Cloud_Config_NetworkQualityDetectionConfig& a, Cloud_Config_NetworkQualityDetectionConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Config_NetworkQualityDetectionConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Config_NetworkQualityDetectionConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Config_NetworkQualityDetectionConfig* New() const final {
    return CreateMaybeMessage<Cloud_Config_NetworkQualityDetectionConfig>(nullptr);
  }

  Cloud_Config_NetworkQualityDetectionConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Config_NetworkQualityDetectionConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Config_NetworkQualityDetectionConfig& from);
  void MergeFrom(const Cloud_Config_NetworkQualityDetectionConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Config_NetworkQualityDetectionConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Config.NetworkQualityDetectionConfig";
  }
  protected:
  explicit Cloud_Config_NetworkQualityDetectionConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetectionDomainFieldNumber = 1,
    kDetectionInvervalSecFieldNumber = 2,
  };
  // string detectionDomain = 1;
  void clear_detectiondomain();
  const std::string& detectiondomain() const;
  void set_detectiondomain(const std::string& value);
  void set_detectiondomain(std::string&& value);
  void set_detectiondomain(const char* value);
  void set_detectiondomain(const char* value, size_t size);
  std::string* mutable_detectiondomain();
  std::string* release_detectiondomain();
  void set_allocated_detectiondomain(std::string* detectiondomain);
  private:
  const std::string& _internal_detectiondomain() const;
  void _internal_set_detectiondomain(const std::string& value);
  std::string* _internal_mutable_detectiondomain();
  public:

  // int32 detectionInvervalSec = 2;
  void clear_detectioninvervalsec();
  ::PROTOBUF_NAMESPACE_ID::int32 detectioninvervalsec() const;
  void set_detectioninvervalsec(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_detectioninvervalsec() const;
  void _internal_set_detectioninvervalsec(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Config.NetworkQualityDetectionConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr detectiondomain_;
  ::PROTOBUF_NAMESPACE_ID::int32 detectioninvervalsec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Config_ClientConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Config.ClientConfig) */ {
 public:
  inline Cloud_Config_ClientConfig() : Cloud_Config_ClientConfig(nullptr) {}
  virtual ~Cloud_Config_ClientConfig();

  Cloud_Config_ClientConfig(const Cloud_Config_ClientConfig& from);
  Cloud_Config_ClientConfig(Cloud_Config_ClientConfig&& from) noexcept
    : Cloud_Config_ClientConfig() {
    *this = ::std::move(from);
  }

  inline Cloud_Config_ClientConfig& operator=(const Cloud_Config_ClientConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Config_ClientConfig& operator=(Cloud_Config_ClientConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Config_ClientConfig& default_instance();

  static inline const Cloud_Config_ClientConfig* internal_default_instance() {
    return reinterpret_cast<const Cloud_Config_ClientConfig*>(
               &_Cloud_Config_ClientConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  friend void swap(Cloud_Config_ClientConfig& a, Cloud_Config_ClientConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Config_ClientConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Config_ClientConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Config_ClientConfig* New() const final {
    return CreateMaybeMessage<Cloud_Config_ClientConfig>(nullptr);
  }

  Cloud_Config_ClientConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Config_ClientConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Config_ClientConfig& from);
  void MergeFrom(const Cloud_Config_ClientConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Config_ClientConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Config.ClientConfig";
  }
  protected:
  explicit Cloud_Config_ClientConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceUploadingDomainFieldNumber = 6,
    kNetworkQualityDetectionConfigFieldNumber = 3,
    kFetchUserStatusIntervalFieldNumber = 1,
    kChannelUserHeartbeatIntervalFieldNumber = 2,
    kInputtingTipDisplayIntervalFieldNumber = 4,
    kBatchSendMessageMaxCountFieldNumber = 5,
  };
  // string resourceUploadingDomain = 6;
  void clear_resourceuploadingdomain();
  const std::string& resourceuploadingdomain() const;
  void set_resourceuploadingdomain(const std::string& value);
  void set_resourceuploadingdomain(std::string&& value);
  void set_resourceuploadingdomain(const char* value);
  void set_resourceuploadingdomain(const char* value, size_t size);
  std::string* mutable_resourceuploadingdomain();
  std::string* release_resourceuploadingdomain();
  void set_allocated_resourceuploadingdomain(std::string* resourceuploadingdomain);
  private:
  const std::string& _internal_resourceuploadingdomain() const;
  void _internal_set_resourceuploadingdomain(const std::string& value);
  std::string* _internal_mutable_resourceuploadingdomain();
  public:

  // .AcFunDanmu.Im.Cloud.Config.NetworkQualityDetectionConfig networkQualityDetectionConfig = 3;
  bool has_networkqualitydetectionconfig() const;
  private:
  bool _internal_has_networkqualitydetectionconfig() const;
  public:
  void clear_networkqualitydetectionconfig();
  const ::AcFunDanmu::Im::Cloud_Config_NetworkQualityDetectionConfig& networkqualitydetectionconfig() const;
  ::AcFunDanmu::Im::Cloud_Config_NetworkQualityDetectionConfig* release_networkqualitydetectionconfig();
  ::AcFunDanmu::Im::Cloud_Config_NetworkQualityDetectionConfig* mutable_networkqualitydetectionconfig();
  void set_allocated_networkqualitydetectionconfig(::AcFunDanmu::Im::Cloud_Config_NetworkQualityDetectionConfig* networkqualitydetectionconfig);
  private:
  const ::AcFunDanmu::Im::Cloud_Config_NetworkQualityDetectionConfig& _internal_networkqualitydetectionconfig() const;
  ::AcFunDanmu::Im::Cloud_Config_NetworkQualityDetectionConfig* _internal_mutable_networkqualitydetectionconfig();
  public:
  void unsafe_arena_set_allocated_networkqualitydetectionconfig(
      ::AcFunDanmu::Im::Cloud_Config_NetworkQualityDetectionConfig* networkqualitydetectionconfig);
  ::AcFunDanmu::Im::Cloud_Config_NetworkQualityDetectionConfig* unsafe_arena_release_networkqualitydetectionconfig();

  // int32 fetchUserStatusInterval = 1;
  void clear_fetchuserstatusinterval();
  ::PROTOBUF_NAMESPACE_ID::int32 fetchuserstatusinterval() const;
  void set_fetchuserstatusinterval(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fetchuserstatusinterval() const;
  void _internal_set_fetchuserstatusinterval(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 channelUserHeartbeatInterval = 2;
  void clear_channeluserheartbeatinterval();
  ::PROTOBUF_NAMESPACE_ID::int32 channeluserheartbeatinterval() const;
  void set_channeluserheartbeatinterval(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channeluserheartbeatinterval() const;
  void _internal_set_channeluserheartbeatinterval(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 inputtingTipDisplayInterval = 4;
  void clear_inputtingtipdisplayinterval();
  ::PROTOBUF_NAMESPACE_ID::int32 inputtingtipdisplayinterval() const;
  void set_inputtingtipdisplayinterval(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_inputtingtipdisplayinterval() const;
  void _internal_set_inputtingtipdisplayinterval(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 batchSendMessageMaxCount = 5;
  void clear_batchsendmessagemaxcount();
  ::PROTOBUF_NAMESPACE_ID::int32 batchsendmessagemaxcount() const;
  void set_batchsendmessagemaxcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_batchsendmessagemaxcount() const;
  void _internal_set_batchsendmessagemaxcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Config.ClientConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resourceuploadingdomain_;
  ::AcFunDanmu::Im::Cloud_Config_NetworkQualityDetectionConfig* networkqualitydetectionconfig_;
  ::PROTOBUF_NAMESPACE_ID::int32 fetchuserstatusinterval_;
  ::PROTOBUF_NAMESPACE_ID::int32 channeluserheartbeatinterval_;
  ::PROTOBUF_NAMESPACE_ID::int32 inputtingtipdisplayinterval_;
  ::PROTOBUF_NAMESPACE_ID::int32 batchsendmessagemaxcount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Config PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Config) */ {
 public:
  inline Cloud_Config() : Cloud_Config(nullptr) {}
  virtual ~Cloud_Config();

  Cloud_Config(const Cloud_Config& from);
  Cloud_Config(Cloud_Config&& from) noexcept
    : Cloud_Config() {
    *this = ::std::move(from);
  }

  inline Cloud_Config& operator=(const Cloud_Config& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Config& operator=(Cloud_Config&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Config& default_instance();

  static inline const Cloud_Config* internal_default_instance() {
    return reinterpret_cast<const Cloud_Config*>(
               &_Cloud_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  friend void swap(Cloud_Config& a, Cloud_Config& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Config* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Config* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Config* New() const final {
    return CreateMaybeMessage<Cloud_Config>(nullptr);
  }

  Cloud_Config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Config& from);
  void MergeFrom(const Cloud_Config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Config";
  }
  protected:
  explicit Cloud_Config(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Cloud_Config_ClientConfigGetRequest ClientConfigGetRequest;
  typedef Cloud_Config_ClientConfigGetResponse ClientConfigGetResponse;
  typedef Cloud_Config_NetworkQualityDetectionConfig NetworkQualityDetectionConfig;
  typedef Cloud_Config_ClientConfig ClientConfig;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Config)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Profile_UserOnlineStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Profile.UserOnlineStatus) */ {
 public:
  inline Cloud_Profile_UserOnlineStatus() : Cloud_Profile_UserOnlineStatus(nullptr) {}
  virtual ~Cloud_Profile_UserOnlineStatus();

  Cloud_Profile_UserOnlineStatus(const Cloud_Profile_UserOnlineStatus& from);
  Cloud_Profile_UserOnlineStatus(Cloud_Profile_UserOnlineStatus&& from) noexcept
    : Cloud_Profile_UserOnlineStatus() {
    *this = ::std::move(from);
  }

  inline Cloud_Profile_UserOnlineStatus& operator=(const Cloud_Profile_UserOnlineStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Profile_UserOnlineStatus& operator=(Cloud_Profile_UserOnlineStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Profile_UserOnlineStatus& default_instance();

  static inline const Cloud_Profile_UserOnlineStatus* internal_default_instance() {
    return reinterpret_cast<const Cloud_Profile_UserOnlineStatus*>(
               &_Cloud_Profile_UserOnlineStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  friend void swap(Cloud_Profile_UserOnlineStatus& a, Cloud_Profile_UserOnlineStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Profile_UserOnlineStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Profile_UserOnlineStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Profile_UserOnlineStatus* New() const final {
    return CreateMaybeMessage<Cloud_Profile_UserOnlineStatus>(nullptr);
  }

  Cloud_Profile_UserOnlineStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Profile_UserOnlineStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Profile_UserOnlineStatus& from);
  void MergeFrom(const Cloud_Profile_UserOnlineStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Profile_UserOnlineStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Profile.UserOnlineStatus";
  }
  protected:
  explicit Cloud_Profile_UserOnlineStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Cloud_Profile_UserOnlineStatus_Status Status;
  static constexpr Status UNKNOWN =
    Cloud_Profile_UserOnlineStatus_Status_UNKNOWN;
  static constexpr Status ONLINE =
    Cloud_Profile_UserOnlineStatus_Status_ONLINE;
  static constexpr Status OFFLINE =
    Cloud_Profile_UserOnlineStatus_Status_OFFLINE;
  static inline bool Status_IsValid(int value) {
    return Cloud_Profile_UserOnlineStatus_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    Cloud_Profile_UserOnlineStatus_Status_Status_MIN;
  static constexpr Status Status_MAX =
    Cloud_Profile_UserOnlineStatus_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    Cloud_Profile_UserOnlineStatus_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return Cloud_Profile_UserOnlineStatus_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return Cloud_Profile_UserOnlineStatus_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return Cloud_Profile_UserOnlineStatus_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
    kLastOfflineTimeFieldNumber = 2,
    kStatusFieldNumber = 3,
  };
  // .AcFunDanmu.Im.Basic.User user = 1;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::AcFunDanmu::Im::Basic_User& user() const;
  ::AcFunDanmu::Im::Basic_User* release_user();
  ::AcFunDanmu::Im::Basic_User* mutable_user();
  void set_allocated_user(::AcFunDanmu::Im::Basic_User* user);
  private:
  const ::AcFunDanmu::Im::Basic_User& _internal_user() const;
  ::AcFunDanmu::Im::Basic_User* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::AcFunDanmu::Im::Basic_User* user);
  ::AcFunDanmu::Im::Basic_User* unsafe_arena_release_user();

  // int64 lastOfflineTime = 2;
  void clear_lastofflinetime();
  ::PROTOBUF_NAMESPACE_ID::int64 lastofflinetime() const;
  void set_lastofflinetime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_lastofflinetime() const;
  void _internal_set_lastofflinetime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .AcFunDanmu.Im.Cloud.Profile.UserOnlineStatus.Status status = 3;
  void clear_status();
  ::AcFunDanmu::Im::Cloud_Profile_UserOnlineStatus_Status status() const;
  void set_status(::AcFunDanmu::Im::Cloud_Profile_UserOnlineStatus_Status value);
  private:
  ::AcFunDanmu::Im::Cloud_Profile_UserOnlineStatus_Status _internal_status() const;
  void _internal_set_status(::AcFunDanmu::Im::Cloud_Profile_UserOnlineStatus_Status value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Profile.UserOnlineStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::AcFunDanmu::Im::Basic_User* user_;
  ::PROTOBUF_NAMESPACE_ID::int64 lastofflinetime_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Profile_ProfileBatchOnlineTimeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Profile.ProfileBatchOnlineTimeRequest) */ {
 public:
  inline Cloud_Profile_ProfileBatchOnlineTimeRequest() : Cloud_Profile_ProfileBatchOnlineTimeRequest(nullptr) {}
  virtual ~Cloud_Profile_ProfileBatchOnlineTimeRequest();

  Cloud_Profile_ProfileBatchOnlineTimeRequest(const Cloud_Profile_ProfileBatchOnlineTimeRequest& from);
  Cloud_Profile_ProfileBatchOnlineTimeRequest(Cloud_Profile_ProfileBatchOnlineTimeRequest&& from) noexcept
    : Cloud_Profile_ProfileBatchOnlineTimeRequest() {
    *this = ::std::move(from);
  }

  inline Cloud_Profile_ProfileBatchOnlineTimeRequest& operator=(const Cloud_Profile_ProfileBatchOnlineTimeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Profile_ProfileBatchOnlineTimeRequest& operator=(Cloud_Profile_ProfileBatchOnlineTimeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Profile_ProfileBatchOnlineTimeRequest& default_instance();

  static inline const Cloud_Profile_ProfileBatchOnlineTimeRequest* internal_default_instance() {
    return reinterpret_cast<const Cloud_Profile_ProfileBatchOnlineTimeRequest*>(
               &_Cloud_Profile_ProfileBatchOnlineTimeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  friend void swap(Cloud_Profile_ProfileBatchOnlineTimeRequest& a, Cloud_Profile_ProfileBatchOnlineTimeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Profile_ProfileBatchOnlineTimeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Profile_ProfileBatchOnlineTimeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Profile_ProfileBatchOnlineTimeRequest* New() const final {
    return CreateMaybeMessage<Cloud_Profile_ProfileBatchOnlineTimeRequest>(nullptr);
  }

  Cloud_Profile_ProfileBatchOnlineTimeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Profile_ProfileBatchOnlineTimeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Profile_ProfileBatchOnlineTimeRequest& from);
  void MergeFrom(const Cloud_Profile_ProfileBatchOnlineTimeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Profile_ProfileBatchOnlineTimeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Profile.ProfileBatchOnlineTimeRequest";
  }
  protected:
  explicit Cloud_Profile_ProfileBatchOnlineTimeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
  };
  // repeated .AcFunDanmu.Im.Basic.User user = 1;
  int user_size() const;
  private:
  int _internal_user_size() const;
  public:
  void clear_user();
  ::AcFunDanmu::Im::Basic_User* mutable_user(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_User >*
      mutable_user();
  private:
  const ::AcFunDanmu::Im::Basic_User& _internal_user(int index) const;
  ::AcFunDanmu::Im::Basic_User* _internal_add_user();
  public:
  const ::AcFunDanmu::Im::Basic_User& user(int index) const;
  ::AcFunDanmu::Im::Basic_User* add_user();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_User >&
      user() const;

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Profile.ProfileBatchOnlineTimeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_User > user_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Profile_ProfileBatchOnlineTimeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Profile.ProfileBatchOnlineTimeResponse) */ {
 public:
  inline Cloud_Profile_ProfileBatchOnlineTimeResponse() : Cloud_Profile_ProfileBatchOnlineTimeResponse(nullptr) {}
  virtual ~Cloud_Profile_ProfileBatchOnlineTimeResponse();

  Cloud_Profile_ProfileBatchOnlineTimeResponse(const Cloud_Profile_ProfileBatchOnlineTimeResponse& from);
  Cloud_Profile_ProfileBatchOnlineTimeResponse(Cloud_Profile_ProfileBatchOnlineTimeResponse&& from) noexcept
    : Cloud_Profile_ProfileBatchOnlineTimeResponse() {
    *this = ::std::move(from);
  }

  inline Cloud_Profile_ProfileBatchOnlineTimeResponse& operator=(const Cloud_Profile_ProfileBatchOnlineTimeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Profile_ProfileBatchOnlineTimeResponse& operator=(Cloud_Profile_ProfileBatchOnlineTimeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Profile_ProfileBatchOnlineTimeResponse& default_instance();

  static inline const Cloud_Profile_ProfileBatchOnlineTimeResponse* internal_default_instance() {
    return reinterpret_cast<const Cloud_Profile_ProfileBatchOnlineTimeResponse*>(
               &_Cloud_Profile_ProfileBatchOnlineTimeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  friend void swap(Cloud_Profile_ProfileBatchOnlineTimeResponse& a, Cloud_Profile_ProfileBatchOnlineTimeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Profile_ProfileBatchOnlineTimeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Profile_ProfileBatchOnlineTimeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Profile_ProfileBatchOnlineTimeResponse* New() const final {
    return CreateMaybeMessage<Cloud_Profile_ProfileBatchOnlineTimeResponse>(nullptr);
  }

  Cloud_Profile_ProfileBatchOnlineTimeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Profile_ProfileBatchOnlineTimeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Profile_ProfileBatchOnlineTimeResponse& from);
  void MergeFrom(const Cloud_Profile_ProfileBatchOnlineTimeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Profile_ProfileBatchOnlineTimeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Profile.ProfileBatchOnlineTimeResponse";
  }
  protected:
  explicit Cloud_Profile_ProfileBatchOnlineTimeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserOnlineStatusFieldNumber = 1,
  };
  // repeated .AcFunDanmu.Im.Cloud.Profile.UserOnlineStatus userOnlineStatus = 1;
  int useronlinestatus_size() const;
  private:
  int _internal_useronlinestatus_size() const;
  public:
  void clear_useronlinestatus();
  ::AcFunDanmu::Im::Cloud_Profile_UserOnlineStatus* mutable_useronlinestatus(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud_Profile_UserOnlineStatus >*
      mutable_useronlinestatus();
  private:
  const ::AcFunDanmu::Im::Cloud_Profile_UserOnlineStatus& _internal_useronlinestatus(int index) const;
  ::AcFunDanmu::Im::Cloud_Profile_UserOnlineStatus* _internal_add_useronlinestatus();
  public:
  const ::AcFunDanmu::Im::Cloud_Profile_UserOnlineStatus& useronlinestatus(int index) const;
  ::AcFunDanmu::Im::Cloud_Profile_UserOnlineStatus* add_useronlinestatus();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud_Profile_UserOnlineStatus >&
      useronlinestatus() const;

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Profile.ProfileBatchOnlineTimeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud_Profile_UserOnlineStatus > useronlinestatus_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Profile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Profile) */ {
 public:
  inline Cloud_Profile() : Cloud_Profile(nullptr) {}
  virtual ~Cloud_Profile();

  Cloud_Profile(const Cloud_Profile& from);
  Cloud_Profile(Cloud_Profile&& from) noexcept
    : Cloud_Profile() {
    *this = ::std::move(from);
  }

  inline Cloud_Profile& operator=(const Cloud_Profile& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Profile& operator=(Cloud_Profile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Profile& default_instance();

  static inline const Cloud_Profile* internal_default_instance() {
    return reinterpret_cast<const Cloud_Profile*>(
               &_Cloud_Profile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  friend void swap(Cloud_Profile& a, Cloud_Profile& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Profile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Profile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Profile* New() const final {
    return CreateMaybeMessage<Cloud_Profile>(nullptr);
  }

  Cloud_Profile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Profile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Profile& from);
  void MergeFrom(const Cloud_Profile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Profile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Profile";
  }
  protected:
  explicit Cloud_Profile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Cloud_Profile_UserOnlineStatus UserOnlineStatus;
  typedef Cloud_Profile_ProfileBatchOnlineTimeRequest ProfileBatchOnlineTimeRequest;
  typedef Cloud_Profile_ProfileBatchOnlineTimeResponse ProfileBatchOnlineTimeResponse;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Profile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Data_Update_KsImDataUpdatePushPayload PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Data.Update.KsImDataUpdatePushPayload) */ {
 public:
  inline Cloud_Data_Update_KsImDataUpdatePushPayload() : Cloud_Data_Update_KsImDataUpdatePushPayload(nullptr) {}
  virtual ~Cloud_Data_Update_KsImDataUpdatePushPayload();

  Cloud_Data_Update_KsImDataUpdatePushPayload(const Cloud_Data_Update_KsImDataUpdatePushPayload& from);
  Cloud_Data_Update_KsImDataUpdatePushPayload(Cloud_Data_Update_KsImDataUpdatePushPayload&& from) noexcept
    : Cloud_Data_Update_KsImDataUpdatePushPayload() {
    *this = ::std::move(from);
  }

  inline Cloud_Data_Update_KsImDataUpdatePushPayload& operator=(const Cloud_Data_Update_KsImDataUpdatePushPayload& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Data_Update_KsImDataUpdatePushPayload& operator=(Cloud_Data_Update_KsImDataUpdatePushPayload&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Data_Update_KsImDataUpdatePushPayload& default_instance();

  static inline const Cloud_Data_Update_KsImDataUpdatePushPayload* internal_default_instance() {
    return reinterpret_cast<const Cloud_Data_Update_KsImDataUpdatePushPayload*>(
               &_Cloud_Data_Update_KsImDataUpdatePushPayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  friend void swap(Cloud_Data_Update_KsImDataUpdatePushPayload& a, Cloud_Data_Update_KsImDataUpdatePushPayload& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Data_Update_KsImDataUpdatePushPayload* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Data_Update_KsImDataUpdatePushPayload* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Data_Update_KsImDataUpdatePushPayload* New() const final {
    return CreateMaybeMessage<Cloud_Data_Update_KsImDataUpdatePushPayload>(nullptr);
  }

  Cloud_Data_Update_KsImDataUpdatePushPayload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Data_Update_KsImDataUpdatePushPayload>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Data_Update_KsImDataUpdatePushPayload& from);
  void MergeFrom(const Cloud_Data_Update_KsImDataUpdatePushPayload& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Data_Update_KsImDataUpdatePushPayload* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Data.Update.KsImDataUpdatePushPayload";
  }
  protected:
  explicit Cloud_Data_Update_KsImDataUpdatePushPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // bytes content = 2;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // .AcFunDanmu.Im.Cloud.Data.Update.KsImDataUpdatePushPayload type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const ::AcFunDanmu::Im::Cloud_Data_Update_KsImDataUpdatePushPayload& type() const;
  ::AcFunDanmu::Im::Cloud_Data_Update_KsImDataUpdatePushPayload* release_type();
  ::AcFunDanmu::Im::Cloud_Data_Update_KsImDataUpdatePushPayload* mutable_type();
  void set_allocated_type(::AcFunDanmu::Im::Cloud_Data_Update_KsImDataUpdatePushPayload* type);
  private:
  const ::AcFunDanmu::Im::Cloud_Data_Update_KsImDataUpdatePushPayload& _internal_type() const;
  ::AcFunDanmu::Im::Cloud_Data_Update_KsImDataUpdatePushPayload* _internal_mutable_type();
  public:
  void unsafe_arena_set_allocated_type(
      ::AcFunDanmu::Im::Cloud_Data_Update_KsImDataUpdatePushPayload* type);
  ::AcFunDanmu::Im::Cloud_Data_Update_KsImDataUpdatePushPayload* unsafe_arena_release_type();

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Data.Update.KsImDataUpdatePushPayload)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::AcFunDanmu::Im::Cloud_Data_Update_KsImDataUpdatePushPayload* type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Data_Update_GroupInfoDataUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Data.Update.GroupInfoDataUpdate) */ {
 public:
  inline Cloud_Data_Update_GroupInfoDataUpdate() : Cloud_Data_Update_GroupInfoDataUpdate(nullptr) {}
  virtual ~Cloud_Data_Update_GroupInfoDataUpdate();

  Cloud_Data_Update_GroupInfoDataUpdate(const Cloud_Data_Update_GroupInfoDataUpdate& from);
  Cloud_Data_Update_GroupInfoDataUpdate(Cloud_Data_Update_GroupInfoDataUpdate&& from) noexcept
    : Cloud_Data_Update_GroupInfoDataUpdate() {
    *this = ::std::move(from);
  }

  inline Cloud_Data_Update_GroupInfoDataUpdate& operator=(const Cloud_Data_Update_GroupInfoDataUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Data_Update_GroupInfoDataUpdate& operator=(Cloud_Data_Update_GroupInfoDataUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Data_Update_GroupInfoDataUpdate& default_instance();

  static inline const Cloud_Data_Update_GroupInfoDataUpdate* internal_default_instance() {
    return reinterpret_cast<const Cloud_Data_Update_GroupInfoDataUpdate*>(
               &_Cloud_Data_Update_GroupInfoDataUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    112;

  friend void swap(Cloud_Data_Update_GroupInfoDataUpdate& a, Cloud_Data_Update_GroupInfoDataUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Data_Update_GroupInfoDataUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Data_Update_GroupInfoDataUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Data_Update_GroupInfoDataUpdate* New() const final {
    return CreateMaybeMessage<Cloud_Data_Update_GroupInfoDataUpdate>(nullptr);
  }

  Cloud_Data_Update_GroupInfoDataUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Data_Update_GroupInfoDataUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Data_Update_GroupInfoDataUpdate& from);
  void MergeFrom(const Cloud_Data_Update_GroupInfoDataUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Data_Update_GroupInfoDataUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Data.Update.GroupInfoDataUpdate";
  }
  protected:
  explicit Cloud_Data_Update_GroupInfoDataUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
  };
  // string groupId = 1;
  void clear_groupid();
  const std::string& groupid() const;
  void set_groupid(const std::string& value);
  void set_groupid(std::string&& value);
  void set_groupid(const char* value);
  void set_groupid(const char* value, size_t size);
  std::string* mutable_groupid();
  std::string* release_groupid();
  void set_allocated_groupid(std::string* groupid);
  private:
  const std::string& _internal_groupid() const;
  void _internal_set_groupid(const std::string& value);
  std::string* _internal_mutable_groupid();
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Data.Update.GroupInfoDataUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Data_Update_GroupMemberListUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Data.Update.GroupMemberListUpdate) */ {
 public:
  inline Cloud_Data_Update_GroupMemberListUpdate() : Cloud_Data_Update_GroupMemberListUpdate(nullptr) {}
  virtual ~Cloud_Data_Update_GroupMemberListUpdate();

  Cloud_Data_Update_GroupMemberListUpdate(const Cloud_Data_Update_GroupMemberListUpdate& from);
  Cloud_Data_Update_GroupMemberListUpdate(Cloud_Data_Update_GroupMemberListUpdate&& from) noexcept
    : Cloud_Data_Update_GroupMemberListUpdate() {
    *this = ::std::move(from);
  }

  inline Cloud_Data_Update_GroupMemberListUpdate& operator=(const Cloud_Data_Update_GroupMemberListUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Data_Update_GroupMemberListUpdate& operator=(Cloud_Data_Update_GroupMemberListUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Data_Update_GroupMemberListUpdate& default_instance();

  static inline const Cloud_Data_Update_GroupMemberListUpdate* internal_default_instance() {
    return reinterpret_cast<const Cloud_Data_Update_GroupMemberListUpdate*>(
               &_Cloud_Data_Update_GroupMemberListUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  friend void swap(Cloud_Data_Update_GroupMemberListUpdate& a, Cloud_Data_Update_GroupMemberListUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Data_Update_GroupMemberListUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Data_Update_GroupMemberListUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Data_Update_GroupMemberListUpdate* New() const final {
    return CreateMaybeMessage<Cloud_Data_Update_GroupMemberListUpdate>(nullptr);
  }

  Cloud_Data_Update_GroupMemberListUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Data_Update_GroupMemberListUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Data_Update_GroupMemberListUpdate& from);
  void MergeFrom(const Cloud_Data_Update_GroupMemberListUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Data_Update_GroupMemberListUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Data.Update.GroupMemberListUpdate";
  }
  protected:
  explicit Cloud_Data_Update_GroupMemberListUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
  };
  // string groupId = 1;
  void clear_groupid();
  const std::string& groupid() const;
  void set_groupid(const std::string& value);
  void set_groupid(std::string&& value);
  void set_groupid(const char* value);
  void set_groupid(const char* value, size_t size);
  std::string* mutable_groupid();
  std::string* release_groupid();
  void set_allocated_groupid(std::string* groupid);
  private:
  const std::string& _internal_groupid() const;
  void _internal_set_groupid(const std::string& value);
  std::string* _internal_mutable_groupid();
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Data.Update.GroupMemberListUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Data_Update_YouBeKicked PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Data.Update.YouBeKicked) */ {
 public:
  inline Cloud_Data_Update_YouBeKicked() : Cloud_Data_Update_YouBeKicked(nullptr) {}
  virtual ~Cloud_Data_Update_YouBeKicked();

  Cloud_Data_Update_YouBeKicked(const Cloud_Data_Update_YouBeKicked& from);
  Cloud_Data_Update_YouBeKicked(Cloud_Data_Update_YouBeKicked&& from) noexcept
    : Cloud_Data_Update_YouBeKicked() {
    *this = ::std::move(from);
  }

  inline Cloud_Data_Update_YouBeKicked& operator=(const Cloud_Data_Update_YouBeKicked& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Data_Update_YouBeKicked& operator=(Cloud_Data_Update_YouBeKicked&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Data_Update_YouBeKicked& default_instance();

  static inline const Cloud_Data_Update_YouBeKicked* internal_default_instance() {
    return reinterpret_cast<const Cloud_Data_Update_YouBeKicked*>(
               &_Cloud_Data_Update_YouBeKicked_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    114;

  friend void swap(Cloud_Data_Update_YouBeKicked& a, Cloud_Data_Update_YouBeKicked& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Data_Update_YouBeKicked* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Data_Update_YouBeKicked* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Data_Update_YouBeKicked* New() const final {
    return CreateMaybeMessage<Cloud_Data_Update_YouBeKicked>(nullptr);
  }

  Cloud_Data_Update_YouBeKicked* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Data_Update_YouBeKicked>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Data_Update_YouBeKicked& from);
  void MergeFrom(const Cloud_Data_Update_YouBeKicked& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Data_Update_YouBeKicked* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Data.Update.YouBeKicked";
  }
  protected:
  explicit Cloud_Data_Update_YouBeKicked(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
  };
  // string groupId = 1;
  void clear_groupid();
  const std::string& groupid() const;
  void set_groupid(const std::string& value);
  void set_groupid(std::string&& value);
  void set_groupid(const char* value);
  void set_groupid(const char* value, size_t size);
  std::string* mutable_groupid();
  std::string* release_groupid();
  void set_allocated_groupid(std::string* groupid);
  private:
  const std::string& _internal_groupid() const;
  void _internal_set_groupid(const std::string& value);
  std::string* _internal_mutable_groupid();
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Data.Update.YouBeKicked)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Data_Update_MessageRead PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Data.Update.MessageRead) */ {
 public:
  inline Cloud_Data_Update_MessageRead() : Cloud_Data_Update_MessageRead(nullptr) {}
  virtual ~Cloud_Data_Update_MessageRead();

  Cloud_Data_Update_MessageRead(const Cloud_Data_Update_MessageRead& from);
  Cloud_Data_Update_MessageRead(Cloud_Data_Update_MessageRead&& from) noexcept
    : Cloud_Data_Update_MessageRead() {
    *this = ::std::move(from);
  }

  inline Cloud_Data_Update_MessageRead& operator=(const Cloud_Data_Update_MessageRead& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Data_Update_MessageRead& operator=(Cloud_Data_Update_MessageRead&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Data_Update_MessageRead& default_instance();

  static inline const Cloud_Data_Update_MessageRead* internal_default_instance() {
    return reinterpret_cast<const Cloud_Data_Update_MessageRead*>(
               &_Cloud_Data_Update_MessageRead_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    115;

  friend void swap(Cloud_Data_Update_MessageRead& a, Cloud_Data_Update_MessageRead& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Data_Update_MessageRead* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Data_Update_MessageRead* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Data_Update_MessageRead* New() const final {
    return CreateMaybeMessage<Cloud_Data_Update_MessageRead>(nullptr);
  }

  Cloud_Data_Update_MessageRead* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Data_Update_MessageRead>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Data_Update_MessageRead& from);
  void MergeFrom(const Cloud_Data_Update_MessageRead& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Data_Update_MessageRead* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Data.Update.MessageRead";
  }
  protected:
  explicit Cloud_Data_Update_MessageRead(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrTargetIdFieldNumber = 1,
    kReadSeqFieldNumber = 2,
    kChatTargetTypeFieldNumber = 3,
  };
  // string strTargetId = 1;
  void clear_strtargetid();
  const std::string& strtargetid() const;
  void set_strtargetid(const std::string& value);
  void set_strtargetid(std::string&& value);
  void set_strtargetid(const char* value);
  void set_strtargetid(const char* value, size_t size);
  std::string* mutable_strtargetid();
  std::string* release_strtargetid();
  void set_allocated_strtargetid(std::string* strtargetid);
  private:
  const std::string& _internal_strtargetid() const;
  void _internal_set_strtargetid(const std::string& value);
  std::string* _internal_mutable_strtargetid();
  public:

  // int64 readSeq = 2;
  void clear_readseq();
  ::PROTOBUF_NAMESPACE_ID::int64 readseq() const;
  void set_readseq(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_readseq() const;
  void _internal_set_readseq(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .AcFunDanmu.Im.ImMessage.ChatTargetType chatTargetType = 3;
  void clear_chattargettype();
  ::AcFunDanmu::Im::ImMessage_ChatTargetType chattargettype() const;
  void set_chattargettype(::AcFunDanmu::Im::ImMessage_ChatTargetType value);
  private:
  ::AcFunDanmu::Im::ImMessage_ChatTargetType _internal_chattargettype() const;
  void _internal_set_chattargettype(::AcFunDanmu::Im::ImMessage_ChatTargetType value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Data.Update.MessageRead)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strtargetid_;
  ::PROTOBUF_NAMESPACE_ID::int64 readseq_;
  int chattargettype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Data_Update_MessageReceipt PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Data.Update.MessageReceipt) */ {
 public:
  inline Cloud_Data_Update_MessageReceipt() : Cloud_Data_Update_MessageReceipt(nullptr) {}
  virtual ~Cloud_Data_Update_MessageReceipt();

  Cloud_Data_Update_MessageReceipt(const Cloud_Data_Update_MessageReceipt& from);
  Cloud_Data_Update_MessageReceipt(Cloud_Data_Update_MessageReceipt&& from) noexcept
    : Cloud_Data_Update_MessageReceipt() {
    *this = ::std::move(from);
  }

  inline Cloud_Data_Update_MessageReceipt& operator=(const Cloud_Data_Update_MessageReceipt& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Data_Update_MessageReceipt& operator=(Cloud_Data_Update_MessageReceipt&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Data_Update_MessageReceipt& default_instance();

  static inline const Cloud_Data_Update_MessageReceipt* internal_default_instance() {
    return reinterpret_cast<const Cloud_Data_Update_MessageReceipt*>(
               &_Cloud_Data_Update_MessageReceipt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    116;

  friend void swap(Cloud_Data_Update_MessageReceipt& a, Cloud_Data_Update_MessageReceipt& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Data_Update_MessageReceipt* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Data_Update_MessageReceipt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Data_Update_MessageReceipt* New() const final {
    return CreateMaybeMessage<Cloud_Data_Update_MessageReceipt>(nullptr);
  }

  Cloud_Data_Update_MessageReceipt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Data_Update_MessageReceipt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Data_Update_MessageReceipt& from);
  void MergeFrom(const Cloud_Data_Update_MessageReceipt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Data_Update_MessageReceipt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Data.Update.MessageReceipt";
  }
  protected:
  explicit Cloud_Data_Update_MessageReceipt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatTargetFieldNumber = 1,
    kReceiptStatusFieldNumber = 2,
  };
  // .AcFunDanmu.Im.ImMessage.ChatTarget chatTarget = 1;
  bool has_chattarget() const;
  private:
  bool _internal_has_chattarget() const;
  public:
  void clear_chattarget();
  const ::AcFunDanmu::Im::ImMessage_ChatTarget& chattarget() const;
  ::AcFunDanmu::Im::ImMessage_ChatTarget* release_chattarget();
  ::AcFunDanmu::Im::ImMessage_ChatTarget* mutable_chattarget();
  void set_allocated_chattarget(::AcFunDanmu::Im::ImMessage_ChatTarget* chattarget);
  private:
  const ::AcFunDanmu::Im::ImMessage_ChatTarget& _internal_chattarget() const;
  ::AcFunDanmu::Im::ImMessage_ChatTarget* _internal_mutable_chattarget();
  public:
  void unsafe_arena_set_allocated_chattarget(
      ::AcFunDanmu::Im::ImMessage_ChatTarget* chattarget);
  ::AcFunDanmu::Im::ImMessage_ChatTarget* unsafe_arena_release_chattarget();

  // .AcFunDanmu.Im.ImMessage.MessageReceiptStatus receiptStatus = 2;
  bool has_receiptstatus() const;
  private:
  bool _internal_has_receiptstatus() const;
  public:
  void clear_receiptstatus();
  const ::AcFunDanmu::Im::ImMessage_MessageReceiptStatus& receiptstatus() const;
  ::AcFunDanmu::Im::ImMessage_MessageReceiptStatus* release_receiptstatus();
  ::AcFunDanmu::Im::ImMessage_MessageReceiptStatus* mutable_receiptstatus();
  void set_allocated_receiptstatus(::AcFunDanmu::Im::ImMessage_MessageReceiptStatus* receiptstatus);
  private:
  const ::AcFunDanmu::Im::ImMessage_MessageReceiptStatus& _internal_receiptstatus() const;
  ::AcFunDanmu::Im::ImMessage_MessageReceiptStatus* _internal_mutable_receiptstatus();
  public:
  void unsafe_arena_set_allocated_receiptstatus(
      ::AcFunDanmu::Im::ImMessage_MessageReceiptStatus* receiptstatus);
  ::AcFunDanmu::Im::ImMessage_MessageReceiptStatus* unsafe_arena_release_receiptstatus();

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Data.Update.MessageReceipt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::AcFunDanmu::Im::ImMessage_ChatTarget* chattarget_;
  ::AcFunDanmu::Im::ImMessage_MessageReceiptStatus* receiptstatus_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Data_Update PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Data.Update) */ {
 public:
  inline Cloud_Data_Update() : Cloud_Data_Update(nullptr) {}
  virtual ~Cloud_Data_Update();

  Cloud_Data_Update(const Cloud_Data_Update& from);
  Cloud_Data_Update(Cloud_Data_Update&& from) noexcept
    : Cloud_Data_Update() {
    *this = ::std::move(from);
  }

  inline Cloud_Data_Update& operator=(const Cloud_Data_Update& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Data_Update& operator=(Cloud_Data_Update&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Data_Update& default_instance();

  static inline const Cloud_Data_Update* internal_default_instance() {
    return reinterpret_cast<const Cloud_Data_Update*>(
               &_Cloud_Data_Update_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    117;

  friend void swap(Cloud_Data_Update& a, Cloud_Data_Update& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Data_Update* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Data_Update* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Data_Update* New() const final {
    return CreateMaybeMessage<Cloud_Data_Update>(nullptr);
  }

  Cloud_Data_Update* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Data_Update>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Data_Update& from);
  void MergeFrom(const Cloud_Data_Update& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Data_Update* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Data.Update";
  }
  protected:
  explicit Cloud_Data_Update(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Cloud_Data_Update_KsImDataUpdatePushPayload KsImDataUpdatePushPayload;
  typedef Cloud_Data_Update_GroupInfoDataUpdate GroupInfoDataUpdate;
  typedef Cloud_Data_Update_GroupMemberListUpdate GroupMemberListUpdate;
  typedef Cloud_Data_Update_YouBeKicked YouBeKicked;
  typedef Cloud_Data_Update_MessageRead MessageRead;
  typedef Cloud_Data_Update_MessageReceipt MessageReceipt;

  typedef Cloud_Data_Update_KsImDataUpdateType KsImDataUpdateType;
  static constexpr KsImDataUpdateType INVALID =
    Cloud_Data_Update_KsImDataUpdateType_INVALID;
  static constexpr KsImDataUpdateType GROUP_INFO_UPDATE =
    Cloud_Data_Update_KsImDataUpdateType_GROUP_INFO_UPDATE;
  static constexpr KsImDataUpdateType GROUP_MEMBER_LIST_UPDATE =
    Cloud_Data_Update_KsImDataUpdateType_GROUP_MEMBER_LIST_UPDATE;
  static constexpr KsImDataUpdateType YOU_BE_KICKED =
    Cloud_Data_Update_KsImDataUpdateType_YOU_BE_KICKED;
  static constexpr KsImDataUpdateType MESSAGE_READ_EVENT =
    Cloud_Data_Update_KsImDataUpdateType_MESSAGE_READ_EVENT;
  static constexpr KsImDataUpdateType MESSAGE_RECEIPT_EVENT =
    Cloud_Data_Update_KsImDataUpdateType_MESSAGE_RECEIPT_EVENT;
  static inline bool KsImDataUpdateType_IsValid(int value) {
    return Cloud_Data_Update_KsImDataUpdateType_IsValid(value);
  }
  static constexpr KsImDataUpdateType KsImDataUpdateType_MIN =
    Cloud_Data_Update_KsImDataUpdateType_KsImDataUpdateType_MIN;
  static constexpr KsImDataUpdateType KsImDataUpdateType_MAX =
    Cloud_Data_Update_KsImDataUpdateType_KsImDataUpdateType_MAX;
  static constexpr int KsImDataUpdateType_ARRAYSIZE =
    Cloud_Data_Update_KsImDataUpdateType_KsImDataUpdateType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  KsImDataUpdateType_descriptor() {
    return Cloud_Data_Update_KsImDataUpdateType_descriptor();
  }
  template<typename T>
  static inline const std::string& KsImDataUpdateType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, KsImDataUpdateType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function KsImDataUpdateType_Name.");
    return Cloud_Data_Update_KsImDataUpdateType_Name(enum_t_value);
  }
  static inline bool KsImDataUpdateType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      KsImDataUpdateType* value) {
    return Cloud_Data_Update_KsImDataUpdateType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Data.Update)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Data PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Data) */ {
 public:
  inline Cloud_Data() : Cloud_Data(nullptr) {}
  virtual ~Cloud_Data();

  Cloud_Data(const Cloud_Data& from);
  Cloud_Data(Cloud_Data&& from) noexcept
    : Cloud_Data() {
    *this = ::std::move(from);
  }

  inline Cloud_Data& operator=(const Cloud_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Data& operator=(Cloud_Data&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Data& default_instance();

  static inline const Cloud_Data* internal_default_instance() {
    return reinterpret_cast<const Cloud_Data*>(
               &_Cloud_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    118;

  friend void swap(Cloud_Data& a, Cloud_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Data* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Data* New() const final {
    return CreateMaybeMessage<Cloud_Data>(nullptr);
  }

  Cloud_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Data& from);
  void MergeFrom(const Cloud_Data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Data";
  }
  protected:
  explicit Cloud_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Cloud_Data_Update Update;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_ImcRecalledMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.ImcRecalledMessage) */ {
 public:
  inline Cloud_Message_ImcRecalledMessage() : Cloud_Message_ImcRecalledMessage(nullptr) {}
  virtual ~Cloud_Message_ImcRecalledMessage();

  Cloud_Message_ImcRecalledMessage(const Cloud_Message_ImcRecalledMessage& from);
  Cloud_Message_ImcRecalledMessage(Cloud_Message_ImcRecalledMessage&& from) noexcept
    : Cloud_Message_ImcRecalledMessage() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_ImcRecalledMessage& operator=(const Cloud_Message_ImcRecalledMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_ImcRecalledMessage& operator=(Cloud_Message_ImcRecalledMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_ImcRecalledMessage& default_instance();

  static inline const Cloud_Message_ImcRecalledMessage* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_ImcRecalledMessage*>(
               &_Cloud_Message_ImcRecalledMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    119;

  friend void swap(Cloud_Message_ImcRecalledMessage& a, Cloud_Message_ImcRecalledMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_ImcRecalledMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_ImcRecalledMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_ImcRecalledMessage* New() const final {
    return CreateMaybeMessage<Cloud_Message_ImcRecalledMessage>(nullptr);
  }

  Cloud_Message_ImcRecalledMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_ImcRecalledMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_ImcRecalledMessage& from);
  void MergeFrom(const Cloud_Message_ImcRecalledMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_ImcRecalledMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.ImcRecalledMessage";
  }
  protected:
  explicit Cloud_Message_ImcRecalledMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOriginMsgFieldNumber = 1,
    kNoticeMsgFieldNumber = 2,
  };
  // .AcFunDanmu.Im.ImMessage.Message originMsg = 1;
  bool has_originmsg() const;
  private:
  bool _internal_has_originmsg() const;
  public:
  void clear_originmsg();
  const ::AcFunDanmu::Im::ImMessage_Message& originmsg() const;
  ::AcFunDanmu::Im::ImMessage_Message* release_originmsg();
  ::AcFunDanmu::Im::ImMessage_Message* mutable_originmsg();
  void set_allocated_originmsg(::AcFunDanmu::Im::ImMessage_Message* originmsg);
  private:
  const ::AcFunDanmu::Im::ImMessage_Message& _internal_originmsg() const;
  ::AcFunDanmu::Im::ImMessage_Message* _internal_mutable_originmsg();
  public:
  void unsafe_arena_set_allocated_originmsg(
      ::AcFunDanmu::Im::ImMessage_Message* originmsg);
  ::AcFunDanmu::Im::ImMessage_Message* unsafe_arena_release_originmsg();

  // .AcFunDanmu.Im.Cloud.Message.ImcNoticeMessage noticeMsg = 2;
  bool has_noticemsg() const;
  private:
  bool _internal_has_noticemsg() const;
  public:
  void clear_noticemsg();
  const ::AcFunDanmu::Im::Cloud_Message_ImcNoticeMessage& noticemsg() const;
  ::AcFunDanmu::Im::Cloud_Message_ImcNoticeMessage* release_noticemsg();
  ::AcFunDanmu::Im::Cloud_Message_ImcNoticeMessage* mutable_noticemsg();
  void set_allocated_noticemsg(::AcFunDanmu::Im::Cloud_Message_ImcNoticeMessage* noticemsg);
  private:
  const ::AcFunDanmu::Im::Cloud_Message_ImcNoticeMessage& _internal_noticemsg() const;
  ::AcFunDanmu::Im::Cloud_Message_ImcNoticeMessage* _internal_mutable_noticemsg();
  public:
  void unsafe_arena_set_allocated_noticemsg(
      ::AcFunDanmu::Im::Cloud_Message_ImcNoticeMessage* noticemsg);
  ::AcFunDanmu::Im::Cloud_Message_ImcNoticeMessage* unsafe_arena_release_noticemsg();

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.ImcRecalledMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::AcFunDanmu::Im::ImMessage_Message* originmsg_;
  ::AcFunDanmu::Im::Cloud_Message_ImcNoticeMessage* noticemsg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_ImcReplaceMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.ImcReplaceMessage) */ {
 public:
  inline Cloud_Message_ImcReplaceMessage() : Cloud_Message_ImcReplaceMessage(nullptr) {}
  virtual ~Cloud_Message_ImcReplaceMessage();

  Cloud_Message_ImcReplaceMessage(const Cloud_Message_ImcReplaceMessage& from);
  Cloud_Message_ImcReplaceMessage(Cloud_Message_ImcReplaceMessage&& from) noexcept
    : Cloud_Message_ImcReplaceMessage() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_ImcReplaceMessage& operator=(const Cloud_Message_ImcReplaceMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_ImcReplaceMessage& operator=(Cloud_Message_ImcReplaceMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_ImcReplaceMessage& default_instance();

  static inline const Cloud_Message_ImcReplaceMessage* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_ImcReplaceMessage*>(
               &_Cloud_Message_ImcReplaceMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    120;

  friend void swap(Cloud_Message_ImcReplaceMessage& a, Cloud_Message_ImcReplaceMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_ImcReplaceMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_ImcReplaceMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_ImcReplaceMessage* New() const final {
    return CreateMaybeMessage<Cloud_Message_ImcReplaceMessage>(nullptr);
  }

  Cloud_Message_ImcReplaceMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_ImcReplaceMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_ImcReplaceMessage& from);
  void MergeFrom(const Cloud_Message_ImcReplaceMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_ImcReplaceMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.ImcReplaceMessage";
  }
  protected:
  explicit Cloud_Message_ImcReplaceMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReplaceMsgFieldNumber = 1,
  };
  // .AcFunDanmu.Im.ImMessage.Message replaceMsg = 1;
  bool has_replacemsg() const;
  private:
  bool _internal_has_replacemsg() const;
  public:
  void clear_replacemsg();
  const ::AcFunDanmu::Im::ImMessage_Message& replacemsg() const;
  ::AcFunDanmu::Im::ImMessage_Message* release_replacemsg();
  ::AcFunDanmu::Im::ImMessage_Message* mutable_replacemsg();
  void set_allocated_replacemsg(::AcFunDanmu::Im::ImMessage_Message* replacemsg);
  private:
  const ::AcFunDanmu::Im::ImMessage_Message& _internal_replacemsg() const;
  ::AcFunDanmu::Im::ImMessage_Message* _internal_mutable_replacemsg();
  public:
  void unsafe_arena_set_allocated_replacemsg(
      ::AcFunDanmu::Im::ImMessage_Message* replacemsg);
  ::AcFunDanmu::Im::ImMessage_Message* unsafe_arena_release_replacemsg();

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.ImcReplaceMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::AcFunDanmu::Im::ImMessage_Message* replacemsg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_Text PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.Text) */ {
 public:
  inline Cloud_Message_Text() : Cloud_Message_Text(nullptr) {}
  virtual ~Cloud_Message_Text();

  Cloud_Message_Text(const Cloud_Message_Text& from);
  Cloud_Message_Text(Cloud_Message_Text&& from) noexcept
    : Cloud_Message_Text() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_Text& operator=(const Cloud_Message_Text& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_Text& operator=(Cloud_Message_Text&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_Text& default_instance();

  static inline const Cloud_Message_Text* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_Text*>(
               &_Cloud_Message_Text_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    121;

  friend void swap(Cloud_Message_Text& a, Cloud_Message_Text& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_Text* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_Text* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_Text* New() const final {
    return CreateMaybeMessage<Cloud_Message_Text>(nullptr);
  }

  Cloud_Message_Text* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_Text>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_Text& from);
  void MergeFrom(const Cloud_Message_Text& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_Text* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.Text";
  }
  protected:
  explicit Cloud_Message_Text(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
  };
  // string text = 1;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.Text)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_Image PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.Image) */ {
 public:
  inline Cloud_Message_Image() : Cloud_Message_Image(nullptr) {}
  virtual ~Cloud_Message_Image();

  Cloud_Message_Image(const Cloud_Message_Image& from);
  Cloud_Message_Image(Cloud_Message_Image&& from) noexcept
    : Cloud_Message_Image() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_Image& operator=(const Cloud_Message_Image& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_Image& operator=(Cloud_Message_Image&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_Image& default_instance();

  static inline const Cloud_Message_Image* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_Image*>(
               &_Cloud_Message_Image_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    122;

  friend void swap(Cloud_Message_Image& a, Cloud_Message_Image& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_Image* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_Image* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_Image* New() const final {
    return CreateMaybeMessage<Cloud_Message_Image>(nullptr);
  }

  Cloud_Message_Image* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_Image>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_Image& from);
  void MergeFrom(const Cloud_Message_Image& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_Image* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.Image";
  }
  protected:
  explicit Cloud_Message_Image(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUriFieldNumber = 1,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
  };
  // string uri = 1;
  void clear_uri();
  const std::string& uri() const;
  void set_uri(const std::string& value);
  void set_uri(std::string&& value);
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  std::string* mutable_uri();
  std::string* release_uri();
  void set_allocated_uri(std::string* uri);
  private:
  const std::string& _internal_uri() const;
  void _internal_set_uri(const std::string& value);
  std::string* _internal_mutable_uri();
  public:

  // int32 width = 2;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 height = 3;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.Image)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_Audio PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.Audio) */ {
 public:
  inline Cloud_Message_Audio() : Cloud_Message_Audio(nullptr) {}
  virtual ~Cloud_Message_Audio();

  Cloud_Message_Audio(const Cloud_Message_Audio& from);
  Cloud_Message_Audio(Cloud_Message_Audio&& from) noexcept
    : Cloud_Message_Audio() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_Audio& operator=(const Cloud_Message_Audio& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_Audio& operator=(Cloud_Message_Audio&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_Audio& default_instance();

  static inline const Cloud_Message_Audio* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_Audio*>(
               &_Cloud_Message_Audio_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    123;

  friend void swap(Cloud_Message_Audio& a, Cloud_Message_Audio& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_Audio* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_Audio* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_Audio* New() const final {
    return CreateMaybeMessage<Cloud_Message_Audio>(nullptr);
  }

  Cloud_Message_Audio* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_Audio>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_Audio& from);
  void MergeFrom(const Cloud_Message_Audio& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_Audio* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.Audio";
  }
  protected:
  explicit Cloud_Message_Audio(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUriFieldNumber = 1,
    kTypeFieldNumber = 3,
    kDurationFieldNumber = 2,
  };
  // string uri = 1;
  void clear_uri();
  const std::string& uri() const;
  void set_uri(const std::string& value);
  void set_uri(std::string&& value);
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  std::string* mutable_uri();
  std::string* release_uri();
  void set_allocated_uri(std::string* uri);
  private:
  const std::string& _internal_uri() const;
  void _internal_set_uri(const std::string& value);
  std::string* _internal_mutable_uri();
  public:

  // string type = 3;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // int32 duration = 2;
  void clear_duration();
  ::PROTOBUF_NAMESPACE_ID::int32 duration() const;
  void set_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_duration() const;
  void _internal_set_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.Audio)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::int32 duration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_Video PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.Video) */ {
 public:
  inline Cloud_Message_Video() : Cloud_Message_Video(nullptr) {}
  virtual ~Cloud_Message_Video();

  Cloud_Message_Video(const Cloud_Message_Video& from);
  Cloud_Message_Video(Cloud_Message_Video&& from) noexcept
    : Cloud_Message_Video() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_Video& operator=(const Cloud_Message_Video& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_Video& operator=(Cloud_Message_Video&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_Video& default_instance();

  static inline const Cloud_Message_Video* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_Video*>(
               &_Cloud_Message_Video_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    124;

  friend void swap(Cloud_Message_Video& a, Cloud_Message_Video& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_Video* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_Video* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_Video* New() const final {
    return CreateMaybeMessage<Cloud_Message_Video>(nullptr);
  }

  Cloud_Message_Video* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_Video>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_Video& from);
  void MergeFrom(const Cloud_Message_Video& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_Video* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.Video";
  }
  protected:
  explicit Cloud_Message_Video(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUriFieldNumber = 1,
    kCoverUriFieldNumber = 5,
    kTypeFieldNumber = 6,
    kDurationFieldNumber = 2,
    kWidthFieldNumber = 3,
    kHeightFieldNumber = 4,
  };
  // string uri = 1;
  void clear_uri();
  const std::string& uri() const;
  void set_uri(const std::string& value);
  void set_uri(std::string&& value);
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  std::string* mutable_uri();
  std::string* release_uri();
  void set_allocated_uri(std::string* uri);
  private:
  const std::string& _internal_uri() const;
  void _internal_set_uri(const std::string& value);
  std::string* _internal_mutable_uri();
  public:

  // string coverUri = 5;
  void clear_coveruri();
  const std::string& coveruri() const;
  void set_coveruri(const std::string& value);
  void set_coveruri(std::string&& value);
  void set_coveruri(const char* value);
  void set_coveruri(const char* value, size_t size);
  std::string* mutable_coveruri();
  std::string* release_coveruri();
  void set_allocated_coveruri(std::string* coveruri);
  private:
  const std::string& _internal_coveruri() const;
  void _internal_set_coveruri(const std::string& value);
  std::string* _internal_mutable_coveruri();
  public:

  // string type = 6;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // int32 duration = 2;
  void clear_duration();
  ::PROTOBUF_NAMESPACE_ID::int32 duration() const;
  void set_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_duration() const;
  void _internal_set_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 width = 3;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 height = 4;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.Video)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr coveruri_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::int32 duration_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_Custom PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.Custom) */ {
 public:
  inline Cloud_Message_Custom() : Cloud_Message_Custom(nullptr) {}
  virtual ~Cloud_Message_Custom();

  Cloud_Message_Custom(const Cloud_Message_Custom& from);
  Cloud_Message_Custom(Cloud_Message_Custom&& from) noexcept
    : Cloud_Message_Custom() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_Custom& operator=(const Cloud_Message_Custom& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_Custom& operator=(Cloud_Message_Custom&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_Custom& default_instance();

  static inline const Cloud_Message_Custom* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_Custom*>(
               &_Cloud_Message_Custom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    125;

  friend void swap(Cloud_Message_Custom& a, Cloud_Message_Custom& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_Custom* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_Custom* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_Custom* New() const final {
    return CreateMaybeMessage<Cloud_Message_Custom>(nullptr);
  }

  Cloud_Message_Custom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_Custom>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_Custom& from);
  void MergeFrom(const Cloud_Message_Custom& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_Custom* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.Custom";
  }
  protected:
  explicit Cloud_Message_Custom(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 1,
  };
  // string payload = 1;
  void clear_payload();
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const char* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.Custom)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_PicUrl PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.PicUrl) */ {
 public:
  inline Cloud_Message_PicUrl() : Cloud_Message_PicUrl(nullptr) {}
  virtual ~Cloud_Message_PicUrl();

  Cloud_Message_PicUrl(const Cloud_Message_PicUrl& from);
  Cloud_Message_PicUrl(Cloud_Message_PicUrl&& from) noexcept
    : Cloud_Message_PicUrl() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_PicUrl& operator=(const Cloud_Message_PicUrl& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_PicUrl& operator=(Cloud_Message_PicUrl&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_PicUrl& default_instance();

  static inline const Cloud_Message_PicUrl* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_PicUrl*>(
               &_Cloud_Message_PicUrl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    126;

  friend void swap(Cloud_Message_PicUrl& a, Cloud_Message_PicUrl& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_PicUrl* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_PicUrl* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_PicUrl* New() const final {
    return CreateMaybeMessage<Cloud_Message_PicUrl>(nullptr);
  }

  Cloud_Message_PicUrl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_PicUrl>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_PicUrl& from);
  void MergeFrom(const Cloud_Message_PicUrl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_PicUrl* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.PicUrl";
  }
  protected:
  explicit Cloud_Message_PicUrl(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCdnFieldNumber = 1,
    kUrlFieldNumber = 2,
    kUrlPatternFieldNumber = 3,
    kIpFieldNumber = 4,
  };
  // string cdn = 1;
  void clear_cdn();
  const std::string& cdn() const;
  void set_cdn(const std::string& value);
  void set_cdn(std::string&& value);
  void set_cdn(const char* value);
  void set_cdn(const char* value, size_t size);
  std::string* mutable_cdn();
  std::string* release_cdn();
  void set_allocated_cdn(std::string* cdn);
  private:
  const std::string& _internal_cdn() const;
  void _internal_set_cdn(const std::string& value);
  std::string* _internal_mutable_cdn();
  public:

  // string url = 2;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // string urlPattern = 3;
  void clear_urlpattern();
  const std::string& urlpattern() const;
  void set_urlpattern(const std::string& value);
  void set_urlpattern(std::string&& value);
  void set_urlpattern(const char* value);
  void set_urlpattern(const char* value, size_t size);
  std::string* mutable_urlpattern();
  std::string* release_urlpattern();
  void set_allocated_urlpattern(std::string* urlpattern);
  private:
  const std::string& _internal_urlpattern() const;
  void _internal_set_urlpattern(const std::string& value);
  std::string* _internal_mutable_urlpattern();
  public:

  // string ip = 4;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.PicUrl)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cdn_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr urlpattern_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_Emoticon_Code PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.Emoticon.Code) */ {
 public:
  inline Cloud_Message_Emoticon_Code() : Cloud_Message_Emoticon_Code(nullptr) {}
  virtual ~Cloud_Message_Emoticon_Code();

  Cloud_Message_Emoticon_Code(const Cloud_Message_Emoticon_Code& from);
  Cloud_Message_Emoticon_Code(Cloud_Message_Emoticon_Code&& from) noexcept
    : Cloud_Message_Emoticon_Code() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_Emoticon_Code& operator=(const Cloud_Message_Emoticon_Code& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_Emoticon_Code& operator=(Cloud_Message_Emoticon_Code&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_Emoticon_Code& default_instance();

  static inline const Cloud_Message_Emoticon_Code* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_Emoticon_Code*>(
               &_Cloud_Message_Emoticon_Code_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    127;

  friend void swap(Cloud_Message_Emoticon_Code& a, Cloud_Message_Emoticon_Code& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_Emoticon_Code* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_Emoticon_Code* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_Emoticon_Code* New() const final {
    return CreateMaybeMessage<Cloud_Message_Emoticon_Code>(nullptr);
  }

  Cloud_Message_Emoticon_Code* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_Emoticon_Code>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_Emoticon_Code& from);
  void MergeFrom(const Cloud_Message_Emoticon_Code& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_Emoticon_Code* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.Emoticon.Code";
  }
  protected:
  explicit Cloud_Message_Emoticon_Code(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 2,
    kLanguageFieldNumber = 1,
  };
  // repeated string code = 2;
  int code_size() const;
  private:
  int _internal_code_size() const;
  public:
  void clear_code();
  const std::string& code(int index) const;
  std::string* mutable_code(int index);
  void set_code(int index, const std::string& value);
  void set_code(int index, std::string&& value);
  void set_code(int index, const char* value);
  void set_code(int index, const char* value, size_t size);
  std::string* add_code();
  void add_code(const std::string& value);
  void add_code(std::string&& value);
  void add_code(const char* value);
  void add_code(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& code() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_code();
  private:
  const std::string& _internal_code(int index) const;
  std::string* _internal_add_code();
  public:

  // string language = 1;
  void clear_language();
  const std::string& language() const;
  void set_language(const std::string& value);
  void set_language(std::string&& value);
  void set_language(const char* value);
  void set_language(const char* value, size_t size);
  std::string* mutable_language();
  std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.Emoticon.Code)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_Emoticon PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.Emoticon) */ {
 public:
  inline Cloud_Message_Emoticon() : Cloud_Message_Emoticon(nullptr) {}
  virtual ~Cloud_Message_Emoticon();

  Cloud_Message_Emoticon(const Cloud_Message_Emoticon& from);
  Cloud_Message_Emoticon(Cloud_Message_Emoticon&& from) noexcept
    : Cloud_Message_Emoticon() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_Emoticon& operator=(const Cloud_Message_Emoticon& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_Emoticon& operator=(Cloud_Message_Emoticon&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_Emoticon& default_instance();

  static inline const Cloud_Message_Emoticon* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_Emoticon*>(
               &_Cloud_Message_Emoticon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    128;

  friend void swap(Cloud_Message_Emoticon& a, Cloud_Message_Emoticon& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_Emoticon* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_Emoticon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_Emoticon* New() const final {
    return CreateMaybeMessage<Cloud_Message_Emoticon>(nullptr);
  }

  Cloud_Message_Emoticon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_Emoticon>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_Emoticon& from);
  void MergeFrom(const Cloud_Message_Emoticon& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_Emoticon* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.Emoticon";
  }
  protected:
  explicit Cloud_Message_Emoticon(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Cloud_Message_Emoticon_Code Code;

  typedef Cloud_Message_Emoticon_Type Type;
  static constexpr Type UNKNOWN =
    Cloud_Message_Emoticon_Type_UNKNOWN;
  static constexpr Type BASIC =
    Cloud_Message_Emoticon_Type_BASIC;
  static constexpr Type IMAGE =
    Cloud_Message_Emoticon_Type_IMAGE;
  static constexpr Type GIF =
    Cloud_Message_Emoticon_Type_GIF;
  static constexpr Type SPECIAL_EFFECT =
    Cloud_Message_Emoticon_Type_SPECIAL_EFFECT;
  static constexpr Type SCRIPT =
    Cloud_Message_Emoticon_Type_SCRIPT;
  static inline bool Type_IsValid(int value) {
    return Cloud_Message_Emoticon_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Cloud_Message_Emoticon_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Cloud_Message_Emoticon_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Cloud_Message_Emoticon_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Cloud_Message_Emoticon_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Cloud_Message_Emoticon_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return Cloud_Message_Emoticon_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBigUrlFieldNumber = 5,
    kEmoticonCOdeFieldNumber = 8,
    kIdFieldNumber = 1,
    kPackageIdFieldNumber = 2,
    kNameFieldNumber = 3,
    kTypeFieldNumber = 4,
    kWidthFieldNumber = 6,
    kHeightFieldNumber = 7,
  };
  // repeated .AcFunDanmu.Im.Cloud.Message.PicUrl bigUrl = 5;
  int bigurl_size() const;
  private:
  int _internal_bigurl_size() const;
  public:
  void clear_bigurl();
  ::AcFunDanmu::Im::Cloud_Message_PicUrl* mutable_bigurl(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud_Message_PicUrl >*
      mutable_bigurl();
  private:
  const ::AcFunDanmu::Im::Cloud_Message_PicUrl& _internal_bigurl(int index) const;
  ::AcFunDanmu::Im::Cloud_Message_PicUrl* _internal_add_bigurl();
  public:
  const ::AcFunDanmu::Im::Cloud_Message_PicUrl& bigurl(int index) const;
  ::AcFunDanmu::Im::Cloud_Message_PicUrl* add_bigurl();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud_Message_PicUrl >&
      bigurl() const;

  // repeated .AcFunDanmu.Im.Cloud.Message.Emoticon.Code emoticonCOde = 8;
  int emoticoncode_size() const;
  private:
  int _internal_emoticoncode_size() const;
  public:
  void clear_emoticoncode();
  ::AcFunDanmu::Im::Cloud_Message_Emoticon_Code* mutable_emoticoncode(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud_Message_Emoticon_Code >*
      mutable_emoticoncode();
  private:
  const ::AcFunDanmu::Im::Cloud_Message_Emoticon_Code& _internal_emoticoncode(int index) const;
  ::AcFunDanmu::Im::Cloud_Message_Emoticon_Code* _internal_add_emoticoncode();
  public:
  const ::AcFunDanmu::Im::Cloud_Message_Emoticon_Code& emoticoncode(int index) const;
  ::AcFunDanmu::Im::Cloud_Message_Emoticon_Code* add_emoticoncode();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud_Message_Emoticon_Code >&
      emoticoncode() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string packageId = 2;
  void clear_packageid();
  const std::string& packageid() const;
  void set_packageid(const std::string& value);
  void set_packageid(std::string&& value);
  void set_packageid(const char* value);
  void set_packageid(const char* value, size_t size);
  std::string* mutable_packageid();
  std::string* release_packageid();
  void set_allocated_packageid(std::string* packageid);
  private:
  const std::string& _internal_packageid() const;
  void _internal_set_packageid(const std::string& value);
  std::string* _internal_mutable_packageid();
  public:

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .AcFunDanmu.Im.Cloud.Message.Emoticon.Type type = 4;
  void clear_type();
  ::AcFunDanmu::Im::Cloud_Message_Emoticon_Type type() const;
  void set_type(::AcFunDanmu::Im::Cloud_Message_Emoticon_Type value);
  private:
  ::AcFunDanmu::Im::Cloud_Message_Emoticon_Type _internal_type() const;
  void _internal_set_type(::AcFunDanmu::Im::Cloud_Message_Emoticon_Type value);
  public:

  // int32 width = 6;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 height = 7;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.Emoticon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud_Message_PicUrl > bigurl_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud_Message_Emoticon_Code > emoticoncode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr packageid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_File PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.File) */ {
 public:
  inline Cloud_Message_File() : Cloud_Message_File(nullptr) {}
  virtual ~Cloud_Message_File();

  Cloud_Message_File(const Cloud_Message_File& from);
  Cloud_Message_File(Cloud_Message_File&& from) noexcept
    : Cloud_Message_File() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_File& operator=(const Cloud_Message_File& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_File& operator=(Cloud_Message_File&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_File& default_instance();

  static inline const Cloud_Message_File* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_File*>(
               &_Cloud_Message_File_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    129;

  friend void swap(Cloud_Message_File& a, Cloud_Message_File& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_File* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_File* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_File* New() const final {
    return CreateMaybeMessage<Cloud_Message_File>(nullptr);
  }

  Cloud_Message_File* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_File>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_File& from);
  void MergeFrom(const Cloud_Message_File& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_File* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.File";
  }
  protected:
  explicit Cloud_Message_File(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUriFieldNumber = 1,
    kNameFieldNumber = 2,
    kExtFieldNumber = 3,
    kExtraFieldNumber = 4,
  };
  // string uri = 1;
  void clear_uri();
  const std::string& uri() const;
  void set_uri(const std::string& value);
  void set_uri(std::string&& value);
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  std::string* mutable_uri();
  std::string* release_uri();
  void set_allocated_uri(std::string* uri);
  private:
  const std::string& _internal_uri() const;
  void _internal_set_uri(const std::string& value);
  std::string* _internal_mutable_uri();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string ext = 3;
  void clear_ext();
  const std::string& ext() const;
  void set_ext(const std::string& value);
  void set_ext(std::string&& value);
  void set_ext(const char* value);
  void set_ext(const char* value, size_t size);
  std::string* mutable_ext();
  std::string* release_ext();
  void set_allocated_ext(std::string* ext);
  private:
  const std::string& _internal_ext() const;
  void _internal_set_ext(const std::string& value);
  std::string* _internal_mutable_ext();
  public:

  // string extra = 4;
  void clear_extra();
  const std::string& extra() const;
  void set_extra(const std::string& value);
  void set_extra(std::string&& value);
  void set_extra(const char* value);
  void set_extra(const char* value, size_t size);
  std::string* mutable_extra();
  std::string* release_extra();
  void set_allocated_extra(std::string* extra);
  private:
  const std::string& _internal_extra() const;
  void _internal_set_extra(const std::string& value);
  std::string* _internal_mutable_extra();
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.File)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ext_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extra_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_Reference_ReferenceMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.Reference.ReferenceMessage) */ {
 public:
  inline Cloud_Message_Reference_ReferenceMessage() : Cloud_Message_Reference_ReferenceMessage(nullptr) {}
  virtual ~Cloud_Message_Reference_ReferenceMessage();

  Cloud_Message_Reference_ReferenceMessage(const Cloud_Message_Reference_ReferenceMessage& from);
  Cloud_Message_Reference_ReferenceMessage(Cloud_Message_Reference_ReferenceMessage&& from) noexcept
    : Cloud_Message_Reference_ReferenceMessage() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_Reference_ReferenceMessage& operator=(const Cloud_Message_Reference_ReferenceMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_Reference_ReferenceMessage& operator=(Cloud_Message_Reference_ReferenceMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_Reference_ReferenceMessage& default_instance();

  static inline const Cloud_Message_Reference_ReferenceMessage* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_Reference_ReferenceMessage*>(
               &_Cloud_Message_Reference_ReferenceMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    130;

  friend void swap(Cloud_Message_Reference_ReferenceMessage& a, Cloud_Message_Reference_ReferenceMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_Reference_ReferenceMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_Reference_ReferenceMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_Reference_ReferenceMessage* New() const final {
    return CreateMaybeMessage<Cloud_Message_Reference_ReferenceMessage>(nullptr);
  }

  Cloud_Message_Reference_ReferenceMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_Reference_ReferenceMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_Reference_ReferenceMessage& from);
  void MergeFrom(const Cloud_Message_Reference_ReferenceMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_Reference_ReferenceMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.Reference.ReferenceMessage";
  }
  protected:
  explicit Cloud_Message_Reference_ReferenceMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 2,
    kContentTypeFieldNumber = 1,
  };
  // bytes content = 2;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // int32 contentType = 1;
  void clear_contenttype();
  ::PROTOBUF_NAMESPACE_ID::int32 contenttype() const;
  void set_contenttype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_contenttype() const;
  void _internal_set_contenttype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.Reference.ReferenceMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::int32 contenttype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_Reference PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.Reference) */ {
 public:
  inline Cloud_Message_Reference() : Cloud_Message_Reference(nullptr) {}
  virtual ~Cloud_Message_Reference();

  Cloud_Message_Reference(const Cloud_Message_Reference& from);
  Cloud_Message_Reference(Cloud_Message_Reference&& from) noexcept
    : Cloud_Message_Reference() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_Reference& operator=(const Cloud_Message_Reference& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_Reference& operator=(Cloud_Message_Reference&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_Reference& default_instance();

  static inline const Cloud_Message_Reference* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_Reference*>(
               &_Cloud_Message_Reference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    131;

  friend void swap(Cloud_Message_Reference& a, Cloud_Message_Reference& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_Reference* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_Reference* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_Reference* New() const final {
    return CreateMaybeMessage<Cloud_Message_Reference>(nullptr);
  }

  Cloud_Message_Reference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_Reference>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_Reference& from);
  void MergeFrom(const Cloud_Message_Reference& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_Reference* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.Reference";
  }
  protected:
  explicit Cloud_Message_Reference(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Cloud_Message_Reference_ReferenceMessage ReferenceMessage;

  // accessors -------------------------------------------------------

  enum : int {
    kOriginMsgFieldNumber = 1,
    kReferenceMsgFieldNumber = 2,
  };
  // .AcFunDanmu.Im.ImMessage.Message originMsg = 1;
  bool has_originmsg() const;
  private:
  bool _internal_has_originmsg() const;
  public:
  void clear_originmsg();
  const ::AcFunDanmu::Im::ImMessage_Message& originmsg() const;
  ::AcFunDanmu::Im::ImMessage_Message* release_originmsg();
  ::AcFunDanmu::Im::ImMessage_Message* mutable_originmsg();
  void set_allocated_originmsg(::AcFunDanmu::Im::ImMessage_Message* originmsg);
  private:
  const ::AcFunDanmu::Im::ImMessage_Message& _internal_originmsg() const;
  ::AcFunDanmu::Im::ImMessage_Message* _internal_mutable_originmsg();
  public:
  void unsafe_arena_set_allocated_originmsg(
      ::AcFunDanmu::Im::ImMessage_Message* originmsg);
  ::AcFunDanmu::Im::ImMessage_Message* unsafe_arena_release_originmsg();

  // .AcFunDanmu.Im.Cloud.Message.Reference.ReferenceMessage referenceMsg = 2;
  bool has_referencemsg() const;
  private:
  bool _internal_has_referencemsg() const;
  public:
  void clear_referencemsg();
  const ::AcFunDanmu::Im::Cloud_Message_Reference_ReferenceMessage& referencemsg() const;
  ::AcFunDanmu::Im::Cloud_Message_Reference_ReferenceMessage* release_referencemsg();
  ::AcFunDanmu::Im::Cloud_Message_Reference_ReferenceMessage* mutable_referencemsg();
  void set_allocated_referencemsg(::AcFunDanmu::Im::Cloud_Message_Reference_ReferenceMessage* referencemsg);
  private:
  const ::AcFunDanmu::Im::Cloud_Message_Reference_ReferenceMessage& _internal_referencemsg() const;
  ::AcFunDanmu::Im::Cloud_Message_Reference_ReferenceMessage* _internal_mutable_referencemsg();
  public:
  void unsafe_arena_set_allocated_referencemsg(
      ::AcFunDanmu::Im::Cloud_Message_Reference_ReferenceMessage* referencemsg);
  ::AcFunDanmu::Im::Cloud_Message_Reference_ReferenceMessage* unsafe_arena_release_referencemsg();

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.Reference)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::AcFunDanmu::Im::ImMessage_Message* originmsg_;
  ::AcFunDanmu::Im::Cloud_Message_Reference_ReferenceMessage* referencemsg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_ForwardMessageContent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.ForwardMessageContent) */ {
 public:
  inline Cloud_Message_ForwardMessageContent() : Cloud_Message_ForwardMessageContent(nullptr) {}
  virtual ~Cloud_Message_ForwardMessageContent();

  Cloud_Message_ForwardMessageContent(const Cloud_Message_ForwardMessageContent& from);
  Cloud_Message_ForwardMessageContent(Cloud_Message_ForwardMessageContent&& from) noexcept
    : Cloud_Message_ForwardMessageContent() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_ForwardMessageContent& operator=(const Cloud_Message_ForwardMessageContent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_ForwardMessageContent& operator=(Cloud_Message_ForwardMessageContent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_ForwardMessageContent& default_instance();

  static inline const Cloud_Message_ForwardMessageContent* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_ForwardMessageContent*>(
               &_Cloud_Message_ForwardMessageContent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    132;

  friend void swap(Cloud_Message_ForwardMessageContent& a, Cloud_Message_ForwardMessageContent& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_ForwardMessageContent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_ForwardMessageContent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_ForwardMessageContent* New() const final {
    return CreateMaybeMessage<Cloud_Message_ForwardMessageContent>(nullptr);
  }

  Cloud_Message_ForwardMessageContent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_ForwardMessageContent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_ForwardMessageContent& from);
  void MergeFrom(const Cloud_Message_ForwardMessageContent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_ForwardMessageContent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.ForwardMessageContent";
  }
  protected:
  explicit Cloud_Message_ForwardMessageContent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // repeated .AcFunDanmu.Im.ImMessage.Message message = 1;
  int message_size() const;
  private:
  int _internal_message_size() const;
  public:
  void clear_message();
  ::AcFunDanmu::Im::ImMessage_Message* mutable_message(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_Message >*
      mutable_message();
  private:
  const ::AcFunDanmu::Im::ImMessage_Message& _internal_message(int index) const;
  ::AcFunDanmu::Im::ImMessage_Message* _internal_add_message();
  public:
  const ::AcFunDanmu::Im::ImMessage_Message& message(int index) const;
  ::AcFunDanmu::Im::ImMessage_Message* add_message();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_Message >&
      message() const;

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.ForwardMessageContent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_Message > message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_NoticePlaceholderMeta PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.NoticePlaceholderMeta) */ {
 public:
  inline Cloud_Message_NoticePlaceholderMeta() : Cloud_Message_NoticePlaceholderMeta(nullptr) {}
  virtual ~Cloud_Message_NoticePlaceholderMeta();

  Cloud_Message_NoticePlaceholderMeta(const Cloud_Message_NoticePlaceholderMeta& from);
  Cloud_Message_NoticePlaceholderMeta(Cloud_Message_NoticePlaceholderMeta&& from) noexcept
    : Cloud_Message_NoticePlaceholderMeta() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_NoticePlaceholderMeta& operator=(const Cloud_Message_NoticePlaceholderMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_NoticePlaceholderMeta& operator=(Cloud_Message_NoticePlaceholderMeta&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_NoticePlaceholderMeta& default_instance();

  static inline const Cloud_Message_NoticePlaceholderMeta* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_NoticePlaceholderMeta*>(
               &_Cloud_Message_NoticePlaceholderMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    133;

  friend void swap(Cloud_Message_NoticePlaceholderMeta& a, Cloud_Message_NoticePlaceholderMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_NoticePlaceholderMeta* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_NoticePlaceholderMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_NoticePlaceholderMeta* New() const final {
    return CreateMaybeMessage<Cloud_Message_NoticePlaceholderMeta>(nullptr);
  }

  Cloud_Message_NoticePlaceholderMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_NoticePlaceholderMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_NoticePlaceholderMeta& from);
  void MergeFrom(const Cloud_Message_NoticePlaceholderMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_NoticePlaceholderMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.NoticePlaceholderMeta";
  }
  protected:
  explicit Cloud_Message_NoticePlaceholderMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetIdFieldNumber = 1,
    kStartIndexFieldNumber = 2,
    kLengthFieldNumber = 3,
  };
  // string targetId = 1;
  void clear_targetid();
  const std::string& targetid() const;
  void set_targetid(const std::string& value);
  void set_targetid(std::string&& value);
  void set_targetid(const char* value);
  void set_targetid(const char* value, size_t size);
  std::string* mutable_targetid();
  std::string* release_targetid();
  void set_allocated_targetid(std::string* targetid);
  private:
  const std::string& _internal_targetid() const;
  void _internal_set_targetid(const std::string& value);
  std::string* _internal_mutable_targetid();
  public:

  // int32 startIndex = 2;
  void clear_startindex();
  ::PROTOBUF_NAMESPACE_ID::int32 startindex() const;
  void set_startindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_startindex() const;
  void _internal_set_startindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 length = 3;
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::int32 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_length() const;
  void _internal_set_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.NoticePlaceholderMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr targetid_;
  ::PROTOBUF_NAMESPACE_ID::int32 startindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 length_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_ImcNoticeMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.ImcNoticeMessage) */ {
 public:
  inline Cloud_Message_ImcNoticeMessage() : Cloud_Message_ImcNoticeMessage(nullptr) {}
  virtual ~Cloud_Message_ImcNoticeMessage();

  Cloud_Message_ImcNoticeMessage(const Cloud_Message_ImcNoticeMessage& from);
  Cloud_Message_ImcNoticeMessage(Cloud_Message_ImcNoticeMessage&& from) noexcept
    : Cloud_Message_ImcNoticeMessage() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_ImcNoticeMessage& operator=(const Cloud_Message_ImcNoticeMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_ImcNoticeMessage& operator=(Cloud_Message_ImcNoticeMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_ImcNoticeMessage& default_instance();

  static inline const Cloud_Message_ImcNoticeMessage* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_ImcNoticeMessage*>(
               &_Cloud_Message_ImcNoticeMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    134;

  friend void swap(Cloud_Message_ImcNoticeMessage& a, Cloud_Message_ImcNoticeMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_ImcNoticeMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_ImcNoticeMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_ImcNoticeMessage* New() const final {
    return CreateMaybeMessage<Cloud_Message_ImcNoticeMessage>(nullptr);
  }

  Cloud_Message_ImcNoticeMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_ImcNoticeMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_ImcNoticeMessage& from);
  void MergeFrom(const Cloud_Message_ImcNoticeMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_ImcNoticeMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.ImcNoticeMessage";
  }
  protected:
  explicit Cloud_Message_ImcNoticeMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNoticePlaceholderMetaFieldNumber = 2,
    kTextFieldNumber = 1,
    kNoticeMetaInfoFieldNumber = 4,
    kNoticeMetaTypeFieldNumber = 3,
  };
  // repeated .AcFunDanmu.Im.Cloud.Message.NoticePlaceholderMeta noticePlaceholderMeta = 2;
  int noticeplaceholdermeta_size() const;
  private:
  int _internal_noticeplaceholdermeta_size() const;
  public:
  void clear_noticeplaceholdermeta();
  ::AcFunDanmu::Im::Cloud_Message_NoticePlaceholderMeta* mutable_noticeplaceholdermeta(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud_Message_NoticePlaceholderMeta >*
      mutable_noticeplaceholdermeta();
  private:
  const ::AcFunDanmu::Im::Cloud_Message_NoticePlaceholderMeta& _internal_noticeplaceholdermeta(int index) const;
  ::AcFunDanmu::Im::Cloud_Message_NoticePlaceholderMeta* _internal_add_noticeplaceholdermeta();
  public:
  const ::AcFunDanmu::Im::Cloud_Message_NoticePlaceholderMeta& noticeplaceholdermeta(int index) const;
  ::AcFunDanmu::Im::Cloud_Message_NoticePlaceholderMeta* add_noticeplaceholdermeta();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud_Message_NoticePlaceholderMeta >&
      noticeplaceholdermeta() const;

  // string text = 1;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // bytes noticeMetaInfo = 4;
  void clear_noticemetainfo();
  const std::string& noticemetainfo() const;
  void set_noticemetainfo(const std::string& value);
  void set_noticemetainfo(std::string&& value);
  void set_noticemetainfo(const char* value);
  void set_noticemetainfo(const void* value, size_t size);
  std::string* mutable_noticemetainfo();
  std::string* release_noticemetainfo();
  void set_allocated_noticemetainfo(std::string* noticemetainfo);
  private:
  const std::string& _internal_noticemetainfo() const;
  void _internal_set_noticemetainfo(const std::string& value);
  std::string* _internal_mutable_noticemetainfo();
  public:

  // int32 noticeMetaType = 3;
  void clear_noticemetatype();
  ::PROTOBUF_NAMESPACE_ID::int32 noticemetatype() const;
  void set_noticemetatype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_noticemetatype() const;
  void _internal_set_noticemetatype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.ImcNoticeMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud_Message_NoticePlaceholderMeta > noticeplaceholdermeta_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr noticemetainfo_;
  ::PROTOBUF_NAMESPACE_ID::int32 noticemetatype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_ConfirmInviteIntoGroupNoticeMetaInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.ConfirmInviteIntoGroupNoticeMetaInfo) */ {
 public:
  inline Cloud_Message_ConfirmInviteIntoGroupNoticeMetaInfo() : Cloud_Message_ConfirmInviteIntoGroupNoticeMetaInfo(nullptr) {}
  virtual ~Cloud_Message_ConfirmInviteIntoGroupNoticeMetaInfo();

  Cloud_Message_ConfirmInviteIntoGroupNoticeMetaInfo(const Cloud_Message_ConfirmInviteIntoGroupNoticeMetaInfo& from);
  Cloud_Message_ConfirmInviteIntoGroupNoticeMetaInfo(Cloud_Message_ConfirmInviteIntoGroupNoticeMetaInfo&& from) noexcept
    : Cloud_Message_ConfirmInviteIntoGroupNoticeMetaInfo() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_ConfirmInviteIntoGroupNoticeMetaInfo& operator=(const Cloud_Message_ConfirmInviteIntoGroupNoticeMetaInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_ConfirmInviteIntoGroupNoticeMetaInfo& operator=(Cloud_Message_ConfirmInviteIntoGroupNoticeMetaInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_ConfirmInviteIntoGroupNoticeMetaInfo& default_instance();

  static inline const Cloud_Message_ConfirmInviteIntoGroupNoticeMetaInfo* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_ConfirmInviteIntoGroupNoticeMetaInfo*>(
               &_Cloud_Message_ConfirmInviteIntoGroupNoticeMetaInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    135;

  friend void swap(Cloud_Message_ConfirmInviteIntoGroupNoticeMetaInfo& a, Cloud_Message_ConfirmInviteIntoGroupNoticeMetaInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_ConfirmInviteIntoGroupNoticeMetaInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_ConfirmInviteIntoGroupNoticeMetaInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_ConfirmInviteIntoGroupNoticeMetaInfo* New() const final {
    return CreateMaybeMessage<Cloud_Message_ConfirmInviteIntoGroupNoticeMetaInfo>(nullptr);
  }

  Cloud_Message_ConfirmInviteIntoGroupNoticeMetaInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_ConfirmInviteIntoGroupNoticeMetaInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_ConfirmInviteIntoGroupNoticeMetaInfo& from);
  void MergeFrom(const Cloud_Message_ConfirmInviteIntoGroupNoticeMetaInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_ConfirmInviteIntoGroupNoticeMetaInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.ConfirmInviteIntoGroupNoticeMetaInfo";
  }
  protected:
  explicit Cloud_Message_ConfirmInviteIntoGroupNoticeMetaInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 2,
    kRequestIdFieldNumber = 1,
    kStatusFieldNumber = 3,
  };
  // string groupId = 2;
  void clear_groupid();
  const std::string& groupid() const;
  void set_groupid(const std::string& value);
  void set_groupid(std::string&& value);
  void set_groupid(const char* value);
  void set_groupid(const char* value, size_t size);
  std::string* mutable_groupid();
  std::string* release_groupid();
  void set_allocated_groupid(std::string* groupid);
  private:
  const std::string& _internal_groupid() const;
  void _internal_set_groupid(const std::string& value);
  std::string* _internal_mutable_groupid();
  public:

  // int64 requestId = 1;
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::int64 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .AcFunDanmu.Im.Cloud.Message.JoinRequestStatus status = 3;
  void clear_status();
  ::AcFunDanmu::Im::Cloud_Message_JoinRequestStatus status() const;
  void set_status(::AcFunDanmu::Im::Cloud_Message_JoinRequestStatus value);
  private:
  ::AcFunDanmu::Im::Cloud_Message_JoinRequestStatus _internal_status() const;
  void _internal_set_status(::AcFunDanmu::Im::Cloud_Message_JoinRequestStatus value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.ConfirmInviteIntoGroupNoticeMetaInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupid_;
  ::PROTOBUF_NAMESPACE_ID::int64 requestid_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_ConfirmJoinIntoGroupNoticeMetaInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.ConfirmJoinIntoGroupNoticeMetaInfo) */ {
 public:
  inline Cloud_Message_ConfirmJoinIntoGroupNoticeMetaInfo() : Cloud_Message_ConfirmJoinIntoGroupNoticeMetaInfo(nullptr) {}
  virtual ~Cloud_Message_ConfirmJoinIntoGroupNoticeMetaInfo();

  Cloud_Message_ConfirmJoinIntoGroupNoticeMetaInfo(const Cloud_Message_ConfirmJoinIntoGroupNoticeMetaInfo& from);
  Cloud_Message_ConfirmJoinIntoGroupNoticeMetaInfo(Cloud_Message_ConfirmJoinIntoGroupNoticeMetaInfo&& from) noexcept
    : Cloud_Message_ConfirmJoinIntoGroupNoticeMetaInfo() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_ConfirmJoinIntoGroupNoticeMetaInfo& operator=(const Cloud_Message_ConfirmJoinIntoGroupNoticeMetaInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_ConfirmJoinIntoGroupNoticeMetaInfo& operator=(Cloud_Message_ConfirmJoinIntoGroupNoticeMetaInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_ConfirmJoinIntoGroupNoticeMetaInfo& default_instance();

  static inline const Cloud_Message_ConfirmJoinIntoGroupNoticeMetaInfo* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_ConfirmJoinIntoGroupNoticeMetaInfo*>(
               &_Cloud_Message_ConfirmJoinIntoGroupNoticeMetaInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    136;

  friend void swap(Cloud_Message_ConfirmJoinIntoGroupNoticeMetaInfo& a, Cloud_Message_ConfirmJoinIntoGroupNoticeMetaInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_ConfirmJoinIntoGroupNoticeMetaInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_ConfirmJoinIntoGroupNoticeMetaInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_ConfirmJoinIntoGroupNoticeMetaInfo* New() const final {
    return CreateMaybeMessage<Cloud_Message_ConfirmJoinIntoGroupNoticeMetaInfo>(nullptr);
  }

  Cloud_Message_ConfirmJoinIntoGroupNoticeMetaInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_ConfirmJoinIntoGroupNoticeMetaInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_ConfirmJoinIntoGroupNoticeMetaInfo& from);
  void MergeFrom(const Cloud_Message_ConfirmJoinIntoGroupNoticeMetaInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_ConfirmJoinIntoGroupNoticeMetaInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.ConfirmJoinIntoGroupNoticeMetaInfo";
  }
  protected:
  explicit Cloud_Message_ConfirmJoinIntoGroupNoticeMetaInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 2,
    kRequestIdFieldNumber = 1,
    kStatusFieldNumber = 3,
  };
  // string groupId = 2;
  void clear_groupid();
  const std::string& groupid() const;
  void set_groupid(const std::string& value);
  void set_groupid(std::string&& value);
  void set_groupid(const char* value);
  void set_groupid(const char* value, size_t size);
  std::string* mutable_groupid();
  std::string* release_groupid();
  void set_allocated_groupid(std::string* groupid);
  private:
  const std::string& _internal_groupid() const;
  void _internal_set_groupid(const std::string& value);
  std::string* _internal_mutable_groupid();
  public:

  // int64 requestId = 1;
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::int64 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .AcFunDanmu.Im.Cloud.Message.JoinRequestStatus status = 3;
  void clear_status();
  ::AcFunDanmu::Im::Cloud_Message_JoinRequestStatus status() const;
  void set_status(::AcFunDanmu::Im::Cloud_Message_JoinRequestStatus value);
  private:
  ::AcFunDanmu::Im::Cloud_Message_JoinRequestStatus _internal_status() const;
  void _internal_set_status(::AcFunDanmu::Im::Cloud_Message_JoinRequestStatus value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.ConfirmJoinIntoGroupNoticeMetaInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupid_;
  ::PROTOBUF_NAMESPACE_ID::int64 requestid_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_GroupCreateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.GroupCreateRequest) */ {
 public:
  inline Cloud_Message_GroupCreateRequest() : Cloud_Message_GroupCreateRequest(nullptr) {}
  virtual ~Cloud_Message_GroupCreateRequest();

  Cloud_Message_GroupCreateRequest(const Cloud_Message_GroupCreateRequest& from);
  Cloud_Message_GroupCreateRequest(Cloud_Message_GroupCreateRequest&& from) noexcept
    : Cloud_Message_GroupCreateRequest() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_GroupCreateRequest& operator=(const Cloud_Message_GroupCreateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_GroupCreateRequest& operator=(Cloud_Message_GroupCreateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_GroupCreateRequest& default_instance();

  static inline const Cloud_Message_GroupCreateRequest* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_GroupCreateRequest*>(
               &_Cloud_Message_GroupCreateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    137;

  friend void swap(Cloud_Message_GroupCreateRequest& a, Cloud_Message_GroupCreateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_GroupCreateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_GroupCreateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_GroupCreateRequest* New() const final {
    return CreateMaybeMessage<Cloud_Message_GroupCreateRequest>(nullptr);
  }

  Cloud_Message_GroupCreateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_GroupCreateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_GroupCreateRequest& from);
  void MergeFrom(const Cloud_Message_GroupCreateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_GroupCreateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.GroupCreateRequest";
  }
  protected:
  explicit Cloud_Message_GroupCreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 1,
  };
  // repeated .AcFunDanmu.Im.Basic.User members = 1;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  ::AcFunDanmu::Im::Basic_User* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_User >*
      mutable_members();
  private:
  const ::AcFunDanmu::Im::Basic_User& _internal_members(int index) const;
  ::AcFunDanmu::Im::Basic_User* _internal_add_members();
  public:
  const ::AcFunDanmu::Im::Basic_User& members(int index) const;
  ::AcFunDanmu::Im::Basic_User* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_User >&
      members() const;

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.GroupCreateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_User > members_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_GroupCreateReponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.GroupCreateReponse) */ {
 public:
  inline Cloud_Message_GroupCreateReponse() : Cloud_Message_GroupCreateReponse(nullptr) {}
  virtual ~Cloud_Message_GroupCreateReponse();

  Cloud_Message_GroupCreateReponse(const Cloud_Message_GroupCreateReponse& from);
  Cloud_Message_GroupCreateReponse(Cloud_Message_GroupCreateReponse&& from) noexcept
    : Cloud_Message_GroupCreateReponse() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_GroupCreateReponse& operator=(const Cloud_Message_GroupCreateReponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_GroupCreateReponse& operator=(Cloud_Message_GroupCreateReponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_GroupCreateReponse& default_instance();

  static inline const Cloud_Message_GroupCreateReponse* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_GroupCreateReponse*>(
               &_Cloud_Message_GroupCreateReponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    138;

  friend void swap(Cloud_Message_GroupCreateReponse& a, Cloud_Message_GroupCreateReponse& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_GroupCreateReponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_GroupCreateReponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_GroupCreateReponse* New() const final {
    return CreateMaybeMessage<Cloud_Message_GroupCreateReponse>(nullptr);
  }

  Cloud_Message_GroupCreateReponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_GroupCreateReponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_GroupCreateReponse& from);
  void MergeFrom(const Cloud_Message_GroupCreateReponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_GroupCreateReponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.GroupCreateReponse";
  }
  protected:
  explicit Cloud_Message_GroupCreateReponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 3,
    kGroupIdFieldNumber = 1,
    kGroupInfoFieldNumber = 2,
  };
  // repeated .AcFunDanmu.Im.Cloud.Message.GroupMember members = 3;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  ::AcFunDanmu::Im::Cloud_Message_GroupMember* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud_Message_GroupMember >*
      mutable_members();
  private:
  const ::AcFunDanmu::Im::Cloud_Message_GroupMember& _internal_members(int index) const;
  ::AcFunDanmu::Im::Cloud_Message_GroupMember* _internal_add_members();
  public:
  const ::AcFunDanmu::Im::Cloud_Message_GroupMember& members(int index) const;
  ::AcFunDanmu::Im::Cloud_Message_GroupMember* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud_Message_GroupMember >&
      members() const;

  // string groupId = 1;
  void clear_groupid();
  const std::string& groupid() const;
  void set_groupid(const std::string& value);
  void set_groupid(std::string&& value);
  void set_groupid(const char* value);
  void set_groupid(const char* value, size_t size);
  std::string* mutable_groupid();
  std::string* release_groupid();
  void set_allocated_groupid(std::string* groupid);
  private:
  const std::string& _internal_groupid() const;
  void _internal_set_groupid(const std::string& value);
  std::string* _internal_mutable_groupid();
  public:

  // .AcFunDanmu.Im.Cloud.Message.GroupInfo groupInfo = 2;
  bool has_groupinfo() const;
  private:
  bool _internal_has_groupinfo() const;
  public:
  void clear_groupinfo();
  const ::AcFunDanmu::Im::Cloud_Message_GroupInfo& groupinfo() const;
  ::AcFunDanmu::Im::Cloud_Message_GroupInfo* release_groupinfo();
  ::AcFunDanmu::Im::Cloud_Message_GroupInfo* mutable_groupinfo();
  void set_allocated_groupinfo(::AcFunDanmu::Im::Cloud_Message_GroupInfo* groupinfo);
  private:
  const ::AcFunDanmu::Im::Cloud_Message_GroupInfo& _internal_groupinfo() const;
  ::AcFunDanmu::Im::Cloud_Message_GroupInfo* _internal_mutable_groupinfo();
  public:
  void unsafe_arena_set_allocated_groupinfo(
      ::AcFunDanmu::Im::Cloud_Message_GroupInfo* groupinfo);
  ::AcFunDanmu::Im::Cloud_Message_GroupInfo* unsafe_arena_release_groupinfo();

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.GroupCreateReponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud_Message_GroupMember > members_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupid_;
  ::AcFunDanmu::Im::Cloud_Message_GroupInfo* groupinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_GroupDeleteRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.GroupDeleteRequest) */ {
 public:
  inline Cloud_Message_GroupDeleteRequest() : Cloud_Message_GroupDeleteRequest(nullptr) {}
  virtual ~Cloud_Message_GroupDeleteRequest();

  Cloud_Message_GroupDeleteRequest(const Cloud_Message_GroupDeleteRequest& from);
  Cloud_Message_GroupDeleteRequest(Cloud_Message_GroupDeleteRequest&& from) noexcept
    : Cloud_Message_GroupDeleteRequest() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_GroupDeleteRequest& operator=(const Cloud_Message_GroupDeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_GroupDeleteRequest& operator=(Cloud_Message_GroupDeleteRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_GroupDeleteRequest& default_instance();

  static inline const Cloud_Message_GroupDeleteRequest* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_GroupDeleteRequest*>(
               &_Cloud_Message_GroupDeleteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    139;

  friend void swap(Cloud_Message_GroupDeleteRequest& a, Cloud_Message_GroupDeleteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_GroupDeleteRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_GroupDeleteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_GroupDeleteRequest* New() const final {
    return CreateMaybeMessage<Cloud_Message_GroupDeleteRequest>(nullptr);
  }

  Cloud_Message_GroupDeleteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_GroupDeleteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_GroupDeleteRequest& from);
  void MergeFrom(const Cloud_Message_GroupDeleteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_GroupDeleteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.GroupDeleteRequest";
  }
  protected:
  explicit Cloud_Message_GroupDeleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
  };
  // string groupId = 1;
  void clear_groupid();
  const std::string& groupid() const;
  void set_groupid(const std::string& value);
  void set_groupid(std::string&& value);
  void set_groupid(const char* value);
  void set_groupid(const char* value, size_t size);
  std::string* mutable_groupid();
  std::string* release_groupid();
  void set_allocated_groupid(std::string* groupid);
  private:
  const std::string& _internal_groupid() const;
  void _internal_set_groupid(const std::string& value);
  std::string* _internal_mutable_groupid();
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.GroupDeleteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_GroupDeleteResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.GroupDeleteResponse) */ {
 public:
  inline Cloud_Message_GroupDeleteResponse() : Cloud_Message_GroupDeleteResponse(nullptr) {}
  virtual ~Cloud_Message_GroupDeleteResponse();

  Cloud_Message_GroupDeleteResponse(const Cloud_Message_GroupDeleteResponse& from);
  Cloud_Message_GroupDeleteResponse(Cloud_Message_GroupDeleteResponse&& from) noexcept
    : Cloud_Message_GroupDeleteResponse() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_GroupDeleteResponse& operator=(const Cloud_Message_GroupDeleteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_GroupDeleteResponse& operator=(Cloud_Message_GroupDeleteResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_GroupDeleteResponse& default_instance();

  static inline const Cloud_Message_GroupDeleteResponse* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_GroupDeleteResponse*>(
               &_Cloud_Message_GroupDeleteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    140;

  friend void swap(Cloud_Message_GroupDeleteResponse& a, Cloud_Message_GroupDeleteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_GroupDeleteResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_GroupDeleteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_GroupDeleteResponse* New() const final {
    return CreateMaybeMessage<Cloud_Message_GroupDeleteResponse>(nullptr);
  }

  Cloud_Message_GroupDeleteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_GroupDeleteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_GroupDeleteResponse& from);
  void MergeFrom(const Cloud_Message_GroupDeleteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_GroupDeleteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.GroupDeleteResponse";
  }
  protected:
  explicit Cloud_Message_GroupDeleteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.GroupDeleteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_GroupInviteRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.GroupInviteRequest) */ {
 public:
  inline Cloud_Message_GroupInviteRequest() : Cloud_Message_GroupInviteRequest(nullptr) {}
  virtual ~Cloud_Message_GroupInviteRequest();

  Cloud_Message_GroupInviteRequest(const Cloud_Message_GroupInviteRequest& from);
  Cloud_Message_GroupInviteRequest(Cloud_Message_GroupInviteRequest&& from) noexcept
    : Cloud_Message_GroupInviteRequest() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_GroupInviteRequest& operator=(const Cloud_Message_GroupInviteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_GroupInviteRequest& operator=(Cloud_Message_GroupInviteRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_GroupInviteRequest& default_instance();

  static inline const Cloud_Message_GroupInviteRequest* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_GroupInviteRequest*>(
               &_Cloud_Message_GroupInviteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    141;

  friend void swap(Cloud_Message_GroupInviteRequest& a, Cloud_Message_GroupInviteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_GroupInviteRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_GroupInviteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_GroupInviteRequest* New() const final {
    return CreateMaybeMessage<Cloud_Message_GroupInviteRequest>(nullptr);
  }

  Cloud_Message_GroupInviteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_GroupInviteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_GroupInviteRequest& from);
  void MergeFrom(const Cloud_Message_GroupInviteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_GroupInviteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.GroupInviteRequest";
  }
  protected:
  explicit Cloud_Message_GroupInviteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 2,
    kGroupIdFieldNumber = 1,
    kDescContentFieldNumber = 3,
  };
  // repeated .AcFunDanmu.Im.Basic.User members = 2;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  ::AcFunDanmu::Im::Basic_User* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_User >*
      mutable_members();
  private:
  const ::AcFunDanmu::Im::Basic_User& _internal_members(int index) const;
  ::AcFunDanmu::Im::Basic_User* _internal_add_members();
  public:
  const ::AcFunDanmu::Im::Basic_User& members(int index) const;
  ::AcFunDanmu::Im::Basic_User* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_User >&
      members() const;

  // string groupId = 1;
  void clear_groupid();
  const std::string& groupid() const;
  void set_groupid(const std::string& value);
  void set_groupid(std::string&& value);
  void set_groupid(const char* value);
  void set_groupid(const char* value, size_t size);
  std::string* mutable_groupid();
  std::string* release_groupid();
  void set_allocated_groupid(std::string* groupid);
  private:
  const std::string& _internal_groupid() const;
  void _internal_set_groupid(const std::string& value);
  std::string* _internal_mutable_groupid();
  public:

  // string descContent = 3;
  void clear_desccontent();
  const std::string& desccontent() const;
  void set_desccontent(const std::string& value);
  void set_desccontent(std::string&& value);
  void set_desccontent(const char* value);
  void set_desccontent(const char* value, size_t size);
  std::string* mutable_desccontent();
  std::string* release_desccontent();
  void set_allocated_desccontent(std::string* desccontent);
  private:
  const std::string& _internal_desccontent() const;
  void _internal_set_desccontent(const std::string& value);
  std::string* _internal_mutable_desccontent();
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.GroupInviteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_User > members_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desccontent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_GroupInvideResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.GroupInvideResponse) */ {
 public:
  inline Cloud_Message_GroupInvideResponse() : Cloud_Message_GroupInvideResponse(nullptr) {}
  virtual ~Cloud_Message_GroupInvideResponse();

  Cloud_Message_GroupInvideResponse(const Cloud_Message_GroupInvideResponse& from);
  Cloud_Message_GroupInvideResponse(Cloud_Message_GroupInvideResponse&& from) noexcept
    : Cloud_Message_GroupInvideResponse() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_GroupInvideResponse& operator=(const Cloud_Message_GroupInvideResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_GroupInvideResponse& operator=(Cloud_Message_GroupInvideResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_GroupInvideResponse& default_instance();

  static inline const Cloud_Message_GroupInvideResponse* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_GroupInvideResponse*>(
               &_Cloud_Message_GroupInvideResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    142;

  friend void swap(Cloud_Message_GroupInvideResponse& a, Cloud_Message_GroupInvideResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_GroupInvideResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_GroupInvideResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_GroupInvideResponse* New() const final {
    return CreateMaybeMessage<Cloud_Message_GroupInvideResponse>(nullptr);
  }

  Cloud_Message_GroupInvideResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_GroupInvideResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_GroupInvideResponse& from);
  void MergeFrom(const Cloud_Message_GroupInvideResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_GroupInvideResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.GroupInvideResponse";
  }
  protected:
  explicit Cloud_Message_GroupInvideResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Cloud_Message_GroupInvideResponse_InviteStatus InviteStatus;
  static constexpr InviteStatus UNKNOWN_STATUS =
    Cloud_Message_GroupInvideResponse_InviteStatus_UNKNOWN_STATUS;
  static constexpr InviteStatus SUCC =
    Cloud_Message_GroupInvideResponse_InviteStatus_SUCC;
  static constexpr InviteStatus PENDING =
    Cloud_Message_GroupInvideResponse_InviteStatus_PENDING;
  static inline bool InviteStatus_IsValid(int value) {
    return Cloud_Message_GroupInvideResponse_InviteStatus_IsValid(value);
  }
  static constexpr InviteStatus InviteStatus_MIN =
    Cloud_Message_GroupInvideResponse_InviteStatus_InviteStatus_MIN;
  static constexpr InviteStatus InviteStatus_MAX =
    Cloud_Message_GroupInvideResponse_InviteStatus_InviteStatus_MAX;
  static constexpr int InviteStatus_ARRAYSIZE =
    Cloud_Message_GroupInvideResponse_InviteStatus_InviteStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  InviteStatus_descriptor() {
    return Cloud_Message_GroupInvideResponse_InviteStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& InviteStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, InviteStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function InviteStatus_Name.");
    return Cloud_Message_GroupInvideResponse_InviteStatus_Name(enum_t_value);
  }
  static inline bool InviteStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      InviteStatus* value) {
    return Cloud_Message_GroupInvideResponse_InviteStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kInviteStatusFieldNumber = 2,
  };
  // string groupId = 1;
  void clear_groupid();
  const std::string& groupid() const;
  void set_groupid(const std::string& value);
  void set_groupid(std::string&& value);
  void set_groupid(const char* value);
  void set_groupid(const char* value, size_t size);
  std::string* mutable_groupid();
  std::string* release_groupid();
  void set_allocated_groupid(std::string* groupid);
  private:
  const std::string& _internal_groupid() const;
  void _internal_set_groupid(const std::string& value);
  std::string* _internal_mutable_groupid();
  public:

  // .AcFunDanmu.Im.Cloud.Message.GroupInvideResponse.InviteStatus inviteStatus = 2;
  void clear_invitestatus();
  ::AcFunDanmu::Im::Cloud_Message_GroupInvideResponse_InviteStatus invitestatus() const;
  void set_invitestatus(::AcFunDanmu::Im::Cloud_Message_GroupInvideResponse_InviteStatus value);
  private:
  ::AcFunDanmu::Im::Cloud_Message_GroupInvideResponse_InviteStatus _internal_invitestatus() const;
  void _internal_set_invitestatus(::AcFunDanmu::Im::Cloud_Message_GroupInvideResponse_InviteStatus value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.GroupInvideResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupid_;
  int invitestatus_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_GroupJoinRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.GroupJoinRequest) */ {
 public:
  inline Cloud_Message_GroupJoinRequest() : Cloud_Message_GroupJoinRequest(nullptr) {}
  virtual ~Cloud_Message_GroupJoinRequest();

  Cloud_Message_GroupJoinRequest(const Cloud_Message_GroupJoinRequest& from);
  Cloud_Message_GroupJoinRequest(Cloud_Message_GroupJoinRequest&& from) noexcept
    : Cloud_Message_GroupJoinRequest() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_GroupJoinRequest& operator=(const Cloud_Message_GroupJoinRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_GroupJoinRequest& operator=(Cloud_Message_GroupJoinRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_GroupJoinRequest& default_instance();

  static inline const Cloud_Message_GroupJoinRequest* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_GroupJoinRequest*>(
               &_Cloud_Message_GroupJoinRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    143;

  friend void swap(Cloud_Message_GroupJoinRequest& a, Cloud_Message_GroupJoinRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_GroupJoinRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_GroupJoinRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_GroupJoinRequest* New() const final {
    return CreateMaybeMessage<Cloud_Message_GroupJoinRequest>(nullptr);
  }

  Cloud_Message_GroupJoinRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_GroupJoinRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_GroupJoinRequest& from);
  void MergeFrom(const Cloud_Message_GroupJoinRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_GroupJoinRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.GroupJoinRequest";
  }
  protected:
  explicit Cloud_Message_GroupJoinRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kDescContentFieldNumber = 3,
    kInviterFieldNumber = 2,
    kFindTypeFieldNumber = 4,
  };
  // string groupId = 1;
  void clear_groupid();
  const std::string& groupid() const;
  void set_groupid(const std::string& value);
  void set_groupid(std::string&& value);
  void set_groupid(const char* value);
  void set_groupid(const char* value, size_t size);
  std::string* mutable_groupid();
  std::string* release_groupid();
  void set_allocated_groupid(std::string* groupid);
  private:
  const std::string& _internal_groupid() const;
  void _internal_set_groupid(const std::string& value);
  std::string* _internal_mutable_groupid();
  public:

  // string descContent = 3;
  void clear_desccontent();
  const std::string& desccontent() const;
  void set_desccontent(const std::string& value);
  void set_desccontent(std::string&& value);
  void set_desccontent(const char* value);
  void set_desccontent(const char* value, size_t size);
  std::string* mutable_desccontent();
  std::string* release_desccontent();
  void set_allocated_desccontent(std::string* desccontent);
  private:
  const std::string& _internal_desccontent() const;
  void _internal_set_desccontent(const std::string& value);
  std::string* _internal_mutable_desccontent();
  public:

  // .AcFunDanmu.Im.Basic.User inviter = 2;
  bool has_inviter() const;
  private:
  bool _internal_has_inviter() const;
  public:
  void clear_inviter();
  const ::AcFunDanmu::Im::Basic_User& inviter() const;
  ::AcFunDanmu::Im::Basic_User* release_inviter();
  ::AcFunDanmu::Im::Basic_User* mutable_inviter();
  void set_allocated_inviter(::AcFunDanmu::Im::Basic_User* inviter);
  private:
  const ::AcFunDanmu::Im::Basic_User& _internal_inviter() const;
  ::AcFunDanmu::Im::Basic_User* _internal_mutable_inviter();
  public:
  void unsafe_arena_set_allocated_inviter(
      ::AcFunDanmu::Im::Basic_User* inviter);
  ::AcFunDanmu::Im::Basic_User* unsafe_arena_release_inviter();

  // .AcFunDanmu.Im.Cloud.Message.GroupFindType findType = 4;
  void clear_findtype();
  ::AcFunDanmu::Im::Cloud_Message_GroupFindType findtype() const;
  void set_findtype(::AcFunDanmu::Im::Cloud_Message_GroupFindType value);
  private:
  ::AcFunDanmu::Im::Cloud_Message_GroupFindType _internal_findtype() const;
  void _internal_set_findtype(::AcFunDanmu::Im::Cloud_Message_GroupFindType value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.GroupJoinRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desccontent_;
  ::AcFunDanmu::Im::Basic_User* inviter_;
  int findtype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_GroupJoinResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.GroupJoinResponse) */ {
 public:
  inline Cloud_Message_GroupJoinResponse() : Cloud_Message_GroupJoinResponse(nullptr) {}
  virtual ~Cloud_Message_GroupJoinResponse();

  Cloud_Message_GroupJoinResponse(const Cloud_Message_GroupJoinResponse& from);
  Cloud_Message_GroupJoinResponse(Cloud_Message_GroupJoinResponse&& from) noexcept
    : Cloud_Message_GroupJoinResponse() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_GroupJoinResponse& operator=(const Cloud_Message_GroupJoinResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_GroupJoinResponse& operator=(Cloud_Message_GroupJoinResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_GroupJoinResponse& default_instance();

  static inline const Cloud_Message_GroupJoinResponse* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_GroupJoinResponse*>(
               &_Cloud_Message_GroupJoinResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    144;

  friend void swap(Cloud_Message_GroupJoinResponse& a, Cloud_Message_GroupJoinResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_GroupJoinResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_GroupJoinResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_GroupJoinResponse* New() const final {
    return CreateMaybeMessage<Cloud_Message_GroupJoinResponse>(nullptr);
  }

  Cloud_Message_GroupJoinResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_GroupJoinResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_GroupJoinResponse& from);
  void MergeFrom(const Cloud_Message_GroupJoinResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_GroupJoinResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.GroupJoinResponse";
  }
  protected:
  explicit Cloud_Message_GroupJoinResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Cloud_Message_GroupJoinResponse_JoinStatus JoinStatus;
  static constexpr JoinStatus UNKNOWN_STATUS =
    Cloud_Message_GroupJoinResponse_JoinStatus_UNKNOWN_STATUS;
  static constexpr JoinStatus SUCC =
    Cloud_Message_GroupJoinResponse_JoinStatus_SUCC;
  static constexpr JoinStatus PENDING =
    Cloud_Message_GroupJoinResponse_JoinStatus_PENDING;
  static inline bool JoinStatus_IsValid(int value) {
    return Cloud_Message_GroupJoinResponse_JoinStatus_IsValid(value);
  }
  static constexpr JoinStatus JoinStatus_MIN =
    Cloud_Message_GroupJoinResponse_JoinStatus_JoinStatus_MIN;
  static constexpr JoinStatus JoinStatus_MAX =
    Cloud_Message_GroupJoinResponse_JoinStatus_JoinStatus_MAX;
  static constexpr int JoinStatus_ARRAYSIZE =
    Cloud_Message_GroupJoinResponse_JoinStatus_JoinStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  JoinStatus_descriptor() {
    return Cloud_Message_GroupJoinResponse_JoinStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& JoinStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, JoinStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function JoinStatus_Name.");
    return Cloud_Message_GroupJoinResponse_JoinStatus_Name(enum_t_value);
  }
  static inline bool JoinStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      JoinStatus* value) {
    return Cloud_Message_GroupJoinResponse_JoinStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kJoinStatusFieldNumber = 1,
  };
  // .AcFunDanmu.Im.Cloud.Message.GroupJoinResponse.JoinStatus joinStatus = 1;
  void clear_joinstatus();
  ::AcFunDanmu::Im::Cloud_Message_GroupJoinResponse_JoinStatus joinstatus() const;
  void set_joinstatus(::AcFunDanmu::Im::Cloud_Message_GroupJoinResponse_JoinStatus value);
  private:
  ::AcFunDanmu::Im::Cloud_Message_GroupJoinResponse_JoinStatus _internal_joinstatus() const;
  void _internal_set_joinstatus(::AcFunDanmu::Im::Cloud_Message_GroupJoinResponse_JoinStatus value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.GroupJoinResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int joinstatus_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_GroupJoinRequestAckRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestAckRequest) */ {
 public:
  inline Cloud_Message_GroupJoinRequestAckRequest() : Cloud_Message_GroupJoinRequestAckRequest(nullptr) {}
  virtual ~Cloud_Message_GroupJoinRequestAckRequest();

  Cloud_Message_GroupJoinRequestAckRequest(const Cloud_Message_GroupJoinRequestAckRequest& from);
  Cloud_Message_GroupJoinRequestAckRequest(Cloud_Message_GroupJoinRequestAckRequest&& from) noexcept
    : Cloud_Message_GroupJoinRequestAckRequest() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_GroupJoinRequestAckRequest& operator=(const Cloud_Message_GroupJoinRequestAckRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_GroupJoinRequestAckRequest& operator=(Cloud_Message_GroupJoinRequestAckRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_GroupJoinRequestAckRequest& default_instance();

  static inline const Cloud_Message_GroupJoinRequestAckRequest* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_GroupJoinRequestAckRequest*>(
               &_Cloud_Message_GroupJoinRequestAckRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    145;

  friend void swap(Cloud_Message_GroupJoinRequestAckRequest& a, Cloud_Message_GroupJoinRequestAckRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_GroupJoinRequestAckRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_GroupJoinRequestAckRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_GroupJoinRequestAckRequest* New() const final {
    return CreateMaybeMessage<Cloud_Message_GroupJoinRequestAckRequest>(nullptr);
  }

  Cloud_Message_GroupJoinRequestAckRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_GroupJoinRequestAckRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_GroupJoinRequestAckRequest& from);
  void MergeFrom(const Cloud_Message_GroupJoinRequestAckRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_GroupJoinRequestAckRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.GroupJoinRequestAckRequest";
  }
  protected:
  explicit Cloud_Message_GroupJoinRequestAckRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Cloud_Message_GroupJoinRequestAckRequest_GroupJoinAckType GroupJoinAckType;
  static constexpr GroupJoinAckType UNKNOWN_TYPE =
    Cloud_Message_GroupJoinRequestAckRequest_GroupJoinAckType_UNKNOWN_TYPE;
  static constexpr GroupJoinAckType AGREE =
    Cloud_Message_GroupJoinRequestAckRequest_GroupJoinAckType_AGREE;
  static constexpr GroupJoinAckType REFUSE =
    Cloud_Message_GroupJoinRequestAckRequest_GroupJoinAckType_REFUSE;
  static constexpr GroupJoinAckType IGNORE =
    Cloud_Message_GroupJoinRequestAckRequest_GroupJoinAckType_IGNORE;
  static inline bool GroupJoinAckType_IsValid(int value) {
    return Cloud_Message_GroupJoinRequestAckRequest_GroupJoinAckType_IsValid(value);
  }
  static constexpr GroupJoinAckType GroupJoinAckType_MIN =
    Cloud_Message_GroupJoinRequestAckRequest_GroupJoinAckType_GroupJoinAckType_MIN;
  static constexpr GroupJoinAckType GroupJoinAckType_MAX =
    Cloud_Message_GroupJoinRequestAckRequest_GroupJoinAckType_GroupJoinAckType_MAX;
  static constexpr int GroupJoinAckType_ARRAYSIZE =
    Cloud_Message_GroupJoinRequestAckRequest_GroupJoinAckType_GroupJoinAckType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  GroupJoinAckType_descriptor() {
    return Cloud_Message_GroupJoinRequestAckRequest_GroupJoinAckType_descriptor();
  }
  template<typename T>
  static inline const std::string& GroupJoinAckType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, GroupJoinAckType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function GroupJoinAckType_Name.");
    return Cloud_Message_GroupJoinRequestAckRequest_GroupJoinAckType_Name(enum_t_value);
  }
  static inline bool GroupJoinAckType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      GroupJoinAckType* value) {
    return Cloud_Message_GroupJoinRequestAckRequest_GroupJoinAckType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 2,
    kReqIdFieldNumber = 1,
    kGroupJoinAckTypeFieldNumber = 3,
  };
  // string groupId = 2;
  void clear_groupid();
  const std::string& groupid() const;
  void set_groupid(const std::string& value);
  void set_groupid(std::string&& value);
  void set_groupid(const char* value);
  void set_groupid(const char* value, size_t size);
  std::string* mutable_groupid();
  std::string* release_groupid();
  void set_allocated_groupid(std::string* groupid);
  private:
  const std::string& _internal_groupid() const;
  void _internal_set_groupid(const std::string& value);
  std::string* _internal_mutable_groupid();
  public:

  // int64 reqId = 1;
  void clear_reqid();
  ::PROTOBUF_NAMESPACE_ID::int64 reqid() const;
  void set_reqid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_reqid() const;
  void _internal_set_reqid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .AcFunDanmu.Im.Cloud.Message.GroupJoinRequestAckRequest.GroupJoinAckType groupJoinAckType = 3;
  void clear_groupjoinacktype();
  ::AcFunDanmu::Im::Cloud_Message_GroupJoinRequestAckRequest_GroupJoinAckType groupjoinacktype() const;
  void set_groupjoinacktype(::AcFunDanmu::Im::Cloud_Message_GroupJoinRequestAckRequest_GroupJoinAckType value);
  private:
  ::AcFunDanmu::Im::Cloud_Message_GroupJoinRequestAckRequest_GroupJoinAckType _internal_groupjoinacktype() const;
  void _internal_set_groupjoinacktype(::AcFunDanmu::Im::Cloud_Message_GroupJoinRequestAckRequest_GroupJoinAckType value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestAckRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupid_;
  ::PROTOBUF_NAMESPACE_ID::int64 reqid_;
  int groupjoinacktype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_GroupJoinRequestAckResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestAckResponse) */ {
 public:
  inline Cloud_Message_GroupJoinRequestAckResponse() : Cloud_Message_GroupJoinRequestAckResponse(nullptr) {}
  virtual ~Cloud_Message_GroupJoinRequestAckResponse();

  Cloud_Message_GroupJoinRequestAckResponse(const Cloud_Message_GroupJoinRequestAckResponse& from);
  Cloud_Message_GroupJoinRequestAckResponse(Cloud_Message_GroupJoinRequestAckResponse&& from) noexcept
    : Cloud_Message_GroupJoinRequestAckResponse() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_GroupJoinRequestAckResponse& operator=(const Cloud_Message_GroupJoinRequestAckResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_GroupJoinRequestAckResponse& operator=(Cloud_Message_GroupJoinRequestAckResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_GroupJoinRequestAckResponse& default_instance();

  static inline const Cloud_Message_GroupJoinRequestAckResponse* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_GroupJoinRequestAckResponse*>(
               &_Cloud_Message_GroupJoinRequestAckResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    146;

  friend void swap(Cloud_Message_GroupJoinRequestAckResponse& a, Cloud_Message_GroupJoinRequestAckResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_GroupJoinRequestAckResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_GroupJoinRequestAckResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_GroupJoinRequestAckResponse* New() const final {
    return CreateMaybeMessage<Cloud_Message_GroupJoinRequestAckResponse>(nullptr);
  }

  Cloud_Message_GroupJoinRequestAckResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_GroupJoinRequestAckResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_GroupJoinRequestAckResponse& from);
  void MergeFrom(const Cloud_Message_GroupJoinRequestAckResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_GroupJoinRequestAckResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.GroupJoinRequestAckResponse";
  }
  protected:
  explicit Cloud_Message_GroupJoinRequestAckResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestAckResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_GroupJoinRequestGetRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestGetRequest) */ {
 public:
  inline Cloud_Message_GroupJoinRequestGetRequest() : Cloud_Message_GroupJoinRequestGetRequest(nullptr) {}
  virtual ~Cloud_Message_GroupJoinRequestGetRequest();

  Cloud_Message_GroupJoinRequestGetRequest(const Cloud_Message_GroupJoinRequestGetRequest& from);
  Cloud_Message_GroupJoinRequestGetRequest(Cloud_Message_GroupJoinRequestGetRequest&& from) noexcept
    : Cloud_Message_GroupJoinRequestGetRequest() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_GroupJoinRequestGetRequest& operator=(const Cloud_Message_GroupJoinRequestGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_GroupJoinRequestGetRequest& operator=(Cloud_Message_GroupJoinRequestGetRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_GroupJoinRequestGetRequest& default_instance();

  static inline const Cloud_Message_GroupJoinRequestGetRequest* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_GroupJoinRequestGetRequest*>(
               &_Cloud_Message_GroupJoinRequestGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    147;

  friend void swap(Cloud_Message_GroupJoinRequestGetRequest& a, Cloud_Message_GroupJoinRequestGetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_GroupJoinRequestGetRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_GroupJoinRequestGetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_GroupJoinRequestGetRequest* New() const final {
    return CreateMaybeMessage<Cloud_Message_GroupJoinRequestGetRequest>(nullptr);
  }

  Cloud_Message_GroupJoinRequestGetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_GroupJoinRequestGetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_GroupJoinRequestGetRequest& from);
  void MergeFrom(const Cloud_Message_GroupJoinRequestGetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_GroupJoinRequestGetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.GroupJoinRequestGetRequest";
  }
  protected:
  explicit Cloud_Message_GroupJoinRequestGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 2,
    kReqSeqFieldNumber = 1,
  };
  // string groupId = 2;
  void clear_groupid();
  const std::string& groupid() const;
  void set_groupid(const std::string& value);
  void set_groupid(std::string&& value);
  void set_groupid(const char* value);
  void set_groupid(const char* value, size_t size);
  std::string* mutable_groupid();
  std::string* release_groupid();
  void set_allocated_groupid(std::string* groupid);
  private:
  const std::string& _internal_groupid() const;
  void _internal_set_groupid(const std::string& value);
  std::string* _internal_mutable_groupid();
  public:

  // int64 reqSeq = 1;
  void clear_reqseq();
  ::PROTOBUF_NAMESPACE_ID::int64 reqseq() const;
  void set_reqseq(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_reqseq() const;
  void _internal_set_reqseq(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestGetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupid_;
  ::PROTOBUF_NAMESPACE_ID::int64 reqseq_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_GroupJoinRequestGetResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestGetResponse) */ {
 public:
  inline Cloud_Message_GroupJoinRequestGetResponse() : Cloud_Message_GroupJoinRequestGetResponse(nullptr) {}
  virtual ~Cloud_Message_GroupJoinRequestGetResponse();

  Cloud_Message_GroupJoinRequestGetResponse(const Cloud_Message_GroupJoinRequestGetResponse& from);
  Cloud_Message_GroupJoinRequestGetResponse(Cloud_Message_GroupJoinRequestGetResponse&& from) noexcept
    : Cloud_Message_GroupJoinRequestGetResponse() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_GroupJoinRequestGetResponse& operator=(const Cloud_Message_GroupJoinRequestGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_GroupJoinRequestGetResponse& operator=(Cloud_Message_GroupJoinRequestGetResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_GroupJoinRequestGetResponse& default_instance();

  static inline const Cloud_Message_GroupJoinRequestGetResponse* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_GroupJoinRequestGetResponse*>(
               &_Cloud_Message_GroupJoinRequestGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    148;

  friend void swap(Cloud_Message_GroupJoinRequestGetResponse& a, Cloud_Message_GroupJoinRequestGetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_GroupJoinRequestGetResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_GroupJoinRequestGetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_GroupJoinRequestGetResponse* New() const final {
    return CreateMaybeMessage<Cloud_Message_GroupJoinRequestGetResponse>(nullptr);
  }

  Cloud_Message_GroupJoinRequestGetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_GroupJoinRequestGetResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_GroupJoinRequestGetResponse& from);
  void MergeFrom(const Cloud_Message_GroupJoinRequestGetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_GroupJoinRequestGetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.GroupJoinRequestGetResponse";
  }
  protected:
  explicit Cloud_Message_GroupJoinRequestGetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInviteesFieldNumber = 3,
    kGroupIdFieldNumber = 1,
    kDescContentFieldNumber = 5,
    kInviterFieldNumber = 2,
    kFindWayFieldNumber = 4,
    kStatusFieldNumber = 6,
  };
  // repeated .AcFunDanmu.Im.Basic.User invitees = 3;
  int invitees_size() const;
  private:
  int _internal_invitees_size() const;
  public:
  void clear_invitees();
  ::AcFunDanmu::Im::Basic_User* mutable_invitees(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_User >*
      mutable_invitees();
  private:
  const ::AcFunDanmu::Im::Basic_User& _internal_invitees(int index) const;
  ::AcFunDanmu::Im::Basic_User* _internal_add_invitees();
  public:
  const ::AcFunDanmu::Im::Basic_User& invitees(int index) const;
  ::AcFunDanmu::Im::Basic_User* add_invitees();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_User >&
      invitees() const;

  // string groupId = 1;
  void clear_groupid();
  const std::string& groupid() const;
  void set_groupid(const std::string& value);
  void set_groupid(std::string&& value);
  void set_groupid(const char* value);
  void set_groupid(const char* value, size_t size);
  std::string* mutable_groupid();
  std::string* release_groupid();
  void set_allocated_groupid(std::string* groupid);
  private:
  const std::string& _internal_groupid() const;
  void _internal_set_groupid(const std::string& value);
  std::string* _internal_mutable_groupid();
  public:

  // string descContent = 5;
  void clear_desccontent();
  const std::string& desccontent() const;
  void set_desccontent(const std::string& value);
  void set_desccontent(std::string&& value);
  void set_desccontent(const char* value);
  void set_desccontent(const char* value, size_t size);
  std::string* mutable_desccontent();
  std::string* release_desccontent();
  void set_allocated_desccontent(std::string* desccontent);
  private:
  const std::string& _internal_desccontent() const;
  void _internal_set_desccontent(const std::string& value);
  std::string* _internal_mutable_desccontent();
  public:

  // .AcFunDanmu.Im.Basic.User inviter = 2;
  bool has_inviter() const;
  private:
  bool _internal_has_inviter() const;
  public:
  void clear_inviter();
  const ::AcFunDanmu::Im::Basic_User& inviter() const;
  ::AcFunDanmu::Im::Basic_User* release_inviter();
  ::AcFunDanmu::Im::Basic_User* mutable_inviter();
  void set_allocated_inviter(::AcFunDanmu::Im::Basic_User* inviter);
  private:
  const ::AcFunDanmu::Im::Basic_User& _internal_inviter() const;
  ::AcFunDanmu::Im::Basic_User* _internal_mutable_inviter();
  public:
  void unsafe_arena_set_allocated_inviter(
      ::AcFunDanmu::Im::Basic_User* inviter);
  ::AcFunDanmu::Im::Basic_User* unsafe_arena_release_inviter();

  // .AcFunDanmu.Im.Cloud.Message.GroupFindType findWay = 4;
  void clear_findway();
  ::AcFunDanmu::Im::Cloud_Message_GroupFindType findway() const;
  void set_findway(::AcFunDanmu::Im::Cloud_Message_GroupFindType value);
  private:
  ::AcFunDanmu::Im::Cloud_Message_GroupFindType _internal_findway() const;
  void _internal_set_findway(::AcFunDanmu::Im::Cloud_Message_GroupFindType value);
  public:

  // .AcFunDanmu.Im.Cloud.Message.JoinRequestStatus status = 6;
  void clear_status();
  ::AcFunDanmu::Im::Cloud_Message_JoinRequestStatus status() const;
  void set_status(::AcFunDanmu::Im::Cloud_Message_JoinRequestStatus value);
  private:
  ::AcFunDanmu::Im::Cloud_Message_JoinRequestStatus _internal_status() const;
  void _internal_set_status(::AcFunDanmu::Im::Cloud_Message_JoinRequestStatus value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestGetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_User > invitees_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desccontent_;
  ::AcFunDanmu::Im::Basic_User* inviter_;
  int findway_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_GroupJoinRequestCancelRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestCancelRequest) */ {
 public:
  inline Cloud_Message_GroupJoinRequestCancelRequest() : Cloud_Message_GroupJoinRequestCancelRequest(nullptr) {}
  virtual ~Cloud_Message_GroupJoinRequestCancelRequest();

  Cloud_Message_GroupJoinRequestCancelRequest(const Cloud_Message_GroupJoinRequestCancelRequest& from);
  Cloud_Message_GroupJoinRequestCancelRequest(Cloud_Message_GroupJoinRequestCancelRequest&& from) noexcept
    : Cloud_Message_GroupJoinRequestCancelRequest() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_GroupJoinRequestCancelRequest& operator=(const Cloud_Message_GroupJoinRequestCancelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_GroupJoinRequestCancelRequest& operator=(Cloud_Message_GroupJoinRequestCancelRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_GroupJoinRequestCancelRequest& default_instance();

  static inline const Cloud_Message_GroupJoinRequestCancelRequest* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_GroupJoinRequestCancelRequest*>(
               &_Cloud_Message_GroupJoinRequestCancelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    149;

  friend void swap(Cloud_Message_GroupJoinRequestCancelRequest& a, Cloud_Message_GroupJoinRequestCancelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_GroupJoinRequestCancelRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_GroupJoinRequestCancelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_GroupJoinRequestCancelRequest* New() const final {
    return CreateMaybeMessage<Cloud_Message_GroupJoinRequestCancelRequest>(nullptr);
  }

  Cloud_Message_GroupJoinRequestCancelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_GroupJoinRequestCancelRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_GroupJoinRequestCancelRequest& from);
  void MergeFrom(const Cloud_Message_GroupJoinRequestCancelRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_GroupJoinRequestCancelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.GroupJoinRequestCancelRequest";
  }
  protected:
  explicit Cloud_Message_GroupJoinRequestCancelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 2,
    kReqSeqFieldNumber = 1,
  };
  // string groupId = 2;
  void clear_groupid();
  const std::string& groupid() const;
  void set_groupid(const std::string& value);
  void set_groupid(std::string&& value);
  void set_groupid(const char* value);
  void set_groupid(const char* value, size_t size);
  std::string* mutable_groupid();
  std::string* release_groupid();
  void set_allocated_groupid(std::string* groupid);
  private:
  const std::string& _internal_groupid() const;
  void _internal_set_groupid(const std::string& value);
  std::string* _internal_mutable_groupid();
  public:

  // int64 reqSeq = 1;
  void clear_reqseq();
  ::PROTOBUF_NAMESPACE_ID::int64 reqseq() const;
  void set_reqseq(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_reqseq() const;
  void _internal_set_reqseq(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestCancelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupid_;
  ::PROTOBUF_NAMESPACE_ID::int64 reqseq_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_GroupJoinRequestCancelResposne PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestCancelResposne) */ {
 public:
  inline Cloud_Message_GroupJoinRequestCancelResposne() : Cloud_Message_GroupJoinRequestCancelResposne(nullptr) {}
  virtual ~Cloud_Message_GroupJoinRequestCancelResposne();

  Cloud_Message_GroupJoinRequestCancelResposne(const Cloud_Message_GroupJoinRequestCancelResposne& from);
  Cloud_Message_GroupJoinRequestCancelResposne(Cloud_Message_GroupJoinRequestCancelResposne&& from) noexcept
    : Cloud_Message_GroupJoinRequestCancelResposne() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_GroupJoinRequestCancelResposne& operator=(const Cloud_Message_GroupJoinRequestCancelResposne& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_GroupJoinRequestCancelResposne& operator=(Cloud_Message_GroupJoinRequestCancelResposne&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_GroupJoinRequestCancelResposne& default_instance();

  static inline const Cloud_Message_GroupJoinRequestCancelResposne* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_GroupJoinRequestCancelResposne*>(
               &_Cloud_Message_GroupJoinRequestCancelResposne_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    150;

  friend void swap(Cloud_Message_GroupJoinRequestCancelResposne& a, Cloud_Message_GroupJoinRequestCancelResposne& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_GroupJoinRequestCancelResposne* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_GroupJoinRequestCancelResposne* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_GroupJoinRequestCancelResposne* New() const final {
    return CreateMaybeMessage<Cloud_Message_GroupJoinRequestCancelResposne>(nullptr);
  }

  Cloud_Message_GroupJoinRequestCancelResposne* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_GroupJoinRequestCancelResposne>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_GroupJoinRequestCancelResposne& from);
  void MergeFrom(const Cloud_Message_GroupJoinRequestCancelResposne& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_GroupJoinRequestCancelResposne* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.GroupJoinRequestCancelResposne";
  }
  protected:
  explicit Cloud_Message_GroupJoinRequestCancelResposne(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInviteesFieldNumber = 3,
    kGroupIdFieldNumber = 1,
    kDescContentFieldNumber = 5,
    kInviterFieldNumber = 2,
    kFindWayFieldNumber = 4,
    kStatusFieldNumber = 6,
  };
  // repeated .AcFunDanmu.Im.Basic.User invitees = 3;
  int invitees_size() const;
  private:
  int _internal_invitees_size() const;
  public:
  void clear_invitees();
  ::AcFunDanmu::Im::Basic_User* mutable_invitees(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_User >*
      mutable_invitees();
  private:
  const ::AcFunDanmu::Im::Basic_User& _internal_invitees(int index) const;
  ::AcFunDanmu::Im::Basic_User* _internal_add_invitees();
  public:
  const ::AcFunDanmu::Im::Basic_User& invitees(int index) const;
  ::AcFunDanmu::Im::Basic_User* add_invitees();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_User >&
      invitees() const;

  // string groupId = 1;
  void clear_groupid();
  const std::string& groupid() const;
  void set_groupid(const std::string& value);
  void set_groupid(std::string&& value);
  void set_groupid(const char* value);
  void set_groupid(const char* value, size_t size);
  std::string* mutable_groupid();
  std::string* release_groupid();
  void set_allocated_groupid(std::string* groupid);
  private:
  const std::string& _internal_groupid() const;
  void _internal_set_groupid(const std::string& value);
  std::string* _internal_mutable_groupid();
  public:

  // string descContent = 5;
  void clear_desccontent();
  const std::string& desccontent() const;
  void set_desccontent(const std::string& value);
  void set_desccontent(std::string&& value);
  void set_desccontent(const char* value);
  void set_desccontent(const char* value, size_t size);
  std::string* mutable_desccontent();
  std::string* release_desccontent();
  void set_allocated_desccontent(std::string* desccontent);
  private:
  const std::string& _internal_desccontent() const;
  void _internal_set_desccontent(const std::string& value);
  std::string* _internal_mutable_desccontent();
  public:

  // .AcFunDanmu.Im.Basic.User inviter = 2;
  bool has_inviter() const;
  private:
  bool _internal_has_inviter() const;
  public:
  void clear_inviter();
  const ::AcFunDanmu::Im::Basic_User& inviter() const;
  ::AcFunDanmu::Im::Basic_User* release_inviter();
  ::AcFunDanmu::Im::Basic_User* mutable_inviter();
  void set_allocated_inviter(::AcFunDanmu::Im::Basic_User* inviter);
  private:
  const ::AcFunDanmu::Im::Basic_User& _internal_inviter() const;
  ::AcFunDanmu::Im::Basic_User* _internal_mutable_inviter();
  public:
  void unsafe_arena_set_allocated_inviter(
      ::AcFunDanmu::Im::Basic_User* inviter);
  ::AcFunDanmu::Im::Basic_User* unsafe_arena_release_inviter();

  // .AcFunDanmu.Im.Cloud.Message.GroupFindType findWay = 4;
  void clear_findway();
  ::AcFunDanmu::Im::Cloud_Message_GroupFindType findway() const;
  void set_findway(::AcFunDanmu::Im::Cloud_Message_GroupFindType value);
  private:
  ::AcFunDanmu::Im::Cloud_Message_GroupFindType _internal_findway() const;
  void _internal_set_findway(::AcFunDanmu::Im::Cloud_Message_GroupFindType value);
  public:

  // .AcFunDanmu.Im.Cloud.Message.JoinRequestStatus status = 6;
  void clear_status();
  ::AcFunDanmu::Im::Cloud_Message_JoinRequestStatus status() const;
  void set_status(::AcFunDanmu::Im::Cloud_Message_JoinRequestStatus value);
  private:
  ::AcFunDanmu::Im::Cloud_Message_JoinRequestStatus _internal_status() const;
  void _internal_set_status(::AcFunDanmu::Im::Cloud_Message_JoinRequestStatus value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestCancelResposne)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_User > invitees_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desccontent_;
  ::AcFunDanmu::Im::Basic_User* inviter_;
  int findway_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_GroupQuitRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.GroupQuitRequest) */ {
 public:
  inline Cloud_Message_GroupQuitRequest() : Cloud_Message_GroupQuitRequest(nullptr) {}
  virtual ~Cloud_Message_GroupQuitRequest();

  Cloud_Message_GroupQuitRequest(const Cloud_Message_GroupQuitRequest& from);
  Cloud_Message_GroupQuitRequest(Cloud_Message_GroupQuitRequest&& from) noexcept
    : Cloud_Message_GroupQuitRequest() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_GroupQuitRequest& operator=(const Cloud_Message_GroupQuitRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_GroupQuitRequest& operator=(Cloud_Message_GroupQuitRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_GroupQuitRequest& default_instance();

  static inline const Cloud_Message_GroupQuitRequest* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_GroupQuitRequest*>(
               &_Cloud_Message_GroupQuitRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    151;

  friend void swap(Cloud_Message_GroupQuitRequest& a, Cloud_Message_GroupQuitRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_GroupQuitRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_GroupQuitRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_GroupQuitRequest* New() const final {
    return CreateMaybeMessage<Cloud_Message_GroupQuitRequest>(nullptr);
  }

  Cloud_Message_GroupQuitRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_GroupQuitRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_GroupQuitRequest& from);
  void MergeFrom(const Cloud_Message_GroupQuitRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_GroupQuitRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.GroupQuitRequest";
  }
  protected:
  explicit Cloud_Message_GroupQuitRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
  };
  // string groupId = 1;
  void clear_groupid();
  const std::string& groupid() const;
  void set_groupid(const std::string& value);
  void set_groupid(std::string&& value);
  void set_groupid(const char* value);
  void set_groupid(const char* value, size_t size);
  std::string* mutable_groupid();
  std::string* release_groupid();
  void set_allocated_groupid(std::string* groupid);
  private:
  const std::string& _internal_groupid() const;
  void _internal_set_groupid(const std::string& value);
  std::string* _internal_mutable_groupid();
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.GroupQuitRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_GroupQuitResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.GroupQuitResponse) */ {
 public:
  inline Cloud_Message_GroupQuitResponse() : Cloud_Message_GroupQuitResponse(nullptr) {}
  virtual ~Cloud_Message_GroupQuitResponse();

  Cloud_Message_GroupQuitResponse(const Cloud_Message_GroupQuitResponse& from);
  Cloud_Message_GroupQuitResponse(Cloud_Message_GroupQuitResponse&& from) noexcept
    : Cloud_Message_GroupQuitResponse() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_GroupQuitResponse& operator=(const Cloud_Message_GroupQuitResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_GroupQuitResponse& operator=(Cloud_Message_GroupQuitResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_GroupQuitResponse& default_instance();

  static inline const Cloud_Message_GroupQuitResponse* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_GroupQuitResponse*>(
               &_Cloud_Message_GroupQuitResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    152;

  friend void swap(Cloud_Message_GroupQuitResponse& a, Cloud_Message_GroupQuitResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_GroupQuitResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_GroupQuitResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_GroupQuitResponse* New() const final {
    return CreateMaybeMessage<Cloud_Message_GroupQuitResponse>(nullptr);
  }

  Cloud_Message_GroupQuitResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_GroupQuitResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_GroupQuitResponse& from);
  void MergeFrom(const Cloud_Message_GroupQuitResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_GroupQuitResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.GroupQuitResponse";
  }
  protected:
  explicit Cloud_Message_GroupQuitResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
  };
  // string groupId = 1;
  void clear_groupid();
  const std::string& groupid() const;
  void set_groupid(const std::string& value);
  void set_groupid(std::string&& value);
  void set_groupid(const char* value);
  void set_groupid(const char* value, size_t size);
  std::string* mutable_groupid();
  std::string* release_groupid();
  void set_allocated_groupid(std::string* groupid);
  private:
  const std::string& _internal_groupid() const;
  void _internal_set_groupid(const std::string& value);
  std::string* _internal_mutable_groupid();
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.GroupQuitResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_GroupKickRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.GroupKickRequest) */ {
 public:
  inline Cloud_Message_GroupKickRequest() : Cloud_Message_GroupKickRequest(nullptr) {}
  virtual ~Cloud_Message_GroupKickRequest();

  Cloud_Message_GroupKickRequest(const Cloud_Message_GroupKickRequest& from);
  Cloud_Message_GroupKickRequest(Cloud_Message_GroupKickRequest&& from) noexcept
    : Cloud_Message_GroupKickRequest() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_GroupKickRequest& operator=(const Cloud_Message_GroupKickRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_GroupKickRequest& operator=(Cloud_Message_GroupKickRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_GroupKickRequest& default_instance();

  static inline const Cloud_Message_GroupKickRequest* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_GroupKickRequest*>(
               &_Cloud_Message_GroupKickRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    153;

  friend void swap(Cloud_Message_GroupKickRequest& a, Cloud_Message_GroupKickRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_GroupKickRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_GroupKickRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_GroupKickRequest* New() const final {
    return CreateMaybeMessage<Cloud_Message_GroupKickRequest>(nullptr);
  }

  Cloud_Message_GroupKickRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_GroupKickRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_GroupKickRequest& from);
  void MergeFrom(const Cloud_Message_GroupKickRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_GroupKickRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.GroupKickRequest";
  }
  protected:
  explicit Cloud_Message_GroupKickRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 2,
    kGroupIdFieldNumber = 1,
  };
  // repeated .AcFunDanmu.Im.Basic.User target = 2;
  int target_size() const;
  private:
  int _internal_target_size() const;
  public:
  void clear_target();
  ::AcFunDanmu::Im::Basic_User* mutable_target(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_User >*
      mutable_target();
  private:
  const ::AcFunDanmu::Im::Basic_User& _internal_target(int index) const;
  ::AcFunDanmu::Im::Basic_User* _internal_add_target();
  public:
  const ::AcFunDanmu::Im::Basic_User& target(int index) const;
  ::AcFunDanmu::Im::Basic_User* add_target();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_User >&
      target() const;

  // string groupId = 1;
  void clear_groupid();
  const std::string& groupid() const;
  void set_groupid(const std::string& value);
  void set_groupid(std::string&& value);
  void set_groupid(const char* value);
  void set_groupid(const char* value, size_t size);
  std::string* mutable_groupid();
  std::string* release_groupid();
  void set_allocated_groupid(std::string* groupid);
  private:
  const std::string& _internal_groupid() const;
  void _internal_set_groupid(const std::string& value);
  std::string* _internal_mutable_groupid();
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.GroupKickRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_User > target_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_GroupKickResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.GroupKickResponse) */ {
 public:
  inline Cloud_Message_GroupKickResponse() : Cloud_Message_GroupKickResponse(nullptr) {}
  virtual ~Cloud_Message_GroupKickResponse();

  Cloud_Message_GroupKickResponse(const Cloud_Message_GroupKickResponse& from);
  Cloud_Message_GroupKickResponse(Cloud_Message_GroupKickResponse&& from) noexcept
    : Cloud_Message_GroupKickResponse() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_GroupKickResponse& operator=(const Cloud_Message_GroupKickResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_GroupKickResponse& operator=(Cloud_Message_GroupKickResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_GroupKickResponse& default_instance();

  static inline const Cloud_Message_GroupKickResponse* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_GroupKickResponse*>(
               &_Cloud_Message_GroupKickResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    154;

  friend void swap(Cloud_Message_GroupKickResponse& a, Cloud_Message_GroupKickResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_GroupKickResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_GroupKickResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_GroupKickResponse* New() const final {
    return CreateMaybeMessage<Cloud_Message_GroupKickResponse>(nullptr);
  }

  Cloud_Message_GroupKickResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_GroupKickResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_GroupKickResponse& from);
  void MergeFrom(const Cloud_Message_GroupKickResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_GroupKickResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.GroupKickResponse";
  }
  protected:
  explicit Cloud_Message_GroupKickResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
  };
  // string groupId = 1;
  void clear_groupid();
  const std::string& groupid() const;
  void set_groupid(const std::string& value);
  void set_groupid(std::string&& value);
  void set_groupid(const char* value);
  void set_groupid(const char* value, size_t size);
  std::string* mutable_groupid();
  std::string* release_groupid();
  void set_allocated_groupid(std::string* groupid);
  private:
  const std::string& _internal_groupid() const;
  void _internal_set_groupid(const std::string& value);
  std::string* _internal_mutable_groupid();
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.GroupKickResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_GroupSettingRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest) */ {
 public:
  inline Cloud_Message_GroupSettingRequest() : Cloud_Message_GroupSettingRequest(nullptr) {}
  virtual ~Cloud_Message_GroupSettingRequest();

  Cloud_Message_GroupSettingRequest(const Cloud_Message_GroupSettingRequest& from);
  Cloud_Message_GroupSettingRequest(Cloud_Message_GroupSettingRequest&& from) noexcept
    : Cloud_Message_GroupSettingRequest() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_GroupSettingRequest& operator=(const Cloud_Message_GroupSettingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_GroupSettingRequest& operator=(Cloud_Message_GroupSettingRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_GroupSettingRequest& default_instance();

  enum GroupSettingCase {
    kRename = 2,
    kDesc = 3,
    kJoinNeedPermission = 4,
    GROUPSETTING_NOT_SET = 0,
  };

  static inline const Cloud_Message_GroupSettingRequest* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_GroupSettingRequest*>(
               &_Cloud_Message_GroupSettingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    155;

  friend void swap(Cloud_Message_GroupSettingRequest& a, Cloud_Message_GroupSettingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_GroupSettingRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_GroupSettingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_GroupSettingRequest* New() const final {
    return CreateMaybeMessage<Cloud_Message_GroupSettingRequest>(nullptr);
  }

  Cloud_Message_GroupSettingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_GroupSettingRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_GroupSettingRequest& from);
  void MergeFrom(const Cloud_Message_GroupSettingRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_GroupSettingRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.GroupSettingRequest";
  }
  protected:
  explicit Cloud_Message_GroupSettingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kRenameFieldNumber = 2,
    kDescFieldNumber = 3,
    kJoinNeedPermissionFieldNumber = 4,
  };
  // string groupId = 1;
  void clear_groupid();
  const std::string& groupid() const;
  void set_groupid(const std::string& value);
  void set_groupid(std::string&& value);
  void set_groupid(const char* value);
  void set_groupid(const char* value, size_t size);
  std::string* mutable_groupid();
  std::string* release_groupid();
  void set_allocated_groupid(std::string* groupid);
  private:
  const std::string& _internal_groupid() const;
  void _internal_set_groupid(const std::string& value);
  std::string* _internal_mutable_groupid();
  public:

  // .AcFunDanmu.Im.Cloud.Message.GroupSettingRename rename = 2;
  bool has_rename() const;
  private:
  bool _internal_has_rename() const;
  public:
  void clear_rename();
  const ::AcFunDanmu::Im::Cloud_Message_GroupSettingRename& rename() const;
  ::AcFunDanmu::Im::Cloud_Message_GroupSettingRename* release_rename();
  ::AcFunDanmu::Im::Cloud_Message_GroupSettingRename* mutable_rename();
  void set_allocated_rename(::AcFunDanmu::Im::Cloud_Message_GroupSettingRename* rename);
  private:
  const ::AcFunDanmu::Im::Cloud_Message_GroupSettingRename& _internal_rename() const;
  ::AcFunDanmu::Im::Cloud_Message_GroupSettingRename* _internal_mutable_rename();
  public:
  void unsafe_arena_set_allocated_rename(
      ::AcFunDanmu::Im::Cloud_Message_GroupSettingRename* rename);
  ::AcFunDanmu::Im::Cloud_Message_GroupSettingRename* unsafe_arena_release_rename();

  // .AcFunDanmu.Im.Cloud.Message.GroupSettingDesc desc = 3;
  bool has_desc() const;
  private:
  bool _internal_has_desc() const;
  public:
  void clear_desc();
  const ::AcFunDanmu::Im::Cloud_Message_GroupSettingDesc& desc() const;
  ::AcFunDanmu::Im::Cloud_Message_GroupSettingDesc* release_desc();
  ::AcFunDanmu::Im::Cloud_Message_GroupSettingDesc* mutable_desc();
  void set_allocated_desc(::AcFunDanmu::Im::Cloud_Message_GroupSettingDesc* desc);
  private:
  const ::AcFunDanmu::Im::Cloud_Message_GroupSettingDesc& _internal_desc() const;
  ::AcFunDanmu::Im::Cloud_Message_GroupSettingDesc* _internal_mutable_desc();
  public:
  void unsafe_arena_set_allocated_desc(
      ::AcFunDanmu::Im::Cloud_Message_GroupSettingDesc* desc);
  ::AcFunDanmu::Im::Cloud_Message_GroupSettingDesc* unsafe_arena_release_desc();

  // .AcFunDanmu.Im.Cloud.Message.GroupSettingJoinNeedPermission joinNeedPermission = 4;
  bool has_joinneedpermission() const;
  private:
  bool _internal_has_joinneedpermission() const;
  public:
  void clear_joinneedpermission();
  const ::AcFunDanmu::Im::Cloud_Message_GroupSettingJoinNeedPermission& joinneedpermission() const;
  ::AcFunDanmu::Im::Cloud_Message_GroupSettingJoinNeedPermission* release_joinneedpermission();
  ::AcFunDanmu::Im::Cloud_Message_GroupSettingJoinNeedPermission* mutable_joinneedpermission();
  void set_allocated_joinneedpermission(::AcFunDanmu::Im::Cloud_Message_GroupSettingJoinNeedPermission* joinneedpermission);
  private:
  const ::AcFunDanmu::Im::Cloud_Message_GroupSettingJoinNeedPermission& _internal_joinneedpermission() const;
  ::AcFunDanmu::Im::Cloud_Message_GroupSettingJoinNeedPermission* _internal_mutable_joinneedpermission();
  public:
  void unsafe_arena_set_allocated_joinneedpermission(
      ::AcFunDanmu::Im::Cloud_Message_GroupSettingJoinNeedPermission* joinneedpermission);
  ::AcFunDanmu::Im::Cloud_Message_GroupSettingJoinNeedPermission* unsafe_arena_release_joinneedpermission();

  void clear_GroupSetting();
  GroupSettingCase GroupSetting_case() const;
  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest)
 private:
  class _Internal;
  void set_has_rename();
  void set_has_desc();
  void set_has_joinneedpermission();

  inline bool has_GroupSetting() const;
  inline void clear_has_GroupSetting();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupid_;
  union GroupSettingUnion {
    GroupSettingUnion() {}
    ::AcFunDanmu::Im::Cloud_Message_GroupSettingRename* rename_;
    ::AcFunDanmu::Im::Cloud_Message_GroupSettingDesc* desc_;
    ::AcFunDanmu::Im::Cloud_Message_GroupSettingJoinNeedPermission* joinneedpermission_;
  } GroupSetting_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_GroupSettingRename PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.GroupSettingRename) */ {
 public:
  inline Cloud_Message_GroupSettingRename() : Cloud_Message_GroupSettingRename(nullptr) {}
  virtual ~Cloud_Message_GroupSettingRename();

  Cloud_Message_GroupSettingRename(const Cloud_Message_GroupSettingRename& from);
  Cloud_Message_GroupSettingRename(Cloud_Message_GroupSettingRename&& from) noexcept
    : Cloud_Message_GroupSettingRename() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_GroupSettingRename& operator=(const Cloud_Message_GroupSettingRename& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_GroupSettingRename& operator=(Cloud_Message_GroupSettingRename&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_GroupSettingRename& default_instance();

  static inline const Cloud_Message_GroupSettingRename* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_GroupSettingRename*>(
               &_Cloud_Message_GroupSettingRename_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    156;

  friend void swap(Cloud_Message_GroupSettingRename& a, Cloud_Message_GroupSettingRename& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_GroupSettingRename* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_GroupSettingRename* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_GroupSettingRename* New() const final {
    return CreateMaybeMessage<Cloud_Message_GroupSettingRename>(nullptr);
  }

  Cloud_Message_GroupSettingRename* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_GroupSettingRename>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_GroupSettingRename& from);
  void MergeFrom(const Cloud_Message_GroupSettingRename& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_GroupSettingRename* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.GroupSettingRename";
  }
  protected:
  explicit Cloud_Message_GroupSettingRename(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupNameFieldNumber = 1,
  };
  // string groupName = 1;
  void clear_groupname();
  const std::string& groupname() const;
  void set_groupname(const std::string& value);
  void set_groupname(std::string&& value);
  void set_groupname(const char* value);
  void set_groupname(const char* value, size_t size);
  std::string* mutable_groupname();
  std::string* release_groupname();
  void set_allocated_groupname(std::string* groupname);
  private:
  const std::string& _internal_groupname() const;
  void _internal_set_groupname(const std::string& value);
  std::string* _internal_mutable_groupname();
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.GroupSettingRename)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_GroupSettingDesc PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.GroupSettingDesc) */ {
 public:
  inline Cloud_Message_GroupSettingDesc() : Cloud_Message_GroupSettingDesc(nullptr) {}
  virtual ~Cloud_Message_GroupSettingDesc();

  Cloud_Message_GroupSettingDesc(const Cloud_Message_GroupSettingDesc& from);
  Cloud_Message_GroupSettingDesc(Cloud_Message_GroupSettingDesc&& from) noexcept
    : Cloud_Message_GroupSettingDesc() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_GroupSettingDesc& operator=(const Cloud_Message_GroupSettingDesc& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_GroupSettingDesc& operator=(Cloud_Message_GroupSettingDesc&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_GroupSettingDesc& default_instance();

  static inline const Cloud_Message_GroupSettingDesc* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_GroupSettingDesc*>(
               &_Cloud_Message_GroupSettingDesc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    157;

  friend void swap(Cloud_Message_GroupSettingDesc& a, Cloud_Message_GroupSettingDesc& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_GroupSettingDesc* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_GroupSettingDesc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_GroupSettingDesc* New() const final {
    return CreateMaybeMessage<Cloud_Message_GroupSettingDesc>(nullptr);
  }

  Cloud_Message_GroupSettingDesc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_GroupSettingDesc>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_GroupSettingDesc& from);
  void MergeFrom(const Cloud_Message_GroupSettingDesc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_GroupSettingDesc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.GroupSettingDesc";
  }
  protected:
  explicit Cloud_Message_GroupSettingDesc(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescFieldNumber = 1,
  };
  // string desc = 1;
  void clear_desc();
  const std::string& desc() const;
  void set_desc(const std::string& value);
  void set_desc(std::string&& value);
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  std::string* mutable_desc();
  std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.GroupSettingDesc)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_GroupSettingJoinNeedPermission PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.GroupSettingJoinNeedPermission) */ {
 public:
  inline Cloud_Message_GroupSettingJoinNeedPermission() : Cloud_Message_GroupSettingJoinNeedPermission(nullptr) {}
  virtual ~Cloud_Message_GroupSettingJoinNeedPermission();

  Cloud_Message_GroupSettingJoinNeedPermission(const Cloud_Message_GroupSettingJoinNeedPermission& from);
  Cloud_Message_GroupSettingJoinNeedPermission(Cloud_Message_GroupSettingJoinNeedPermission&& from) noexcept
    : Cloud_Message_GroupSettingJoinNeedPermission() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_GroupSettingJoinNeedPermission& operator=(const Cloud_Message_GroupSettingJoinNeedPermission& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_GroupSettingJoinNeedPermission& operator=(Cloud_Message_GroupSettingJoinNeedPermission&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_GroupSettingJoinNeedPermission& default_instance();

  static inline const Cloud_Message_GroupSettingJoinNeedPermission* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_GroupSettingJoinNeedPermission*>(
               &_Cloud_Message_GroupSettingJoinNeedPermission_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    158;

  friend void swap(Cloud_Message_GroupSettingJoinNeedPermission& a, Cloud_Message_GroupSettingJoinNeedPermission& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_GroupSettingJoinNeedPermission* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_GroupSettingJoinNeedPermission* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_GroupSettingJoinNeedPermission* New() const final {
    return CreateMaybeMessage<Cloud_Message_GroupSettingJoinNeedPermission>(nullptr);
  }

  Cloud_Message_GroupSettingJoinNeedPermission* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_GroupSettingJoinNeedPermission>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_GroupSettingJoinNeedPermission& from);
  void MergeFrom(const Cloud_Message_GroupSettingJoinNeedPermission& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_GroupSettingJoinNeedPermission* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.GroupSettingJoinNeedPermission";
  }
  protected:
  explicit Cloud_Message_GroupSettingJoinNeedPermission(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJoinNeedPermissionFieldNumber = 1,
  };
  // .AcFunDanmu.Im.Cloud.Message.JoinNeedPermissionType joinNeedPermission = 1;
  void clear_joinneedpermission();
  ::AcFunDanmu::Im::Cloud_Message_JoinNeedPermissionType joinneedpermission() const;
  void set_joinneedpermission(::AcFunDanmu::Im::Cloud_Message_JoinNeedPermissionType value);
  private:
  ::AcFunDanmu::Im::Cloud_Message_JoinNeedPermissionType _internal_joinneedpermission() const;
  void _internal_set_joinneedpermission(::AcFunDanmu::Im::Cloud_Message_JoinNeedPermissionType value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.GroupSettingJoinNeedPermission)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int joinneedpermission_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_GroupSettingResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.GroupSettingResponse) */ {
 public:
  inline Cloud_Message_GroupSettingResponse() : Cloud_Message_GroupSettingResponse(nullptr) {}
  virtual ~Cloud_Message_GroupSettingResponse();

  Cloud_Message_GroupSettingResponse(const Cloud_Message_GroupSettingResponse& from);
  Cloud_Message_GroupSettingResponse(Cloud_Message_GroupSettingResponse&& from) noexcept
    : Cloud_Message_GroupSettingResponse() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_GroupSettingResponse& operator=(const Cloud_Message_GroupSettingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_GroupSettingResponse& operator=(Cloud_Message_GroupSettingResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_GroupSettingResponse& default_instance();

  static inline const Cloud_Message_GroupSettingResponse* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_GroupSettingResponse*>(
               &_Cloud_Message_GroupSettingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    159;

  friend void swap(Cloud_Message_GroupSettingResponse& a, Cloud_Message_GroupSettingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_GroupSettingResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_GroupSettingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_GroupSettingResponse* New() const final {
    return CreateMaybeMessage<Cloud_Message_GroupSettingResponse>(nullptr);
  }

  Cloud_Message_GroupSettingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_GroupSettingResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_GroupSettingResponse& from);
  void MergeFrom(const Cloud_Message_GroupSettingResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_GroupSettingResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.GroupSettingResponse";
  }
  protected:
  explicit Cloud_Message_GroupSettingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.GroupSettingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_GroupMemberSettingRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.GroupMemberSettingRequest) */ {
 public:
  inline Cloud_Message_GroupMemberSettingRequest() : Cloud_Message_GroupMemberSettingRequest(nullptr) {}
  virtual ~Cloud_Message_GroupMemberSettingRequest();

  Cloud_Message_GroupMemberSettingRequest(const Cloud_Message_GroupMemberSettingRequest& from);
  Cloud_Message_GroupMemberSettingRequest(Cloud_Message_GroupMemberSettingRequest&& from) noexcept
    : Cloud_Message_GroupMemberSettingRequest() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_GroupMemberSettingRequest& operator=(const Cloud_Message_GroupMemberSettingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_GroupMemberSettingRequest& operator=(Cloud_Message_GroupMemberSettingRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_GroupMemberSettingRequest& default_instance();

  enum UserSettingCase {
    kSetNickname = 2,
    kSetAntiDisturbing = 3,
    USERSETTING_NOT_SET = 0,
  };

  static inline const Cloud_Message_GroupMemberSettingRequest* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_GroupMemberSettingRequest*>(
               &_Cloud_Message_GroupMemberSettingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    160;

  friend void swap(Cloud_Message_GroupMemberSettingRequest& a, Cloud_Message_GroupMemberSettingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_GroupMemberSettingRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_GroupMemberSettingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_GroupMemberSettingRequest* New() const final {
    return CreateMaybeMessage<Cloud_Message_GroupMemberSettingRequest>(nullptr);
  }

  Cloud_Message_GroupMemberSettingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_GroupMemberSettingRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_GroupMemberSettingRequest& from);
  void MergeFrom(const Cloud_Message_GroupMemberSettingRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_GroupMemberSettingRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.GroupMemberSettingRequest";
  }
  protected:
  explicit Cloud_Message_GroupMemberSettingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kSetNicknameFieldNumber = 2,
    kSetAntiDisturbingFieldNumber = 3,
  };
  // string groupId = 1;
  void clear_groupid();
  const std::string& groupid() const;
  void set_groupid(const std::string& value);
  void set_groupid(std::string&& value);
  void set_groupid(const char* value);
  void set_groupid(const char* value, size_t size);
  std::string* mutable_groupid();
  std::string* release_groupid();
  void set_allocated_groupid(std::string* groupid);
  private:
  const std::string& _internal_groupid() const;
  void _internal_set_groupid(const std::string& value);
  std::string* _internal_mutable_groupid();
  public:

  // .AcFunDanmu.Im.Cloud.Message.SetUserNickname setNickname = 2;
  bool has_setnickname() const;
  private:
  bool _internal_has_setnickname() const;
  public:
  void clear_setnickname();
  const ::AcFunDanmu::Im::Cloud_Message_SetUserNickname& setnickname() const;
  ::AcFunDanmu::Im::Cloud_Message_SetUserNickname* release_setnickname();
  ::AcFunDanmu::Im::Cloud_Message_SetUserNickname* mutable_setnickname();
  void set_allocated_setnickname(::AcFunDanmu::Im::Cloud_Message_SetUserNickname* setnickname);
  private:
  const ::AcFunDanmu::Im::Cloud_Message_SetUserNickname& _internal_setnickname() const;
  ::AcFunDanmu::Im::Cloud_Message_SetUserNickname* _internal_mutable_setnickname();
  public:
  void unsafe_arena_set_allocated_setnickname(
      ::AcFunDanmu::Im::Cloud_Message_SetUserNickname* setnickname);
  ::AcFunDanmu::Im::Cloud_Message_SetUserNickname* unsafe_arena_release_setnickname();

  // .AcFunDanmu.Im.Cloud.Message.SetUserAntiDisturbing setAntiDisturbing = 3;
  bool has_setantidisturbing() const;
  private:
  bool _internal_has_setantidisturbing() const;
  public:
  void clear_setantidisturbing();
  const ::AcFunDanmu::Im::Cloud_Message_SetUserAntiDisturbing& setantidisturbing() const;
  ::AcFunDanmu::Im::Cloud_Message_SetUserAntiDisturbing* release_setantidisturbing();
  ::AcFunDanmu::Im::Cloud_Message_SetUserAntiDisturbing* mutable_setantidisturbing();
  void set_allocated_setantidisturbing(::AcFunDanmu::Im::Cloud_Message_SetUserAntiDisturbing* setantidisturbing);
  private:
  const ::AcFunDanmu::Im::Cloud_Message_SetUserAntiDisturbing& _internal_setantidisturbing() const;
  ::AcFunDanmu::Im::Cloud_Message_SetUserAntiDisturbing* _internal_mutable_setantidisturbing();
  public:
  void unsafe_arena_set_allocated_setantidisturbing(
      ::AcFunDanmu::Im::Cloud_Message_SetUserAntiDisturbing* setantidisturbing);
  ::AcFunDanmu::Im::Cloud_Message_SetUserAntiDisturbing* unsafe_arena_release_setantidisturbing();

  void clear_UserSetting();
  UserSettingCase UserSetting_case() const;
  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.GroupMemberSettingRequest)
 private:
  class _Internal;
  void set_has_setnickname();
  void set_has_setantidisturbing();

  inline bool has_UserSetting() const;
  inline void clear_has_UserSetting();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupid_;
  union UserSettingUnion {
    UserSettingUnion() {}
    ::AcFunDanmu::Im::Cloud_Message_SetUserNickname* setnickname_;
    ::AcFunDanmu::Im::Cloud_Message_SetUserAntiDisturbing* setantidisturbing_;
  } UserSetting_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_SetUserNickname PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.SetUserNickname) */ {
 public:
  inline Cloud_Message_SetUserNickname() : Cloud_Message_SetUserNickname(nullptr) {}
  virtual ~Cloud_Message_SetUserNickname();

  Cloud_Message_SetUserNickname(const Cloud_Message_SetUserNickname& from);
  Cloud_Message_SetUserNickname(Cloud_Message_SetUserNickname&& from) noexcept
    : Cloud_Message_SetUserNickname() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_SetUserNickname& operator=(const Cloud_Message_SetUserNickname& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_SetUserNickname& operator=(Cloud_Message_SetUserNickname&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_SetUserNickname& default_instance();

  static inline const Cloud_Message_SetUserNickname* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_SetUserNickname*>(
               &_Cloud_Message_SetUserNickname_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    161;

  friend void swap(Cloud_Message_SetUserNickname& a, Cloud_Message_SetUserNickname& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_SetUserNickname* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_SetUserNickname* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_SetUserNickname* New() const final {
    return CreateMaybeMessage<Cloud_Message_SetUserNickname>(nullptr);
  }

  Cloud_Message_SetUserNickname* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_SetUserNickname>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_SetUserNickname& from);
  void MergeFrom(const Cloud_Message_SetUserNickname& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_SetUserNickname* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.SetUserNickname";
  }
  protected:
  explicit Cloud_Message_SetUserNickname(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 1,
  };
  // string nickname = 1;
  void clear_nickname();
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.SetUserNickname)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_SetUserAntiDisturbing PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.SetUserAntiDisturbing) */ {
 public:
  inline Cloud_Message_SetUserAntiDisturbing() : Cloud_Message_SetUserAntiDisturbing(nullptr) {}
  virtual ~Cloud_Message_SetUserAntiDisturbing();

  Cloud_Message_SetUserAntiDisturbing(const Cloud_Message_SetUserAntiDisturbing& from);
  Cloud_Message_SetUserAntiDisturbing(Cloud_Message_SetUserAntiDisturbing&& from) noexcept
    : Cloud_Message_SetUserAntiDisturbing() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_SetUserAntiDisturbing& operator=(const Cloud_Message_SetUserAntiDisturbing& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_SetUserAntiDisturbing& operator=(Cloud_Message_SetUserAntiDisturbing&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_SetUserAntiDisturbing& default_instance();

  static inline const Cloud_Message_SetUserAntiDisturbing* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_SetUserAntiDisturbing*>(
               &_Cloud_Message_SetUserAntiDisturbing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    162;

  friend void swap(Cloud_Message_SetUserAntiDisturbing& a, Cloud_Message_SetUserAntiDisturbing& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_SetUserAntiDisturbing* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_SetUserAntiDisturbing* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_SetUserAntiDisturbing* New() const final {
    return CreateMaybeMessage<Cloud_Message_SetUserAntiDisturbing>(nullptr);
  }

  Cloud_Message_SetUserAntiDisturbing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_SetUserAntiDisturbing>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_SetUserAntiDisturbing& from);
  void MergeFrom(const Cloud_Message_SetUserAntiDisturbing& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_SetUserAntiDisturbing* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.SetUserAntiDisturbing";
  }
  protected:
  explicit Cloud_Message_SetUserAntiDisturbing(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAntiDisturbingFieldNumber = 1,
  };
  // bool antiDisturbing = 1;
  void clear_antidisturbing();
  bool antidisturbing() const;
  void set_antidisturbing(bool value);
  private:
  bool _internal_antidisturbing() const;
  void _internal_set_antidisturbing(bool value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.SetUserAntiDisturbing)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool antidisturbing_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_GroupMemberSettingResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.GroupMemberSettingResponse) */ {
 public:
  inline Cloud_Message_GroupMemberSettingResponse() : Cloud_Message_GroupMemberSettingResponse(nullptr) {}
  virtual ~Cloud_Message_GroupMemberSettingResponse();

  Cloud_Message_GroupMemberSettingResponse(const Cloud_Message_GroupMemberSettingResponse& from);
  Cloud_Message_GroupMemberSettingResponse(Cloud_Message_GroupMemberSettingResponse&& from) noexcept
    : Cloud_Message_GroupMemberSettingResponse() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_GroupMemberSettingResponse& operator=(const Cloud_Message_GroupMemberSettingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_GroupMemberSettingResponse& operator=(Cloud_Message_GroupMemberSettingResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_GroupMemberSettingResponse& default_instance();

  static inline const Cloud_Message_GroupMemberSettingResponse* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_GroupMemberSettingResponse*>(
               &_Cloud_Message_GroupMemberSettingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    163;

  friend void swap(Cloud_Message_GroupMemberSettingResponse& a, Cloud_Message_GroupMemberSettingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_GroupMemberSettingResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_GroupMemberSettingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_GroupMemberSettingResponse* New() const final {
    return CreateMaybeMessage<Cloud_Message_GroupMemberSettingResponse>(nullptr);
  }

  Cloud_Message_GroupMemberSettingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_GroupMemberSettingResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_GroupMemberSettingResponse& from);
  void MergeFrom(const Cloud_Message_GroupMemberSettingResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_GroupMemberSettingResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.GroupMemberSettingResponse";
  }
  protected:
  explicit Cloud_Message_GroupMemberSettingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.GroupMemberSettingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_GroupMemberListGetRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.GroupMemberListGetRequest) */ {
 public:
  inline Cloud_Message_GroupMemberListGetRequest() : Cloud_Message_GroupMemberListGetRequest(nullptr) {}
  virtual ~Cloud_Message_GroupMemberListGetRequest();

  Cloud_Message_GroupMemberListGetRequest(const Cloud_Message_GroupMemberListGetRequest& from);
  Cloud_Message_GroupMemberListGetRequest(Cloud_Message_GroupMemberListGetRequest&& from) noexcept
    : Cloud_Message_GroupMemberListGetRequest() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_GroupMemberListGetRequest& operator=(const Cloud_Message_GroupMemberListGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_GroupMemberListGetRequest& operator=(Cloud_Message_GroupMemberListGetRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_GroupMemberListGetRequest& default_instance();

  static inline const Cloud_Message_GroupMemberListGetRequest* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_GroupMemberListGetRequest*>(
               &_Cloud_Message_GroupMemberListGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    164;

  friend void swap(Cloud_Message_GroupMemberListGetRequest& a, Cloud_Message_GroupMemberListGetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_GroupMemberListGetRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_GroupMemberListGetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_GroupMemberListGetRequest* New() const final {
    return CreateMaybeMessage<Cloud_Message_GroupMemberListGetRequest>(nullptr);
  }

  Cloud_Message_GroupMemberListGetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_GroupMemberListGetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_GroupMemberListGetRequest& from);
  void MergeFrom(const Cloud_Message_GroupMemberListGetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_GroupMemberListGetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.GroupMemberListGetRequest";
  }
  protected:
  explicit Cloud_Message_GroupMemberListGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kSyncCookieFieldNumber = 2,
  };
  // string groupId = 1;
  void clear_groupid();
  const std::string& groupid() const;
  void set_groupid(const std::string& value);
  void set_groupid(std::string&& value);
  void set_groupid(const char* value);
  void set_groupid(const char* value, size_t size);
  std::string* mutable_groupid();
  std::string* release_groupid();
  void set_allocated_groupid(std::string* groupid);
  private:
  const std::string& _internal_groupid() const;
  void _internal_set_groupid(const std::string& value);
  std::string* _internal_mutable_groupid();
  public:

  // .AcFunDanmu.Im.Basic.SyncCookie syncCookie = 2;
  bool has_synccookie() const;
  private:
  bool _internal_has_synccookie() const;
  public:
  void clear_synccookie();
  const ::AcFunDanmu::Im::Basic_SyncCookie& synccookie() const;
  ::AcFunDanmu::Im::Basic_SyncCookie* release_synccookie();
  ::AcFunDanmu::Im::Basic_SyncCookie* mutable_synccookie();
  void set_allocated_synccookie(::AcFunDanmu::Im::Basic_SyncCookie* synccookie);
  private:
  const ::AcFunDanmu::Im::Basic_SyncCookie& _internal_synccookie() const;
  ::AcFunDanmu::Im::Basic_SyncCookie* _internal_mutable_synccookie();
  public:
  void unsafe_arena_set_allocated_synccookie(
      ::AcFunDanmu::Im::Basic_SyncCookie* synccookie);
  ::AcFunDanmu::Im::Basic_SyncCookie* unsafe_arena_release_synccookie();

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.GroupMemberListGetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupid_;
  ::AcFunDanmu::Im::Basic_SyncCookie* synccookie_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_GroupMemberListGetResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.GroupMemberListGetResponse) */ {
 public:
  inline Cloud_Message_GroupMemberListGetResponse() : Cloud_Message_GroupMemberListGetResponse(nullptr) {}
  virtual ~Cloud_Message_GroupMemberListGetResponse();

  Cloud_Message_GroupMemberListGetResponse(const Cloud_Message_GroupMemberListGetResponse& from);
  Cloud_Message_GroupMemberListGetResponse(Cloud_Message_GroupMemberListGetResponse&& from) noexcept
    : Cloud_Message_GroupMemberListGetResponse() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_GroupMemberListGetResponse& operator=(const Cloud_Message_GroupMemberListGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_GroupMemberListGetResponse& operator=(Cloud_Message_GroupMemberListGetResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_GroupMemberListGetResponse& default_instance();

  static inline const Cloud_Message_GroupMemberListGetResponse* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_GroupMemberListGetResponse*>(
               &_Cloud_Message_GroupMemberListGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    165;

  friend void swap(Cloud_Message_GroupMemberListGetResponse& a, Cloud_Message_GroupMemberListGetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_GroupMemberListGetResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_GroupMemberListGetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_GroupMemberListGetResponse* New() const final {
    return CreateMaybeMessage<Cloud_Message_GroupMemberListGetResponse>(nullptr);
  }

  Cloud_Message_GroupMemberListGetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_GroupMemberListGetResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_GroupMemberListGetResponse& from);
  void MergeFrom(const Cloud_Message_GroupMemberListGetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_GroupMemberListGetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.GroupMemberListGetResponse";
  }
  protected:
  explicit Cloud_Message_GroupMemberListGetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 1,
    kSyncCookieFieldNumber = 2,
  };
  // repeated .AcFunDanmu.Im.Cloud.Message.GroupMember members = 1;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  ::AcFunDanmu::Im::Cloud_Message_GroupMember* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud_Message_GroupMember >*
      mutable_members();
  private:
  const ::AcFunDanmu::Im::Cloud_Message_GroupMember& _internal_members(int index) const;
  ::AcFunDanmu::Im::Cloud_Message_GroupMember* _internal_add_members();
  public:
  const ::AcFunDanmu::Im::Cloud_Message_GroupMember& members(int index) const;
  ::AcFunDanmu::Im::Cloud_Message_GroupMember* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud_Message_GroupMember >&
      members() const;

  // .AcFunDanmu.Im.Basic.SyncCookie syncCookie = 2;
  bool has_synccookie() const;
  private:
  bool _internal_has_synccookie() const;
  public:
  void clear_synccookie();
  const ::AcFunDanmu::Im::Basic_SyncCookie& synccookie() const;
  ::AcFunDanmu::Im::Basic_SyncCookie* release_synccookie();
  ::AcFunDanmu::Im::Basic_SyncCookie* mutable_synccookie();
  void set_allocated_synccookie(::AcFunDanmu::Im::Basic_SyncCookie* synccookie);
  private:
  const ::AcFunDanmu::Im::Basic_SyncCookie& _internal_synccookie() const;
  ::AcFunDanmu::Im::Basic_SyncCookie* _internal_mutable_synccookie();
  public:
  void unsafe_arena_set_allocated_synccookie(
      ::AcFunDanmu::Im::Basic_SyncCookie* synccookie);
  ::AcFunDanmu::Im::Basic_SyncCookie* unsafe_arena_release_synccookie();

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.GroupMemberListGetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud_Message_GroupMember > members_;
  ::AcFunDanmu::Im::Basic_SyncCookie* synccookie_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_GroupMemberGetRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.GroupMemberGetRequest) */ {
 public:
  inline Cloud_Message_GroupMemberGetRequest() : Cloud_Message_GroupMemberGetRequest(nullptr) {}
  virtual ~Cloud_Message_GroupMemberGetRequest();

  Cloud_Message_GroupMemberGetRequest(const Cloud_Message_GroupMemberGetRequest& from);
  Cloud_Message_GroupMemberGetRequest(Cloud_Message_GroupMemberGetRequest&& from) noexcept
    : Cloud_Message_GroupMemberGetRequest() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_GroupMemberGetRequest& operator=(const Cloud_Message_GroupMemberGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_GroupMemberGetRequest& operator=(Cloud_Message_GroupMemberGetRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_GroupMemberGetRequest& default_instance();

  static inline const Cloud_Message_GroupMemberGetRequest* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_GroupMemberGetRequest*>(
               &_Cloud_Message_GroupMemberGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    166;

  friend void swap(Cloud_Message_GroupMemberGetRequest& a, Cloud_Message_GroupMemberGetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_GroupMemberGetRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_GroupMemberGetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_GroupMemberGetRequest* New() const final {
    return CreateMaybeMessage<Cloud_Message_GroupMemberGetRequest>(nullptr);
  }

  Cloud_Message_GroupMemberGetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_GroupMemberGetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_GroupMemberGetRequest& from);
  void MergeFrom(const Cloud_Message_GroupMemberGetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_GroupMemberGetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.GroupMemberGetRequest";
  }
  protected:
  explicit Cloud_Message_GroupMemberGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kUserFieldNumber = 2,
  };
  // string groupId = 1;
  void clear_groupid();
  const std::string& groupid() const;
  void set_groupid(const std::string& value);
  void set_groupid(std::string&& value);
  void set_groupid(const char* value);
  void set_groupid(const char* value, size_t size);
  std::string* mutable_groupid();
  std::string* release_groupid();
  void set_allocated_groupid(std::string* groupid);
  private:
  const std::string& _internal_groupid() const;
  void _internal_set_groupid(const std::string& value);
  std::string* _internal_mutable_groupid();
  public:

  // .AcFunDanmu.Im.Basic.User user = 2;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::AcFunDanmu::Im::Basic_User& user() const;
  ::AcFunDanmu::Im::Basic_User* release_user();
  ::AcFunDanmu::Im::Basic_User* mutable_user();
  void set_allocated_user(::AcFunDanmu::Im::Basic_User* user);
  private:
  const ::AcFunDanmu::Im::Basic_User& _internal_user() const;
  ::AcFunDanmu::Im::Basic_User* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::AcFunDanmu::Im::Basic_User* user);
  ::AcFunDanmu::Im::Basic_User* unsafe_arena_release_user();

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.GroupMemberGetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupid_;
  ::AcFunDanmu::Im::Basic_User* user_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_GroupMemberGetResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.GroupMemberGetResponse) */ {
 public:
  inline Cloud_Message_GroupMemberGetResponse() : Cloud_Message_GroupMemberGetResponse(nullptr) {}
  virtual ~Cloud_Message_GroupMemberGetResponse();

  Cloud_Message_GroupMemberGetResponse(const Cloud_Message_GroupMemberGetResponse& from);
  Cloud_Message_GroupMemberGetResponse(Cloud_Message_GroupMemberGetResponse&& from) noexcept
    : Cloud_Message_GroupMemberGetResponse() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_GroupMemberGetResponse& operator=(const Cloud_Message_GroupMemberGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_GroupMemberGetResponse& operator=(Cloud_Message_GroupMemberGetResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_GroupMemberGetResponse& default_instance();

  static inline const Cloud_Message_GroupMemberGetResponse* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_GroupMemberGetResponse*>(
               &_Cloud_Message_GroupMemberGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    167;

  friend void swap(Cloud_Message_GroupMemberGetResponse& a, Cloud_Message_GroupMemberGetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_GroupMemberGetResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_GroupMemberGetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_GroupMemberGetResponse* New() const final {
    return CreateMaybeMessage<Cloud_Message_GroupMemberGetResponse>(nullptr);
  }

  Cloud_Message_GroupMemberGetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_GroupMemberGetResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_GroupMemberGetResponse& from);
  void MergeFrom(const Cloud_Message_GroupMemberGetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_GroupMemberGetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.GroupMemberGetResponse";
  }
  protected:
  explicit Cloud_Message_GroupMemberGetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemberFieldNumber = 1,
  };
  // .AcFunDanmu.Im.Cloud.Message.GroupMember member = 1;
  bool has_member() const;
  private:
  bool _internal_has_member() const;
  public:
  void clear_member();
  const ::AcFunDanmu::Im::Cloud_Message_GroupMember& member() const;
  ::AcFunDanmu::Im::Cloud_Message_GroupMember* release_member();
  ::AcFunDanmu::Im::Cloud_Message_GroupMember* mutable_member();
  void set_allocated_member(::AcFunDanmu::Im::Cloud_Message_GroupMember* member);
  private:
  const ::AcFunDanmu::Im::Cloud_Message_GroupMember& _internal_member() const;
  ::AcFunDanmu::Im::Cloud_Message_GroupMember* _internal_mutable_member();
  public:
  void unsafe_arena_set_allocated_member(
      ::AcFunDanmu::Im::Cloud_Message_GroupMember* member);
  ::AcFunDanmu::Im::Cloud_Message_GroupMember* unsafe_arena_release_member();

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.GroupMemberGetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::AcFunDanmu::Im::Cloud_Message_GroupMember* member_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_UserGroupListRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.UserGroupListRequest) */ {
 public:
  inline Cloud_Message_UserGroupListRequest() : Cloud_Message_UserGroupListRequest(nullptr) {}
  virtual ~Cloud_Message_UserGroupListRequest();

  Cloud_Message_UserGroupListRequest(const Cloud_Message_UserGroupListRequest& from);
  Cloud_Message_UserGroupListRequest(Cloud_Message_UserGroupListRequest&& from) noexcept
    : Cloud_Message_UserGroupListRequest() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_UserGroupListRequest& operator=(const Cloud_Message_UserGroupListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_UserGroupListRequest& operator=(Cloud_Message_UserGroupListRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_UserGroupListRequest& default_instance();

  static inline const Cloud_Message_UserGroupListRequest* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_UserGroupListRequest*>(
               &_Cloud_Message_UserGroupListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    168;

  friend void swap(Cloud_Message_UserGroupListRequest& a, Cloud_Message_UserGroupListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_UserGroupListRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_UserGroupListRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_UserGroupListRequest* New() const final {
    return CreateMaybeMessage<Cloud_Message_UserGroupListRequest>(nullptr);
  }

  Cloud_Message_UserGroupListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_UserGroupListRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_UserGroupListRequest& from);
  void MergeFrom(const Cloud_Message_UserGroupListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_UserGroupListRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.UserGroupListRequest";
  }
  protected:
  explicit Cloud_Message_UserGroupListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSyncCookieFieldNumber = 2,
  };
  // .AcFunDanmu.Im.Basic.SyncCookie syncCookie = 2;
  bool has_synccookie() const;
  private:
  bool _internal_has_synccookie() const;
  public:
  void clear_synccookie();
  const ::AcFunDanmu::Im::Basic_SyncCookie& synccookie() const;
  ::AcFunDanmu::Im::Basic_SyncCookie* release_synccookie();
  ::AcFunDanmu::Im::Basic_SyncCookie* mutable_synccookie();
  void set_allocated_synccookie(::AcFunDanmu::Im::Basic_SyncCookie* synccookie);
  private:
  const ::AcFunDanmu::Im::Basic_SyncCookie& _internal_synccookie() const;
  ::AcFunDanmu::Im::Basic_SyncCookie* _internal_mutable_synccookie();
  public:
  void unsafe_arena_set_allocated_synccookie(
      ::AcFunDanmu::Im::Basic_SyncCookie* synccookie);
  ::AcFunDanmu::Im::Basic_SyncCookie* unsafe_arena_release_synccookie();

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.UserGroupListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::AcFunDanmu::Im::Basic_SyncCookie* synccookie_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_UserGroupListResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.UserGroupListResponse) */ {
 public:
  inline Cloud_Message_UserGroupListResponse() : Cloud_Message_UserGroupListResponse(nullptr) {}
  virtual ~Cloud_Message_UserGroupListResponse();

  Cloud_Message_UserGroupListResponse(const Cloud_Message_UserGroupListResponse& from);
  Cloud_Message_UserGroupListResponse(Cloud_Message_UserGroupListResponse&& from) noexcept
    : Cloud_Message_UserGroupListResponse() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_UserGroupListResponse& operator=(const Cloud_Message_UserGroupListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_UserGroupListResponse& operator=(Cloud_Message_UserGroupListResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_UserGroupListResponse& default_instance();

  static inline const Cloud_Message_UserGroupListResponse* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_UserGroupListResponse*>(
               &_Cloud_Message_UserGroupListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    169;

  friend void swap(Cloud_Message_UserGroupListResponse& a, Cloud_Message_UserGroupListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_UserGroupListResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_UserGroupListResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_UserGroupListResponse* New() const final {
    return CreateMaybeMessage<Cloud_Message_UserGroupListResponse>(nullptr);
  }

  Cloud_Message_UserGroupListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_UserGroupListResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_UserGroupListResponse& from);
  void MergeFrom(const Cloud_Message_UserGroupListResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_UserGroupListResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.UserGroupListResponse";
  }
  protected:
  explicit Cloud_Message_UserGroupListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserGroupInfoFieldNumber = 1,
    kSyncCookieFieldNumber = 2,
  };
  // repeated .AcFunDanmu.Im.Cloud.Message.UserGroupInfo userGroupInfo = 1;
  int usergroupinfo_size() const;
  private:
  int _internal_usergroupinfo_size() const;
  public:
  void clear_usergroupinfo();
  ::AcFunDanmu::Im::Cloud_Message_UserGroupInfo* mutable_usergroupinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud_Message_UserGroupInfo >*
      mutable_usergroupinfo();
  private:
  const ::AcFunDanmu::Im::Cloud_Message_UserGroupInfo& _internal_usergroupinfo(int index) const;
  ::AcFunDanmu::Im::Cloud_Message_UserGroupInfo* _internal_add_usergroupinfo();
  public:
  const ::AcFunDanmu::Im::Cloud_Message_UserGroupInfo& usergroupinfo(int index) const;
  ::AcFunDanmu::Im::Cloud_Message_UserGroupInfo* add_usergroupinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud_Message_UserGroupInfo >&
      usergroupinfo() const;

  // .AcFunDanmu.Im.Basic.SyncCookie syncCookie = 2;
  bool has_synccookie() const;
  private:
  bool _internal_has_synccookie() const;
  public:
  void clear_synccookie();
  const ::AcFunDanmu::Im::Basic_SyncCookie& synccookie() const;
  ::AcFunDanmu::Im::Basic_SyncCookie* release_synccookie();
  ::AcFunDanmu::Im::Basic_SyncCookie* mutable_synccookie();
  void set_allocated_synccookie(::AcFunDanmu::Im::Basic_SyncCookie* synccookie);
  private:
  const ::AcFunDanmu::Im::Basic_SyncCookie& _internal_synccookie() const;
  ::AcFunDanmu::Im::Basic_SyncCookie* _internal_mutable_synccookie();
  public:
  void unsafe_arena_set_allocated_synccookie(
      ::AcFunDanmu::Im::Basic_SyncCookie* synccookie);
  ::AcFunDanmu::Im::Basic_SyncCookie* unsafe_arena_release_synccookie();

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.UserGroupListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud_Message_UserGroupInfo > usergroupinfo_;
  ::AcFunDanmu::Im::Basic_SyncCookie* synccookie_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_UserGroupRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.UserGroupRecord) */ {
 public:
  inline Cloud_Message_UserGroupRecord() : Cloud_Message_UserGroupRecord(nullptr) {}
  virtual ~Cloud_Message_UserGroupRecord();

  Cloud_Message_UserGroupRecord(const Cloud_Message_UserGroupRecord& from);
  Cloud_Message_UserGroupRecord(Cloud_Message_UserGroupRecord&& from) noexcept
    : Cloud_Message_UserGroupRecord() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_UserGroupRecord& operator=(const Cloud_Message_UserGroupRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_UserGroupRecord& operator=(Cloud_Message_UserGroupRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_UserGroupRecord& default_instance();

  static inline const Cloud_Message_UserGroupRecord* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_UserGroupRecord*>(
               &_Cloud_Message_UserGroupRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    170;

  friend void swap(Cloud_Message_UserGroupRecord& a, Cloud_Message_UserGroupRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_UserGroupRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_UserGroupRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_UserGroupRecord* New() const final {
    return CreateMaybeMessage<Cloud_Message_UserGroupRecord>(nullptr);
  }

  Cloud_Message_UserGroupRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_UserGroupRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_UserGroupRecord& from);
  void MergeFrom(const Cloud_Message_UserGroupRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_UserGroupRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.UserGroupRecord";
  }
  protected:
  explicit Cloud_Message_UserGroupRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kUpdateTimeFieldNumber = 2,
  };
  // string groupId = 1;
  void clear_groupid();
  const std::string& groupid() const;
  void set_groupid(const std::string& value);
  void set_groupid(std::string&& value);
  void set_groupid(const char* value);
  void set_groupid(const char* value, size_t size);
  std::string* mutable_groupid();
  std::string* release_groupid();
  void set_allocated_groupid(std::string* groupid);
  private:
  const std::string& _internal_groupid() const;
  void _internal_set_groupid(const std::string& value);
  std::string* _internal_mutable_groupid();
  public:

  // int64 updateTime = 2;
  void clear_updatetime();
  ::PROTOBUF_NAMESPACE_ID::int64 updatetime() const;
  void set_updatetime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_updatetime() const;
  void _internal_set_updatetime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.UserGroupRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupid_;
  ::PROTOBUF_NAMESPACE_ID::int64 updatetime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_UserGroupGetRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.UserGroupGetRequest) */ {
 public:
  inline Cloud_Message_UserGroupGetRequest() : Cloud_Message_UserGroupGetRequest(nullptr) {}
  virtual ~Cloud_Message_UserGroupGetRequest();

  Cloud_Message_UserGroupGetRequest(const Cloud_Message_UserGroupGetRequest& from);
  Cloud_Message_UserGroupGetRequest(Cloud_Message_UserGroupGetRequest&& from) noexcept
    : Cloud_Message_UserGroupGetRequest() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_UserGroupGetRequest& operator=(const Cloud_Message_UserGroupGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_UserGroupGetRequest& operator=(Cloud_Message_UserGroupGetRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_UserGroupGetRequest& default_instance();

  static inline const Cloud_Message_UserGroupGetRequest* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_UserGroupGetRequest*>(
               &_Cloud_Message_UserGroupGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    171;

  friend void swap(Cloud_Message_UserGroupGetRequest& a, Cloud_Message_UserGroupGetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_UserGroupGetRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_UserGroupGetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_UserGroupGetRequest* New() const final {
    return CreateMaybeMessage<Cloud_Message_UserGroupGetRequest>(nullptr);
  }

  Cloud_Message_UserGroupGetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_UserGroupGetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_UserGroupGetRequest& from);
  void MergeFrom(const Cloud_Message_UserGroupGetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_UserGroupGetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.UserGroupGetRequest";
  }
  protected:
  explicit Cloud_Message_UserGroupGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
  };
  // repeated string groupId = 1;
  int groupid_size() const;
  private:
  int _internal_groupid_size() const;
  public:
  void clear_groupid();
  const std::string& groupid(int index) const;
  std::string* mutable_groupid(int index);
  void set_groupid(int index, const std::string& value);
  void set_groupid(int index, std::string&& value);
  void set_groupid(int index, const char* value);
  void set_groupid(int index, const char* value, size_t size);
  std::string* add_groupid();
  void add_groupid(const std::string& value);
  void add_groupid(std::string&& value);
  void add_groupid(const char* value);
  void add_groupid(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& groupid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_groupid();
  private:
  const std::string& _internal_groupid(int index) const;
  std::string* _internal_add_groupid();
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.UserGroupGetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> groupid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_UserGroupGetResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.UserGroupGetResponse) */ {
 public:
  inline Cloud_Message_UserGroupGetResponse() : Cloud_Message_UserGroupGetResponse(nullptr) {}
  virtual ~Cloud_Message_UserGroupGetResponse();

  Cloud_Message_UserGroupGetResponse(const Cloud_Message_UserGroupGetResponse& from);
  Cloud_Message_UserGroupGetResponse(Cloud_Message_UserGroupGetResponse&& from) noexcept
    : Cloud_Message_UserGroupGetResponse() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_UserGroupGetResponse& operator=(const Cloud_Message_UserGroupGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_UserGroupGetResponse& operator=(Cloud_Message_UserGroupGetResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_UserGroupGetResponse& default_instance();

  static inline const Cloud_Message_UserGroupGetResponse* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_UserGroupGetResponse*>(
               &_Cloud_Message_UserGroupGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    172;

  friend void swap(Cloud_Message_UserGroupGetResponse& a, Cloud_Message_UserGroupGetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_UserGroupGetResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_UserGroupGetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_UserGroupGetResponse* New() const final {
    return CreateMaybeMessage<Cloud_Message_UserGroupGetResponse>(nullptr);
  }

  Cloud_Message_UserGroupGetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_UserGroupGetResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_UserGroupGetResponse& from);
  void MergeFrom(const Cloud_Message_UserGroupGetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_UserGroupGetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.UserGroupGetResponse";
  }
  protected:
  explicit Cloud_Message_UserGroupGetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserGroupInfoFieldNumber = 1,
  };
  // repeated .AcFunDanmu.Im.Cloud.Message.UserGroupInfo userGroupInfo = 1;
  int usergroupinfo_size() const;
  private:
  int _internal_usergroupinfo_size() const;
  public:
  void clear_usergroupinfo();
  ::AcFunDanmu::Im::Cloud_Message_UserGroupInfo* mutable_usergroupinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud_Message_UserGroupInfo >*
      mutable_usergroupinfo();
  private:
  const ::AcFunDanmu::Im::Cloud_Message_UserGroupInfo& _internal_usergroupinfo(int index) const;
  ::AcFunDanmu::Im::Cloud_Message_UserGroupInfo* _internal_add_usergroupinfo();
  public:
  const ::AcFunDanmu::Im::Cloud_Message_UserGroupInfo& usergroupinfo(int index) const;
  ::AcFunDanmu::Im::Cloud_Message_UserGroupInfo* add_usergroupinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud_Message_UserGroupInfo >&
      usergroupinfo() const;

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.UserGroupGetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud_Message_UserGroupInfo > usergroupinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_UserGroupInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.UserGroupInfo) */ {
 public:
  inline Cloud_Message_UserGroupInfo() : Cloud_Message_UserGroupInfo(nullptr) {}
  virtual ~Cloud_Message_UserGroupInfo();

  Cloud_Message_UserGroupInfo(const Cloud_Message_UserGroupInfo& from);
  Cloud_Message_UserGroupInfo(Cloud_Message_UserGroupInfo&& from) noexcept
    : Cloud_Message_UserGroupInfo() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_UserGroupInfo& operator=(const Cloud_Message_UserGroupInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_UserGroupInfo& operator=(Cloud_Message_UserGroupInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_UserGroupInfo& default_instance();

  static inline const Cloud_Message_UserGroupInfo* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_UserGroupInfo*>(
               &_Cloud_Message_UserGroupInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    173;

  friend void swap(Cloud_Message_UserGroupInfo& a, Cloud_Message_UserGroupInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_UserGroupInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_UserGroupInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_UserGroupInfo* New() const final {
    return CreateMaybeMessage<Cloud_Message_UserGroupInfo>(nullptr);
  }

  Cloud_Message_UserGroupInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_UserGroupInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_UserGroupInfo& from);
  void MergeFrom(const Cloud_Message_UserGroupInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_UserGroupInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.UserGroupInfo";
  }
  protected:
  explicit Cloud_Message_UserGroupInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupInfoFieldNumber = 1,
    kGroupMemberFieldNumber = 2,
  };
  // .AcFunDanmu.Im.Cloud.Message.GroupInfo groupInfo = 1;
  bool has_groupinfo() const;
  private:
  bool _internal_has_groupinfo() const;
  public:
  void clear_groupinfo();
  const ::AcFunDanmu::Im::Cloud_Message_GroupInfo& groupinfo() const;
  ::AcFunDanmu::Im::Cloud_Message_GroupInfo* release_groupinfo();
  ::AcFunDanmu::Im::Cloud_Message_GroupInfo* mutable_groupinfo();
  void set_allocated_groupinfo(::AcFunDanmu::Im::Cloud_Message_GroupInfo* groupinfo);
  private:
  const ::AcFunDanmu::Im::Cloud_Message_GroupInfo& _internal_groupinfo() const;
  ::AcFunDanmu::Im::Cloud_Message_GroupInfo* _internal_mutable_groupinfo();
  public:
  void unsafe_arena_set_allocated_groupinfo(
      ::AcFunDanmu::Im::Cloud_Message_GroupInfo* groupinfo);
  ::AcFunDanmu::Im::Cloud_Message_GroupInfo* unsafe_arena_release_groupinfo();

  // .AcFunDanmu.Im.Cloud.Message.GroupMember groupMember = 2;
  bool has_groupmember() const;
  private:
  bool _internal_has_groupmember() const;
  public:
  void clear_groupmember();
  const ::AcFunDanmu::Im::Cloud_Message_GroupMember& groupmember() const;
  ::AcFunDanmu::Im::Cloud_Message_GroupMember* release_groupmember();
  ::AcFunDanmu::Im::Cloud_Message_GroupMember* mutable_groupmember();
  void set_allocated_groupmember(::AcFunDanmu::Im::Cloud_Message_GroupMember* groupmember);
  private:
  const ::AcFunDanmu::Im::Cloud_Message_GroupMember& _internal_groupmember() const;
  ::AcFunDanmu::Im::Cloud_Message_GroupMember* _internal_mutable_groupmember();
  public:
  void unsafe_arena_set_allocated_groupmember(
      ::AcFunDanmu::Im::Cloud_Message_GroupMember* groupmember);
  ::AcFunDanmu::Im::Cloud_Message_GroupMember* unsafe_arena_release_groupmember();

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.UserGroupInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::AcFunDanmu::Im::Cloud_Message_GroupInfo* groupinfo_;
  ::AcFunDanmu::Im::Cloud_Message_GroupMember* groupmember_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_GroupMember PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.GroupMember) */ {
 public:
  inline Cloud_Message_GroupMember() : Cloud_Message_GroupMember(nullptr) {}
  virtual ~Cloud_Message_GroupMember();

  Cloud_Message_GroupMember(const Cloud_Message_GroupMember& from);
  Cloud_Message_GroupMember(Cloud_Message_GroupMember&& from) noexcept
    : Cloud_Message_GroupMember() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_GroupMember& operator=(const Cloud_Message_GroupMember& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_GroupMember& operator=(Cloud_Message_GroupMember&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_GroupMember& default_instance();

  static inline const Cloud_Message_GroupMember* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_GroupMember*>(
               &_Cloud_Message_GroupMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    174;

  friend void swap(Cloud_Message_GroupMember& a, Cloud_Message_GroupMember& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_GroupMember* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_GroupMember* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_GroupMember* New() const final {
    return CreateMaybeMessage<Cloud_Message_GroupMember>(nullptr);
  }

  Cloud_Message_GroupMember* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_GroupMember>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_GroupMember& from);
  void MergeFrom(const Cloud_Message_GroupMember& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_GroupMember* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.GroupMember";
  }
  protected:
  explicit Cloud_Message_GroupMember(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Cloud_Message_GroupMember_GroupMemberStatus GroupMemberStatus;
  static constexpr GroupMemberStatus UNKNOWN_MEMBER_STATUS =
    Cloud_Message_GroupMember_GroupMemberStatus_UNKNOWN_MEMBER_STATUS;
  static constexpr GroupMemberStatus NORMAL =
    Cloud_Message_GroupMember_GroupMemberStatus_NORMAL;
  static constexpr GroupMemberStatus QUITTED =
    Cloud_Message_GroupMember_GroupMemberStatus_QUITTED;
  static constexpr GroupMemberStatus KICKED =
    Cloud_Message_GroupMember_GroupMemberStatus_KICKED;
  static constexpr GroupMemberStatus DISMISSED =
    Cloud_Message_GroupMember_GroupMemberStatus_DISMISSED;
  static inline bool GroupMemberStatus_IsValid(int value) {
    return Cloud_Message_GroupMember_GroupMemberStatus_IsValid(value);
  }
  static constexpr GroupMemberStatus GroupMemberStatus_MIN =
    Cloud_Message_GroupMember_GroupMemberStatus_GroupMemberStatus_MIN;
  static constexpr GroupMemberStatus GroupMemberStatus_MAX =
    Cloud_Message_GroupMember_GroupMemberStatus_GroupMemberStatus_MAX;
  static constexpr int GroupMemberStatus_ARRAYSIZE =
    Cloud_Message_GroupMember_GroupMemberStatus_GroupMemberStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  GroupMemberStatus_descriptor() {
    return Cloud_Message_GroupMember_GroupMemberStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& GroupMemberStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, GroupMemberStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function GroupMemberStatus_Name.");
    return Cloud_Message_GroupMember_GroupMemberStatus_Name(enum_t_value);
  }
  static inline bool GroupMemberStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      GroupMemberStatus* value) {
    return Cloud_Message_GroupMember_GroupMemberStatus_Parse(name, value);
  }

  typedef Cloud_Message_GroupMember_GroupMemberRole GroupMemberRole;
  static constexpr GroupMemberRole UNKNOWN_ROLE =
    Cloud_Message_GroupMember_GroupMemberRole_UNKNOWN_ROLE;
  static constexpr GroupMemberRole COMMON =
    Cloud_Message_GroupMember_GroupMemberRole_COMMON;
  static constexpr GroupMemberRole ADMIN =
    Cloud_Message_GroupMember_GroupMemberRole_ADMIN;
  static inline bool GroupMemberRole_IsValid(int value) {
    return Cloud_Message_GroupMember_GroupMemberRole_IsValid(value);
  }
  static constexpr GroupMemberRole GroupMemberRole_MIN =
    Cloud_Message_GroupMember_GroupMemberRole_GroupMemberRole_MIN;
  static constexpr GroupMemberRole GroupMemberRole_MAX =
    Cloud_Message_GroupMember_GroupMemberRole_GroupMemberRole_MAX;
  static constexpr int GroupMemberRole_ARRAYSIZE =
    Cloud_Message_GroupMember_GroupMemberRole_GroupMemberRole_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  GroupMemberRole_descriptor() {
    return Cloud_Message_GroupMember_GroupMemberRole_descriptor();
  }
  template<typename T>
  static inline const std::string& GroupMemberRole_Name(T enum_t_value) {
    static_assert(::std::is_same<T, GroupMemberRole>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function GroupMemberRole_Name.");
    return Cloud_Message_GroupMember_GroupMemberRole_Name(enum_t_value);
  }
  static inline bool GroupMemberRole_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      GroupMemberRole* value) {
    return Cloud_Message_GroupMember_GroupMemberRole_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 2,
    kUserFieldNumber = 1,
    kAntiDisturbingFieldNumber = 3,
    kStatusFieldNumber = 4,
    kInviterIdFieldNumber = 5,
    kJoinTimeFieldNumber = 6,
    kCreateTimeFieldNumber = 7,
    kUpdateTimeFieldNumber = 8,
    kRoleFieldNumber = 9,
    kFindTypeFieldNumber = 10,
  };
  // string nickname = 2;
  void clear_nickname();
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // .AcFunDanmu.Im.Basic.User user = 1;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::AcFunDanmu::Im::Basic_User& user() const;
  ::AcFunDanmu::Im::Basic_User* release_user();
  ::AcFunDanmu::Im::Basic_User* mutable_user();
  void set_allocated_user(::AcFunDanmu::Im::Basic_User* user);
  private:
  const ::AcFunDanmu::Im::Basic_User& _internal_user() const;
  ::AcFunDanmu::Im::Basic_User* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::AcFunDanmu::Im::Basic_User* user);
  ::AcFunDanmu::Im::Basic_User* unsafe_arena_release_user();

  // bool antiDisturbing = 3;
  void clear_antidisturbing();
  bool antidisturbing() const;
  void set_antidisturbing(bool value);
  private:
  bool _internal_antidisturbing() const;
  void _internal_set_antidisturbing(bool value);
  public:

  // .AcFunDanmu.Im.Cloud.Message.GroupMember.GroupMemberStatus status = 4;
  void clear_status();
  ::AcFunDanmu::Im::Cloud_Message_GroupMember_GroupMemberStatus status() const;
  void set_status(::AcFunDanmu::Im::Cloud_Message_GroupMember_GroupMemberStatus value);
  private:
  ::AcFunDanmu::Im::Cloud_Message_GroupMember_GroupMemberStatus _internal_status() const;
  void _internal_set_status(::AcFunDanmu::Im::Cloud_Message_GroupMember_GroupMemberStatus value);
  public:

  // int64 inviterId = 5;
  void clear_inviterid();
  ::PROTOBUF_NAMESPACE_ID::int64 inviterid() const;
  void set_inviterid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_inviterid() const;
  void _internal_set_inviterid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 joinTime = 6;
  void clear_jointime();
  ::PROTOBUF_NAMESPACE_ID::int64 jointime() const;
  void set_jointime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_jointime() const;
  void _internal_set_jointime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 createTime = 7;
  void clear_createtime();
  ::PROTOBUF_NAMESPACE_ID::int64 createtime() const;
  void set_createtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_createtime() const;
  void _internal_set_createtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 updateTime = 8;
  void clear_updatetime();
  ::PROTOBUF_NAMESPACE_ID::int64 updatetime() const;
  void set_updatetime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_updatetime() const;
  void _internal_set_updatetime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .AcFunDanmu.Im.Cloud.Message.GroupMember.GroupMemberRole role = 9;
  void clear_role();
  ::AcFunDanmu::Im::Cloud_Message_GroupMember_GroupMemberRole role() const;
  void set_role(::AcFunDanmu::Im::Cloud_Message_GroupMember_GroupMemberRole value);
  private:
  ::AcFunDanmu::Im::Cloud_Message_GroupMember_GroupMemberRole _internal_role() const;
  void _internal_set_role(::AcFunDanmu::Im::Cloud_Message_GroupMember_GroupMemberRole value);
  public:

  // .AcFunDanmu.Im.Cloud.Message.GroupFindType findType = 10;
  void clear_findtype();
  ::AcFunDanmu::Im::Cloud_Message_GroupFindType findtype() const;
  void set_findtype(::AcFunDanmu::Im::Cloud_Message_GroupFindType value);
  private:
  ::AcFunDanmu::Im::Cloud_Message_GroupFindType _internal_findtype() const;
  void _internal_set_findtype(::AcFunDanmu::Im::Cloud_Message_GroupFindType value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.GroupMember)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::AcFunDanmu::Im::Basic_User* user_;
  bool antidisturbing_;
  int status_;
  ::PROTOBUF_NAMESPACE_ID::int64 inviterid_;
  ::PROTOBUF_NAMESPACE_ID::int64 jointime_;
  ::PROTOBUF_NAMESPACE_ID::int64 createtime_;
  ::PROTOBUF_NAMESPACE_ID::int64 updatetime_;
  int role_;
  int findtype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_GroupInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.GroupInfo) */ {
 public:
  inline Cloud_Message_GroupInfo() : Cloud_Message_GroupInfo(nullptr) {}
  virtual ~Cloud_Message_GroupInfo();

  Cloud_Message_GroupInfo(const Cloud_Message_GroupInfo& from);
  Cloud_Message_GroupInfo(Cloud_Message_GroupInfo&& from) noexcept
    : Cloud_Message_GroupInfo() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_GroupInfo& operator=(const Cloud_Message_GroupInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_GroupInfo& operator=(Cloud_Message_GroupInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_GroupInfo& default_instance();

  static inline const Cloud_Message_GroupInfo* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_GroupInfo*>(
               &_Cloud_Message_GroupInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    175;

  friend void swap(Cloud_Message_GroupInfo& a, Cloud_Message_GroupInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_GroupInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_GroupInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_GroupInfo* New() const final {
    return CreateMaybeMessage<Cloud_Message_GroupInfo>(nullptr);
  }

  Cloud_Message_GroupInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_GroupInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_GroupInfo& from);
  void MergeFrom(const Cloud_Message_GroupInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_GroupInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.GroupInfo";
  }
  protected:
  explicit Cloud_Message_GroupInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBasicInfoFieldNumber = 1,
    kGroupMemberBriefInfoFieldNumber = 2,
  };
  // .AcFunDanmu.Im.Cloud.Message.GroupBasicInfo basicInfo = 1;
  bool has_basicinfo() const;
  private:
  bool _internal_has_basicinfo() const;
  public:
  void clear_basicinfo();
  const ::AcFunDanmu::Im::Cloud_Message_GroupBasicInfo& basicinfo() const;
  ::AcFunDanmu::Im::Cloud_Message_GroupBasicInfo* release_basicinfo();
  ::AcFunDanmu::Im::Cloud_Message_GroupBasicInfo* mutable_basicinfo();
  void set_allocated_basicinfo(::AcFunDanmu::Im::Cloud_Message_GroupBasicInfo* basicinfo);
  private:
  const ::AcFunDanmu::Im::Cloud_Message_GroupBasicInfo& _internal_basicinfo() const;
  ::AcFunDanmu::Im::Cloud_Message_GroupBasicInfo* _internal_mutable_basicinfo();
  public:
  void unsafe_arena_set_allocated_basicinfo(
      ::AcFunDanmu::Im::Cloud_Message_GroupBasicInfo* basicinfo);
  ::AcFunDanmu::Im::Cloud_Message_GroupBasicInfo* unsafe_arena_release_basicinfo();

  // .AcFunDanmu.Im.Cloud.Message.GroupMemberBriefInfo groupMemberBriefInfo = 2;
  bool has_groupmemberbriefinfo() const;
  private:
  bool _internal_has_groupmemberbriefinfo() const;
  public:
  void clear_groupmemberbriefinfo();
  const ::AcFunDanmu::Im::Cloud_Message_GroupMemberBriefInfo& groupmemberbriefinfo() const;
  ::AcFunDanmu::Im::Cloud_Message_GroupMemberBriefInfo* release_groupmemberbriefinfo();
  ::AcFunDanmu::Im::Cloud_Message_GroupMemberBriefInfo* mutable_groupmemberbriefinfo();
  void set_allocated_groupmemberbriefinfo(::AcFunDanmu::Im::Cloud_Message_GroupMemberBriefInfo* groupmemberbriefinfo);
  private:
  const ::AcFunDanmu::Im::Cloud_Message_GroupMemberBriefInfo& _internal_groupmemberbriefinfo() const;
  ::AcFunDanmu::Im::Cloud_Message_GroupMemberBriefInfo* _internal_mutable_groupmemberbriefinfo();
  public:
  void unsafe_arena_set_allocated_groupmemberbriefinfo(
      ::AcFunDanmu::Im::Cloud_Message_GroupMemberBriefInfo* groupmemberbriefinfo);
  ::AcFunDanmu::Im::Cloud_Message_GroupMemberBriefInfo* unsafe_arena_release_groupmemberbriefinfo();

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.GroupInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::AcFunDanmu::Im::Cloud_Message_GroupBasicInfo* basicinfo_;
  ::AcFunDanmu::Im::Cloud_Message_GroupMemberBriefInfo* groupmemberbriefinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_GroupBasicInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.GroupBasicInfo) */ {
 public:
  inline Cloud_Message_GroupBasicInfo() : Cloud_Message_GroupBasicInfo(nullptr) {}
  virtual ~Cloud_Message_GroupBasicInfo();

  Cloud_Message_GroupBasicInfo(const Cloud_Message_GroupBasicInfo& from);
  Cloud_Message_GroupBasicInfo(Cloud_Message_GroupBasicInfo&& from) noexcept
    : Cloud_Message_GroupBasicInfo() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_GroupBasicInfo& operator=(const Cloud_Message_GroupBasicInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_GroupBasicInfo& operator=(Cloud_Message_GroupBasicInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_GroupBasicInfo& default_instance();

  static inline const Cloud_Message_GroupBasicInfo* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_GroupBasicInfo*>(
               &_Cloud_Message_GroupBasicInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    176;

  friend void swap(Cloud_Message_GroupBasicInfo& a, Cloud_Message_GroupBasicInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_GroupBasicInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_GroupBasicInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_GroupBasicInfo* New() const final {
    return CreateMaybeMessage<Cloud_Message_GroupBasicInfo>(nullptr);
  }

  Cloud_Message_GroupBasicInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_GroupBasicInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_GroupBasicInfo& from);
  void MergeFrom(const Cloud_Message_GroupBasicInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_GroupBasicInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.GroupBasicInfo";
  }
  protected:
  explicit Cloud_Message_GroupBasicInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kGroupNameFieldNumber = 2,
    kDescriptionFieldNumber = 5,
    kAdminFieldNumber = 3,
    kGroupStatusFieldNumber = 4,
    kJoinNeedPermissionFieldNumber = 6,
    kCreateTimeFieldNumber = 7,
    kUpdateTimeFieldNumber = 8,
    kGroupTypeFieldNumber = 9,
    kForbiddenStateFieldNumber = 10,
  };
  // string groupId = 1;
  void clear_groupid();
  const std::string& groupid() const;
  void set_groupid(const std::string& value);
  void set_groupid(std::string&& value);
  void set_groupid(const char* value);
  void set_groupid(const char* value, size_t size);
  std::string* mutable_groupid();
  std::string* release_groupid();
  void set_allocated_groupid(std::string* groupid);
  private:
  const std::string& _internal_groupid() const;
  void _internal_set_groupid(const std::string& value);
  std::string* _internal_mutable_groupid();
  public:

  // string groupName = 2;
  void clear_groupname();
  const std::string& groupname() const;
  void set_groupname(const std::string& value);
  void set_groupname(std::string&& value);
  void set_groupname(const char* value);
  void set_groupname(const char* value, size_t size);
  std::string* mutable_groupname();
  std::string* release_groupname();
  void set_allocated_groupname(std::string* groupname);
  private:
  const std::string& _internal_groupname() const;
  void _internal_set_groupname(const std::string& value);
  std::string* _internal_mutable_groupname();
  public:

  // string description = 5;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .AcFunDanmu.Im.Basic.User admin = 3;
  bool has_admin() const;
  private:
  bool _internal_has_admin() const;
  public:
  void clear_admin();
  const ::AcFunDanmu::Im::Basic_User& admin() const;
  ::AcFunDanmu::Im::Basic_User* release_admin();
  ::AcFunDanmu::Im::Basic_User* mutable_admin();
  void set_allocated_admin(::AcFunDanmu::Im::Basic_User* admin);
  private:
  const ::AcFunDanmu::Im::Basic_User& _internal_admin() const;
  ::AcFunDanmu::Im::Basic_User* _internal_mutable_admin();
  public:
  void unsafe_arena_set_allocated_admin(
      ::AcFunDanmu::Im::Basic_User* admin);
  ::AcFunDanmu::Im::Basic_User* unsafe_arena_release_admin();

  // .AcFunDanmu.Im.Cloud.Message.GroupStatus groupStatus = 4;
  void clear_groupstatus();
  ::AcFunDanmu::Im::Cloud_Message_GroupStatus groupstatus() const;
  void set_groupstatus(::AcFunDanmu::Im::Cloud_Message_GroupStatus value);
  private:
  ::AcFunDanmu::Im::Cloud_Message_GroupStatus _internal_groupstatus() const;
  void _internal_set_groupstatus(::AcFunDanmu::Im::Cloud_Message_GroupStatus value);
  public:

  // .AcFunDanmu.Im.Cloud.Message.JoinNeedPermissionType joinNeedPermission = 6;
  void clear_joinneedpermission();
  ::AcFunDanmu::Im::Cloud_Message_JoinNeedPermissionType joinneedpermission() const;
  void set_joinneedpermission(::AcFunDanmu::Im::Cloud_Message_JoinNeedPermissionType value);
  private:
  ::AcFunDanmu::Im::Cloud_Message_JoinNeedPermissionType _internal_joinneedpermission() const;
  void _internal_set_joinneedpermission(::AcFunDanmu::Im::Cloud_Message_JoinNeedPermissionType value);
  public:

  // int64 createTime = 7;
  void clear_createtime();
  ::PROTOBUF_NAMESPACE_ID::int64 createtime() const;
  void set_createtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_createtime() const;
  void _internal_set_createtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 updateTime = 8;
  void clear_updatetime();
  ::PROTOBUF_NAMESPACE_ID::int64 updatetime() const;
  void set_updatetime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_updatetime() const;
  void _internal_set_updatetime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .AcFunDanmu.Im.Cloud.Message.GroupType groupType = 9;
  void clear_grouptype();
  ::AcFunDanmu::Im::Cloud_Message_GroupType grouptype() const;
  void set_grouptype(::AcFunDanmu::Im::Cloud_Message_GroupType value);
  private:
  ::AcFunDanmu::Im::Cloud_Message_GroupType _internal_grouptype() const;
  void _internal_set_grouptype(::AcFunDanmu::Im::Cloud_Message_GroupType value);
  public:

  // .AcFunDanmu.Im.Cloud.Message.ForbiddenState forbiddenState = 10;
  void clear_forbiddenstate();
  ::AcFunDanmu::Im::Cloud_Message_ForbiddenState forbiddenstate() const;
  void set_forbiddenstate(::AcFunDanmu::Im::Cloud_Message_ForbiddenState value);
  private:
  ::AcFunDanmu::Im::Cloud_Message_ForbiddenState _internal_forbiddenstate() const;
  void _internal_set_forbiddenstate(::AcFunDanmu::Im::Cloud_Message_ForbiddenState value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.GroupBasicInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::AcFunDanmu::Im::Basic_User* admin_;
  int groupstatus_;
  int joinneedpermission_;
  ::PROTOBUF_NAMESPACE_ID::int64 createtime_;
  ::PROTOBUF_NAMESPACE_ID::int64 updatetime_;
  int grouptype_;
  int forbiddenstate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_GroupMemberBriefInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.GroupMemberBriefInfo) */ {
 public:
  inline Cloud_Message_GroupMemberBriefInfo() : Cloud_Message_GroupMemberBriefInfo(nullptr) {}
  virtual ~Cloud_Message_GroupMemberBriefInfo();

  Cloud_Message_GroupMemberBriefInfo(const Cloud_Message_GroupMemberBriefInfo& from);
  Cloud_Message_GroupMemberBriefInfo(Cloud_Message_GroupMemberBriefInfo&& from) noexcept
    : Cloud_Message_GroupMemberBriefInfo() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_GroupMemberBriefInfo& operator=(const Cloud_Message_GroupMemberBriefInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_GroupMemberBriefInfo& operator=(Cloud_Message_GroupMemberBriefInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_GroupMemberBriefInfo& default_instance();

  static inline const Cloud_Message_GroupMemberBriefInfo* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_GroupMemberBriefInfo*>(
               &_Cloud_Message_GroupMemberBriefInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    177;

  friend void swap(Cloud_Message_GroupMemberBriefInfo& a, Cloud_Message_GroupMemberBriefInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_GroupMemberBriefInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_GroupMemberBriefInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_GroupMemberBriefInfo* New() const final {
    return CreateMaybeMessage<Cloud_Message_GroupMemberBriefInfo>(nullptr);
  }

  Cloud_Message_GroupMemberBriefInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_GroupMemberBriefInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_GroupMemberBriefInfo& from);
  void MergeFrom(const Cloud_Message_GroupMemberBriefInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_GroupMemberBriefInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.GroupMemberBriefInfo";
  }
  protected:
  explicit Cloud_Message_GroupMemberBriefInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopMembersFieldNumber = 2,
    kLastUpdateTimeFieldNumber = 3,
    kMemberCountFieldNumber = 1,
  };
  // repeated .AcFunDanmu.Im.Basic.User topMembers = 2;
  int topmembers_size() const;
  private:
  int _internal_topmembers_size() const;
  public:
  void clear_topmembers();
  ::AcFunDanmu::Im::Basic_User* mutable_topmembers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_User >*
      mutable_topmembers();
  private:
  const ::AcFunDanmu::Im::Basic_User& _internal_topmembers(int index) const;
  ::AcFunDanmu::Im::Basic_User* _internal_add_topmembers();
  public:
  const ::AcFunDanmu::Im::Basic_User& topmembers(int index) const;
  ::AcFunDanmu::Im::Basic_User* add_topmembers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_User >&
      topmembers() const;

  // int64 lastUpdateTime = 3;
  void clear_lastupdatetime();
  ::PROTOBUF_NAMESPACE_ID::int64 lastupdatetime() const;
  void set_lastupdatetime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_lastupdatetime() const;
  void _internal_set_lastupdatetime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 memberCount = 1;
  void clear_membercount();
  ::PROTOBUF_NAMESPACE_ID::int32 membercount() const;
  void set_membercount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_membercount() const;
  void _internal_set_membercount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.GroupMemberBriefInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_User > topmembers_;
  ::PROTOBUF_NAMESPACE_ID::int64 lastupdatetime_;
  ::PROTOBUF_NAMESPACE_ID::int32 membercount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_ImcPassThroughRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.ImcPassThroughRequest) */ {
 public:
  inline Cloud_Message_ImcPassThroughRequest() : Cloud_Message_ImcPassThroughRequest(nullptr) {}
  virtual ~Cloud_Message_ImcPassThroughRequest();

  Cloud_Message_ImcPassThroughRequest(const Cloud_Message_ImcPassThroughRequest& from);
  Cloud_Message_ImcPassThroughRequest(Cloud_Message_ImcPassThroughRequest&& from) noexcept
    : Cloud_Message_ImcPassThroughRequest() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_ImcPassThroughRequest& operator=(const Cloud_Message_ImcPassThroughRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_ImcPassThroughRequest& operator=(Cloud_Message_ImcPassThroughRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_ImcPassThroughRequest& default_instance();

  static inline const Cloud_Message_ImcPassThroughRequest* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_ImcPassThroughRequest*>(
               &_Cloud_Message_ImcPassThroughRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    178;

  friend void swap(Cloud_Message_ImcPassThroughRequest& a, Cloud_Message_ImcPassThroughRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_ImcPassThroughRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_ImcPassThroughRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_ImcPassThroughRequest* New() const final {
    return CreateMaybeMessage<Cloud_Message_ImcPassThroughRequest>(nullptr);
  }

  Cloud_Message_ImcPassThroughRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_ImcPassThroughRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_ImcPassThroughRequest& from);
  void MergeFrom(const Cloud_Message_ImcPassThroughRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_ImcPassThroughRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.ImcPassThroughRequest";
  }
  protected:
  explicit Cloud_Message_ImcPassThroughRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 2,
    kChatTargetFieldNumber = 1,
    kContentTypeFieldNumber = 3,
  };
  // bytes content = 2;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // .AcFunDanmu.Im.ImMessage.ChatTarget chatTarget = 1;
  bool has_chattarget() const;
  private:
  bool _internal_has_chattarget() const;
  public:
  void clear_chattarget();
  const ::AcFunDanmu::Im::ImMessage_ChatTarget& chattarget() const;
  ::AcFunDanmu::Im::ImMessage_ChatTarget* release_chattarget();
  ::AcFunDanmu::Im::ImMessage_ChatTarget* mutable_chattarget();
  void set_allocated_chattarget(::AcFunDanmu::Im::ImMessage_ChatTarget* chattarget);
  private:
  const ::AcFunDanmu::Im::ImMessage_ChatTarget& _internal_chattarget() const;
  ::AcFunDanmu::Im::ImMessage_ChatTarget* _internal_mutable_chattarget();
  public:
  void unsafe_arena_set_allocated_chattarget(
      ::AcFunDanmu::Im::ImMessage_ChatTarget* chattarget);
  ::AcFunDanmu::Im::ImMessage_ChatTarget* unsafe_arena_release_chattarget();

  // int32 contentType = 3;
  void clear_contenttype();
  ::PROTOBUF_NAMESPACE_ID::int32 contenttype() const;
  void set_contenttype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_contenttype() const;
  void _internal_set_contenttype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.ImcPassThroughRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::AcFunDanmu::Im::ImMessage_ChatTarget* chattarget_;
  ::PROTOBUF_NAMESPACE_ID::int32 contenttype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_ImcPassThroughResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.ImcPassThroughResponse) */ {
 public:
  inline Cloud_Message_ImcPassThroughResponse() : Cloud_Message_ImcPassThroughResponse(nullptr) {}
  virtual ~Cloud_Message_ImcPassThroughResponse();

  Cloud_Message_ImcPassThroughResponse(const Cloud_Message_ImcPassThroughResponse& from);
  Cloud_Message_ImcPassThroughResponse(Cloud_Message_ImcPassThroughResponse&& from) noexcept
    : Cloud_Message_ImcPassThroughResponse() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_ImcPassThroughResponse& operator=(const Cloud_Message_ImcPassThroughResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_ImcPassThroughResponse& operator=(Cloud_Message_ImcPassThroughResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_ImcPassThroughResponse& default_instance();

  static inline const Cloud_Message_ImcPassThroughResponse* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_ImcPassThroughResponse*>(
               &_Cloud_Message_ImcPassThroughResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    179;

  friend void swap(Cloud_Message_ImcPassThroughResponse& a, Cloud_Message_ImcPassThroughResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_ImcPassThroughResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_ImcPassThroughResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_ImcPassThroughResponse* New() const final {
    return CreateMaybeMessage<Cloud_Message_ImcPassThroughResponse>(nullptr);
  }

  Cloud_Message_ImcPassThroughResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_ImcPassThroughResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_ImcPassThroughResponse& from);
  void MergeFrom(const Cloud_Message_ImcPassThroughResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_ImcPassThroughResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.ImcPassThroughResponse";
  }
  protected:
  explicit Cloud_Message_ImcPassThroughResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.ImcPassThroughResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_ImcPassThroughPush PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.ImcPassThroughPush) */ {
 public:
  inline Cloud_Message_ImcPassThroughPush() : Cloud_Message_ImcPassThroughPush(nullptr) {}
  virtual ~Cloud_Message_ImcPassThroughPush();

  Cloud_Message_ImcPassThroughPush(const Cloud_Message_ImcPassThroughPush& from);
  Cloud_Message_ImcPassThroughPush(Cloud_Message_ImcPassThroughPush&& from) noexcept
    : Cloud_Message_ImcPassThroughPush() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_ImcPassThroughPush& operator=(const Cloud_Message_ImcPassThroughPush& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_ImcPassThroughPush& operator=(Cloud_Message_ImcPassThroughPush&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_ImcPassThroughPush& default_instance();

  static inline const Cloud_Message_ImcPassThroughPush* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_ImcPassThroughPush*>(
               &_Cloud_Message_ImcPassThroughPush_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    180;

  friend void swap(Cloud_Message_ImcPassThroughPush& a, Cloud_Message_ImcPassThroughPush& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_ImcPassThroughPush* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_ImcPassThroughPush* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_ImcPassThroughPush* New() const final {
    return CreateMaybeMessage<Cloud_Message_ImcPassThroughPush>(nullptr);
  }

  Cloud_Message_ImcPassThroughPush* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_ImcPassThroughPush>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_ImcPassThroughPush& from);
  void MergeFrom(const Cloud_Message_ImcPassThroughPush& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_ImcPassThroughPush* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.ImcPassThroughPush";
  }
  protected:
  explicit Cloud_Message_ImcPassThroughPush(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 3,
    kChatTargetFieldNumber = 1,
    kFromUserFieldNumber = 2,
    kContentTypeFieldNumber = 4,
  };
  // bytes content = 3;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // .AcFunDanmu.Im.ImMessage.ChatTarget chatTarget = 1;
  bool has_chattarget() const;
  private:
  bool _internal_has_chattarget() const;
  public:
  void clear_chattarget();
  const ::AcFunDanmu::Im::ImMessage_ChatTarget& chattarget() const;
  ::AcFunDanmu::Im::ImMessage_ChatTarget* release_chattarget();
  ::AcFunDanmu::Im::ImMessage_ChatTarget* mutable_chattarget();
  void set_allocated_chattarget(::AcFunDanmu::Im::ImMessage_ChatTarget* chattarget);
  private:
  const ::AcFunDanmu::Im::ImMessage_ChatTarget& _internal_chattarget() const;
  ::AcFunDanmu::Im::ImMessage_ChatTarget* _internal_mutable_chattarget();
  public:
  void unsafe_arena_set_allocated_chattarget(
      ::AcFunDanmu::Im::ImMessage_ChatTarget* chattarget);
  ::AcFunDanmu::Im::ImMessage_ChatTarget* unsafe_arena_release_chattarget();

  // .AcFunDanmu.Im.Basic.User fromUser = 2;
  bool has_fromuser() const;
  private:
  bool _internal_has_fromuser() const;
  public:
  void clear_fromuser();
  const ::AcFunDanmu::Im::Basic_User& fromuser() const;
  ::AcFunDanmu::Im::Basic_User* release_fromuser();
  ::AcFunDanmu::Im::Basic_User* mutable_fromuser();
  void set_allocated_fromuser(::AcFunDanmu::Im::Basic_User* fromuser);
  private:
  const ::AcFunDanmu::Im::Basic_User& _internal_fromuser() const;
  ::AcFunDanmu::Im::Basic_User* _internal_mutable_fromuser();
  public:
  void unsafe_arena_set_allocated_fromuser(
      ::AcFunDanmu::Im::Basic_User* fromuser);
  ::AcFunDanmu::Im::Basic_User* unsafe_arena_release_fromuser();

  // int32 contentType = 4;
  void clear_contenttype();
  ::PROTOBUF_NAMESPACE_ID::int32 contenttype() const;
  void set_contenttype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_contenttype() const;
  void _internal_set_contenttype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.ImcPassThroughPush)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::AcFunDanmu::Im::ImMessage_ChatTarget* chattarget_;
  ::AcFunDanmu::Im::Basic_User* fromuser_;
  ::PROTOBUF_NAMESPACE_ID::int32 contenttype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message_InputtingContent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message.InputtingContent) */ {
 public:
  inline Cloud_Message_InputtingContent() : Cloud_Message_InputtingContent(nullptr) {}
  virtual ~Cloud_Message_InputtingContent();

  Cloud_Message_InputtingContent(const Cloud_Message_InputtingContent& from);
  Cloud_Message_InputtingContent(Cloud_Message_InputtingContent&& from) noexcept
    : Cloud_Message_InputtingContent() {
    *this = ::std::move(from);
  }

  inline Cloud_Message_InputtingContent& operator=(const Cloud_Message_InputtingContent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message_InputtingContent& operator=(Cloud_Message_InputtingContent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message_InputtingContent& default_instance();

  static inline const Cloud_Message_InputtingContent* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message_InputtingContent*>(
               &_Cloud_Message_InputtingContent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    181;

  friend void swap(Cloud_Message_InputtingContent& a, Cloud_Message_InputtingContent& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message_InputtingContent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message_InputtingContent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message_InputtingContent* New() const final {
    return CreateMaybeMessage<Cloud_Message_InputtingContent>(nullptr);
  }

  Cloud_Message_InputtingContent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message_InputtingContent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message_InputtingContent& from);
  void MergeFrom(const Cloud_Message_InputtingContent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message_InputtingContent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message.InputtingContent";
  }
  protected:
  explicit Cloud_Message_InputtingContent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDisplayIntervalFieldNumber = 1,
  };
  // int32 displayInterval = 1;
  void clear_displayinterval();
  ::PROTOBUF_NAMESPACE_ID::int32 displayinterval() const;
  void set_displayinterval(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_displayinterval() const;
  void _internal_set_displayinterval(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message.InputtingContent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 displayinterval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud_Message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud.Message) */ {
 public:
  inline Cloud_Message() : Cloud_Message(nullptr) {}
  virtual ~Cloud_Message();

  Cloud_Message(const Cloud_Message& from);
  Cloud_Message(Cloud_Message&& from) noexcept
    : Cloud_Message() {
    *this = ::std::move(from);
  }

  inline Cloud_Message& operator=(const Cloud_Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud_Message& operator=(Cloud_Message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud_Message& default_instance();

  static inline const Cloud_Message* internal_default_instance() {
    return reinterpret_cast<const Cloud_Message*>(
               &_Cloud_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    182;

  friend void swap(Cloud_Message& a, Cloud_Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud_Message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud_Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud_Message* New() const final {
    return CreateMaybeMessage<Cloud_Message>(nullptr);
  }

  Cloud_Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud_Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud_Message& from);
  void MergeFrom(const Cloud_Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud_Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud.Message";
  }
  protected:
  explicit Cloud_Message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Cloud_Message_ImcRecalledMessage ImcRecalledMessage;
  typedef Cloud_Message_ImcReplaceMessage ImcReplaceMessage;
  typedef Cloud_Message_Text Text;
  typedef Cloud_Message_Image Image;
  typedef Cloud_Message_Audio Audio;
  typedef Cloud_Message_Video Video;
  typedef Cloud_Message_Custom Custom;
  typedef Cloud_Message_PicUrl PicUrl;
  typedef Cloud_Message_Emoticon Emoticon;
  typedef Cloud_Message_File File;
  typedef Cloud_Message_Reference Reference;
  typedef Cloud_Message_ForwardMessageContent ForwardMessageContent;
  typedef Cloud_Message_NoticePlaceholderMeta NoticePlaceholderMeta;
  typedef Cloud_Message_ImcNoticeMessage ImcNoticeMessage;
  typedef Cloud_Message_ConfirmInviteIntoGroupNoticeMetaInfo ConfirmInviteIntoGroupNoticeMetaInfo;
  typedef Cloud_Message_ConfirmJoinIntoGroupNoticeMetaInfo ConfirmJoinIntoGroupNoticeMetaInfo;
  typedef Cloud_Message_GroupCreateRequest GroupCreateRequest;
  typedef Cloud_Message_GroupCreateReponse GroupCreateReponse;
  typedef Cloud_Message_GroupDeleteRequest GroupDeleteRequest;
  typedef Cloud_Message_GroupDeleteResponse GroupDeleteResponse;
  typedef Cloud_Message_GroupInviteRequest GroupInviteRequest;
  typedef Cloud_Message_GroupInvideResponse GroupInvideResponse;
  typedef Cloud_Message_GroupJoinRequest GroupJoinRequest;
  typedef Cloud_Message_GroupJoinResponse GroupJoinResponse;
  typedef Cloud_Message_GroupJoinRequestAckRequest GroupJoinRequestAckRequest;
  typedef Cloud_Message_GroupJoinRequestAckResponse GroupJoinRequestAckResponse;
  typedef Cloud_Message_GroupJoinRequestGetRequest GroupJoinRequestGetRequest;
  typedef Cloud_Message_GroupJoinRequestGetResponse GroupJoinRequestGetResponse;
  typedef Cloud_Message_GroupJoinRequestCancelRequest GroupJoinRequestCancelRequest;
  typedef Cloud_Message_GroupJoinRequestCancelResposne GroupJoinRequestCancelResposne;
  typedef Cloud_Message_GroupQuitRequest GroupQuitRequest;
  typedef Cloud_Message_GroupQuitResponse GroupQuitResponse;
  typedef Cloud_Message_GroupKickRequest GroupKickRequest;
  typedef Cloud_Message_GroupKickResponse GroupKickResponse;
  typedef Cloud_Message_GroupSettingRequest GroupSettingRequest;
  typedef Cloud_Message_GroupSettingRename GroupSettingRename;
  typedef Cloud_Message_GroupSettingDesc GroupSettingDesc;
  typedef Cloud_Message_GroupSettingJoinNeedPermission GroupSettingJoinNeedPermission;
  typedef Cloud_Message_GroupSettingResponse GroupSettingResponse;
  typedef Cloud_Message_GroupMemberSettingRequest GroupMemberSettingRequest;
  typedef Cloud_Message_SetUserNickname SetUserNickname;
  typedef Cloud_Message_SetUserAntiDisturbing SetUserAntiDisturbing;
  typedef Cloud_Message_GroupMemberSettingResponse GroupMemberSettingResponse;
  typedef Cloud_Message_GroupMemberListGetRequest GroupMemberListGetRequest;
  typedef Cloud_Message_GroupMemberListGetResponse GroupMemberListGetResponse;
  typedef Cloud_Message_GroupMemberGetRequest GroupMemberGetRequest;
  typedef Cloud_Message_GroupMemberGetResponse GroupMemberGetResponse;
  typedef Cloud_Message_UserGroupListRequest UserGroupListRequest;
  typedef Cloud_Message_UserGroupListResponse UserGroupListResponse;
  typedef Cloud_Message_UserGroupRecord UserGroupRecord;
  typedef Cloud_Message_UserGroupGetRequest UserGroupGetRequest;
  typedef Cloud_Message_UserGroupGetResponse UserGroupGetResponse;
  typedef Cloud_Message_UserGroupInfo UserGroupInfo;
  typedef Cloud_Message_GroupMember GroupMember;
  typedef Cloud_Message_GroupInfo GroupInfo;
  typedef Cloud_Message_GroupBasicInfo GroupBasicInfo;
  typedef Cloud_Message_GroupMemberBriefInfo GroupMemberBriefInfo;
  typedef Cloud_Message_ImcPassThroughRequest ImcPassThroughRequest;
  typedef Cloud_Message_ImcPassThroughResponse ImcPassThroughResponse;
  typedef Cloud_Message_ImcPassThroughPush ImcPassThroughPush;
  typedef Cloud_Message_InputtingContent InputtingContent;

  typedef Cloud_Message_ImcMessageType ImcMessageType;
  static constexpr ImcMessageType TEXT =
    Cloud_Message_ImcMessageType_TEXT;
  static constexpr ImcMessageType IMAGE =
    Cloud_Message_ImcMessageType_IMAGE;
  static constexpr ImcMessageType CUSTOM =
    Cloud_Message_ImcMessageType_CUSTOM;
  static constexpr ImcMessageType AUDIO =
    Cloud_Message_ImcMessageType_AUDIO;
  static constexpr ImcMessageType VIDEO =
    Cloud_Message_ImcMessageType_VIDEO;
  static constexpr ImcMessageType EMOTICON =
    Cloud_Message_ImcMessageType_EMOTICON;
  static constexpr ImcMessageType FILE =
    Cloud_Message_ImcMessageType_FILE;
  static constexpr ImcMessageType NOTICE =
    Cloud_Message_ImcMessageType_NOTICE;
  static constexpr ImcMessageType RECALLED =
    Cloud_Message_ImcMessageType_RECALLED;
  static constexpr ImcMessageType REFERENCE =
    Cloud_Message_ImcMessageType_REFERENCE;
  static constexpr ImcMessageType MERGE_FORWARD =
    Cloud_Message_ImcMessageType_MERGE_FORWARD;
  static constexpr ImcMessageType PLACE_HOLDER =
    Cloud_Message_ImcMessageType_PLACE_HOLDER;
  static constexpr ImcMessageType REPLACE =
    Cloud_Message_ImcMessageType_REPLACE;
  static constexpr ImcMessageType INVISIBLE_TYPE_MAS =
    Cloud_Message_ImcMessageType_INVISIBLE_TYPE_MAS;
  static constexpr ImcMessageType RICH_NOTICE =
    Cloud_Message_ImcMessageType_RICH_NOTICE;
  static inline bool ImcMessageType_IsValid(int value) {
    return Cloud_Message_ImcMessageType_IsValid(value);
  }
  static constexpr ImcMessageType ImcMessageType_MIN =
    Cloud_Message_ImcMessageType_ImcMessageType_MIN;
  static constexpr ImcMessageType ImcMessageType_MAX =
    Cloud_Message_ImcMessageType_ImcMessageType_MAX;
  static constexpr int ImcMessageType_ARRAYSIZE =
    Cloud_Message_ImcMessageType_ImcMessageType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ImcMessageType_descriptor() {
    return Cloud_Message_ImcMessageType_descriptor();
  }
  template<typename T>
  static inline const std::string& ImcMessageType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ImcMessageType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ImcMessageType_Name.");
    return Cloud_Message_ImcMessageType_Name(enum_t_value);
  }
  static inline bool ImcMessageType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ImcMessageType* value) {
    return Cloud_Message_ImcMessageType_Parse(name, value);
  }

  typedef Cloud_Message_NoticeMetaType NoticeMetaType;
  static constexpr NoticeMetaType UNKNOWN_NOTICE_META_TYPE =
    Cloud_Message_NoticeMetaType_UNKNOWN_NOTICE_META_TYPE;
  static constexpr NoticeMetaType COMMON_NOTICE_META_TYPE =
    Cloud_Message_NoticeMetaType_COMMON_NOTICE_META_TYPE;
  static constexpr NoticeMetaType CONFIRM_INVITE_INTO_GROUP_META =
    Cloud_Message_NoticeMetaType_CONFIRM_INVITE_INTO_GROUP_META;
  static constexpr NoticeMetaType CONFIRM_JOIN_INTO_GROUP_META =
    Cloud_Message_NoticeMetaType_CONFIRM_JOIN_INTO_GROUP_META;
  static inline bool NoticeMetaType_IsValid(int value) {
    return Cloud_Message_NoticeMetaType_IsValid(value);
  }
  static constexpr NoticeMetaType NoticeMetaType_MIN =
    Cloud_Message_NoticeMetaType_NoticeMetaType_MIN;
  static constexpr NoticeMetaType NoticeMetaType_MAX =
    Cloud_Message_NoticeMetaType_NoticeMetaType_MAX;
  static constexpr int NoticeMetaType_ARRAYSIZE =
    Cloud_Message_NoticeMetaType_NoticeMetaType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  NoticeMetaType_descriptor() {
    return Cloud_Message_NoticeMetaType_descriptor();
  }
  template<typename T>
  static inline const std::string& NoticeMetaType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, NoticeMetaType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function NoticeMetaType_Name.");
    return Cloud_Message_NoticeMetaType_Name(enum_t_value);
  }
  static inline bool NoticeMetaType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      NoticeMetaType* value) {
    return Cloud_Message_NoticeMetaType_Parse(name, value);
  }

  typedef Cloud_Message_GroupFindType GroupFindType;
  static constexpr GroupFindType BY_UNKNOWN =
    Cloud_Message_GroupFindType_BY_UNKNOWN;
  static constexpr GroupFindType BY_ID =
    Cloud_Message_GroupFindType_BY_ID;
  static constexpr GroupFindType BY_NAME =
    Cloud_Message_GroupFindType_BY_NAME;
  static constexpr GroupFindType BY_QR_CODE =
    Cloud_Message_GroupFindType_BY_QR_CODE;
  static constexpr GroupFindType BY_CARD =
    Cloud_Message_GroupFindType_BY_CARD;
  static constexpr GroupFindType BY_INVITATION =
    Cloud_Message_GroupFindType_BY_INVITATION;
  static constexpr GroupFindType BY_SHARE_LINK =
    Cloud_Message_GroupFindType_BY_SHARE_LINK;
  static inline bool GroupFindType_IsValid(int value) {
    return Cloud_Message_GroupFindType_IsValid(value);
  }
  static constexpr GroupFindType GroupFindType_MIN =
    Cloud_Message_GroupFindType_GroupFindType_MIN;
  static constexpr GroupFindType GroupFindType_MAX =
    Cloud_Message_GroupFindType_GroupFindType_MAX;
  static constexpr int GroupFindType_ARRAYSIZE =
    Cloud_Message_GroupFindType_GroupFindType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  GroupFindType_descriptor() {
    return Cloud_Message_GroupFindType_descriptor();
  }
  template<typename T>
  static inline const std::string& GroupFindType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, GroupFindType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function GroupFindType_Name.");
    return Cloud_Message_GroupFindType_Name(enum_t_value);
  }
  static inline bool GroupFindType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      GroupFindType* value) {
    return Cloud_Message_GroupFindType_Parse(name, value);
  }

  typedef Cloud_Message_JoinRequestStatus JoinRequestStatus;
  static constexpr JoinRequestStatus UNKNOWN_STATUS =
    Cloud_Message_JoinRequestStatus_UNKNOWN_STATUS;
  static constexpr JoinRequestStatus REQUESTED =
    Cloud_Message_JoinRequestStatus_REQUESTED;
  static constexpr JoinRequestStatus APPROVED =
    Cloud_Message_JoinRequestStatus_APPROVED;
  static constexpr JoinRequestStatus REFUSED =
    Cloud_Message_JoinRequestStatus_REFUSED;
  static inline bool JoinRequestStatus_IsValid(int value) {
    return Cloud_Message_JoinRequestStatus_IsValid(value);
  }
  static constexpr JoinRequestStatus JoinRequestStatus_MIN =
    Cloud_Message_JoinRequestStatus_JoinRequestStatus_MIN;
  static constexpr JoinRequestStatus JoinRequestStatus_MAX =
    Cloud_Message_JoinRequestStatus_JoinRequestStatus_MAX;
  static constexpr int JoinRequestStatus_ARRAYSIZE =
    Cloud_Message_JoinRequestStatus_JoinRequestStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  JoinRequestStatus_descriptor() {
    return Cloud_Message_JoinRequestStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& JoinRequestStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, JoinRequestStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function JoinRequestStatus_Name.");
    return Cloud_Message_JoinRequestStatus_Name(enum_t_value);
  }
  static inline bool JoinRequestStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      JoinRequestStatus* value) {
    return Cloud_Message_JoinRequestStatus_Parse(name, value);
  }

  typedef Cloud_Message_JoinNeedPermissionType JoinNeedPermissionType;
  static constexpr JoinNeedPermissionType UNKNOWN_JOIN_NEED_PERMISSION_TYPE =
    Cloud_Message_JoinNeedPermissionType_UNKNOWN_JOIN_NEED_PERMISSION_TYPE;
  static constexpr JoinNeedPermissionType NONE =
    Cloud_Message_JoinNeedPermissionType_NONE;
  static constexpr JoinNeedPermissionType ADMIN =
    Cloud_Message_JoinNeedPermissionType_ADMIN;
  static inline bool JoinNeedPermissionType_IsValid(int value) {
    return Cloud_Message_JoinNeedPermissionType_IsValid(value);
  }
  static constexpr JoinNeedPermissionType JoinNeedPermissionType_MIN =
    Cloud_Message_JoinNeedPermissionType_JoinNeedPermissionType_MIN;
  static constexpr JoinNeedPermissionType JoinNeedPermissionType_MAX =
    Cloud_Message_JoinNeedPermissionType_JoinNeedPermissionType_MAX;
  static constexpr int JoinNeedPermissionType_ARRAYSIZE =
    Cloud_Message_JoinNeedPermissionType_JoinNeedPermissionType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  JoinNeedPermissionType_descriptor() {
    return Cloud_Message_JoinNeedPermissionType_descriptor();
  }
  template<typename T>
  static inline const std::string& JoinNeedPermissionType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, JoinNeedPermissionType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function JoinNeedPermissionType_Name.");
    return Cloud_Message_JoinNeedPermissionType_Name(enum_t_value);
  }
  static inline bool JoinNeedPermissionType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      JoinNeedPermissionType* value) {
    return Cloud_Message_JoinNeedPermissionType_Parse(name, value);
  }

  typedef Cloud_Message_GroupStatus GroupStatus;
  static constexpr GroupStatus UNKNOW_GROUP_STATUS =
    Cloud_Message_GroupStatus_UNKNOW_GROUP_STATUS;
  static constexpr GroupStatus VALID =
    Cloud_Message_GroupStatus_VALID;
  static constexpr GroupStatus INVALID =
    Cloud_Message_GroupStatus_INVALID;
  static inline bool GroupStatus_IsValid(int value) {
    return Cloud_Message_GroupStatus_IsValid(value);
  }
  static constexpr GroupStatus GroupStatus_MIN =
    Cloud_Message_GroupStatus_GroupStatus_MIN;
  static constexpr GroupStatus GroupStatus_MAX =
    Cloud_Message_GroupStatus_GroupStatus_MAX;
  static constexpr int GroupStatus_ARRAYSIZE =
    Cloud_Message_GroupStatus_GroupStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  GroupStatus_descriptor() {
    return Cloud_Message_GroupStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& GroupStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, GroupStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function GroupStatus_Name.");
    return Cloud_Message_GroupStatus_Name(enum_t_value);
  }
  static inline bool GroupStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      GroupStatus* value) {
    return Cloud_Message_GroupStatus_Parse(name, value);
  }

  typedef Cloud_Message_GroupType GroupType;
  static constexpr GroupType UNKNOW_GROUP_TYPE =
    Cloud_Message_GroupType_UNKNOW_GROUP_TYPE;
  static constexpr GroupType PRIVATE =
    Cloud_Message_GroupType_PRIVATE;
  static constexpr GroupType PUBLIC =
    Cloud_Message_GroupType_PUBLIC;
  static inline bool GroupType_IsValid(int value) {
    return Cloud_Message_GroupType_IsValid(value);
  }
  static constexpr GroupType GroupType_MIN =
    Cloud_Message_GroupType_GroupType_MIN;
  static constexpr GroupType GroupType_MAX =
    Cloud_Message_GroupType_GroupType_MAX;
  static constexpr int GroupType_ARRAYSIZE =
    Cloud_Message_GroupType_GroupType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  GroupType_descriptor() {
    return Cloud_Message_GroupType_descriptor();
  }
  template<typename T>
  static inline const std::string& GroupType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, GroupType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function GroupType_Name.");
    return Cloud_Message_GroupType_Name(enum_t_value);
  }
  static inline bool GroupType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      GroupType* value) {
    return Cloud_Message_GroupType_Parse(name, value);
  }

  typedef Cloud_Message_ForbiddenState ForbiddenState;
  static constexpr ForbiddenState UNKNOWN_FORBIDDEN_STATE =
    Cloud_Message_ForbiddenState_UNKNOWN_FORBIDDEN_STATE;
  static constexpr ForbiddenState UN_FORBIDDEN =
    Cloud_Message_ForbiddenState_UN_FORBIDDEN;
  static constexpr ForbiddenState FORBID_MESSAGE =
    Cloud_Message_ForbiddenState_FORBID_MESSAGE;
  static inline bool ForbiddenState_IsValid(int value) {
    return Cloud_Message_ForbiddenState_IsValid(value);
  }
  static constexpr ForbiddenState ForbiddenState_MIN =
    Cloud_Message_ForbiddenState_ForbiddenState_MIN;
  static constexpr ForbiddenState ForbiddenState_MAX =
    Cloud_Message_ForbiddenState_ForbiddenState_MAX;
  static constexpr int ForbiddenState_ARRAYSIZE =
    Cloud_Message_ForbiddenState_ForbiddenState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ForbiddenState_descriptor() {
    return Cloud_Message_ForbiddenState_descriptor();
  }
  template<typename T>
  static inline const std::string& ForbiddenState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ForbiddenState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ForbiddenState_Name.");
    return Cloud_Message_ForbiddenState_Name(enum_t_value);
  }
  static inline bool ForbiddenState_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ForbiddenState* value) {
    return Cloud_Message_ForbiddenState_Parse(name, value);
  }

  typedef Cloud_Message_PassThroughType PassThroughType;
  static constexpr PassThroughType INVALID_PTT =
    Cloud_Message_PassThroughType_INVALID_PTT;
  static constexpr PassThroughType INPUTTING =
    Cloud_Message_PassThroughType_INPUTTING;
  static inline bool PassThroughType_IsValid(int value) {
    return Cloud_Message_PassThroughType_IsValid(value);
  }
  static constexpr PassThroughType PassThroughType_MIN =
    Cloud_Message_PassThroughType_PassThroughType_MIN;
  static constexpr PassThroughType PassThroughType_MAX =
    Cloud_Message_PassThroughType_PassThroughType_MAX;
  static constexpr int PassThroughType_ARRAYSIZE =
    Cloud_Message_PassThroughType_PassThroughType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PassThroughType_descriptor() {
    return Cloud_Message_PassThroughType_descriptor();
  }
  template<typename T>
  static inline const std::string& PassThroughType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PassThroughType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PassThroughType_Name.");
    return Cloud_Message_PassThroughType_Name(enum_t_value);
  }
  static inline bool PassThroughType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PassThroughType* value) {
    return Cloud_Message_PassThroughType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud.Message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// -------------------------------------------------------------------

class Cloud PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.Im.Cloud) */ {
 public:
  inline Cloud() : Cloud(nullptr) {}
  virtual ~Cloud();

  Cloud(const Cloud& from);
  Cloud(Cloud&& from) noexcept
    : Cloud() {
    *this = ::std::move(from);
  }

  inline Cloud& operator=(const Cloud& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cloud& operator=(Cloud&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cloud& default_instance();

  static inline const Cloud* internal_default_instance() {
    return reinterpret_cast<const Cloud*>(
               &_Cloud_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    183;

  friend void swap(Cloud& a, Cloud& b) {
    a.Swap(&b);
  }
  inline void Swap(Cloud* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cloud* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cloud* New() const final {
    return CreateMaybeMessage<Cloud>(nullptr);
  }

  Cloud* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cloud>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cloud& from);
  void MergeFrom(const Cloud& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cloud* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.Im.Cloud";
  }
  protected:
  explicit Cloud(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Im_2eproto);
    return ::descriptor_table_Im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Cloud_Channel Channel;
  typedef Cloud_Config Config;
  typedef Cloud_Profile Profile;
  typedef Cloud_Data Data;
  typedef Cloud_Message Message;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:AcFunDanmu.Im.Cloud)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Im_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Basic_PacketHeader

// int32 appId = 1;
inline void Basic_PacketHeader::clear_appid() {
  appid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Basic_PacketHeader::_internal_appid() const {
  return appid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Basic_PacketHeader::appid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.PacketHeader.appId)
  return _internal_appid();
}
inline void Basic_PacketHeader::_internal_set_appid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  appid_ = value;
}
inline void Basic_PacketHeader::set_appid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.PacketHeader.appId)
}

// int64 uid = 2;
inline void Basic_PacketHeader::clear_uid() {
  uid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Basic_PacketHeader::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Basic_PacketHeader::uid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.PacketHeader.uid)
  return _internal_uid();
}
inline void Basic_PacketHeader::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  uid_ = value;
}
inline void Basic_PacketHeader::set_uid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.PacketHeader.uid)
}

// int64 instanceId = 3;
inline void Basic_PacketHeader::clear_instanceid() {
  instanceid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Basic_PacketHeader::_internal_instanceid() const {
  return instanceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Basic_PacketHeader::instanceid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.PacketHeader.instanceId)
  return _internal_instanceid();
}
inline void Basic_PacketHeader::_internal_set_instanceid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  instanceid_ = value;
}
inline void Basic_PacketHeader::set_instanceid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_instanceid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.PacketHeader.instanceId)
}

// uint32 flags = 5;
inline void Basic_PacketHeader::clear_flags() {
  flags_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Basic_PacketHeader::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Basic_PacketHeader::flags() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.PacketHeader.flags)
  return _internal_flags();
}
inline void Basic_PacketHeader::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  flags_ = value;
}
inline void Basic_PacketHeader::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.PacketHeader.flags)
}

// .AcFunDanmu.Im.Basic.PacketHeader.EncodingType encodingType = 6;
inline void Basic_PacketHeader::clear_encodingtype() {
  encodingtype_ = 0;
}
inline ::AcFunDanmu::Im::Basic_PacketHeader_EncodingType Basic_PacketHeader::_internal_encodingtype() const {
  return static_cast< ::AcFunDanmu::Im::Basic_PacketHeader_EncodingType >(encodingtype_);
}
inline ::AcFunDanmu::Im::Basic_PacketHeader_EncodingType Basic_PacketHeader::encodingtype() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.PacketHeader.encodingType)
  return _internal_encodingtype();
}
inline void Basic_PacketHeader::_internal_set_encodingtype(::AcFunDanmu::Im::Basic_PacketHeader_EncodingType value) {
  
  encodingtype_ = value;
}
inline void Basic_PacketHeader::set_encodingtype(::AcFunDanmu::Im::Basic_PacketHeader_EncodingType value) {
  _internal_set_encodingtype(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.PacketHeader.encodingType)
}

// int32 decodedPayloadLen = 7;
inline void Basic_PacketHeader::clear_decodedpayloadlen() {
  decodedpayloadlen_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Basic_PacketHeader::_internal_decodedpayloadlen() const {
  return decodedpayloadlen_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Basic_PacketHeader::decodedpayloadlen() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.PacketHeader.decodedPayloadLen)
  return _internal_decodedpayloadlen();
}
inline void Basic_PacketHeader::_internal_set_decodedpayloadlen(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  decodedpayloadlen_ = value;
}
inline void Basic_PacketHeader::set_decodedpayloadlen(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_decodedpayloadlen(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.PacketHeader.decodedPayloadLen)
}

// .AcFunDanmu.Im.Basic.PacketHeader.EncryptionMode encryptionMode = 8;
inline void Basic_PacketHeader::clear_encryptionmode() {
  encryptionmode_ = 0;
}
inline ::AcFunDanmu::Im::Basic_PacketHeader_EncryptionMode Basic_PacketHeader::_internal_encryptionmode() const {
  return static_cast< ::AcFunDanmu::Im::Basic_PacketHeader_EncryptionMode >(encryptionmode_);
}
inline ::AcFunDanmu::Im::Basic_PacketHeader_EncryptionMode Basic_PacketHeader::encryptionmode() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.PacketHeader.encryptionMode)
  return _internal_encryptionmode();
}
inline void Basic_PacketHeader::_internal_set_encryptionmode(::AcFunDanmu::Im::Basic_PacketHeader_EncryptionMode value) {
  
  encryptionmode_ = value;
}
inline void Basic_PacketHeader::set_encryptionmode(::AcFunDanmu::Im::Basic_PacketHeader_EncryptionMode value) {
  _internal_set_encryptionmode(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.PacketHeader.encryptionMode)
}

// .AcFunDanmu.Im.Basic.TokenInfo tokenInfo = 9;
inline bool Basic_PacketHeader::_internal_has_tokeninfo() const {
  return this != internal_default_instance() && tokeninfo_ != nullptr;
}
inline bool Basic_PacketHeader::has_tokeninfo() const {
  return _internal_has_tokeninfo();
}
inline void Basic_PacketHeader::clear_tokeninfo() {
  if (GetArena() == nullptr && tokeninfo_ != nullptr) {
    delete tokeninfo_;
  }
  tokeninfo_ = nullptr;
}
inline const ::AcFunDanmu::Im::Basic_TokenInfo& Basic_PacketHeader::_internal_tokeninfo() const {
  const ::AcFunDanmu::Im::Basic_TokenInfo* p = tokeninfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic_TokenInfo&>(
      ::AcFunDanmu::Im::_Basic_TokenInfo_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic_TokenInfo& Basic_PacketHeader::tokeninfo() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.PacketHeader.tokenInfo)
  return _internal_tokeninfo();
}
inline void Basic_PacketHeader::unsafe_arena_set_allocated_tokeninfo(
    ::AcFunDanmu::Im::Basic_TokenInfo* tokeninfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tokeninfo_);
  }
  tokeninfo_ = tokeninfo;
  if (tokeninfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Basic.PacketHeader.tokenInfo)
}
inline ::AcFunDanmu::Im::Basic_TokenInfo* Basic_PacketHeader::release_tokeninfo() {
  
  ::AcFunDanmu::Im::Basic_TokenInfo* temp = tokeninfo_;
  tokeninfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::Basic_TokenInfo* Basic_PacketHeader::unsafe_arena_release_tokeninfo() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.PacketHeader.tokenInfo)
  
  ::AcFunDanmu::Im::Basic_TokenInfo* temp = tokeninfo_;
  tokeninfo_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic_TokenInfo* Basic_PacketHeader::_internal_mutable_tokeninfo() {
  
  if (tokeninfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic_TokenInfo>(GetArena());
    tokeninfo_ = p;
  }
  return tokeninfo_;
}
inline ::AcFunDanmu::Im::Basic_TokenInfo* Basic_PacketHeader::mutable_tokeninfo() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.PacketHeader.tokenInfo)
  return _internal_mutable_tokeninfo();
}
inline void Basic_PacketHeader::set_allocated_tokeninfo(::AcFunDanmu::Im::Basic_TokenInfo* tokeninfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tokeninfo_;
  }
  if (tokeninfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tokeninfo);
    if (message_arena != submessage_arena) {
      tokeninfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tokeninfo, submessage_arena);
    }
    
  } else {
    
  }
  tokeninfo_ = tokeninfo;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.PacketHeader.tokenInfo)
}

// int64 seqId = 10;
inline void Basic_PacketHeader::clear_seqid() {
  seqid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Basic_PacketHeader::_internal_seqid() const {
  return seqid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Basic_PacketHeader::seqid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.PacketHeader.seqId)
  return _internal_seqid();
}
inline void Basic_PacketHeader::_internal_set_seqid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  seqid_ = value;
}
inline void Basic_PacketHeader::set_seqid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_seqid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.PacketHeader.seqId)
}

// repeated .AcFunDanmu.Im.Basic.PacketHeader.Feature features = 11;
inline int Basic_PacketHeader::_internal_features_size() const {
  return features_.size();
}
inline int Basic_PacketHeader::features_size() const {
  return _internal_features_size();
}
inline void Basic_PacketHeader::clear_features() {
  features_.Clear();
}
inline ::AcFunDanmu::Im::Basic_PacketHeader_Feature Basic_PacketHeader::_internal_features(int index) const {
  return static_cast< ::AcFunDanmu::Im::Basic_PacketHeader_Feature >(features_.Get(index));
}
inline ::AcFunDanmu::Im::Basic_PacketHeader_Feature Basic_PacketHeader::features(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.PacketHeader.features)
  return _internal_features(index);
}
inline void Basic_PacketHeader::set_features(int index, ::AcFunDanmu::Im::Basic_PacketHeader_Feature value) {
  features_.Set(index, value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.PacketHeader.features)
}
inline void Basic_PacketHeader::_internal_add_features(::AcFunDanmu::Im::Basic_PacketHeader_Feature value) {
  features_.Add(value);
}
inline void Basic_PacketHeader::add_features(::AcFunDanmu::Im::Basic_PacketHeader_Feature value) {
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Basic.PacketHeader.features)
  _internal_add_features(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
Basic_PacketHeader::features() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Basic.PacketHeader.features)
  return features_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Basic_PacketHeader::_internal_mutable_features() {
  return &features_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Basic_PacketHeader::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Basic.PacketHeader.features)
  return _internal_mutable_features();
}

// -------------------------------------------------------------------

// Basic_User

// int32 appId = 1;
inline void Basic_User::clear_appid() {
  appid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Basic_User::_internal_appid() const {
  return appid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Basic_User::appid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.User.appId)
  return _internal_appid();
}
inline void Basic_User::_internal_set_appid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  appid_ = value;
}
inline void Basic_User::set_appid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.User.appId)
}

// int64 uid = 2;
inline void Basic_User::clear_uid() {
  uid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Basic_User::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Basic_User::uid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.User.uid)
  return _internal_uid();
}
inline void Basic_User::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  uid_ = value;
}
inline void Basic_User::set_uid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.User.uid)
}

// -------------------------------------------------------------------

// Basic_UserInstance

// .AcFunDanmu.Im.Basic.User user = 1;
inline bool Basic_UserInstance::_internal_has_user() const {
  return this != internal_default_instance() && user_ != nullptr;
}
inline bool Basic_UserInstance::has_user() const {
  return _internal_has_user();
}
inline void Basic_UserInstance::clear_user() {
  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
inline const ::AcFunDanmu::Im::Basic_User& Basic_UserInstance::_internal_user() const {
  const ::AcFunDanmu::Im::Basic_User* p = user_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic_User&>(
      ::AcFunDanmu::Im::_Basic_User_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic_User& Basic_UserInstance::user() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.UserInstance.user)
  return _internal_user();
}
inline void Basic_UserInstance::unsafe_arena_set_allocated_user(
    ::AcFunDanmu::Im::Basic_User* user) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_);
  }
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Basic.UserInstance.user)
}
inline ::AcFunDanmu::Im::Basic_User* Basic_UserInstance::release_user() {
  
  ::AcFunDanmu::Im::Basic_User* temp = user_;
  user_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::Basic_User* Basic_UserInstance::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.UserInstance.user)
  
  ::AcFunDanmu::Im::Basic_User* temp = user_;
  user_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic_User* Basic_UserInstance::_internal_mutable_user() {
  
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic_User>(GetArena());
    user_ = p;
  }
  return user_;
}
inline ::AcFunDanmu::Im::Basic_User* Basic_UserInstance::mutable_user() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.UserInstance.user)
  return _internal_mutable_user();
}
inline void Basic_UserInstance::set_allocated_user(::AcFunDanmu::Im::Basic_User* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.UserInstance.user)
}

// int64 instanceId = 2;
inline void Basic_UserInstance::clear_instanceid() {
  instanceid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Basic_UserInstance::_internal_instanceid() const {
  return instanceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Basic_UserInstance::instanceid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.UserInstance.instanceId)
  return _internal_instanceid();
}
inline void Basic_UserInstance::_internal_set_instanceid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  instanceid_ = value;
}
inline void Basic_UserInstance::set_instanceid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_instanceid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.UserInstance.instanceId)
}

// -------------------------------------------------------------------

// Basic_UpstreamPayload

// string command = 1;
inline void Basic_UpstreamPayload::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& Basic_UpstreamPayload::command() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.UpstreamPayload.command)
  return _internal_command();
}
inline void Basic_UpstreamPayload::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.UpstreamPayload.command)
}
inline std::string* Basic_UpstreamPayload::mutable_command() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.UpstreamPayload.command)
  return _internal_mutable_command();
}
inline const std::string& Basic_UpstreamPayload::_internal_command() const {
  return command_.Get();
}
inline void Basic_UpstreamPayload::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Basic_UpstreamPayload::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Basic.UpstreamPayload.command)
}
inline void Basic_UpstreamPayload::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Basic.UpstreamPayload.command)
}
inline void Basic_UpstreamPayload::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Basic.UpstreamPayload.command)
}
inline std::string* Basic_UpstreamPayload::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Basic_UpstreamPayload::release_command() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.UpstreamPayload.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Basic_UpstreamPayload::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.UpstreamPayload.command)
}

// int64 seqId = 2;
inline void Basic_UpstreamPayload::clear_seqid() {
  seqid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Basic_UpstreamPayload::_internal_seqid() const {
  return seqid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Basic_UpstreamPayload::seqid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.UpstreamPayload.seqId)
  return _internal_seqid();
}
inline void Basic_UpstreamPayload::_internal_set_seqid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  seqid_ = value;
}
inline void Basic_UpstreamPayload::set_seqid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_seqid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.UpstreamPayload.seqId)
}

// uint32 retryCount = 3;
inline void Basic_UpstreamPayload::clear_retrycount() {
  retrycount_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Basic_UpstreamPayload::_internal_retrycount() const {
  return retrycount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Basic_UpstreamPayload::retrycount() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.UpstreamPayload.retryCount)
  return _internal_retrycount();
}
inline void Basic_UpstreamPayload::_internal_set_retrycount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  retrycount_ = value;
}
inline void Basic_UpstreamPayload::set_retrycount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_retrycount(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.UpstreamPayload.retryCount)
}

// bytes payloadData = 4;
inline void Basic_UpstreamPayload::clear_payloaddata() {
  payloaddata_.ClearToEmpty();
}
inline const std::string& Basic_UpstreamPayload::payloaddata() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.UpstreamPayload.payloadData)
  return _internal_payloaddata();
}
inline void Basic_UpstreamPayload::set_payloaddata(const std::string& value) {
  _internal_set_payloaddata(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.UpstreamPayload.payloadData)
}
inline std::string* Basic_UpstreamPayload::mutable_payloaddata() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.UpstreamPayload.payloadData)
  return _internal_mutable_payloaddata();
}
inline const std::string& Basic_UpstreamPayload::_internal_payloaddata() const {
  return payloaddata_.Get();
}
inline void Basic_UpstreamPayload::_internal_set_payloaddata(const std::string& value) {
  
  payloaddata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Basic_UpstreamPayload::set_payloaddata(std::string&& value) {
  
  payloaddata_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Basic.UpstreamPayload.payloadData)
}
inline void Basic_UpstreamPayload::set_payloaddata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payloaddata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Basic.UpstreamPayload.payloadData)
}
inline void Basic_UpstreamPayload::set_payloaddata(const void* value,
    size_t size) {
  
  payloaddata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Basic.UpstreamPayload.payloadData)
}
inline std::string* Basic_UpstreamPayload::_internal_mutable_payloaddata() {
  
  return payloaddata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Basic_UpstreamPayload::release_payloaddata() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.UpstreamPayload.payloadData)
  return payloaddata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Basic_UpstreamPayload::set_allocated_payloaddata(std::string* payloaddata) {
  if (payloaddata != nullptr) {
    
  } else {
    
  }
  payloaddata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payloaddata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.UpstreamPayload.payloadData)
}

// .AcFunDanmu.Im.Basic.UserInstance userInstance = 5;
inline bool Basic_UpstreamPayload::_internal_has_userinstance() const {
  return this != internal_default_instance() && userinstance_ != nullptr;
}
inline bool Basic_UpstreamPayload::has_userinstance() const {
  return _internal_has_userinstance();
}
inline void Basic_UpstreamPayload::clear_userinstance() {
  if (GetArena() == nullptr && userinstance_ != nullptr) {
    delete userinstance_;
  }
  userinstance_ = nullptr;
}
inline const ::AcFunDanmu::Im::Basic_UserInstance& Basic_UpstreamPayload::_internal_userinstance() const {
  const ::AcFunDanmu::Im::Basic_UserInstance* p = userinstance_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic_UserInstance&>(
      ::AcFunDanmu::Im::_Basic_UserInstance_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic_UserInstance& Basic_UpstreamPayload::userinstance() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.UpstreamPayload.userInstance)
  return _internal_userinstance();
}
inline void Basic_UpstreamPayload::unsafe_arena_set_allocated_userinstance(
    ::AcFunDanmu::Im::Basic_UserInstance* userinstance) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userinstance_);
  }
  userinstance_ = userinstance;
  if (userinstance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Basic.UpstreamPayload.userInstance)
}
inline ::AcFunDanmu::Im::Basic_UserInstance* Basic_UpstreamPayload::release_userinstance() {
  
  ::AcFunDanmu::Im::Basic_UserInstance* temp = userinstance_;
  userinstance_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::Basic_UserInstance* Basic_UpstreamPayload::unsafe_arena_release_userinstance() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.UpstreamPayload.userInstance)
  
  ::AcFunDanmu::Im::Basic_UserInstance* temp = userinstance_;
  userinstance_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic_UserInstance* Basic_UpstreamPayload::_internal_mutable_userinstance() {
  
  if (userinstance_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic_UserInstance>(GetArena());
    userinstance_ = p;
  }
  return userinstance_;
}
inline ::AcFunDanmu::Im::Basic_UserInstance* Basic_UpstreamPayload::mutable_userinstance() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.UpstreamPayload.userInstance)
  return _internal_mutable_userinstance();
}
inline void Basic_UpstreamPayload::set_allocated_userinstance(::AcFunDanmu::Im::Basic_UserInstance* userinstance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete userinstance_;
  }
  if (userinstance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(userinstance);
    if (message_arena != submessage_arena) {
      userinstance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userinstance, submessage_arena);
    }
    
  } else {
    
  }
  userinstance_ = userinstance;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.UpstreamPayload.userInstance)
}

// int32 errorCode = 6;
inline void Basic_UpstreamPayload::clear_errorcode() {
  errorcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Basic_UpstreamPayload::_internal_errorcode() const {
  return errorcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Basic_UpstreamPayload::errorcode() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.UpstreamPayload.errorCode)
  return _internal_errorcode();
}
inline void Basic_UpstreamPayload::_internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  errorcode_ = value;
}
inline void Basic_UpstreamPayload::set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.UpstreamPayload.errorCode)
}

// .AcFunDanmu.Im.Basic.SettingInfo settingInfo = 7;
inline bool Basic_UpstreamPayload::_internal_has_settinginfo() const {
  return this != internal_default_instance() && settinginfo_ != nullptr;
}
inline bool Basic_UpstreamPayload::has_settinginfo() const {
  return _internal_has_settinginfo();
}
inline void Basic_UpstreamPayload::clear_settinginfo() {
  if (GetArena() == nullptr && settinginfo_ != nullptr) {
    delete settinginfo_;
  }
  settinginfo_ = nullptr;
}
inline const ::AcFunDanmu::Im::Basic_SettingInfo& Basic_UpstreamPayload::_internal_settinginfo() const {
  const ::AcFunDanmu::Im::Basic_SettingInfo* p = settinginfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic_SettingInfo&>(
      ::AcFunDanmu::Im::_Basic_SettingInfo_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic_SettingInfo& Basic_UpstreamPayload::settinginfo() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.UpstreamPayload.settingInfo)
  return _internal_settinginfo();
}
inline void Basic_UpstreamPayload::unsafe_arena_set_allocated_settinginfo(
    ::AcFunDanmu::Im::Basic_SettingInfo* settinginfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(settinginfo_);
  }
  settinginfo_ = settinginfo;
  if (settinginfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Basic.UpstreamPayload.settingInfo)
}
inline ::AcFunDanmu::Im::Basic_SettingInfo* Basic_UpstreamPayload::release_settinginfo() {
  
  ::AcFunDanmu::Im::Basic_SettingInfo* temp = settinginfo_;
  settinginfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::Basic_SettingInfo* Basic_UpstreamPayload::unsafe_arena_release_settinginfo() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.UpstreamPayload.settingInfo)
  
  ::AcFunDanmu::Im::Basic_SettingInfo* temp = settinginfo_;
  settinginfo_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic_SettingInfo* Basic_UpstreamPayload::_internal_mutable_settinginfo() {
  
  if (settinginfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic_SettingInfo>(GetArena());
    settinginfo_ = p;
  }
  return settinginfo_;
}
inline ::AcFunDanmu::Im::Basic_SettingInfo* Basic_UpstreamPayload::mutable_settinginfo() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.UpstreamPayload.settingInfo)
  return _internal_mutable_settinginfo();
}
inline void Basic_UpstreamPayload::set_allocated_settinginfo(::AcFunDanmu::Im::Basic_SettingInfo* settinginfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete settinginfo_;
  }
  if (settinginfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(settinginfo);
    if (message_arena != submessage_arena) {
      settinginfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settinginfo, submessage_arena);
    }
    
  } else {
    
  }
  settinginfo_ = settinginfo;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.UpstreamPayload.settingInfo)
}

// .AcFunDanmu.Im.Basic.RequestBasicInfo requestBasicInfo = 8;
inline bool Basic_UpstreamPayload::_internal_has_requestbasicinfo() const {
  return this != internal_default_instance() && requestbasicinfo_ != nullptr;
}
inline bool Basic_UpstreamPayload::has_requestbasicinfo() const {
  return _internal_has_requestbasicinfo();
}
inline void Basic_UpstreamPayload::clear_requestbasicinfo() {
  if (GetArena() == nullptr && requestbasicinfo_ != nullptr) {
    delete requestbasicinfo_;
  }
  requestbasicinfo_ = nullptr;
}
inline const ::AcFunDanmu::Im::Basic_RequestBasicInfo& Basic_UpstreamPayload::_internal_requestbasicinfo() const {
  const ::AcFunDanmu::Im::Basic_RequestBasicInfo* p = requestbasicinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic_RequestBasicInfo&>(
      ::AcFunDanmu::Im::_Basic_RequestBasicInfo_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic_RequestBasicInfo& Basic_UpstreamPayload::requestbasicinfo() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.UpstreamPayload.requestBasicInfo)
  return _internal_requestbasicinfo();
}
inline void Basic_UpstreamPayload::unsafe_arena_set_allocated_requestbasicinfo(
    ::AcFunDanmu::Im::Basic_RequestBasicInfo* requestbasicinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestbasicinfo_);
  }
  requestbasicinfo_ = requestbasicinfo;
  if (requestbasicinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Basic.UpstreamPayload.requestBasicInfo)
}
inline ::AcFunDanmu::Im::Basic_RequestBasicInfo* Basic_UpstreamPayload::release_requestbasicinfo() {
  
  ::AcFunDanmu::Im::Basic_RequestBasicInfo* temp = requestbasicinfo_;
  requestbasicinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::Basic_RequestBasicInfo* Basic_UpstreamPayload::unsafe_arena_release_requestbasicinfo() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.UpstreamPayload.requestBasicInfo)
  
  ::AcFunDanmu::Im::Basic_RequestBasicInfo* temp = requestbasicinfo_;
  requestbasicinfo_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic_RequestBasicInfo* Basic_UpstreamPayload::_internal_mutable_requestbasicinfo() {
  
  if (requestbasicinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic_RequestBasicInfo>(GetArena());
    requestbasicinfo_ = p;
  }
  return requestbasicinfo_;
}
inline ::AcFunDanmu::Im::Basic_RequestBasicInfo* Basic_UpstreamPayload::mutable_requestbasicinfo() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.UpstreamPayload.requestBasicInfo)
  return _internal_mutable_requestbasicinfo();
}
inline void Basic_UpstreamPayload::set_allocated_requestbasicinfo(::AcFunDanmu::Im::Basic_RequestBasicInfo* requestbasicinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete requestbasicinfo_;
  }
  if (requestbasicinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(requestbasicinfo);
    if (message_arena != submessage_arena) {
      requestbasicinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestbasicinfo, submessage_arena);
    }
    
  } else {
    
  }
  requestbasicinfo_ = requestbasicinfo;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.UpstreamPayload.requestBasicInfo)
}

// -------------------------------------------------------------------

// Basic_DownstreamPayload

// string command = 1;
inline void Basic_DownstreamPayload::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& Basic_DownstreamPayload::command() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.DownstreamPayload.command)
  return _internal_command();
}
inline void Basic_DownstreamPayload::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.DownstreamPayload.command)
}
inline std::string* Basic_DownstreamPayload::mutable_command() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.DownstreamPayload.command)
  return _internal_mutable_command();
}
inline const std::string& Basic_DownstreamPayload::_internal_command() const {
  return command_.Get();
}
inline void Basic_DownstreamPayload::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Basic_DownstreamPayload::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Basic.DownstreamPayload.command)
}
inline void Basic_DownstreamPayload::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Basic.DownstreamPayload.command)
}
inline void Basic_DownstreamPayload::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Basic.DownstreamPayload.command)
}
inline std::string* Basic_DownstreamPayload::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Basic_DownstreamPayload::release_command() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.DownstreamPayload.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Basic_DownstreamPayload::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.DownstreamPayload.command)
}

// int64 seqId = 2;
inline void Basic_DownstreamPayload::clear_seqid() {
  seqid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Basic_DownstreamPayload::_internal_seqid() const {
  return seqid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Basic_DownstreamPayload::seqid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.DownstreamPayload.seqId)
  return _internal_seqid();
}
inline void Basic_DownstreamPayload::_internal_set_seqid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  seqid_ = value;
}
inline void Basic_DownstreamPayload::set_seqid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_seqid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.DownstreamPayload.seqId)
}

// int32 errorCode = 3;
inline void Basic_DownstreamPayload::clear_errorcode() {
  errorcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Basic_DownstreamPayload::_internal_errorcode() const {
  return errorcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Basic_DownstreamPayload::errorcode() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.DownstreamPayload.errorCode)
  return _internal_errorcode();
}
inline void Basic_DownstreamPayload::_internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  errorcode_ = value;
}
inline void Basic_DownstreamPayload::set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.DownstreamPayload.errorCode)
}

// bytes payloadData = 4;
inline void Basic_DownstreamPayload::clear_payloaddata() {
  payloaddata_.ClearToEmpty();
}
inline const std::string& Basic_DownstreamPayload::payloaddata() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.DownstreamPayload.payloadData)
  return _internal_payloaddata();
}
inline void Basic_DownstreamPayload::set_payloaddata(const std::string& value) {
  _internal_set_payloaddata(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.DownstreamPayload.payloadData)
}
inline std::string* Basic_DownstreamPayload::mutable_payloaddata() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.DownstreamPayload.payloadData)
  return _internal_mutable_payloaddata();
}
inline const std::string& Basic_DownstreamPayload::_internal_payloaddata() const {
  return payloaddata_.Get();
}
inline void Basic_DownstreamPayload::_internal_set_payloaddata(const std::string& value) {
  
  payloaddata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Basic_DownstreamPayload::set_payloaddata(std::string&& value) {
  
  payloaddata_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Basic.DownstreamPayload.payloadData)
}
inline void Basic_DownstreamPayload::set_payloaddata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payloaddata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Basic.DownstreamPayload.payloadData)
}
inline void Basic_DownstreamPayload::set_payloaddata(const void* value,
    size_t size) {
  
  payloaddata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Basic.DownstreamPayload.payloadData)
}
inline std::string* Basic_DownstreamPayload::_internal_mutable_payloaddata() {
  
  return payloaddata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Basic_DownstreamPayload::release_payloaddata() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.DownstreamPayload.payloadData)
  return payloaddata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Basic_DownstreamPayload::set_allocated_payloaddata(std::string* payloaddata) {
  if (payloaddata != nullptr) {
    
  } else {
    
  }
  payloaddata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payloaddata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.DownstreamPayload.payloadData)
}

// string errorMsg = 5;
inline void Basic_DownstreamPayload::clear_errormsg() {
  errormsg_.ClearToEmpty();
}
inline const std::string& Basic_DownstreamPayload::errormsg() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.DownstreamPayload.errorMsg)
  return _internal_errormsg();
}
inline void Basic_DownstreamPayload::set_errormsg(const std::string& value) {
  _internal_set_errormsg(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.DownstreamPayload.errorMsg)
}
inline std::string* Basic_DownstreamPayload::mutable_errormsg() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.DownstreamPayload.errorMsg)
  return _internal_mutable_errormsg();
}
inline const std::string& Basic_DownstreamPayload::_internal_errormsg() const {
  return errormsg_.Get();
}
inline void Basic_DownstreamPayload::_internal_set_errormsg(const std::string& value) {
  
  errormsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Basic_DownstreamPayload::set_errormsg(std::string&& value) {
  
  errormsg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Basic.DownstreamPayload.errorMsg)
}
inline void Basic_DownstreamPayload::set_errormsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errormsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Basic.DownstreamPayload.errorMsg)
}
inline void Basic_DownstreamPayload::set_errormsg(const char* value,
    size_t size) {
  
  errormsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Basic.DownstreamPayload.errorMsg)
}
inline std::string* Basic_DownstreamPayload::_internal_mutable_errormsg() {
  
  return errormsg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Basic_DownstreamPayload::release_errormsg() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.DownstreamPayload.errorMsg)
  return errormsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Basic_DownstreamPayload::set_allocated_errormsg(std::string* errormsg) {
  if (errormsg != nullptr) {
    
  } else {
    
  }
  errormsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errormsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.DownstreamPayload.errorMsg)
}

// bytes errorData = 6;
inline void Basic_DownstreamPayload::clear_errordata() {
  errordata_.ClearToEmpty();
}
inline const std::string& Basic_DownstreamPayload::errordata() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.DownstreamPayload.errorData)
  return _internal_errordata();
}
inline void Basic_DownstreamPayload::set_errordata(const std::string& value) {
  _internal_set_errordata(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.DownstreamPayload.errorData)
}
inline std::string* Basic_DownstreamPayload::mutable_errordata() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.DownstreamPayload.errorData)
  return _internal_mutable_errordata();
}
inline const std::string& Basic_DownstreamPayload::_internal_errordata() const {
  return errordata_.Get();
}
inline void Basic_DownstreamPayload::_internal_set_errordata(const std::string& value) {
  
  errordata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Basic_DownstreamPayload::set_errordata(std::string&& value) {
  
  errordata_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Basic.DownstreamPayload.errorData)
}
inline void Basic_DownstreamPayload::set_errordata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errordata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Basic.DownstreamPayload.errorData)
}
inline void Basic_DownstreamPayload::set_errordata(const void* value,
    size_t size) {
  
  errordata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Basic.DownstreamPayload.errorData)
}
inline std::string* Basic_DownstreamPayload::_internal_mutable_errordata() {
  
  return errordata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Basic_DownstreamPayload::release_errordata() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.DownstreamPayload.errorData)
  return errordata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Basic_DownstreamPayload::set_allocated_errordata(std::string* errordata) {
  if (errordata != nullptr) {
    
  } else {
    
  }
  errordata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errordata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.DownstreamPayload.errorData)
}

// -------------------------------------------------------------------

// Basic_PingRequest

// .AcFunDanmu.Im.Basic.PingRequest.PingType pingType = 1;
inline void Basic_PingRequest::clear_pingtype() {
  pingtype_ = 0;
}
inline ::AcFunDanmu::Im::Basic_PingRequest_PingType Basic_PingRequest::_internal_pingtype() const {
  return static_cast< ::AcFunDanmu::Im::Basic_PingRequest_PingType >(pingtype_);
}
inline ::AcFunDanmu::Im::Basic_PingRequest_PingType Basic_PingRequest::pingtype() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.PingRequest.pingType)
  return _internal_pingtype();
}
inline void Basic_PingRequest::_internal_set_pingtype(::AcFunDanmu::Im::Basic_PingRequest_PingType value) {
  
  pingtype_ = value;
}
inline void Basic_PingRequest::set_pingtype(::AcFunDanmu::Im::Basic_PingRequest_PingType value) {
  _internal_set_pingtype(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.PingRequest.pingType)
}

// uint32 pingRound = 2;
inline void Basic_PingRequest::clear_pinground() {
  pinground_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Basic_PingRequest::_internal_pinground() const {
  return pinground_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Basic_PingRequest::pinground() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.PingRequest.pingRound)
  return _internal_pinground();
}
inline void Basic_PingRequest::_internal_set_pinground(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pinground_ = value;
}
inline void Basic_PingRequest::set_pinground(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pinground(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.PingRequest.pingRound)
}

// -------------------------------------------------------------------

// Basic_PingResponse

// sfixed32 serverTimestamp = 1;
inline void Basic_PingResponse::clear_servertimestamp() {
  servertimestamp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Basic_PingResponse::_internal_servertimestamp() const {
  return servertimestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Basic_PingResponse::servertimestamp() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.PingResponse.serverTimestamp)
  return _internal_servertimestamp();
}
inline void Basic_PingResponse::_internal_set_servertimestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  servertimestamp_ = value;
}
inline void Basic_PingResponse::set_servertimestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_servertimestamp(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.PingResponse.serverTimestamp)
}

// fixed32 clientIp = 2;
inline void Basic_PingResponse::clear_clientip() {
  clientip_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Basic_PingResponse::_internal_clientip() const {
  return clientip_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Basic_PingResponse::clientip() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.PingResponse.clientIp)
  return _internal_clientip();
}
inline void Basic_PingResponse::_internal_set_clientip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  clientip_ = value;
}
inline void Basic_PingResponse::set_clientip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_clientip(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.PingResponse.clientIp)
}

// fixed32 redirectIp = 3;
inline void Basic_PingResponse::clear_redirectip() {
  redirectip_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Basic_PingResponse::_internal_redirectip() const {
  return redirectip_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Basic_PingResponse::redirectip() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.PingResponse.redirectIp)
  return _internal_redirectip();
}
inline void Basic_PingResponse::_internal_set_redirectip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  redirectip_ = value;
}
inline void Basic_PingResponse::set_redirectip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_redirectip(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.PingResponse.redirectIp)
}

// uint32 redirectPort = 4;
inline void Basic_PingResponse::clear_redirectport() {
  redirectport_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Basic_PingResponse::_internal_redirectport() const {
  return redirectport_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Basic_PingResponse::redirectport() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.PingResponse.redirectPort)
  return _internal_redirectport();
}
inline void Basic_PingResponse::_internal_set_redirectport(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  redirectport_ = value;
}
inline void Basic_PingResponse::set_redirectport(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_redirectport(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.PingResponse.redirectPort)
}

// -------------------------------------------------------------------

// Basic_RegisterRequest

// .AcFunDanmu.Im.Basic.AppInfo appInfo = 1;
inline bool Basic_RegisterRequest::_internal_has_appinfo() const {
  return this != internal_default_instance() && appinfo_ != nullptr;
}
inline bool Basic_RegisterRequest::has_appinfo() const {
  return _internal_has_appinfo();
}
inline void Basic_RegisterRequest::clear_appinfo() {
  if (GetArena() == nullptr && appinfo_ != nullptr) {
    delete appinfo_;
  }
  appinfo_ = nullptr;
}
inline const ::AcFunDanmu::Im::Basic_AppInfo& Basic_RegisterRequest::_internal_appinfo() const {
  const ::AcFunDanmu::Im::Basic_AppInfo* p = appinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic_AppInfo&>(
      ::AcFunDanmu::Im::_Basic_AppInfo_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic_AppInfo& Basic_RegisterRequest::appinfo() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.RegisterRequest.appInfo)
  return _internal_appinfo();
}
inline void Basic_RegisterRequest::unsafe_arena_set_allocated_appinfo(
    ::AcFunDanmu::Im::Basic_AppInfo* appinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(appinfo_);
  }
  appinfo_ = appinfo;
  if (appinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Basic.RegisterRequest.appInfo)
}
inline ::AcFunDanmu::Im::Basic_AppInfo* Basic_RegisterRequest::release_appinfo() {
  
  ::AcFunDanmu::Im::Basic_AppInfo* temp = appinfo_;
  appinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::Basic_AppInfo* Basic_RegisterRequest::unsafe_arena_release_appinfo() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.RegisterRequest.appInfo)
  
  ::AcFunDanmu::Im::Basic_AppInfo* temp = appinfo_;
  appinfo_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic_AppInfo* Basic_RegisterRequest::_internal_mutable_appinfo() {
  
  if (appinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic_AppInfo>(GetArena());
    appinfo_ = p;
  }
  return appinfo_;
}
inline ::AcFunDanmu::Im::Basic_AppInfo* Basic_RegisterRequest::mutable_appinfo() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.RegisterRequest.appInfo)
  return _internal_mutable_appinfo();
}
inline void Basic_RegisterRequest::set_allocated_appinfo(::AcFunDanmu::Im::Basic_AppInfo* appinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete appinfo_;
  }
  if (appinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(appinfo);
    if (message_arena != submessage_arena) {
      appinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, appinfo, submessage_arena);
    }
    
  } else {
    
  }
  appinfo_ = appinfo;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.RegisterRequest.appInfo)
}

// .AcFunDanmu.Im.Basic.DeviceInfo deviceInfo = 2;
inline bool Basic_RegisterRequest::_internal_has_deviceinfo() const {
  return this != internal_default_instance() && deviceinfo_ != nullptr;
}
inline bool Basic_RegisterRequest::has_deviceinfo() const {
  return _internal_has_deviceinfo();
}
inline void Basic_RegisterRequest::clear_deviceinfo() {
  if (GetArena() == nullptr && deviceinfo_ != nullptr) {
    delete deviceinfo_;
  }
  deviceinfo_ = nullptr;
}
inline const ::AcFunDanmu::Im::Basic_DeviceInfo& Basic_RegisterRequest::_internal_deviceinfo() const {
  const ::AcFunDanmu::Im::Basic_DeviceInfo* p = deviceinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic_DeviceInfo&>(
      ::AcFunDanmu::Im::_Basic_DeviceInfo_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic_DeviceInfo& Basic_RegisterRequest::deviceinfo() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.RegisterRequest.deviceInfo)
  return _internal_deviceinfo();
}
inline void Basic_RegisterRequest::unsafe_arena_set_allocated_deviceinfo(
    ::AcFunDanmu::Im::Basic_DeviceInfo* deviceinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deviceinfo_);
  }
  deviceinfo_ = deviceinfo;
  if (deviceinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Basic.RegisterRequest.deviceInfo)
}
inline ::AcFunDanmu::Im::Basic_DeviceInfo* Basic_RegisterRequest::release_deviceinfo() {
  
  ::AcFunDanmu::Im::Basic_DeviceInfo* temp = deviceinfo_;
  deviceinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::Basic_DeviceInfo* Basic_RegisterRequest::unsafe_arena_release_deviceinfo() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.RegisterRequest.deviceInfo)
  
  ::AcFunDanmu::Im::Basic_DeviceInfo* temp = deviceinfo_;
  deviceinfo_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic_DeviceInfo* Basic_RegisterRequest::_internal_mutable_deviceinfo() {
  
  if (deviceinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic_DeviceInfo>(GetArena());
    deviceinfo_ = p;
  }
  return deviceinfo_;
}
inline ::AcFunDanmu::Im::Basic_DeviceInfo* Basic_RegisterRequest::mutable_deviceinfo() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.RegisterRequest.deviceInfo)
  return _internal_mutable_deviceinfo();
}
inline void Basic_RegisterRequest::set_allocated_deviceinfo(::AcFunDanmu::Im::Basic_DeviceInfo* deviceinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete deviceinfo_;
  }
  if (deviceinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(deviceinfo);
    if (message_arena != submessage_arena) {
      deviceinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deviceinfo, submessage_arena);
    }
    
  } else {
    
  }
  deviceinfo_ = deviceinfo;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.RegisterRequest.deviceInfo)
}

// .AcFunDanmu.Im.Basic.EnvInfo envInfo = 3;
inline bool Basic_RegisterRequest::_internal_has_envinfo() const {
  return this != internal_default_instance() && envinfo_ != nullptr;
}
inline bool Basic_RegisterRequest::has_envinfo() const {
  return _internal_has_envinfo();
}
inline void Basic_RegisterRequest::clear_envinfo() {
  if (GetArena() == nullptr && envinfo_ != nullptr) {
    delete envinfo_;
  }
  envinfo_ = nullptr;
}
inline const ::AcFunDanmu::Im::Basic_EnvInfo& Basic_RegisterRequest::_internal_envinfo() const {
  const ::AcFunDanmu::Im::Basic_EnvInfo* p = envinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic_EnvInfo&>(
      ::AcFunDanmu::Im::_Basic_EnvInfo_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic_EnvInfo& Basic_RegisterRequest::envinfo() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.RegisterRequest.envInfo)
  return _internal_envinfo();
}
inline void Basic_RegisterRequest::unsafe_arena_set_allocated_envinfo(
    ::AcFunDanmu::Im::Basic_EnvInfo* envinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(envinfo_);
  }
  envinfo_ = envinfo;
  if (envinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Basic.RegisterRequest.envInfo)
}
inline ::AcFunDanmu::Im::Basic_EnvInfo* Basic_RegisterRequest::release_envinfo() {
  
  ::AcFunDanmu::Im::Basic_EnvInfo* temp = envinfo_;
  envinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::Basic_EnvInfo* Basic_RegisterRequest::unsafe_arena_release_envinfo() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.RegisterRequest.envInfo)
  
  ::AcFunDanmu::Im::Basic_EnvInfo* temp = envinfo_;
  envinfo_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic_EnvInfo* Basic_RegisterRequest::_internal_mutable_envinfo() {
  
  if (envinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic_EnvInfo>(GetArena());
    envinfo_ = p;
  }
  return envinfo_;
}
inline ::AcFunDanmu::Im::Basic_EnvInfo* Basic_RegisterRequest::mutable_envinfo() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.RegisterRequest.envInfo)
  return _internal_mutable_envinfo();
}
inline void Basic_RegisterRequest::set_allocated_envinfo(::AcFunDanmu::Im::Basic_EnvInfo* envinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete envinfo_;
  }
  if (envinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(envinfo);
    if (message_arena != submessage_arena) {
      envinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, envinfo, submessage_arena);
    }
    
  } else {
    
  }
  envinfo_ = envinfo;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.RegisterRequest.envInfo)
}

// .AcFunDanmu.Im.Basic.RegisterRequest.PresenceStatus presenceStatus = 4;
inline void Basic_RegisterRequest::clear_presencestatus() {
  presencestatus_ = 0;
}
inline ::AcFunDanmu::Im::Basic_RegisterRequest_PresenceStatus Basic_RegisterRequest::_internal_presencestatus() const {
  return static_cast< ::AcFunDanmu::Im::Basic_RegisterRequest_PresenceStatus >(presencestatus_);
}
inline ::AcFunDanmu::Im::Basic_RegisterRequest_PresenceStatus Basic_RegisterRequest::presencestatus() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.RegisterRequest.presenceStatus)
  return _internal_presencestatus();
}
inline void Basic_RegisterRequest::_internal_set_presencestatus(::AcFunDanmu::Im::Basic_RegisterRequest_PresenceStatus value) {
  
  presencestatus_ = value;
}
inline void Basic_RegisterRequest::set_presencestatus(::AcFunDanmu::Im::Basic_RegisterRequest_PresenceStatus value) {
  _internal_set_presencestatus(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.RegisterRequest.presenceStatus)
}

// .AcFunDanmu.Im.Basic.RegisterRequest.ActiveStatus appActiveStatus = 5;
inline void Basic_RegisterRequest::clear_appactivestatus() {
  appactivestatus_ = 0;
}
inline ::AcFunDanmu::Im::Basic_RegisterRequest_ActiveStatus Basic_RegisterRequest::_internal_appactivestatus() const {
  return static_cast< ::AcFunDanmu::Im::Basic_RegisterRequest_ActiveStatus >(appactivestatus_);
}
inline ::AcFunDanmu::Im::Basic_RegisterRequest_ActiveStatus Basic_RegisterRequest::appactivestatus() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.RegisterRequest.appActiveStatus)
  return _internal_appactivestatus();
}
inline void Basic_RegisterRequest::_internal_set_appactivestatus(::AcFunDanmu::Im::Basic_RegisterRequest_ActiveStatus value) {
  
  appactivestatus_ = value;
}
inline void Basic_RegisterRequest::set_appactivestatus(::AcFunDanmu::Im::Basic_RegisterRequest_ActiveStatus value) {
  _internal_set_appactivestatus(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.RegisterRequest.appActiveStatus)
}

// bytes appCustomStatus = 6;
inline void Basic_RegisterRequest::clear_appcustomstatus() {
  appcustomstatus_.ClearToEmpty();
}
inline const std::string& Basic_RegisterRequest::appcustomstatus() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.RegisterRequest.appCustomStatus)
  return _internal_appcustomstatus();
}
inline void Basic_RegisterRequest::set_appcustomstatus(const std::string& value) {
  _internal_set_appcustomstatus(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.RegisterRequest.appCustomStatus)
}
inline std::string* Basic_RegisterRequest::mutable_appcustomstatus() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.RegisterRequest.appCustomStatus)
  return _internal_mutable_appcustomstatus();
}
inline const std::string& Basic_RegisterRequest::_internal_appcustomstatus() const {
  return appcustomstatus_.Get();
}
inline void Basic_RegisterRequest::_internal_set_appcustomstatus(const std::string& value) {
  
  appcustomstatus_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Basic_RegisterRequest::set_appcustomstatus(std::string&& value) {
  
  appcustomstatus_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Basic.RegisterRequest.appCustomStatus)
}
inline void Basic_RegisterRequest::set_appcustomstatus(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  appcustomstatus_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Basic.RegisterRequest.appCustomStatus)
}
inline void Basic_RegisterRequest::set_appcustomstatus(const void* value,
    size_t size) {
  
  appcustomstatus_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Basic.RegisterRequest.appCustomStatus)
}
inline std::string* Basic_RegisterRequest::_internal_mutable_appcustomstatus() {
  
  return appcustomstatus_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Basic_RegisterRequest::release_appcustomstatus() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.RegisterRequest.appCustomStatus)
  return appcustomstatus_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Basic_RegisterRequest::set_allocated_appcustomstatus(std::string* appcustomstatus) {
  if (appcustomstatus != nullptr) {
    
  } else {
    
  }
  appcustomstatus_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), appcustomstatus,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.RegisterRequest.appCustomStatus)
}

// .AcFunDanmu.Im.Basic.PushServiceToken pushServiceToken = 7;
inline bool Basic_RegisterRequest::_internal_has_pushservicetoken() const {
  return this != internal_default_instance() && pushservicetoken_ != nullptr;
}
inline bool Basic_RegisterRequest::has_pushservicetoken() const {
  return _internal_has_pushservicetoken();
}
inline void Basic_RegisterRequest::clear_pushservicetoken() {
  if (GetArena() == nullptr && pushservicetoken_ != nullptr) {
    delete pushservicetoken_;
  }
  pushservicetoken_ = nullptr;
}
inline const ::AcFunDanmu::Im::Basic_PushServiceToken& Basic_RegisterRequest::_internal_pushservicetoken() const {
  const ::AcFunDanmu::Im::Basic_PushServiceToken* p = pushservicetoken_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic_PushServiceToken&>(
      ::AcFunDanmu::Im::_Basic_PushServiceToken_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic_PushServiceToken& Basic_RegisterRequest::pushservicetoken() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.RegisterRequest.pushServiceToken)
  return _internal_pushservicetoken();
}
inline void Basic_RegisterRequest::unsafe_arena_set_allocated_pushservicetoken(
    ::AcFunDanmu::Im::Basic_PushServiceToken* pushservicetoken) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pushservicetoken_);
  }
  pushservicetoken_ = pushservicetoken;
  if (pushservicetoken) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Basic.RegisterRequest.pushServiceToken)
}
inline ::AcFunDanmu::Im::Basic_PushServiceToken* Basic_RegisterRequest::release_pushservicetoken() {
  
  ::AcFunDanmu::Im::Basic_PushServiceToken* temp = pushservicetoken_;
  pushservicetoken_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::Basic_PushServiceToken* Basic_RegisterRequest::unsafe_arena_release_pushservicetoken() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.RegisterRequest.pushServiceToken)
  
  ::AcFunDanmu::Im::Basic_PushServiceToken* temp = pushservicetoken_;
  pushservicetoken_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic_PushServiceToken* Basic_RegisterRequest::_internal_mutable_pushservicetoken() {
  
  if (pushservicetoken_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic_PushServiceToken>(GetArena());
    pushservicetoken_ = p;
  }
  return pushservicetoken_;
}
inline ::AcFunDanmu::Im::Basic_PushServiceToken* Basic_RegisterRequest::mutable_pushservicetoken() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.RegisterRequest.pushServiceToken)
  return _internal_mutable_pushservicetoken();
}
inline void Basic_RegisterRequest::set_allocated_pushservicetoken(::AcFunDanmu::Im::Basic_PushServiceToken* pushservicetoken) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pushservicetoken_;
  }
  if (pushservicetoken) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pushservicetoken);
    if (message_arena != submessage_arena) {
      pushservicetoken = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pushservicetoken, submessage_arena);
    }
    
  } else {
    
  }
  pushservicetoken_ = pushservicetoken;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.RegisterRequest.pushServiceToken)
}

// int64 instanceId = 8;
inline void Basic_RegisterRequest::clear_instanceid() {
  instanceid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Basic_RegisterRequest::_internal_instanceid() const {
  return instanceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Basic_RegisterRequest::instanceid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.RegisterRequest.instanceId)
  return _internal_instanceid();
}
inline void Basic_RegisterRequest::_internal_set_instanceid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  instanceid_ = value;
}
inline void Basic_RegisterRequest::set_instanceid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_instanceid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.RegisterRequest.instanceId)
}

// repeated .AcFunDanmu.Im.Basic.PushServiceToken pushServiceTokenList = 9;
inline int Basic_RegisterRequest::_internal_pushservicetokenlist_size() const {
  return pushservicetokenlist_.size();
}
inline int Basic_RegisterRequest::pushservicetokenlist_size() const {
  return _internal_pushservicetokenlist_size();
}
inline void Basic_RegisterRequest::clear_pushservicetokenlist() {
  pushservicetokenlist_.Clear();
}
inline ::AcFunDanmu::Im::Basic_PushServiceToken* Basic_RegisterRequest::mutable_pushservicetokenlist(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.RegisterRequest.pushServiceTokenList)
  return pushservicetokenlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_PushServiceToken >*
Basic_RegisterRequest::mutable_pushservicetokenlist() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Basic.RegisterRequest.pushServiceTokenList)
  return &pushservicetokenlist_;
}
inline const ::AcFunDanmu::Im::Basic_PushServiceToken& Basic_RegisterRequest::_internal_pushservicetokenlist(int index) const {
  return pushservicetokenlist_.Get(index);
}
inline const ::AcFunDanmu::Im::Basic_PushServiceToken& Basic_RegisterRequest::pushservicetokenlist(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.RegisterRequest.pushServiceTokenList)
  return _internal_pushservicetokenlist(index);
}
inline ::AcFunDanmu::Im::Basic_PushServiceToken* Basic_RegisterRequest::_internal_add_pushservicetokenlist() {
  return pushservicetokenlist_.Add();
}
inline ::AcFunDanmu::Im::Basic_PushServiceToken* Basic_RegisterRequest::add_pushservicetokenlist() {
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Basic.RegisterRequest.pushServiceTokenList)
  return _internal_add_pushservicetokenlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_PushServiceToken >&
Basic_RegisterRequest::pushservicetokenlist() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Basic.RegisterRequest.pushServiceTokenList)
  return pushservicetokenlist_;
}

// int32 keepaliveIntervalSec = 10;
inline void Basic_RegisterRequest::clear_keepaliveintervalsec() {
  keepaliveintervalsec_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Basic_RegisterRequest::_internal_keepaliveintervalsec() const {
  return keepaliveintervalsec_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Basic_RegisterRequest::keepaliveintervalsec() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.RegisterRequest.keepaliveIntervalSec)
  return _internal_keepaliveintervalsec();
}
inline void Basic_RegisterRequest::_internal_set_keepaliveintervalsec(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  keepaliveintervalsec_ = value;
}
inline void Basic_RegisterRequest::set_keepaliveintervalsec(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_keepaliveintervalsec(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.RegisterRequest.keepaliveIntervalSec)
}

// -------------------------------------------------------------------

// Basic_RegisterResponse

// .AcFunDanmu.Im.Basic.AccessPointsConfig accessPointsConfig = 1;
inline bool Basic_RegisterResponse::_internal_has_accesspointsconfig() const {
  return this != internal_default_instance() && accesspointsconfig_ != nullptr;
}
inline bool Basic_RegisterResponse::has_accesspointsconfig() const {
  return _internal_has_accesspointsconfig();
}
inline void Basic_RegisterResponse::clear_accesspointsconfig() {
  if (GetArena() == nullptr && accesspointsconfig_ != nullptr) {
    delete accesspointsconfig_;
  }
  accesspointsconfig_ = nullptr;
}
inline const ::AcFunDanmu::Im::Basic_AccessPointsConfig& Basic_RegisterResponse::_internal_accesspointsconfig() const {
  const ::AcFunDanmu::Im::Basic_AccessPointsConfig* p = accesspointsconfig_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic_AccessPointsConfig&>(
      ::AcFunDanmu::Im::_Basic_AccessPointsConfig_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic_AccessPointsConfig& Basic_RegisterResponse::accesspointsconfig() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.RegisterResponse.accessPointsConfig)
  return _internal_accesspointsconfig();
}
inline void Basic_RegisterResponse::unsafe_arena_set_allocated_accesspointsconfig(
    ::AcFunDanmu::Im::Basic_AccessPointsConfig* accesspointsconfig) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(accesspointsconfig_);
  }
  accesspointsconfig_ = accesspointsconfig;
  if (accesspointsconfig) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Basic.RegisterResponse.accessPointsConfig)
}
inline ::AcFunDanmu::Im::Basic_AccessPointsConfig* Basic_RegisterResponse::release_accesspointsconfig() {
  
  ::AcFunDanmu::Im::Basic_AccessPointsConfig* temp = accesspointsconfig_;
  accesspointsconfig_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::Basic_AccessPointsConfig* Basic_RegisterResponse::unsafe_arena_release_accesspointsconfig() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.RegisterResponse.accessPointsConfig)
  
  ::AcFunDanmu::Im::Basic_AccessPointsConfig* temp = accesspointsconfig_;
  accesspointsconfig_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic_AccessPointsConfig* Basic_RegisterResponse::_internal_mutable_accesspointsconfig() {
  
  if (accesspointsconfig_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic_AccessPointsConfig>(GetArena());
    accesspointsconfig_ = p;
  }
  return accesspointsconfig_;
}
inline ::AcFunDanmu::Im::Basic_AccessPointsConfig* Basic_RegisterResponse::mutable_accesspointsconfig() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.RegisterResponse.accessPointsConfig)
  return _internal_mutable_accesspointsconfig();
}
inline void Basic_RegisterResponse::set_allocated_accesspointsconfig(::AcFunDanmu::Im::Basic_AccessPointsConfig* accesspointsconfig) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete accesspointsconfig_;
  }
  if (accesspointsconfig) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(accesspointsconfig);
    if (message_arena != submessage_arena) {
      accesspointsconfig = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accesspointsconfig, submessage_arena);
    }
    
  } else {
    
  }
  accesspointsconfig_ = accesspointsconfig;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.RegisterResponse.accessPointsConfig)
}

// bytes sessKey = 2;
inline void Basic_RegisterResponse::clear_sesskey() {
  sesskey_.ClearToEmpty();
}
inline const std::string& Basic_RegisterResponse::sesskey() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.RegisterResponse.sessKey)
  return _internal_sesskey();
}
inline void Basic_RegisterResponse::set_sesskey(const std::string& value) {
  _internal_set_sesskey(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.RegisterResponse.sessKey)
}
inline std::string* Basic_RegisterResponse::mutable_sesskey() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.RegisterResponse.sessKey)
  return _internal_mutable_sesskey();
}
inline const std::string& Basic_RegisterResponse::_internal_sesskey() const {
  return sesskey_.Get();
}
inline void Basic_RegisterResponse::_internal_set_sesskey(const std::string& value) {
  
  sesskey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Basic_RegisterResponse::set_sesskey(std::string&& value) {
  
  sesskey_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Basic.RegisterResponse.sessKey)
}
inline void Basic_RegisterResponse::set_sesskey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sesskey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Basic.RegisterResponse.sessKey)
}
inline void Basic_RegisterResponse::set_sesskey(const void* value,
    size_t size) {
  
  sesskey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Basic.RegisterResponse.sessKey)
}
inline std::string* Basic_RegisterResponse::_internal_mutable_sesskey() {
  
  return sesskey_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Basic_RegisterResponse::release_sesskey() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.RegisterResponse.sessKey)
  return sesskey_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Basic_RegisterResponse::set_allocated_sesskey(std::string* sesskey) {
  if (sesskey != nullptr) {
    
  } else {
    
  }
  sesskey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sesskey,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.RegisterResponse.sessKey)
}

// int64 instanceId = 3;
inline void Basic_RegisterResponse::clear_instanceid() {
  instanceid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Basic_RegisterResponse::_internal_instanceid() const {
  return instanceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Basic_RegisterResponse::instanceid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.RegisterResponse.instanceId)
  return _internal_instanceid();
}
inline void Basic_RegisterResponse::_internal_set_instanceid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  instanceid_ = value;
}
inline void Basic_RegisterResponse::set_instanceid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_instanceid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.RegisterResponse.instanceId)
}

// .AcFunDanmu.Im.Basic.SdkOption sdkOption = 4;
inline bool Basic_RegisterResponse::_internal_has_sdkoption() const {
  return this != internal_default_instance() && sdkoption_ != nullptr;
}
inline bool Basic_RegisterResponse::has_sdkoption() const {
  return _internal_has_sdkoption();
}
inline void Basic_RegisterResponse::clear_sdkoption() {
  if (GetArena() == nullptr && sdkoption_ != nullptr) {
    delete sdkoption_;
  }
  sdkoption_ = nullptr;
}
inline const ::AcFunDanmu::Im::Basic_SdkOption& Basic_RegisterResponse::_internal_sdkoption() const {
  const ::AcFunDanmu::Im::Basic_SdkOption* p = sdkoption_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic_SdkOption&>(
      ::AcFunDanmu::Im::_Basic_SdkOption_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic_SdkOption& Basic_RegisterResponse::sdkoption() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.RegisterResponse.sdkOption)
  return _internal_sdkoption();
}
inline void Basic_RegisterResponse::unsafe_arena_set_allocated_sdkoption(
    ::AcFunDanmu::Im::Basic_SdkOption* sdkoption) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sdkoption_);
  }
  sdkoption_ = sdkoption;
  if (sdkoption) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Basic.RegisterResponse.sdkOption)
}
inline ::AcFunDanmu::Im::Basic_SdkOption* Basic_RegisterResponse::release_sdkoption() {
  
  ::AcFunDanmu::Im::Basic_SdkOption* temp = sdkoption_;
  sdkoption_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::Basic_SdkOption* Basic_RegisterResponse::unsafe_arena_release_sdkoption() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.RegisterResponse.sdkOption)
  
  ::AcFunDanmu::Im::Basic_SdkOption* temp = sdkoption_;
  sdkoption_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic_SdkOption* Basic_RegisterResponse::_internal_mutable_sdkoption() {
  
  if (sdkoption_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic_SdkOption>(GetArena());
    sdkoption_ = p;
  }
  return sdkoption_;
}
inline ::AcFunDanmu::Im::Basic_SdkOption* Basic_RegisterResponse::mutable_sdkoption() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.RegisterResponse.sdkOption)
  return _internal_mutable_sdkoption();
}
inline void Basic_RegisterResponse::set_allocated_sdkoption(::AcFunDanmu::Im::Basic_SdkOption* sdkoption) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sdkoption_;
  }
  if (sdkoption) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sdkoption);
    if (message_arena != submessage_arena) {
      sdkoption = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sdkoption, submessage_arena);
    }
    
  } else {
    
  }
  sdkoption_ = sdkoption;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.RegisterResponse.sdkOption)
}

// -------------------------------------------------------------------

// Basic_AccessPointsConfig

// repeated .AcFunDanmu.Im.Basic.AccessPoint optimalAps = 1;
inline int Basic_AccessPointsConfig::_internal_optimalaps_size() const {
  return optimalaps_.size();
}
inline int Basic_AccessPointsConfig::optimalaps_size() const {
  return _internal_optimalaps_size();
}
inline void Basic_AccessPointsConfig::clear_optimalaps() {
  optimalaps_.Clear();
}
inline ::AcFunDanmu::Im::Basic_AccessPoint* Basic_AccessPointsConfig::mutable_optimalaps(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.AccessPointsConfig.optimalAps)
  return optimalaps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_AccessPoint >*
Basic_AccessPointsConfig::mutable_optimalaps() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Basic.AccessPointsConfig.optimalAps)
  return &optimalaps_;
}
inline const ::AcFunDanmu::Im::Basic_AccessPoint& Basic_AccessPointsConfig::_internal_optimalaps(int index) const {
  return optimalaps_.Get(index);
}
inline const ::AcFunDanmu::Im::Basic_AccessPoint& Basic_AccessPointsConfig::optimalaps(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.AccessPointsConfig.optimalAps)
  return _internal_optimalaps(index);
}
inline ::AcFunDanmu::Im::Basic_AccessPoint* Basic_AccessPointsConfig::_internal_add_optimalaps() {
  return optimalaps_.Add();
}
inline ::AcFunDanmu::Im::Basic_AccessPoint* Basic_AccessPointsConfig::add_optimalaps() {
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Basic.AccessPointsConfig.optimalAps)
  return _internal_add_optimalaps();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_AccessPoint >&
Basic_AccessPointsConfig::optimalaps() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Basic.AccessPointsConfig.optimalAps)
  return optimalaps_;
}

// repeated .AcFunDanmu.Im.Basic.AccessPoint backupAps = 2;
inline int Basic_AccessPointsConfig::_internal_backupaps_size() const {
  return backupaps_.size();
}
inline int Basic_AccessPointsConfig::backupaps_size() const {
  return _internal_backupaps_size();
}
inline void Basic_AccessPointsConfig::clear_backupaps() {
  backupaps_.Clear();
}
inline ::AcFunDanmu::Im::Basic_AccessPoint* Basic_AccessPointsConfig::mutable_backupaps(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.AccessPointsConfig.backupAps)
  return backupaps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_AccessPoint >*
Basic_AccessPointsConfig::mutable_backupaps() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Basic.AccessPointsConfig.backupAps)
  return &backupaps_;
}
inline const ::AcFunDanmu::Im::Basic_AccessPoint& Basic_AccessPointsConfig::_internal_backupaps(int index) const {
  return backupaps_.Get(index);
}
inline const ::AcFunDanmu::Im::Basic_AccessPoint& Basic_AccessPointsConfig::backupaps(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.AccessPointsConfig.backupAps)
  return _internal_backupaps(index);
}
inline ::AcFunDanmu::Im::Basic_AccessPoint* Basic_AccessPointsConfig::_internal_add_backupaps() {
  return backupaps_.Add();
}
inline ::AcFunDanmu::Im::Basic_AccessPoint* Basic_AccessPointsConfig::add_backupaps() {
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Basic.AccessPointsConfig.backupAps)
  return _internal_add_backupaps();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_AccessPoint >&
Basic_AccessPointsConfig::backupaps() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Basic.AccessPointsConfig.backupAps)
  return backupaps_;
}

// repeated uint32 availablePorts = 3;
inline int Basic_AccessPointsConfig::_internal_availableports_size() const {
  return availableports_.size();
}
inline int Basic_AccessPointsConfig::availableports_size() const {
  return _internal_availableports_size();
}
inline void Basic_AccessPointsConfig::clear_availableports() {
  availableports_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Basic_AccessPointsConfig::_internal_availableports(int index) const {
  return availableports_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Basic_AccessPointsConfig::availableports(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.AccessPointsConfig.availablePorts)
  return _internal_availableports(index);
}
inline void Basic_AccessPointsConfig::set_availableports(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  availableports_.Set(index, value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.AccessPointsConfig.availablePorts)
}
inline void Basic_AccessPointsConfig::_internal_add_availableports(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  availableports_.Add(value);
}
inline void Basic_AccessPointsConfig::add_availableports(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_availableports(value);
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Basic.AccessPointsConfig.availablePorts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Basic_AccessPointsConfig::_internal_availableports() const {
  return availableports_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Basic_AccessPointsConfig::availableports() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Basic.AccessPointsConfig.availablePorts)
  return _internal_availableports();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Basic_AccessPointsConfig::_internal_mutable_availableports() {
  return &availableports_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Basic_AccessPointsConfig::mutable_availableports() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Basic.AccessPointsConfig.availablePorts)
  return _internal_mutable_availableports();
}

// .AcFunDanmu.Im.Basic.AccessPoint foreceLastConnectedAp = 4;
inline bool Basic_AccessPointsConfig::_internal_has_forecelastconnectedap() const {
  return this != internal_default_instance() && forecelastconnectedap_ != nullptr;
}
inline bool Basic_AccessPointsConfig::has_forecelastconnectedap() const {
  return _internal_has_forecelastconnectedap();
}
inline void Basic_AccessPointsConfig::clear_forecelastconnectedap() {
  if (GetArena() == nullptr && forecelastconnectedap_ != nullptr) {
    delete forecelastconnectedap_;
  }
  forecelastconnectedap_ = nullptr;
}
inline const ::AcFunDanmu::Im::Basic_AccessPoint& Basic_AccessPointsConfig::_internal_forecelastconnectedap() const {
  const ::AcFunDanmu::Im::Basic_AccessPoint* p = forecelastconnectedap_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic_AccessPoint&>(
      ::AcFunDanmu::Im::_Basic_AccessPoint_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic_AccessPoint& Basic_AccessPointsConfig::forecelastconnectedap() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.AccessPointsConfig.foreceLastConnectedAp)
  return _internal_forecelastconnectedap();
}
inline void Basic_AccessPointsConfig::unsafe_arena_set_allocated_forecelastconnectedap(
    ::AcFunDanmu::Im::Basic_AccessPoint* forecelastconnectedap) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(forecelastconnectedap_);
  }
  forecelastconnectedap_ = forecelastconnectedap;
  if (forecelastconnectedap) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Basic.AccessPointsConfig.foreceLastConnectedAp)
}
inline ::AcFunDanmu::Im::Basic_AccessPoint* Basic_AccessPointsConfig::release_forecelastconnectedap() {
  
  ::AcFunDanmu::Im::Basic_AccessPoint* temp = forecelastconnectedap_;
  forecelastconnectedap_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::Basic_AccessPoint* Basic_AccessPointsConfig::unsafe_arena_release_forecelastconnectedap() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.AccessPointsConfig.foreceLastConnectedAp)
  
  ::AcFunDanmu::Im::Basic_AccessPoint* temp = forecelastconnectedap_;
  forecelastconnectedap_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic_AccessPoint* Basic_AccessPointsConfig::_internal_mutable_forecelastconnectedap() {
  
  if (forecelastconnectedap_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic_AccessPoint>(GetArena());
    forecelastconnectedap_ = p;
  }
  return forecelastconnectedap_;
}
inline ::AcFunDanmu::Im::Basic_AccessPoint* Basic_AccessPointsConfig::mutable_forecelastconnectedap() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.AccessPointsConfig.foreceLastConnectedAp)
  return _internal_mutable_forecelastconnectedap();
}
inline void Basic_AccessPointsConfig::set_allocated_forecelastconnectedap(::AcFunDanmu::Im::Basic_AccessPoint* forecelastconnectedap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete forecelastconnectedap_;
  }
  if (forecelastconnectedap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(forecelastconnectedap);
    if (message_arena != submessage_arena) {
      forecelastconnectedap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, forecelastconnectedap, submessage_arena);
    }
    
  } else {
    
  }
  forecelastconnectedap_ = forecelastconnectedap;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.AccessPointsConfig.foreceLastConnectedAp)
}

// -------------------------------------------------------------------

// Basic_UnregisterRequest

// -------------------------------------------------------------------

// Basic_UnregisterResponse

// -------------------------------------------------------------------

// Basic_KeepAliveRequest

// .AcFunDanmu.Im.Basic.RegisterRequest.PresenceStatus presenceStatus = 1;
inline void Basic_KeepAliveRequest::clear_presencestatus() {
  presencestatus_ = 0;
}
inline ::AcFunDanmu::Im::Basic_RegisterRequest_PresenceStatus Basic_KeepAliveRequest::_internal_presencestatus() const {
  return static_cast< ::AcFunDanmu::Im::Basic_RegisterRequest_PresenceStatus >(presencestatus_);
}
inline ::AcFunDanmu::Im::Basic_RegisterRequest_PresenceStatus Basic_KeepAliveRequest::presencestatus() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.KeepAliveRequest.presenceStatus)
  return _internal_presencestatus();
}
inline void Basic_KeepAliveRequest::_internal_set_presencestatus(::AcFunDanmu::Im::Basic_RegisterRequest_PresenceStatus value) {
  
  presencestatus_ = value;
}
inline void Basic_KeepAliveRequest::set_presencestatus(::AcFunDanmu::Im::Basic_RegisterRequest_PresenceStatus value) {
  _internal_set_presencestatus(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.KeepAliveRequest.presenceStatus)
}

// .AcFunDanmu.Im.Basic.RegisterRequest.ActiveStatus appActiveStatus = 2;
inline void Basic_KeepAliveRequest::clear_appactivestatus() {
  appactivestatus_ = 0;
}
inline ::AcFunDanmu::Im::Basic_RegisterRequest_ActiveStatus Basic_KeepAliveRequest::_internal_appactivestatus() const {
  return static_cast< ::AcFunDanmu::Im::Basic_RegisterRequest_ActiveStatus >(appactivestatus_);
}
inline ::AcFunDanmu::Im::Basic_RegisterRequest_ActiveStatus Basic_KeepAliveRequest::appactivestatus() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.KeepAliveRequest.appActiveStatus)
  return _internal_appactivestatus();
}
inline void Basic_KeepAliveRequest::_internal_set_appactivestatus(::AcFunDanmu::Im::Basic_RegisterRequest_ActiveStatus value) {
  
  appactivestatus_ = value;
}
inline void Basic_KeepAliveRequest::set_appactivestatus(::AcFunDanmu::Im::Basic_RegisterRequest_ActiveStatus value) {
  _internal_set_appactivestatus(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.KeepAliveRequest.appActiveStatus)
}

// .AcFunDanmu.Im.Basic.PushServiceToken pushServiceToken = 3;
inline bool Basic_KeepAliveRequest::_internal_has_pushservicetoken() const {
  return this != internal_default_instance() && pushservicetoken_ != nullptr;
}
inline bool Basic_KeepAliveRequest::has_pushservicetoken() const {
  return _internal_has_pushservicetoken();
}
inline void Basic_KeepAliveRequest::clear_pushservicetoken() {
  if (GetArena() == nullptr && pushservicetoken_ != nullptr) {
    delete pushservicetoken_;
  }
  pushservicetoken_ = nullptr;
}
inline const ::AcFunDanmu::Im::Basic_PushServiceToken& Basic_KeepAliveRequest::_internal_pushservicetoken() const {
  const ::AcFunDanmu::Im::Basic_PushServiceToken* p = pushservicetoken_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic_PushServiceToken&>(
      ::AcFunDanmu::Im::_Basic_PushServiceToken_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic_PushServiceToken& Basic_KeepAliveRequest::pushservicetoken() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.KeepAliveRequest.pushServiceToken)
  return _internal_pushservicetoken();
}
inline void Basic_KeepAliveRequest::unsafe_arena_set_allocated_pushservicetoken(
    ::AcFunDanmu::Im::Basic_PushServiceToken* pushservicetoken) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pushservicetoken_);
  }
  pushservicetoken_ = pushservicetoken;
  if (pushservicetoken) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Basic.KeepAliveRequest.pushServiceToken)
}
inline ::AcFunDanmu::Im::Basic_PushServiceToken* Basic_KeepAliveRequest::release_pushservicetoken() {
  
  ::AcFunDanmu::Im::Basic_PushServiceToken* temp = pushservicetoken_;
  pushservicetoken_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::Basic_PushServiceToken* Basic_KeepAliveRequest::unsafe_arena_release_pushservicetoken() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.KeepAliveRequest.pushServiceToken)
  
  ::AcFunDanmu::Im::Basic_PushServiceToken* temp = pushservicetoken_;
  pushservicetoken_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic_PushServiceToken* Basic_KeepAliveRequest::_internal_mutable_pushservicetoken() {
  
  if (pushservicetoken_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic_PushServiceToken>(GetArena());
    pushservicetoken_ = p;
  }
  return pushservicetoken_;
}
inline ::AcFunDanmu::Im::Basic_PushServiceToken* Basic_KeepAliveRequest::mutable_pushservicetoken() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.KeepAliveRequest.pushServiceToken)
  return _internal_mutable_pushservicetoken();
}
inline void Basic_KeepAliveRequest::set_allocated_pushservicetoken(::AcFunDanmu::Im::Basic_PushServiceToken* pushservicetoken) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pushservicetoken_;
  }
  if (pushservicetoken) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pushservicetoken);
    if (message_arena != submessage_arena) {
      pushservicetoken = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pushservicetoken, submessage_arena);
    }
    
  } else {
    
  }
  pushservicetoken_ = pushservicetoken;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.KeepAliveRequest.pushServiceToken)
}

// repeated .AcFunDanmu.Im.Basic.PushServiceToken pushServiceTokenList = 4;
inline int Basic_KeepAliveRequest::_internal_pushservicetokenlist_size() const {
  return pushservicetokenlist_.size();
}
inline int Basic_KeepAliveRequest::pushservicetokenlist_size() const {
  return _internal_pushservicetokenlist_size();
}
inline void Basic_KeepAliveRequest::clear_pushservicetokenlist() {
  pushservicetokenlist_.Clear();
}
inline ::AcFunDanmu::Im::Basic_PushServiceToken* Basic_KeepAliveRequest::mutable_pushservicetokenlist(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.KeepAliveRequest.pushServiceTokenList)
  return pushservicetokenlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_PushServiceToken >*
Basic_KeepAliveRequest::mutable_pushservicetokenlist() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Basic.KeepAliveRequest.pushServiceTokenList)
  return &pushservicetokenlist_;
}
inline const ::AcFunDanmu::Im::Basic_PushServiceToken& Basic_KeepAliveRequest::_internal_pushservicetokenlist(int index) const {
  return pushservicetokenlist_.Get(index);
}
inline const ::AcFunDanmu::Im::Basic_PushServiceToken& Basic_KeepAliveRequest::pushservicetokenlist(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.KeepAliveRequest.pushServiceTokenList)
  return _internal_pushservicetokenlist(index);
}
inline ::AcFunDanmu::Im::Basic_PushServiceToken* Basic_KeepAliveRequest::_internal_add_pushservicetokenlist() {
  return pushservicetokenlist_.Add();
}
inline ::AcFunDanmu::Im::Basic_PushServiceToken* Basic_KeepAliveRequest::add_pushservicetokenlist() {
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Basic.KeepAliveRequest.pushServiceTokenList)
  return _internal_add_pushservicetokenlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_PushServiceToken >&
Basic_KeepAliveRequest::pushservicetokenlist() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Basic.KeepAliveRequest.pushServiceTokenList)
  return pushservicetokenlist_;
}

// int32 keepaliveIntervalSec = 5;
inline void Basic_KeepAliveRequest::clear_keepaliveintervalsec() {
  keepaliveintervalsec_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Basic_KeepAliveRequest::_internal_keepaliveintervalsec() const {
  return keepaliveintervalsec_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Basic_KeepAliveRequest::keepaliveintervalsec() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.KeepAliveRequest.keepaliveIntervalSec)
  return _internal_keepaliveintervalsec();
}
inline void Basic_KeepAliveRequest::_internal_set_keepaliveintervalsec(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  keepaliveintervalsec_ = value;
}
inline void Basic_KeepAliveRequest::set_keepaliveintervalsec(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_keepaliveintervalsec(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.KeepAliveRequest.keepaliveIntervalSec)
}

// -------------------------------------------------------------------

// Basic_KeepAliveResponse

// .AcFunDanmu.Im.Basic.AccessPointsConfig accessPointsConfig = 1;
inline bool Basic_KeepAliveResponse::_internal_has_accesspointsconfig() const {
  return this != internal_default_instance() && accesspointsconfig_ != nullptr;
}
inline bool Basic_KeepAliveResponse::has_accesspointsconfig() const {
  return _internal_has_accesspointsconfig();
}
inline void Basic_KeepAliveResponse::clear_accesspointsconfig() {
  if (GetArena() == nullptr && accesspointsconfig_ != nullptr) {
    delete accesspointsconfig_;
  }
  accesspointsconfig_ = nullptr;
}
inline const ::AcFunDanmu::Im::Basic_AccessPointsConfig& Basic_KeepAliveResponse::_internal_accesspointsconfig() const {
  const ::AcFunDanmu::Im::Basic_AccessPointsConfig* p = accesspointsconfig_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic_AccessPointsConfig&>(
      ::AcFunDanmu::Im::_Basic_AccessPointsConfig_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic_AccessPointsConfig& Basic_KeepAliveResponse::accesspointsconfig() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.KeepAliveResponse.accessPointsConfig)
  return _internal_accesspointsconfig();
}
inline void Basic_KeepAliveResponse::unsafe_arena_set_allocated_accesspointsconfig(
    ::AcFunDanmu::Im::Basic_AccessPointsConfig* accesspointsconfig) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(accesspointsconfig_);
  }
  accesspointsconfig_ = accesspointsconfig;
  if (accesspointsconfig) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Basic.KeepAliveResponse.accessPointsConfig)
}
inline ::AcFunDanmu::Im::Basic_AccessPointsConfig* Basic_KeepAliveResponse::release_accesspointsconfig() {
  
  ::AcFunDanmu::Im::Basic_AccessPointsConfig* temp = accesspointsconfig_;
  accesspointsconfig_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::Basic_AccessPointsConfig* Basic_KeepAliveResponse::unsafe_arena_release_accesspointsconfig() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.KeepAliveResponse.accessPointsConfig)
  
  ::AcFunDanmu::Im::Basic_AccessPointsConfig* temp = accesspointsconfig_;
  accesspointsconfig_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic_AccessPointsConfig* Basic_KeepAliveResponse::_internal_mutable_accesspointsconfig() {
  
  if (accesspointsconfig_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic_AccessPointsConfig>(GetArena());
    accesspointsconfig_ = p;
  }
  return accesspointsconfig_;
}
inline ::AcFunDanmu::Im::Basic_AccessPointsConfig* Basic_KeepAliveResponse::mutable_accesspointsconfig() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.KeepAliveResponse.accessPointsConfig)
  return _internal_mutable_accesspointsconfig();
}
inline void Basic_KeepAliveResponse::set_allocated_accesspointsconfig(::AcFunDanmu::Im::Basic_AccessPointsConfig* accesspointsconfig) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete accesspointsconfig_;
  }
  if (accesspointsconfig) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(accesspointsconfig);
    if (message_arena != submessage_arena) {
      accesspointsconfig = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accesspointsconfig, submessage_arena);
    }
    
  } else {
    
  }
  accesspointsconfig_ = accesspointsconfig;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.KeepAliveResponse.accessPointsConfig)
}

// int64 serverMsec = 2;
inline void Basic_KeepAliveResponse::clear_servermsec() {
  servermsec_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Basic_KeepAliveResponse::_internal_servermsec() const {
  return servermsec_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Basic_KeepAliveResponse::servermsec() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.KeepAliveResponse.serverMsec)
  return _internal_servermsec();
}
inline void Basic_KeepAliveResponse::_internal_set_servermsec(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  servermsec_ = value;
}
inline void Basic_KeepAliveResponse::set_servermsec(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_servermsec(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.KeepAliveResponse.serverMsec)
}

// -------------------------------------------------------------------

// Basic_AccessPoint

// .AcFunDanmu.Im.Basic.AccessPoint.AddressType addressType = 1;
inline void Basic_AccessPoint::clear_addresstype() {
  addresstype_ = 0;
}
inline ::AcFunDanmu::Im::Basic_AccessPoint_AddressType Basic_AccessPoint::_internal_addresstype() const {
  return static_cast< ::AcFunDanmu::Im::Basic_AccessPoint_AddressType >(addresstype_);
}
inline ::AcFunDanmu::Im::Basic_AccessPoint_AddressType Basic_AccessPoint::addresstype() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.AccessPoint.addressType)
  return _internal_addresstype();
}
inline void Basic_AccessPoint::_internal_set_addresstype(::AcFunDanmu::Im::Basic_AccessPoint_AddressType value) {
  
  addresstype_ = value;
}
inline void Basic_AccessPoint::set_addresstype(::AcFunDanmu::Im::Basic_AccessPoint_AddressType value) {
  _internal_set_addresstype(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.AccessPoint.addressType)
}

// uint32 port = 2;
inline void Basic_AccessPoint::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Basic_AccessPoint::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Basic_AccessPoint::port() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.AccessPoint.port)
  return _internal_port();
}
inline void Basic_AccessPoint::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_ = value;
}
inline void Basic_AccessPoint::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.AccessPoint.port)
}

// fixed32 ipV4 = 3;
inline void Basic_AccessPoint::clear_ipv4() {
  ipv4_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Basic_AccessPoint::_internal_ipv4() const {
  return ipv4_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Basic_AccessPoint::ipv4() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.AccessPoint.ipV4)
  return _internal_ipv4();
}
inline void Basic_AccessPoint::_internal_set_ipv4(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ipv4_ = value;
}
inline void Basic_AccessPoint::set_ipv4(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ipv4(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.AccessPoint.ipV4)
}

// bytes ipV6 = 4;
inline void Basic_AccessPoint::clear_ipv6() {
  ipv6_.ClearToEmpty();
}
inline const std::string& Basic_AccessPoint::ipv6() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.AccessPoint.ipV6)
  return _internal_ipv6();
}
inline void Basic_AccessPoint::set_ipv6(const std::string& value) {
  _internal_set_ipv6(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.AccessPoint.ipV6)
}
inline std::string* Basic_AccessPoint::mutable_ipv6() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.AccessPoint.ipV6)
  return _internal_mutable_ipv6();
}
inline const std::string& Basic_AccessPoint::_internal_ipv6() const {
  return ipv6_.Get();
}
inline void Basic_AccessPoint::_internal_set_ipv6(const std::string& value) {
  
  ipv6_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Basic_AccessPoint::set_ipv6(std::string&& value) {
  
  ipv6_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Basic.AccessPoint.ipV6)
}
inline void Basic_AccessPoint::set_ipv6(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ipv6_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Basic.AccessPoint.ipV6)
}
inline void Basic_AccessPoint::set_ipv6(const void* value,
    size_t size) {
  
  ipv6_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Basic.AccessPoint.ipV6)
}
inline std::string* Basic_AccessPoint::_internal_mutable_ipv6() {
  
  return ipv6_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Basic_AccessPoint::release_ipv6() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.AccessPoint.ipV6)
  return ipv6_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Basic_AccessPoint::set_allocated_ipv6(std::string* ipv6) {
  if (ipv6 != nullptr) {
    
  } else {
    
  }
  ipv6_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ipv6,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.AccessPoint.ipV6)
}

// string domain = 5;
inline void Basic_AccessPoint::clear_domain() {
  domain_.ClearToEmpty();
}
inline const std::string& Basic_AccessPoint::domain() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.AccessPoint.domain)
  return _internal_domain();
}
inline void Basic_AccessPoint::set_domain(const std::string& value) {
  _internal_set_domain(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.AccessPoint.domain)
}
inline std::string* Basic_AccessPoint::mutable_domain() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.AccessPoint.domain)
  return _internal_mutable_domain();
}
inline const std::string& Basic_AccessPoint::_internal_domain() const {
  return domain_.Get();
}
inline void Basic_AccessPoint::_internal_set_domain(const std::string& value) {
  
  domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Basic_AccessPoint::set_domain(std::string&& value) {
  
  domain_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Basic.AccessPoint.domain)
}
inline void Basic_AccessPoint::set_domain(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Basic.AccessPoint.domain)
}
inline void Basic_AccessPoint::set_domain(const char* value,
    size_t size) {
  
  domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Basic.AccessPoint.domain)
}
inline std::string* Basic_AccessPoint::_internal_mutable_domain() {
  
  return domain_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Basic_AccessPoint::release_domain() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.AccessPoint.domain)
  return domain_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Basic_AccessPoint::set_allocated_domain(std::string* domain) {
  if (domain != nullptr) {
    
  } else {
    
  }
  domain_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), domain,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.AccessPoint.domain)
}

// -------------------------------------------------------------------

// Basic_TokenInfo

// .AcFunDanmu.Im.Basic.TokenInfo.TokenType tokenType = 1;
inline void Basic_TokenInfo::clear_tokentype() {
  tokentype_ = 0;
}
inline ::AcFunDanmu::Im::Basic_TokenInfo_TokenType Basic_TokenInfo::_internal_tokentype() const {
  return static_cast< ::AcFunDanmu::Im::Basic_TokenInfo_TokenType >(tokentype_);
}
inline ::AcFunDanmu::Im::Basic_TokenInfo_TokenType Basic_TokenInfo::tokentype() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.TokenInfo.tokenType)
  return _internal_tokentype();
}
inline void Basic_TokenInfo::_internal_set_tokentype(::AcFunDanmu::Im::Basic_TokenInfo_TokenType value) {
  
  tokentype_ = value;
}
inline void Basic_TokenInfo::set_tokentype(::AcFunDanmu::Im::Basic_TokenInfo_TokenType value) {
  _internal_set_tokentype(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.TokenInfo.tokenType)
}

// bytes token = 2;
inline void Basic_TokenInfo::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& Basic_TokenInfo::token() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.TokenInfo.token)
  return _internal_token();
}
inline void Basic_TokenInfo::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.TokenInfo.token)
}
inline std::string* Basic_TokenInfo::mutable_token() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.TokenInfo.token)
  return _internal_mutable_token();
}
inline const std::string& Basic_TokenInfo::_internal_token() const {
  return token_.Get();
}
inline void Basic_TokenInfo::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Basic_TokenInfo::set_token(std::string&& value) {
  
  token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Basic.TokenInfo.token)
}
inline void Basic_TokenInfo::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Basic.TokenInfo.token)
}
inline void Basic_TokenInfo::set_token(const void* value,
    size_t size) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Basic.TokenInfo.token)
}
inline std::string* Basic_TokenInfo::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Basic_TokenInfo::release_token() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.TokenInfo.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Basic_TokenInfo::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.TokenInfo.token)
}

// -------------------------------------------------------------------

// Basic_PushServiceToken

// .AcFunDanmu.Im.Basic.PushServiceToken.PushType pushType = 1;
inline void Basic_PushServiceToken::clear_pushtype() {
  pushtype_ = 0;
}
inline ::AcFunDanmu::Im::Basic_PushServiceToken_PushType Basic_PushServiceToken::_internal_pushtype() const {
  return static_cast< ::AcFunDanmu::Im::Basic_PushServiceToken_PushType >(pushtype_);
}
inline ::AcFunDanmu::Im::Basic_PushServiceToken_PushType Basic_PushServiceToken::pushtype() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.PushServiceToken.pushType)
  return _internal_pushtype();
}
inline void Basic_PushServiceToken::_internal_set_pushtype(::AcFunDanmu::Im::Basic_PushServiceToken_PushType value) {
  
  pushtype_ = value;
}
inline void Basic_PushServiceToken::set_pushtype(::AcFunDanmu::Im::Basic_PushServiceToken_PushType value) {
  _internal_set_pushtype(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.PushServiceToken.pushType)
}

// bytes token = 2;
inline void Basic_PushServiceToken::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& Basic_PushServiceToken::token() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.PushServiceToken.token)
  return _internal_token();
}
inline void Basic_PushServiceToken::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.PushServiceToken.token)
}
inline std::string* Basic_PushServiceToken::mutable_token() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.PushServiceToken.token)
  return _internal_mutable_token();
}
inline const std::string& Basic_PushServiceToken::_internal_token() const {
  return token_.Get();
}
inline void Basic_PushServiceToken::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Basic_PushServiceToken::set_token(std::string&& value) {
  
  token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Basic.PushServiceToken.token)
}
inline void Basic_PushServiceToken::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Basic.PushServiceToken.token)
}
inline void Basic_PushServiceToken::set_token(const void* value,
    size_t size) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Basic.PushServiceToken.token)
}
inline std::string* Basic_PushServiceToken::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Basic_PushServiceToken::release_token() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.PushServiceToken.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Basic_PushServiceToken::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.PushServiceToken.token)
}

// bool isPassThrough = 3;
inline void Basic_PushServiceToken::clear_ispassthrough() {
  ispassthrough_ = false;
}
inline bool Basic_PushServiceToken::_internal_ispassthrough() const {
  return ispassthrough_;
}
inline bool Basic_PushServiceToken::ispassthrough() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.PushServiceToken.isPassThrough)
  return _internal_ispassthrough();
}
inline void Basic_PushServiceToken::_internal_set_ispassthrough(bool value) {
  
  ispassthrough_ = value;
}
inline void Basic_PushServiceToken::set_ispassthrough(bool value) {
  _internal_set_ispassthrough(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.PushServiceToken.isPassThrough)
}

// -------------------------------------------------------------------

// Basic_SettingInfo

// string locale = 1;
inline void Basic_SettingInfo::clear_locale() {
  locale_.ClearToEmpty();
}
inline const std::string& Basic_SettingInfo::locale() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.SettingInfo.locale)
  return _internal_locale();
}
inline void Basic_SettingInfo::set_locale(const std::string& value) {
  _internal_set_locale(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.SettingInfo.locale)
}
inline std::string* Basic_SettingInfo::mutable_locale() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.SettingInfo.locale)
  return _internal_mutable_locale();
}
inline const std::string& Basic_SettingInfo::_internal_locale() const {
  return locale_.Get();
}
inline void Basic_SettingInfo::_internal_set_locale(const std::string& value) {
  
  locale_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Basic_SettingInfo::set_locale(std::string&& value) {
  
  locale_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Basic.SettingInfo.locale)
}
inline void Basic_SettingInfo::set_locale(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  locale_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Basic.SettingInfo.locale)
}
inline void Basic_SettingInfo::set_locale(const char* value,
    size_t size) {
  
  locale_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Basic.SettingInfo.locale)
}
inline std::string* Basic_SettingInfo::_internal_mutable_locale() {
  
  return locale_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Basic_SettingInfo::release_locale() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.SettingInfo.locale)
  return locale_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Basic_SettingInfo::set_allocated_locale(std::string* locale) {
  if (locale != nullptr) {
    
  } else {
    
  }
  locale_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), locale,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.SettingInfo.locale)
}

// sint32 timezone = 2;
inline void Basic_SettingInfo::clear_timezone() {
  timezone_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Basic_SettingInfo::_internal_timezone() const {
  return timezone_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Basic_SettingInfo::timezone() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.SettingInfo.timezone)
  return _internal_timezone();
}
inline void Basic_SettingInfo::_internal_set_timezone(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  timezone_ = value;
}
inline void Basic_SettingInfo::set_timezone(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_timezone(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.SettingInfo.timezone)
}

// -------------------------------------------------------------------

// Basic_AppInfo

// string appName = 1;
inline void Basic_AppInfo::clear_appname() {
  appname_.ClearToEmpty();
}
inline const std::string& Basic_AppInfo::appname() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.AppInfo.appName)
  return _internal_appname();
}
inline void Basic_AppInfo::set_appname(const std::string& value) {
  _internal_set_appname(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.AppInfo.appName)
}
inline std::string* Basic_AppInfo::mutable_appname() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.AppInfo.appName)
  return _internal_mutable_appname();
}
inline const std::string& Basic_AppInfo::_internal_appname() const {
  return appname_.Get();
}
inline void Basic_AppInfo::_internal_set_appname(const std::string& value) {
  
  appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Basic_AppInfo::set_appname(std::string&& value) {
  
  appname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Basic.AppInfo.appName)
}
inline void Basic_AppInfo::set_appname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Basic.AppInfo.appName)
}
inline void Basic_AppInfo::set_appname(const char* value,
    size_t size) {
  
  appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Basic.AppInfo.appName)
}
inline std::string* Basic_AppInfo::_internal_mutable_appname() {
  
  return appname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Basic_AppInfo::release_appname() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.AppInfo.appName)
  return appname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Basic_AppInfo::set_allocated_appname(std::string* appname) {
  if (appname != nullptr) {
    
  } else {
    
  }
  appname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), appname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.AppInfo.appName)
}

// string appVersion = 2;
inline void Basic_AppInfo::clear_appversion() {
  appversion_.ClearToEmpty();
}
inline const std::string& Basic_AppInfo::appversion() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.AppInfo.appVersion)
  return _internal_appversion();
}
inline void Basic_AppInfo::set_appversion(const std::string& value) {
  _internal_set_appversion(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.AppInfo.appVersion)
}
inline std::string* Basic_AppInfo::mutable_appversion() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.AppInfo.appVersion)
  return _internal_mutable_appversion();
}
inline const std::string& Basic_AppInfo::_internal_appversion() const {
  return appversion_.Get();
}
inline void Basic_AppInfo::_internal_set_appversion(const std::string& value) {
  
  appversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Basic_AppInfo::set_appversion(std::string&& value) {
  
  appversion_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Basic.AppInfo.appVersion)
}
inline void Basic_AppInfo::set_appversion(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  appversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Basic.AppInfo.appVersion)
}
inline void Basic_AppInfo::set_appversion(const char* value,
    size_t size) {
  
  appversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Basic.AppInfo.appVersion)
}
inline std::string* Basic_AppInfo::_internal_mutable_appversion() {
  
  return appversion_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Basic_AppInfo::release_appversion() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.AppInfo.appVersion)
  return appversion_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Basic_AppInfo::set_allocated_appversion(std::string* appversion) {
  if (appversion != nullptr) {
    
  } else {
    
  }
  appversion_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), appversion,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.AppInfo.appVersion)
}

// string appChannel = 3;
inline void Basic_AppInfo::clear_appchannel() {
  appchannel_.ClearToEmpty();
}
inline const std::string& Basic_AppInfo::appchannel() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.AppInfo.appChannel)
  return _internal_appchannel();
}
inline void Basic_AppInfo::set_appchannel(const std::string& value) {
  _internal_set_appchannel(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.AppInfo.appChannel)
}
inline std::string* Basic_AppInfo::mutable_appchannel() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.AppInfo.appChannel)
  return _internal_mutable_appchannel();
}
inline const std::string& Basic_AppInfo::_internal_appchannel() const {
  return appchannel_.Get();
}
inline void Basic_AppInfo::_internal_set_appchannel(const std::string& value) {
  
  appchannel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Basic_AppInfo::set_appchannel(std::string&& value) {
  
  appchannel_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Basic.AppInfo.appChannel)
}
inline void Basic_AppInfo::set_appchannel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  appchannel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Basic.AppInfo.appChannel)
}
inline void Basic_AppInfo::set_appchannel(const char* value,
    size_t size) {
  
  appchannel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Basic.AppInfo.appChannel)
}
inline std::string* Basic_AppInfo::_internal_mutable_appchannel() {
  
  return appchannel_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Basic_AppInfo::release_appchannel() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.AppInfo.appChannel)
  return appchannel_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Basic_AppInfo::set_allocated_appchannel(std::string* appchannel) {
  if (appchannel != nullptr) {
    
  } else {
    
  }
  appchannel_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), appchannel,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.AppInfo.appChannel)
}

// string sdkVersion = 4;
inline void Basic_AppInfo::clear_sdkversion() {
  sdkversion_.ClearToEmpty();
}
inline const std::string& Basic_AppInfo::sdkversion() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.AppInfo.sdkVersion)
  return _internal_sdkversion();
}
inline void Basic_AppInfo::set_sdkversion(const std::string& value) {
  _internal_set_sdkversion(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.AppInfo.sdkVersion)
}
inline std::string* Basic_AppInfo::mutable_sdkversion() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.AppInfo.sdkVersion)
  return _internal_mutable_sdkversion();
}
inline const std::string& Basic_AppInfo::_internal_sdkversion() const {
  return sdkversion_.Get();
}
inline void Basic_AppInfo::_internal_set_sdkversion(const std::string& value) {
  
  sdkversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Basic_AppInfo::set_sdkversion(std::string&& value) {
  
  sdkversion_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Basic.AppInfo.sdkVersion)
}
inline void Basic_AppInfo::set_sdkversion(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sdkversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Basic.AppInfo.sdkVersion)
}
inline void Basic_AppInfo::set_sdkversion(const char* value,
    size_t size) {
  
  sdkversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Basic.AppInfo.sdkVersion)
}
inline std::string* Basic_AppInfo::_internal_mutable_sdkversion() {
  
  return sdkversion_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Basic_AppInfo::release_sdkversion() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.AppInfo.sdkVersion)
  return sdkversion_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Basic_AppInfo::set_allocated_sdkversion(std::string* sdkversion) {
  if (sdkversion != nullptr) {
    
  } else {
    
  }
  sdkversion_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sdkversion,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.AppInfo.sdkVersion)
}

// string extensionInfo = 11;
inline void Basic_AppInfo::clear_extensioninfo() {
  extensioninfo_.ClearToEmpty();
}
inline const std::string& Basic_AppInfo::extensioninfo() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.AppInfo.extensionInfo)
  return _internal_extensioninfo();
}
inline void Basic_AppInfo::set_extensioninfo(const std::string& value) {
  _internal_set_extensioninfo(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.AppInfo.extensionInfo)
}
inline std::string* Basic_AppInfo::mutable_extensioninfo() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.AppInfo.extensionInfo)
  return _internal_mutable_extensioninfo();
}
inline const std::string& Basic_AppInfo::_internal_extensioninfo() const {
  return extensioninfo_.Get();
}
inline void Basic_AppInfo::_internal_set_extensioninfo(const std::string& value) {
  
  extensioninfo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Basic_AppInfo::set_extensioninfo(std::string&& value) {
  
  extensioninfo_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Basic.AppInfo.extensionInfo)
}
inline void Basic_AppInfo::set_extensioninfo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  extensioninfo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Basic.AppInfo.extensionInfo)
}
inline void Basic_AppInfo::set_extensioninfo(const char* value,
    size_t size) {
  
  extensioninfo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Basic.AppInfo.extensionInfo)
}
inline std::string* Basic_AppInfo::_internal_mutable_extensioninfo() {
  
  return extensioninfo_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Basic_AppInfo::release_extensioninfo() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.AppInfo.extensionInfo)
  return extensioninfo_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Basic_AppInfo::set_allocated_extensioninfo(std::string* extensioninfo) {
  if (extensioninfo != nullptr) {
    
  } else {
    
  }
  extensioninfo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extensioninfo,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.AppInfo.extensionInfo)
}

// -------------------------------------------------------------------

// Basic_DeviceInfo

// .AcFunDanmu.Im.Basic.DeviceInfo.PlatformType platformType = 1;
inline void Basic_DeviceInfo::clear_platformtype() {
  platformtype_ = 0;
}
inline ::AcFunDanmu::Im::Basic_DeviceInfo_PlatformType Basic_DeviceInfo::_internal_platformtype() const {
  return static_cast< ::AcFunDanmu::Im::Basic_DeviceInfo_PlatformType >(platformtype_);
}
inline ::AcFunDanmu::Im::Basic_DeviceInfo_PlatformType Basic_DeviceInfo::platformtype() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.DeviceInfo.platformType)
  return _internal_platformtype();
}
inline void Basic_DeviceInfo::_internal_set_platformtype(::AcFunDanmu::Im::Basic_DeviceInfo_PlatformType value) {
  
  platformtype_ = value;
}
inline void Basic_DeviceInfo::set_platformtype(::AcFunDanmu::Im::Basic_DeviceInfo_PlatformType value) {
  _internal_set_platformtype(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.DeviceInfo.platformType)
}

// string osVersion = 2;
inline void Basic_DeviceInfo::clear_osversion() {
  osversion_.ClearToEmpty();
}
inline const std::string& Basic_DeviceInfo::osversion() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.DeviceInfo.osVersion)
  return _internal_osversion();
}
inline void Basic_DeviceInfo::set_osversion(const std::string& value) {
  _internal_set_osversion(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.DeviceInfo.osVersion)
}
inline std::string* Basic_DeviceInfo::mutable_osversion() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.DeviceInfo.osVersion)
  return _internal_mutable_osversion();
}
inline const std::string& Basic_DeviceInfo::_internal_osversion() const {
  return osversion_.Get();
}
inline void Basic_DeviceInfo::_internal_set_osversion(const std::string& value) {
  
  osversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Basic_DeviceInfo::set_osversion(std::string&& value) {
  
  osversion_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Basic.DeviceInfo.osVersion)
}
inline void Basic_DeviceInfo::set_osversion(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  osversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Basic.DeviceInfo.osVersion)
}
inline void Basic_DeviceInfo::set_osversion(const char* value,
    size_t size) {
  
  osversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Basic.DeviceInfo.osVersion)
}
inline std::string* Basic_DeviceInfo::_internal_mutable_osversion() {
  
  return osversion_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Basic_DeviceInfo::release_osversion() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.DeviceInfo.osVersion)
  return osversion_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Basic_DeviceInfo::set_allocated_osversion(std::string* osversion) {
  if (osversion != nullptr) {
    
  } else {
    
  }
  osversion_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), osversion,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.DeviceInfo.osVersion)
}

// string deviceModel = 3;
inline void Basic_DeviceInfo::clear_devicemodel() {
  devicemodel_.ClearToEmpty();
}
inline const std::string& Basic_DeviceInfo::devicemodel() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.DeviceInfo.deviceModel)
  return _internal_devicemodel();
}
inline void Basic_DeviceInfo::set_devicemodel(const std::string& value) {
  _internal_set_devicemodel(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.DeviceInfo.deviceModel)
}
inline std::string* Basic_DeviceInfo::mutable_devicemodel() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.DeviceInfo.deviceModel)
  return _internal_mutable_devicemodel();
}
inline const std::string& Basic_DeviceInfo::_internal_devicemodel() const {
  return devicemodel_.Get();
}
inline void Basic_DeviceInfo::_internal_set_devicemodel(const std::string& value) {
  
  devicemodel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Basic_DeviceInfo::set_devicemodel(std::string&& value) {
  
  devicemodel_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Basic.DeviceInfo.deviceModel)
}
inline void Basic_DeviceInfo::set_devicemodel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  devicemodel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Basic.DeviceInfo.deviceModel)
}
inline void Basic_DeviceInfo::set_devicemodel(const char* value,
    size_t size) {
  
  devicemodel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Basic.DeviceInfo.deviceModel)
}
inline std::string* Basic_DeviceInfo::_internal_mutable_devicemodel() {
  
  return devicemodel_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Basic_DeviceInfo::release_devicemodel() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.DeviceInfo.deviceModel)
  return devicemodel_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Basic_DeviceInfo::set_allocated_devicemodel(std::string* devicemodel) {
  if (devicemodel != nullptr) {
    
  } else {
    
  }
  devicemodel_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), devicemodel,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.DeviceInfo.deviceModel)
}

// bytes imeiMd5 = 4;
inline void Basic_DeviceInfo::clear_imeimd5() {
  imeimd5_.ClearToEmpty();
}
inline const std::string& Basic_DeviceInfo::imeimd5() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.DeviceInfo.imeiMd5)
  return _internal_imeimd5();
}
inline void Basic_DeviceInfo::set_imeimd5(const std::string& value) {
  _internal_set_imeimd5(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.DeviceInfo.imeiMd5)
}
inline std::string* Basic_DeviceInfo::mutable_imeimd5() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.DeviceInfo.imeiMd5)
  return _internal_mutable_imeimd5();
}
inline const std::string& Basic_DeviceInfo::_internal_imeimd5() const {
  return imeimd5_.Get();
}
inline void Basic_DeviceInfo::_internal_set_imeimd5(const std::string& value) {
  
  imeimd5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Basic_DeviceInfo::set_imeimd5(std::string&& value) {
  
  imeimd5_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Basic.DeviceInfo.imeiMd5)
}
inline void Basic_DeviceInfo::set_imeimd5(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  imeimd5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Basic.DeviceInfo.imeiMd5)
}
inline void Basic_DeviceInfo::set_imeimd5(const void* value,
    size_t size) {
  
  imeimd5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Basic.DeviceInfo.imeiMd5)
}
inline std::string* Basic_DeviceInfo::_internal_mutable_imeimd5() {
  
  return imeimd5_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Basic_DeviceInfo::release_imeimd5() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.DeviceInfo.imeiMd5)
  return imeimd5_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Basic_DeviceInfo::set_allocated_imeimd5(std::string* imeimd5) {
  if (imeimd5 != nullptr) {
    
  } else {
    
  }
  imeimd5_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imeimd5,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.DeviceInfo.imeiMd5)
}

// string deviceId = 5;
inline void Basic_DeviceInfo::clear_deviceid() {
  deviceid_.ClearToEmpty();
}
inline const std::string& Basic_DeviceInfo::deviceid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.DeviceInfo.deviceId)
  return _internal_deviceid();
}
inline void Basic_DeviceInfo::set_deviceid(const std::string& value) {
  _internal_set_deviceid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.DeviceInfo.deviceId)
}
inline std::string* Basic_DeviceInfo::mutable_deviceid() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.DeviceInfo.deviceId)
  return _internal_mutable_deviceid();
}
inline const std::string& Basic_DeviceInfo::_internal_deviceid() const {
  return deviceid_.Get();
}
inline void Basic_DeviceInfo::_internal_set_deviceid(const std::string& value) {
  
  deviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Basic_DeviceInfo::set_deviceid(std::string&& value) {
  
  deviceid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Basic.DeviceInfo.deviceId)
}
inline void Basic_DeviceInfo::set_deviceid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Basic.DeviceInfo.deviceId)
}
inline void Basic_DeviceInfo::set_deviceid(const char* value,
    size_t size) {
  
  deviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Basic.DeviceInfo.deviceId)
}
inline std::string* Basic_DeviceInfo::_internal_mutable_deviceid() {
  
  return deviceid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Basic_DeviceInfo::release_deviceid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.DeviceInfo.deviceId)
  return deviceid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Basic_DeviceInfo::set_allocated_deviceid(std::string* deviceid) {
  if (deviceid != nullptr) {
    
  } else {
    
  }
  deviceid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deviceid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.DeviceInfo.deviceId)
}

// string softDid = 6;
inline void Basic_DeviceInfo::clear_softdid() {
  softdid_.ClearToEmpty();
}
inline const std::string& Basic_DeviceInfo::softdid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.DeviceInfo.softDid)
  return _internal_softdid();
}
inline void Basic_DeviceInfo::set_softdid(const std::string& value) {
  _internal_set_softdid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.DeviceInfo.softDid)
}
inline std::string* Basic_DeviceInfo::mutable_softdid() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.DeviceInfo.softDid)
  return _internal_mutable_softdid();
}
inline const std::string& Basic_DeviceInfo::_internal_softdid() const {
  return softdid_.Get();
}
inline void Basic_DeviceInfo::_internal_set_softdid(const std::string& value) {
  
  softdid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Basic_DeviceInfo::set_softdid(std::string&& value) {
  
  softdid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Basic.DeviceInfo.softDid)
}
inline void Basic_DeviceInfo::set_softdid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  softdid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Basic.DeviceInfo.softDid)
}
inline void Basic_DeviceInfo::set_softdid(const char* value,
    size_t size) {
  
  softdid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Basic.DeviceInfo.softDid)
}
inline std::string* Basic_DeviceInfo::_internal_mutable_softdid() {
  
  return softdid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Basic_DeviceInfo::release_softdid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.DeviceInfo.softDid)
  return softdid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Basic_DeviceInfo::set_allocated_softdid(std::string* softdid) {
  if (softdid != nullptr) {
    
  } else {
    
  }
  softdid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), softdid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.DeviceInfo.softDid)
}

// string kwaiDid = 7;
inline void Basic_DeviceInfo::clear_kwaidid() {
  kwaidid_.ClearToEmpty();
}
inline const std::string& Basic_DeviceInfo::kwaidid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.DeviceInfo.kwaiDid)
  return _internal_kwaidid();
}
inline void Basic_DeviceInfo::set_kwaidid(const std::string& value) {
  _internal_set_kwaidid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.DeviceInfo.kwaiDid)
}
inline std::string* Basic_DeviceInfo::mutable_kwaidid() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.DeviceInfo.kwaiDid)
  return _internal_mutable_kwaidid();
}
inline const std::string& Basic_DeviceInfo::_internal_kwaidid() const {
  return kwaidid_.Get();
}
inline void Basic_DeviceInfo::_internal_set_kwaidid(const std::string& value) {
  
  kwaidid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Basic_DeviceInfo::set_kwaidid(std::string&& value) {
  
  kwaidid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Basic.DeviceInfo.kwaiDid)
}
inline void Basic_DeviceInfo::set_kwaidid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  kwaidid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Basic.DeviceInfo.kwaiDid)
}
inline void Basic_DeviceInfo::set_kwaidid(const char* value,
    size_t size) {
  
  kwaidid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Basic.DeviceInfo.kwaiDid)
}
inline std::string* Basic_DeviceInfo::_internal_mutable_kwaidid() {
  
  return kwaidid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Basic_DeviceInfo::release_kwaidid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.DeviceInfo.kwaiDid)
  return kwaidid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Basic_DeviceInfo::set_allocated_kwaidid(std::string* kwaidid) {
  if (kwaidid != nullptr) {
    
  } else {
    
  }
  kwaidid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), kwaidid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.DeviceInfo.kwaiDid)
}

// string manufacturer = 8;
inline void Basic_DeviceInfo::clear_manufacturer() {
  manufacturer_.ClearToEmpty();
}
inline const std::string& Basic_DeviceInfo::manufacturer() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.DeviceInfo.manufacturer)
  return _internal_manufacturer();
}
inline void Basic_DeviceInfo::set_manufacturer(const std::string& value) {
  _internal_set_manufacturer(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.DeviceInfo.manufacturer)
}
inline std::string* Basic_DeviceInfo::mutable_manufacturer() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.DeviceInfo.manufacturer)
  return _internal_mutable_manufacturer();
}
inline const std::string& Basic_DeviceInfo::_internal_manufacturer() const {
  return manufacturer_.Get();
}
inline void Basic_DeviceInfo::_internal_set_manufacturer(const std::string& value) {
  
  manufacturer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Basic_DeviceInfo::set_manufacturer(std::string&& value) {
  
  manufacturer_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Basic.DeviceInfo.manufacturer)
}
inline void Basic_DeviceInfo::set_manufacturer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  manufacturer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Basic.DeviceInfo.manufacturer)
}
inline void Basic_DeviceInfo::set_manufacturer(const char* value,
    size_t size) {
  
  manufacturer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Basic.DeviceInfo.manufacturer)
}
inline std::string* Basic_DeviceInfo::_internal_mutable_manufacturer() {
  
  return manufacturer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Basic_DeviceInfo::release_manufacturer() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.DeviceInfo.manufacturer)
  return manufacturer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Basic_DeviceInfo::set_allocated_manufacturer(std::string* manufacturer) {
  if (manufacturer != nullptr) {
    
  } else {
    
  }
  manufacturer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), manufacturer,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.DeviceInfo.manufacturer)
}

// -------------------------------------------------------------------

// Basic_EnvInfo

// .AcFunDanmu.Im.Basic.EnvInfo.NetworkType networkType = 1;
inline void Basic_EnvInfo::clear_networktype() {
  networktype_ = 0;
}
inline ::AcFunDanmu::Im::Basic_EnvInfo_NetworkType Basic_EnvInfo::_internal_networktype() const {
  return static_cast< ::AcFunDanmu::Im::Basic_EnvInfo_NetworkType >(networktype_);
}
inline ::AcFunDanmu::Im::Basic_EnvInfo_NetworkType Basic_EnvInfo::networktype() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.EnvInfo.networkType)
  return _internal_networktype();
}
inline void Basic_EnvInfo::_internal_set_networktype(::AcFunDanmu::Im::Basic_EnvInfo_NetworkType value) {
  
  networktype_ = value;
}
inline void Basic_EnvInfo::set_networktype(::AcFunDanmu::Im::Basic_EnvInfo_NetworkType value) {
  _internal_set_networktype(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.EnvInfo.networkType)
}

// bytes appName = 2;
inline void Basic_EnvInfo::clear_appname() {
  appname_.ClearToEmpty();
}
inline const std::string& Basic_EnvInfo::appname() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.EnvInfo.appName)
  return _internal_appname();
}
inline void Basic_EnvInfo::set_appname(const std::string& value) {
  _internal_set_appname(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.EnvInfo.appName)
}
inline std::string* Basic_EnvInfo::mutable_appname() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.EnvInfo.appName)
  return _internal_mutable_appname();
}
inline const std::string& Basic_EnvInfo::_internal_appname() const {
  return appname_.Get();
}
inline void Basic_EnvInfo::_internal_set_appname(const std::string& value) {
  
  appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Basic_EnvInfo::set_appname(std::string&& value) {
  
  appname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Basic.EnvInfo.appName)
}
inline void Basic_EnvInfo::set_appname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Basic.EnvInfo.appName)
}
inline void Basic_EnvInfo::set_appname(const void* value,
    size_t size) {
  
  appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Basic.EnvInfo.appName)
}
inline std::string* Basic_EnvInfo::_internal_mutable_appname() {
  
  return appname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Basic_EnvInfo::release_appname() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.EnvInfo.appName)
  return appname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Basic_EnvInfo::set_allocated_appname(std::string* appname) {
  if (appname != nullptr) {
    
  } else {
    
  }
  appname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), appname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.EnvInfo.appName)
}

// -------------------------------------------------------------------

// Basic_RequestBasicInfo

// .AcFunDanmu.Im.Basic.DeviceInfo.PlatformType clientType = 1;
inline void Basic_RequestBasicInfo::clear_clienttype() {
  clienttype_ = 0;
}
inline ::AcFunDanmu::Im::Basic_DeviceInfo_PlatformType Basic_RequestBasicInfo::_internal_clienttype() const {
  return static_cast< ::AcFunDanmu::Im::Basic_DeviceInfo_PlatformType >(clienttype_);
}
inline ::AcFunDanmu::Im::Basic_DeviceInfo_PlatformType Basic_RequestBasicInfo::clienttype() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.RequestBasicInfo.clientType)
  return _internal_clienttype();
}
inline void Basic_RequestBasicInfo::_internal_set_clienttype(::AcFunDanmu::Im::Basic_DeviceInfo_PlatformType value) {
  
  clienttype_ = value;
}
inline void Basic_RequestBasicInfo::set_clienttype(::AcFunDanmu::Im::Basic_DeviceInfo_PlatformType value) {
  _internal_set_clienttype(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.RequestBasicInfo.clientType)
}

// string deviceId = 2;
inline void Basic_RequestBasicInfo::clear_deviceid() {
  deviceid_.ClearToEmpty();
}
inline const std::string& Basic_RequestBasicInfo::deviceid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.RequestBasicInfo.deviceId)
  return _internal_deviceid();
}
inline void Basic_RequestBasicInfo::set_deviceid(const std::string& value) {
  _internal_set_deviceid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.RequestBasicInfo.deviceId)
}
inline std::string* Basic_RequestBasicInfo::mutable_deviceid() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.RequestBasicInfo.deviceId)
  return _internal_mutable_deviceid();
}
inline const std::string& Basic_RequestBasicInfo::_internal_deviceid() const {
  return deviceid_.Get();
}
inline void Basic_RequestBasicInfo::_internal_set_deviceid(const std::string& value) {
  
  deviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Basic_RequestBasicInfo::set_deviceid(std::string&& value) {
  
  deviceid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Basic.RequestBasicInfo.deviceId)
}
inline void Basic_RequestBasicInfo::set_deviceid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Basic.RequestBasicInfo.deviceId)
}
inline void Basic_RequestBasicInfo::set_deviceid(const char* value,
    size_t size) {
  
  deviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Basic.RequestBasicInfo.deviceId)
}
inline std::string* Basic_RequestBasicInfo::_internal_mutable_deviceid() {
  
  return deviceid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Basic_RequestBasicInfo::release_deviceid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.RequestBasicInfo.deviceId)
  return deviceid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Basic_RequestBasicInfo::set_allocated_deviceid(std::string* deviceid) {
  if (deviceid != nullptr) {
    
  } else {
    
  }
  deviceid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deviceid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.RequestBasicInfo.deviceId)
}

// string clientIp = 3;
inline void Basic_RequestBasicInfo::clear_clientip() {
  clientip_.ClearToEmpty();
}
inline const std::string& Basic_RequestBasicInfo::clientip() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.RequestBasicInfo.clientIp)
  return _internal_clientip();
}
inline void Basic_RequestBasicInfo::set_clientip(const std::string& value) {
  _internal_set_clientip(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.RequestBasicInfo.clientIp)
}
inline std::string* Basic_RequestBasicInfo::mutable_clientip() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.RequestBasicInfo.clientIp)
  return _internal_mutable_clientip();
}
inline const std::string& Basic_RequestBasicInfo::_internal_clientip() const {
  return clientip_.Get();
}
inline void Basic_RequestBasicInfo::_internal_set_clientip(const std::string& value) {
  
  clientip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Basic_RequestBasicInfo::set_clientip(std::string&& value) {
  
  clientip_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Basic.RequestBasicInfo.clientIp)
}
inline void Basic_RequestBasicInfo::set_clientip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  clientip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Basic.RequestBasicInfo.clientIp)
}
inline void Basic_RequestBasicInfo::set_clientip(const char* value,
    size_t size) {
  
  clientip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Basic.RequestBasicInfo.clientIp)
}
inline std::string* Basic_RequestBasicInfo::_internal_mutable_clientip() {
  
  return clientip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Basic_RequestBasicInfo::release_clientip() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.RequestBasicInfo.clientIp)
  return clientip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Basic_RequestBasicInfo::set_allocated_clientip(std::string* clientip) {
  if (clientip != nullptr) {
    
  } else {
    
  }
  clientip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.RequestBasicInfo.clientIp)
}

// string appVersion = 4;
inline void Basic_RequestBasicInfo::clear_appversion() {
  appversion_.ClearToEmpty();
}
inline const std::string& Basic_RequestBasicInfo::appversion() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.RequestBasicInfo.appVersion)
  return _internal_appversion();
}
inline void Basic_RequestBasicInfo::set_appversion(const std::string& value) {
  _internal_set_appversion(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.RequestBasicInfo.appVersion)
}
inline std::string* Basic_RequestBasicInfo::mutable_appversion() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.RequestBasicInfo.appVersion)
  return _internal_mutable_appversion();
}
inline const std::string& Basic_RequestBasicInfo::_internal_appversion() const {
  return appversion_.Get();
}
inline void Basic_RequestBasicInfo::_internal_set_appversion(const std::string& value) {
  
  appversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Basic_RequestBasicInfo::set_appversion(std::string&& value) {
  
  appversion_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Basic.RequestBasicInfo.appVersion)
}
inline void Basic_RequestBasicInfo::set_appversion(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  appversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Basic.RequestBasicInfo.appVersion)
}
inline void Basic_RequestBasicInfo::set_appversion(const char* value,
    size_t size) {
  
  appversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Basic.RequestBasicInfo.appVersion)
}
inline std::string* Basic_RequestBasicInfo::_internal_mutable_appversion() {
  
  return appversion_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Basic_RequestBasicInfo::release_appversion() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.RequestBasicInfo.appVersion)
  return appversion_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Basic_RequestBasicInfo::set_allocated_appversion(std::string* appversion) {
  if (appversion != nullptr) {
    
  } else {
    
  }
  appversion_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), appversion,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.RequestBasicInfo.appVersion)
}

// string channel = 5;
inline void Basic_RequestBasicInfo::clear_channel() {
  channel_.ClearToEmpty();
}
inline const std::string& Basic_RequestBasicInfo::channel() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.RequestBasicInfo.channel)
  return _internal_channel();
}
inline void Basic_RequestBasicInfo::set_channel(const std::string& value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.RequestBasicInfo.channel)
}
inline std::string* Basic_RequestBasicInfo::mutable_channel() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.RequestBasicInfo.channel)
  return _internal_mutable_channel();
}
inline const std::string& Basic_RequestBasicInfo::_internal_channel() const {
  return channel_.Get();
}
inline void Basic_RequestBasicInfo::_internal_set_channel(const std::string& value) {
  
  channel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Basic_RequestBasicInfo::set_channel(std::string&& value) {
  
  channel_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Basic.RequestBasicInfo.channel)
}
inline void Basic_RequestBasicInfo::set_channel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Basic.RequestBasicInfo.channel)
}
inline void Basic_RequestBasicInfo::set_channel(const char* value,
    size_t size) {
  
  channel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Basic.RequestBasicInfo.channel)
}
inline std::string* Basic_RequestBasicInfo::_internal_mutable_channel() {
  
  return channel_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Basic_RequestBasicInfo::release_channel() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.RequestBasicInfo.channel)
  return channel_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Basic_RequestBasicInfo::set_allocated_channel(std::string* channel) {
  if (channel != nullptr) {
    
  } else {
    
  }
  channel_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.RequestBasicInfo.channel)
}

// .AcFunDanmu.Im.Basic.AppInfo appInfo = 6;
inline bool Basic_RequestBasicInfo::_internal_has_appinfo() const {
  return this != internal_default_instance() && appinfo_ != nullptr;
}
inline bool Basic_RequestBasicInfo::has_appinfo() const {
  return _internal_has_appinfo();
}
inline void Basic_RequestBasicInfo::clear_appinfo() {
  if (GetArena() == nullptr && appinfo_ != nullptr) {
    delete appinfo_;
  }
  appinfo_ = nullptr;
}
inline const ::AcFunDanmu::Im::Basic_AppInfo& Basic_RequestBasicInfo::_internal_appinfo() const {
  const ::AcFunDanmu::Im::Basic_AppInfo* p = appinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic_AppInfo&>(
      ::AcFunDanmu::Im::_Basic_AppInfo_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic_AppInfo& Basic_RequestBasicInfo::appinfo() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.RequestBasicInfo.appInfo)
  return _internal_appinfo();
}
inline void Basic_RequestBasicInfo::unsafe_arena_set_allocated_appinfo(
    ::AcFunDanmu::Im::Basic_AppInfo* appinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(appinfo_);
  }
  appinfo_ = appinfo;
  if (appinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Basic.RequestBasicInfo.appInfo)
}
inline ::AcFunDanmu::Im::Basic_AppInfo* Basic_RequestBasicInfo::release_appinfo() {
  
  ::AcFunDanmu::Im::Basic_AppInfo* temp = appinfo_;
  appinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::Basic_AppInfo* Basic_RequestBasicInfo::unsafe_arena_release_appinfo() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.RequestBasicInfo.appInfo)
  
  ::AcFunDanmu::Im::Basic_AppInfo* temp = appinfo_;
  appinfo_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic_AppInfo* Basic_RequestBasicInfo::_internal_mutable_appinfo() {
  
  if (appinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic_AppInfo>(GetArena());
    appinfo_ = p;
  }
  return appinfo_;
}
inline ::AcFunDanmu::Im::Basic_AppInfo* Basic_RequestBasicInfo::mutable_appinfo() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.RequestBasicInfo.appInfo)
  return _internal_mutable_appinfo();
}
inline void Basic_RequestBasicInfo::set_allocated_appinfo(::AcFunDanmu::Im::Basic_AppInfo* appinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete appinfo_;
  }
  if (appinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(appinfo);
    if (message_arena != submessage_arena) {
      appinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, appinfo, submessage_arena);
    }
    
  } else {
    
  }
  appinfo_ = appinfo;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.RequestBasicInfo.appInfo)
}

// .AcFunDanmu.Im.Basic.DeviceInfo deviceInfo = 7;
inline bool Basic_RequestBasicInfo::_internal_has_deviceinfo() const {
  return this != internal_default_instance() && deviceinfo_ != nullptr;
}
inline bool Basic_RequestBasicInfo::has_deviceinfo() const {
  return _internal_has_deviceinfo();
}
inline void Basic_RequestBasicInfo::clear_deviceinfo() {
  if (GetArena() == nullptr && deviceinfo_ != nullptr) {
    delete deviceinfo_;
  }
  deviceinfo_ = nullptr;
}
inline const ::AcFunDanmu::Im::Basic_DeviceInfo& Basic_RequestBasicInfo::_internal_deviceinfo() const {
  const ::AcFunDanmu::Im::Basic_DeviceInfo* p = deviceinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic_DeviceInfo&>(
      ::AcFunDanmu::Im::_Basic_DeviceInfo_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic_DeviceInfo& Basic_RequestBasicInfo::deviceinfo() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.RequestBasicInfo.deviceInfo)
  return _internal_deviceinfo();
}
inline void Basic_RequestBasicInfo::unsafe_arena_set_allocated_deviceinfo(
    ::AcFunDanmu::Im::Basic_DeviceInfo* deviceinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deviceinfo_);
  }
  deviceinfo_ = deviceinfo;
  if (deviceinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Basic.RequestBasicInfo.deviceInfo)
}
inline ::AcFunDanmu::Im::Basic_DeviceInfo* Basic_RequestBasicInfo::release_deviceinfo() {
  
  ::AcFunDanmu::Im::Basic_DeviceInfo* temp = deviceinfo_;
  deviceinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::Basic_DeviceInfo* Basic_RequestBasicInfo::unsafe_arena_release_deviceinfo() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.RequestBasicInfo.deviceInfo)
  
  ::AcFunDanmu::Im::Basic_DeviceInfo* temp = deviceinfo_;
  deviceinfo_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic_DeviceInfo* Basic_RequestBasicInfo::_internal_mutable_deviceinfo() {
  
  if (deviceinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic_DeviceInfo>(GetArena());
    deviceinfo_ = p;
  }
  return deviceinfo_;
}
inline ::AcFunDanmu::Im::Basic_DeviceInfo* Basic_RequestBasicInfo::mutable_deviceinfo() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.RequestBasicInfo.deviceInfo)
  return _internal_mutable_deviceinfo();
}
inline void Basic_RequestBasicInfo::set_allocated_deviceinfo(::AcFunDanmu::Im::Basic_DeviceInfo* deviceinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete deviceinfo_;
  }
  if (deviceinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(deviceinfo);
    if (message_arena != submessage_arena) {
      deviceinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deviceinfo, submessage_arena);
    }
    
  } else {
    
  }
  deviceinfo_ = deviceinfo;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.RequestBasicInfo.deviceInfo)
}

// .AcFunDanmu.Im.Basic.EnvInfo envInfo = 8;
inline bool Basic_RequestBasicInfo::_internal_has_envinfo() const {
  return this != internal_default_instance() && envinfo_ != nullptr;
}
inline bool Basic_RequestBasicInfo::has_envinfo() const {
  return _internal_has_envinfo();
}
inline void Basic_RequestBasicInfo::clear_envinfo() {
  if (GetArena() == nullptr && envinfo_ != nullptr) {
    delete envinfo_;
  }
  envinfo_ = nullptr;
}
inline const ::AcFunDanmu::Im::Basic_EnvInfo& Basic_RequestBasicInfo::_internal_envinfo() const {
  const ::AcFunDanmu::Im::Basic_EnvInfo* p = envinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic_EnvInfo&>(
      ::AcFunDanmu::Im::_Basic_EnvInfo_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic_EnvInfo& Basic_RequestBasicInfo::envinfo() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.RequestBasicInfo.envInfo)
  return _internal_envinfo();
}
inline void Basic_RequestBasicInfo::unsafe_arena_set_allocated_envinfo(
    ::AcFunDanmu::Im::Basic_EnvInfo* envinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(envinfo_);
  }
  envinfo_ = envinfo;
  if (envinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Basic.RequestBasicInfo.envInfo)
}
inline ::AcFunDanmu::Im::Basic_EnvInfo* Basic_RequestBasicInfo::release_envinfo() {
  
  ::AcFunDanmu::Im::Basic_EnvInfo* temp = envinfo_;
  envinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::Basic_EnvInfo* Basic_RequestBasicInfo::unsafe_arena_release_envinfo() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.RequestBasicInfo.envInfo)
  
  ::AcFunDanmu::Im::Basic_EnvInfo* temp = envinfo_;
  envinfo_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic_EnvInfo* Basic_RequestBasicInfo::_internal_mutable_envinfo() {
  
  if (envinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic_EnvInfo>(GetArena());
    envinfo_ = p;
  }
  return envinfo_;
}
inline ::AcFunDanmu::Im::Basic_EnvInfo* Basic_RequestBasicInfo::mutable_envinfo() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.RequestBasicInfo.envInfo)
  return _internal_mutable_envinfo();
}
inline void Basic_RequestBasicInfo::set_allocated_envinfo(::AcFunDanmu::Im::Basic_EnvInfo* envinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete envinfo_;
  }
  if (envinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(envinfo);
    if (message_arena != submessage_arena) {
      envinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, envinfo, submessage_arena);
    }
    
  } else {
    
  }
  envinfo_ = envinfo;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.RequestBasicInfo.envInfo)
}

// int32 clientPort = 9;
inline void Basic_RequestBasicInfo::clear_clientport() {
  clientport_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Basic_RequestBasicInfo::_internal_clientport() const {
  return clientport_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Basic_RequestBasicInfo::clientport() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.RequestBasicInfo.clientPort)
  return _internal_clientport();
}
inline void Basic_RequestBasicInfo::_internal_set_clientport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  clientport_ = value;
}
inline void Basic_RequestBasicInfo::set_clientport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_clientport(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.RequestBasicInfo.clientPort)
}

// string location = 10;
inline void Basic_RequestBasicInfo::clear_location() {
  location_.ClearToEmpty();
}
inline const std::string& Basic_RequestBasicInfo::location() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.RequestBasicInfo.location)
  return _internal_location();
}
inline void Basic_RequestBasicInfo::set_location(const std::string& value) {
  _internal_set_location(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.RequestBasicInfo.location)
}
inline std::string* Basic_RequestBasicInfo::mutable_location() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.RequestBasicInfo.location)
  return _internal_mutable_location();
}
inline const std::string& Basic_RequestBasicInfo::_internal_location() const {
  return location_.Get();
}
inline void Basic_RequestBasicInfo::_internal_set_location(const std::string& value) {
  
  location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Basic_RequestBasicInfo::set_location(std::string&& value) {
  
  location_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Basic.RequestBasicInfo.location)
}
inline void Basic_RequestBasicInfo::set_location(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Basic.RequestBasicInfo.location)
}
inline void Basic_RequestBasicInfo::set_location(const char* value,
    size_t size) {
  
  location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Basic.RequestBasicInfo.location)
}
inline std::string* Basic_RequestBasicInfo::_internal_mutable_location() {
  
  return location_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Basic_RequestBasicInfo::release_location() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.RequestBasicInfo.location)
  return location_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Basic_RequestBasicInfo::set_allocated_location(std::string* location) {
  if (location != nullptr) {
    
  } else {
    
  }
  location_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), location,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.RequestBasicInfo.location)
}

// -------------------------------------------------------------------

// Basic_SyncCookie

// int64 syncOffset = 1;
inline void Basic_SyncCookie::clear_syncoffset() {
  syncoffset_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Basic_SyncCookie::_internal_syncoffset() const {
  return syncoffset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Basic_SyncCookie::syncoffset() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.SyncCookie.syncOffset)
  return _internal_syncoffset();
}
inline void Basic_SyncCookie::_internal_set_syncoffset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  syncoffset_ = value;
}
inline void Basic_SyncCookie::set_syncoffset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_syncoffset(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.SyncCookie.syncOffset)
}

// -------------------------------------------------------------------

// Basic_I18nCopyWriting

// string formatKey = 1;
inline void Basic_I18nCopyWriting::clear_formatkey() {
  formatkey_.ClearToEmpty();
}
inline const std::string& Basic_I18nCopyWriting::formatkey() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.I18nCopyWriting.formatKey)
  return _internal_formatkey();
}
inline void Basic_I18nCopyWriting::set_formatkey(const std::string& value) {
  _internal_set_formatkey(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.I18nCopyWriting.formatKey)
}
inline std::string* Basic_I18nCopyWriting::mutable_formatkey() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.I18nCopyWriting.formatKey)
  return _internal_mutable_formatkey();
}
inline const std::string& Basic_I18nCopyWriting::_internal_formatkey() const {
  return formatkey_.Get();
}
inline void Basic_I18nCopyWriting::_internal_set_formatkey(const std::string& value) {
  
  formatkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Basic_I18nCopyWriting::set_formatkey(std::string&& value) {
  
  formatkey_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Basic.I18nCopyWriting.formatKey)
}
inline void Basic_I18nCopyWriting::set_formatkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  formatkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Basic.I18nCopyWriting.formatKey)
}
inline void Basic_I18nCopyWriting::set_formatkey(const char* value,
    size_t size) {
  
  formatkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Basic.I18nCopyWriting.formatKey)
}
inline std::string* Basic_I18nCopyWriting::_internal_mutable_formatkey() {
  
  return formatkey_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Basic_I18nCopyWriting::release_formatkey() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.I18nCopyWriting.formatKey)
  return formatkey_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Basic_I18nCopyWriting::set_allocated_formatkey(std::string* formatkey) {
  if (formatkey != nullptr) {
    
  } else {
    
  }
  formatkey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), formatkey,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.I18nCopyWriting.formatKey)
}

// repeated string formatParam = 2;
inline int Basic_I18nCopyWriting::_internal_formatparam_size() const {
  return formatparam_.size();
}
inline int Basic_I18nCopyWriting::formatparam_size() const {
  return _internal_formatparam_size();
}
inline void Basic_I18nCopyWriting::clear_formatparam() {
  formatparam_.Clear();
}
inline std::string* Basic_I18nCopyWriting::add_formatparam() {
  // @@protoc_insertion_point(field_add_mutable:AcFunDanmu.Im.Basic.I18nCopyWriting.formatParam)
  return _internal_add_formatparam();
}
inline const std::string& Basic_I18nCopyWriting::_internal_formatparam(int index) const {
  return formatparam_.Get(index);
}
inline const std::string& Basic_I18nCopyWriting::formatparam(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.I18nCopyWriting.formatParam)
  return _internal_formatparam(index);
}
inline std::string* Basic_I18nCopyWriting::mutable_formatparam(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.I18nCopyWriting.formatParam)
  return formatparam_.Mutable(index);
}
inline void Basic_I18nCopyWriting::set_formatparam(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.I18nCopyWriting.formatParam)
  formatparam_.Mutable(index)->assign(value);
}
inline void Basic_I18nCopyWriting::set_formatparam(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.I18nCopyWriting.formatParam)
  formatparam_.Mutable(index)->assign(std::move(value));
}
inline void Basic_I18nCopyWriting::set_formatparam(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  formatparam_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Basic.I18nCopyWriting.formatParam)
}
inline void Basic_I18nCopyWriting::set_formatparam(int index, const char* value, size_t size) {
  formatparam_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Basic.I18nCopyWriting.formatParam)
}
inline std::string* Basic_I18nCopyWriting::_internal_add_formatparam() {
  return formatparam_.Add();
}
inline void Basic_I18nCopyWriting::add_formatparam(const std::string& value) {
  formatparam_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Basic.I18nCopyWriting.formatParam)
}
inline void Basic_I18nCopyWriting::add_formatparam(std::string&& value) {
  formatparam_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Basic.I18nCopyWriting.formatParam)
}
inline void Basic_I18nCopyWriting::add_formatparam(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  formatparam_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AcFunDanmu.Im.Basic.I18nCopyWriting.formatParam)
}
inline void Basic_I18nCopyWriting::add_formatparam(const char* value, size_t size) {
  formatparam_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AcFunDanmu.Im.Basic.I18nCopyWriting.formatParam)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Basic_I18nCopyWriting::formatparam() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Basic.I18nCopyWriting.formatParam)
  return formatparam_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Basic_I18nCopyWriting::mutable_formatparam() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Basic.I18nCopyWriting.formatParam)
  return &formatparam_;
}

// -------------------------------------------------------------------

// Basic_SdkOption

// int32 reportIntervalSeconds = 1;
inline void Basic_SdkOption::clear_reportintervalseconds() {
  reportintervalseconds_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Basic_SdkOption::_internal_reportintervalseconds() const {
  return reportintervalseconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Basic_SdkOption::reportintervalseconds() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.SdkOption.reportIntervalSeconds)
  return _internal_reportintervalseconds();
}
inline void Basic_SdkOption::_internal_set_reportintervalseconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reportintervalseconds_ = value;
}
inline void Basic_SdkOption::set_reportintervalseconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reportintervalseconds(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.SdkOption.reportIntervalSeconds)
}

// string reportSecurity = 2;
inline void Basic_SdkOption::clear_reportsecurity() {
  reportsecurity_.ClearToEmpty();
}
inline const std::string& Basic_SdkOption::reportsecurity() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.SdkOption.reportSecurity)
  return _internal_reportsecurity();
}
inline void Basic_SdkOption::set_reportsecurity(const std::string& value) {
  _internal_set_reportsecurity(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.SdkOption.reportSecurity)
}
inline std::string* Basic_SdkOption::mutable_reportsecurity() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.SdkOption.reportSecurity)
  return _internal_mutable_reportsecurity();
}
inline const std::string& Basic_SdkOption::_internal_reportsecurity() const {
  return reportsecurity_.Get();
}
inline void Basic_SdkOption::_internal_set_reportsecurity(const std::string& value) {
  
  reportsecurity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Basic_SdkOption::set_reportsecurity(std::string&& value) {
  
  reportsecurity_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Basic.SdkOption.reportSecurity)
}
inline void Basic_SdkOption::set_reportsecurity(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reportsecurity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Basic.SdkOption.reportSecurity)
}
inline void Basic_SdkOption::set_reportsecurity(const char* value,
    size_t size) {
  
  reportsecurity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Basic.SdkOption.reportSecurity)
}
inline std::string* Basic_SdkOption::_internal_mutable_reportsecurity() {
  
  return reportsecurity_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Basic_SdkOption::release_reportsecurity() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.SdkOption.reportSecurity)
  return reportsecurity_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Basic_SdkOption::set_allocated_reportsecurity(std::string* reportsecurity) {
  if (reportsecurity != nullptr) {
    
  } else {
    
  }
  reportsecurity_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reportsecurity,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.SdkOption.reportSecurity)
}

// int32 lz4CompressionThresholdBytes = 3;
inline void Basic_SdkOption::clear_lz4compressionthresholdbytes() {
  lz4compressionthresholdbytes_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Basic_SdkOption::_internal_lz4compressionthresholdbytes() const {
  return lz4compressionthresholdbytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Basic_SdkOption::lz4compressionthresholdbytes() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.SdkOption.lz4CompressionThresholdBytes)
  return _internal_lz4compressionthresholdbytes();
}
inline void Basic_SdkOption::_internal_set_lz4compressionthresholdbytes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lz4compressionthresholdbytes_ = value;
}
inline void Basic_SdkOption::set_lz4compressionthresholdbytes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lz4compressionthresholdbytes(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.SdkOption.lz4CompressionThresholdBytes)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Basic_LocaleMessage

// string locale = 1;
inline void Basic_LocaleMessage::clear_locale() {
  locale_.ClearToEmpty();
}
inline const std::string& Basic_LocaleMessage::locale() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.LocaleMessage.locale)
  return _internal_locale();
}
inline void Basic_LocaleMessage::set_locale(const std::string& value) {
  _internal_set_locale(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Basic.LocaleMessage.locale)
}
inline std::string* Basic_LocaleMessage::mutable_locale() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.LocaleMessage.locale)
  return _internal_mutable_locale();
}
inline const std::string& Basic_LocaleMessage::_internal_locale() const {
  return locale_.Get();
}
inline void Basic_LocaleMessage::_internal_set_locale(const std::string& value) {
  
  locale_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Basic_LocaleMessage::set_locale(std::string&& value) {
  
  locale_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Basic.LocaleMessage.locale)
}
inline void Basic_LocaleMessage::set_locale(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  locale_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Basic.LocaleMessage.locale)
}
inline void Basic_LocaleMessage::set_locale(const char* value,
    size_t size) {
  
  locale_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Basic.LocaleMessage.locale)
}
inline std::string* Basic_LocaleMessage::_internal_mutable_locale() {
  
  return locale_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Basic_LocaleMessage::release_locale() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Basic.LocaleMessage.locale)
  return locale_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Basic_LocaleMessage::set_allocated_locale(std::string* locale) {
  if (locale != nullptr) {
    
  } else {
    
  }
  locale_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), locale,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Basic.LocaleMessage.locale)
}

// map<int32, string> errorMessage = 2;
inline int Basic_LocaleMessage::_internal_errormessage_size() const {
  return errormessage_.size();
}
inline int Basic_LocaleMessage::errormessage_size() const {
  return _internal_errormessage_size();
}
inline void Basic_LocaleMessage::clear_errormessage() {
  errormessage_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
Basic_LocaleMessage::_internal_errormessage() const {
  return errormessage_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
Basic_LocaleMessage::errormessage() const {
  // @@protoc_insertion_point(field_map:AcFunDanmu.Im.Basic.LocaleMessage.errorMessage)
  return _internal_errormessage();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
Basic_LocaleMessage::_internal_mutable_errormessage() {
  return errormessage_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
Basic_LocaleMessage::mutable_errormessage() {
  // @@protoc_insertion_point(field_mutable_map:AcFunDanmu.Im.Basic.LocaleMessage.errorMessage)
  return _internal_mutable_errormessage();
}

// -------------------------------------------------------------------

// Basic_ErrorMessage

// repeated .AcFunDanmu.Im.Basic.LocaleMessage localeMessages = 1;
inline int Basic_ErrorMessage::_internal_localemessages_size() const {
  return localemessages_.size();
}
inline int Basic_ErrorMessage::localemessages_size() const {
  return _internal_localemessages_size();
}
inline void Basic_ErrorMessage::clear_localemessages() {
  localemessages_.Clear();
}
inline ::AcFunDanmu::Im::Basic_LocaleMessage* Basic_ErrorMessage::mutable_localemessages(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Basic.ErrorMessage.localeMessages)
  return localemessages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_LocaleMessage >*
Basic_ErrorMessage::mutable_localemessages() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Basic.ErrorMessage.localeMessages)
  return &localemessages_;
}
inline const ::AcFunDanmu::Im::Basic_LocaleMessage& Basic_ErrorMessage::_internal_localemessages(int index) const {
  return localemessages_.Get(index);
}
inline const ::AcFunDanmu::Im::Basic_LocaleMessage& Basic_ErrorMessage::localemessages(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Basic.ErrorMessage.localeMessages)
  return _internal_localemessages(index);
}
inline ::AcFunDanmu::Im::Basic_LocaleMessage* Basic_ErrorMessage::_internal_add_localemessages() {
  return localemessages_.Add();
}
inline ::AcFunDanmu::Im::Basic_LocaleMessage* Basic_ErrorMessage::add_localemessages() {
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Basic.ErrorMessage.localeMessages)
  return _internal_add_localemessages();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_LocaleMessage >&
Basic_ErrorMessage::localemessages() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Basic.ErrorMessage.localeMessages)
  return localemessages_;
}

// -------------------------------------------------------------------

// Basic

// -------------------------------------------------------------------

// ImMessage_Message

// int64 seqId = 1;
inline void ImMessage_Message::clear_seqid() {
  seqid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_Message::_internal_seqid() const {
  return seqid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_Message::seqid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.Message.seqId)
  return _internal_seqid();
}
inline void ImMessage_Message::_internal_set_seqid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  seqid_ = value;
}
inline void ImMessage_Message::set_seqid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_seqid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.Message.seqId)
}

// int64 clientSeqId = 2;
inline void ImMessage_Message::clear_clientseqid() {
  clientseqid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_Message::_internal_clientseqid() const {
  return clientseqid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_Message::clientseqid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.Message.clientSeqId)
  return _internal_clientseqid();
}
inline void ImMessage_Message::_internal_set_clientseqid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  clientseqid_ = value;
}
inline void ImMessage_Message::set_clientseqid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_clientseqid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.Message.clientSeqId)
}

// int64 timestampMs = 3;
inline void ImMessage_Message::clear_timestampms() {
  timestampms_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_Message::_internal_timestampms() const {
  return timestampms_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_Message::timestampms() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.Message.timestampMs)
  return _internal_timestampms();
}
inline void ImMessage_Message::_internal_set_timestampms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestampms_ = value;
}
inline void ImMessage_Message::set_timestampms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestampms(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.Message.timestampMs)
}

// .AcFunDanmu.Im.Basic.User fromUser = 4;
inline bool ImMessage_Message::_internal_has_fromuser() const {
  return this != internal_default_instance() && fromuser_ != nullptr;
}
inline bool ImMessage_Message::has_fromuser() const {
  return _internal_has_fromuser();
}
inline void ImMessage_Message::clear_fromuser() {
  if (GetArena() == nullptr && fromuser_ != nullptr) {
    delete fromuser_;
  }
  fromuser_ = nullptr;
}
inline const ::AcFunDanmu::Im::Basic_User& ImMessage_Message::_internal_fromuser() const {
  const ::AcFunDanmu::Im::Basic_User* p = fromuser_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic_User&>(
      ::AcFunDanmu::Im::_Basic_User_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic_User& ImMessage_Message::fromuser() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.Message.fromUser)
  return _internal_fromuser();
}
inline void ImMessage_Message::unsafe_arena_set_allocated_fromuser(
    ::AcFunDanmu::Im::Basic_User* fromuser) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fromuser_);
  }
  fromuser_ = fromuser;
  if (fromuser) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.ImMessage.Message.fromUser)
}
inline ::AcFunDanmu::Im::Basic_User* ImMessage_Message::release_fromuser() {
  
  ::AcFunDanmu::Im::Basic_User* temp = fromuser_;
  fromuser_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::Basic_User* ImMessage_Message::unsafe_arena_release_fromuser() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.ImMessage.Message.fromUser)
  
  ::AcFunDanmu::Im::Basic_User* temp = fromuser_;
  fromuser_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic_User* ImMessage_Message::_internal_mutable_fromuser() {
  
  if (fromuser_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic_User>(GetArena());
    fromuser_ = p;
  }
  return fromuser_;
}
inline ::AcFunDanmu::Im::Basic_User* ImMessage_Message::mutable_fromuser() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.Message.fromUser)
  return _internal_mutable_fromuser();
}
inline void ImMessage_Message::set_allocated_fromuser(::AcFunDanmu::Im::Basic_User* fromuser) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete fromuser_;
  }
  if (fromuser) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fromuser);
    if (message_arena != submessage_arena) {
      fromuser = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fromuser, submessage_arena);
    }
    
  } else {
    
  }
  fromuser_ = fromuser;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.ImMessage.Message.fromUser)
}

// int64 targetId = 5;
inline void ImMessage_Message::clear_targetid() {
  targetid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_Message::_internal_targetid() const {
  return targetid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_Message::targetid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.Message.targetId)
  return _internal_targetid();
}
inline void ImMessage_Message::_internal_set_targetid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  targetid_ = value;
}
inline void ImMessage_Message::set_targetid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_targetid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.Message.targetId)
}

// .AcFunDanmu.Im.Basic.User toUser = 6;
inline bool ImMessage_Message::_internal_has_touser() const {
  return this != internal_default_instance() && touser_ != nullptr;
}
inline bool ImMessage_Message::has_touser() const {
  return _internal_has_touser();
}
inline void ImMessage_Message::clear_touser() {
  if (GetArena() == nullptr && touser_ != nullptr) {
    delete touser_;
  }
  touser_ = nullptr;
}
inline const ::AcFunDanmu::Im::Basic_User& ImMessage_Message::_internal_touser() const {
  const ::AcFunDanmu::Im::Basic_User* p = touser_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic_User&>(
      ::AcFunDanmu::Im::_Basic_User_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic_User& ImMessage_Message::touser() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.Message.toUser)
  return _internal_touser();
}
inline void ImMessage_Message::unsafe_arena_set_allocated_touser(
    ::AcFunDanmu::Im::Basic_User* touser) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(touser_);
  }
  touser_ = touser;
  if (touser) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.ImMessage.Message.toUser)
}
inline ::AcFunDanmu::Im::Basic_User* ImMessage_Message::release_touser() {
  
  ::AcFunDanmu::Im::Basic_User* temp = touser_;
  touser_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::Basic_User* ImMessage_Message::unsafe_arena_release_touser() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.ImMessage.Message.toUser)
  
  ::AcFunDanmu::Im::Basic_User* temp = touser_;
  touser_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic_User* ImMessage_Message::_internal_mutable_touser() {
  
  if (touser_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic_User>(GetArena());
    touser_ = p;
  }
  return touser_;
}
inline ::AcFunDanmu::Im::Basic_User* ImMessage_Message::mutable_touser() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.Message.toUser)
  return _internal_mutable_touser();
}
inline void ImMessage_Message::set_allocated_touser(::AcFunDanmu::Im::Basic_User* touser) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete touser_;
  }
  if (touser) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(touser);
    if (message_arena != submessage_arena) {
      touser = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, touser, submessage_arena);
    }
    
  } else {
    
  }
  touser_ = touser;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.ImMessage.Message.toUser)
}

// string title = 7;
inline void ImMessage_Message::clear_title() {
  title_.ClearToEmpty();
}
inline const std::string& ImMessage_Message::title() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.Message.title)
  return _internal_title();
}
inline void ImMessage_Message::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.Message.title)
}
inline std::string* ImMessage_Message::mutable_title() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.Message.title)
  return _internal_mutable_title();
}
inline const std::string& ImMessage_Message::_internal_title() const {
  return title_.Get();
}
inline void ImMessage_Message::_internal_set_title(const std::string& value) {
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ImMessage_Message::set_title(std::string&& value) {
  
  title_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.ImMessage.Message.title)
}
inline void ImMessage_Message::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.ImMessage.Message.title)
}
inline void ImMessage_Message::set_title(const char* value,
    size_t size) {
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.ImMessage.Message.title)
}
inline std::string* ImMessage_Message::_internal_mutable_title() {
  
  return title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ImMessage_Message::release_title() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.ImMessage.Message.title)
  return title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImMessage_Message::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.ImMessage.Message.title)
}

// int32 contentType = 8;
inline void ImMessage_Message::clear_contenttype() {
  contenttype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_Message::_internal_contenttype() const {
  return contenttype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_Message::contenttype() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.Message.contentType)
  return _internal_contenttype();
}
inline void ImMessage_Message::_internal_set_contenttype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  contenttype_ = value;
}
inline void ImMessage_Message::set_contenttype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_contenttype(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.Message.contentType)
}

// bytes content = 9;
inline void ImMessage_Message::clear_content() {
  content_.ClearToEmpty();
}
inline const std::string& ImMessage_Message::content() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.Message.content)
  return _internal_content();
}
inline void ImMessage_Message::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.Message.content)
}
inline std::string* ImMessage_Message::mutable_content() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.Message.content)
  return _internal_mutable_content();
}
inline const std::string& ImMessage_Message::_internal_content() const {
  return content_.Get();
}
inline void ImMessage_Message::_internal_set_content(const std::string& value) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ImMessage_Message::set_content(std::string&& value) {
  
  content_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.ImMessage.Message.content)
}
inline void ImMessage_Message::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.ImMessage.Message.content)
}
inline void ImMessage_Message::set_content(const void* value,
    size_t size) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.ImMessage.Message.content)
}
inline std::string* ImMessage_Message::_internal_mutable_content() {
  
  return content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ImMessage_Message::release_content() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.ImMessage.Message.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImMessage_Message::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.ImMessage.Message.content)
}

// string buckupTips = 10;
inline void ImMessage_Message::clear_buckuptips() {
  buckuptips_.ClearToEmpty();
}
inline const std::string& ImMessage_Message::buckuptips() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.Message.buckupTips)
  return _internal_buckuptips();
}
inline void ImMessage_Message::set_buckuptips(const std::string& value) {
  _internal_set_buckuptips(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.Message.buckupTips)
}
inline std::string* ImMessage_Message::mutable_buckuptips() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.Message.buckupTips)
  return _internal_mutable_buckuptips();
}
inline const std::string& ImMessage_Message::_internal_buckuptips() const {
  return buckuptips_.Get();
}
inline void ImMessage_Message::_internal_set_buckuptips(const std::string& value) {
  
  buckuptips_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ImMessage_Message::set_buckuptips(std::string&& value) {
  
  buckuptips_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.ImMessage.Message.buckupTips)
}
inline void ImMessage_Message::set_buckuptips(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  buckuptips_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.ImMessage.Message.buckupTips)
}
inline void ImMessage_Message::set_buckuptips(const char* value,
    size_t size) {
  
  buckuptips_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.ImMessage.Message.buckupTips)
}
inline std::string* ImMessage_Message::_internal_mutable_buckuptips() {
  
  return buckuptips_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ImMessage_Message::release_buckuptips() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.ImMessage.Message.buckupTips)
  return buckuptips_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImMessage_Message::set_allocated_buckuptips(std::string* buckuptips) {
  if (buckuptips != nullptr) {
    
  } else {
    
  }
  buckuptips_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buckuptips,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.ImMessage.Message.buckupTips)
}

// repeated .AcFunDanmu.Im.Basic.User receivers = 11;
inline int ImMessage_Message::_internal_receivers_size() const {
  return receivers_.size();
}
inline int ImMessage_Message::receivers_size() const {
  return _internal_receivers_size();
}
inline void ImMessage_Message::clear_receivers() {
  receivers_.Clear();
}
inline ::AcFunDanmu::Im::Basic_User* ImMessage_Message::mutable_receivers(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.Message.receivers)
  return receivers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_User >*
ImMessage_Message::mutable_receivers() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.ImMessage.Message.receivers)
  return &receivers_;
}
inline const ::AcFunDanmu::Im::Basic_User& ImMessage_Message::_internal_receivers(int index) const {
  return receivers_.Get(index);
}
inline const ::AcFunDanmu::Im::Basic_User& ImMessage_Message::receivers(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.Message.receivers)
  return _internal_receivers(index);
}
inline ::AcFunDanmu::Im::Basic_User* ImMessage_Message::_internal_add_receivers() {
  return receivers_.Add();
}
inline ::AcFunDanmu::Im::Basic_User* ImMessage_Message::add_receivers() {
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.ImMessage.Message.receivers)
  return _internal_add_receivers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_User >&
ImMessage_Message::receivers() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.ImMessage.Message.receivers)
  return receivers_;
}

// bool notContentUnread = 12;
inline void ImMessage_Message::clear_notcontentunread() {
  notcontentunread_ = false;
}
inline bool ImMessage_Message::_internal_notcontentunread() const {
  return notcontentunread_;
}
inline bool ImMessage_Message::notcontentunread() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.Message.notContentUnread)
  return _internal_notcontentunread();
}
inline void ImMessage_Message::_internal_set_notcontentunread(bool value) {
  
  notcontentunread_ = value;
}
inline void ImMessage_Message::set_notcontentunread(bool value) {
  _internal_set_notcontentunread(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.Message.notContentUnread)
}

// int32 sessionPriority = 13;
inline void ImMessage_Message::clear_sessionpriority() {
  sessionpriority_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_Message::_internal_sessionpriority() const {
  return sessionpriority_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_Message::sessionpriority() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.Message.sessionPriority)
  return _internal_sessionpriority();
}
inline void ImMessage_Message::_internal_set_sessionpriority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sessionpriority_ = value;
}
inline void ImMessage_Message::set_sessionpriority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sessionpriority(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.Message.sessionPriority)
}

// int32 sessionCategoryId = 14;
inline void ImMessage_Message::clear_sessioncategoryid() {
  sessioncategoryid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_Message::_internal_sessioncategoryid() const {
  return sessioncategoryid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_Message::sessioncategoryid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.Message.sessionCategoryId)
  return _internal_sessioncategoryid();
}
inline void ImMessage_Message::_internal_set_sessioncategoryid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sessioncategoryid_ = value;
}
inline void ImMessage_Message::set_sessioncategoryid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sessioncategoryid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.Message.sessionCategoryId)
}

// int32 sessionAccountType = 15;
inline void ImMessage_Message::clear_sessionaccounttype() {
  sessionaccounttype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_Message::_internal_sessionaccounttype() const {
  return sessionaccounttype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_Message::sessionaccounttype() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.Message.sessionAccountType)
  return _internal_sessionaccounttype();
}
inline void ImMessage_Message::_internal_set_sessionaccounttype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sessionaccounttype_ = value;
}
inline void ImMessage_Message::set_sessionaccounttype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sessionaccounttype(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.Message.sessionAccountType)
}

// bool notAutoCreateSession = 16;
inline void ImMessage_Message::clear_notautocreatesession() {
  notautocreatesession_ = false;
}
inline bool ImMessage_Message::_internal_notautocreatesession() const {
  return notautocreatesession_;
}
inline bool ImMessage_Message::notautocreatesession() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.Message.notAutoCreateSession)
  return _internal_notautocreatesession();
}
inline void ImMessage_Message::_internal_set_notautocreatesession(bool value) {
  
  notautocreatesession_ = value;
}
inline void ImMessage_Message::set_notautocreatesession(bool value) {
  _internal_set_notautocreatesession(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.Message.notAutoCreateSession)
}

// int32 userRelationship = 17;
inline void ImMessage_Message::clear_userrelationship() {
  userrelationship_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_Message::_internal_userrelationship() const {
  return userrelationship_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_Message::userrelationship() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.Message.userRelationship)
  return _internal_userrelationship();
}
inline void ImMessage_Message::_internal_set_userrelationship(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  userrelationship_ = value;
}
inline void ImMessage_Message::set_userrelationship(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userrelationship(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.Message.userRelationship)
}

// string strTargetId = 18;
inline void ImMessage_Message::clear_strtargetid() {
  strtargetid_.ClearToEmpty();
}
inline const std::string& ImMessage_Message::strtargetid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.Message.strTargetId)
  return _internal_strtargetid();
}
inline void ImMessage_Message::set_strtargetid(const std::string& value) {
  _internal_set_strtargetid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.Message.strTargetId)
}
inline std::string* ImMessage_Message::mutable_strtargetid() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.Message.strTargetId)
  return _internal_mutable_strtargetid();
}
inline const std::string& ImMessage_Message::_internal_strtargetid() const {
  return strtargetid_.Get();
}
inline void ImMessage_Message::_internal_set_strtargetid(const std::string& value) {
  
  strtargetid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ImMessage_Message::set_strtargetid(std::string&& value) {
  
  strtargetid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.ImMessage.Message.strTargetId)
}
inline void ImMessage_Message::set_strtargetid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  strtargetid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.ImMessage.Message.strTargetId)
}
inline void ImMessage_Message::set_strtargetid(const char* value,
    size_t size) {
  
  strtargetid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.ImMessage.Message.strTargetId)
}
inline std::string* ImMessage_Message::_internal_mutable_strtargetid() {
  
  return strtargetid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ImMessage_Message::release_strtargetid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.ImMessage.Message.strTargetId)
  return strtargetid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImMessage_Message::set_allocated_strtargetid(std::string* strtargetid) {
  if (strtargetid != nullptr) {
    
  } else {
    
  }
  strtargetid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strtargetid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.ImMessage.Message.strTargetId)
}

// repeated .AcFunDanmu.Im.Basic.User excludeReceivers = 19;
inline int ImMessage_Message::_internal_excludereceivers_size() const {
  return excludereceivers_.size();
}
inline int ImMessage_Message::excludereceivers_size() const {
  return _internal_excludereceivers_size();
}
inline void ImMessage_Message::clear_excludereceivers() {
  excludereceivers_.Clear();
}
inline ::AcFunDanmu::Im::Basic_User* ImMessage_Message::mutable_excludereceivers(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.Message.excludeReceivers)
  return excludereceivers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_User >*
ImMessage_Message::mutable_excludereceivers() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.ImMessage.Message.excludeReceivers)
  return &excludereceivers_;
}
inline const ::AcFunDanmu::Im::Basic_User& ImMessage_Message::_internal_excludereceivers(int index) const {
  return excludereceivers_.Get(index);
}
inline const ::AcFunDanmu::Im::Basic_User& ImMessage_Message::excludereceivers(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.Message.excludeReceivers)
  return _internal_excludereceivers(index);
}
inline ::AcFunDanmu::Im::Basic_User* ImMessage_Message::_internal_add_excludereceivers() {
  return excludereceivers_.Add();
}
inline ::AcFunDanmu::Im::Basic_User* ImMessage_Message::add_excludereceivers() {
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.ImMessage.Message.excludeReceivers)
  return _internal_add_excludereceivers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_User >&
ImMessage_Message::excludereceivers() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.ImMessage.Message.excludeReceivers)
  return excludereceivers_;
}

// bool markDelte = 20;
inline void ImMessage_Message::clear_markdelte() {
  markdelte_ = false;
}
inline bool ImMessage_Message::_internal_markdelte() const {
  return markdelte_;
}
inline bool ImMessage_Message::markdelte() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.Message.markDelte)
  return _internal_markdelte();
}
inline void ImMessage_Message::_internal_set_markdelte(bool value) {
  
  markdelte_ = value;
}
inline void ImMessage_Message::set_markdelte(bool value) {
  _internal_set_markdelte(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.Message.markDelte)
}

// .AcFunDanmu.Im.ImMessage.Reminder reminder = 21;
inline bool ImMessage_Message::_internal_has_reminder() const {
  return this != internal_default_instance() && reminder_ != nullptr;
}
inline bool ImMessage_Message::has_reminder() const {
  return _internal_has_reminder();
}
inline void ImMessage_Message::clear_reminder() {
  if (GetArena() == nullptr && reminder_ != nullptr) {
    delete reminder_;
  }
  reminder_ = nullptr;
}
inline const ::AcFunDanmu::Im::ImMessage_Reminder& ImMessage_Message::_internal_reminder() const {
  const ::AcFunDanmu::Im::ImMessage_Reminder* p = reminder_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::ImMessage_Reminder&>(
      ::AcFunDanmu::Im::_ImMessage_Reminder_default_instance_);
}
inline const ::AcFunDanmu::Im::ImMessage_Reminder& ImMessage_Message::reminder() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.Message.reminder)
  return _internal_reminder();
}
inline void ImMessage_Message::unsafe_arena_set_allocated_reminder(
    ::AcFunDanmu::Im::ImMessage_Reminder* reminder) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reminder_);
  }
  reminder_ = reminder;
  if (reminder) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.ImMessage.Message.reminder)
}
inline ::AcFunDanmu::Im::ImMessage_Reminder* ImMessage_Message::release_reminder() {
  
  ::AcFunDanmu::Im::ImMessage_Reminder* temp = reminder_;
  reminder_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::ImMessage_Reminder* ImMessage_Message::unsafe_arena_release_reminder() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.ImMessage.Message.reminder)
  
  ::AcFunDanmu::Im::ImMessage_Reminder* temp = reminder_;
  reminder_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::ImMessage_Reminder* ImMessage_Message::_internal_mutable_reminder() {
  
  if (reminder_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_Reminder>(GetArena());
    reminder_ = p;
  }
  return reminder_;
}
inline ::AcFunDanmu::Im::ImMessage_Reminder* ImMessage_Message::mutable_reminder() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.Message.reminder)
  return _internal_mutable_reminder();
}
inline void ImMessage_Message::set_allocated_reminder(::AcFunDanmu::Im::ImMessage_Reminder* reminder) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reminder_;
  }
  if (reminder) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reminder);
    if (message_arena != submessage_arena) {
      reminder = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reminder, submessage_arena);
    }
    
  } else {
    
  }
  reminder_ = reminder;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.ImMessage.Message.reminder)
}

// bytes extra = 22;
inline void ImMessage_Message::clear_extra() {
  extra_.ClearToEmpty();
}
inline const std::string& ImMessage_Message::extra() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.Message.extra)
  return _internal_extra();
}
inline void ImMessage_Message::set_extra(const std::string& value) {
  _internal_set_extra(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.Message.extra)
}
inline std::string* ImMessage_Message::mutable_extra() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.Message.extra)
  return _internal_mutable_extra();
}
inline const std::string& ImMessage_Message::_internal_extra() const {
  return extra_.Get();
}
inline void ImMessage_Message::_internal_set_extra(const std::string& value) {
  
  extra_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ImMessage_Message::set_extra(std::string&& value) {
  
  extra_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.ImMessage.Message.extra)
}
inline void ImMessage_Message::set_extra(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  extra_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.ImMessage.Message.extra)
}
inline void ImMessage_Message::set_extra(const void* value,
    size_t size) {
  
  extra_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.ImMessage.Message.extra)
}
inline std::string* ImMessage_Message::_internal_mutable_extra() {
  
  return extra_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ImMessage_Message::release_extra() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.ImMessage.Message.extra)
  return extra_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImMessage_Message::set_allocated_extra(std::string* extra) {
  if (extra != nullptr) {
    
  } else {
    
  }
  extra_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extra,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.ImMessage.Message.extra)
}

// bool receiptRequired = 23;
inline void ImMessage_Message::clear_receiptrequired() {
  receiptrequired_ = false;
}
inline bool ImMessage_Message::_internal_receiptrequired() const {
  return receiptrequired_;
}
inline bool ImMessage_Message::receiptrequired() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.Message.receiptRequired)
  return _internal_receiptrequired();
}
inline void ImMessage_Message::_internal_set_receiptrequired(bool value) {
  
  receiptrequired_ = value;
}
inline void ImMessage_Message::set_receiptrequired(bool value) {
  _internal_set_receiptrequired(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.Message.receiptRequired)
}

// -------------------------------------------------------------------

// ImMessage_SendMessageResponse

// int64 clientSeqId = 1;
inline void ImMessage_SendMessageResponse::clear_clientseqid() {
  clientseqid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_SendMessageResponse::_internal_clientseqid() const {
  return clientseqid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_SendMessageResponse::clientseqid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.SendMessageResponse.clientSeqId)
  return _internal_clientseqid();
}
inline void ImMessage_SendMessageResponse::_internal_set_clientseqid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  clientseqid_ = value;
}
inline void ImMessage_SendMessageResponse::set_clientseqid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_clientseqid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.SendMessageResponse.clientSeqId)
}

// int64 messageTimestamp = 2;
inline void ImMessage_SendMessageResponse::clear_messagetimestamp() {
  messagetimestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_SendMessageResponse::_internal_messagetimestamp() const {
  return messagetimestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_SendMessageResponse::messagetimestamp() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.SendMessageResponse.messageTimestamp)
  return _internal_messagetimestamp();
}
inline void ImMessage_SendMessageResponse::_internal_set_messagetimestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  messagetimestamp_ = value;
}
inline void ImMessage_SendMessageResponse::set_messagetimestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_messagetimestamp(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.SendMessageResponse.messageTimestamp)
}

// int64 seqId = 3;
inline void ImMessage_SendMessageResponse::clear_seqid() {
  seqid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_SendMessageResponse::_internal_seqid() const {
  return seqid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_SendMessageResponse::seqid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.SendMessageResponse.seqId)
  return _internal_seqid();
}
inline void ImMessage_SendMessageResponse::_internal_set_seqid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  seqid_ = value;
}
inline void ImMessage_SendMessageResponse::set_seqid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_seqid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.SendMessageResponse.seqId)
}

// int32 sessionAccountType = 4;
inline void ImMessage_SendMessageResponse::clear_sessionaccounttype() {
  sessionaccounttype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_SendMessageResponse::_internal_sessionaccounttype() const {
  return sessionaccounttype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_SendMessageResponse::sessionaccounttype() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.SendMessageResponse.sessionAccountType)
  return _internal_sessionaccounttype();
}
inline void ImMessage_SendMessageResponse::_internal_set_sessionaccounttype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sessionaccounttype_ = value;
}
inline void ImMessage_SendMessageResponse::set_sessionaccounttype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sessionaccounttype(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.SendMessageResponse.sessionAccountType)
}

// int32 sessionPriority = 5;
inline void ImMessage_SendMessageResponse::clear_sessionpriority() {
  sessionpriority_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_SendMessageResponse::_internal_sessionpriority() const {
  return sessionpriority_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_SendMessageResponse::sessionpriority() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.SendMessageResponse.sessionPriority)
  return _internal_sessionpriority();
}
inline void ImMessage_SendMessageResponse::_internal_set_sessionpriority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sessionpriority_ = value;
}
inline void ImMessage_SendMessageResponse::set_sessionpriority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sessionpriority(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.SendMessageResponse.sessionPriority)
}

// int32 sessionCategoryId = 6;
inline void ImMessage_SendMessageResponse::clear_sessioncategoryid() {
  sessioncategoryid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_SendMessageResponse::_internal_sessioncategoryid() const {
  return sessioncategoryid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_SendMessageResponse::sessioncategoryid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.SendMessageResponse.sessionCategoryId)
  return _internal_sessioncategoryid();
}
inline void ImMessage_SendMessageResponse::_internal_set_sessioncategoryid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sessioncategoryid_ = value;
}
inline void ImMessage_SendMessageResponse::set_sessioncategoryid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sessioncategoryid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.SendMessageResponse.sessionCategoryId)
}

// -------------------------------------------------------------------

// ImMessage_PullOldRequest

// .AcFunDanmu.Im.Basic.User target = 1;
inline bool ImMessage_PullOldRequest::_internal_has_target() const {
  return this != internal_default_instance() && target_ != nullptr;
}
inline bool ImMessage_PullOldRequest::has_target() const {
  return _internal_has_target();
}
inline void ImMessage_PullOldRequest::clear_target() {
  if (GetArena() == nullptr && target_ != nullptr) {
    delete target_;
  }
  target_ = nullptr;
}
inline const ::AcFunDanmu::Im::Basic_User& ImMessage_PullOldRequest::_internal_target() const {
  const ::AcFunDanmu::Im::Basic_User* p = target_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic_User&>(
      ::AcFunDanmu::Im::_Basic_User_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic_User& ImMessage_PullOldRequest::target() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.PullOldRequest.target)
  return _internal_target();
}
inline void ImMessage_PullOldRequest::unsafe_arena_set_allocated_target(
    ::AcFunDanmu::Im::Basic_User* target) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_);
  }
  target_ = target;
  if (target) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.ImMessage.PullOldRequest.target)
}
inline ::AcFunDanmu::Im::Basic_User* ImMessage_PullOldRequest::release_target() {
  
  ::AcFunDanmu::Im::Basic_User* temp = target_;
  target_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::Basic_User* ImMessage_PullOldRequest::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.ImMessage.PullOldRequest.target)
  
  ::AcFunDanmu::Im::Basic_User* temp = target_;
  target_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic_User* ImMessage_PullOldRequest::_internal_mutable_target() {
  
  if (target_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic_User>(GetArena());
    target_ = p;
  }
  return target_;
}
inline ::AcFunDanmu::Im::Basic_User* ImMessage_PullOldRequest::mutable_target() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.PullOldRequest.target)
  return _internal_mutable_target();
}
inline void ImMessage_PullOldRequest::set_allocated_target(::AcFunDanmu::Im::Basic_User* target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete target_;
  }
  if (target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(target);
    if (message_arena != submessage_arena) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    
  } else {
    
  }
  target_ = target;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.ImMessage.PullOldRequest.target)
}

// int64 minSeq = 2;
inline void ImMessage_PullOldRequest::clear_minseq() {
  minseq_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_PullOldRequest::_internal_minseq() const {
  return minseq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_PullOldRequest::minseq() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.PullOldRequest.minSeq)
  return _internal_minseq();
}
inline void ImMessage_PullOldRequest::_internal_set_minseq(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  minseq_ = value;
}
inline void ImMessage_PullOldRequest::set_minseq(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_minseq(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.PullOldRequest.minSeq)
}

// int64 maxSeq = 3;
inline void ImMessage_PullOldRequest::clear_maxseq() {
  maxseq_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_PullOldRequest::_internal_maxseq() const {
  return maxseq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_PullOldRequest::maxseq() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.PullOldRequest.maxSeq)
  return _internal_maxseq();
}
inline void ImMessage_PullOldRequest::_internal_set_maxseq(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  maxseq_ = value;
}
inline void ImMessage_PullOldRequest::set_maxseq(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_maxseq(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.PullOldRequest.maxSeq)
}

// int32 count = 4;
inline void ImMessage_PullOldRequest::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_PullOldRequest::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_PullOldRequest::count() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.PullOldRequest.count)
  return _internal_count();
}
inline void ImMessage_PullOldRequest::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void ImMessage_PullOldRequest::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.PullOldRequest.count)
}

// int64 targetId = 5;
inline void ImMessage_PullOldRequest::clear_targetid() {
  targetid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_PullOldRequest::_internal_targetid() const {
  return targetid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_PullOldRequest::targetid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.PullOldRequest.targetId)
  return _internal_targetid();
}
inline void ImMessage_PullOldRequest::_internal_set_targetid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  targetid_ = value;
}
inline void ImMessage_PullOldRequest::set_targetid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_targetid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.PullOldRequest.targetId)
}

// string strTargetId = 6;
inline void ImMessage_PullOldRequest::clear_strtargetid() {
  strtargetid_.ClearToEmpty();
}
inline const std::string& ImMessage_PullOldRequest::strtargetid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.PullOldRequest.strTargetId)
  return _internal_strtargetid();
}
inline void ImMessage_PullOldRequest::set_strtargetid(const std::string& value) {
  _internal_set_strtargetid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.PullOldRequest.strTargetId)
}
inline std::string* ImMessage_PullOldRequest::mutable_strtargetid() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.PullOldRequest.strTargetId)
  return _internal_mutable_strtargetid();
}
inline const std::string& ImMessage_PullOldRequest::_internal_strtargetid() const {
  return strtargetid_.Get();
}
inline void ImMessage_PullOldRequest::_internal_set_strtargetid(const std::string& value) {
  
  strtargetid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ImMessage_PullOldRequest::set_strtargetid(std::string&& value) {
  
  strtargetid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.ImMessage.PullOldRequest.strTargetId)
}
inline void ImMessage_PullOldRequest::set_strtargetid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  strtargetid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.ImMessage.PullOldRequest.strTargetId)
}
inline void ImMessage_PullOldRequest::set_strtargetid(const char* value,
    size_t size) {
  
  strtargetid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.ImMessage.PullOldRequest.strTargetId)
}
inline std::string* ImMessage_PullOldRequest::_internal_mutable_strtargetid() {
  
  return strtargetid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ImMessage_PullOldRequest::release_strtargetid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.ImMessage.PullOldRequest.strTargetId)
  return strtargetid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImMessage_PullOldRequest::set_allocated_strtargetid(std::string* strtargetid) {
  if (strtargetid != nullptr) {
    
  } else {
    
  }
  strtargetid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strtargetid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.ImMessage.PullOldRequest.strTargetId)
}

// -------------------------------------------------------------------

// ImMessage_PullOldResponse

// repeated .AcFunDanmu.Im.ImMessage.Message messages = 1;
inline int ImMessage_PullOldResponse::_internal_messages_size() const {
  return messages_.size();
}
inline int ImMessage_PullOldResponse::messages_size() const {
  return _internal_messages_size();
}
inline void ImMessage_PullOldResponse::clear_messages() {
  messages_.Clear();
}
inline ::AcFunDanmu::Im::ImMessage_Message* ImMessage_PullOldResponse::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.PullOldResponse.messages)
  return messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_Message >*
ImMessage_PullOldResponse::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.ImMessage.PullOldResponse.messages)
  return &messages_;
}
inline const ::AcFunDanmu::Im::ImMessage_Message& ImMessage_PullOldResponse::_internal_messages(int index) const {
  return messages_.Get(index);
}
inline const ::AcFunDanmu::Im::ImMessage_Message& ImMessage_PullOldResponse::messages(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.PullOldResponse.messages)
  return _internal_messages(index);
}
inline ::AcFunDanmu::Im::ImMessage_Message* ImMessage_PullOldResponse::_internal_add_messages() {
  return messages_.Add();
}
inline ::AcFunDanmu::Im::ImMessage_Message* ImMessage_PullOldResponse::add_messages() {
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.ImMessage.PullOldResponse.messages)
  return _internal_add_messages();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_Message >&
ImMessage_PullOldResponse::messages() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.ImMessage.PullOldResponse.messages)
  return messages_;
}

// int64 serverTime = 2;
inline void ImMessage_PullOldResponse::clear_servertime() {
  servertime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_PullOldResponse::_internal_servertime() const {
  return servertime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_PullOldResponse::servertime() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.PullOldResponse.serverTime)
  return _internal_servertime();
}
inline void ImMessage_PullOldResponse::_internal_set_servertime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  servertime_ = value;
}
inline void ImMessage_PullOldResponse::set_servertime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_servertime(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.PullOldResponse.serverTime)
}

// -------------------------------------------------------------------

// ImMessage_PullNewRequest

// .AcFunDanmu.Im.Basic.User target = 1;
inline bool ImMessage_PullNewRequest::_internal_has_target() const {
  return this != internal_default_instance() && target_ != nullptr;
}
inline bool ImMessage_PullNewRequest::has_target() const {
  return _internal_has_target();
}
inline void ImMessage_PullNewRequest::clear_target() {
  if (GetArena() == nullptr && target_ != nullptr) {
    delete target_;
  }
  target_ = nullptr;
}
inline const ::AcFunDanmu::Im::Basic_User& ImMessage_PullNewRequest::_internal_target() const {
  const ::AcFunDanmu::Im::Basic_User* p = target_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic_User&>(
      ::AcFunDanmu::Im::_Basic_User_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic_User& ImMessage_PullNewRequest::target() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.PullNewRequest.target)
  return _internal_target();
}
inline void ImMessage_PullNewRequest::unsafe_arena_set_allocated_target(
    ::AcFunDanmu::Im::Basic_User* target) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_);
  }
  target_ = target;
  if (target) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.ImMessage.PullNewRequest.target)
}
inline ::AcFunDanmu::Im::Basic_User* ImMessage_PullNewRequest::release_target() {
  
  ::AcFunDanmu::Im::Basic_User* temp = target_;
  target_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::Basic_User* ImMessage_PullNewRequest::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.ImMessage.PullNewRequest.target)
  
  ::AcFunDanmu::Im::Basic_User* temp = target_;
  target_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic_User* ImMessage_PullNewRequest::_internal_mutable_target() {
  
  if (target_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic_User>(GetArena());
    target_ = p;
  }
  return target_;
}
inline ::AcFunDanmu::Im::Basic_User* ImMessage_PullNewRequest::mutable_target() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.PullNewRequest.target)
  return _internal_mutable_target();
}
inline void ImMessage_PullNewRequest::set_allocated_target(::AcFunDanmu::Im::Basic_User* target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete target_;
  }
  if (target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(target);
    if (message_arena != submessage_arena) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    
  } else {
    
  }
  target_ = target;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.ImMessage.PullNewRequest.target)
}

// int64 minSeq = 2;
inline void ImMessage_PullNewRequest::clear_minseq() {
  minseq_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_PullNewRequest::_internal_minseq() const {
  return minseq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_PullNewRequest::minseq() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.PullNewRequest.minSeq)
  return _internal_minseq();
}
inline void ImMessage_PullNewRequest::_internal_set_minseq(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  minseq_ = value;
}
inline void ImMessage_PullNewRequest::set_minseq(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_minseq(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.PullNewRequest.minSeq)
}

// int32 count = 3;
inline void ImMessage_PullNewRequest::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_PullNewRequest::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_PullNewRequest::count() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.PullNewRequest.count)
  return _internal_count();
}
inline void ImMessage_PullNewRequest::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void ImMessage_PullNewRequest::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.PullNewRequest.count)
}

// int64 targetId = 4;
inline void ImMessage_PullNewRequest::clear_targetid() {
  targetid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_PullNewRequest::_internal_targetid() const {
  return targetid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_PullNewRequest::targetid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.PullNewRequest.targetId)
  return _internal_targetid();
}
inline void ImMessage_PullNewRequest::_internal_set_targetid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  targetid_ = value;
}
inline void ImMessage_PullNewRequest::set_targetid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_targetid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.PullNewRequest.targetId)
}

// string strTargetId = 5;
inline void ImMessage_PullNewRequest::clear_strtargetid() {
  strtargetid_.ClearToEmpty();
}
inline const std::string& ImMessage_PullNewRequest::strtargetid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.PullNewRequest.strTargetId)
  return _internal_strtargetid();
}
inline void ImMessage_PullNewRequest::set_strtargetid(const std::string& value) {
  _internal_set_strtargetid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.PullNewRequest.strTargetId)
}
inline std::string* ImMessage_PullNewRequest::mutable_strtargetid() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.PullNewRequest.strTargetId)
  return _internal_mutable_strtargetid();
}
inline const std::string& ImMessage_PullNewRequest::_internal_strtargetid() const {
  return strtargetid_.Get();
}
inline void ImMessage_PullNewRequest::_internal_set_strtargetid(const std::string& value) {
  
  strtargetid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ImMessage_PullNewRequest::set_strtargetid(std::string&& value) {
  
  strtargetid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.ImMessage.PullNewRequest.strTargetId)
}
inline void ImMessage_PullNewRequest::set_strtargetid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  strtargetid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.ImMessage.PullNewRequest.strTargetId)
}
inline void ImMessage_PullNewRequest::set_strtargetid(const char* value,
    size_t size) {
  
  strtargetid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.ImMessage.PullNewRequest.strTargetId)
}
inline std::string* ImMessage_PullNewRequest::_internal_mutable_strtargetid() {
  
  return strtargetid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ImMessage_PullNewRequest::release_strtargetid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.ImMessage.PullNewRequest.strTargetId)
  return strtargetid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImMessage_PullNewRequest::set_allocated_strtargetid(std::string* strtargetid) {
  if (strtargetid != nullptr) {
    
  } else {
    
  }
  strtargetid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strtargetid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.ImMessage.PullNewRequest.strTargetId)
}

// -------------------------------------------------------------------

// ImMessage_PullNewResponse

// repeated .AcFunDanmu.Im.ImMessage.Message messages = 1;
inline int ImMessage_PullNewResponse::_internal_messages_size() const {
  return messages_.size();
}
inline int ImMessage_PullNewResponse::messages_size() const {
  return _internal_messages_size();
}
inline void ImMessage_PullNewResponse::clear_messages() {
  messages_.Clear();
}
inline ::AcFunDanmu::Im::ImMessage_Message* ImMessage_PullNewResponse::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.PullNewResponse.messages)
  return messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_Message >*
ImMessage_PullNewResponse::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.ImMessage.PullNewResponse.messages)
  return &messages_;
}
inline const ::AcFunDanmu::Im::ImMessage_Message& ImMessage_PullNewResponse::_internal_messages(int index) const {
  return messages_.Get(index);
}
inline const ::AcFunDanmu::Im::ImMessage_Message& ImMessage_PullNewResponse::messages(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.PullNewResponse.messages)
  return _internal_messages(index);
}
inline ::AcFunDanmu::Im::ImMessage_Message* ImMessage_PullNewResponse::_internal_add_messages() {
  return messages_.Add();
}
inline ::AcFunDanmu::Im::ImMessage_Message* ImMessage_PullNewResponse::add_messages() {
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.ImMessage.PullNewResponse.messages)
  return _internal_add_messages();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_Message >&
ImMessage_PullNewResponse::messages() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.ImMessage.PullNewResponse.messages)
  return messages_;
}

// -------------------------------------------------------------------

// ImMessage_SessionListRequest

// .AcFunDanmu.Im.Basic.SyncCookie syncCookie = 1;
inline bool ImMessage_SessionListRequest::_internal_has_synccookie() const {
  return this != internal_default_instance() && synccookie_ != nullptr;
}
inline bool ImMessage_SessionListRequest::has_synccookie() const {
  return _internal_has_synccookie();
}
inline void ImMessage_SessionListRequest::clear_synccookie() {
  if (GetArena() == nullptr && synccookie_ != nullptr) {
    delete synccookie_;
  }
  synccookie_ = nullptr;
}
inline const ::AcFunDanmu::Im::Basic_SyncCookie& ImMessage_SessionListRequest::_internal_synccookie() const {
  const ::AcFunDanmu::Im::Basic_SyncCookie* p = synccookie_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic_SyncCookie&>(
      ::AcFunDanmu::Im::_Basic_SyncCookie_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic_SyncCookie& ImMessage_SessionListRequest::synccookie() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.SessionListRequest.syncCookie)
  return _internal_synccookie();
}
inline void ImMessage_SessionListRequest::unsafe_arena_set_allocated_synccookie(
    ::AcFunDanmu::Im::Basic_SyncCookie* synccookie) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(synccookie_);
  }
  synccookie_ = synccookie;
  if (synccookie) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.ImMessage.SessionListRequest.syncCookie)
}
inline ::AcFunDanmu::Im::Basic_SyncCookie* ImMessage_SessionListRequest::release_synccookie() {
  
  ::AcFunDanmu::Im::Basic_SyncCookie* temp = synccookie_;
  synccookie_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::Basic_SyncCookie* ImMessage_SessionListRequest::unsafe_arena_release_synccookie() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.ImMessage.SessionListRequest.syncCookie)
  
  ::AcFunDanmu::Im::Basic_SyncCookie* temp = synccookie_;
  synccookie_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic_SyncCookie* ImMessage_SessionListRequest::_internal_mutable_synccookie() {
  
  if (synccookie_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic_SyncCookie>(GetArena());
    synccookie_ = p;
  }
  return synccookie_;
}
inline ::AcFunDanmu::Im::Basic_SyncCookie* ImMessage_SessionListRequest::mutable_synccookie() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.SessionListRequest.syncCookie)
  return _internal_mutable_synccookie();
}
inline void ImMessage_SessionListRequest::set_allocated_synccookie(::AcFunDanmu::Im::Basic_SyncCookie* synccookie) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete synccookie_;
  }
  if (synccookie) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(synccookie);
    if (message_arena != submessage_arena) {
      synccookie = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, synccookie, submessage_arena);
    }
    
  } else {
    
  }
  synccookie_ = synccookie;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.ImMessage.SessionListRequest.syncCookie)
}

// int32 categoryId = 2;
inline void ImMessage_SessionListRequest::clear_categoryid() {
  categoryid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_SessionListRequest::_internal_categoryid() const {
  return categoryid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_SessionListRequest::categoryid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.SessionListRequest.categoryId)
  return _internal_categoryid();
}
inline void ImMessage_SessionListRequest::_internal_set_categoryid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  categoryid_ = value;
}
inline void ImMessage_SessionListRequest::set_categoryid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_categoryid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.SessionListRequest.categoryId)
}

// int32 localDataStatus = 3;
inline void ImMessage_SessionListRequest::clear_localdatastatus() {
  localdatastatus_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_SessionListRequest::_internal_localdatastatus() const {
  return localdatastatus_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_SessionListRequest::localdatastatus() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.SessionListRequest.localDataStatus)
  return _internal_localdatastatus();
}
inline void ImMessage_SessionListRequest::_internal_set_localdatastatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  localdatastatus_ = value;
}
inline void ImMessage_SessionListRequest::set_localdatastatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_localdatastatus(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.SessionListRequest.localDataStatus)
}

// -------------------------------------------------------------------

// ImMessage_ChatSession

// .AcFunDanmu.Im.Basic.User target = 1;
inline bool ImMessage_ChatSession::_internal_has_target() const {
  return this != internal_default_instance() && target_ != nullptr;
}
inline bool ImMessage_ChatSession::has_target() const {
  return _internal_has_target();
}
inline void ImMessage_ChatSession::clear_target() {
  if (GetArena() == nullptr && target_ != nullptr) {
    delete target_;
  }
  target_ = nullptr;
}
inline const ::AcFunDanmu::Im::Basic_User& ImMessage_ChatSession::_internal_target() const {
  const ::AcFunDanmu::Im::Basic_User* p = target_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic_User&>(
      ::AcFunDanmu::Im::_Basic_User_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic_User& ImMessage_ChatSession::target() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.ChatSession.target)
  return _internal_target();
}
inline void ImMessage_ChatSession::unsafe_arena_set_allocated_target(
    ::AcFunDanmu::Im::Basic_User* target) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_);
  }
  target_ = target;
  if (target) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.ImMessage.ChatSession.target)
}
inline ::AcFunDanmu::Im::Basic_User* ImMessage_ChatSession::release_target() {
  
  ::AcFunDanmu::Im::Basic_User* temp = target_;
  target_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::Basic_User* ImMessage_ChatSession::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.ImMessage.ChatSession.target)
  
  ::AcFunDanmu::Im::Basic_User* temp = target_;
  target_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic_User* ImMessage_ChatSession::_internal_mutable_target() {
  
  if (target_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic_User>(GetArena());
    target_ = p;
  }
  return target_;
}
inline ::AcFunDanmu::Im::Basic_User* ImMessage_ChatSession::mutable_target() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.ChatSession.target)
  return _internal_mutable_target();
}
inline void ImMessage_ChatSession::set_allocated_target(::AcFunDanmu::Im::Basic_User* target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete target_;
  }
  if (target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(target);
    if (message_arena != submessage_arena) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    
  } else {
    
  }
  target_ = target;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.ImMessage.ChatSession.target)
}

// int64 maxSeqId = 2;
inline void ImMessage_ChatSession::clear_maxseqid() {
  maxseqid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_ChatSession::_internal_maxseqid() const {
  return maxseqid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_ChatSession::maxseqid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.ChatSession.maxSeqId)
  return _internal_maxseqid();
}
inline void ImMessage_ChatSession::_internal_set_maxseqid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  maxseqid_ = value;
}
inline void ImMessage_ChatSession::set_maxseqid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_maxseqid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.ChatSession.maxSeqId)
}

// int64 readSeqId = 3;
inline void ImMessage_ChatSession::clear_readseqid() {
  readseqid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_ChatSession::_internal_readseqid() const {
  return readseqid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_ChatSession::readseqid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.ChatSession.readSeqId)
  return _internal_readseqid();
}
inline void ImMessage_ChatSession::_internal_set_readseqid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  readseqid_ = value;
}
inline void ImMessage_ChatSession::set_readseqid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_readseqid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.ChatSession.readSeqId)
}

// int32 unreadMsgCount = 4;
inline void ImMessage_ChatSession::clear_unreadmsgcount() {
  unreadmsgcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_ChatSession::_internal_unreadmsgcount() const {
  return unreadmsgcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_ChatSession::unreadmsgcount() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.ChatSession.unreadMsgCount)
  return _internal_unreadmsgcount();
}
inline void ImMessage_ChatSession::_internal_set_unreadmsgcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  unreadmsgcount_ = value;
}
inline void ImMessage_ChatSession::set_unreadmsgcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_unreadmsgcount(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.ChatSession.unreadMsgCount)
}

// repeated .AcFunDanmu.Im.ImMessage.Message latestMessage = 5;
inline int ImMessage_ChatSession::_internal_latestmessage_size() const {
  return latestmessage_.size();
}
inline int ImMessage_ChatSession::latestmessage_size() const {
  return _internal_latestmessage_size();
}
inline void ImMessage_ChatSession::clear_latestmessage() {
  latestmessage_.Clear();
}
inline ::AcFunDanmu::Im::ImMessage_Message* ImMessage_ChatSession::mutable_latestmessage(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.ChatSession.latestMessage)
  return latestmessage_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_Message >*
ImMessage_ChatSession::mutable_latestmessage() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.ImMessage.ChatSession.latestMessage)
  return &latestmessage_;
}
inline const ::AcFunDanmu::Im::ImMessage_Message& ImMessage_ChatSession::_internal_latestmessage(int index) const {
  return latestmessage_.Get(index);
}
inline const ::AcFunDanmu::Im::ImMessage_Message& ImMessage_ChatSession::latestmessage(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.ChatSession.latestMessage)
  return _internal_latestmessage(index);
}
inline ::AcFunDanmu::Im::ImMessage_Message* ImMessage_ChatSession::_internal_add_latestmessage() {
  return latestmessage_.Add();
}
inline ::AcFunDanmu::Im::ImMessage_Message* ImMessage_ChatSession::add_latestmessage() {
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.ImMessage.ChatSession.latestMessage)
  return _internal_add_latestmessage();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_Message >&
ImMessage_ChatSession::latestmessage() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.ImMessage.ChatSession.latestMessage)
  return latestmessage_;
}

// .AcFunDanmu.Im.ImMessage.ChatTargetType chatTargetType = 8;
inline void ImMessage_ChatSession::clear_chattargettype() {
  chattargettype_ = 0;
}
inline ::AcFunDanmu::Im::ImMessage_ChatTargetType ImMessage_ChatSession::_internal_chattargettype() const {
  return static_cast< ::AcFunDanmu::Im::ImMessage_ChatTargetType >(chattargettype_);
}
inline ::AcFunDanmu::Im::ImMessage_ChatTargetType ImMessage_ChatSession::chattargettype() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.ChatSession.chatTargetType)
  return _internal_chattargettype();
}
inline void ImMessage_ChatSession::_internal_set_chattargettype(::AcFunDanmu::Im::ImMessage_ChatTargetType value) {
  
  chattargettype_ = value;
}
inline void ImMessage_ChatSession::set_chattargettype(::AcFunDanmu::Im::ImMessage_ChatTargetType value) {
  _internal_set_chattargettype(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.ChatSession.chatTargetType)
}

// int64 targetId = 9;
inline void ImMessage_ChatSession::clear_targetid() {
  targetid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_ChatSession::_internal_targetid() const {
  return targetid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_ChatSession::targetid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.ChatSession.targetId)
  return _internal_targetid();
}
inline void ImMessage_ChatSession::_internal_set_targetid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  targetid_ = value;
}
inline void ImMessage_ChatSession::set_targetid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_targetid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.ChatSession.targetId)
}

// int64 activeTime = 10;
inline void ImMessage_ChatSession::clear_activetime() {
  activetime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_ChatSession::_internal_activetime() const {
  return activetime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_ChatSession::activetime() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.ChatSession.activeTime)
  return _internal_activetime();
}
inline void ImMessage_ChatSession::_internal_set_activetime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  activetime_ = value;
}
inline void ImMessage_ChatSession::set_activetime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_activetime(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.ChatSession.activeTime)
}

// int32 priority = 11;
inline void ImMessage_ChatSession::clear_priority() {
  priority_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_ChatSession::_internal_priority() const {
  return priority_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_ChatSession::priority() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.ChatSession.priority)
  return _internal_priority();
}
inline void ImMessage_ChatSession::_internal_set_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  priority_ = value;
}
inline void ImMessage_ChatSession::set_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.ChatSession.priority)
}

// int32 categoryId = 12;
inline void ImMessage_ChatSession::clear_categoryid() {
  categoryid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_ChatSession::_internal_categoryid() const {
  return categoryid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_ChatSession::categoryid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.ChatSession.categoryId)
  return _internal_categoryid();
}
inline void ImMessage_ChatSession::_internal_set_categoryid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  categoryid_ = value;
}
inline void ImMessage_ChatSession::set_categoryid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_categoryid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.ChatSession.categoryId)
}

// string cursor = 13;
inline void ImMessage_ChatSession::clear_cursor() {
  cursor_.ClearToEmpty();
}
inline const std::string& ImMessage_ChatSession::cursor() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.ChatSession.cursor)
  return _internal_cursor();
}
inline void ImMessage_ChatSession::set_cursor(const std::string& value) {
  _internal_set_cursor(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.ChatSession.cursor)
}
inline std::string* ImMessage_ChatSession::mutable_cursor() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.ChatSession.cursor)
  return _internal_mutable_cursor();
}
inline const std::string& ImMessage_ChatSession::_internal_cursor() const {
  return cursor_.Get();
}
inline void ImMessage_ChatSession::_internal_set_cursor(const std::string& value) {
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ImMessage_ChatSession::set_cursor(std::string&& value) {
  
  cursor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.ImMessage.ChatSession.cursor)
}
inline void ImMessage_ChatSession::set_cursor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.ImMessage.ChatSession.cursor)
}
inline void ImMessage_ChatSession::set_cursor(const char* value,
    size_t size) {
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.ImMessage.ChatSession.cursor)
}
inline std::string* ImMessage_ChatSession::_internal_mutable_cursor() {
  
  return cursor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ImMessage_ChatSession::release_cursor() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.ImMessage.ChatSession.cursor)
  return cursor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImMessage_ChatSession::set_allocated_cursor(std::string* cursor) {
  if (cursor != nullptr) {
    
  } else {
    
  }
  cursor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cursor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.ImMessage.ChatSession.cursor)
}

// int32 accountType = 14;
inline void ImMessage_ChatSession::clear_accounttype() {
  accounttype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_ChatSession::_internal_accounttype() const {
  return accounttype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_ChatSession::accounttype() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.ChatSession.accountType)
  return _internal_accounttype();
}
inline void ImMessage_ChatSession::_internal_set_accounttype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  accounttype_ = value;
}
inline void ImMessage_ChatSession::set_accounttype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_accounttype(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.ChatSession.accountType)
}

// bool aggregateSession = 15;
inline void ImMessage_ChatSession::clear_aggregatesession() {
  aggregatesession_ = false;
}
inline bool ImMessage_ChatSession::_internal_aggregatesession() const {
  return aggregatesession_;
}
inline bool ImMessage_ChatSession::aggregatesession() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.ChatSession.aggregateSession)
  return _internal_aggregatesession();
}
inline void ImMessage_ChatSession::_internal_set_aggregatesession(bool value) {
  
  aggregatesession_ = value;
}
inline void ImMessage_ChatSession::set_aggregatesession(bool value) {
  _internal_set_aggregatesession(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.ChatSession.aggregateSession)
}

// int32 jumpCategoryId = 16;
inline void ImMessage_ChatSession::clear_jumpcategoryid() {
  jumpcategoryid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_ChatSession::_internal_jumpcategoryid() const {
  return jumpcategoryid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_ChatSession::jumpcategoryid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.ChatSession.jumpCategoryId)
  return _internal_jumpcategoryid();
}
inline void ImMessage_ChatSession::_internal_set_jumpcategoryid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  jumpcategoryid_ = value;
}
inline void ImMessage_ChatSession::set_jumpcategoryid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_jumpcategoryid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.ChatSession.jumpCategoryId)
}

// int64 expireAt = 17;
inline void ImMessage_ChatSession::clear_expireat() {
  expireat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_ChatSession::_internal_expireat() const {
  return expireat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_ChatSession::expireat() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.ChatSession.expireAt)
  return _internal_expireat();
}
inline void ImMessage_ChatSession::_internal_set_expireat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  expireat_ = value;
}
inline void ImMessage_ChatSession::set_expireat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_expireat(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.ChatSession.expireAt)
}

// int64 effectiveFrom = 18;
inline void ImMessage_ChatSession::clear_effectivefrom() {
  effectivefrom_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_ChatSession::_internal_effectivefrom() const {
  return effectivefrom_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_ChatSession::effectivefrom() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.ChatSession.effectiveFrom)
  return _internal_effectivefrom();
}
inline void ImMessage_ChatSession::_internal_set_effectivefrom(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  effectivefrom_ = value;
}
inline void ImMessage_ChatSession::set_effectivefrom(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_effectivefrom(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.ChatSession.effectiveFrom)
}

// string strTargetId = 19;
inline void ImMessage_ChatSession::clear_strtargetid() {
  strtargetid_.ClearToEmpty();
}
inline const std::string& ImMessage_ChatSession::strtargetid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.ChatSession.strTargetId)
  return _internal_strtargetid();
}
inline void ImMessage_ChatSession::set_strtargetid(const std::string& value) {
  _internal_set_strtargetid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.ChatSession.strTargetId)
}
inline std::string* ImMessage_ChatSession::mutable_strtargetid() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.ChatSession.strTargetId)
  return _internal_mutable_strtargetid();
}
inline const std::string& ImMessage_ChatSession::_internal_strtargetid() const {
  return strtargetid_.Get();
}
inline void ImMessage_ChatSession::_internal_set_strtargetid(const std::string& value) {
  
  strtargetid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ImMessage_ChatSession::set_strtargetid(std::string&& value) {
  
  strtargetid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.ImMessage.ChatSession.strTargetId)
}
inline void ImMessage_ChatSession::set_strtargetid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  strtargetid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.ImMessage.ChatSession.strTargetId)
}
inline void ImMessage_ChatSession::set_strtargetid(const char* value,
    size_t size) {
  
  strtargetid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.ImMessage.ChatSession.strTargetId)
}
inline std::string* ImMessage_ChatSession::_internal_mutable_strtargetid() {
  
  return strtargetid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ImMessage_ChatSession::release_strtargetid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.ImMessage.ChatSession.strTargetId)
  return strtargetid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImMessage_ChatSession::set_allocated_strtargetid(std::string* strtargetid) {
  if (strtargetid != nullptr) {
    
  } else {
    
  }
  strtargetid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strtargetid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.ImMessage.ChatSession.strTargetId)
}

// repeated .AcFunDanmu.Im.ImMessage.RemindBody remindBody = 20;
inline int ImMessage_ChatSession::_internal_remindbody_size() const {
  return remindbody_.size();
}
inline int ImMessage_ChatSession::remindbody_size() const {
  return _internal_remindbody_size();
}
inline void ImMessage_ChatSession::clear_remindbody() {
  remindbody_.Clear();
}
inline ::AcFunDanmu::Im::ImMessage_RemindBody* ImMessage_ChatSession::mutable_remindbody(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.ChatSession.remindBody)
  return remindbody_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_RemindBody >*
ImMessage_ChatSession::mutable_remindbody() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.ImMessage.ChatSession.remindBody)
  return &remindbody_;
}
inline const ::AcFunDanmu::Im::ImMessage_RemindBody& ImMessage_ChatSession::_internal_remindbody(int index) const {
  return remindbody_.Get(index);
}
inline const ::AcFunDanmu::Im::ImMessage_RemindBody& ImMessage_ChatSession::remindbody(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.ChatSession.remindBody)
  return _internal_remindbody(index);
}
inline ::AcFunDanmu::Im::ImMessage_RemindBody* ImMessage_ChatSession::_internal_add_remindbody() {
  return remindbody_.Add();
}
inline ::AcFunDanmu::Im::ImMessage_RemindBody* ImMessage_ChatSession::add_remindbody() {
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.ImMessage.ChatSession.remindBody)
  return _internal_add_remindbody();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_RemindBody >&
ImMessage_ChatSession::remindbody() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.ImMessage.ChatSession.remindBody)
  return remindbody_;
}

// int64 targetReadSeqId = 21;
inline void ImMessage_ChatSession::clear_targetreadseqid() {
  targetreadseqid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_ChatSession::_internal_targetreadseqid() const {
  return targetreadseqid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_ChatSession::targetreadseqid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.ChatSession.targetReadSeqId)
  return _internal_targetreadseqid();
}
inline void ImMessage_ChatSession::_internal_set_targetreadseqid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  targetreadseqid_ = value;
}
inline void ImMessage_ChatSession::set_targetreadseqid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_targetreadseqid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.ChatSession.targetReadSeqId)
}

// -------------------------------------------------------------------

// ImMessage_Reminder

// string originText = 1;
inline void ImMessage_Reminder::clear_origintext() {
  origintext_.ClearToEmpty();
}
inline const std::string& ImMessage_Reminder::origintext() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.Reminder.originText)
  return _internal_origintext();
}
inline void ImMessage_Reminder::set_origintext(const std::string& value) {
  _internal_set_origintext(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.Reminder.originText)
}
inline std::string* ImMessage_Reminder::mutable_origintext() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.Reminder.originText)
  return _internal_mutable_origintext();
}
inline const std::string& ImMessage_Reminder::_internal_origintext() const {
  return origintext_.Get();
}
inline void ImMessage_Reminder::_internal_set_origintext(const std::string& value) {
  
  origintext_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ImMessage_Reminder::set_origintext(std::string&& value) {
  
  origintext_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.ImMessage.Reminder.originText)
}
inline void ImMessage_Reminder::set_origintext(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  origintext_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.ImMessage.Reminder.originText)
}
inline void ImMessage_Reminder::set_origintext(const char* value,
    size_t size) {
  
  origintext_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.ImMessage.Reminder.originText)
}
inline std::string* ImMessage_Reminder::_internal_mutable_origintext() {
  
  return origintext_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ImMessage_Reminder::release_origintext() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.ImMessage.Reminder.originText)
  return origintext_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImMessage_Reminder::set_allocated_origintext(std::string* origintext) {
  if (origintext != nullptr) {
    
  } else {
    
  }
  origintext_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), origintext,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.ImMessage.Reminder.originText)
}

// repeated .AcFunDanmu.Im.ImMessage.RemindBody remindBody = 2;
inline int ImMessage_Reminder::_internal_remindbody_size() const {
  return remindbody_.size();
}
inline int ImMessage_Reminder::remindbody_size() const {
  return _internal_remindbody_size();
}
inline void ImMessage_Reminder::clear_remindbody() {
  remindbody_.Clear();
}
inline ::AcFunDanmu::Im::ImMessage_RemindBody* ImMessage_Reminder::mutable_remindbody(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.Reminder.remindBody)
  return remindbody_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_RemindBody >*
ImMessage_Reminder::mutable_remindbody() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.ImMessage.Reminder.remindBody)
  return &remindbody_;
}
inline const ::AcFunDanmu::Im::ImMessage_RemindBody& ImMessage_Reminder::_internal_remindbody(int index) const {
  return remindbody_.Get(index);
}
inline const ::AcFunDanmu::Im::ImMessage_RemindBody& ImMessage_Reminder::remindbody(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.Reminder.remindBody)
  return _internal_remindbody(index);
}
inline ::AcFunDanmu::Im::ImMessage_RemindBody* ImMessage_Reminder::_internal_add_remindbody() {
  return remindbody_.Add();
}
inline ::AcFunDanmu::Im::ImMessage_RemindBody* ImMessage_Reminder::add_remindbody() {
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.ImMessage.Reminder.remindBody)
  return _internal_add_remindbody();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_RemindBody >&
ImMessage_Reminder::remindbody() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.ImMessage.Reminder.remindBody)
  return remindbody_;
}

// -------------------------------------------------------------------

// ImMessage_RemindBody

// .AcFunDanmu.Im.ImMessage.RemindBody.RemindType remindType = 1;
inline void ImMessage_RemindBody::clear_remindtype() {
  remindtype_ = 0;
}
inline ::AcFunDanmu::Im::ImMessage_RemindBody_RemindType ImMessage_RemindBody::_internal_remindtype() const {
  return static_cast< ::AcFunDanmu::Im::ImMessage_RemindBody_RemindType >(remindtype_);
}
inline ::AcFunDanmu::Im::ImMessage_RemindBody_RemindType ImMessage_RemindBody::remindtype() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.RemindBody.remindType)
  return _internal_remindtype();
}
inline void ImMessage_RemindBody::_internal_set_remindtype(::AcFunDanmu::Im::ImMessage_RemindBody_RemindType value) {
  
  remindtype_ = value;
}
inline void ImMessage_RemindBody::set_remindtype(::AcFunDanmu::Im::ImMessage_RemindBody_RemindType value) {
  _internal_set_remindtype(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.RemindBody.remindType)
}

// int64 seqId = 2;
inline void ImMessage_RemindBody::clear_seqid() {
  seqid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_RemindBody::_internal_seqid() const {
  return seqid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_RemindBody::seqid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.RemindBody.seqId)
  return _internal_seqid();
}
inline void ImMessage_RemindBody::_internal_set_seqid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  seqid_ = value;
}
inline void ImMessage_RemindBody::set_seqid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_seqid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.RemindBody.seqId)
}

// int64 targetId = 3;
inline void ImMessage_RemindBody::clear_targetid() {
  targetid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_RemindBody::_internal_targetid() const {
  return targetid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_RemindBody::targetid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.RemindBody.targetId)
  return _internal_targetid();
}
inline void ImMessage_RemindBody::_internal_set_targetid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  targetid_ = value;
}
inline void ImMessage_RemindBody::set_targetid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_targetid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.RemindBody.targetId)
}

// string userName = 4;
inline void ImMessage_RemindBody::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& ImMessage_RemindBody::username() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.RemindBody.userName)
  return _internal_username();
}
inline void ImMessage_RemindBody::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.RemindBody.userName)
}
inline std::string* ImMessage_RemindBody::mutable_username() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.RemindBody.userName)
  return _internal_mutable_username();
}
inline const std::string& ImMessage_RemindBody::_internal_username() const {
  return username_.Get();
}
inline void ImMessage_RemindBody::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ImMessage_RemindBody::set_username(std::string&& value) {
  
  username_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.ImMessage.RemindBody.userName)
}
inline void ImMessage_RemindBody::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.ImMessage.RemindBody.userName)
}
inline void ImMessage_RemindBody::set_username(const char* value,
    size_t size) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.ImMessage.RemindBody.userName)
}
inline std::string* ImMessage_RemindBody::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ImMessage_RemindBody::release_username() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.ImMessage.RemindBody.userName)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImMessage_RemindBody::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.ImMessage.RemindBody.userName)
}

// int32 startIndex = 5;
inline void ImMessage_RemindBody::clear_startindex() {
  startindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_RemindBody::_internal_startindex() const {
  return startindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_RemindBody::startindex() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.RemindBody.startIndex)
  return _internal_startindex();
}
inline void ImMessage_RemindBody::_internal_set_startindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  startindex_ = value;
}
inline void ImMessage_RemindBody::set_startindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_startindex(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.RemindBody.startIndex)
}

// int32 length = 6;
inline void ImMessage_RemindBody::clear_length() {
  length_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_RemindBody::_internal_length() const {
  return length_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_RemindBody::length() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.RemindBody.length)
  return _internal_length();
}
inline void ImMessage_RemindBody::_internal_set_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  length_ = value;
}
inline void ImMessage_RemindBody::set_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.RemindBody.length)
}

// -------------------------------------------------------------------

// ImMessage_ChatTarget

// string targetId = 1;
inline void ImMessage_ChatTarget::clear_targetid() {
  targetid_.ClearToEmpty();
}
inline const std::string& ImMessage_ChatTarget::targetid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.ChatTarget.targetId)
  return _internal_targetid();
}
inline void ImMessage_ChatTarget::set_targetid(const std::string& value) {
  _internal_set_targetid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.ChatTarget.targetId)
}
inline std::string* ImMessage_ChatTarget::mutable_targetid() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.ChatTarget.targetId)
  return _internal_mutable_targetid();
}
inline const std::string& ImMessage_ChatTarget::_internal_targetid() const {
  return targetid_.Get();
}
inline void ImMessage_ChatTarget::_internal_set_targetid(const std::string& value) {
  
  targetid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ImMessage_ChatTarget::set_targetid(std::string&& value) {
  
  targetid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.ImMessage.ChatTarget.targetId)
}
inline void ImMessage_ChatTarget::set_targetid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  targetid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.ImMessage.ChatTarget.targetId)
}
inline void ImMessage_ChatTarget::set_targetid(const char* value,
    size_t size) {
  
  targetid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.ImMessage.ChatTarget.targetId)
}
inline std::string* ImMessage_ChatTarget::_internal_mutable_targetid() {
  
  return targetid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ImMessage_ChatTarget::release_targetid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.ImMessage.ChatTarget.targetId)
  return targetid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImMessage_ChatTarget::set_allocated_targetid(std::string* targetid) {
  if (targetid != nullptr) {
    
  } else {
    
  }
  targetid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), targetid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.ImMessage.ChatTarget.targetId)
}

// .AcFunDanmu.Im.ImMessage.ChatTargetType targetType = 2;
inline void ImMessage_ChatTarget::clear_targettype() {
  targettype_ = 0;
}
inline ::AcFunDanmu::Im::ImMessage_ChatTargetType ImMessage_ChatTarget::_internal_targettype() const {
  return static_cast< ::AcFunDanmu::Im::ImMessage_ChatTargetType >(targettype_);
}
inline ::AcFunDanmu::Im::ImMessage_ChatTargetType ImMessage_ChatTarget::targettype() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.ChatTarget.targetType)
  return _internal_targettype();
}
inline void ImMessage_ChatTarget::_internal_set_targettype(::AcFunDanmu::Im::ImMessage_ChatTargetType value) {
  
  targettype_ = value;
}
inline void ImMessage_ChatTarget::set_targettype(::AcFunDanmu::Im::ImMessage_ChatTargetType value) {
  _internal_set_targettype(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.ChatTarget.targetType)
}

// -------------------------------------------------------------------

// ImMessage_SessionListResponse

// .AcFunDanmu.Im.Basic.SyncCookie syncCookie = 1;
inline bool ImMessage_SessionListResponse::_internal_has_synccookie() const {
  return this != internal_default_instance() && synccookie_ != nullptr;
}
inline bool ImMessage_SessionListResponse::has_synccookie() const {
  return _internal_has_synccookie();
}
inline void ImMessage_SessionListResponse::clear_synccookie() {
  if (GetArena() == nullptr && synccookie_ != nullptr) {
    delete synccookie_;
  }
  synccookie_ = nullptr;
}
inline const ::AcFunDanmu::Im::Basic_SyncCookie& ImMessage_SessionListResponse::_internal_synccookie() const {
  const ::AcFunDanmu::Im::Basic_SyncCookie* p = synccookie_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic_SyncCookie&>(
      ::AcFunDanmu::Im::_Basic_SyncCookie_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic_SyncCookie& ImMessage_SessionListResponse::synccookie() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.SessionListResponse.syncCookie)
  return _internal_synccookie();
}
inline void ImMessage_SessionListResponse::unsafe_arena_set_allocated_synccookie(
    ::AcFunDanmu::Im::Basic_SyncCookie* synccookie) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(synccookie_);
  }
  synccookie_ = synccookie;
  if (synccookie) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.ImMessage.SessionListResponse.syncCookie)
}
inline ::AcFunDanmu::Im::Basic_SyncCookie* ImMessage_SessionListResponse::release_synccookie() {
  
  ::AcFunDanmu::Im::Basic_SyncCookie* temp = synccookie_;
  synccookie_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::Basic_SyncCookie* ImMessage_SessionListResponse::unsafe_arena_release_synccookie() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.ImMessage.SessionListResponse.syncCookie)
  
  ::AcFunDanmu::Im::Basic_SyncCookie* temp = synccookie_;
  synccookie_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic_SyncCookie* ImMessage_SessionListResponse::_internal_mutable_synccookie() {
  
  if (synccookie_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic_SyncCookie>(GetArena());
    synccookie_ = p;
  }
  return synccookie_;
}
inline ::AcFunDanmu::Im::Basic_SyncCookie* ImMessage_SessionListResponse::mutable_synccookie() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.SessionListResponse.syncCookie)
  return _internal_mutable_synccookie();
}
inline void ImMessage_SessionListResponse::set_allocated_synccookie(::AcFunDanmu::Im::Basic_SyncCookie* synccookie) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete synccookie_;
  }
  if (synccookie) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(synccookie);
    if (message_arena != submessage_arena) {
      synccookie = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, synccookie, submessage_arena);
    }
    
  } else {
    
  }
  synccookie_ = synccookie;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.ImMessage.SessionListResponse.syncCookie)
}

// repeated .AcFunDanmu.Im.ImMessage.ChatSession sessions = 2;
inline int ImMessage_SessionListResponse::_internal_sessions_size() const {
  return sessions_.size();
}
inline int ImMessage_SessionListResponse::sessions_size() const {
  return _internal_sessions_size();
}
inline void ImMessage_SessionListResponse::clear_sessions() {
  sessions_.Clear();
}
inline ::AcFunDanmu::Im::ImMessage_ChatSession* ImMessage_SessionListResponse::mutable_sessions(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.SessionListResponse.sessions)
  return sessions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_ChatSession >*
ImMessage_SessionListResponse::mutable_sessions() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.ImMessage.SessionListResponse.sessions)
  return &sessions_;
}
inline const ::AcFunDanmu::Im::ImMessage_ChatSession& ImMessage_SessionListResponse::_internal_sessions(int index) const {
  return sessions_.Get(index);
}
inline const ::AcFunDanmu::Im::ImMessage_ChatSession& ImMessage_SessionListResponse::sessions(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.SessionListResponse.sessions)
  return _internal_sessions(index);
}
inline ::AcFunDanmu::Im::ImMessage_ChatSession* ImMessage_SessionListResponse::_internal_add_sessions() {
  return sessions_.Add();
}
inline ::AcFunDanmu::Im::ImMessage_ChatSession* ImMessage_SessionListResponse::add_sessions() {
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.ImMessage.SessionListResponse.sessions)
  return _internal_add_sessions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_ChatSession >&
ImMessage_SessionListResponse::sessions() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.ImMessage.SessionListResponse.sessions)
  return sessions_;
}

// bool notFullFetch = 3;
inline void ImMessage_SessionListResponse::clear_notfullfetch() {
  notfullfetch_ = false;
}
inline bool ImMessage_SessionListResponse::_internal_notfullfetch() const {
  return notfullfetch_;
}
inline bool ImMessage_SessionListResponse::notfullfetch() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.SessionListResponse.notFullFetch)
  return _internal_notfullfetch();
}
inline void ImMessage_SessionListResponse::_internal_set_notfullfetch(bool value) {
  
  notfullfetch_ = value;
}
inline void ImMessage_SessionListResponse::set_notfullfetch(bool value) {
  _internal_set_notfullfetch(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.SessionListResponse.notFullFetch)
}

// int64 serverTime = 4;
inline void ImMessage_SessionListResponse::clear_servertime() {
  servertime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_SessionListResponse::_internal_servertime() const {
  return servertime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_SessionListResponse::servertime() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.SessionListResponse.serverTime)
  return _internal_servertime();
}
inline void ImMessage_SessionListResponse::_internal_set_servertime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  servertime_ = value;
}
inline void ImMessage_SessionListResponse::set_servertime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_servertime(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.SessionListResponse.serverTime)
}

// bool clearLocalData = 5;
inline void ImMessage_SessionListResponse::clear_clearlocaldata() {
  clearlocaldata_ = false;
}
inline bool ImMessage_SessionListResponse::_internal_clearlocaldata() const {
  return clearlocaldata_;
}
inline bool ImMessage_SessionListResponse::clearlocaldata() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.SessionListResponse.clearLocalData)
  return _internal_clearlocaldata();
}
inline void ImMessage_SessionListResponse::_internal_set_clearlocaldata(bool value) {
  
  clearlocaldata_ = value;
}
inline void ImMessage_SessionListResponse::set_clearlocaldata(bool value) {
  _internal_set_clearlocaldata(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.SessionListResponse.clearLocalData)
}

// int32 categoryId = 6;
inline void ImMessage_SessionListResponse::clear_categoryid() {
  categoryid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_SessionListResponse::_internal_categoryid() const {
  return categoryid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_SessionListResponse::categoryid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.SessionListResponse.categoryId)
  return _internal_categoryid();
}
inline void ImMessage_SessionListResponse::_internal_set_categoryid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  categoryid_ = value;
}
inline void ImMessage_SessionListResponse::set_categoryid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_categoryid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.SessionListResponse.categoryId)
}

// int32 clientDataStatus = 7;
inline void ImMessage_SessionListResponse::clear_clientdatastatus() {
  clientdatastatus_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_SessionListResponse::_internal_clientdatastatus() const {
  return clientdatastatus_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_SessionListResponse::clientdatastatus() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.SessionListResponse.clientDataStatus)
  return _internal_clientdatastatus();
}
inline void ImMessage_SessionListResponse::_internal_set_clientdatastatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  clientdatastatus_ = value;
}
inline void ImMessage_SessionListResponse::set_clientdatastatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_clientdatastatus(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.SessionListResponse.clientDataStatus)
}

// -------------------------------------------------------------------

// ImMessage_SessionPageListRequest

// string cursor = 1;
inline void ImMessage_SessionPageListRequest::clear_cursor() {
  cursor_.ClearToEmpty();
}
inline const std::string& ImMessage_SessionPageListRequest::cursor() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.SessionPageListRequest.cursor)
  return _internal_cursor();
}
inline void ImMessage_SessionPageListRequest::set_cursor(const std::string& value) {
  _internal_set_cursor(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.SessionPageListRequest.cursor)
}
inline std::string* ImMessage_SessionPageListRequest::mutable_cursor() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.SessionPageListRequest.cursor)
  return _internal_mutable_cursor();
}
inline const std::string& ImMessage_SessionPageListRequest::_internal_cursor() const {
  return cursor_.Get();
}
inline void ImMessage_SessionPageListRequest::_internal_set_cursor(const std::string& value) {
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ImMessage_SessionPageListRequest::set_cursor(std::string&& value) {
  
  cursor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.ImMessage.SessionPageListRequest.cursor)
}
inline void ImMessage_SessionPageListRequest::set_cursor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.ImMessage.SessionPageListRequest.cursor)
}
inline void ImMessage_SessionPageListRequest::set_cursor(const char* value,
    size_t size) {
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.ImMessage.SessionPageListRequest.cursor)
}
inline std::string* ImMessage_SessionPageListRequest::_internal_mutable_cursor() {
  
  return cursor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ImMessage_SessionPageListRequest::release_cursor() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.ImMessage.SessionPageListRequest.cursor)
  return cursor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImMessage_SessionPageListRequest::set_allocated_cursor(std::string* cursor) {
  if (cursor != nullptr) {
    
  } else {
    
  }
  cursor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cursor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.ImMessage.SessionPageListRequest.cursor)
}

// int32 count = 2;
inline void ImMessage_SessionPageListRequest::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_SessionPageListRequest::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_SessionPageListRequest::count() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.SessionPageListRequest.count)
  return _internal_count();
}
inline void ImMessage_SessionPageListRequest::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void ImMessage_SessionPageListRequest::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.SessionPageListRequest.count)
}

// int32 categoryId = 3;
inline void ImMessage_SessionPageListRequest::clear_categoryid() {
  categoryid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_SessionPageListRequest::_internal_categoryid() const {
  return categoryid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_SessionPageListRequest::categoryid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.SessionPageListRequest.categoryId)
  return _internal_categoryid();
}
inline void ImMessage_SessionPageListRequest::_internal_set_categoryid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  categoryid_ = value;
}
inline void ImMessage_SessionPageListRequest::set_categoryid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_categoryid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.SessionPageListRequest.categoryId)
}

// -------------------------------------------------------------------

// ImMessage_SessionPageListResponse

// bool hasMore = 1;
inline void ImMessage_SessionPageListResponse::clear_hasmore() {
  hasmore_ = false;
}
inline bool ImMessage_SessionPageListResponse::_internal_hasmore() const {
  return hasmore_;
}
inline bool ImMessage_SessionPageListResponse::hasmore() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.SessionPageListResponse.hasMore)
  return _internal_hasmore();
}
inline void ImMessage_SessionPageListResponse::_internal_set_hasmore(bool value) {
  
  hasmore_ = value;
}
inline void ImMessage_SessionPageListResponse::set_hasmore(bool value) {
  _internal_set_hasmore(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.SessionPageListResponse.hasMore)
}

// repeated .AcFunDanmu.Im.ImMessage.ChatSession sessions = 2;
inline int ImMessage_SessionPageListResponse::_internal_sessions_size() const {
  return sessions_.size();
}
inline int ImMessage_SessionPageListResponse::sessions_size() const {
  return _internal_sessions_size();
}
inline void ImMessage_SessionPageListResponse::clear_sessions() {
  sessions_.Clear();
}
inline ::AcFunDanmu::Im::ImMessage_ChatSession* ImMessage_SessionPageListResponse::mutable_sessions(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.SessionPageListResponse.sessions)
  return sessions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_ChatSession >*
ImMessage_SessionPageListResponse::mutable_sessions() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.ImMessage.SessionPageListResponse.sessions)
  return &sessions_;
}
inline const ::AcFunDanmu::Im::ImMessage_ChatSession& ImMessage_SessionPageListResponse::_internal_sessions(int index) const {
  return sessions_.Get(index);
}
inline const ::AcFunDanmu::Im::ImMessage_ChatSession& ImMessage_SessionPageListResponse::sessions(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.SessionPageListResponse.sessions)
  return _internal_sessions(index);
}
inline ::AcFunDanmu::Im::ImMessage_ChatSession* ImMessage_SessionPageListResponse::_internal_add_sessions() {
  return sessions_.Add();
}
inline ::AcFunDanmu::Im::ImMessage_ChatSession* ImMessage_SessionPageListResponse::add_sessions() {
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.ImMessage.SessionPageListResponse.sessions)
  return _internal_add_sessions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_ChatSession >&
ImMessage_SessionPageListResponse::sessions() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.ImMessage.SessionPageListResponse.sessions)
  return sessions_;
}

// -------------------------------------------------------------------

// ImMessage_SessionRemoveRequest

// int64 targetId = 1;
inline void ImMessage_SessionRemoveRequest::clear_targetid() {
  targetid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_SessionRemoveRequest::_internal_targetid() const {
  return targetid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_SessionRemoveRequest::targetid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.SessionRemoveRequest.targetId)
  return _internal_targetid();
}
inline void ImMessage_SessionRemoveRequest::_internal_set_targetid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  targetid_ = value;
}
inline void ImMessage_SessionRemoveRequest::set_targetid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_targetid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.SessionRemoveRequest.targetId)
}

// .AcFunDanmu.Im.ImMessage.ChatTargetType chatTargetType = 2;
inline void ImMessage_SessionRemoveRequest::clear_chattargettype() {
  chattargettype_ = 0;
}
inline ::AcFunDanmu::Im::ImMessage_ChatTargetType ImMessage_SessionRemoveRequest::_internal_chattargettype() const {
  return static_cast< ::AcFunDanmu::Im::ImMessage_ChatTargetType >(chattargettype_);
}
inline ::AcFunDanmu::Im::ImMessage_ChatTargetType ImMessage_SessionRemoveRequest::chattargettype() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.SessionRemoveRequest.chatTargetType)
  return _internal_chattargettype();
}
inline void ImMessage_SessionRemoveRequest::_internal_set_chattargettype(::AcFunDanmu::Im::ImMessage_ChatTargetType value) {
  
  chattargettype_ = value;
}
inline void ImMessage_SessionRemoveRequest::set_chattargettype(::AcFunDanmu::Im::ImMessage_ChatTargetType value) {
  _internal_set_chattargettype(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.SessionRemoveRequest.chatTargetType)
}

// int32 categoryId = 3;
inline void ImMessage_SessionRemoveRequest::clear_categoryid() {
  categoryid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_SessionRemoveRequest::_internal_categoryid() const {
  return categoryid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_SessionRemoveRequest::categoryid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.SessionRemoveRequest.categoryId)
  return _internal_categoryid();
}
inline void ImMessage_SessionRemoveRequest::_internal_set_categoryid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  categoryid_ = value;
}
inline void ImMessage_SessionRemoveRequest::set_categoryid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_categoryid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.SessionRemoveRequest.categoryId)
}

// string strTargetId = 4;
inline void ImMessage_SessionRemoveRequest::clear_strtargetid() {
  strtargetid_.ClearToEmpty();
}
inline const std::string& ImMessage_SessionRemoveRequest::strtargetid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.SessionRemoveRequest.strTargetId)
  return _internal_strtargetid();
}
inline void ImMessage_SessionRemoveRequest::set_strtargetid(const std::string& value) {
  _internal_set_strtargetid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.SessionRemoveRequest.strTargetId)
}
inline std::string* ImMessage_SessionRemoveRequest::mutable_strtargetid() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.SessionRemoveRequest.strTargetId)
  return _internal_mutable_strtargetid();
}
inline const std::string& ImMessage_SessionRemoveRequest::_internal_strtargetid() const {
  return strtargetid_.Get();
}
inline void ImMessage_SessionRemoveRequest::_internal_set_strtargetid(const std::string& value) {
  
  strtargetid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ImMessage_SessionRemoveRequest::set_strtargetid(std::string&& value) {
  
  strtargetid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.ImMessage.SessionRemoveRequest.strTargetId)
}
inline void ImMessage_SessionRemoveRequest::set_strtargetid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  strtargetid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.ImMessage.SessionRemoveRequest.strTargetId)
}
inline void ImMessage_SessionRemoveRequest::set_strtargetid(const char* value,
    size_t size) {
  
  strtargetid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.ImMessage.SessionRemoveRequest.strTargetId)
}
inline std::string* ImMessage_SessionRemoveRequest::_internal_mutable_strtargetid() {
  
  return strtargetid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ImMessage_SessionRemoveRequest::release_strtargetid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.ImMessage.SessionRemoveRequest.strTargetId)
  return strtargetid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImMessage_SessionRemoveRequest::set_allocated_strtargetid(std::string* strtargetid) {
  if (strtargetid != nullptr) {
    
  } else {
    
  }
  strtargetid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strtargetid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.ImMessage.SessionRemoveRequest.strTargetId)
}

// bool notCleanAllMessages = 5;
inline void ImMessage_SessionRemoveRequest::clear_notcleanallmessages() {
  notcleanallmessages_ = false;
}
inline bool ImMessage_SessionRemoveRequest::_internal_notcleanallmessages() const {
  return notcleanallmessages_;
}
inline bool ImMessage_SessionRemoveRequest::notcleanallmessages() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.SessionRemoveRequest.notCleanAllMessages)
  return _internal_notcleanallmessages();
}
inline void ImMessage_SessionRemoveRequest::_internal_set_notcleanallmessages(bool value) {
  
  notcleanallmessages_ = value;
}
inline void ImMessage_SessionRemoveRequest::set_notcleanallmessages(bool value) {
  _internal_set_notcleanallmessages(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.SessionRemoveRequest.notCleanAllMessages)
}

// -------------------------------------------------------------------

// ImMessage_SessionRemoveResponse

// -------------------------------------------------------------------

// ImMessage_SessionCleanRequest

// .AcFunDanmu.Im.ImMessage.ChatTarget chatTarget = 1;
inline bool ImMessage_SessionCleanRequest::_internal_has_chattarget() const {
  return this != internal_default_instance() && chattarget_ != nullptr;
}
inline bool ImMessage_SessionCleanRequest::has_chattarget() const {
  return _internal_has_chattarget();
}
inline void ImMessage_SessionCleanRequest::clear_chattarget() {
  if (GetArena() == nullptr && chattarget_ != nullptr) {
    delete chattarget_;
  }
  chattarget_ = nullptr;
}
inline const ::AcFunDanmu::Im::ImMessage_ChatTarget& ImMessage_SessionCleanRequest::_internal_chattarget() const {
  const ::AcFunDanmu::Im::ImMessage_ChatTarget* p = chattarget_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::ImMessage_ChatTarget&>(
      ::AcFunDanmu::Im::_ImMessage_ChatTarget_default_instance_);
}
inline const ::AcFunDanmu::Im::ImMessage_ChatTarget& ImMessage_SessionCleanRequest::chattarget() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.SessionCleanRequest.chatTarget)
  return _internal_chattarget();
}
inline void ImMessage_SessionCleanRequest::unsafe_arena_set_allocated_chattarget(
    ::AcFunDanmu::Im::ImMessage_ChatTarget* chattarget) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chattarget_);
  }
  chattarget_ = chattarget;
  if (chattarget) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.ImMessage.SessionCleanRequest.chatTarget)
}
inline ::AcFunDanmu::Im::ImMessage_ChatTarget* ImMessage_SessionCleanRequest::release_chattarget() {
  
  ::AcFunDanmu::Im::ImMessage_ChatTarget* temp = chattarget_;
  chattarget_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::ImMessage_ChatTarget* ImMessage_SessionCleanRequest::unsafe_arena_release_chattarget() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.ImMessage.SessionCleanRequest.chatTarget)
  
  ::AcFunDanmu::Im::ImMessage_ChatTarget* temp = chattarget_;
  chattarget_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::ImMessage_ChatTarget* ImMessage_SessionCleanRequest::_internal_mutable_chattarget() {
  
  if (chattarget_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_ChatTarget>(GetArena());
    chattarget_ = p;
  }
  return chattarget_;
}
inline ::AcFunDanmu::Im::ImMessage_ChatTarget* ImMessage_SessionCleanRequest::mutable_chattarget() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.SessionCleanRequest.chatTarget)
  return _internal_mutable_chattarget();
}
inline void ImMessage_SessionCleanRequest::set_allocated_chattarget(::AcFunDanmu::Im::ImMessage_ChatTarget* chattarget) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete chattarget_;
  }
  if (chattarget) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(chattarget);
    if (message_arena != submessage_arena) {
      chattarget = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chattarget, submessage_arena);
    }
    
  } else {
    
  }
  chattarget_ = chattarget;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.ImMessage.SessionCleanRequest.chatTarget)
}

// -------------------------------------------------------------------

// ImMessage_SessionCleanResponse

// -------------------------------------------------------------------

// ImMessage_MessageDeleteRequest

// int64 targetId = 1;
inline void ImMessage_MessageDeleteRequest::clear_targetid() {
  targetid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_MessageDeleteRequest::_internal_targetid() const {
  return targetid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_MessageDeleteRequest::targetid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.MessageDeleteRequest.targetId)
  return _internal_targetid();
}
inline void ImMessage_MessageDeleteRequest::_internal_set_targetid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  targetid_ = value;
}
inline void ImMessage_MessageDeleteRequest::set_targetid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_targetid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.MessageDeleteRequest.targetId)
}

// .AcFunDanmu.Im.ImMessage.ChatTargetType chatTargetType = 2;
inline void ImMessage_MessageDeleteRequest::clear_chattargettype() {
  chattargettype_ = 0;
}
inline ::AcFunDanmu::Im::ImMessage_ChatTargetType ImMessage_MessageDeleteRequest::_internal_chattargettype() const {
  return static_cast< ::AcFunDanmu::Im::ImMessage_ChatTargetType >(chattargettype_);
}
inline ::AcFunDanmu::Im::ImMessage_ChatTargetType ImMessage_MessageDeleteRequest::chattargettype() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.MessageDeleteRequest.chatTargetType)
  return _internal_chattargettype();
}
inline void ImMessage_MessageDeleteRequest::_internal_set_chattargettype(::AcFunDanmu::Im::ImMessage_ChatTargetType value) {
  
  chattargettype_ = value;
}
inline void ImMessage_MessageDeleteRequest::set_chattargettype(::AcFunDanmu::Im::ImMessage_ChatTargetType value) {
  _internal_set_chattargettype(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.MessageDeleteRequest.chatTargetType)
}

// repeated int64 seqId = 3;
inline int ImMessage_MessageDeleteRequest::_internal_seqid_size() const {
  return seqid_.size();
}
inline int ImMessage_MessageDeleteRequest::seqid_size() const {
  return _internal_seqid_size();
}
inline void ImMessage_MessageDeleteRequest::clear_seqid() {
  seqid_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_MessageDeleteRequest::_internal_seqid(int index) const {
  return seqid_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_MessageDeleteRequest::seqid(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.MessageDeleteRequest.seqId)
  return _internal_seqid(index);
}
inline void ImMessage_MessageDeleteRequest::set_seqid(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  seqid_.Set(index, value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.MessageDeleteRequest.seqId)
}
inline void ImMessage_MessageDeleteRequest::_internal_add_seqid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  seqid_.Add(value);
}
inline void ImMessage_MessageDeleteRequest::add_seqid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_seqid(value);
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.ImMessage.MessageDeleteRequest.seqId)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
ImMessage_MessageDeleteRequest::_internal_seqid() const {
  return seqid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
ImMessage_MessageDeleteRequest::seqid() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.ImMessage.MessageDeleteRequest.seqId)
  return _internal_seqid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
ImMessage_MessageDeleteRequest::_internal_mutable_seqid() {
  return &seqid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
ImMessage_MessageDeleteRequest::mutable_seqid() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.ImMessage.MessageDeleteRequest.seqId)
  return _internal_mutable_seqid();
}

// string strTargetId = 4;
inline void ImMessage_MessageDeleteRequest::clear_strtargetid() {
  strtargetid_.ClearToEmpty();
}
inline const std::string& ImMessage_MessageDeleteRequest::strtargetid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.MessageDeleteRequest.strTargetId)
  return _internal_strtargetid();
}
inline void ImMessage_MessageDeleteRequest::set_strtargetid(const std::string& value) {
  _internal_set_strtargetid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.MessageDeleteRequest.strTargetId)
}
inline std::string* ImMessage_MessageDeleteRequest::mutable_strtargetid() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.MessageDeleteRequest.strTargetId)
  return _internal_mutable_strtargetid();
}
inline const std::string& ImMessage_MessageDeleteRequest::_internal_strtargetid() const {
  return strtargetid_.Get();
}
inline void ImMessage_MessageDeleteRequest::_internal_set_strtargetid(const std::string& value) {
  
  strtargetid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ImMessage_MessageDeleteRequest::set_strtargetid(std::string&& value) {
  
  strtargetid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.ImMessage.MessageDeleteRequest.strTargetId)
}
inline void ImMessage_MessageDeleteRequest::set_strtargetid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  strtargetid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.ImMessage.MessageDeleteRequest.strTargetId)
}
inline void ImMessage_MessageDeleteRequest::set_strtargetid(const char* value,
    size_t size) {
  
  strtargetid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.ImMessage.MessageDeleteRequest.strTargetId)
}
inline std::string* ImMessage_MessageDeleteRequest::_internal_mutable_strtargetid() {
  
  return strtargetid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ImMessage_MessageDeleteRequest::release_strtargetid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.ImMessage.MessageDeleteRequest.strTargetId)
  return strtargetid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImMessage_MessageDeleteRequest::set_allocated_strtargetid(std::string* strtargetid) {
  if (strtargetid != nullptr) {
    
  } else {
    
  }
  strtargetid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strtargetid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.ImMessage.MessageDeleteRequest.strTargetId)
}

// -------------------------------------------------------------------

// ImMessage_MessageDeleteResponse

// -------------------------------------------------------------------

// ImMessage_MessageCancelRequest

// .AcFunDanmu.Im.ImMessage.ChatTarget chatTarget = 1;
inline bool ImMessage_MessageCancelRequest::_internal_has_chattarget() const {
  return this != internal_default_instance() && chattarget_ != nullptr;
}
inline bool ImMessage_MessageCancelRequest::has_chattarget() const {
  return _internal_has_chattarget();
}
inline void ImMessage_MessageCancelRequest::clear_chattarget() {
  if (GetArena() == nullptr && chattarget_ != nullptr) {
    delete chattarget_;
  }
  chattarget_ = nullptr;
}
inline const ::AcFunDanmu::Im::ImMessage_ChatTarget& ImMessage_MessageCancelRequest::_internal_chattarget() const {
  const ::AcFunDanmu::Im::ImMessage_ChatTarget* p = chattarget_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::ImMessage_ChatTarget&>(
      ::AcFunDanmu::Im::_ImMessage_ChatTarget_default_instance_);
}
inline const ::AcFunDanmu::Im::ImMessage_ChatTarget& ImMessage_MessageCancelRequest::chattarget() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.MessageCancelRequest.chatTarget)
  return _internal_chattarget();
}
inline void ImMessage_MessageCancelRequest::unsafe_arena_set_allocated_chattarget(
    ::AcFunDanmu::Im::ImMessage_ChatTarget* chattarget) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chattarget_);
  }
  chattarget_ = chattarget;
  if (chattarget) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.ImMessage.MessageCancelRequest.chatTarget)
}
inline ::AcFunDanmu::Im::ImMessage_ChatTarget* ImMessage_MessageCancelRequest::release_chattarget() {
  
  ::AcFunDanmu::Im::ImMessage_ChatTarget* temp = chattarget_;
  chattarget_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::ImMessage_ChatTarget* ImMessage_MessageCancelRequest::unsafe_arena_release_chattarget() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.ImMessage.MessageCancelRequest.chatTarget)
  
  ::AcFunDanmu::Im::ImMessage_ChatTarget* temp = chattarget_;
  chattarget_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::ImMessage_ChatTarget* ImMessage_MessageCancelRequest::_internal_mutable_chattarget() {
  
  if (chattarget_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_ChatTarget>(GetArena());
    chattarget_ = p;
  }
  return chattarget_;
}
inline ::AcFunDanmu::Im::ImMessage_ChatTarget* ImMessage_MessageCancelRequest::mutable_chattarget() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.MessageCancelRequest.chatTarget)
  return _internal_mutable_chattarget();
}
inline void ImMessage_MessageCancelRequest::set_allocated_chattarget(::AcFunDanmu::Im::ImMessage_ChatTarget* chattarget) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete chattarget_;
  }
  if (chattarget) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(chattarget);
    if (message_arena != submessage_arena) {
      chattarget = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chattarget, submessage_arena);
    }
    
  } else {
    
  }
  chattarget_ = chattarget;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.ImMessage.MessageCancelRequest.chatTarget)
}

// repeated int64 seqId = 2;
inline int ImMessage_MessageCancelRequest::_internal_seqid_size() const {
  return seqid_.size();
}
inline int ImMessage_MessageCancelRequest::seqid_size() const {
  return _internal_seqid_size();
}
inline void ImMessage_MessageCancelRequest::clear_seqid() {
  seqid_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_MessageCancelRequest::_internal_seqid(int index) const {
  return seqid_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_MessageCancelRequest::seqid(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.MessageCancelRequest.seqId)
  return _internal_seqid(index);
}
inline void ImMessage_MessageCancelRequest::set_seqid(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  seqid_.Set(index, value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.MessageCancelRequest.seqId)
}
inline void ImMessage_MessageCancelRequest::_internal_add_seqid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  seqid_.Add(value);
}
inline void ImMessage_MessageCancelRequest::add_seqid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_seqid(value);
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.ImMessage.MessageCancelRequest.seqId)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
ImMessage_MessageCancelRequest::_internal_seqid() const {
  return seqid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
ImMessage_MessageCancelRequest::seqid() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.ImMessage.MessageCancelRequest.seqId)
  return _internal_seqid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
ImMessage_MessageCancelRequest::_internal_mutable_seqid() {
  return &seqid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
ImMessage_MessageCancelRequest::mutable_seqid() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.ImMessage.MessageCancelRequest.seqId)
  return _internal_mutable_seqid();
}

// -------------------------------------------------------------------

// ImMessage_MessageCancelResponse

// -------------------------------------------------------------------

// ImMessage_MessageClearRequest

// .AcFunDanmu.Im.ImMessage.ChatTarget chatTarget = 1;
inline bool ImMessage_MessageClearRequest::_internal_has_chattarget() const {
  return this != internal_default_instance() && chattarget_ != nullptr;
}
inline bool ImMessage_MessageClearRequest::has_chattarget() const {
  return _internal_has_chattarget();
}
inline void ImMessage_MessageClearRequest::clear_chattarget() {
  if (GetArena() == nullptr && chattarget_ != nullptr) {
    delete chattarget_;
  }
  chattarget_ = nullptr;
}
inline const ::AcFunDanmu::Im::ImMessage_ChatTarget& ImMessage_MessageClearRequest::_internal_chattarget() const {
  const ::AcFunDanmu::Im::ImMessage_ChatTarget* p = chattarget_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::ImMessage_ChatTarget&>(
      ::AcFunDanmu::Im::_ImMessage_ChatTarget_default_instance_);
}
inline const ::AcFunDanmu::Im::ImMessage_ChatTarget& ImMessage_MessageClearRequest::chattarget() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.MessageClearRequest.chatTarget)
  return _internal_chattarget();
}
inline void ImMessage_MessageClearRequest::unsafe_arena_set_allocated_chattarget(
    ::AcFunDanmu::Im::ImMessage_ChatTarget* chattarget) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chattarget_);
  }
  chattarget_ = chattarget;
  if (chattarget) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.ImMessage.MessageClearRequest.chatTarget)
}
inline ::AcFunDanmu::Im::ImMessage_ChatTarget* ImMessage_MessageClearRequest::release_chattarget() {
  
  ::AcFunDanmu::Im::ImMessage_ChatTarget* temp = chattarget_;
  chattarget_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::ImMessage_ChatTarget* ImMessage_MessageClearRequest::unsafe_arena_release_chattarget() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.ImMessage.MessageClearRequest.chatTarget)
  
  ::AcFunDanmu::Im::ImMessage_ChatTarget* temp = chattarget_;
  chattarget_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::ImMessage_ChatTarget* ImMessage_MessageClearRequest::_internal_mutable_chattarget() {
  
  if (chattarget_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_ChatTarget>(GetArena());
    chattarget_ = p;
  }
  return chattarget_;
}
inline ::AcFunDanmu::Im::ImMessage_ChatTarget* ImMessage_MessageClearRequest::mutable_chattarget() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.MessageClearRequest.chatTarget)
  return _internal_mutable_chattarget();
}
inline void ImMessage_MessageClearRequest::set_allocated_chattarget(::AcFunDanmu::Im::ImMessage_ChatTarget* chattarget) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete chattarget_;
  }
  if (chattarget) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(chattarget);
    if (message_arena != submessage_arena) {
      chattarget = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chattarget, submessage_arena);
    }
    
  } else {
    
  }
  chattarget_ = chattarget;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.ImMessage.MessageClearRequest.chatTarget)
}

// -------------------------------------------------------------------

// ImMessage_MessageClearResponse

// -------------------------------------------------------------------

// ImMessage_ReadSeqInfo

// .AcFunDanmu.Im.ImMessage.ChatTarget chatTarget = 1;
inline bool ImMessage_ReadSeqInfo::_internal_has_chattarget() const {
  return this != internal_default_instance() && chattarget_ != nullptr;
}
inline bool ImMessage_ReadSeqInfo::has_chattarget() const {
  return _internal_has_chattarget();
}
inline void ImMessage_ReadSeqInfo::clear_chattarget() {
  if (GetArena() == nullptr && chattarget_ != nullptr) {
    delete chattarget_;
  }
  chattarget_ = nullptr;
}
inline const ::AcFunDanmu::Im::ImMessage_ChatTarget& ImMessage_ReadSeqInfo::_internal_chattarget() const {
  const ::AcFunDanmu::Im::ImMessage_ChatTarget* p = chattarget_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::ImMessage_ChatTarget&>(
      ::AcFunDanmu::Im::_ImMessage_ChatTarget_default_instance_);
}
inline const ::AcFunDanmu::Im::ImMessage_ChatTarget& ImMessage_ReadSeqInfo::chattarget() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.ReadSeqInfo.chatTarget)
  return _internal_chattarget();
}
inline void ImMessage_ReadSeqInfo::unsafe_arena_set_allocated_chattarget(
    ::AcFunDanmu::Im::ImMessage_ChatTarget* chattarget) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chattarget_);
  }
  chattarget_ = chattarget;
  if (chattarget) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.ImMessage.ReadSeqInfo.chatTarget)
}
inline ::AcFunDanmu::Im::ImMessage_ChatTarget* ImMessage_ReadSeqInfo::release_chattarget() {
  
  ::AcFunDanmu::Im::ImMessage_ChatTarget* temp = chattarget_;
  chattarget_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::ImMessage_ChatTarget* ImMessage_ReadSeqInfo::unsafe_arena_release_chattarget() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.ImMessage.ReadSeqInfo.chatTarget)
  
  ::AcFunDanmu::Im::ImMessage_ChatTarget* temp = chattarget_;
  chattarget_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::ImMessage_ChatTarget* ImMessage_ReadSeqInfo::_internal_mutable_chattarget() {
  
  if (chattarget_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_ChatTarget>(GetArena());
    chattarget_ = p;
  }
  return chattarget_;
}
inline ::AcFunDanmu::Im::ImMessage_ChatTarget* ImMessage_ReadSeqInfo::mutable_chattarget() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.ReadSeqInfo.chatTarget)
  return _internal_mutable_chattarget();
}
inline void ImMessage_ReadSeqInfo::set_allocated_chattarget(::AcFunDanmu::Im::ImMessage_ChatTarget* chattarget) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete chattarget_;
  }
  if (chattarget) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(chattarget);
    if (message_arena != submessage_arena) {
      chattarget = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chattarget, submessage_arena);
    }
    
  } else {
    
  }
  chattarget_ = chattarget;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.ImMessage.ReadSeqInfo.chatTarget)
}

// int64 readSeq = 2;
inline void ImMessage_ReadSeqInfo::clear_readseq() {
  readseq_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_ReadSeqInfo::_internal_readseq() const {
  return readseq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_ReadSeqInfo::readseq() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.ReadSeqInfo.readSeq)
  return _internal_readseq();
}
inline void ImMessage_ReadSeqInfo::_internal_set_readseq(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  readseq_ = value;
}
inline void ImMessage_ReadSeqInfo::set_readseq(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_readseq(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.ReadSeqInfo.readSeq)
}

// -------------------------------------------------------------------

// ImMessage_MessageReadSeqRequest

// repeated .AcFunDanmu.Im.ImMessage.ChatTarget chatTarget = 1;
inline int ImMessage_MessageReadSeqRequest::_internal_chattarget_size() const {
  return chattarget_.size();
}
inline int ImMessage_MessageReadSeqRequest::chattarget_size() const {
  return _internal_chattarget_size();
}
inline void ImMessage_MessageReadSeqRequest::clear_chattarget() {
  chattarget_.Clear();
}
inline ::AcFunDanmu::Im::ImMessage_ChatTarget* ImMessage_MessageReadSeqRequest::mutable_chattarget(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.MessageReadSeqRequest.chatTarget)
  return chattarget_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_ChatTarget >*
ImMessage_MessageReadSeqRequest::mutable_chattarget() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.ImMessage.MessageReadSeqRequest.chatTarget)
  return &chattarget_;
}
inline const ::AcFunDanmu::Im::ImMessage_ChatTarget& ImMessage_MessageReadSeqRequest::_internal_chattarget(int index) const {
  return chattarget_.Get(index);
}
inline const ::AcFunDanmu::Im::ImMessage_ChatTarget& ImMessage_MessageReadSeqRequest::chattarget(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.MessageReadSeqRequest.chatTarget)
  return _internal_chattarget(index);
}
inline ::AcFunDanmu::Im::ImMessage_ChatTarget* ImMessage_MessageReadSeqRequest::_internal_add_chattarget() {
  return chattarget_.Add();
}
inline ::AcFunDanmu::Im::ImMessage_ChatTarget* ImMessage_MessageReadSeqRequest::add_chattarget() {
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.ImMessage.MessageReadSeqRequest.chatTarget)
  return _internal_add_chattarget();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_ChatTarget >&
ImMessage_MessageReadSeqRequest::chattarget() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.ImMessage.MessageReadSeqRequest.chatTarget)
  return chattarget_;
}

// -------------------------------------------------------------------

// ImMessage_MessageReadSeqResponse

// repeated .AcFunDanmu.Im.ImMessage.ReadSeqInfo readSeqInfo = 1;
inline int ImMessage_MessageReadSeqResponse::_internal_readseqinfo_size() const {
  return readseqinfo_.size();
}
inline int ImMessage_MessageReadSeqResponse::readseqinfo_size() const {
  return _internal_readseqinfo_size();
}
inline void ImMessage_MessageReadSeqResponse::clear_readseqinfo() {
  readseqinfo_.Clear();
}
inline ::AcFunDanmu::Im::ImMessage_ReadSeqInfo* ImMessage_MessageReadSeqResponse::mutable_readseqinfo(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.MessageReadSeqResponse.readSeqInfo)
  return readseqinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_ReadSeqInfo >*
ImMessage_MessageReadSeqResponse::mutable_readseqinfo() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.ImMessage.MessageReadSeqResponse.readSeqInfo)
  return &readseqinfo_;
}
inline const ::AcFunDanmu::Im::ImMessage_ReadSeqInfo& ImMessage_MessageReadSeqResponse::_internal_readseqinfo(int index) const {
  return readseqinfo_.Get(index);
}
inline const ::AcFunDanmu::Im::ImMessage_ReadSeqInfo& ImMessage_MessageReadSeqResponse::readseqinfo(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.MessageReadSeqResponse.readSeqInfo)
  return _internal_readseqinfo(index);
}
inline ::AcFunDanmu::Im::ImMessage_ReadSeqInfo* ImMessage_MessageReadSeqResponse::_internal_add_readseqinfo() {
  return readseqinfo_.Add();
}
inline ::AcFunDanmu::Im::ImMessage_ReadSeqInfo* ImMessage_MessageReadSeqResponse::add_readseqinfo() {
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.ImMessage.MessageReadSeqResponse.readSeqInfo)
  return _internal_add_readseqinfo();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_ReadSeqInfo >&
ImMessage_MessageReadSeqResponse::readseqinfo() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.ImMessage.MessageReadSeqResponse.readSeqInfo)
  return readseqinfo_;
}

// -------------------------------------------------------------------

// ImMessage_MessageReadPush

// int64 targetId = 1;
inline void ImMessage_MessageReadPush::clear_targetid() {
  targetid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_MessageReadPush::_internal_targetid() const {
  return targetid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_MessageReadPush::targetid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.MessageReadPush.targetId)
  return _internal_targetid();
}
inline void ImMessage_MessageReadPush::_internal_set_targetid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  targetid_ = value;
}
inline void ImMessage_MessageReadPush::set_targetid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_targetid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.MessageReadPush.targetId)
}

// int64 readSeq = 2;
inline void ImMessage_MessageReadPush::clear_readseq() {
  readseq_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_MessageReadPush::_internal_readseq() const {
  return readseq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_MessageReadPush::readseq() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.MessageReadPush.readSeq)
  return _internal_readseq();
}
inline void ImMessage_MessageReadPush::_internal_set_readseq(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  readseq_ = value;
}
inline void ImMessage_MessageReadPush::set_readseq(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_readseq(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.MessageReadPush.readSeq)
}

// .AcFunDanmu.Im.ImMessage.ChatTargetType chatTargetType = 3;
inline void ImMessage_MessageReadPush::clear_chattargettype() {
  chattargettype_ = 0;
}
inline ::AcFunDanmu::Im::ImMessage_ChatTargetType ImMessage_MessageReadPush::_internal_chattargettype() const {
  return static_cast< ::AcFunDanmu::Im::ImMessage_ChatTargetType >(chattargettype_);
}
inline ::AcFunDanmu::Im::ImMessage_ChatTargetType ImMessage_MessageReadPush::chattargettype() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.MessageReadPush.chatTargetType)
  return _internal_chattargettype();
}
inline void ImMessage_MessageReadPush::_internal_set_chattargettype(::AcFunDanmu::Im::ImMessage_ChatTargetType value) {
  
  chattargettype_ = value;
}
inline void ImMessage_MessageReadPush::set_chattargettype(::AcFunDanmu::Im::ImMessage_ChatTargetType value) {
  _internal_set_chattargettype(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.MessageReadPush.chatTargetType)
}

// string strTargetId = 4;
inline void ImMessage_MessageReadPush::clear_strtargetid() {
  strtargetid_.ClearToEmpty();
}
inline const std::string& ImMessage_MessageReadPush::strtargetid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.MessageReadPush.strTargetId)
  return _internal_strtargetid();
}
inline void ImMessage_MessageReadPush::set_strtargetid(const std::string& value) {
  _internal_set_strtargetid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.MessageReadPush.strTargetId)
}
inline std::string* ImMessage_MessageReadPush::mutable_strtargetid() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.MessageReadPush.strTargetId)
  return _internal_mutable_strtargetid();
}
inline const std::string& ImMessage_MessageReadPush::_internal_strtargetid() const {
  return strtargetid_.Get();
}
inline void ImMessage_MessageReadPush::_internal_set_strtargetid(const std::string& value) {
  
  strtargetid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ImMessage_MessageReadPush::set_strtargetid(std::string&& value) {
  
  strtargetid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.ImMessage.MessageReadPush.strTargetId)
}
inline void ImMessage_MessageReadPush::set_strtargetid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  strtargetid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.ImMessage.MessageReadPush.strTargetId)
}
inline void ImMessage_MessageReadPush::set_strtargetid(const char* value,
    size_t size) {
  
  strtargetid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.ImMessage.MessageReadPush.strTargetId)
}
inline std::string* ImMessage_MessageReadPush::_internal_mutable_strtargetid() {
  
  return strtargetid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ImMessage_MessageReadPush::release_strtargetid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.ImMessage.MessageReadPush.strTargetId)
  return strtargetid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImMessage_MessageReadPush::set_allocated_strtargetid(std::string* strtargetid) {
  if (strtargetid != nullptr) {
    
  } else {
    
  }
  strtargetid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strtargetid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.ImMessage.MessageReadPush.strTargetId)
}

// -------------------------------------------------------------------

// ImMessage_AllUnreadCountRequest

// -------------------------------------------------------------------

// ImMessage_AllUnreadCountResponse

// int32 allUnreadCount = 1;
inline void ImMessage_AllUnreadCountResponse::clear_allunreadcount() {
  allunreadcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_AllUnreadCountResponse::_internal_allunreadcount() const {
  return allunreadcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_AllUnreadCountResponse::allunreadcount() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.AllUnreadCountResponse.allUnreadCount)
  return _internal_allunreadcount();
}
inline void ImMessage_AllUnreadCountResponse::_internal_set_allunreadcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  allunreadcount_ = value;
}
inline void ImMessage_AllUnreadCountResponse::set_allunreadcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_allunreadcount(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.AllUnreadCountResponse.allUnreadCount)
}

// -------------------------------------------------------------------

// ImMessage_MessageReadAllRequest

// int32 sessionCategoryId = 1;
inline void ImMessage_MessageReadAllRequest::clear_sessioncategoryid() {
  sessioncategoryid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_MessageReadAllRequest::_internal_sessioncategoryid() const {
  return sessioncategoryid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_MessageReadAllRequest::sessioncategoryid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.MessageReadAllRequest.sessionCategoryId)
  return _internal_sessioncategoryid();
}
inline void ImMessage_MessageReadAllRequest::_internal_set_sessioncategoryid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sessioncategoryid_ = value;
}
inline void ImMessage_MessageReadAllRequest::set_sessioncategoryid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sessioncategoryid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.MessageReadAllRequest.sessionCategoryId)
}

// -------------------------------------------------------------------

// ImMessage_MessageReadAllResponse

// int64 readAllTimestamp = 1;
inline void ImMessage_MessageReadAllResponse::clear_readalltimestamp() {
  readalltimestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_MessageReadAllResponse::_internal_readalltimestamp() const {
  return readalltimestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_MessageReadAllResponse::readalltimestamp() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.MessageReadAllResponse.readAllTimestamp)
  return _internal_readalltimestamp();
}
inline void ImMessage_MessageReadAllResponse::_internal_set_readalltimestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  readalltimestamp_ = value;
}
inline void ImMessage_MessageReadAllResponse::set_readalltimestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_readalltimestamp(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.MessageReadAllResponse.readAllTimestamp)
}

// -------------------------------------------------------------------

// ImMessage_SesionStickyOnTopRequest

// .AcFunDanmu.Im.ImMessage.ChatTarget chatTarget = 1;
inline bool ImMessage_SesionStickyOnTopRequest::_internal_has_chattarget() const {
  return this != internal_default_instance() && chattarget_ != nullptr;
}
inline bool ImMessage_SesionStickyOnTopRequest::has_chattarget() const {
  return _internal_has_chattarget();
}
inline void ImMessage_SesionStickyOnTopRequest::clear_chattarget() {
  if (GetArena() == nullptr && chattarget_ != nullptr) {
    delete chattarget_;
  }
  chattarget_ = nullptr;
}
inline const ::AcFunDanmu::Im::ImMessage_ChatTarget& ImMessage_SesionStickyOnTopRequest::_internal_chattarget() const {
  const ::AcFunDanmu::Im::ImMessage_ChatTarget* p = chattarget_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::ImMessage_ChatTarget&>(
      ::AcFunDanmu::Im::_ImMessage_ChatTarget_default_instance_);
}
inline const ::AcFunDanmu::Im::ImMessage_ChatTarget& ImMessage_SesionStickyOnTopRequest::chattarget() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.SesionStickyOnTopRequest.chatTarget)
  return _internal_chattarget();
}
inline void ImMessage_SesionStickyOnTopRequest::unsafe_arena_set_allocated_chattarget(
    ::AcFunDanmu::Im::ImMessage_ChatTarget* chattarget) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chattarget_);
  }
  chattarget_ = chattarget;
  if (chattarget) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.ImMessage.SesionStickyOnTopRequest.chatTarget)
}
inline ::AcFunDanmu::Im::ImMessage_ChatTarget* ImMessage_SesionStickyOnTopRequest::release_chattarget() {
  
  ::AcFunDanmu::Im::ImMessage_ChatTarget* temp = chattarget_;
  chattarget_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::ImMessage_ChatTarget* ImMessage_SesionStickyOnTopRequest::unsafe_arena_release_chattarget() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.ImMessage.SesionStickyOnTopRequest.chatTarget)
  
  ::AcFunDanmu::Im::ImMessage_ChatTarget* temp = chattarget_;
  chattarget_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::ImMessage_ChatTarget* ImMessage_SesionStickyOnTopRequest::_internal_mutable_chattarget() {
  
  if (chattarget_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_ChatTarget>(GetArena());
    chattarget_ = p;
  }
  return chattarget_;
}
inline ::AcFunDanmu::Im::ImMessage_ChatTarget* ImMessage_SesionStickyOnTopRequest::mutable_chattarget() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.SesionStickyOnTopRequest.chatTarget)
  return _internal_mutable_chattarget();
}
inline void ImMessage_SesionStickyOnTopRequest::set_allocated_chattarget(::AcFunDanmu::Im::ImMessage_ChatTarget* chattarget) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete chattarget_;
  }
  if (chattarget) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(chattarget);
    if (message_arena != submessage_arena) {
      chattarget = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chattarget, submessage_arena);
    }
    
  } else {
    
  }
  chattarget_ = chattarget;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.ImMessage.SesionStickyOnTopRequest.chatTarget)
}

// bool stickyOnTop = 2;
inline void ImMessage_SesionStickyOnTopRequest::clear_stickyontop() {
  stickyontop_ = false;
}
inline bool ImMessage_SesionStickyOnTopRequest::_internal_stickyontop() const {
  return stickyontop_;
}
inline bool ImMessage_SesionStickyOnTopRequest::stickyontop() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.SesionStickyOnTopRequest.stickyOnTop)
  return _internal_stickyontop();
}
inline void ImMessage_SesionStickyOnTopRequest::_internal_set_stickyontop(bool value) {
  
  stickyontop_ = value;
}
inline void ImMessage_SesionStickyOnTopRequest::set_stickyontop(bool value) {
  _internal_set_stickyontop(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.SesionStickyOnTopRequest.stickyOnTop)
}

// -------------------------------------------------------------------

// ImMessage_SessionStickyOnTopResponse

// .AcFunDanmu.Im.ImMessage.ChatSession session = 1;
inline bool ImMessage_SessionStickyOnTopResponse::_internal_has_session() const {
  return this != internal_default_instance() && session_ != nullptr;
}
inline bool ImMessage_SessionStickyOnTopResponse::has_session() const {
  return _internal_has_session();
}
inline void ImMessage_SessionStickyOnTopResponse::clear_session() {
  if (GetArena() == nullptr && session_ != nullptr) {
    delete session_;
  }
  session_ = nullptr;
}
inline const ::AcFunDanmu::Im::ImMessage_ChatSession& ImMessage_SessionStickyOnTopResponse::_internal_session() const {
  const ::AcFunDanmu::Im::ImMessage_ChatSession* p = session_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::ImMessage_ChatSession&>(
      ::AcFunDanmu::Im::_ImMessage_ChatSession_default_instance_);
}
inline const ::AcFunDanmu::Im::ImMessage_ChatSession& ImMessage_SessionStickyOnTopResponse::session() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.SessionStickyOnTopResponse.session)
  return _internal_session();
}
inline void ImMessage_SessionStickyOnTopResponse::unsafe_arena_set_allocated_session(
    ::AcFunDanmu::Im::ImMessage_ChatSession* session) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(session_);
  }
  session_ = session;
  if (session) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.ImMessage.SessionStickyOnTopResponse.session)
}
inline ::AcFunDanmu::Im::ImMessage_ChatSession* ImMessage_SessionStickyOnTopResponse::release_session() {
  
  ::AcFunDanmu::Im::ImMessage_ChatSession* temp = session_;
  session_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::ImMessage_ChatSession* ImMessage_SessionStickyOnTopResponse::unsafe_arena_release_session() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.ImMessage.SessionStickyOnTopResponse.session)
  
  ::AcFunDanmu::Im::ImMessage_ChatSession* temp = session_;
  session_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::ImMessage_ChatSession* ImMessage_SessionStickyOnTopResponse::_internal_mutable_session() {
  
  if (session_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_ChatSession>(GetArena());
    session_ = p;
  }
  return session_;
}
inline ::AcFunDanmu::Im::ImMessage_ChatSession* ImMessage_SessionStickyOnTopResponse::mutable_session() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.SessionStickyOnTopResponse.session)
  return _internal_mutable_session();
}
inline void ImMessage_SessionStickyOnTopResponse::set_allocated_session(::AcFunDanmu::Im::ImMessage_ChatSession* session) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete session_;
  }
  if (session) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(session);
    if (message_arena != submessage_arena) {
      session = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, session, submessage_arena);
    }
    
  } else {
    
  }
  session_ = session;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.ImMessage.SessionStickyOnTopResponse.session)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ImMessage_SessionRaw

// map<string, bytes> raw = 1;
inline int ImMessage_SessionRaw::_internal_raw_size() const {
  return raw_.size();
}
inline int ImMessage_SessionRaw::raw_size() const {
  return _internal_raw_size();
}
inline void ImMessage_SessionRaw::clear_raw() {
  raw_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ImMessage_SessionRaw::_internal_raw() const {
  return raw_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ImMessage_SessionRaw::raw() const {
  // @@protoc_insertion_point(field_map:AcFunDanmu.Im.ImMessage.SessionRaw.raw)
  return _internal_raw();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ImMessage_SessionRaw::_internal_mutable_raw() {
  return raw_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ImMessage_SessionRaw::mutable_raw() {
  // @@protoc_insertion_point(field_mutable_map:AcFunDanmu.Im.ImMessage.SessionRaw.raw)
  return _internal_mutable_raw();
}

// -------------------------------------------------------------------

// ImMessage_MessageRecallRequest

// .AcFunDanmu.Im.ImMessage.ChatTarget chatTarget = 1;
inline bool ImMessage_MessageRecallRequest::_internal_has_chattarget() const {
  return this != internal_default_instance() && chattarget_ != nullptr;
}
inline bool ImMessage_MessageRecallRequest::has_chattarget() const {
  return _internal_has_chattarget();
}
inline void ImMessage_MessageRecallRequest::clear_chattarget() {
  if (GetArena() == nullptr && chattarget_ != nullptr) {
    delete chattarget_;
  }
  chattarget_ = nullptr;
}
inline const ::AcFunDanmu::Im::ImMessage_ChatTarget& ImMessage_MessageRecallRequest::_internal_chattarget() const {
  const ::AcFunDanmu::Im::ImMessage_ChatTarget* p = chattarget_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::ImMessage_ChatTarget&>(
      ::AcFunDanmu::Im::_ImMessage_ChatTarget_default_instance_);
}
inline const ::AcFunDanmu::Im::ImMessage_ChatTarget& ImMessage_MessageRecallRequest::chattarget() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.MessageRecallRequest.chatTarget)
  return _internal_chattarget();
}
inline void ImMessage_MessageRecallRequest::unsafe_arena_set_allocated_chattarget(
    ::AcFunDanmu::Im::ImMessage_ChatTarget* chattarget) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chattarget_);
  }
  chattarget_ = chattarget;
  if (chattarget) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.ImMessage.MessageRecallRequest.chatTarget)
}
inline ::AcFunDanmu::Im::ImMessage_ChatTarget* ImMessage_MessageRecallRequest::release_chattarget() {
  
  ::AcFunDanmu::Im::ImMessage_ChatTarget* temp = chattarget_;
  chattarget_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::ImMessage_ChatTarget* ImMessage_MessageRecallRequest::unsafe_arena_release_chattarget() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.ImMessage.MessageRecallRequest.chatTarget)
  
  ::AcFunDanmu::Im::ImMessage_ChatTarget* temp = chattarget_;
  chattarget_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::ImMessage_ChatTarget* ImMessage_MessageRecallRequest::_internal_mutable_chattarget() {
  
  if (chattarget_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_ChatTarget>(GetArena());
    chattarget_ = p;
  }
  return chattarget_;
}
inline ::AcFunDanmu::Im::ImMessage_ChatTarget* ImMessage_MessageRecallRequest::mutable_chattarget() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.MessageRecallRequest.chatTarget)
  return _internal_mutable_chattarget();
}
inline void ImMessage_MessageRecallRequest::set_allocated_chattarget(::AcFunDanmu::Im::ImMessage_ChatTarget* chattarget) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete chattarget_;
  }
  if (chattarget) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(chattarget);
    if (message_arena != submessage_arena) {
      chattarget = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chattarget, submessage_arena);
    }
    
  } else {
    
  }
  chattarget_ = chattarget;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.ImMessage.MessageRecallRequest.chatTarget)
}

// int64 seqId = 2;
inline void ImMessage_MessageRecallRequest::clear_seqid() {
  seqid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_MessageRecallRequest::_internal_seqid() const {
  return seqid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_MessageRecallRequest::seqid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.MessageRecallRequest.seqId)
  return _internal_seqid();
}
inline void ImMessage_MessageRecallRequest::_internal_set_seqid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  seqid_ = value;
}
inline void ImMessage_MessageRecallRequest::set_seqid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_seqid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.MessageRecallRequest.seqId)
}

// -------------------------------------------------------------------

// ImMessage_MessageRecallResponse

// -------------------------------------------------------------------

// ImMessage_MessageReceiptRequest

// repeated .AcFunDanmu.Im.ImMessage.MessageReceiptInfo messageReceiptInfo = 1;
inline int ImMessage_MessageReceiptRequest::_internal_messagereceiptinfo_size() const {
  return messagereceiptinfo_.size();
}
inline int ImMessage_MessageReceiptRequest::messagereceiptinfo_size() const {
  return _internal_messagereceiptinfo_size();
}
inline void ImMessage_MessageReceiptRequest::clear_messagereceiptinfo() {
  messagereceiptinfo_.Clear();
}
inline ::AcFunDanmu::Im::ImMessage_MessageReceiptInfo* ImMessage_MessageReceiptRequest::mutable_messagereceiptinfo(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.MessageReceiptRequest.messageReceiptInfo)
  return messagereceiptinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_MessageReceiptInfo >*
ImMessage_MessageReceiptRequest::mutable_messagereceiptinfo() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.ImMessage.MessageReceiptRequest.messageReceiptInfo)
  return &messagereceiptinfo_;
}
inline const ::AcFunDanmu::Im::ImMessage_MessageReceiptInfo& ImMessage_MessageReceiptRequest::_internal_messagereceiptinfo(int index) const {
  return messagereceiptinfo_.Get(index);
}
inline const ::AcFunDanmu::Im::ImMessage_MessageReceiptInfo& ImMessage_MessageReceiptRequest::messagereceiptinfo(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.MessageReceiptRequest.messageReceiptInfo)
  return _internal_messagereceiptinfo(index);
}
inline ::AcFunDanmu::Im::ImMessage_MessageReceiptInfo* ImMessage_MessageReceiptRequest::_internal_add_messagereceiptinfo() {
  return messagereceiptinfo_.Add();
}
inline ::AcFunDanmu::Im::ImMessage_MessageReceiptInfo* ImMessage_MessageReceiptRequest::add_messagereceiptinfo() {
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.ImMessage.MessageReceiptRequest.messageReceiptInfo)
  return _internal_add_messagereceiptinfo();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_MessageReceiptInfo >&
ImMessage_MessageReceiptRequest::messagereceiptinfo() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.ImMessage.MessageReceiptRequest.messageReceiptInfo)
  return messagereceiptinfo_;
}

// .AcFunDanmu.Im.ImMessage.ChatTarget chatTarget = 2;
inline bool ImMessage_MessageReceiptRequest::_internal_has_chattarget() const {
  return this != internal_default_instance() && chattarget_ != nullptr;
}
inline bool ImMessage_MessageReceiptRequest::has_chattarget() const {
  return _internal_has_chattarget();
}
inline void ImMessage_MessageReceiptRequest::clear_chattarget() {
  if (GetArena() == nullptr && chattarget_ != nullptr) {
    delete chattarget_;
  }
  chattarget_ = nullptr;
}
inline const ::AcFunDanmu::Im::ImMessage_ChatTarget& ImMessage_MessageReceiptRequest::_internal_chattarget() const {
  const ::AcFunDanmu::Im::ImMessage_ChatTarget* p = chattarget_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::ImMessage_ChatTarget&>(
      ::AcFunDanmu::Im::_ImMessage_ChatTarget_default_instance_);
}
inline const ::AcFunDanmu::Im::ImMessage_ChatTarget& ImMessage_MessageReceiptRequest::chattarget() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.MessageReceiptRequest.chatTarget)
  return _internal_chattarget();
}
inline void ImMessage_MessageReceiptRequest::unsafe_arena_set_allocated_chattarget(
    ::AcFunDanmu::Im::ImMessage_ChatTarget* chattarget) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chattarget_);
  }
  chattarget_ = chattarget;
  if (chattarget) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.ImMessage.MessageReceiptRequest.chatTarget)
}
inline ::AcFunDanmu::Im::ImMessage_ChatTarget* ImMessage_MessageReceiptRequest::release_chattarget() {
  
  ::AcFunDanmu::Im::ImMessage_ChatTarget* temp = chattarget_;
  chattarget_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::ImMessage_ChatTarget* ImMessage_MessageReceiptRequest::unsafe_arena_release_chattarget() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.ImMessage.MessageReceiptRequest.chatTarget)
  
  ::AcFunDanmu::Im::ImMessage_ChatTarget* temp = chattarget_;
  chattarget_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::ImMessage_ChatTarget* ImMessage_MessageReceiptRequest::_internal_mutable_chattarget() {
  
  if (chattarget_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_ChatTarget>(GetArena());
    chattarget_ = p;
  }
  return chattarget_;
}
inline ::AcFunDanmu::Im::ImMessage_ChatTarget* ImMessage_MessageReceiptRequest::mutable_chattarget() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.MessageReceiptRequest.chatTarget)
  return _internal_mutable_chattarget();
}
inline void ImMessage_MessageReceiptRequest::set_allocated_chattarget(::AcFunDanmu::Im::ImMessage_ChatTarget* chattarget) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete chattarget_;
  }
  if (chattarget) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(chattarget);
    if (message_arena != submessage_arena) {
      chattarget = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chattarget, submessage_arena);
    }
    
  } else {
    
  }
  chattarget_ = chattarget;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.ImMessage.MessageReceiptRequest.chatTarget)
}

// -------------------------------------------------------------------

// ImMessage_MessageReceiptResponse

// -------------------------------------------------------------------

// ImMessage_MessageReceiptInfo

// int64 readSeq = 1;
inline void ImMessage_MessageReceiptInfo::clear_readseq() {
  readseq_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_MessageReceiptInfo::_internal_readseq() const {
  return readseq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_MessageReceiptInfo::readseq() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.MessageReceiptInfo.readSeq)
  return _internal_readseq();
}
inline void ImMessage_MessageReceiptInfo::_internal_set_readseq(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  readseq_ = value;
}
inline void ImMessage_MessageReceiptInfo::set_readseq(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_readseq(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.MessageReceiptInfo.readSeq)
}

// -------------------------------------------------------------------

// ImMessage_MessageReceiptCountGetRequest

// repeated int64 seqId = 1;
inline int ImMessage_MessageReceiptCountGetRequest::_internal_seqid_size() const {
  return seqid_.size();
}
inline int ImMessage_MessageReceiptCountGetRequest::seqid_size() const {
  return _internal_seqid_size();
}
inline void ImMessage_MessageReceiptCountGetRequest::clear_seqid() {
  seqid_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_MessageReceiptCountGetRequest::_internal_seqid(int index) const {
  return seqid_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_MessageReceiptCountGetRequest::seqid(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.MessageReceiptCountGetRequest.seqId)
  return _internal_seqid(index);
}
inline void ImMessage_MessageReceiptCountGetRequest::set_seqid(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  seqid_.Set(index, value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.MessageReceiptCountGetRequest.seqId)
}
inline void ImMessage_MessageReceiptCountGetRequest::_internal_add_seqid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  seqid_.Add(value);
}
inline void ImMessage_MessageReceiptCountGetRequest::add_seqid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_seqid(value);
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.ImMessage.MessageReceiptCountGetRequest.seqId)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
ImMessage_MessageReceiptCountGetRequest::_internal_seqid() const {
  return seqid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
ImMessage_MessageReceiptCountGetRequest::seqid() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.ImMessage.MessageReceiptCountGetRequest.seqId)
  return _internal_seqid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
ImMessage_MessageReceiptCountGetRequest::_internal_mutable_seqid() {
  return &seqid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
ImMessage_MessageReceiptCountGetRequest::mutable_seqid() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.ImMessage.MessageReceiptCountGetRequest.seqId)
  return _internal_mutable_seqid();
}

// .AcFunDanmu.Im.ImMessage.ChatTarget chatTarget = 2;
inline bool ImMessage_MessageReceiptCountGetRequest::_internal_has_chattarget() const {
  return this != internal_default_instance() && chattarget_ != nullptr;
}
inline bool ImMessage_MessageReceiptCountGetRequest::has_chattarget() const {
  return _internal_has_chattarget();
}
inline void ImMessage_MessageReceiptCountGetRequest::clear_chattarget() {
  if (GetArena() == nullptr && chattarget_ != nullptr) {
    delete chattarget_;
  }
  chattarget_ = nullptr;
}
inline const ::AcFunDanmu::Im::ImMessage_ChatTarget& ImMessage_MessageReceiptCountGetRequest::_internal_chattarget() const {
  const ::AcFunDanmu::Im::ImMessage_ChatTarget* p = chattarget_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::ImMessage_ChatTarget&>(
      ::AcFunDanmu::Im::_ImMessage_ChatTarget_default_instance_);
}
inline const ::AcFunDanmu::Im::ImMessage_ChatTarget& ImMessage_MessageReceiptCountGetRequest::chattarget() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.MessageReceiptCountGetRequest.chatTarget)
  return _internal_chattarget();
}
inline void ImMessage_MessageReceiptCountGetRequest::unsafe_arena_set_allocated_chattarget(
    ::AcFunDanmu::Im::ImMessage_ChatTarget* chattarget) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chattarget_);
  }
  chattarget_ = chattarget;
  if (chattarget) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.ImMessage.MessageReceiptCountGetRequest.chatTarget)
}
inline ::AcFunDanmu::Im::ImMessage_ChatTarget* ImMessage_MessageReceiptCountGetRequest::release_chattarget() {
  
  ::AcFunDanmu::Im::ImMessage_ChatTarget* temp = chattarget_;
  chattarget_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::ImMessage_ChatTarget* ImMessage_MessageReceiptCountGetRequest::unsafe_arena_release_chattarget() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.ImMessage.MessageReceiptCountGetRequest.chatTarget)
  
  ::AcFunDanmu::Im::ImMessage_ChatTarget* temp = chattarget_;
  chattarget_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::ImMessage_ChatTarget* ImMessage_MessageReceiptCountGetRequest::_internal_mutable_chattarget() {
  
  if (chattarget_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_ChatTarget>(GetArena());
    chattarget_ = p;
  }
  return chattarget_;
}
inline ::AcFunDanmu::Im::ImMessage_ChatTarget* ImMessage_MessageReceiptCountGetRequest::mutable_chattarget() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.MessageReceiptCountGetRequest.chatTarget)
  return _internal_mutable_chattarget();
}
inline void ImMessage_MessageReceiptCountGetRequest::set_allocated_chattarget(::AcFunDanmu::Im::ImMessage_ChatTarget* chattarget) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete chattarget_;
  }
  if (chattarget) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(chattarget);
    if (message_arena != submessage_arena) {
      chattarget = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chattarget, submessage_arena);
    }
    
  } else {
    
  }
  chattarget_ = chattarget;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.ImMessage.MessageReceiptCountGetRequest.chatTarget)
}

// -------------------------------------------------------------------

// ImMessage_MessageReceiptCountGetResponse

// repeated .AcFunDanmu.Im.ImMessage.MessageReceiptStatus status = 1;
inline int ImMessage_MessageReceiptCountGetResponse::_internal_status_size() const {
  return status_.size();
}
inline int ImMessage_MessageReceiptCountGetResponse::status_size() const {
  return _internal_status_size();
}
inline void ImMessage_MessageReceiptCountGetResponse::clear_status() {
  status_.Clear();
}
inline ::AcFunDanmu::Im::ImMessage_MessageReceiptStatus* ImMessage_MessageReceiptCountGetResponse::mutable_status(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.MessageReceiptCountGetResponse.status)
  return status_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_MessageReceiptStatus >*
ImMessage_MessageReceiptCountGetResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.ImMessage.MessageReceiptCountGetResponse.status)
  return &status_;
}
inline const ::AcFunDanmu::Im::ImMessage_MessageReceiptStatus& ImMessage_MessageReceiptCountGetResponse::_internal_status(int index) const {
  return status_.Get(index);
}
inline const ::AcFunDanmu::Im::ImMessage_MessageReceiptStatus& ImMessage_MessageReceiptCountGetResponse::status(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.MessageReceiptCountGetResponse.status)
  return _internal_status(index);
}
inline ::AcFunDanmu::Im::ImMessage_MessageReceiptStatus* ImMessage_MessageReceiptCountGetResponse::_internal_add_status() {
  return status_.Add();
}
inline ::AcFunDanmu::Im::ImMessage_MessageReceiptStatus* ImMessage_MessageReceiptCountGetResponse::add_status() {
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.ImMessage.MessageReceiptCountGetResponse.status)
  return _internal_add_status();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_MessageReceiptStatus >&
ImMessage_MessageReceiptCountGetResponse::status() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.ImMessage.MessageReceiptCountGetResponse.status)
  return status_;
}

// -------------------------------------------------------------------

// ImMessage_MessageReceiptStatus

// int32 readCount = 1;
inline void ImMessage_MessageReceiptStatus::clear_readcount() {
  readcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_MessageReceiptStatus::_internal_readcount() const {
  return readcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_MessageReceiptStatus::readcount() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.MessageReceiptStatus.readCount)
  return _internal_readcount();
}
inline void ImMessage_MessageReceiptStatus::_internal_set_readcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  readcount_ = value;
}
inline void ImMessage_MessageReceiptStatus::set_readcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_readcount(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.MessageReceiptStatus.readCount)
}

// int32 unreadCount = 2;
inline void ImMessage_MessageReceiptStatus::clear_unreadcount() {
  unreadcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_MessageReceiptStatus::_internal_unreadcount() const {
  return unreadcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_MessageReceiptStatus::unreadcount() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.MessageReceiptStatus.unreadCount)
  return _internal_unreadcount();
}
inline void ImMessage_MessageReceiptStatus::_internal_set_unreadcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  unreadcount_ = value;
}
inline void ImMessage_MessageReceiptStatus::set_unreadcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_unreadcount(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.MessageReceiptStatus.unreadCount)
}

// int64 seqId = 3;
inline void ImMessage_MessageReceiptStatus::clear_seqid() {
  seqid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_MessageReceiptStatus::_internal_seqid() const {
  return seqid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_MessageReceiptStatus::seqid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.MessageReceiptStatus.seqId)
  return _internal_seqid();
}
inline void ImMessage_MessageReceiptStatus::_internal_set_seqid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  seqid_ = value;
}
inline void ImMessage_MessageReceiptStatus::set_seqid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_seqid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.MessageReceiptStatus.seqId)
}

// int64 serverTime = 4;
inline void ImMessage_MessageReceiptStatus::clear_servertime() {
  servertime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_MessageReceiptStatus::_internal_servertime() const {
  return servertime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_MessageReceiptStatus::servertime() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.MessageReceiptStatus.serverTime)
  return _internal_servertime();
}
inline void ImMessage_MessageReceiptStatus::_internal_set_servertime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  servertime_ = value;
}
inline void ImMessage_MessageReceiptStatus::set_servertime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_servertime(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.MessageReceiptStatus.serverTime)
}

// -------------------------------------------------------------------

// ImMessage_MessageReceiptDetailGetRequest

// int64 seqId = 1;
inline void ImMessage_MessageReceiptDetailGetRequest::clear_seqid() {
  seqid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_MessageReceiptDetailGetRequest::_internal_seqid() const {
  return seqid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_MessageReceiptDetailGetRequest::seqid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.MessageReceiptDetailGetRequest.seqId)
  return _internal_seqid();
}
inline void ImMessage_MessageReceiptDetailGetRequest::_internal_set_seqid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  seqid_ = value;
}
inline void ImMessage_MessageReceiptDetailGetRequest::set_seqid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_seqid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.MessageReceiptDetailGetRequest.seqId)
}

// .AcFunDanmu.Im.ImMessage.ChatTarget chatTarget = 2;
inline bool ImMessage_MessageReceiptDetailGetRequest::_internal_has_chattarget() const {
  return this != internal_default_instance() && chattarget_ != nullptr;
}
inline bool ImMessage_MessageReceiptDetailGetRequest::has_chattarget() const {
  return _internal_has_chattarget();
}
inline void ImMessage_MessageReceiptDetailGetRequest::clear_chattarget() {
  if (GetArena() == nullptr && chattarget_ != nullptr) {
    delete chattarget_;
  }
  chattarget_ = nullptr;
}
inline const ::AcFunDanmu::Im::ImMessage_ChatTarget& ImMessage_MessageReceiptDetailGetRequest::_internal_chattarget() const {
  const ::AcFunDanmu::Im::ImMessage_ChatTarget* p = chattarget_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::ImMessage_ChatTarget&>(
      ::AcFunDanmu::Im::_ImMessage_ChatTarget_default_instance_);
}
inline const ::AcFunDanmu::Im::ImMessage_ChatTarget& ImMessage_MessageReceiptDetailGetRequest::chattarget() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.MessageReceiptDetailGetRequest.chatTarget)
  return _internal_chattarget();
}
inline void ImMessage_MessageReceiptDetailGetRequest::unsafe_arena_set_allocated_chattarget(
    ::AcFunDanmu::Im::ImMessage_ChatTarget* chattarget) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chattarget_);
  }
  chattarget_ = chattarget;
  if (chattarget) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.ImMessage.MessageReceiptDetailGetRequest.chatTarget)
}
inline ::AcFunDanmu::Im::ImMessage_ChatTarget* ImMessage_MessageReceiptDetailGetRequest::release_chattarget() {
  
  ::AcFunDanmu::Im::ImMessage_ChatTarget* temp = chattarget_;
  chattarget_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::ImMessage_ChatTarget* ImMessage_MessageReceiptDetailGetRequest::unsafe_arena_release_chattarget() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.ImMessage.MessageReceiptDetailGetRequest.chatTarget)
  
  ::AcFunDanmu::Im::ImMessage_ChatTarget* temp = chattarget_;
  chattarget_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::ImMessage_ChatTarget* ImMessage_MessageReceiptDetailGetRequest::_internal_mutable_chattarget() {
  
  if (chattarget_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_ChatTarget>(GetArena());
    chattarget_ = p;
  }
  return chattarget_;
}
inline ::AcFunDanmu::Im::ImMessage_ChatTarget* ImMessage_MessageReceiptDetailGetRequest::mutable_chattarget() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.MessageReceiptDetailGetRequest.chatTarget)
  return _internal_mutable_chattarget();
}
inline void ImMessage_MessageReceiptDetailGetRequest::set_allocated_chattarget(::AcFunDanmu::Im::ImMessage_ChatTarget* chattarget) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete chattarget_;
  }
  if (chattarget) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(chattarget);
    if (message_arena != submessage_arena) {
      chattarget = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chattarget, submessage_arena);
    }
    
  } else {
    
  }
  chattarget_ = chattarget;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.ImMessage.MessageReceiptDetailGetRequest.chatTarget)
}

// -------------------------------------------------------------------

// ImMessage_MessageReceiptDetailGetResponse

// repeated .AcFunDanmu.Im.Basic.User readUser = 1;
inline int ImMessage_MessageReceiptDetailGetResponse::_internal_readuser_size() const {
  return readuser_.size();
}
inline int ImMessage_MessageReceiptDetailGetResponse::readuser_size() const {
  return _internal_readuser_size();
}
inline void ImMessage_MessageReceiptDetailGetResponse::clear_readuser() {
  readuser_.Clear();
}
inline ::AcFunDanmu::Im::Basic_User* ImMessage_MessageReceiptDetailGetResponse::mutable_readuser(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.MessageReceiptDetailGetResponse.readUser)
  return readuser_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_User >*
ImMessage_MessageReceiptDetailGetResponse::mutable_readuser() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.ImMessage.MessageReceiptDetailGetResponse.readUser)
  return &readuser_;
}
inline const ::AcFunDanmu::Im::Basic_User& ImMessage_MessageReceiptDetailGetResponse::_internal_readuser(int index) const {
  return readuser_.Get(index);
}
inline const ::AcFunDanmu::Im::Basic_User& ImMessage_MessageReceiptDetailGetResponse::readuser(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.MessageReceiptDetailGetResponse.readUser)
  return _internal_readuser(index);
}
inline ::AcFunDanmu::Im::Basic_User* ImMessage_MessageReceiptDetailGetResponse::_internal_add_readuser() {
  return readuser_.Add();
}
inline ::AcFunDanmu::Im::Basic_User* ImMessage_MessageReceiptDetailGetResponse::add_readuser() {
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.ImMessage.MessageReceiptDetailGetResponse.readUser)
  return _internal_add_readuser();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_User >&
ImMessage_MessageReceiptDetailGetResponse::readuser() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.ImMessage.MessageReceiptDetailGetResponse.readUser)
  return readuser_;
}

// repeated .AcFunDanmu.Im.Basic.User unreadUser = 2;
inline int ImMessage_MessageReceiptDetailGetResponse::_internal_unreaduser_size() const {
  return unreaduser_.size();
}
inline int ImMessage_MessageReceiptDetailGetResponse::unreaduser_size() const {
  return _internal_unreaduser_size();
}
inline void ImMessage_MessageReceiptDetailGetResponse::clear_unreaduser() {
  unreaduser_.Clear();
}
inline ::AcFunDanmu::Im::Basic_User* ImMessage_MessageReceiptDetailGetResponse::mutable_unreaduser(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.MessageReceiptDetailGetResponse.unreadUser)
  return unreaduser_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_User >*
ImMessage_MessageReceiptDetailGetResponse::mutable_unreaduser() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.ImMessage.MessageReceiptDetailGetResponse.unreadUser)
  return &unreaduser_;
}
inline const ::AcFunDanmu::Im::Basic_User& ImMessage_MessageReceiptDetailGetResponse::_internal_unreaduser(int index) const {
  return unreaduser_.Get(index);
}
inline const ::AcFunDanmu::Im::Basic_User& ImMessage_MessageReceiptDetailGetResponse::unreaduser(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.MessageReceiptDetailGetResponse.unreadUser)
  return _internal_unreaduser(index);
}
inline ::AcFunDanmu::Im::Basic_User* ImMessage_MessageReceiptDetailGetResponse::_internal_add_unreaduser() {
  return unreaduser_.Add();
}
inline ::AcFunDanmu::Im::Basic_User* ImMessage_MessageReceiptDetailGetResponse::add_unreaduser() {
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.ImMessage.MessageReceiptDetailGetResponse.unreadUser)
  return _internal_add_unreaduser();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_User >&
ImMessage_MessageReceiptDetailGetResponse::unreaduser() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.ImMessage.MessageReceiptDetailGetResponse.unreadUser)
  return unreaduser_;
}

// -------------------------------------------------------------------

// ImMessage_MessageBatchSendRequest

// repeated .AcFunDanmu.Im.ImMessage.Message message = 1;
inline int ImMessage_MessageBatchSendRequest::_internal_message_size() const {
  return message_.size();
}
inline int ImMessage_MessageBatchSendRequest::message_size() const {
  return _internal_message_size();
}
inline void ImMessage_MessageBatchSendRequest::clear_message() {
  message_.Clear();
}
inline ::AcFunDanmu::Im::ImMessage_Message* ImMessage_MessageBatchSendRequest::mutable_message(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.MessageBatchSendRequest.message)
  return message_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_Message >*
ImMessage_MessageBatchSendRequest::mutable_message() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.ImMessage.MessageBatchSendRequest.message)
  return &message_;
}
inline const ::AcFunDanmu::Im::ImMessage_Message& ImMessage_MessageBatchSendRequest::_internal_message(int index) const {
  return message_.Get(index);
}
inline const ::AcFunDanmu::Im::ImMessage_Message& ImMessage_MessageBatchSendRequest::message(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.MessageBatchSendRequest.message)
  return _internal_message(index);
}
inline ::AcFunDanmu::Im::ImMessage_Message* ImMessage_MessageBatchSendRequest::_internal_add_message() {
  return message_.Add();
}
inline ::AcFunDanmu::Im::ImMessage_Message* ImMessage_MessageBatchSendRequest::add_message() {
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.ImMessage.MessageBatchSendRequest.message)
  return _internal_add_message();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_Message >&
ImMessage_MessageBatchSendRequest::message() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.ImMessage.MessageBatchSendRequest.message)
  return message_;
}

// -------------------------------------------------------------------

// ImMessage_MessageBatchSendResponse

// repeated .AcFunDanmu.Im.ImMessage.SendMessageResponse response = 1;
inline int ImMessage_MessageBatchSendResponse::_internal_response_size() const {
  return response_.size();
}
inline int ImMessage_MessageBatchSendResponse::response_size() const {
  return _internal_response_size();
}
inline void ImMessage_MessageBatchSendResponse::clear_response() {
  response_.Clear();
}
inline ::AcFunDanmu::Im::ImMessage_SendMessageResponse* ImMessage_MessageBatchSendResponse::mutable_response(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.MessageBatchSendResponse.response)
  return response_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_SendMessageResponse >*
ImMessage_MessageBatchSendResponse::mutable_response() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.ImMessage.MessageBatchSendResponse.response)
  return &response_;
}
inline const ::AcFunDanmu::Im::ImMessage_SendMessageResponse& ImMessage_MessageBatchSendResponse::_internal_response(int index) const {
  return response_.Get(index);
}
inline const ::AcFunDanmu::Im::ImMessage_SendMessageResponse& ImMessage_MessageBatchSendResponse::response(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.MessageBatchSendResponse.response)
  return _internal_response(index);
}
inline ::AcFunDanmu::Im::ImMessage_SendMessageResponse* ImMessage_MessageBatchSendResponse::_internal_add_response() {
  return response_.Add();
}
inline ::AcFunDanmu::Im::ImMessage_SendMessageResponse* ImMessage_MessageBatchSendResponse::add_response() {
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.ImMessage.MessageBatchSendResponse.response)
  return _internal_add_response();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_SendMessageResponse >&
ImMessage_MessageBatchSendResponse::response() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.ImMessage.MessageBatchSendResponse.response)
  return response_;
}

// -------------------------------------------------------------------

// ImMessage_ImageAttachment

// string mimeType = 1;
inline void ImMessage_ImageAttachment::clear_mimetype() {
  mimetype_.ClearToEmpty();
}
inline const std::string& ImMessage_ImageAttachment::mimetype() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.ImageAttachment.mimeType)
  return _internal_mimetype();
}
inline void ImMessage_ImageAttachment::set_mimetype(const std::string& value) {
  _internal_set_mimetype(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.ImageAttachment.mimeType)
}
inline std::string* ImMessage_ImageAttachment::mutable_mimetype() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.ImageAttachment.mimeType)
  return _internal_mutable_mimetype();
}
inline const std::string& ImMessage_ImageAttachment::_internal_mimetype() const {
  return mimetype_.Get();
}
inline void ImMessage_ImageAttachment::_internal_set_mimetype(const std::string& value) {
  
  mimetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ImMessage_ImageAttachment::set_mimetype(std::string&& value) {
  
  mimetype_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.ImMessage.ImageAttachment.mimeType)
}
inline void ImMessage_ImageAttachment::set_mimetype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mimetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.ImMessage.ImageAttachment.mimeType)
}
inline void ImMessage_ImageAttachment::set_mimetype(const char* value,
    size_t size) {
  
  mimetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.ImMessage.ImageAttachment.mimeType)
}
inline std::string* ImMessage_ImageAttachment::_internal_mutable_mimetype() {
  
  return mimetype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ImMessage_ImageAttachment::release_mimetype() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.ImMessage.ImageAttachment.mimeType)
  return mimetype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImMessage_ImageAttachment::set_allocated_mimetype(std::string* mimetype) {
  if (mimetype != nullptr) {
    
  } else {
    
  }
  mimetype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mimetype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.ImMessage.ImageAttachment.mimeType)
}

// string url = 2;
inline void ImMessage_ImageAttachment::clear_url() {
  url_.ClearToEmpty();
}
inline const std::string& ImMessage_ImageAttachment::url() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.ImageAttachment.url)
  return _internal_url();
}
inline void ImMessage_ImageAttachment::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.ImageAttachment.url)
}
inline std::string* ImMessage_ImageAttachment::mutable_url() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.ImageAttachment.url)
  return _internal_mutable_url();
}
inline const std::string& ImMessage_ImageAttachment::_internal_url() const {
  return url_.Get();
}
inline void ImMessage_ImageAttachment::_internal_set_url(const std::string& value) {
  
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ImMessage_ImageAttachment::set_url(std::string&& value) {
  
  url_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.ImMessage.ImageAttachment.url)
}
inline void ImMessage_ImageAttachment::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.ImMessage.ImageAttachment.url)
}
inline void ImMessage_ImageAttachment::set_url(const char* value,
    size_t size) {
  
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.ImMessage.ImageAttachment.url)
}
inline std::string* ImMessage_ImageAttachment::_internal_mutable_url() {
  
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ImMessage_ImageAttachment::release_url() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.ImMessage.ImageAttachment.url)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImMessage_ImageAttachment::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.ImMessage.ImageAttachment.url)
}

// int32 width = 3;
inline void ImMessage_ImageAttachment::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_ImageAttachment::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_ImageAttachment::width() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.ImageAttachment.width)
  return _internal_width();
}
inline void ImMessage_ImageAttachment::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
}
inline void ImMessage_ImageAttachment::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.ImageAttachment.width)
}

// int32 height = 4;
inline void ImMessage_ImageAttachment::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_ImageAttachment::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_ImageAttachment::height() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.ImageAttachment.height)
  return _internal_height();
}
inline void ImMessage_ImageAttachment::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void ImMessage_ImageAttachment::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.ImageAttachment.height)
}

// int64 lengthInBytes = 5;
inline void ImMessage_ImageAttachment::clear_lengthinbytes() {
  lengthinbytes_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_ImageAttachment::_internal_lengthinbytes() const {
  return lengthinbytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_ImageAttachment::lengthinbytes() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.ImageAttachment.lengthInBytes)
  return _internal_lengthinbytes();
}
inline void ImMessage_ImageAttachment::_internal_set_lengthinbytes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  lengthinbytes_ = value;
}
inline void ImMessage_ImageAttachment::set_lengthinbytes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_lengthinbytes(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.ImageAttachment.lengthInBytes)
}

// -------------------------------------------------------------------

// ImMessage_AudioAttachment

// string mimeType = 1;
inline void ImMessage_AudioAttachment::clear_mimetype() {
  mimetype_.ClearToEmpty();
}
inline const std::string& ImMessage_AudioAttachment::mimetype() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.AudioAttachment.mimeType)
  return _internal_mimetype();
}
inline void ImMessage_AudioAttachment::set_mimetype(const std::string& value) {
  _internal_set_mimetype(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.AudioAttachment.mimeType)
}
inline std::string* ImMessage_AudioAttachment::mutable_mimetype() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.AudioAttachment.mimeType)
  return _internal_mutable_mimetype();
}
inline const std::string& ImMessage_AudioAttachment::_internal_mimetype() const {
  return mimetype_.Get();
}
inline void ImMessage_AudioAttachment::_internal_set_mimetype(const std::string& value) {
  
  mimetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ImMessage_AudioAttachment::set_mimetype(std::string&& value) {
  
  mimetype_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.ImMessage.AudioAttachment.mimeType)
}
inline void ImMessage_AudioAttachment::set_mimetype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mimetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.ImMessage.AudioAttachment.mimeType)
}
inline void ImMessage_AudioAttachment::set_mimetype(const char* value,
    size_t size) {
  
  mimetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.ImMessage.AudioAttachment.mimeType)
}
inline std::string* ImMessage_AudioAttachment::_internal_mutable_mimetype() {
  
  return mimetype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ImMessage_AudioAttachment::release_mimetype() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.ImMessage.AudioAttachment.mimeType)
  return mimetype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImMessage_AudioAttachment::set_allocated_mimetype(std::string* mimetype) {
  if (mimetype != nullptr) {
    
  } else {
    
  }
  mimetype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mimetype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.ImMessage.AudioAttachment.mimeType)
}

// string url = 2;
inline void ImMessage_AudioAttachment::clear_url() {
  url_.ClearToEmpty();
}
inline const std::string& ImMessage_AudioAttachment::url() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.AudioAttachment.url)
  return _internal_url();
}
inline void ImMessage_AudioAttachment::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.AudioAttachment.url)
}
inline std::string* ImMessage_AudioAttachment::mutable_url() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.AudioAttachment.url)
  return _internal_mutable_url();
}
inline const std::string& ImMessage_AudioAttachment::_internal_url() const {
  return url_.Get();
}
inline void ImMessage_AudioAttachment::_internal_set_url(const std::string& value) {
  
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ImMessage_AudioAttachment::set_url(std::string&& value) {
  
  url_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.ImMessage.AudioAttachment.url)
}
inline void ImMessage_AudioAttachment::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.ImMessage.AudioAttachment.url)
}
inline void ImMessage_AudioAttachment::set_url(const char* value,
    size_t size) {
  
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.ImMessage.AudioAttachment.url)
}
inline std::string* ImMessage_AudioAttachment::_internal_mutable_url() {
  
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ImMessage_AudioAttachment::release_url() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.ImMessage.AudioAttachment.url)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImMessage_AudioAttachment::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.ImMessage.AudioAttachment.url)
}

// int32 width = 3;
inline void ImMessage_AudioAttachment::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_AudioAttachment::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_AudioAttachment::width() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.AudioAttachment.width)
  return _internal_width();
}
inline void ImMessage_AudioAttachment::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
}
inline void ImMessage_AudioAttachment::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.AudioAttachment.width)
}

// int32 height = 4;
inline void ImMessage_AudioAttachment::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_AudioAttachment::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_AudioAttachment::height() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.AudioAttachment.height)
  return _internal_height();
}
inline void ImMessage_AudioAttachment::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void ImMessage_AudioAttachment::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.AudioAttachment.height)
}

// int64 lengthInBytes = 5;
inline void ImMessage_AudioAttachment::clear_lengthinbytes() {
  lengthinbytes_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_AudioAttachment::_internal_lengthinbytes() const {
  return lengthinbytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_AudioAttachment::lengthinbytes() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.AudioAttachment.lengthInBytes)
  return _internal_lengthinbytes();
}
inline void ImMessage_AudioAttachment::_internal_set_lengthinbytes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  lengthinbytes_ = value;
}
inline void ImMessage_AudioAttachment::set_lengthinbytes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_lengthinbytes(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.AudioAttachment.lengthInBytes)
}

// -------------------------------------------------------------------

// ImMessage_GifAttachment

// string mimeType = 1;
inline void ImMessage_GifAttachment::clear_mimetype() {
  mimetype_.ClearToEmpty();
}
inline const std::string& ImMessage_GifAttachment::mimetype() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.GifAttachment.mimeType)
  return _internal_mimetype();
}
inline void ImMessage_GifAttachment::set_mimetype(const std::string& value) {
  _internal_set_mimetype(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.GifAttachment.mimeType)
}
inline std::string* ImMessage_GifAttachment::mutable_mimetype() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.GifAttachment.mimeType)
  return _internal_mutable_mimetype();
}
inline const std::string& ImMessage_GifAttachment::_internal_mimetype() const {
  return mimetype_.Get();
}
inline void ImMessage_GifAttachment::_internal_set_mimetype(const std::string& value) {
  
  mimetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ImMessage_GifAttachment::set_mimetype(std::string&& value) {
  
  mimetype_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.ImMessage.GifAttachment.mimeType)
}
inline void ImMessage_GifAttachment::set_mimetype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mimetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.ImMessage.GifAttachment.mimeType)
}
inline void ImMessage_GifAttachment::set_mimetype(const char* value,
    size_t size) {
  
  mimetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.ImMessage.GifAttachment.mimeType)
}
inline std::string* ImMessage_GifAttachment::_internal_mutable_mimetype() {
  
  return mimetype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ImMessage_GifAttachment::release_mimetype() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.ImMessage.GifAttachment.mimeType)
  return mimetype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImMessage_GifAttachment::set_allocated_mimetype(std::string* mimetype) {
  if (mimetype != nullptr) {
    
  } else {
    
  }
  mimetype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mimetype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.ImMessage.GifAttachment.mimeType)
}

// string url = 2;
inline void ImMessage_GifAttachment::clear_url() {
  url_.ClearToEmpty();
}
inline const std::string& ImMessage_GifAttachment::url() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.GifAttachment.url)
  return _internal_url();
}
inline void ImMessage_GifAttachment::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.GifAttachment.url)
}
inline std::string* ImMessage_GifAttachment::mutable_url() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.GifAttachment.url)
  return _internal_mutable_url();
}
inline const std::string& ImMessage_GifAttachment::_internal_url() const {
  return url_.Get();
}
inline void ImMessage_GifAttachment::_internal_set_url(const std::string& value) {
  
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ImMessage_GifAttachment::set_url(std::string&& value) {
  
  url_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.ImMessage.GifAttachment.url)
}
inline void ImMessage_GifAttachment::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.ImMessage.GifAttachment.url)
}
inline void ImMessage_GifAttachment::set_url(const char* value,
    size_t size) {
  
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.ImMessage.GifAttachment.url)
}
inline std::string* ImMessage_GifAttachment::_internal_mutable_url() {
  
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ImMessage_GifAttachment::release_url() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.ImMessage.GifAttachment.url)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImMessage_GifAttachment::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.ImMessage.GifAttachment.url)
}

// int32 width = 3;
inline void ImMessage_GifAttachment::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_GifAttachment::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_GifAttachment::width() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.GifAttachment.width)
  return _internal_width();
}
inline void ImMessage_GifAttachment::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
}
inline void ImMessage_GifAttachment::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.GifAttachment.width)
}

// int32 height = 4;
inline void ImMessage_GifAttachment::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_GifAttachment::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_GifAttachment::height() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.GifAttachment.height)
  return _internal_height();
}
inline void ImMessage_GifAttachment::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void ImMessage_GifAttachment::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.GifAttachment.height)
}

// string thumbaUrl = 5;
inline void ImMessage_GifAttachment::clear_thumbaurl() {
  thumbaurl_.ClearToEmpty();
}
inline const std::string& ImMessage_GifAttachment::thumbaurl() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.GifAttachment.thumbaUrl)
  return _internal_thumbaurl();
}
inline void ImMessage_GifAttachment::set_thumbaurl(const std::string& value) {
  _internal_set_thumbaurl(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.GifAttachment.thumbaUrl)
}
inline std::string* ImMessage_GifAttachment::mutable_thumbaurl() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.GifAttachment.thumbaUrl)
  return _internal_mutable_thumbaurl();
}
inline const std::string& ImMessage_GifAttachment::_internal_thumbaurl() const {
  return thumbaurl_.Get();
}
inline void ImMessage_GifAttachment::_internal_set_thumbaurl(const std::string& value) {
  
  thumbaurl_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ImMessage_GifAttachment::set_thumbaurl(std::string&& value) {
  
  thumbaurl_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.ImMessage.GifAttachment.thumbaUrl)
}
inline void ImMessage_GifAttachment::set_thumbaurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  thumbaurl_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.ImMessage.GifAttachment.thumbaUrl)
}
inline void ImMessage_GifAttachment::set_thumbaurl(const char* value,
    size_t size) {
  
  thumbaurl_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.ImMessage.GifAttachment.thumbaUrl)
}
inline std::string* ImMessage_GifAttachment::_internal_mutable_thumbaurl() {
  
  return thumbaurl_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ImMessage_GifAttachment::release_thumbaurl() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.ImMessage.GifAttachment.thumbaUrl)
  return thumbaurl_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImMessage_GifAttachment::set_allocated_thumbaurl(std::string* thumbaurl) {
  if (thumbaurl != nullptr) {
    
  } else {
    
  }
  thumbaurl_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), thumbaurl,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.ImMessage.GifAttachment.thumbaUrl)
}

// string text = 6;
inline void ImMessage_GifAttachment::clear_text() {
  text_.ClearToEmpty();
}
inline const std::string& ImMessage_GifAttachment::text() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.GifAttachment.text)
  return _internal_text();
}
inline void ImMessage_GifAttachment::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.GifAttachment.text)
}
inline std::string* ImMessage_GifAttachment::mutable_text() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.GifAttachment.text)
  return _internal_mutable_text();
}
inline const std::string& ImMessage_GifAttachment::_internal_text() const {
  return text_.Get();
}
inline void ImMessage_GifAttachment::_internal_set_text(const std::string& value) {
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ImMessage_GifAttachment::set_text(std::string&& value) {
  
  text_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.ImMessage.GifAttachment.text)
}
inline void ImMessage_GifAttachment::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.ImMessage.GifAttachment.text)
}
inline void ImMessage_GifAttachment::set_text(const char* value,
    size_t size) {
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.ImMessage.GifAttachment.text)
}
inline std::string* ImMessage_GifAttachment::_internal_mutable_text() {
  
  return text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ImMessage_GifAttachment::release_text() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.ImMessage.GifAttachment.text)
  return text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImMessage_GifAttachment::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.ImMessage.GifAttachment.text)
}

// -------------------------------------------------------------------

// ImMessage_Attachment

// .AcFunDanmu.Im.ImMessage.ImageAttachment imageAttachment = 1;
inline bool ImMessage_Attachment::_internal_has_imageattachment() const {
  return attacmnent_case() == kImageAttachment;
}
inline bool ImMessage_Attachment::has_imageattachment() const {
  return _internal_has_imageattachment();
}
inline void ImMessage_Attachment::set_has_imageattachment() {
  _oneof_case_[0] = kImageAttachment;
}
inline void ImMessage_Attachment::clear_imageattachment() {
  if (_internal_has_imageattachment()) {
    if (GetArena() == nullptr) {
      delete attacmnent_.imageattachment_;
    }
    clear_has_attacmnent();
  }
}
inline ::AcFunDanmu::Im::ImMessage_ImageAttachment* ImMessage_Attachment::release_imageattachment() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.ImMessage.Attachment.imageAttachment)
  if (_internal_has_imageattachment()) {
    clear_has_attacmnent();
      ::AcFunDanmu::Im::ImMessage_ImageAttachment* temp = attacmnent_.imageattachment_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    attacmnent_.imageattachment_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::AcFunDanmu::Im::ImMessage_ImageAttachment& ImMessage_Attachment::_internal_imageattachment() const {
  return _internal_has_imageattachment()
      ? *attacmnent_.imageattachment_
      : reinterpret_cast< ::AcFunDanmu::Im::ImMessage_ImageAttachment&>(::AcFunDanmu::Im::_ImMessage_ImageAttachment_default_instance_);
}
inline const ::AcFunDanmu::Im::ImMessage_ImageAttachment& ImMessage_Attachment::imageattachment() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.Attachment.imageAttachment)
  return _internal_imageattachment();
}
inline ::AcFunDanmu::Im::ImMessage_ImageAttachment* ImMessage_Attachment::unsafe_arena_release_imageattachment() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AcFunDanmu.Im.ImMessage.Attachment.imageAttachment)
  if (_internal_has_imageattachment()) {
    clear_has_attacmnent();
    ::AcFunDanmu::Im::ImMessage_ImageAttachment* temp = attacmnent_.imageattachment_;
    attacmnent_.imageattachment_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ImMessage_Attachment::unsafe_arena_set_allocated_imageattachment(::AcFunDanmu::Im::ImMessage_ImageAttachment* imageattachment) {
  clear_attacmnent();
  if (imageattachment) {
    set_has_imageattachment();
    attacmnent_.imageattachment_ = imageattachment;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.ImMessage.Attachment.imageAttachment)
}
inline ::AcFunDanmu::Im::ImMessage_ImageAttachment* ImMessage_Attachment::_internal_mutable_imageattachment() {
  if (!_internal_has_imageattachment()) {
    clear_attacmnent();
    set_has_imageattachment();
    attacmnent_.imageattachment_ = CreateMaybeMessage< ::AcFunDanmu::Im::ImMessage_ImageAttachment >(GetArena());
  }
  return attacmnent_.imageattachment_;
}
inline ::AcFunDanmu::Im::ImMessage_ImageAttachment* ImMessage_Attachment::mutable_imageattachment() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.Attachment.imageAttachment)
  return _internal_mutable_imageattachment();
}

// .AcFunDanmu.Im.ImMessage.AudioAttachment audioAttachment = 2;
inline bool ImMessage_Attachment::_internal_has_audioattachment() const {
  return attacmnent_case() == kAudioAttachment;
}
inline bool ImMessage_Attachment::has_audioattachment() const {
  return _internal_has_audioattachment();
}
inline void ImMessage_Attachment::set_has_audioattachment() {
  _oneof_case_[0] = kAudioAttachment;
}
inline void ImMessage_Attachment::clear_audioattachment() {
  if (_internal_has_audioattachment()) {
    if (GetArena() == nullptr) {
      delete attacmnent_.audioattachment_;
    }
    clear_has_attacmnent();
  }
}
inline ::AcFunDanmu::Im::ImMessage_AudioAttachment* ImMessage_Attachment::release_audioattachment() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.ImMessage.Attachment.audioAttachment)
  if (_internal_has_audioattachment()) {
    clear_has_attacmnent();
      ::AcFunDanmu::Im::ImMessage_AudioAttachment* temp = attacmnent_.audioattachment_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    attacmnent_.audioattachment_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::AcFunDanmu::Im::ImMessage_AudioAttachment& ImMessage_Attachment::_internal_audioattachment() const {
  return _internal_has_audioattachment()
      ? *attacmnent_.audioattachment_
      : reinterpret_cast< ::AcFunDanmu::Im::ImMessage_AudioAttachment&>(::AcFunDanmu::Im::_ImMessage_AudioAttachment_default_instance_);
}
inline const ::AcFunDanmu::Im::ImMessage_AudioAttachment& ImMessage_Attachment::audioattachment() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.Attachment.audioAttachment)
  return _internal_audioattachment();
}
inline ::AcFunDanmu::Im::ImMessage_AudioAttachment* ImMessage_Attachment::unsafe_arena_release_audioattachment() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AcFunDanmu.Im.ImMessage.Attachment.audioAttachment)
  if (_internal_has_audioattachment()) {
    clear_has_attacmnent();
    ::AcFunDanmu::Im::ImMessage_AudioAttachment* temp = attacmnent_.audioattachment_;
    attacmnent_.audioattachment_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ImMessage_Attachment::unsafe_arena_set_allocated_audioattachment(::AcFunDanmu::Im::ImMessage_AudioAttachment* audioattachment) {
  clear_attacmnent();
  if (audioattachment) {
    set_has_audioattachment();
    attacmnent_.audioattachment_ = audioattachment;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.ImMessage.Attachment.audioAttachment)
}
inline ::AcFunDanmu::Im::ImMessage_AudioAttachment* ImMessage_Attachment::_internal_mutable_audioattachment() {
  if (!_internal_has_audioattachment()) {
    clear_attacmnent();
    set_has_audioattachment();
    attacmnent_.audioattachment_ = CreateMaybeMessage< ::AcFunDanmu::Im::ImMessage_AudioAttachment >(GetArena());
  }
  return attacmnent_.audioattachment_;
}
inline ::AcFunDanmu::Im::ImMessage_AudioAttachment* ImMessage_Attachment::mutable_audioattachment() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.Attachment.audioAttachment)
  return _internal_mutable_audioattachment();
}

inline bool ImMessage_Attachment::has_attacmnent() const {
  return attacmnent_case() != ATTACMNENT_NOT_SET;
}
inline void ImMessage_Attachment::clear_has_attacmnent() {
  _oneof_case_[0] = ATTACMNENT_NOT_SET;
}
inline ImMessage_Attachment::AttacmnentCase ImMessage_Attachment::attacmnent_case() const {
  return ImMessage_Attachment::AttacmnentCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ImMessage_Attachments

// repeated .AcFunDanmu.Im.ImMessage.Attachment attachments = 1;
inline int ImMessage_Attachments::_internal_attachments_size() const {
  return attachments_.size();
}
inline int ImMessage_Attachments::attachments_size() const {
  return _internal_attachments_size();
}
inline void ImMessage_Attachments::clear_attachments() {
  attachments_.Clear();
}
inline ::AcFunDanmu::Im::ImMessage_Attachment* ImMessage_Attachments::mutable_attachments(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.Attachments.attachments)
  return attachments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_Attachment >*
ImMessage_Attachments::mutable_attachments() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.ImMessage.Attachments.attachments)
  return &attachments_;
}
inline const ::AcFunDanmu::Im::ImMessage_Attachment& ImMessage_Attachments::_internal_attachments(int index) const {
  return attachments_.Get(index);
}
inline const ::AcFunDanmu::Im::ImMessage_Attachment& ImMessage_Attachments::attachments(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.Attachments.attachments)
  return _internal_attachments(index);
}
inline ::AcFunDanmu::Im::ImMessage_Attachment* ImMessage_Attachments::_internal_add_attachments() {
  return attachments_.Add();
}
inline ::AcFunDanmu::Im::ImMessage_Attachment* ImMessage_Attachments::add_attachments() {
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.ImMessage.Attachments.attachments)
  return _internal_add_attachments();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_Attachment >&
ImMessage_Attachments::attachments() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.ImMessage.Attachments.attachments)
  return attachments_;
}

// -------------------------------------------------------------------

// ImMessage_PlaceHolderMessage

// int64 minSeq = 1;
inline void ImMessage_PlaceHolderMessage::clear_minseq() {
  minseq_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_PlaceHolderMessage::_internal_minseq() const {
  return minseq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_PlaceHolderMessage::minseq() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.PlaceHolderMessage.minSeq)
  return _internal_minseq();
}
inline void ImMessage_PlaceHolderMessage::_internal_set_minseq(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  minseq_ = value;
}
inline void ImMessage_PlaceHolderMessage::set_minseq(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_minseq(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.PlaceHolderMessage.minSeq)
}

// int64 maxSeq = 2;
inline void ImMessage_PlaceHolderMessage::clear_maxseq() {
  maxseq_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_PlaceHolderMessage::_internal_maxseq() const {
  return maxseq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImMessage_PlaceHolderMessage::maxseq() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.PlaceHolderMessage.maxSeq)
  return _internal_maxseq();
}
inline void ImMessage_PlaceHolderMessage::_internal_set_maxseq(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  maxseq_ = value;
}
inline void ImMessage_PlaceHolderMessage::set_maxseq(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_maxseq(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.PlaceHolderMessage.maxSeq)
}

// -------------------------------------------------------------------

// ImMessage_ImageTextMessage

// string title = 1;
inline void ImMessage_ImageTextMessage::clear_title() {
  title_.ClearToEmpty();
}
inline const std::string& ImMessage_ImageTextMessage::title() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.ImageTextMessage.title)
  return _internal_title();
}
inline void ImMessage_ImageTextMessage::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.ImageTextMessage.title)
}
inline std::string* ImMessage_ImageTextMessage::mutable_title() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.ImageTextMessage.title)
  return _internal_mutable_title();
}
inline const std::string& ImMessage_ImageTextMessage::_internal_title() const {
  return title_.Get();
}
inline void ImMessage_ImageTextMessage::_internal_set_title(const std::string& value) {
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ImMessage_ImageTextMessage::set_title(std::string&& value) {
  
  title_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.ImMessage.ImageTextMessage.title)
}
inline void ImMessage_ImageTextMessage::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.ImMessage.ImageTextMessage.title)
}
inline void ImMessage_ImageTextMessage::set_title(const char* value,
    size_t size) {
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.ImMessage.ImageTextMessage.title)
}
inline std::string* ImMessage_ImageTextMessage::_internal_mutable_title() {
  
  return title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ImMessage_ImageTextMessage::release_title() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.ImMessage.ImageTextMessage.title)
  return title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImMessage_ImageTextMessage::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.ImMessage.ImageTextMessage.title)
}

// string description = 2;
inline void ImMessage_ImageTextMessage::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& ImMessage_ImageTextMessage::description() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.ImageTextMessage.description)
  return _internal_description();
}
inline void ImMessage_ImageTextMessage::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.ImageTextMessage.description)
}
inline std::string* ImMessage_ImageTextMessage::mutable_description() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.ImageTextMessage.description)
  return _internal_mutable_description();
}
inline const std::string& ImMessage_ImageTextMessage::_internal_description() const {
  return description_.Get();
}
inline void ImMessage_ImageTextMessage::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ImMessage_ImageTextMessage::set_description(std::string&& value) {
  
  description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.ImMessage.ImageTextMessage.description)
}
inline void ImMessage_ImageTextMessage::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.ImMessage.ImageTextMessage.description)
}
inline void ImMessage_ImageTextMessage::set_description(const char* value,
    size_t size) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.ImMessage.ImageTextMessage.description)
}
inline std::string* ImMessage_ImageTextMessage::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ImMessage_ImageTextMessage::release_description() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.ImMessage.ImageTextMessage.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImMessage_ImageTextMessage::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.ImMessage.ImageTextMessage.description)
}

// string imageUrl = 3;
inline void ImMessage_ImageTextMessage::clear_imageurl() {
  imageurl_.ClearToEmpty();
}
inline const std::string& ImMessage_ImageTextMessage::imageurl() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.ImageTextMessage.imageUrl)
  return _internal_imageurl();
}
inline void ImMessage_ImageTextMessage::set_imageurl(const std::string& value) {
  _internal_set_imageurl(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.ImageTextMessage.imageUrl)
}
inline std::string* ImMessage_ImageTextMessage::mutable_imageurl() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.ImageTextMessage.imageUrl)
  return _internal_mutable_imageurl();
}
inline const std::string& ImMessage_ImageTextMessage::_internal_imageurl() const {
  return imageurl_.Get();
}
inline void ImMessage_ImageTextMessage::_internal_set_imageurl(const std::string& value) {
  
  imageurl_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ImMessage_ImageTextMessage::set_imageurl(std::string&& value) {
  
  imageurl_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.ImMessage.ImageTextMessage.imageUrl)
}
inline void ImMessage_ImageTextMessage::set_imageurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  imageurl_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.ImMessage.ImageTextMessage.imageUrl)
}
inline void ImMessage_ImageTextMessage::set_imageurl(const char* value,
    size_t size) {
  
  imageurl_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.ImMessage.ImageTextMessage.imageUrl)
}
inline std::string* ImMessage_ImageTextMessage::_internal_mutable_imageurl() {
  
  return imageurl_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ImMessage_ImageTextMessage::release_imageurl() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.ImMessage.ImageTextMessage.imageUrl)
  return imageurl_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImMessage_ImageTextMessage::set_allocated_imageurl(std::string* imageurl) {
  if (imageurl != nullptr) {
    
  } else {
    
  }
  imageurl_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imageurl,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.ImMessage.ImageTextMessage.imageUrl)
}

// string actionUrl = 4;
inline void ImMessage_ImageTextMessage::clear_actionurl() {
  actionurl_.ClearToEmpty();
}
inline const std::string& ImMessage_ImageTextMessage::actionurl() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.ImageTextMessage.actionUrl)
  return _internal_actionurl();
}
inline void ImMessage_ImageTextMessage::set_actionurl(const std::string& value) {
  _internal_set_actionurl(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.ImageTextMessage.actionUrl)
}
inline std::string* ImMessage_ImageTextMessage::mutable_actionurl() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.ImageTextMessage.actionUrl)
  return _internal_mutable_actionurl();
}
inline const std::string& ImMessage_ImageTextMessage::_internal_actionurl() const {
  return actionurl_.Get();
}
inline void ImMessage_ImageTextMessage::_internal_set_actionurl(const std::string& value) {
  
  actionurl_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ImMessage_ImageTextMessage::set_actionurl(std::string&& value) {
  
  actionurl_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.ImMessage.ImageTextMessage.actionUrl)
}
inline void ImMessage_ImageTextMessage::set_actionurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  actionurl_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.ImMessage.ImageTextMessage.actionUrl)
}
inline void ImMessage_ImageTextMessage::set_actionurl(const char* value,
    size_t size) {
  
  actionurl_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.ImMessage.ImageTextMessage.actionUrl)
}
inline std::string* ImMessage_ImageTextMessage::_internal_mutable_actionurl() {
  
  return actionurl_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ImMessage_ImageTextMessage::release_actionurl() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.ImMessage.ImageTextMessage.actionUrl)
  return actionurl_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImMessage_ImageTextMessage::set_allocated_actionurl(std::string* actionurl) {
  if (actionurl != nullptr) {
    
  } else {
    
  }
  actionurl_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), actionurl,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.ImMessage.ImageTextMessage.actionUrl)
}

// int32 width = 5;
inline void ImMessage_ImageTextMessage::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_ImageTextMessage::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_ImageTextMessage::width() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.ImageTextMessage.width)
  return _internal_width();
}
inline void ImMessage_ImageTextMessage::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
}
inline void ImMessage_ImageTextMessage::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.ImageTextMessage.width)
}

// float aspectRatio = 6;
inline void ImMessage_ImageTextMessage::clear_aspectratio() {
  aspectratio_ = 0;
}
inline float ImMessage_ImageTextMessage::_internal_aspectratio() const {
  return aspectratio_;
}
inline float ImMessage_ImageTextMessage::aspectratio() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.ImageTextMessage.aspectRatio)
  return _internal_aspectratio();
}
inline void ImMessage_ImageTextMessage::_internal_set_aspectratio(float value) {
  
  aspectratio_ = value;
}
inline void ImMessage_ImageTextMessage::set_aspectratio(float value) {
  _internal_set_aspectratio(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.ImageTextMessage.aspectRatio)
}

// -------------------------------------------------------------------

// ImMessage_RichTextMessage

// .AcFunDanmu.Im.ImMessage.RichTextNoticeMessage richTextMessage = 1;
inline bool ImMessage_RichTextMessage::_internal_has_richtextmessage() const {
  return this != internal_default_instance() && richtextmessage_ != nullptr;
}
inline bool ImMessage_RichTextMessage::has_richtextmessage() const {
  return _internal_has_richtextmessage();
}
inline void ImMessage_RichTextMessage::clear_richtextmessage() {
  if (GetArena() == nullptr && richtextmessage_ != nullptr) {
    delete richtextmessage_;
  }
  richtextmessage_ = nullptr;
}
inline const ::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage& ImMessage_RichTextMessage::_internal_richtextmessage() const {
  const ::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage* p = richtextmessage_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage&>(
      ::AcFunDanmu::Im::_ImMessage_RichTextNoticeMessage_default_instance_);
}
inline const ::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage& ImMessage_RichTextMessage::richtextmessage() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.RichTextMessage.richTextMessage)
  return _internal_richtextmessage();
}
inline void ImMessage_RichTextMessage::unsafe_arena_set_allocated_richtextmessage(
    ::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage* richtextmessage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(richtextmessage_);
  }
  richtextmessage_ = richtextmessage;
  if (richtextmessage) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.ImMessage.RichTextMessage.richTextMessage)
}
inline ::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage* ImMessage_RichTextMessage::release_richtextmessage() {
  
  ::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage* temp = richtextmessage_;
  richtextmessage_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage* ImMessage_RichTextMessage::unsafe_arena_release_richtextmessage() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.ImMessage.RichTextMessage.richTextMessage)
  
  ::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage* temp = richtextmessage_;
  richtextmessage_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage* ImMessage_RichTextMessage::_internal_mutable_richtextmessage() {
  
  if (richtextmessage_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage>(GetArena());
    richtextmessage_ = p;
  }
  return richtextmessage_;
}
inline ::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage* ImMessage_RichTextMessage::mutable_richtextmessage() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.RichTextMessage.richTextMessage)
  return _internal_mutable_richtextmessage();
}
inline void ImMessage_RichTextMessage::set_allocated_richtextmessage(::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage* richtextmessage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete richtextmessage_;
  }
  if (richtextmessage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(richtextmessage);
    if (message_arena != submessage_arena) {
      richtextmessage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, richtextmessage, submessage_arena);
    }
    
  } else {
    
  }
  richtextmessage_ = richtextmessage;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.ImMessage.RichTextMessage.richTextMessage)
}

// -------------------------------------------------------------------

// ImMessage_NoticeMessage

// .AcFunDanmu.Im.ImMessage.RichTextNoticeMessage richTextNotice = 2;
inline bool ImMessage_NoticeMessage::_internal_has_richtextnotice() const {
  return this != internal_default_instance() && richtextnotice_ != nullptr;
}
inline bool ImMessage_NoticeMessage::has_richtextnotice() const {
  return _internal_has_richtextnotice();
}
inline void ImMessage_NoticeMessage::clear_richtextnotice() {
  if (GetArena() == nullptr && richtextnotice_ != nullptr) {
    delete richtextnotice_;
  }
  richtextnotice_ = nullptr;
}
inline const ::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage& ImMessage_NoticeMessage::_internal_richtextnotice() const {
  const ::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage* p = richtextnotice_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage&>(
      ::AcFunDanmu::Im::_ImMessage_RichTextNoticeMessage_default_instance_);
}
inline const ::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage& ImMessage_NoticeMessage::richtextnotice() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.NoticeMessage.richTextNotice)
  return _internal_richtextnotice();
}
inline void ImMessage_NoticeMessage::unsafe_arena_set_allocated_richtextnotice(
    ::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage* richtextnotice) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(richtextnotice_);
  }
  richtextnotice_ = richtextnotice;
  if (richtextnotice) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.ImMessage.NoticeMessage.richTextNotice)
}
inline ::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage* ImMessage_NoticeMessage::release_richtextnotice() {
  
  ::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage* temp = richtextnotice_;
  richtextnotice_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage* ImMessage_NoticeMessage::unsafe_arena_release_richtextnotice() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.ImMessage.NoticeMessage.richTextNotice)
  
  ::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage* temp = richtextnotice_;
  richtextnotice_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage* ImMessage_NoticeMessage::_internal_mutable_richtextnotice() {
  
  if (richtextnotice_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage>(GetArena());
    richtextnotice_ = p;
  }
  return richtextnotice_;
}
inline ::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage* ImMessage_NoticeMessage::mutable_richtextnotice() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.NoticeMessage.richTextNotice)
  return _internal_mutable_richtextnotice();
}
inline void ImMessage_NoticeMessage::set_allocated_richtextnotice(::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage* richtextnotice) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete richtextnotice_;
  }
  if (richtextnotice) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(richtextnotice);
    if (message_arena != submessage_arena) {
      richtextnotice = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, richtextnotice, submessage_arena);
    }
    
  } else {
    
  }
  richtextnotice_ = richtextnotice;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.ImMessage.NoticeMessage.richTextNotice)
}

// string msg = 5;
inline void ImMessage_NoticeMessage::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& ImMessage_NoticeMessage::msg() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.NoticeMessage.msg)
  return _internal_msg();
}
inline void ImMessage_NoticeMessage::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.NoticeMessage.msg)
}
inline std::string* ImMessage_NoticeMessage::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.NoticeMessage.msg)
  return _internal_mutable_msg();
}
inline const std::string& ImMessage_NoticeMessage::_internal_msg() const {
  return msg_.Get();
}
inline void ImMessage_NoticeMessage::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ImMessage_NoticeMessage::set_msg(std::string&& value) {
  
  msg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.ImMessage.NoticeMessage.msg)
}
inline void ImMessage_NoticeMessage::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.ImMessage.NoticeMessage.msg)
}
inline void ImMessage_NoticeMessage::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.ImMessage.NoticeMessage.msg)
}
inline std::string* ImMessage_NoticeMessage::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ImMessage_NoticeMessage::release_msg() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.ImMessage.NoticeMessage.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImMessage_NoticeMessage::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.ImMessage.NoticeMessage.msg)
}

// .AcFunDanmu.Im.Basic.I18nCopyWriting i18nCopyWriting = 10;
inline bool ImMessage_NoticeMessage::_internal_has_i18ncopywriting() const {
  return this != internal_default_instance() && i18ncopywriting_ != nullptr;
}
inline bool ImMessage_NoticeMessage::has_i18ncopywriting() const {
  return _internal_has_i18ncopywriting();
}
inline void ImMessage_NoticeMessage::clear_i18ncopywriting() {
  if (GetArena() == nullptr && i18ncopywriting_ != nullptr) {
    delete i18ncopywriting_;
  }
  i18ncopywriting_ = nullptr;
}
inline const ::AcFunDanmu::Im::Basic_I18nCopyWriting& ImMessage_NoticeMessage::_internal_i18ncopywriting() const {
  const ::AcFunDanmu::Im::Basic_I18nCopyWriting* p = i18ncopywriting_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic_I18nCopyWriting&>(
      ::AcFunDanmu::Im::_Basic_I18nCopyWriting_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic_I18nCopyWriting& ImMessage_NoticeMessage::i18ncopywriting() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.NoticeMessage.i18nCopyWriting)
  return _internal_i18ncopywriting();
}
inline void ImMessage_NoticeMessage::unsafe_arena_set_allocated_i18ncopywriting(
    ::AcFunDanmu::Im::Basic_I18nCopyWriting* i18ncopywriting) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(i18ncopywriting_);
  }
  i18ncopywriting_ = i18ncopywriting;
  if (i18ncopywriting) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.ImMessage.NoticeMessage.i18nCopyWriting)
}
inline ::AcFunDanmu::Im::Basic_I18nCopyWriting* ImMessage_NoticeMessage::release_i18ncopywriting() {
  
  ::AcFunDanmu::Im::Basic_I18nCopyWriting* temp = i18ncopywriting_;
  i18ncopywriting_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::Basic_I18nCopyWriting* ImMessage_NoticeMessage::unsafe_arena_release_i18ncopywriting() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.ImMessage.NoticeMessage.i18nCopyWriting)
  
  ::AcFunDanmu::Im::Basic_I18nCopyWriting* temp = i18ncopywriting_;
  i18ncopywriting_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic_I18nCopyWriting* ImMessage_NoticeMessage::_internal_mutable_i18ncopywriting() {
  
  if (i18ncopywriting_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic_I18nCopyWriting>(GetArena());
    i18ncopywriting_ = p;
  }
  return i18ncopywriting_;
}
inline ::AcFunDanmu::Im::Basic_I18nCopyWriting* ImMessage_NoticeMessage::mutable_i18ncopywriting() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.NoticeMessage.i18nCopyWriting)
  return _internal_mutable_i18ncopywriting();
}
inline void ImMessage_NoticeMessage::set_allocated_i18ncopywriting(::AcFunDanmu::Im::Basic_I18nCopyWriting* i18ncopywriting) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete i18ncopywriting_;
  }
  if (i18ncopywriting) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(i18ncopywriting);
    if (message_arena != submessage_arena) {
      i18ncopywriting = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, i18ncopywriting, submessage_arena);
    }
    
  } else {
    
  }
  i18ncopywriting_ = i18ncopywriting;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.ImMessage.NoticeMessage.i18nCopyWriting)
}

// -------------------------------------------------------------------

// ImMessage_RichTextNoticeMessage_RichTextItem

// int32 color = 1;
inline void ImMessage_RichTextNoticeMessage_RichTextItem::clear_color() {
  color_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_RichTextNoticeMessage_RichTextItem::_internal_color() const {
  return color_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_RichTextNoticeMessage_RichTextItem::color() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.RichTextNoticeMessage.RichTextItem.color)
  return _internal_color();
}
inline void ImMessage_RichTextNoticeMessage_RichTextItem::_internal_set_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  color_ = value;
}
inline void ImMessage_RichTextNoticeMessage_RichTextItem::set_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.RichTextNoticeMessage.RichTextItem.color)
}

// int32 start = 2;
inline void ImMessage_RichTextNoticeMessage_RichTextItem::clear_start() {
  start_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_RichTextNoticeMessage_RichTextItem::_internal_start() const {
  return start_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_RichTextNoticeMessage_RichTextItem::start() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.RichTextNoticeMessage.RichTextItem.start)
  return _internal_start();
}
inline void ImMessage_RichTextNoticeMessage_RichTextItem::_internal_set_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  start_ = value;
}
inline void ImMessage_RichTextNoticeMessage_RichTextItem::set_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.RichTextNoticeMessage.RichTextItem.start)
}

// int32 len = 3;
inline void ImMessage_RichTextNoticeMessage_RichTextItem::clear_len() {
  len_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_RichTextNoticeMessage_RichTextItem::_internal_len() const {
  return len_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImMessage_RichTextNoticeMessage_RichTextItem::len() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.RichTextNoticeMessage.RichTextItem.len)
  return _internal_len();
}
inline void ImMessage_RichTextNoticeMessage_RichTextItem::_internal_set_len(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  len_ = value;
}
inline void ImMessage_RichTextNoticeMessage_RichTextItem::set_len(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.RichTextNoticeMessage.RichTextItem.len)
}

// string clickAction = 4;
inline void ImMessage_RichTextNoticeMessage_RichTextItem::clear_clickaction() {
  clickaction_.ClearToEmpty();
}
inline const std::string& ImMessage_RichTextNoticeMessage_RichTextItem::clickaction() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.RichTextNoticeMessage.RichTextItem.clickAction)
  return _internal_clickaction();
}
inline void ImMessage_RichTextNoticeMessage_RichTextItem::set_clickaction(const std::string& value) {
  _internal_set_clickaction(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.RichTextNoticeMessage.RichTextItem.clickAction)
}
inline std::string* ImMessage_RichTextNoticeMessage_RichTextItem::mutable_clickaction() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.RichTextNoticeMessage.RichTextItem.clickAction)
  return _internal_mutable_clickaction();
}
inline const std::string& ImMessage_RichTextNoticeMessage_RichTextItem::_internal_clickaction() const {
  return clickaction_.Get();
}
inline void ImMessage_RichTextNoticeMessage_RichTextItem::_internal_set_clickaction(const std::string& value) {
  
  clickaction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ImMessage_RichTextNoticeMessage_RichTextItem::set_clickaction(std::string&& value) {
  
  clickaction_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.ImMessage.RichTextNoticeMessage.RichTextItem.clickAction)
}
inline void ImMessage_RichTextNoticeMessage_RichTextItem::set_clickaction(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  clickaction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.ImMessage.RichTextNoticeMessage.RichTextItem.clickAction)
}
inline void ImMessage_RichTextNoticeMessage_RichTextItem::set_clickaction(const char* value,
    size_t size) {
  
  clickaction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.ImMessage.RichTextNoticeMessage.RichTextItem.clickAction)
}
inline std::string* ImMessage_RichTextNoticeMessage_RichTextItem::_internal_mutable_clickaction() {
  
  return clickaction_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ImMessage_RichTextNoticeMessage_RichTextItem::release_clickaction() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.ImMessage.RichTextNoticeMessage.RichTextItem.clickAction)
  return clickaction_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImMessage_RichTextNoticeMessage_RichTextItem::set_allocated_clickaction(std::string* clickaction) {
  if (clickaction != nullptr) {
    
  } else {
    
  }
  clickaction_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clickaction,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.ImMessage.RichTextNoticeMessage.RichTextItem.clickAction)
}

// bool underline = 5;
inline void ImMessage_RichTextNoticeMessage_RichTextItem::clear_underline() {
  underline_ = false;
}
inline bool ImMessage_RichTextNoticeMessage_RichTextItem::_internal_underline() const {
  return underline_;
}
inline bool ImMessage_RichTextNoticeMessage_RichTextItem::underline() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.RichTextNoticeMessage.RichTextItem.underline)
  return _internal_underline();
}
inline void ImMessage_RichTextNoticeMessage_RichTextItem::_internal_set_underline(bool value) {
  
  underline_ = value;
}
inline void ImMessage_RichTextNoticeMessage_RichTextItem::set_underline(bool value) {
  _internal_set_underline(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.ImMessage.RichTextNoticeMessage.RichTextItem.underline)
}

// -------------------------------------------------------------------

// ImMessage_RichTextNoticeMessage

// repeated .AcFunDanmu.Im.ImMessage.RichTextNoticeMessage.RichTextItem items = 1;
inline int ImMessage_RichTextNoticeMessage::_internal_items_size() const {
  return items_.size();
}
inline int ImMessage_RichTextNoticeMessage::items_size() const {
  return _internal_items_size();
}
inline void ImMessage_RichTextNoticeMessage::clear_items() {
  items_.Clear();
}
inline ::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage_RichTextItem* ImMessage_RichTextNoticeMessage::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.ImMessage.RichTextNoticeMessage.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage_RichTextItem >*
ImMessage_RichTextNoticeMessage::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.ImMessage.RichTextNoticeMessage.items)
  return &items_;
}
inline const ::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage_RichTextItem& ImMessage_RichTextNoticeMessage::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage_RichTextItem& ImMessage_RichTextNoticeMessage::items(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.ImMessage.RichTextNoticeMessage.items)
  return _internal_items(index);
}
inline ::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage_RichTextItem* ImMessage_RichTextNoticeMessage::_internal_add_items() {
  return items_.Add();
}
inline ::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage_RichTextItem* ImMessage_RichTextNoticeMessage::add_items() {
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.ImMessage.RichTextNoticeMessage.items)
  return _internal_add_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_RichTextNoticeMessage_RichTextItem >&
ImMessage_RichTextNoticeMessage::items() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.ImMessage.RichTextNoticeMessage.items)
  return items_;
}

// -------------------------------------------------------------------

// ImMessage

// -------------------------------------------------------------------

// Cloud_Channel_ChannelSubscribeRequest

// string channelId = 1;
inline void Cloud_Channel_ChannelSubscribeRequest::clear_channelid() {
  channelid_.ClearToEmpty();
}
inline const std::string& Cloud_Channel_ChannelSubscribeRequest::channelid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Channel.ChannelSubscribeRequest.channelId)
  return _internal_channelid();
}
inline void Cloud_Channel_ChannelSubscribeRequest::set_channelid(const std::string& value) {
  _internal_set_channelid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Channel.ChannelSubscribeRequest.channelId)
}
inline std::string* Cloud_Channel_ChannelSubscribeRequest::mutable_channelid() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Channel.ChannelSubscribeRequest.channelId)
  return _internal_mutable_channelid();
}
inline const std::string& Cloud_Channel_ChannelSubscribeRequest::_internal_channelid() const {
  return channelid_.Get();
}
inline void Cloud_Channel_ChannelSubscribeRequest::_internal_set_channelid(const std::string& value) {
  
  channelid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Channel_ChannelSubscribeRequest::set_channelid(std::string&& value) {
  
  channelid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Channel.ChannelSubscribeRequest.channelId)
}
inline void Cloud_Channel_ChannelSubscribeRequest::set_channelid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channelid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Channel.ChannelSubscribeRequest.channelId)
}
inline void Cloud_Channel_ChannelSubscribeRequest::set_channelid(const char* value,
    size_t size) {
  
  channelid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Channel.ChannelSubscribeRequest.channelId)
}
inline std::string* Cloud_Channel_ChannelSubscribeRequest::_internal_mutable_channelid() {
  
  return channelid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Channel_ChannelSubscribeRequest::release_channelid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Channel.ChannelSubscribeRequest.channelId)
  return channelid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Channel_ChannelSubscribeRequest::set_allocated_channelid(std::string* channelid) {
  if (channelid != nullptr) {
    
  } else {
    
  }
  channelid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channelid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Channel.ChannelSubscribeRequest.channelId)
}

// bool setBarrier = 2;
inline void Cloud_Channel_ChannelSubscribeRequest::clear_setbarrier() {
  setbarrier_ = false;
}
inline bool Cloud_Channel_ChannelSubscribeRequest::_internal_setbarrier() const {
  return setbarrier_;
}
inline bool Cloud_Channel_ChannelSubscribeRequest::setbarrier() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Channel.ChannelSubscribeRequest.setBarrier)
  return _internal_setbarrier();
}
inline void Cloud_Channel_ChannelSubscribeRequest::_internal_set_setbarrier(bool value) {
  
  setbarrier_ = value;
}
inline void Cloud_Channel_ChannelSubscribeRequest::set_setbarrier(bool value) {
  _internal_set_setbarrier(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Channel.ChannelSubscribeRequest.setBarrier)
}

// -------------------------------------------------------------------

// Cloud_Channel_ChannelSubscribeResponse

// -------------------------------------------------------------------

// Cloud_Channel_ChannelUnsubscribeRequest

// string channelId = 1;
inline void Cloud_Channel_ChannelUnsubscribeRequest::clear_channelid() {
  channelid_.ClearToEmpty();
}
inline const std::string& Cloud_Channel_ChannelUnsubscribeRequest::channelid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Channel.ChannelUnsubscribeRequest.channelId)
  return _internal_channelid();
}
inline void Cloud_Channel_ChannelUnsubscribeRequest::set_channelid(const std::string& value) {
  _internal_set_channelid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Channel.ChannelUnsubscribeRequest.channelId)
}
inline std::string* Cloud_Channel_ChannelUnsubscribeRequest::mutable_channelid() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Channel.ChannelUnsubscribeRequest.channelId)
  return _internal_mutable_channelid();
}
inline const std::string& Cloud_Channel_ChannelUnsubscribeRequest::_internal_channelid() const {
  return channelid_.Get();
}
inline void Cloud_Channel_ChannelUnsubscribeRequest::_internal_set_channelid(const std::string& value) {
  
  channelid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Channel_ChannelUnsubscribeRequest::set_channelid(std::string&& value) {
  
  channelid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Channel.ChannelUnsubscribeRequest.channelId)
}
inline void Cloud_Channel_ChannelUnsubscribeRequest::set_channelid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channelid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Channel.ChannelUnsubscribeRequest.channelId)
}
inline void Cloud_Channel_ChannelUnsubscribeRequest::set_channelid(const char* value,
    size_t size) {
  
  channelid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Channel.ChannelUnsubscribeRequest.channelId)
}
inline std::string* Cloud_Channel_ChannelUnsubscribeRequest::_internal_mutable_channelid() {
  
  return channelid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Channel_ChannelUnsubscribeRequest::release_channelid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Channel.ChannelUnsubscribeRequest.channelId)
  return channelid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Channel_ChannelUnsubscribeRequest::set_allocated_channelid(std::string* channelid) {
  if (channelid != nullptr) {
    
  } else {
    
  }
  channelid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channelid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Channel.ChannelUnsubscribeRequest.channelId)
}

// -------------------------------------------------------------------

// Cloud_Channel_ChannelSubscribersGetRequest

// string channelId = 1;
inline void Cloud_Channel_ChannelSubscribersGetRequest::clear_channelid() {
  channelid_.ClearToEmpty();
}
inline const std::string& Cloud_Channel_ChannelSubscribersGetRequest::channelid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Channel.ChannelSubscribersGetRequest.channelId)
  return _internal_channelid();
}
inline void Cloud_Channel_ChannelSubscribersGetRequest::set_channelid(const std::string& value) {
  _internal_set_channelid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Channel.ChannelSubscribersGetRequest.channelId)
}
inline std::string* Cloud_Channel_ChannelSubscribersGetRequest::mutable_channelid() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Channel.ChannelSubscribersGetRequest.channelId)
  return _internal_mutable_channelid();
}
inline const std::string& Cloud_Channel_ChannelSubscribersGetRequest::_internal_channelid() const {
  return channelid_.Get();
}
inline void Cloud_Channel_ChannelSubscribersGetRequest::_internal_set_channelid(const std::string& value) {
  
  channelid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Channel_ChannelSubscribersGetRequest::set_channelid(std::string&& value) {
  
  channelid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Channel.ChannelSubscribersGetRequest.channelId)
}
inline void Cloud_Channel_ChannelSubscribersGetRequest::set_channelid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channelid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Channel.ChannelSubscribersGetRequest.channelId)
}
inline void Cloud_Channel_ChannelSubscribersGetRequest::set_channelid(const char* value,
    size_t size) {
  
  channelid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Channel.ChannelSubscribersGetRequest.channelId)
}
inline std::string* Cloud_Channel_ChannelSubscribersGetRequest::_internal_mutable_channelid() {
  
  return channelid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Channel_ChannelSubscribersGetRequest::release_channelid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Channel.ChannelSubscribersGetRequest.channelId)
  return channelid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Channel_ChannelSubscribersGetRequest::set_allocated_channelid(std::string* channelid) {
  if (channelid != nullptr) {
    
  } else {
    
  }
  channelid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channelid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Channel.ChannelSubscribersGetRequest.channelId)
}

// -------------------------------------------------------------------

// Cloud_Channel_ChannelSubscribersGetResposne

// repeated .AcFunDanmu.Im.Basic.User subscriber = 1;
inline int Cloud_Channel_ChannelSubscribersGetResposne::_internal_subscriber_size() const {
  return subscriber_.size();
}
inline int Cloud_Channel_ChannelSubscribersGetResposne::subscriber_size() const {
  return _internal_subscriber_size();
}
inline void Cloud_Channel_ChannelSubscribersGetResposne::clear_subscriber() {
  subscriber_.Clear();
}
inline ::AcFunDanmu::Im::Basic_User* Cloud_Channel_ChannelSubscribersGetResposne::mutable_subscriber(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Channel.ChannelSubscribersGetResposne.subscriber)
  return subscriber_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_User >*
Cloud_Channel_ChannelSubscribersGetResposne::mutable_subscriber() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Cloud.Channel.ChannelSubscribersGetResposne.subscriber)
  return &subscriber_;
}
inline const ::AcFunDanmu::Im::Basic_User& Cloud_Channel_ChannelSubscribersGetResposne::_internal_subscriber(int index) const {
  return subscriber_.Get(index);
}
inline const ::AcFunDanmu::Im::Basic_User& Cloud_Channel_ChannelSubscribersGetResposne::subscriber(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Channel.ChannelSubscribersGetResposne.subscriber)
  return _internal_subscriber(index);
}
inline ::AcFunDanmu::Im::Basic_User* Cloud_Channel_ChannelSubscribersGetResposne::_internal_add_subscriber() {
  return subscriber_.Add();
}
inline ::AcFunDanmu::Im::Basic_User* Cloud_Channel_ChannelSubscribersGetResposne::add_subscriber() {
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Cloud.Channel.ChannelSubscribersGetResposne.subscriber)
  return _internal_add_subscriber();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_User >&
Cloud_Channel_ChannelSubscribersGetResposne::subscriber() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Cloud.Channel.ChannelSubscribersGetResposne.subscriber)
  return subscriber_;
}

// -------------------------------------------------------------------

// Cloud_Channel_ChannelBasicInfo

// string channelId = 1;
inline void Cloud_Channel_ChannelBasicInfo::clear_channelid() {
  channelid_.ClearToEmpty();
}
inline const std::string& Cloud_Channel_ChannelBasicInfo::channelid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Channel.ChannelBasicInfo.channelId)
  return _internal_channelid();
}
inline void Cloud_Channel_ChannelBasicInfo::set_channelid(const std::string& value) {
  _internal_set_channelid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Channel.ChannelBasicInfo.channelId)
}
inline std::string* Cloud_Channel_ChannelBasicInfo::mutable_channelid() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Channel.ChannelBasicInfo.channelId)
  return _internal_mutable_channelid();
}
inline const std::string& Cloud_Channel_ChannelBasicInfo::_internal_channelid() const {
  return channelid_.Get();
}
inline void Cloud_Channel_ChannelBasicInfo::_internal_set_channelid(const std::string& value) {
  
  channelid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Channel_ChannelBasicInfo::set_channelid(std::string&& value) {
  
  channelid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Channel.ChannelBasicInfo.channelId)
}
inline void Cloud_Channel_ChannelBasicInfo::set_channelid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channelid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Channel.ChannelBasicInfo.channelId)
}
inline void Cloud_Channel_ChannelBasicInfo::set_channelid(const char* value,
    size_t size) {
  
  channelid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Channel.ChannelBasicInfo.channelId)
}
inline std::string* Cloud_Channel_ChannelBasicInfo::_internal_mutable_channelid() {
  
  return channelid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Channel_ChannelBasicInfo::release_channelid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Channel.ChannelBasicInfo.channelId)
  return channelid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Channel_ChannelBasicInfo::set_allocated_channelid(std::string* channelid) {
  if (channelid != nullptr) {
    
  } else {
    
  }
  channelid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channelid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Channel.ChannelBasicInfo.channelId)
}

// int32 subscriberCount = 2;
inline void Cloud_Channel_ChannelBasicInfo::clear_subscribercount() {
  subscribercount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Cloud_Channel_ChannelBasicInfo::_internal_subscribercount() const {
  return subscribercount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Cloud_Channel_ChannelBasicInfo::subscribercount() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Channel.ChannelBasicInfo.subscriberCount)
  return _internal_subscribercount();
}
inline void Cloud_Channel_ChannelBasicInfo::_internal_set_subscribercount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  subscribercount_ = value;
}
inline void Cloud_Channel_ChannelBasicInfo::set_subscribercount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_subscribercount(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Channel.ChannelBasicInfo.subscriberCount)
}

// -------------------------------------------------------------------

// Cloud_Channel_UserActionInfo

// .AcFunDanmu.Im.Basic.User user = 1;
inline bool Cloud_Channel_UserActionInfo::_internal_has_user() const {
  return this != internal_default_instance() && user_ != nullptr;
}
inline bool Cloud_Channel_UserActionInfo::has_user() const {
  return _internal_has_user();
}
inline void Cloud_Channel_UserActionInfo::clear_user() {
  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
inline const ::AcFunDanmu::Im::Basic_User& Cloud_Channel_UserActionInfo::_internal_user() const {
  const ::AcFunDanmu::Im::Basic_User* p = user_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic_User&>(
      ::AcFunDanmu::Im::_Basic_User_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic_User& Cloud_Channel_UserActionInfo::user() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Channel.UserActionInfo.user)
  return _internal_user();
}
inline void Cloud_Channel_UserActionInfo::unsafe_arena_set_allocated_user(
    ::AcFunDanmu::Im::Basic_User* user) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_);
  }
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Channel.UserActionInfo.user)
}
inline ::AcFunDanmu::Im::Basic_User* Cloud_Channel_UserActionInfo::release_user() {
  
  ::AcFunDanmu::Im::Basic_User* temp = user_;
  user_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::Basic_User* Cloud_Channel_UserActionInfo::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Channel.UserActionInfo.user)
  
  ::AcFunDanmu::Im::Basic_User* temp = user_;
  user_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic_User* Cloud_Channel_UserActionInfo::_internal_mutable_user() {
  
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic_User>(GetArena());
    user_ = p;
  }
  return user_;
}
inline ::AcFunDanmu::Im::Basic_User* Cloud_Channel_UserActionInfo::mutable_user() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Channel.UserActionInfo.user)
  return _internal_mutable_user();
}
inline void Cloud_Channel_UserActionInfo::set_allocated_user(::AcFunDanmu::Im::Basic_User* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Channel.UserActionInfo.user)
}

// .AcFunDanmu.Im.Cloud.Channel.UserAction action = 2;
inline void Cloud_Channel_UserActionInfo::clear_action() {
  action_ = 0;
}
inline ::AcFunDanmu::Im::Cloud_Channel_UserAction Cloud_Channel_UserActionInfo::_internal_action() const {
  return static_cast< ::AcFunDanmu::Im::Cloud_Channel_UserAction >(action_);
}
inline ::AcFunDanmu::Im::Cloud_Channel_UserAction Cloud_Channel_UserActionInfo::action() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Channel.UserActionInfo.action)
  return _internal_action();
}
inline void Cloud_Channel_UserActionInfo::_internal_set_action(::AcFunDanmu::Im::Cloud_Channel_UserAction value) {
  
  action_ = value;
}
inline void Cloud_Channel_UserActionInfo::set_action(::AcFunDanmu::Im::Cloud_Channel_UserAction value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Channel.UserActionInfo.action)
}

// int64 timestamp = 3;
inline void Cloud_Channel_UserActionInfo::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Cloud_Channel_UserActionInfo::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Cloud_Channel_UserActionInfo::timestamp() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Channel.UserActionInfo.timestamp)
  return _internal_timestamp();
}
inline void Cloud_Channel_UserActionInfo::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void Cloud_Channel_UserActionInfo::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Channel.UserActionInfo.timestamp)
}

// -------------------------------------------------------------------

// Cloud_Channel_ChannelBasicInfoGetRequest

// repeated string channelId = 1;
inline int Cloud_Channel_ChannelBasicInfoGetRequest::_internal_channelid_size() const {
  return channelid_.size();
}
inline int Cloud_Channel_ChannelBasicInfoGetRequest::channelid_size() const {
  return _internal_channelid_size();
}
inline void Cloud_Channel_ChannelBasicInfoGetRequest::clear_channelid() {
  channelid_.Clear();
}
inline std::string* Cloud_Channel_ChannelBasicInfoGetRequest::add_channelid() {
  // @@protoc_insertion_point(field_add_mutable:AcFunDanmu.Im.Cloud.Channel.ChannelBasicInfoGetRequest.channelId)
  return _internal_add_channelid();
}
inline const std::string& Cloud_Channel_ChannelBasicInfoGetRequest::_internal_channelid(int index) const {
  return channelid_.Get(index);
}
inline const std::string& Cloud_Channel_ChannelBasicInfoGetRequest::channelid(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Channel.ChannelBasicInfoGetRequest.channelId)
  return _internal_channelid(index);
}
inline std::string* Cloud_Channel_ChannelBasicInfoGetRequest::mutable_channelid(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Channel.ChannelBasicInfoGetRequest.channelId)
  return channelid_.Mutable(index);
}
inline void Cloud_Channel_ChannelBasicInfoGetRequest::set_channelid(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Channel.ChannelBasicInfoGetRequest.channelId)
  channelid_.Mutable(index)->assign(value);
}
inline void Cloud_Channel_ChannelBasicInfoGetRequest::set_channelid(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Channel.ChannelBasicInfoGetRequest.channelId)
  channelid_.Mutable(index)->assign(std::move(value));
}
inline void Cloud_Channel_ChannelBasicInfoGetRequest::set_channelid(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  channelid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Channel.ChannelBasicInfoGetRequest.channelId)
}
inline void Cloud_Channel_ChannelBasicInfoGetRequest::set_channelid(int index, const char* value, size_t size) {
  channelid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Channel.ChannelBasicInfoGetRequest.channelId)
}
inline std::string* Cloud_Channel_ChannelBasicInfoGetRequest::_internal_add_channelid() {
  return channelid_.Add();
}
inline void Cloud_Channel_ChannelBasicInfoGetRequest::add_channelid(const std::string& value) {
  channelid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Cloud.Channel.ChannelBasicInfoGetRequest.channelId)
}
inline void Cloud_Channel_ChannelBasicInfoGetRequest::add_channelid(std::string&& value) {
  channelid_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Cloud.Channel.ChannelBasicInfoGetRequest.channelId)
}
inline void Cloud_Channel_ChannelBasicInfoGetRequest::add_channelid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  channelid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AcFunDanmu.Im.Cloud.Channel.ChannelBasicInfoGetRequest.channelId)
}
inline void Cloud_Channel_ChannelBasicInfoGetRequest::add_channelid(const char* value, size_t size) {
  channelid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AcFunDanmu.Im.Cloud.Channel.ChannelBasicInfoGetRequest.channelId)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Cloud_Channel_ChannelBasicInfoGetRequest::channelid() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Cloud.Channel.ChannelBasicInfoGetRequest.channelId)
  return channelid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Cloud_Channel_ChannelBasicInfoGetRequest::mutable_channelid() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Cloud.Channel.ChannelBasicInfoGetRequest.channelId)
  return &channelid_;
}

// -------------------------------------------------------------------

// Cloud_Channel_ChannelBasicInfoGetResponse

// repeated .AcFunDanmu.Im.Cloud.Channel.ChannelBasicInfo basicInfo = 1;
inline int Cloud_Channel_ChannelBasicInfoGetResponse::_internal_basicinfo_size() const {
  return basicinfo_.size();
}
inline int Cloud_Channel_ChannelBasicInfoGetResponse::basicinfo_size() const {
  return _internal_basicinfo_size();
}
inline void Cloud_Channel_ChannelBasicInfoGetResponse::clear_basicinfo() {
  basicinfo_.Clear();
}
inline ::AcFunDanmu::Im::Cloud_Channel_ChannelBasicInfo* Cloud_Channel_ChannelBasicInfoGetResponse::mutable_basicinfo(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Channel.ChannelBasicInfoGetResponse.basicInfo)
  return basicinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud_Channel_ChannelBasicInfo >*
Cloud_Channel_ChannelBasicInfoGetResponse::mutable_basicinfo() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Cloud.Channel.ChannelBasicInfoGetResponse.basicInfo)
  return &basicinfo_;
}
inline const ::AcFunDanmu::Im::Cloud_Channel_ChannelBasicInfo& Cloud_Channel_ChannelBasicInfoGetResponse::_internal_basicinfo(int index) const {
  return basicinfo_.Get(index);
}
inline const ::AcFunDanmu::Im::Cloud_Channel_ChannelBasicInfo& Cloud_Channel_ChannelBasicInfoGetResponse::basicinfo(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Channel.ChannelBasicInfoGetResponse.basicInfo)
  return _internal_basicinfo(index);
}
inline ::AcFunDanmu::Im::Cloud_Channel_ChannelBasicInfo* Cloud_Channel_ChannelBasicInfoGetResponse::_internal_add_basicinfo() {
  return basicinfo_.Add();
}
inline ::AcFunDanmu::Im::Cloud_Channel_ChannelBasicInfo* Cloud_Channel_ChannelBasicInfoGetResponse::add_basicinfo() {
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Cloud.Channel.ChannelBasicInfoGetResponse.basicInfo)
  return _internal_add_basicinfo();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud_Channel_ChannelBasicInfo >&
Cloud_Channel_ChannelBasicInfoGetResponse::basicinfo() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Cloud.Channel.ChannelBasicInfoGetResponse.basicInfo)
  return basicinfo_;
}

// -------------------------------------------------------------------

// Cloud_Channel_ChannelHeartbeatRequest

// repeated string channelId = 1;
inline int Cloud_Channel_ChannelHeartbeatRequest::_internal_channelid_size() const {
  return channelid_.size();
}
inline int Cloud_Channel_ChannelHeartbeatRequest::channelid_size() const {
  return _internal_channelid_size();
}
inline void Cloud_Channel_ChannelHeartbeatRequest::clear_channelid() {
  channelid_.Clear();
}
inline std::string* Cloud_Channel_ChannelHeartbeatRequest::add_channelid() {
  // @@protoc_insertion_point(field_add_mutable:AcFunDanmu.Im.Cloud.Channel.ChannelHeartbeatRequest.channelId)
  return _internal_add_channelid();
}
inline const std::string& Cloud_Channel_ChannelHeartbeatRequest::_internal_channelid(int index) const {
  return channelid_.Get(index);
}
inline const std::string& Cloud_Channel_ChannelHeartbeatRequest::channelid(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Channel.ChannelHeartbeatRequest.channelId)
  return _internal_channelid(index);
}
inline std::string* Cloud_Channel_ChannelHeartbeatRequest::mutable_channelid(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Channel.ChannelHeartbeatRequest.channelId)
  return channelid_.Mutable(index);
}
inline void Cloud_Channel_ChannelHeartbeatRequest::set_channelid(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Channel.ChannelHeartbeatRequest.channelId)
  channelid_.Mutable(index)->assign(value);
}
inline void Cloud_Channel_ChannelHeartbeatRequest::set_channelid(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Channel.ChannelHeartbeatRequest.channelId)
  channelid_.Mutable(index)->assign(std::move(value));
}
inline void Cloud_Channel_ChannelHeartbeatRequest::set_channelid(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  channelid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Channel.ChannelHeartbeatRequest.channelId)
}
inline void Cloud_Channel_ChannelHeartbeatRequest::set_channelid(int index, const char* value, size_t size) {
  channelid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Channel.ChannelHeartbeatRequest.channelId)
}
inline std::string* Cloud_Channel_ChannelHeartbeatRequest::_internal_add_channelid() {
  return channelid_.Add();
}
inline void Cloud_Channel_ChannelHeartbeatRequest::add_channelid(const std::string& value) {
  channelid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Cloud.Channel.ChannelHeartbeatRequest.channelId)
}
inline void Cloud_Channel_ChannelHeartbeatRequest::add_channelid(std::string&& value) {
  channelid_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Cloud.Channel.ChannelHeartbeatRequest.channelId)
}
inline void Cloud_Channel_ChannelHeartbeatRequest::add_channelid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  channelid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AcFunDanmu.Im.Cloud.Channel.ChannelHeartbeatRequest.channelId)
}
inline void Cloud_Channel_ChannelHeartbeatRequest::add_channelid(const char* value, size_t size) {
  channelid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AcFunDanmu.Im.Cloud.Channel.ChannelHeartbeatRequest.channelId)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Cloud_Channel_ChannelHeartbeatRequest::channelid() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Cloud.Channel.ChannelHeartbeatRequest.channelId)
  return channelid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Cloud_Channel_ChannelHeartbeatRequest::mutable_channelid() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Cloud.Channel.ChannelHeartbeatRequest.channelId)
  return &channelid_;
}

// -------------------------------------------------------------------

// Cloud_Channel_ChannelHeartbeatResponse

// repeated string notExistChannelId = 1;
inline int Cloud_Channel_ChannelHeartbeatResponse::_internal_notexistchannelid_size() const {
  return notexistchannelid_.size();
}
inline int Cloud_Channel_ChannelHeartbeatResponse::notexistchannelid_size() const {
  return _internal_notexistchannelid_size();
}
inline void Cloud_Channel_ChannelHeartbeatResponse::clear_notexistchannelid() {
  notexistchannelid_.Clear();
}
inline std::string* Cloud_Channel_ChannelHeartbeatResponse::add_notexistchannelid() {
  // @@protoc_insertion_point(field_add_mutable:AcFunDanmu.Im.Cloud.Channel.ChannelHeartbeatResponse.notExistChannelId)
  return _internal_add_notexistchannelid();
}
inline const std::string& Cloud_Channel_ChannelHeartbeatResponse::_internal_notexistchannelid(int index) const {
  return notexistchannelid_.Get(index);
}
inline const std::string& Cloud_Channel_ChannelHeartbeatResponse::notexistchannelid(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Channel.ChannelHeartbeatResponse.notExistChannelId)
  return _internal_notexistchannelid(index);
}
inline std::string* Cloud_Channel_ChannelHeartbeatResponse::mutable_notexistchannelid(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Channel.ChannelHeartbeatResponse.notExistChannelId)
  return notexistchannelid_.Mutable(index);
}
inline void Cloud_Channel_ChannelHeartbeatResponse::set_notexistchannelid(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Channel.ChannelHeartbeatResponse.notExistChannelId)
  notexistchannelid_.Mutable(index)->assign(value);
}
inline void Cloud_Channel_ChannelHeartbeatResponse::set_notexistchannelid(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Channel.ChannelHeartbeatResponse.notExistChannelId)
  notexistchannelid_.Mutable(index)->assign(std::move(value));
}
inline void Cloud_Channel_ChannelHeartbeatResponse::set_notexistchannelid(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  notexistchannelid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Channel.ChannelHeartbeatResponse.notExistChannelId)
}
inline void Cloud_Channel_ChannelHeartbeatResponse::set_notexistchannelid(int index, const char* value, size_t size) {
  notexistchannelid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Channel.ChannelHeartbeatResponse.notExistChannelId)
}
inline std::string* Cloud_Channel_ChannelHeartbeatResponse::_internal_add_notexistchannelid() {
  return notexistchannelid_.Add();
}
inline void Cloud_Channel_ChannelHeartbeatResponse::add_notexistchannelid(const std::string& value) {
  notexistchannelid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Cloud.Channel.ChannelHeartbeatResponse.notExistChannelId)
}
inline void Cloud_Channel_ChannelHeartbeatResponse::add_notexistchannelid(std::string&& value) {
  notexistchannelid_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Cloud.Channel.ChannelHeartbeatResponse.notExistChannelId)
}
inline void Cloud_Channel_ChannelHeartbeatResponse::add_notexistchannelid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  notexistchannelid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AcFunDanmu.Im.Cloud.Channel.ChannelHeartbeatResponse.notExistChannelId)
}
inline void Cloud_Channel_ChannelHeartbeatResponse::add_notexistchannelid(const char* value, size_t size) {
  notexistchannelid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AcFunDanmu.Im.Cloud.Channel.ChannelHeartbeatResponse.notExistChannelId)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Cloud_Channel_ChannelHeartbeatResponse::notexistchannelid() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Cloud.Channel.ChannelHeartbeatResponse.notExistChannelId)
  return notexistchannelid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Cloud_Channel_ChannelHeartbeatResponse::mutable_notexistchannelid() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Cloud.Channel.ChannelHeartbeatResponse.notExistChannelId)
  return &notexistchannelid_;
}

// -------------------------------------------------------------------

// Cloud_Channel_ChannelBasicInfoNotify

// .AcFunDanmu.Im.Cloud.Channel.UserActionInfo userActionInfo = 1;
inline bool Cloud_Channel_ChannelBasicInfoNotify::_internal_has_useractioninfo() const {
  return this != internal_default_instance() && useractioninfo_ != nullptr;
}
inline bool Cloud_Channel_ChannelBasicInfoNotify::has_useractioninfo() const {
  return _internal_has_useractioninfo();
}
inline void Cloud_Channel_ChannelBasicInfoNotify::clear_useractioninfo() {
  if (GetArena() == nullptr && useractioninfo_ != nullptr) {
    delete useractioninfo_;
  }
  useractioninfo_ = nullptr;
}
inline const ::AcFunDanmu::Im::Cloud_Channel_UserActionInfo& Cloud_Channel_ChannelBasicInfoNotify::_internal_useractioninfo() const {
  const ::AcFunDanmu::Im::Cloud_Channel_UserActionInfo* p = useractioninfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Cloud_Channel_UserActionInfo&>(
      ::AcFunDanmu::Im::_Cloud_Channel_UserActionInfo_default_instance_);
}
inline const ::AcFunDanmu::Im::Cloud_Channel_UserActionInfo& Cloud_Channel_ChannelBasicInfoNotify::useractioninfo() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Channel.ChannelBasicInfoNotify.userActionInfo)
  return _internal_useractioninfo();
}
inline void Cloud_Channel_ChannelBasicInfoNotify::unsafe_arena_set_allocated_useractioninfo(
    ::AcFunDanmu::Im::Cloud_Channel_UserActionInfo* useractioninfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(useractioninfo_);
  }
  useractioninfo_ = useractioninfo;
  if (useractioninfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Channel.ChannelBasicInfoNotify.userActionInfo)
}
inline ::AcFunDanmu::Im::Cloud_Channel_UserActionInfo* Cloud_Channel_ChannelBasicInfoNotify::release_useractioninfo() {
  
  ::AcFunDanmu::Im::Cloud_Channel_UserActionInfo* temp = useractioninfo_;
  useractioninfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::Cloud_Channel_UserActionInfo* Cloud_Channel_ChannelBasicInfoNotify::unsafe_arena_release_useractioninfo() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Channel.ChannelBasicInfoNotify.userActionInfo)
  
  ::AcFunDanmu::Im::Cloud_Channel_UserActionInfo* temp = useractioninfo_;
  useractioninfo_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Cloud_Channel_UserActionInfo* Cloud_Channel_ChannelBasicInfoNotify::_internal_mutable_useractioninfo() {
  
  if (useractioninfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Channel_UserActionInfo>(GetArena());
    useractioninfo_ = p;
  }
  return useractioninfo_;
}
inline ::AcFunDanmu::Im::Cloud_Channel_UserActionInfo* Cloud_Channel_ChannelBasicInfoNotify::mutable_useractioninfo() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Channel.ChannelBasicInfoNotify.userActionInfo)
  return _internal_mutable_useractioninfo();
}
inline void Cloud_Channel_ChannelBasicInfoNotify::set_allocated_useractioninfo(::AcFunDanmu::Im::Cloud_Channel_UserActionInfo* useractioninfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete useractioninfo_;
  }
  if (useractioninfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(useractioninfo);
    if (message_arena != submessage_arena) {
      useractioninfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, useractioninfo, submessage_arena);
    }
    
  } else {
    
  }
  useractioninfo_ = useractioninfo;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Channel.ChannelBasicInfoNotify.userActionInfo)
}

// .AcFunDanmu.Im.Cloud.Channel.ChannelBasicInfo basicInfo = 2;
inline bool Cloud_Channel_ChannelBasicInfoNotify::_internal_has_basicinfo() const {
  return this != internal_default_instance() && basicinfo_ != nullptr;
}
inline bool Cloud_Channel_ChannelBasicInfoNotify::has_basicinfo() const {
  return _internal_has_basicinfo();
}
inline void Cloud_Channel_ChannelBasicInfoNotify::clear_basicinfo() {
  if (GetArena() == nullptr && basicinfo_ != nullptr) {
    delete basicinfo_;
  }
  basicinfo_ = nullptr;
}
inline const ::AcFunDanmu::Im::Cloud_Channel_ChannelBasicInfo& Cloud_Channel_ChannelBasicInfoNotify::_internal_basicinfo() const {
  const ::AcFunDanmu::Im::Cloud_Channel_ChannelBasicInfo* p = basicinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Cloud_Channel_ChannelBasicInfo&>(
      ::AcFunDanmu::Im::_Cloud_Channel_ChannelBasicInfo_default_instance_);
}
inline const ::AcFunDanmu::Im::Cloud_Channel_ChannelBasicInfo& Cloud_Channel_ChannelBasicInfoNotify::basicinfo() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Channel.ChannelBasicInfoNotify.basicInfo)
  return _internal_basicinfo();
}
inline void Cloud_Channel_ChannelBasicInfoNotify::unsafe_arena_set_allocated_basicinfo(
    ::AcFunDanmu::Im::Cloud_Channel_ChannelBasicInfo* basicinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(basicinfo_);
  }
  basicinfo_ = basicinfo;
  if (basicinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Channel.ChannelBasicInfoNotify.basicInfo)
}
inline ::AcFunDanmu::Im::Cloud_Channel_ChannelBasicInfo* Cloud_Channel_ChannelBasicInfoNotify::release_basicinfo() {
  
  ::AcFunDanmu::Im::Cloud_Channel_ChannelBasicInfo* temp = basicinfo_;
  basicinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::Cloud_Channel_ChannelBasicInfo* Cloud_Channel_ChannelBasicInfoNotify::unsafe_arena_release_basicinfo() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Channel.ChannelBasicInfoNotify.basicInfo)
  
  ::AcFunDanmu::Im::Cloud_Channel_ChannelBasicInfo* temp = basicinfo_;
  basicinfo_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Cloud_Channel_ChannelBasicInfo* Cloud_Channel_ChannelBasicInfoNotify::_internal_mutable_basicinfo() {
  
  if (basicinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Channel_ChannelBasicInfo>(GetArena());
    basicinfo_ = p;
  }
  return basicinfo_;
}
inline ::AcFunDanmu::Im::Cloud_Channel_ChannelBasicInfo* Cloud_Channel_ChannelBasicInfoNotify::mutable_basicinfo() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Channel.ChannelBasicInfoNotify.basicInfo)
  return _internal_mutable_basicinfo();
}
inline void Cloud_Channel_ChannelBasicInfoNotify::set_allocated_basicinfo(::AcFunDanmu::Im::Cloud_Channel_ChannelBasicInfo* basicinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete basicinfo_;
  }
  if (basicinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(basicinfo);
    if (message_arena != submessage_arena) {
      basicinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, basicinfo, submessage_arena);
    }
    
  } else {
    
  }
  basicinfo_ = basicinfo;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Channel.ChannelBasicInfoNotify.basicInfo)
}

// -------------------------------------------------------------------

// Cloud_Channel

// -------------------------------------------------------------------

// Cloud_Config_ClientConfigGetRequest

// uint32 version = 1;
inline void Cloud_Config_ClientConfigGetRequest::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cloud_Config_ClientConfigGetRequest::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cloud_Config_ClientConfigGetRequest::version() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Config.ClientConfigGetRequest.version)
  return _internal_version();
}
inline void Cloud_Config_ClientConfigGetRequest::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
}
inline void Cloud_Config_ClientConfigGetRequest::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Config.ClientConfigGetRequest.version)
}

// -------------------------------------------------------------------

// Cloud_Config_ClientConfigGetResponse

// uint32 version = 1;
inline void Cloud_Config_ClientConfigGetResponse::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cloud_Config_ClientConfigGetResponse::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cloud_Config_ClientConfigGetResponse::version() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Config.ClientConfigGetResponse.version)
  return _internal_version();
}
inline void Cloud_Config_ClientConfigGetResponse::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
}
inline void Cloud_Config_ClientConfigGetResponse::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Config.ClientConfigGetResponse.version)
}

// .AcFunDanmu.Im.Cloud.Config.ClientConfig clientConfig = 2;
inline bool Cloud_Config_ClientConfigGetResponse::_internal_has_clientconfig() const {
  return this != internal_default_instance() && clientconfig_ != nullptr;
}
inline bool Cloud_Config_ClientConfigGetResponse::has_clientconfig() const {
  return _internal_has_clientconfig();
}
inline void Cloud_Config_ClientConfigGetResponse::clear_clientconfig() {
  if (GetArena() == nullptr && clientconfig_ != nullptr) {
    delete clientconfig_;
  }
  clientconfig_ = nullptr;
}
inline const ::AcFunDanmu::Im::Cloud_Config_ClientConfig& Cloud_Config_ClientConfigGetResponse::_internal_clientconfig() const {
  const ::AcFunDanmu::Im::Cloud_Config_ClientConfig* p = clientconfig_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Cloud_Config_ClientConfig&>(
      ::AcFunDanmu::Im::_Cloud_Config_ClientConfig_default_instance_);
}
inline const ::AcFunDanmu::Im::Cloud_Config_ClientConfig& Cloud_Config_ClientConfigGetResponse::clientconfig() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Config.ClientConfigGetResponse.clientConfig)
  return _internal_clientconfig();
}
inline void Cloud_Config_ClientConfigGetResponse::unsafe_arena_set_allocated_clientconfig(
    ::AcFunDanmu::Im::Cloud_Config_ClientConfig* clientconfig) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(clientconfig_);
  }
  clientconfig_ = clientconfig;
  if (clientconfig) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Config.ClientConfigGetResponse.clientConfig)
}
inline ::AcFunDanmu::Im::Cloud_Config_ClientConfig* Cloud_Config_ClientConfigGetResponse::release_clientconfig() {
  
  ::AcFunDanmu::Im::Cloud_Config_ClientConfig* temp = clientconfig_;
  clientconfig_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::Cloud_Config_ClientConfig* Cloud_Config_ClientConfigGetResponse::unsafe_arena_release_clientconfig() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Config.ClientConfigGetResponse.clientConfig)
  
  ::AcFunDanmu::Im::Cloud_Config_ClientConfig* temp = clientconfig_;
  clientconfig_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Cloud_Config_ClientConfig* Cloud_Config_ClientConfigGetResponse::_internal_mutable_clientconfig() {
  
  if (clientconfig_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Config_ClientConfig>(GetArena());
    clientconfig_ = p;
  }
  return clientconfig_;
}
inline ::AcFunDanmu::Im::Cloud_Config_ClientConfig* Cloud_Config_ClientConfigGetResponse::mutable_clientconfig() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Config.ClientConfigGetResponse.clientConfig)
  return _internal_mutable_clientconfig();
}
inline void Cloud_Config_ClientConfigGetResponse::set_allocated_clientconfig(::AcFunDanmu::Im::Cloud_Config_ClientConfig* clientconfig) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete clientconfig_;
  }
  if (clientconfig) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(clientconfig);
    if (message_arena != submessage_arena) {
      clientconfig = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clientconfig, submessage_arena);
    }
    
  } else {
    
  }
  clientconfig_ = clientconfig;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Config.ClientConfigGetResponse.clientConfig)
}

// -------------------------------------------------------------------

// Cloud_Config_NetworkQualityDetectionConfig

// string detectionDomain = 1;
inline void Cloud_Config_NetworkQualityDetectionConfig::clear_detectiondomain() {
  detectiondomain_.ClearToEmpty();
}
inline const std::string& Cloud_Config_NetworkQualityDetectionConfig::detectiondomain() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Config.NetworkQualityDetectionConfig.detectionDomain)
  return _internal_detectiondomain();
}
inline void Cloud_Config_NetworkQualityDetectionConfig::set_detectiondomain(const std::string& value) {
  _internal_set_detectiondomain(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Config.NetworkQualityDetectionConfig.detectionDomain)
}
inline std::string* Cloud_Config_NetworkQualityDetectionConfig::mutable_detectiondomain() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Config.NetworkQualityDetectionConfig.detectionDomain)
  return _internal_mutable_detectiondomain();
}
inline const std::string& Cloud_Config_NetworkQualityDetectionConfig::_internal_detectiondomain() const {
  return detectiondomain_.Get();
}
inline void Cloud_Config_NetworkQualityDetectionConfig::_internal_set_detectiondomain(const std::string& value) {
  
  detectiondomain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Config_NetworkQualityDetectionConfig::set_detectiondomain(std::string&& value) {
  
  detectiondomain_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Config.NetworkQualityDetectionConfig.detectionDomain)
}
inline void Cloud_Config_NetworkQualityDetectionConfig::set_detectiondomain(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  detectiondomain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Config.NetworkQualityDetectionConfig.detectionDomain)
}
inline void Cloud_Config_NetworkQualityDetectionConfig::set_detectiondomain(const char* value,
    size_t size) {
  
  detectiondomain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Config.NetworkQualityDetectionConfig.detectionDomain)
}
inline std::string* Cloud_Config_NetworkQualityDetectionConfig::_internal_mutable_detectiondomain() {
  
  return detectiondomain_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Config_NetworkQualityDetectionConfig::release_detectiondomain() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Config.NetworkQualityDetectionConfig.detectionDomain)
  return detectiondomain_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Config_NetworkQualityDetectionConfig::set_allocated_detectiondomain(std::string* detectiondomain) {
  if (detectiondomain != nullptr) {
    
  } else {
    
  }
  detectiondomain_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), detectiondomain,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Config.NetworkQualityDetectionConfig.detectionDomain)
}

// int32 detectionInvervalSec = 2;
inline void Cloud_Config_NetworkQualityDetectionConfig::clear_detectioninvervalsec() {
  detectioninvervalsec_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Cloud_Config_NetworkQualityDetectionConfig::_internal_detectioninvervalsec() const {
  return detectioninvervalsec_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Cloud_Config_NetworkQualityDetectionConfig::detectioninvervalsec() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Config.NetworkQualityDetectionConfig.detectionInvervalSec)
  return _internal_detectioninvervalsec();
}
inline void Cloud_Config_NetworkQualityDetectionConfig::_internal_set_detectioninvervalsec(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  detectioninvervalsec_ = value;
}
inline void Cloud_Config_NetworkQualityDetectionConfig::set_detectioninvervalsec(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_detectioninvervalsec(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Config.NetworkQualityDetectionConfig.detectionInvervalSec)
}

// -------------------------------------------------------------------

// Cloud_Config_ClientConfig

// int32 fetchUserStatusInterval = 1;
inline void Cloud_Config_ClientConfig::clear_fetchuserstatusinterval() {
  fetchuserstatusinterval_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Cloud_Config_ClientConfig::_internal_fetchuserstatusinterval() const {
  return fetchuserstatusinterval_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Cloud_Config_ClientConfig::fetchuserstatusinterval() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Config.ClientConfig.fetchUserStatusInterval)
  return _internal_fetchuserstatusinterval();
}
inline void Cloud_Config_ClientConfig::_internal_set_fetchuserstatusinterval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fetchuserstatusinterval_ = value;
}
inline void Cloud_Config_ClientConfig::set_fetchuserstatusinterval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fetchuserstatusinterval(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Config.ClientConfig.fetchUserStatusInterval)
}

// int32 channelUserHeartbeatInterval = 2;
inline void Cloud_Config_ClientConfig::clear_channeluserheartbeatinterval() {
  channeluserheartbeatinterval_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Cloud_Config_ClientConfig::_internal_channeluserheartbeatinterval() const {
  return channeluserheartbeatinterval_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Cloud_Config_ClientConfig::channeluserheartbeatinterval() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Config.ClientConfig.channelUserHeartbeatInterval)
  return _internal_channeluserheartbeatinterval();
}
inline void Cloud_Config_ClientConfig::_internal_set_channeluserheartbeatinterval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  channeluserheartbeatinterval_ = value;
}
inline void Cloud_Config_ClientConfig::set_channeluserheartbeatinterval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channeluserheartbeatinterval(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Config.ClientConfig.channelUserHeartbeatInterval)
}

// .AcFunDanmu.Im.Cloud.Config.NetworkQualityDetectionConfig networkQualityDetectionConfig = 3;
inline bool Cloud_Config_ClientConfig::_internal_has_networkqualitydetectionconfig() const {
  return this != internal_default_instance() && networkqualitydetectionconfig_ != nullptr;
}
inline bool Cloud_Config_ClientConfig::has_networkqualitydetectionconfig() const {
  return _internal_has_networkqualitydetectionconfig();
}
inline void Cloud_Config_ClientConfig::clear_networkqualitydetectionconfig() {
  if (GetArena() == nullptr && networkqualitydetectionconfig_ != nullptr) {
    delete networkqualitydetectionconfig_;
  }
  networkqualitydetectionconfig_ = nullptr;
}
inline const ::AcFunDanmu::Im::Cloud_Config_NetworkQualityDetectionConfig& Cloud_Config_ClientConfig::_internal_networkqualitydetectionconfig() const {
  const ::AcFunDanmu::Im::Cloud_Config_NetworkQualityDetectionConfig* p = networkqualitydetectionconfig_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Cloud_Config_NetworkQualityDetectionConfig&>(
      ::AcFunDanmu::Im::_Cloud_Config_NetworkQualityDetectionConfig_default_instance_);
}
inline const ::AcFunDanmu::Im::Cloud_Config_NetworkQualityDetectionConfig& Cloud_Config_ClientConfig::networkqualitydetectionconfig() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Config.ClientConfig.networkQualityDetectionConfig)
  return _internal_networkqualitydetectionconfig();
}
inline void Cloud_Config_ClientConfig::unsafe_arena_set_allocated_networkqualitydetectionconfig(
    ::AcFunDanmu::Im::Cloud_Config_NetworkQualityDetectionConfig* networkqualitydetectionconfig) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(networkqualitydetectionconfig_);
  }
  networkqualitydetectionconfig_ = networkqualitydetectionconfig;
  if (networkqualitydetectionconfig) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Config.ClientConfig.networkQualityDetectionConfig)
}
inline ::AcFunDanmu::Im::Cloud_Config_NetworkQualityDetectionConfig* Cloud_Config_ClientConfig::release_networkqualitydetectionconfig() {
  
  ::AcFunDanmu::Im::Cloud_Config_NetworkQualityDetectionConfig* temp = networkqualitydetectionconfig_;
  networkqualitydetectionconfig_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::Cloud_Config_NetworkQualityDetectionConfig* Cloud_Config_ClientConfig::unsafe_arena_release_networkqualitydetectionconfig() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Config.ClientConfig.networkQualityDetectionConfig)
  
  ::AcFunDanmu::Im::Cloud_Config_NetworkQualityDetectionConfig* temp = networkqualitydetectionconfig_;
  networkqualitydetectionconfig_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Cloud_Config_NetworkQualityDetectionConfig* Cloud_Config_ClientConfig::_internal_mutable_networkqualitydetectionconfig() {
  
  if (networkqualitydetectionconfig_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Config_NetworkQualityDetectionConfig>(GetArena());
    networkqualitydetectionconfig_ = p;
  }
  return networkqualitydetectionconfig_;
}
inline ::AcFunDanmu::Im::Cloud_Config_NetworkQualityDetectionConfig* Cloud_Config_ClientConfig::mutable_networkqualitydetectionconfig() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Config.ClientConfig.networkQualityDetectionConfig)
  return _internal_mutable_networkqualitydetectionconfig();
}
inline void Cloud_Config_ClientConfig::set_allocated_networkqualitydetectionconfig(::AcFunDanmu::Im::Cloud_Config_NetworkQualityDetectionConfig* networkqualitydetectionconfig) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete networkqualitydetectionconfig_;
  }
  if (networkqualitydetectionconfig) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(networkqualitydetectionconfig);
    if (message_arena != submessage_arena) {
      networkqualitydetectionconfig = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, networkqualitydetectionconfig, submessage_arena);
    }
    
  } else {
    
  }
  networkqualitydetectionconfig_ = networkqualitydetectionconfig;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Config.ClientConfig.networkQualityDetectionConfig)
}

// int32 inputtingTipDisplayInterval = 4;
inline void Cloud_Config_ClientConfig::clear_inputtingtipdisplayinterval() {
  inputtingtipdisplayinterval_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Cloud_Config_ClientConfig::_internal_inputtingtipdisplayinterval() const {
  return inputtingtipdisplayinterval_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Cloud_Config_ClientConfig::inputtingtipdisplayinterval() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Config.ClientConfig.inputtingTipDisplayInterval)
  return _internal_inputtingtipdisplayinterval();
}
inline void Cloud_Config_ClientConfig::_internal_set_inputtingtipdisplayinterval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  inputtingtipdisplayinterval_ = value;
}
inline void Cloud_Config_ClientConfig::set_inputtingtipdisplayinterval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_inputtingtipdisplayinterval(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Config.ClientConfig.inputtingTipDisplayInterval)
}

// int32 batchSendMessageMaxCount = 5;
inline void Cloud_Config_ClientConfig::clear_batchsendmessagemaxcount() {
  batchsendmessagemaxcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Cloud_Config_ClientConfig::_internal_batchsendmessagemaxcount() const {
  return batchsendmessagemaxcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Cloud_Config_ClientConfig::batchsendmessagemaxcount() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Config.ClientConfig.batchSendMessageMaxCount)
  return _internal_batchsendmessagemaxcount();
}
inline void Cloud_Config_ClientConfig::_internal_set_batchsendmessagemaxcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  batchsendmessagemaxcount_ = value;
}
inline void Cloud_Config_ClientConfig::set_batchsendmessagemaxcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_batchsendmessagemaxcount(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Config.ClientConfig.batchSendMessageMaxCount)
}

// string resourceUploadingDomain = 6;
inline void Cloud_Config_ClientConfig::clear_resourceuploadingdomain() {
  resourceuploadingdomain_.ClearToEmpty();
}
inline const std::string& Cloud_Config_ClientConfig::resourceuploadingdomain() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Config.ClientConfig.resourceUploadingDomain)
  return _internal_resourceuploadingdomain();
}
inline void Cloud_Config_ClientConfig::set_resourceuploadingdomain(const std::string& value) {
  _internal_set_resourceuploadingdomain(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Config.ClientConfig.resourceUploadingDomain)
}
inline std::string* Cloud_Config_ClientConfig::mutable_resourceuploadingdomain() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Config.ClientConfig.resourceUploadingDomain)
  return _internal_mutable_resourceuploadingdomain();
}
inline const std::string& Cloud_Config_ClientConfig::_internal_resourceuploadingdomain() const {
  return resourceuploadingdomain_.Get();
}
inline void Cloud_Config_ClientConfig::_internal_set_resourceuploadingdomain(const std::string& value) {
  
  resourceuploadingdomain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Config_ClientConfig::set_resourceuploadingdomain(std::string&& value) {
  
  resourceuploadingdomain_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Config.ClientConfig.resourceUploadingDomain)
}
inline void Cloud_Config_ClientConfig::set_resourceuploadingdomain(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  resourceuploadingdomain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Config.ClientConfig.resourceUploadingDomain)
}
inline void Cloud_Config_ClientConfig::set_resourceuploadingdomain(const char* value,
    size_t size) {
  
  resourceuploadingdomain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Config.ClientConfig.resourceUploadingDomain)
}
inline std::string* Cloud_Config_ClientConfig::_internal_mutable_resourceuploadingdomain() {
  
  return resourceuploadingdomain_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Config_ClientConfig::release_resourceuploadingdomain() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Config.ClientConfig.resourceUploadingDomain)
  return resourceuploadingdomain_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Config_ClientConfig::set_allocated_resourceuploadingdomain(std::string* resourceuploadingdomain) {
  if (resourceuploadingdomain != nullptr) {
    
  } else {
    
  }
  resourceuploadingdomain_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resourceuploadingdomain,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Config.ClientConfig.resourceUploadingDomain)
}

// -------------------------------------------------------------------

// Cloud_Config

// -------------------------------------------------------------------

// Cloud_Profile_UserOnlineStatus

// .AcFunDanmu.Im.Basic.User user = 1;
inline bool Cloud_Profile_UserOnlineStatus::_internal_has_user() const {
  return this != internal_default_instance() && user_ != nullptr;
}
inline bool Cloud_Profile_UserOnlineStatus::has_user() const {
  return _internal_has_user();
}
inline void Cloud_Profile_UserOnlineStatus::clear_user() {
  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
inline const ::AcFunDanmu::Im::Basic_User& Cloud_Profile_UserOnlineStatus::_internal_user() const {
  const ::AcFunDanmu::Im::Basic_User* p = user_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic_User&>(
      ::AcFunDanmu::Im::_Basic_User_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic_User& Cloud_Profile_UserOnlineStatus::user() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Profile.UserOnlineStatus.user)
  return _internal_user();
}
inline void Cloud_Profile_UserOnlineStatus::unsafe_arena_set_allocated_user(
    ::AcFunDanmu::Im::Basic_User* user) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_);
  }
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Profile.UserOnlineStatus.user)
}
inline ::AcFunDanmu::Im::Basic_User* Cloud_Profile_UserOnlineStatus::release_user() {
  
  ::AcFunDanmu::Im::Basic_User* temp = user_;
  user_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::Basic_User* Cloud_Profile_UserOnlineStatus::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Profile.UserOnlineStatus.user)
  
  ::AcFunDanmu::Im::Basic_User* temp = user_;
  user_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic_User* Cloud_Profile_UserOnlineStatus::_internal_mutable_user() {
  
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic_User>(GetArena());
    user_ = p;
  }
  return user_;
}
inline ::AcFunDanmu::Im::Basic_User* Cloud_Profile_UserOnlineStatus::mutable_user() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Profile.UserOnlineStatus.user)
  return _internal_mutable_user();
}
inline void Cloud_Profile_UserOnlineStatus::set_allocated_user(::AcFunDanmu::Im::Basic_User* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Profile.UserOnlineStatus.user)
}

// int64 lastOfflineTime = 2;
inline void Cloud_Profile_UserOnlineStatus::clear_lastofflinetime() {
  lastofflinetime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Cloud_Profile_UserOnlineStatus::_internal_lastofflinetime() const {
  return lastofflinetime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Cloud_Profile_UserOnlineStatus::lastofflinetime() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Profile.UserOnlineStatus.lastOfflineTime)
  return _internal_lastofflinetime();
}
inline void Cloud_Profile_UserOnlineStatus::_internal_set_lastofflinetime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  lastofflinetime_ = value;
}
inline void Cloud_Profile_UserOnlineStatus::set_lastofflinetime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_lastofflinetime(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Profile.UserOnlineStatus.lastOfflineTime)
}

// .AcFunDanmu.Im.Cloud.Profile.UserOnlineStatus.Status status = 3;
inline void Cloud_Profile_UserOnlineStatus::clear_status() {
  status_ = 0;
}
inline ::AcFunDanmu::Im::Cloud_Profile_UserOnlineStatus_Status Cloud_Profile_UserOnlineStatus::_internal_status() const {
  return static_cast< ::AcFunDanmu::Im::Cloud_Profile_UserOnlineStatus_Status >(status_);
}
inline ::AcFunDanmu::Im::Cloud_Profile_UserOnlineStatus_Status Cloud_Profile_UserOnlineStatus::status() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Profile.UserOnlineStatus.status)
  return _internal_status();
}
inline void Cloud_Profile_UserOnlineStatus::_internal_set_status(::AcFunDanmu::Im::Cloud_Profile_UserOnlineStatus_Status value) {
  
  status_ = value;
}
inline void Cloud_Profile_UserOnlineStatus::set_status(::AcFunDanmu::Im::Cloud_Profile_UserOnlineStatus_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Profile.UserOnlineStatus.status)
}

// -------------------------------------------------------------------

// Cloud_Profile_ProfileBatchOnlineTimeRequest

// repeated .AcFunDanmu.Im.Basic.User user = 1;
inline int Cloud_Profile_ProfileBatchOnlineTimeRequest::_internal_user_size() const {
  return user_.size();
}
inline int Cloud_Profile_ProfileBatchOnlineTimeRequest::user_size() const {
  return _internal_user_size();
}
inline void Cloud_Profile_ProfileBatchOnlineTimeRequest::clear_user() {
  user_.Clear();
}
inline ::AcFunDanmu::Im::Basic_User* Cloud_Profile_ProfileBatchOnlineTimeRequest::mutable_user(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Profile.ProfileBatchOnlineTimeRequest.user)
  return user_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_User >*
Cloud_Profile_ProfileBatchOnlineTimeRequest::mutable_user() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Cloud.Profile.ProfileBatchOnlineTimeRequest.user)
  return &user_;
}
inline const ::AcFunDanmu::Im::Basic_User& Cloud_Profile_ProfileBatchOnlineTimeRequest::_internal_user(int index) const {
  return user_.Get(index);
}
inline const ::AcFunDanmu::Im::Basic_User& Cloud_Profile_ProfileBatchOnlineTimeRequest::user(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Profile.ProfileBatchOnlineTimeRequest.user)
  return _internal_user(index);
}
inline ::AcFunDanmu::Im::Basic_User* Cloud_Profile_ProfileBatchOnlineTimeRequest::_internal_add_user() {
  return user_.Add();
}
inline ::AcFunDanmu::Im::Basic_User* Cloud_Profile_ProfileBatchOnlineTimeRequest::add_user() {
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Cloud.Profile.ProfileBatchOnlineTimeRequest.user)
  return _internal_add_user();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_User >&
Cloud_Profile_ProfileBatchOnlineTimeRequest::user() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Cloud.Profile.ProfileBatchOnlineTimeRequest.user)
  return user_;
}

// -------------------------------------------------------------------

// Cloud_Profile_ProfileBatchOnlineTimeResponse

// repeated .AcFunDanmu.Im.Cloud.Profile.UserOnlineStatus userOnlineStatus = 1;
inline int Cloud_Profile_ProfileBatchOnlineTimeResponse::_internal_useronlinestatus_size() const {
  return useronlinestatus_.size();
}
inline int Cloud_Profile_ProfileBatchOnlineTimeResponse::useronlinestatus_size() const {
  return _internal_useronlinestatus_size();
}
inline void Cloud_Profile_ProfileBatchOnlineTimeResponse::clear_useronlinestatus() {
  useronlinestatus_.Clear();
}
inline ::AcFunDanmu::Im::Cloud_Profile_UserOnlineStatus* Cloud_Profile_ProfileBatchOnlineTimeResponse::mutable_useronlinestatus(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Profile.ProfileBatchOnlineTimeResponse.userOnlineStatus)
  return useronlinestatus_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud_Profile_UserOnlineStatus >*
Cloud_Profile_ProfileBatchOnlineTimeResponse::mutable_useronlinestatus() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Cloud.Profile.ProfileBatchOnlineTimeResponse.userOnlineStatus)
  return &useronlinestatus_;
}
inline const ::AcFunDanmu::Im::Cloud_Profile_UserOnlineStatus& Cloud_Profile_ProfileBatchOnlineTimeResponse::_internal_useronlinestatus(int index) const {
  return useronlinestatus_.Get(index);
}
inline const ::AcFunDanmu::Im::Cloud_Profile_UserOnlineStatus& Cloud_Profile_ProfileBatchOnlineTimeResponse::useronlinestatus(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Profile.ProfileBatchOnlineTimeResponse.userOnlineStatus)
  return _internal_useronlinestatus(index);
}
inline ::AcFunDanmu::Im::Cloud_Profile_UserOnlineStatus* Cloud_Profile_ProfileBatchOnlineTimeResponse::_internal_add_useronlinestatus() {
  return useronlinestatus_.Add();
}
inline ::AcFunDanmu::Im::Cloud_Profile_UserOnlineStatus* Cloud_Profile_ProfileBatchOnlineTimeResponse::add_useronlinestatus() {
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Cloud.Profile.ProfileBatchOnlineTimeResponse.userOnlineStatus)
  return _internal_add_useronlinestatus();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud_Profile_UserOnlineStatus >&
Cloud_Profile_ProfileBatchOnlineTimeResponse::useronlinestatus() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Cloud.Profile.ProfileBatchOnlineTimeResponse.userOnlineStatus)
  return useronlinestatus_;
}

// -------------------------------------------------------------------

// Cloud_Profile

// -------------------------------------------------------------------

// Cloud_Data_Update_KsImDataUpdatePushPayload

// .AcFunDanmu.Im.Cloud.Data.Update.KsImDataUpdatePushPayload type = 1;
inline bool Cloud_Data_Update_KsImDataUpdatePushPayload::_internal_has_type() const {
  return this != internal_default_instance() && type_ != nullptr;
}
inline bool Cloud_Data_Update_KsImDataUpdatePushPayload::has_type() const {
  return _internal_has_type();
}
inline void Cloud_Data_Update_KsImDataUpdatePushPayload::clear_type() {
  if (GetArena() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
}
inline const ::AcFunDanmu::Im::Cloud_Data_Update_KsImDataUpdatePushPayload& Cloud_Data_Update_KsImDataUpdatePushPayload::_internal_type() const {
  const ::AcFunDanmu::Im::Cloud_Data_Update_KsImDataUpdatePushPayload* p = type_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Cloud_Data_Update_KsImDataUpdatePushPayload&>(
      ::AcFunDanmu::Im::_Cloud_Data_Update_KsImDataUpdatePushPayload_default_instance_);
}
inline const ::AcFunDanmu::Im::Cloud_Data_Update_KsImDataUpdatePushPayload& Cloud_Data_Update_KsImDataUpdatePushPayload::type() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Data.Update.KsImDataUpdatePushPayload.type)
  return _internal_type();
}
inline void Cloud_Data_Update_KsImDataUpdatePushPayload::unsafe_arena_set_allocated_type(
    ::AcFunDanmu::Im::Cloud_Data_Update_KsImDataUpdatePushPayload* type) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_);
  }
  type_ = type;
  if (type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Data.Update.KsImDataUpdatePushPayload.type)
}
inline ::AcFunDanmu::Im::Cloud_Data_Update_KsImDataUpdatePushPayload* Cloud_Data_Update_KsImDataUpdatePushPayload::release_type() {
  
  ::AcFunDanmu::Im::Cloud_Data_Update_KsImDataUpdatePushPayload* temp = type_;
  type_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::Cloud_Data_Update_KsImDataUpdatePushPayload* Cloud_Data_Update_KsImDataUpdatePushPayload::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Data.Update.KsImDataUpdatePushPayload.type)
  
  ::AcFunDanmu::Im::Cloud_Data_Update_KsImDataUpdatePushPayload* temp = type_;
  type_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Cloud_Data_Update_KsImDataUpdatePushPayload* Cloud_Data_Update_KsImDataUpdatePushPayload::_internal_mutable_type() {
  
  if (type_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Data_Update_KsImDataUpdatePushPayload>(GetArena());
    type_ = p;
  }
  return type_;
}
inline ::AcFunDanmu::Im::Cloud_Data_Update_KsImDataUpdatePushPayload* Cloud_Data_Update_KsImDataUpdatePushPayload::mutable_type() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Data.Update.KsImDataUpdatePushPayload.type)
  return _internal_mutable_type();
}
inline void Cloud_Data_Update_KsImDataUpdatePushPayload::set_allocated_type(::AcFunDanmu::Im::Cloud_Data_Update_KsImDataUpdatePushPayload* type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete type_;
  }
  if (type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(type);
    if (message_arena != submessage_arena) {
      type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    
  } else {
    
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Data.Update.KsImDataUpdatePushPayload.type)
}

// bytes content = 2;
inline void Cloud_Data_Update_KsImDataUpdatePushPayload::clear_content() {
  content_.ClearToEmpty();
}
inline const std::string& Cloud_Data_Update_KsImDataUpdatePushPayload::content() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Data.Update.KsImDataUpdatePushPayload.content)
  return _internal_content();
}
inline void Cloud_Data_Update_KsImDataUpdatePushPayload::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Data.Update.KsImDataUpdatePushPayload.content)
}
inline std::string* Cloud_Data_Update_KsImDataUpdatePushPayload::mutable_content() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Data.Update.KsImDataUpdatePushPayload.content)
  return _internal_mutable_content();
}
inline const std::string& Cloud_Data_Update_KsImDataUpdatePushPayload::_internal_content() const {
  return content_.Get();
}
inline void Cloud_Data_Update_KsImDataUpdatePushPayload::_internal_set_content(const std::string& value) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Data_Update_KsImDataUpdatePushPayload::set_content(std::string&& value) {
  
  content_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Data.Update.KsImDataUpdatePushPayload.content)
}
inline void Cloud_Data_Update_KsImDataUpdatePushPayload::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Data.Update.KsImDataUpdatePushPayload.content)
}
inline void Cloud_Data_Update_KsImDataUpdatePushPayload::set_content(const void* value,
    size_t size) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Data.Update.KsImDataUpdatePushPayload.content)
}
inline std::string* Cloud_Data_Update_KsImDataUpdatePushPayload::_internal_mutable_content() {
  
  return content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Data_Update_KsImDataUpdatePushPayload::release_content() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Data.Update.KsImDataUpdatePushPayload.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Data_Update_KsImDataUpdatePushPayload::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Data.Update.KsImDataUpdatePushPayload.content)
}

// -------------------------------------------------------------------

// Cloud_Data_Update_GroupInfoDataUpdate

// string groupId = 1;
inline void Cloud_Data_Update_GroupInfoDataUpdate::clear_groupid() {
  groupid_.ClearToEmpty();
}
inline const std::string& Cloud_Data_Update_GroupInfoDataUpdate::groupid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Data.Update.GroupInfoDataUpdate.groupId)
  return _internal_groupid();
}
inline void Cloud_Data_Update_GroupInfoDataUpdate::set_groupid(const std::string& value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Data.Update.GroupInfoDataUpdate.groupId)
}
inline std::string* Cloud_Data_Update_GroupInfoDataUpdate::mutable_groupid() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Data.Update.GroupInfoDataUpdate.groupId)
  return _internal_mutable_groupid();
}
inline const std::string& Cloud_Data_Update_GroupInfoDataUpdate::_internal_groupid() const {
  return groupid_.Get();
}
inline void Cloud_Data_Update_GroupInfoDataUpdate::_internal_set_groupid(const std::string& value) {
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Data_Update_GroupInfoDataUpdate::set_groupid(std::string&& value) {
  
  groupid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Data.Update.GroupInfoDataUpdate.groupId)
}
inline void Cloud_Data_Update_GroupInfoDataUpdate::set_groupid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Data.Update.GroupInfoDataUpdate.groupId)
}
inline void Cloud_Data_Update_GroupInfoDataUpdate::set_groupid(const char* value,
    size_t size) {
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Data.Update.GroupInfoDataUpdate.groupId)
}
inline std::string* Cloud_Data_Update_GroupInfoDataUpdate::_internal_mutable_groupid() {
  
  return groupid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Data_Update_GroupInfoDataUpdate::release_groupid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Data.Update.GroupInfoDataUpdate.groupId)
  return groupid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Data_Update_GroupInfoDataUpdate::set_allocated_groupid(std::string* groupid) {
  if (groupid != nullptr) {
    
  } else {
    
  }
  groupid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), groupid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Data.Update.GroupInfoDataUpdate.groupId)
}

// -------------------------------------------------------------------

// Cloud_Data_Update_GroupMemberListUpdate

// string groupId = 1;
inline void Cloud_Data_Update_GroupMemberListUpdate::clear_groupid() {
  groupid_.ClearToEmpty();
}
inline const std::string& Cloud_Data_Update_GroupMemberListUpdate::groupid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Data.Update.GroupMemberListUpdate.groupId)
  return _internal_groupid();
}
inline void Cloud_Data_Update_GroupMemberListUpdate::set_groupid(const std::string& value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Data.Update.GroupMemberListUpdate.groupId)
}
inline std::string* Cloud_Data_Update_GroupMemberListUpdate::mutable_groupid() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Data.Update.GroupMemberListUpdate.groupId)
  return _internal_mutable_groupid();
}
inline const std::string& Cloud_Data_Update_GroupMemberListUpdate::_internal_groupid() const {
  return groupid_.Get();
}
inline void Cloud_Data_Update_GroupMemberListUpdate::_internal_set_groupid(const std::string& value) {
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Data_Update_GroupMemberListUpdate::set_groupid(std::string&& value) {
  
  groupid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Data.Update.GroupMemberListUpdate.groupId)
}
inline void Cloud_Data_Update_GroupMemberListUpdate::set_groupid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Data.Update.GroupMemberListUpdate.groupId)
}
inline void Cloud_Data_Update_GroupMemberListUpdate::set_groupid(const char* value,
    size_t size) {
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Data.Update.GroupMemberListUpdate.groupId)
}
inline std::string* Cloud_Data_Update_GroupMemberListUpdate::_internal_mutable_groupid() {
  
  return groupid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Data_Update_GroupMemberListUpdate::release_groupid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Data.Update.GroupMemberListUpdate.groupId)
  return groupid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Data_Update_GroupMemberListUpdate::set_allocated_groupid(std::string* groupid) {
  if (groupid != nullptr) {
    
  } else {
    
  }
  groupid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), groupid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Data.Update.GroupMemberListUpdate.groupId)
}

// -------------------------------------------------------------------

// Cloud_Data_Update_YouBeKicked

// string groupId = 1;
inline void Cloud_Data_Update_YouBeKicked::clear_groupid() {
  groupid_.ClearToEmpty();
}
inline const std::string& Cloud_Data_Update_YouBeKicked::groupid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Data.Update.YouBeKicked.groupId)
  return _internal_groupid();
}
inline void Cloud_Data_Update_YouBeKicked::set_groupid(const std::string& value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Data.Update.YouBeKicked.groupId)
}
inline std::string* Cloud_Data_Update_YouBeKicked::mutable_groupid() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Data.Update.YouBeKicked.groupId)
  return _internal_mutable_groupid();
}
inline const std::string& Cloud_Data_Update_YouBeKicked::_internal_groupid() const {
  return groupid_.Get();
}
inline void Cloud_Data_Update_YouBeKicked::_internal_set_groupid(const std::string& value) {
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Data_Update_YouBeKicked::set_groupid(std::string&& value) {
  
  groupid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Data.Update.YouBeKicked.groupId)
}
inline void Cloud_Data_Update_YouBeKicked::set_groupid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Data.Update.YouBeKicked.groupId)
}
inline void Cloud_Data_Update_YouBeKicked::set_groupid(const char* value,
    size_t size) {
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Data.Update.YouBeKicked.groupId)
}
inline std::string* Cloud_Data_Update_YouBeKicked::_internal_mutable_groupid() {
  
  return groupid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Data_Update_YouBeKicked::release_groupid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Data.Update.YouBeKicked.groupId)
  return groupid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Data_Update_YouBeKicked::set_allocated_groupid(std::string* groupid) {
  if (groupid != nullptr) {
    
  } else {
    
  }
  groupid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), groupid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Data.Update.YouBeKicked.groupId)
}

// -------------------------------------------------------------------

// Cloud_Data_Update_MessageRead

// string strTargetId = 1;
inline void Cloud_Data_Update_MessageRead::clear_strtargetid() {
  strtargetid_.ClearToEmpty();
}
inline const std::string& Cloud_Data_Update_MessageRead::strtargetid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Data.Update.MessageRead.strTargetId)
  return _internal_strtargetid();
}
inline void Cloud_Data_Update_MessageRead::set_strtargetid(const std::string& value) {
  _internal_set_strtargetid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Data.Update.MessageRead.strTargetId)
}
inline std::string* Cloud_Data_Update_MessageRead::mutable_strtargetid() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Data.Update.MessageRead.strTargetId)
  return _internal_mutable_strtargetid();
}
inline const std::string& Cloud_Data_Update_MessageRead::_internal_strtargetid() const {
  return strtargetid_.Get();
}
inline void Cloud_Data_Update_MessageRead::_internal_set_strtargetid(const std::string& value) {
  
  strtargetid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Data_Update_MessageRead::set_strtargetid(std::string&& value) {
  
  strtargetid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Data.Update.MessageRead.strTargetId)
}
inline void Cloud_Data_Update_MessageRead::set_strtargetid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  strtargetid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Data.Update.MessageRead.strTargetId)
}
inline void Cloud_Data_Update_MessageRead::set_strtargetid(const char* value,
    size_t size) {
  
  strtargetid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Data.Update.MessageRead.strTargetId)
}
inline std::string* Cloud_Data_Update_MessageRead::_internal_mutable_strtargetid() {
  
  return strtargetid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Data_Update_MessageRead::release_strtargetid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Data.Update.MessageRead.strTargetId)
  return strtargetid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Data_Update_MessageRead::set_allocated_strtargetid(std::string* strtargetid) {
  if (strtargetid != nullptr) {
    
  } else {
    
  }
  strtargetid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strtargetid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Data.Update.MessageRead.strTargetId)
}

// int64 readSeq = 2;
inline void Cloud_Data_Update_MessageRead::clear_readseq() {
  readseq_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Cloud_Data_Update_MessageRead::_internal_readseq() const {
  return readseq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Cloud_Data_Update_MessageRead::readseq() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Data.Update.MessageRead.readSeq)
  return _internal_readseq();
}
inline void Cloud_Data_Update_MessageRead::_internal_set_readseq(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  readseq_ = value;
}
inline void Cloud_Data_Update_MessageRead::set_readseq(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_readseq(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Data.Update.MessageRead.readSeq)
}

// .AcFunDanmu.Im.ImMessage.ChatTargetType chatTargetType = 3;
inline void Cloud_Data_Update_MessageRead::clear_chattargettype() {
  chattargettype_ = 0;
}
inline ::AcFunDanmu::Im::ImMessage_ChatTargetType Cloud_Data_Update_MessageRead::_internal_chattargettype() const {
  return static_cast< ::AcFunDanmu::Im::ImMessage_ChatTargetType >(chattargettype_);
}
inline ::AcFunDanmu::Im::ImMessage_ChatTargetType Cloud_Data_Update_MessageRead::chattargettype() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Data.Update.MessageRead.chatTargetType)
  return _internal_chattargettype();
}
inline void Cloud_Data_Update_MessageRead::_internal_set_chattargettype(::AcFunDanmu::Im::ImMessage_ChatTargetType value) {
  
  chattargettype_ = value;
}
inline void Cloud_Data_Update_MessageRead::set_chattargettype(::AcFunDanmu::Im::ImMessage_ChatTargetType value) {
  _internal_set_chattargettype(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Data.Update.MessageRead.chatTargetType)
}

// -------------------------------------------------------------------

// Cloud_Data_Update_MessageReceipt

// .AcFunDanmu.Im.ImMessage.ChatTarget chatTarget = 1;
inline bool Cloud_Data_Update_MessageReceipt::_internal_has_chattarget() const {
  return this != internal_default_instance() && chattarget_ != nullptr;
}
inline bool Cloud_Data_Update_MessageReceipt::has_chattarget() const {
  return _internal_has_chattarget();
}
inline void Cloud_Data_Update_MessageReceipt::clear_chattarget() {
  if (GetArena() == nullptr && chattarget_ != nullptr) {
    delete chattarget_;
  }
  chattarget_ = nullptr;
}
inline const ::AcFunDanmu::Im::ImMessage_ChatTarget& Cloud_Data_Update_MessageReceipt::_internal_chattarget() const {
  const ::AcFunDanmu::Im::ImMessage_ChatTarget* p = chattarget_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::ImMessage_ChatTarget&>(
      ::AcFunDanmu::Im::_ImMessage_ChatTarget_default_instance_);
}
inline const ::AcFunDanmu::Im::ImMessage_ChatTarget& Cloud_Data_Update_MessageReceipt::chattarget() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Data.Update.MessageReceipt.chatTarget)
  return _internal_chattarget();
}
inline void Cloud_Data_Update_MessageReceipt::unsafe_arena_set_allocated_chattarget(
    ::AcFunDanmu::Im::ImMessage_ChatTarget* chattarget) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chattarget_);
  }
  chattarget_ = chattarget;
  if (chattarget) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Data.Update.MessageReceipt.chatTarget)
}
inline ::AcFunDanmu::Im::ImMessage_ChatTarget* Cloud_Data_Update_MessageReceipt::release_chattarget() {
  
  ::AcFunDanmu::Im::ImMessage_ChatTarget* temp = chattarget_;
  chattarget_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::ImMessage_ChatTarget* Cloud_Data_Update_MessageReceipt::unsafe_arena_release_chattarget() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Data.Update.MessageReceipt.chatTarget)
  
  ::AcFunDanmu::Im::ImMessage_ChatTarget* temp = chattarget_;
  chattarget_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::ImMessage_ChatTarget* Cloud_Data_Update_MessageReceipt::_internal_mutable_chattarget() {
  
  if (chattarget_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_ChatTarget>(GetArena());
    chattarget_ = p;
  }
  return chattarget_;
}
inline ::AcFunDanmu::Im::ImMessage_ChatTarget* Cloud_Data_Update_MessageReceipt::mutable_chattarget() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Data.Update.MessageReceipt.chatTarget)
  return _internal_mutable_chattarget();
}
inline void Cloud_Data_Update_MessageReceipt::set_allocated_chattarget(::AcFunDanmu::Im::ImMessage_ChatTarget* chattarget) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete chattarget_;
  }
  if (chattarget) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(chattarget);
    if (message_arena != submessage_arena) {
      chattarget = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chattarget, submessage_arena);
    }
    
  } else {
    
  }
  chattarget_ = chattarget;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Data.Update.MessageReceipt.chatTarget)
}

// .AcFunDanmu.Im.ImMessage.MessageReceiptStatus receiptStatus = 2;
inline bool Cloud_Data_Update_MessageReceipt::_internal_has_receiptstatus() const {
  return this != internal_default_instance() && receiptstatus_ != nullptr;
}
inline bool Cloud_Data_Update_MessageReceipt::has_receiptstatus() const {
  return _internal_has_receiptstatus();
}
inline void Cloud_Data_Update_MessageReceipt::clear_receiptstatus() {
  if (GetArena() == nullptr && receiptstatus_ != nullptr) {
    delete receiptstatus_;
  }
  receiptstatus_ = nullptr;
}
inline const ::AcFunDanmu::Im::ImMessage_MessageReceiptStatus& Cloud_Data_Update_MessageReceipt::_internal_receiptstatus() const {
  const ::AcFunDanmu::Im::ImMessage_MessageReceiptStatus* p = receiptstatus_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::ImMessage_MessageReceiptStatus&>(
      ::AcFunDanmu::Im::_ImMessage_MessageReceiptStatus_default_instance_);
}
inline const ::AcFunDanmu::Im::ImMessage_MessageReceiptStatus& Cloud_Data_Update_MessageReceipt::receiptstatus() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Data.Update.MessageReceipt.receiptStatus)
  return _internal_receiptstatus();
}
inline void Cloud_Data_Update_MessageReceipt::unsafe_arena_set_allocated_receiptstatus(
    ::AcFunDanmu::Im::ImMessage_MessageReceiptStatus* receiptstatus) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(receiptstatus_);
  }
  receiptstatus_ = receiptstatus;
  if (receiptstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Data.Update.MessageReceipt.receiptStatus)
}
inline ::AcFunDanmu::Im::ImMessage_MessageReceiptStatus* Cloud_Data_Update_MessageReceipt::release_receiptstatus() {
  
  ::AcFunDanmu::Im::ImMessage_MessageReceiptStatus* temp = receiptstatus_;
  receiptstatus_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::ImMessage_MessageReceiptStatus* Cloud_Data_Update_MessageReceipt::unsafe_arena_release_receiptstatus() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Data.Update.MessageReceipt.receiptStatus)
  
  ::AcFunDanmu::Im::ImMessage_MessageReceiptStatus* temp = receiptstatus_;
  receiptstatus_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::ImMessage_MessageReceiptStatus* Cloud_Data_Update_MessageReceipt::_internal_mutable_receiptstatus() {
  
  if (receiptstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_MessageReceiptStatus>(GetArena());
    receiptstatus_ = p;
  }
  return receiptstatus_;
}
inline ::AcFunDanmu::Im::ImMessage_MessageReceiptStatus* Cloud_Data_Update_MessageReceipt::mutable_receiptstatus() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Data.Update.MessageReceipt.receiptStatus)
  return _internal_mutable_receiptstatus();
}
inline void Cloud_Data_Update_MessageReceipt::set_allocated_receiptstatus(::AcFunDanmu::Im::ImMessage_MessageReceiptStatus* receiptstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete receiptstatus_;
  }
  if (receiptstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(receiptstatus);
    if (message_arena != submessage_arena) {
      receiptstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, receiptstatus, submessage_arena);
    }
    
  } else {
    
  }
  receiptstatus_ = receiptstatus;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Data.Update.MessageReceipt.receiptStatus)
}

// -------------------------------------------------------------------

// Cloud_Data_Update

// -------------------------------------------------------------------

// Cloud_Data

// -------------------------------------------------------------------

// Cloud_Message_ImcRecalledMessage

// .AcFunDanmu.Im.ImMessage.Message originMsg = 1;
inline bool Cloud_Message_ImcRecalledMessage::_internal_has_originmsg() const {
  return this != internal_default_instance() && originmsg_ != nullptr;
}
inline bool Cloud_Message_ImcRecalledMessage::has_originmsg() const {
  return _internal_has_originmsg();
}
inline void Cloud_Message_ImcRecalledMessage::clear_originmsg() {
  if (GetArena() == nullptr && originmsg_ != nullptr) {
    delete originmsg_;
  }
  originmsg_ = nullptr;
}
inline const ::AcFunDanmu::Im::ImMessage_Message& Cloud_Message_ImcRecalledMessage::_internal_originmsg() const {
  const ::AcFunDanmu::Im::ImMessage_Message* p = originmsg_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::ImMessage_Message&>(
      ::AcFunDanmu::Im::_ImMessage_Message_default_instance_);
}
inline const ::AcFunDanmu::Im::ImMessage_Message& Cloud_Message_ImcRecalledMessage::originmsg() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.ImcRecalledMessage.originMsg)
  return _internal_originmsg();
}
inline void Cloud_Message_ImcRecalledMessage::unsafe_arena_set_allocated_originmsg(
    ::AcFunDanmu::Im::ImMessage_Message* originmsg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(originmsg_);
  }
  originmsg_ = originmsg;
  if (originmsg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Message.ImcRecalledMessage.originMsg)
}
inline ::AcFunDanmu::Im::ImMessage_Message* Cloud_Message_ImcRecalledMessage::release_originmsg() {
  
  ::AcFunDanmu::Im::ImMessage_Message* temp = originmsg_;
  originmsg_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::ImMessage_Message* Cloud_Message_ImcRecalledMessage::unsafe_arena_release_originmsg() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.ImcRecalledMessage.originMsg)
  
  ::AcFunDanmu::Im::ImMessage_Message* temp = originmsg_;
  originmsg_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::ImMessage_Message* Cloud_Message_ImcRecalledMessage::_internal_mutable_originmsg() {
  
  if (originmsg_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_Message>(GetArena());
    originmsg_ = p;
  }
  return originmsg_;
}
inline ::AcFunDanmu::Im::ImMessage_Message* Cloud_Message_ImcRecalledMessage::mutable_originmsg() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.ImcRecalledMessage.originMsg)
  return _internal_mutable_originmsg();
}
inline void Cloud_Message_ImcRecalledMessage::set_allocated_originmsg(::AcFunDanmu::Im::ImMessage_Message* originmsg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete originmsg_;
  }
  if (originmsg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(originmsg);
    if (message_arena != submessage_arena) {
      originmsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, originmsg, submessage_arena);
    }
    
  } else {
    
  }
  originmsg_ = originmsg;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.ImcRecalledMessage.originMsg)
}

// .AcFunDanmu.Im.Cloud.Message.ImcNoticeMessage noticeMsg = 2;
inline bool Cloud_Message_ImcRecalledMessage::_internal_has_noticemsg() const {
  return this != internal_default_instance() && noticemsg_ != nullptr;
}
inline bool Cloud_Message_ImcRecalledMessage::has_noticemsg() const {
  return _internal_has_noticemsg();
}
inline void Cloud_Message_ImcRecalledMessage::clear_noticemsg() {
  if (GetArena() == nullptr && noticemsg_ != nullptr) {
    delete noticemsg_;
  }
  noticemsg_ = nullptr;
}
inline const ::AcFunDanmu::Im::Cloud_Message_ImcNoticeMessage& Cloud_Message_ImcRecalledMessage::_internal_noticemsg() const {
  const ::AcFunDanmu::Im::Cloud_Message_ImcNoticeMessage* p = noticemsg_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Cloud_Message_ImcNoticeMessage&>(
      ::AcFunDanmu::Im::_Cloud_Message_ImcNoticeMessage_default_instance_);
}
inline const ::AcFunDanmu::Im::Cloud_Message_ImcNoticeMessage& Cloud_Message_ImcRecalledMessage::noticemsg() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.ImcRecalledMessage.noticeMsg)
  return _internal_noticemsg();
}
inline void Cloud_Message_ImcRecalledMessage::unsafe_arena_set_allocated_noticemsg(
    ::AcFunDanmu::Im::Cloud_Message_ImcNoticeMessage* noticemsg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(noticemsg_);
  }
  noticemsg_ = noticemsg;
  if (noticemsg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Message.ImcRecalledMessage.noticeMsg)
}
inline ::AcFunDanmu::Im::Cloud_Message_ImcNoticeMessage* Cloud_Message_ImcRecalledMessage::release_noticemsg() {
  
  ::AcFunDanmu::Im::Cloud_Message_ImcNoticeMessage* temp = noticemsg_;
  noticemsg_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::Cloud_Message_ImcNoticeMessage* Cloud_Message_ImcRecalledMessage::unsafe_arena_release_noticemsg() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.ImcRecalledMessage.noticeMsg)
  
  ::AcFunDanmu::Im::Cloud_Message_ImcNoticeMessage* temp = noticemsg_;
  noticemsg_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Cloud_Message_ImcNoticeMessage* Cloud_Message_ImcRecalledMessage::_internal_mutable_noticemsg() {
  
  if (noticemsg_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_ImcNoticeMessage>(GetArena());
    noticemsg_ = p;
  }
  return noticemsg_;
}
inline ::AcFunDanmu::Im::Cloud_Message_ImcNoticeMessage* Cloud_Message_ImcRecalledMessage::mutable_noticemsg() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.ImcRecalledMessage.noticeMsg)
  return _internal_mutable_noticemsg();
}
inline void Cloud_Message_ImcRecalledMessage::set_allocated_noticemsg(::AcFunDanmu::Im::Cloud_Message_ImcNoticeMessage* noticemsg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete noticemsg_;
  }
  if (noticemsg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(noticemsg);
    if (message_arena != submessage_arena) {
      noticemsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, noticemsg, submessage_arena);
    }
    
  } else {
    
  }
  noticemsg_ = noticemsg;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.ImcRecalledMessage.noticeMsg)
}

// -------------------------------------------------------------------

// Cloud_Message_ImcReplaceMessage

// .AcFunDanmu.Im.ImMessage.Message replaceMsg = 1;
inline bool Cloud_Message_ImcReplaceMessage::_internal_has_replacemsg() const {
  return this != internal_default_instance() && replacemsg_ != nullptr;
}
inline bool Cloud_Message_ImcReplaceMessage::has_replacemsg() const {
  return _internal_has_replacemsg();
}
inline void Cloud_Message_ImcReplaceMessage::clear_replacemsg() {
  if (GetArena() == nullptr && replacemsg_ != nullptr) {
    delete replacemsg_;
  }
  replacemsg_ = nullptr;
}
inline const ::AcFunDanmu::Im::ImMessage_Message& Cloud_Message_ImcReplaceMessage::_internal_replacemsg() const {
  const ::AcFunDanmu::Im::ImMessage_Message* p = replacemsg_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::ImMessage_Message&>(
      ::AcFunDanmu::Im::_ImMessage_Message_default_instance_);
}
inline const ::AcFunDanmu::Im::ImMessage_Message& Cloud_Message_ImcReplaceMessage::replacemsg() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.ImcReplaceMessage.replaceMsg)
  return _internal_replacemsg();
}
inline void Cloud_Message_ImcReplaceMessage::unsafe_arena_set_allocated_replacemsg(
    ::AcFunDanmu::Im::ImMessage_Message* replacemsg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(replacemsg_);
  }
  replacemsg_ = replacemsg;
  if (replacemsg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Message.ImcReplaceMessage.replaceMsg)
}
inline ::AcFunDanmu::Im::ImMessage_Message* Cloud_Message_ImcReplaceMessage::release_replacemsg() {
  
  ::AcFunDanmu::Im::ImMessage_Message* temp = replacemsg_;
  replacemsg_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::ImMessage_Message* Cloud_Message_ImcReplaceMessage::unsafe_arena_release_replacemsg() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.ImcReplaceMessage.replaceMsg)
  
  ::AcFunDanmu::Im::ImMessage_Message* temp = replacemsg_;
  replacemsg_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::ImMessage_Message* Cloud_Message_ImcReplaceMessage::_internal_mutable_replacemsg() {
  
  if (replacemsg_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_Message>(GetArena());
    replacemsg_ = p;
  }
  return replacemsg_;
}
inline ::AcFunDanmu::Im::ImMessage_Message* Cloud_Message_ImcReplaceMessage::mutable_replacemsg() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.ImcReplaceMessage.replaceMsg)
  return _internal_mutable_replacemsg();
}
inline void Cloud_Message_ImcReplaceMessage::set_allocated_replacemsg(::AcFunDanmu::Im::ImMessage_Message* replacemsg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete replacemsg_;
  }
  if (replacemsg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(replacemsg);
    if (message_arena != submessage_arena) {
      replacemsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, replacemsg, submessage_arena);
    }
    
  } else {
    
  }
  replacemsg_ = replacemsg;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.ImcReplaceMessage.replaceMsg)
}

// -------------------------------------------------------------------

// Cloud_Message_Text

// string text = 1;
inline void Cloud_Message_Text::clear_text() {
  text_.ClearToEmpty();
}
inline const std::string& Cloud_Message_Text::text() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.Text.text)
  return _internal_text();
}
inline void Cloud_Message_Text::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.Text.text)
}
inline std::string* Cloud_Message_Text::mutable_text() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.Text.text)
  return _internal_mutable_text();
}
inline const std::string& Cloud_Message_Text::_internal_text() const {
  return text_.Get();
}
inline void Cloud_Message_Text::_internal_set_text(const std::string& value) {
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Message_Text::set_text(std::string&& value) {
  
  text_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Message.Text.text)
}
inline void Cloud_Message_Text::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Message.Text.text)
}
inline void Cloud_Message_Text::set_text(const char* value,
    size_t size) {
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Message.Text.text)
}
inline std::string* Cloud_Message_Text::_internal_mutable_text() {
  
  return text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Message_Text::release_text() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.Text.text)
  return text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Message_Text::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.Text.text)
}

// -------------------------------------------------------------------

// Cloud_Message_Image

// string uri = 1;
inline void Cloud_Message_Image::clear_uri() {
  uri_.ClearToEmpty();
}
inline const std::string& Cloud_Message_Image::uri() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.Image.uri)
  return _internal_uri();
}
inline void Cloud_Message_Image::set_uri(const std::string& value) {
  _internal_set_uri(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.Image.uri)
}
inline std::string* Cloud_Message_Image::mutable_uri() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.Image.uri)
  return _internal_mutable_uri();
}
inline const std::string& Cloud_Message_Image::_internal_uri() const {
  return uri_.Get();
}
inline void Cloud_Message_Image::_internal_set_uri(const std::string& value) {
  
  uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Message_Image::set_uri(std::string&& value) {
  
  uri_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Message.Image.uri)
}
inline void Cloud_Message_Image::set_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Message.Image.uri)
}
inline void Cloud_Message_Image::set_uri(const char* value,
    size_t size) {
  
  uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Message.Image.uri)
}
inline std::string* Cloud_Message_Image::_internal_mutable_uri() {
  
  return uri_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Message_Image::release_uri() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.Image.uri)
  return uri_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Message_Image::set_allocated_uri(std::string* uri) {
  if (uri != nullptr) {
    
  } else {
    
  }
  uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uri,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.Image.uri)
}

// int32 width = 2;
inline void Cloud_Message_Image::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Cloud_Message_Image::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Cloud_Message_Image::width() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.Image.width)
  return _internal_width();
}
inline void Cloud_Message_Image::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
}
inline void Cloud_Message_Image::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.Image.width)
}

// int32 height = 3;
inline void Cloud_Message_Image::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Cloud_Message_Image::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Cloud_Message_Image::height() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.Image.height)
  return _internal_height();
}
inline void Cloud_Message_Image::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void Cloud_Message_Image::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.Image.height)
}

// -------------------------------------------------------------------

// Cloud_Message_Audio

// string uri = 1;
inline void Cloud_Message_Audio::clear_uri() {
  uri_.ClearToEmpty();
}
inline const std::string& Cloud_Message_Audio::uri() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.Audio.uri)
  return _internal_uri();
}
inline void Cloud_Message_Audio::set_uri(const std::string& value) {
  _internal_set_uri(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.Audio.uri)
}
inline std::string* Cloud_Message_Audio::mutable_uri() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.Audio.uri)
  return _internal_mutable_uri();
}
inline const std::string& Cloud_Message_Audio::_internal_uri() const {
  return uri_.Get();
}
inline void Cloud_Message_Audio::_internal_set_uri(const std::string& value) {
  
  uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Message_Audio::set_uri(std::string&& value) {
  
  uri_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Message.Audio.uri)
}
inline void Cloud_Message_Audio::set_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Message.Audio.uri)
}
inline void Cloud_Message_Audio::set_uri(const char* value,
    size_t size) {
  
  uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Message.Audio.uri)
}
inline std::string* Cloud_Message_Audio::_internal_mutable_uri() {
  
  return uri_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Message_Audio::release_uri() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.Audio.uri)
  return uri_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Message_Audio::set_allocated_uri(std::string* uri) {
  if (uri != nullptr) {
    
  } else {
    
  }
  uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uri,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.Audio.uri)
}

// int32 duration = 2;
inline void Cloud_Message_Audio::clear_duration() {
  duration_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Cloud_Message_Audio::_internal_duration() const {
  return duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Cloud_Message_Audio::duration() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.Audio.duration)
  return _internal_duration();
}
inline void Cloud_Message_Audio::_internal_set_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  duration_ = value;
}
inline void Cloud_Message_Audio::set_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.Audio.duration)
}

// string type = 3;
inline void Cloud_Message_Audio::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& Cloud_Message_Audio::type() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.Audio.type)
  return _internal_type();
}
inline void Cloud_Message_Audio::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.Audio.type)
}
inline std::string* Cloud_Message_Audio::mutable_type() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.Audio.type)
  return _internal_mutable_type();
}
inline const std::string& Cloud_Message_Audio::_internal_type() const {
  return type_.Get();
}
inline void Cloud_Message_Audio::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Message_Audio::set_type(std::string&& value) {
  
  type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Message.Audio.type)
}
inline void Cloud_Message_Audio::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Message.Audio.type)
}
inline void Cloud_Message_Audio::set_type(const char* value,
    size_t size) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Message.Audio.type)
}
inline std::string* Cloud_Message_Audio::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Message_Audio::release_type() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.Audio.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Message_Audio::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.Audio.type)
}

// -------------------------------------------------------------------

// Cloud_Message_Video

// string uri = 1;
inline void Cloud_Message_Video::clear_uri() {
  uri_.ClearToEmpty();
}
inline const std::string& Cloud_Message_Video::uri() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.Video.uri)
  return _internal_uri();
}
inline void Cloud_Message_Video::set_uri(const std::string& value) {
  _internal_set_uri(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.Video.uri)
}
inline std::string* Cloud_Message_Video::mutable_uri() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.Video.uri)
  return _internal_mutable_uri();
}
inline const std::string& Cloud_Message_Video::_internal_uri() const {
  return uri_.Get();
}
inline void Cloud_Message_Video::_internal_set_uri(const std::string& value) {
  
  uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Message_Video::set_uri(std::string&& value) {
  
  uri_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Message.Video.uri)
}
inline void Cloud_Message_Video::set_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Message.Video.uri)
}
inline void Cloud_Message_Video::set_uri(const char* value,
    size_t size) {
  
  uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Message.Video.uri)
}
inline std::string* Cloud_Message_Video::_internal_mutable_uri() {
  
  return uri_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Message_Video::release_uri() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.Video.uri)
  return uri_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Message_Video::set_allocated_uri(std::string* uri) {
  if (uri != nullptr) {
    
  } else {
    
  }
  uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uri,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.Video.uri)
}

// int32 duration = 2;
inline void Cloud_Message_Video::clear_duration() {
  duration_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Cloud_Message_Video::_internal_duration() const {
  return duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Cloud_Message_Video::duration() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.Video.duration)
  return _internal_duration();
}
inline void Cloud_Message_Video::_internal_set_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  duration_ = value;
}
inline void Cloud_Message_Video::set_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.Video.duration)
}

// int32 width = 3;
inline void Cloud_Message_Video::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Cloud_Message_Video::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Cloud_Message_Video::width() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.Video.width)
  return _internal_width();
}
inline void Cloud_Message_Video::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
}
inline void Cloud_Message_Video::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.Video.width)
}

// int32 height = 4;
inline void Cloud_Message_Video::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Cloud_Message_Video::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Cloud_Message_Video::height() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.Video.height)
  return _internal_height();
}
inline void Cloud_Message_Video::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void Cloud_Message_Video::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.Video.height)
}

// string coverUri = 5;
inline void Cloud_Message_Video::clear_coveruri() {
  coveruri_.ClearToEmpty();
}
inline const std::string& Cloud_Message_Video::coveruri() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.Video.coverUri)
  return _internal_coveruri();
}
inline void Cloud_Message_Video::set_coveruri(const std::string& value) {
  _internal_set_coveruri(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.Video.coverUri)
}
inline std::string* Cloud_Message_Video::mutable_coveruri() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.Video.coverUri)
  return _internal_mutable_coveruri();
}
inline const std::string& Cloud_Message_Video::_internal_coveruri() const {
  return coveruri_.Get();
}
inline void Cloud_Message_Video::_internal_set_coveruri(const std::string& value) {
  
  coveruri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Message_Video::set_coveruri(std::string&& value) {
  
  coveruri_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Message.Video.coverUri)
}
inline void Cloud_Message_Video::set_coveruri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  coveruri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Message.Video.coverUri)
}
inline void Cloud_Message_Video::set_coveruri(const char* value,
    size_t size) {
  
  coveruri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Message.Video.coverUri)
}
inline std::string* Cloud_Message_Video::_internal_mutable_coveruri() {
  
  return coveruri_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Message_Video::release_coveruri() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.Video.coverUri)
  return coveruri_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Message_Video::set_allocated_coveruri(std::string* coveruri) {
  if (coveruri != nullptr) {
    
  } else {
    
  }
  coveruri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), coveruri,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.Video.coverUri)
}

// string type = 6;
inline void Cloud_Message_Video::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& Cloud_Message_Video::type() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.Video.type)
  return _internal_type();
}
inline void Cloud_Message_Video::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.Video.type)
}
inline std::string* Cloud_Message_Video::mutable_type() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.Video.type)
  return _internal_mutable_type();
}
inline const std::string& Cloud_Message_Video::_internal_type() const {
  return type_.Get();
}
inline void Cloud_Message_Video::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Message_Video::set_type(std::string&& value) {
  
  type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Message.Video.type)
}
inline void Cloud_Message_Video::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Message.Video.type)
}
inline void Cloud_Message_Video::set_type(const char* value,
    size_t size) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Message.Video.type)
}
inline std::string* Cloud_Message_Video::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Message_Video::release_type() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.Video.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Message_Video::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.Video.type)
}

// -------------------------------------------------------------------

// Cloud_Message_Custom

// string payload = 1;
inline void Cloud_Message_Custom::clear_payload() {
  payload_.ClearToEmpty();
}
inline const std::string& Cloud_Message_Custom::payload() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.Custom.payload)
  return _internal_payload();
}
inline void Cloud_Message_Custom::set_payload(const std::string& value) {
  _internal_set_payload(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.Custom.payload)
}
inline std::string* Cloud_Message_Custom::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.Custom.payload)
  return _internal_mutable_payload();
}
inline const std::string& Cloud_Message_Custom::_internal_payload() const {
  return payload_.Get();
}
inline void Cloud_Message_Custom::_internal_set_payload(const std::string& value) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Message_Custom::set_payload(std::string&& value) {
  
  payload_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Message.Custom.payload)
}
inline void Cloud_Message_Custom::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Message.Custom.payload)
}
inline void Cloud_Message_Custom::set_payload(const char* value,
    size_t size) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Message.Custom.payload)
}
inline std::string* Cloud_Message_Custom::_internal_mutable_payload() {
  
  return payload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Message_Custom::release_payload() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.Custom.payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Message_Custom::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.Custom.payload)
}

// -------------------------------------------------------------------

// Cloud_Message_PicUrl

// string cdn = 1;
inline void Cloud_Message_PicUrl::clear_cdn() {
  cdn_.ClearToEmpty();
}
inline const std::string& Cloud_Message_PicUrl::cdn() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.PicUrl.cdn)
  return _internal_cdn();
}
inline void Cloud_Message_PicUrl::set_cdn(const std::string& value) {
  _internal_set_cdn(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.PicUrl.cdn)
}
inline std::string* Cloud_Message_PicUrl::mutable_cdn() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.PicUrl.cdn)
  return _internal_mutable_cdn();
}
inline const std::string& Cloud_Message_PicUrl::_internal_cdn() const {
  return cdn_.Get();
}
inline void Cloud_Message_PicUrl::_internal_set_cdn(const std::string& value) {
  
  cdn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Message_PicUrl::set_cdn(std::string&& value) {
  
  cdn_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Message.PicUrl.cdn)
}
inline void Cloud_Message_PicUrl::set_cdn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cdn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Message.PicUrl.cdn)
}
inline void Cloud_Message_PicUrl::set_cdn(const char* value,
    size_t size) {
  
  cdn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Message.PicUrl.cdn)
}
inline std::string* Cloud_Message_PicUrl::_internal_mutable_cdn() {
  
  return cdn_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Message_PicUrl::release_cdn() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.PicUrl.cdn)
  return cdn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Message_PicUrl::set_allocated_cdn(std::string* cdn) {
  if (cdn != nullptr) {
    
  } else {
    
  }
  cdn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cdn,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.PicUrl.cdn)
}

// string url = 2;
inline void Cloud_Message_PicUrl::clear_url() {
  url_.ClearToEmpty();
}
inline const std::string& Cloud_Message_PicUrl::url() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.PicUrl.url)
  return _internal_url();
}
inline void Cloud_Message_PicUrl::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.PicUrl.url)
}
inline std::string* Cloud_Message_PicUrl::mutable_url() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.PicUrl.url)
  return _internal_mutable_url();
}
inline const std::string& Cloud_Message_PicUrl::_internal_url() const {
  return url_.Get();
}
inline void Cloud_Message_PicUrl::_internal_set_url(const std::string& value) {
  
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Message_PicUrl::set_url(std::string&& value) {
  
  url_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Message.PicUrl.url)
}
inline void Cloud_Message_PicUrl::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Message.PicUrl.url)
}
inline void Cloud_Message_PicUrl::set_url(const char* value,
    size_t size) {
  
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Message.PicUrl.url)
}
inline std::string* Cloud_Message_PicUrl::_internal_mutable_url() {
  
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Message_PicUrl::release_url() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.PicUrl.url)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Message_PicUrl::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.PicUrl.url)
}

// string urlPattern = 3;
inline void Cloud_Message_PicUrl::clear_urlpattern() {
  urlpattern_.ClearToEmpty();
}
inline const std::string& Cloud_Message_PicUrl::urlpattern() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.PicUrl.urlPattern)
  return _internal_urlpattern();
}
inline void Cloud_Message_PicUrl::set_urlpattern(const std::string& value) {
  _internal_set_urlpattern(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.PicUrl.urlPattern)
}
inline std::string* Cloud_Message_PicUrl::mutable_urlpattern() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.PicUrl.urlPattern)
  return _internal_mutable_urlpattern();
}
inline const std::string& Cloud_Message_PicUrl::_internal_urlpattern() const {
  return urlpattern_.Get();
}
inline void Cloud_Message_PicUrl::_internal_set_urlpattern(const std::string& value) {
  
  urlpattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Message_PicUrl::set_urlpattern(std::string&& value) {
  
  urlpattern_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Message.PicUrl.urlPattern)
}
inline void Cloud_Message_PicUrl::set_urlpattern(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  urlpattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Message.PicUrl.urlPattern)
}
inline void Cloud_Message_PicUrl::set_urlpattern(const char* value,
    size_t size) {
  
  urlpattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Message.PicUrl.urlPattern)
}
inline std::string* Cloud_Message_PicUrl::_internal_mutable_urlpattern() {
  
  return urlpattern_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Message_PicUrl::release_urlpattern() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.PicUrl.urlPattern)
  return urlpattern_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Message_PicUrl::set_allocated_urlpattern(std::string* urlpattern) {
  if (urlpattern != nullptr) {
    
  } else {
    
  }
  urlpattern_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), urlpattern,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.PicUrl.urlPattern)
}

// string ip = 4;
inline void Cloud_Message_PicUrl::clear_ip() {
  ip_.ClearToEmpty();
}
inline const std::string& Cloud_Message_PicUrl::ip() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.PicUrl.ip)
  return _internal_ip();
}
inline void Cloud_Message_PicUrl::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.PicUrl.ip)
}
inline std::string* Cloud_Message_PicUrl::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.PicUrl.ip)
  return _internal_mutable_ip();
}
inline const std::string& Cloud_Message_PicUrl::_internal_ip() const {
  return ip_.Get();
}
inline void Cloud_Message_PicUrl::_internal_set_ip(const std::string& value) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Message_PicUrl::set_ip(std::string&& value) {
  
  ip_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Message.PicUrl.ip)
}
inline void Cloud_Message_PicUrl::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Message.PicUrl.ip)
}
inline void Cloud_Message_PicUrl::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Message.PicUrl.ip)
}
inline std::string* Cloud_Message_PicUrl::_internal_mutable_ip() {
  
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Message_PicUrl::release_ip() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.PicUrl.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Message_PicUrl::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.PicUrl.ip)
}

// -------------------------------------------------------------------

// Cloud_Message_Emoticon_Code

// string language = 1;
inline void Cloud_Message_Emoticon_Code::clear_language() {
  language_.ClearToEmpty();
}
inline const std::string& Cloud_Message_Emoticon_Code::language() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.Emoticon.Code.language)
  return _internal_language();
}
inline void Cloud_Message_Emoticon_Code::set_language(const std::string& value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.Emoticon.Code.language)
}
inline std::string* Cloud_Message_Emoticon_Code::mutable_language() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.Emoticon.Code.language)
  return _internal_mutable_language();
}
inline const std::string& Cloud_Message_Emoticon_Code::_internal_language() const {
  return language_.Get();
}
inline void Cloud_Message_Emoticon_Code::_internal_set_language(const std::string& value) {
  
  language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Message_Emoticon_Code::set_language(std::string&& value) {
  
  language_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Message.Emoticon.Code.language)
}
inline void Cloud_Message_Emoticon_Code::set_language(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Message.Emoticon.Code.language)
}
inline void Cloud_Message_Emoticon_Code::set_language(const char* value,
    size_t size) {
  
  language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Message.Emoticon.Code.language)
}
inline std::string* Cloud_Message_Emoticon_Code::_internal_mutable_language() {
  
  return language_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Message_Emoticon_Code::release_language() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.Emoticon.Code.language)
  return language_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Message_Emoticon_Code::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    
  } else {
    
  }
  language_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.Emoticon.Code.language)
}

// repeated string code = 2;
inline int Cloud_Message_Emoticon_Code::_internal_code_size() const {
  return code_.size();
}
inline int Cloud_Message_Emoticon_Code::code_size() const {
  return _internal_code_size();
}
inline void Cloud_Message_Emoticon_Code::clear_code() {
  code_.Clear();
}
inline std::string* Cloud_Message_Emoticon_Code::add_code() {
  // @@protoc_insertion_point(field_add_mutable:AcFunDanmu.Im.Cloud.Message.Emoticon.Code.code)
  return _internal_add_code();
}
inline const std::string& Cloud_Message_Emoticon_Code::_internal_code(int index) const {
  return code_.Get(index);
}
inline const std::string& Cloud_Message_Emoticon_Code::code(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.Emoticon.Code.code)
  return _internal_code(index);
}
inline std::string* Cloud_Message_Emoticon_Code::mutable_code(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.Emoticon.Code.code)
  return code_.Mutable(index);
}
inline void Cloud_Message_Emoticon_Code::set_code(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.Emoticon.Code.code)
  code_.Mutable(index)->assign(value);
}
inline void Cloud_Message_Emoticon_Code::set_code(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.Emoticon.Code.code)
  code_.Mutable(index)->assign(std::move(value));
}
inline void Cloud_Message_Emoticon_Code::set_code(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  code_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Message.Emoticon.Code.code)
}
inline void Cloud_Message_Emoticon_Code::set_code(int index, const char* value, size_t size) {
  code_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Message.Emoticon.Code.code)
}
inline std::string* Cloud_Message_Emoticon_Code::_internal_add_code() {
  return code_.Add();
}
inline void Cloud_Message_Emoticon_Code::add_code(const std::string& value) {
  code_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Cloud.Message.Emoticon.Code.code)
}
inline void Cloud_Message_Emoticon_Code::add_code(std::string&& value) {
  code_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Cloud.Message.Emoticon.Code.code)
}
inline void Cloud_Message_Emoticon_Code::add_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  code_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AcFunDanmu.Im.Cloud.Message.Emoticon.Code.code)
}
inline void Cloud_Message_Emoticon_Code::add_code(const char* value, size_t size) {
  code_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AcFunDanmu.Im.Cloud.Message.Emoticon.Code.code)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Cloud_Message_Emoticon_Code::code() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Cloud.Message.Emoticon.Code.code)
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Cloud_Message_Emoticon_Code::mutable_code() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Cloud.Message.Emoticon.Code.code)
  return &code_;
}

// -------------------------------------------------------------------

// Cloud_Message_Emoticon

// string id = 1;
inline void Cloud_Message_Emoticon::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Cloud_Message_Emoticon::id() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.Emoticon.id)
  return _internal_id();
}
inline void Cloud_Message_Emoticon::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.Emoticon.id)
}
inline std::string* Cloud_Message_Emoticon::mutable_id() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.Emoticon.id)
  return _internal_mutable_id();
}
inline const std::string& Cloud_Message_Emoticon::_internal_id() const {
  return id_.Get();
}
inline void Cloud_Message_Emoticon::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Message_Emoticon::set_id(std::string&& value) {
  
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Message.Emoticon.id)
}
inline void Cloud_Message_Emoticon::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Message.Emoticon.id)
}
inline void Cloud_Message_Emoticon::set_id(const char* value,
    size_t size) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Message.Emoticon.id)
}
inline std::string* Cloud_Message_Emoticon::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Message_Emoticon::release_id() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.Emoticon.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Message_Emoticon::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.Emoticon.id)
}

// string packageId = 2;
inline void Cloud_Message_Emoticon::clear_packageid() {
  packageid_.ClearToEmpty();
}
inline const std::string& Cloud_Message_Emoticon::packageid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.Emoticon.packageId)
  return _internal_packageid();
}
inline void Cloud_Message_Emoticon::set_packageid(const std::string& value) {
  _internal_set_packageid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.Emoticon.packageId)
}
inline std::string* Cloud_Message_Emoticon::mutable_packageid() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.Emoticon.packageId)
  return _internal_mutable_packageid();
}
inline const std::string& Cloud_Message_Emoticon::_internal_packageid() const {
  return packageid_.Get();
}
inline void Cloud_Message_Emoticon::_internal_set_packageid(const std::string& value) {
  
  packageid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Message_Emoticon::set_packageid(std::string&& value) {
  
  packageid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Message.Emoticon.packageId)
}
inline void Cloud_Message_Emoticon::set_packageid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  packageid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Message.Emoticon.packageId)
}
inline void Cloud_Message_Emoticon::set_packageid(const char* value,
    size_t size) {
  
  packageid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Message.Emoticon.packageId)
}
inline std::string* Cloud_Message_Emoticon::_internal_mutable_packageid() {
  
  return packageid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Message_Emoticon::release_packageid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.Emoticon.packageId)
  return packageid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Message_Emoticon::set_allocated_packageid(std::string* packageid) {
  if (packageid != nullptr) {
    
  } else {
    
  }
  packageid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), packageid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.Emoticon.packageId)
}

// string name = 3;
inline void Cloud_Message_Emoticon::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Cloud_Message_Emoticon::name() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.Emoticon.name)
  return _internal_name();
}
inline void Cloud_Message_Emoticon::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.Emoticon.name)
}
inline std::string* Cloud_Message_Emoticon::mutable_name() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.Emoticon.name)
  return _internal_mutable_name();
}
inline const std::string& Cloud_Message_Emoticon::_internal_name() const {
  return name_.Get();
}
inline void Cloud_Message_Emoticon::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Message_Emoticon::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Message.Emoticon.name)
}
inline void Cloud_Message_Emoticon::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Message.Emoticon.name)
}
inline void Cloud_Message_Emoticon::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Message.Emoticon.name)
}
inline std::string* Cloud_Message_Emoticon::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Message_Emoticon::release_name() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.Emoticon.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Message_Emoticon::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.Emoticon.name)
}

// .AcFunDanmu.Im.Cloud.Message.Emoticon.Type type = 4;
inline void Cloud_Message_Emoticon::clear_type() {
  type_ = 0;
}
inline ::AcFunDanmu::Im::Cloud_Message_Emoticon_Type Cloud_Message_Emoticon::_internal_type() const {
  return static_cast< ::AcFunDanmu::Im::Cloud_Message_Emoticon_Type >(type_);
}
inline ::AcFunDanmu::Im::Cloud_Message_Emoticon_Type Cloud_Message_Emoticon::type() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.Emoticon.type)
  return _internal_type();
}
inline void Cloud_Message_Emoticon::_internal_set_type(::AcFunDanmu::Im::Cloud_Message_Emoticon_Type value) {
  
  type_ = value;
}
inline void Cloud_Message_Emoticon::set_type(::AcFunDanmu::Im::Cloud_Message_Emoticon_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.Emoticon.type)
}

// repeated .AcFunDanmu.Im.Cloud.Message.PicUrl bigUrl = 5;
inline int Cloud_Message_Emoticon::_internal_bigurl_size() const {
  return bigurl_.size();
}
inline int Cloud_Message_Emoticon::bigurl_size() const {
  return _internal_bigurl_size();
}
inline void Cloud_Message_Emoticon::clear_bigurl() {
  bigurl_.Clear();
}
inline ::AcFunDanmu::Im::Cloud_Message_PicUrl* Cloud_Message_Emoticon::mutable_bigurl(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.Emoticon.bigUrl)
  return bigurl_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud_Message_PicUrl >*
Cloud_Message_Emoticon::mutable_bigurl() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Cloud.Message.Emoticon.bigUrl)
  return &bigurl_;
}
inline const ::AcFunDanmu::Im::Cloud_Message_PicUrl& Cloud_Message_Emoticon::_internal_bigurl(int index) const {
  return bigurl_.Get(index);
}
inline const ::AcFunDanmu::Im::Cloud_Message_PicUrl& Cloud_Message_Emoticon::bigurl(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.Emoticon.bigUrl)
  return _internal_bigurl(index);
}
inline ::AcFunDanmu::Im::Cloud_Message_PicUrl* Cloud_Message_Emoticon::_internal_add_bigurl() {
  return bigurl_.Add();
}
inline ::AcFunDanmu::Im::Cloud_Message_PicUrl* Cloud_Message_Emoticon::add_bigurl() {
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Cloud.Message.Emoticon.bigUrl)
  return _internal_add_bigurl();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud_Message_PicUrl >&
Cloud_Message_Emoticon::bigurl() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Cloud.Message.Emoticon.bigUrl)
  return bigurl_;
}

// int32 width = 6;
inline void Cloud_Message_Emoticon::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Cloud_Message_Emoticon::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Cloud_Message_Emoticon::width() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.Emoticon.width)
  return _internal_width();
}
inline void Cloud_Message_Emoticon::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
}
inline void Cloud_Message_Emoticon::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.Emoticon.width)
}

// int32 height = 7;
inline void Cloud_Message_Emoticon::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Cloud_Message_Emoticon::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Cloud_Message_Emoticon::height() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.Emoticon.height)
  return _internal_height();
}
inline void Cloud_Message_Emoticon::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void Cloud_Message_Emoticon::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.Emoticon.height)
}

// repeated .AcFunDanmu.Im.Cloud.Message.Emoticon.Code emoticonCOde = 8;
inline int Cloud_Message_Emoticon::_internal_emoticoncode_size() const {
  return emoticoncode_.size();
}
inline int Cloud_Message_Emoticon::emoticoncode_size() const {
  return _internal_emoticoncode_size();
}
inline void Cloud_Message_Emoticon::clear_emoticoncode() {
  emoticoncode_.Clear();
}
inline ::AcFunDanmu::Im::Cloud_Message_Emoticon_Code* Cloud_Message_Emoticon::mutable_emoticoncode(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.Emoticon.emoticonCOde)
  return emoticoncode_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud_Message_Emoticon_Code >*
Cloud_Message_Emoticon::mutable_emoticoncode() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Cloud.Message.Emoticon.emoticonCOde)
  return &emoticoncode_;
}
inline const ::AcFunDanmu::Im::Cloud_Message_Emoticon_Code& Cloud_Message_Emoticon::_internal_emoticoncode(int index) const {
  return emoticoncode_.Get(index);
}
inline const ::AcFunDanmu::Im::Cloud_Message_Emoticon_Code& Cloud_Message_Emoticon::emoticoncode(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.Emoticon.emoticonCOde)
  return _internal_emoticoncode(index);
}
inline ::AcFunDanmu::Im::Cloud_Message_Emoticon_Code* Cloud_Message_Emoticon::_internal_add_emoticoncode() {
  return emoticoncode_.Add();
}
inline ::AcFunDanmu::Im::Cloud_Message_Emoticon_Code* Cloud_Message_Emoticon::add_emoticoncode() {
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Cloud.Message.Emoticon.emoticonCOde)
  return _internal_add_emoticoncode();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud_Message_Emoticon_Code >&
Cloud_Message_Emoticon::emoticoncode() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Cloud.Message.Emoticon.emoticonCOde)
  return emoticoncode_;
}

// -------------------------------------------------------------------

// Cloud_Message_File

// string uri = 1;
inline void Cloud_Message_File::clear_uri() {
  uri_.ClearToEmpty();
}
inline const std::string& Cloud_Message_File::uri() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.File.uri)
  return _internal_uri();
}
inline void Cloud_Message_File::set_uri(const std::string& value) {
  _internal_set_uri(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.File.uri)
}
inline std::string* Cloud_Message_File::mutable_uri() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.File.uri)
  return _internal_mutable_uri();
}
inline const std::string& Cloud_Message_File::_internal_uri() const {
  return uri_.Get();
}
inline void Cloud_Message_File::_internal_set_uri(const std::string& value) {
  
  uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Message_File::set_uri(std::string&& value) {
  
  uri_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Message.File.uri)
}
inline void Cloud_Message_File::set_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Message.File.uri)
}
inline void Cloud_Message_File::set_uri(const char* value,
    size_t size) {
  
  uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Message.File.uri)
}
inline std::string* Cloud_Message_File::_internal_mutable_uri() {
  
  return uri_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Message_File::release_uri() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.File.uri)
  return uri_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Message_File::set_allocated_uri(std::string* uri) {
  if (uri != nullptr) {
    
  } else {
    
  }
  uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uri,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.File.uri)
}

// string name = 2;
inline void Cloud_Message_File::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Cloud_Message_File::name() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.File.name)
  return _internal_name();
}
inline void Cloud_Message_File::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.File.name)
}
inline std::string* Cloud_Message_File::mutable_name() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.File.name)
  return _internal_mutable_name();
}
inline const std::string& Cloud_Message_File::_internal_name() const {
  return name_.Get();
}
inline void Cloud_Message_File::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Message_File::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Message.File.name)
}
inline void Cloud_Message_File::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Message.File.name)
}
inline void Cloud_Message_File::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Message.File.name)
}
inline std::string* Cloud_Message_File::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Message_File::release_name() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.File.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Message_File::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.File.name)
}

// string ext = 3;
inline void Cloud_Message_File::clear_ext() {
  ext_.ClearToEmpty();
}
inline const std::string& Cloud_Message_File::ext() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.File.ext)
  return _internal_ext();
}
inline void Cloud_Message_File::set_ext(const std::string& value) {
  _internal_set_ext(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.File.ext)
}
inline std::string* Cloud_Message_File::mutable_ext() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.File.ext)
  return _internal_mutable_ext();
}
inline const std::string& Cloud_Message_File::_internal_ext() const {
  return ext_.Get();
}
inline void Cloud_Message_File::_internal_set_ext(const std::string& value) {
  
  ext_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Message_File::set_ext(std::string&& value) {
  
  ext_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Message.File.ext)
}
inline void Cloud_Message_File::set_ext(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ext_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Message.File.ext)
}
inline void Cloud_Message_File::set_ext(const char* value,
    size_t size) {
  
  ext_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Message.File.ext)
}
inline std::string* Cloud_Message_File::_internal_mutable_ext() {
  
  return ext_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Message_File::release_ext() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.File.ext)
  return ext_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Message_File::set_allocated_ext(std::string* ext) {
  if (ext != nullptr) {
    
  } else {
    
  }
  ext_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ext,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.File.ext)
}

// string extra = 4;
inline void Cloud_Message_File::clear_extra() {
  extra_.ClearToEmpty();
}
inline const std::string& Cloud_Message_File::extra() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.File.extra)
  return _internal_extra();
}
inline void Cloud_Message_File::set_extra(const std::string& value) {
  _internal_set_extra(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.File.extra)
}
inline std::string* Cloud_Message_File::mutable_extra() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.File.extra)
  return _internal_mutable_extra();
}
inline const std::string& Cloud_Message_File::_internal_extra() const {
  return extra_.Get();
}
inline void Cloud_Message_File::_internal_set_extra(const std::string& value) {
  
  extra_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Message_File::set_extra(std::string&& value) {
  
  extra_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Message.File.extra)
}
inline void Cloud_Message_File::set_extra(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  extra_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Message.File.extra)
}
inline void Cloud_Message_File::set_extra(const char* value,
    size_t size) {
  
  extra_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Message.File.extra)
}
inline std::string* Cloud_Message_File::_internal_mutable_extra() {
  
  return extra_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Message_File::release_extra() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.File.extra)
  return extra_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Message_File::set_allocated_extra(std::string* extra) {
  if (extra != nullptr) {
    
  } else {
    
  }
  extra_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extra,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.File.extra)
}

// -------------------------------------------------------------------

// Cloud_Message_Reference_ReferenceMessage

// int32 contentType = 1;
inline void Cloud_Message_Reference_ReferenceMessage::clear_contenttype() {
  contenttype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Cloud_Message_Reference_ReferenceMessage::_internal_contenttype() const {
  return contenttype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Cloud_Message_Reference_ReferenceMessage::contenttype() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.Reference.ReferenceMessage.contentType)
  return _internal_contenttype();
}
inline void Cloud_Message_Reference_ReferenceMessage::_internal_set_contenttype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  contenttype_ = value;
}
inline void Cloud_Message_Reference_ReferenceMessage::set_contenttype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_contenttype(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.Reference.ReferenceMessage.contentType)
}

// bytes content = 2;
inline void Cloud_Message_Reference_ReferenceMessage::clear_content() {
  content_.ClearToEmpty();
}
inline const std::string& Cloud_Message_Reference_ReferenceMessage::content() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.Reference.ReferenceMessage.content)
  return _internal_content();
}
inline void Cloud_Message_Reference_ReferenceMessage::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.Reference.ReferenceMessage.content)
}
inline std::string* Cloud_Message_Reference_ReferenceMessage::mutable_content() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.Reference.ReferenceMessage.content)
  return _internal_mutable_content();
}
inline const std::string& Cloud_Message_Reference_ReferenceMessage::_internal_content() const {
  return content_.Get();
}
inline void Cloud_Message_Reference_ReferenceMessage::_internal_set_content(const std::string& value) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Message_Reference_ReferenceMessage::set_content(std::string&& value) {
  
  content_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Message.Reference.ReferenceMessage.content)
}
inline void Cloud_Message_Reference_ReferenceMessage::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Message.Reference.ReferenceMessage.content)
}
inline void Cloud_Message_Reference_ReferenceMessage::set_content(const void* value,
    size_t size) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Message.Reference.ReferenceMessage.content)
}
inline std::string* Cloud_Message_Reference_ReferenceMessage::_internal_mutable_content() {
  
  return content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Message_Reference_ReferenceMessage::release_content() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.Reference.ReferenceMessage.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Message_Reference_ReferenceMessage::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.Reference.ReferenceMessage.content)
}

// -------------------------------------------------------------------

// Cloud_Message_Reference

// .AcFunDanmu.Im.ImMessage.Message originMsg = 1;
inline bool Cloud_Message_Reference::_internal_has_originmsg() const {
  return this != internal_default_instance() && originmsg_ != nullptr;
}
inline bool Cloud_Message_Reference::has_originmsg() const {
  return _internal_has_originmsg();
}
inline void Cloud_Message_Reference::clear_originmsg() {
  if (GetArena() == nullptr && originmsg_ != nullptr) {
    delete originmsg_;
  }
  originmsg_ = nullptr;
}
inline const ::AcFunDanmu::Im::ImMessage_Message& Cloud_Message_Reference::_internal_originmsg() const {
  const ::AcFunDanmu::Im::ImMessage_Message* p = originmsg_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::ImMessage_Message&>(
      ::AcFunDanmu::Im::_ImMessage_Message_default_instance_);
}
inline const ::AcFunDanmu::Im::ImMessage_Message& Cloud_Message_Reference::originmsg() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.Reference.originMsg)
  return _internal_originmsg();
}
inline void Cloud_Message_Reference::unsafe_arena_set_allocated_originmsg(
    ::AcFunDanmu::Im::ImMessage_Message* originmsg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(originmsg_);
  }
  originmsg_ = originmsg;
  if (originmsg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Message.Reference.originMsg)
}
inline ::AcFunDanmu::Im::ImMessage_Message* Cloud_Message_Reference::release_originmsg() {
  
  ::AcFunDanmu::Im::ImMessage_Message* temp = originmsg_;
  originmsg_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::ImMessage_Message* Cloud_Message_Reference::unsafe_arena_release_originmsg() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.Reference.originMsg)
  
  ::AcFunDanmu::Im::ImMessage_Message* temp = originmsg_;
  originmsg_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::ImMessage_Message* Cloud_Message_Reference::_internal_mutable_originmsg() {
  
  if (originmsg_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_Message>(GetArena());
    originmsg_ = p;
  }
  return originmsg_;
}
inline ::AcFunDanmu::Im::ImMessage_Message* Cloud_Message_Reference::mutable_originmsg() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.Reference.originMsg)
  return _internal_mutable_originmsg();
}
inline void Cloud_Message_Reference::set_allocated_originmsg(::AcFunDanmu::Im::ImMessage_Message* originmsg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete originmsg_;
  }
  if (originmsg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(originmsg);
    if (message_arena != submessage_arena) {
      originmsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, originmsg, submessage_arena);
    }
    
  } else {
    
  }
  originmsg_ = originmsg;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.Reference.originMsg)
}

// .AcFunDanmu.Im.Cloud.Message.Reference.ReferenceMessage referenceMsg = 2;
inline bool Cloud_Message_Reference::_internal_has_referencemsg() const {
  return this != internal_default_instance() && referencemsg_ != nullptr;
}
inline bool Cloud_Message_Reference::has_referencemsg() const {
  return _internal_has_referencemsg();
}
inline void Cloud_Message_Reference::clear_referencemsg() {
  if (GetArena() == nullptr && referencemsg_ != nullptr) {
    delete referencemsg_;
  }
  referencemsg_ = nullptr;
}
inline const ::AcFunDanmu::Im::Cloud_Message_Reference_ReferenceMessage& Cloud_Message_Reference::_internal_referencemsg() const {
  const ::AcFunDanmu::Im::Cloud_Message_Reference_ReferenceMessage* p = referencemsg_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Cloud_Message_Reference_ReferenceMessage&>(
      ::AcFunDanmu::Im::_Cloud_Message_Reference_ReferenceMessage_default_instance_);
}
inline const ::AcFunDanmu::Im::Cloud_Message_Reference_ReferenceMessage& Cloud_Message_Reference::referencemsg() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.Reference.referenceMsg)
  return _internal_referencemsg();
}
inline void Cloud_Message_Reference::unsafe_arena_set_allocated_referencemsg(
    ::AcFunDanmu::Im::Cloud_Message_Reference_ReferenceMessage* referencemsg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(referencemsg_);
  }
  referencemsg_ = referencemsg;
  if (referencemsg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Message.Reference.referenceMsg)
}
inline ::AcFunDanmu::Im::Cloud_Message_Reference_ReferenceMessage* Cloud_Message_Reference::release_referencemsg() {
  
  ::AcFunDanmu::Im::Cloud_Message_Reference_ReferenceMessage* temp = referencemsg_;
  referencemsg_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::Cloud_Message_Reference_ReferenceMessage* Cloud_Message_Reference::unsafe_arena_release_referencemsg() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.Reference.referenceMsg)
  
  ::AcFunDanmu::Im::Cloud_Message_Reference_ReferenceMessage* temp = referencemsg_;
  referencemsg_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Cloud_Message_Reference_ReferenceMessage* Cloud_Message_Reference::_internal_mutable_referencemsg() {
  
  if (referencemsg_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_Reference_ReferenceMessage>(GetArena());
    referencemsg_ = p;
  }
  return referencemsg_;
}
inline ::AcFunDanmu::Im::Cloud_Message_Reference_ReferenceMessage* Cloud_Message_Reference::mutable_referencemsg() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.Reference.referenceMsg)
  return _internal_mutable_referencemsg();
}
inline void Cloud_Message_Reference::set_allocated_referencemsg(::AcFunDanmu::Im::Cloud_Message_Reference_ReferenceMessage* referencemsg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete referencemsg_;
  }
  if (referencemsg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(referencemsg);
    if (message_arena != submessage_arena) {
      referencemsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, referencemsg, submessage_arena);
    }
    
  } else {
    
  }
  referencemsg_ = referencemsg;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.Reference.referenceMsg)
}

// -------------------------------------------------------------------

// Cloud_Message_ForwardMessageContent

// repeated .AcFunDanmu.Im.ImMessage.Message message = 1;
inline int Cloud_Message_ForwardMessageContent::_internal_message_size() const {
  return message_.size();
}
inline int Cloud_Message_ForwardMessageContent::message_size() const {
  return _internal_message_size();
}
inline void Cloud_Message_ForwardMessageContent::clear_message() {
  message_.Clear();
}
inline ::AcFunDanmu::Im::ImMessage_Message* Cloud_Message_ForwardMessageContent::mutable_message(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.ForwardMessageContent.message)
  return message_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_Message >*
Cloud_Message_ForwardMessageContent::mutable_message() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Cloud.Message.ForwardMessageContent.message)
  return &message_;
}
inline const ::AcFunDanmu::Im::ImMessage_Message& Cloud_Message_ForwardMessageContent::_internal_message(int index) const {
  return message_.Get(index);
}
inline const ::AcFunDanmu::Im::ImMessage_Message& Cloud_Message_ForwardMessageContent::message(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.ForwardMessageContent.message)
  return _internal_message(index);
}
inline ::AcFunDanmu::Im::ImMessage_Message* Cloud_Message_ForwardMessageContent::_internal_add_message() {
  return message_.Add();
}
inline ::AcFunDanmu::Im::ImMessage_Message* Cloud_Message_ForwardMessageContent::add_message() {
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Cloud.Message.ForwardMessageContent.message)
  return _internal_add_message();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::ImMessage_Message >&
Cloud_Message_ForwardMessageContent::message() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Cloud.Message.ForwardMessageContent.message)
  return message_;
}

// -------------------------------------------------------------------

// Cloud_Message_NoticePlaceholderMeta

// string targetId = 1;
inline void Cloud_Message_NoticePlaceholderMeta::clear_targetid() {
  targetid_.ClearToEmpty();
}
inline const std::string& Cloud_Message_NoticePlaceholderMeta::targetid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.NoticePlaceholderMeta.targetId)
  return _internal_targetid();
}
inline void Cloud_Message_NoticePlaceholderMeta::set_targetid(const std::string& value) {
  _internal_set_targetid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.NoticePlaceholderMeta.targetId)
}
inline std::string* Cloud_Message_NoticePlaceholderMeta::mutable_targetid() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.NoticePlaceholderMeta.targetId)
  return _internal_mutable_targetid();
}
inline const std::string& Cloud_Message_NoticePlaceholderMeta::_internal_targetid() const {
  return targetid_.Get();
}
inline void Cloud_Message_NoticePlaceholderMeta::_internal_set_targetid(const std::string& value) {
  
  targetid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Message_NoticePlaceholderMeta::set_targetid(std::string&& value) {
  
  targetid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Message.NoticePlaceholderMeta.targetId)
}
inline void Cloud_Message_NoticePlaceholderMeta::set_targetid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  targetid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Message.NoticePlaceholderMeta.targetId)
}
inline void Cloud_Message_NoticePlaceholderMeta::set_targetid(const char* value,
    size_t size) {
  
  targetid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Message.NoticePlaceholderMeta.targetId)
}
inline std::string* Cloud_Message_NoticePlaceholderMeta::_internal_mutable_targetid() {
  
  return targetid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Message_NoticePlaceholderMeta::release_targetid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.NoticePlaceholderMeta.targetId)
  return targetid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Message_NoticePlaceholderMeta::set_allocated_targetid(std::string* targetid) {
  if (targetid != nullptr) {
    
  } else {
    
  }
  targetid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), targetid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.NoticePlaceholderMeta.targetId)
}

// int32 startIndex = 2;
inline void Cloud_Message_NoticePlaceholderMeta::clear_startindex() {
  startindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Cloud_Message_NoticePlaceholderMeta::_internal_startindex() const {
  return startindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Cloud_Message_NoticePlaceholderMeta::startindex() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.NoticePlaceholderMeta.startIndex)
  return _internal_startindex();
}
inline void Cloud_Message_NoticePlaceholderMeta::_internal_set_startindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  startindex_ = value;
}
inline void Cloud_Message_NoticePlaceholderMeta::set_startindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_startindex(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.NoticePlaceholderMeta.startIndex)
}

// int32 length = 3;
inline void Cloud_Message_NoticePlaceholderMeta::clear_length() {
  length_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Cloud_Message_NoticePlaceholderMeta::_internal_length() const {
  return length_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Cloud_Message_NoticePlaceholderMeta::length() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.NoticePlaceholderMeta.length)
  return _internal_length();
}
inline void Cloud_Message_NoticePlaceholderMeta::_internal_set_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  length_ = value;
}
inline void Cloud_Message_NoticePlaceholderMeta::set_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.NoticePlaceholderMeta.length)
}

// -------------------------------------------------------------------

// Cloud_Message_ImcNoticeMessage

// string text = 1;
inline void Cloud_Message_ImcNoticeMessage::clear_text() {
  text_.ClearToEmpty();
}
inline const std::string& Cloud_Message_ImcNoticeMessage::text() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.ImcNoticeMessage.text)
  return _internal_text();
}
inline void Cloud_Message_ImcNoticeMessage::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.ImcNoticeMessage.text)
}
inline std::string* Cloud_Message_ImcNoticeMessage::mutable_text() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.ImcNoticeMessage.text)
  return _internal_mutable_text();
}
inline const std::string& Cloud_Message_ImcNoticeMessage::_internal_text() const {
  return text_.Get();
}
inline void Cloud_Message_ImcNoticeMessage::_internal_set_text(const std::string& value) {
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Message_ImcNoticeMessage::set_text(std::string&& value) {
  
  text_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Message.ImcNoticeMessage.text)
}
inline void Cloud_Message_ImcNoticeMessage::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Message.ImcNoticeMessage.text)
}
inline void Cloud_Message_ImcNoticeMessage::set_text(const char* value,
    size_t size) {
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Message.ImcNoticeMessage.text)
}
inline std::string* Cloud_Message_ImcNoticeMessage::_internal_mutable_text() {
  
  return text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Message_ImcNoticeMessage::release_text() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.ImcNoticeMessage.text)
  return text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Message_ImcNoticeMessage::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.ImcNoticeMessage.text)
}

// repeated .AcFunDanmu.Im.Cloud.Message.NoticePlaceholderMeta noticePlaceholderMeta = 2;
inline int Cloud_Message_ImcNoticeMessage::_internal_noticeplaceholdermeta_size() const {
  return noticeplaceholdermeta_.size();
}
inline int Cloud_Message_ImcNoticeMessage::noticeplaceholdermeta_size() const {
  return _internal_noticeplaceholdermeta_size();
}
inline void Cloud_Message_ImcNoticeMessage::clear_noticeplaceholdermeta() {
  noticeplaceholdermeta_.Clear();
}
inline ::AcFunDanmu::Im::Cloud_Message_NoticePlaceholderMeta* Cloud_Message_ImcNoticeMessage::mutable_noticeplaceholdermeta(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.ImcNoticeMessage.noticePlaceholderMeta)
  return noticeplaceholdermeta_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud_Message_NoticePlaceholderMeta >*
Cloud_Message_ImcNoticeMessage::mutable_noticeplaceholdermeta() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Cloud.Message.ImcNoticeMessage.noticePlaceholderMeta)
  return &noticeplaceholdermeta_;
}
inline const ::AcFunDanmu::Im::Cloud_Message_NoticePlaceholderMeta& Cloud_Message_ImcNoticeMessage::_internal_noticeplaceholdermeta(int index) const {
  return noticeplaceholdermeta_.Get(index);
}
inline const ::AcFunDanmu::Im::Cloud_Message_NoticePlaceholderMeta& Cloud_Message_ImcNoticeMessage::noticeplaceholdermeta(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.ImcNoticeMessage.noticePlaceholderMeta)
  return _internal_noticeplaceholdermeta(index);
}
inline ::AcFunDanmu::Im::Cloud_Message_NoticePlaceholderMeta* Cloud_Message_ImcNoticeMessage::_internal_add_noticeplaceholdermeta() {
  return noticeplaceholdermeta_.Add();
}
inline ::AcFunDanmu::Im::Cloud_Message_NoticePlaceholderMeta* Cloud_Message_ImcNoticeMessage::add_noticeplaceholdermeta() {
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Cloud.Message.ImcNoticeMessage.noticePlaceholderMeta)
  return _internal_add_noticeplaceholdermeta();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud_Message_NoticePlaceholderMeta >&
Cloud_Message_ImcNoticeMessage::noticeplaceholdermeta() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Cloud.Message.ImcNoticeMessage.noticePlaceholderMeta)
  return noticeplaceholdermeta_;
}

// int32 noticeMetaType = 3;
inline void Cloud_Message_ImcNoticeMessage::clear_noticemetatype() {
  noticemetatype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Cloud_Message_ImcNoticeMessage::_internal_noticemetatype() const {
  return noticemetatype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Cloud_Message_ImcNoticeMessage::noticemetatype() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.ImcNoticeMessage.noticeMetaType)
  return _internal_noticemetatype();
}
inline void Cloud_Message_ImcNoticeMessage::_internal_set_noticemetatype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  noticemetatype_ = value;
}
inline void Cloud_Message_ImcNoticeMessage::set_noticemetatype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_noticemetatype(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.ImcNoticeMessage.noticeMetaType)
}

// bytes noticeMetaInfo = 4;
inline void Cloud_Message_ImcNoticeMessage::clear_noticemetainfo() {
  noticemetainfo_.ClearToEmpty();
}
inline const std::string& Cloud_Message_ImcNoticeMessage::noticemetainfo() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.ImcNoticeMessage.noticeMetaInfo)
  return _internal_noticemetainfo();
}
inline void Cloud_Message_ImcNoticeMessage::set_noticemetainfo(const std::string& value) {
  _internal_set_noticemetainfo(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.ImcNoticeMessage.noticeMetaInfo)
}
inline std::string* Cloud_Message_ImcNoticeMessage::mutable_noticemetainfo() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.ImcNoticeMessage.noticeMetaInfo)
  return _internal_mutable_noticemetainfo();
}
inline const std::string& Cloud_Message_ImcNoticeMessage::_internal_noticemetainfo() const {
  return noticemetainfo_.Get();
}
inline void Cloud_Message_ImcNoticeMessage::_internal_set_noticemetainfo(const std::string& value) {
  
  noticemetainfo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Message_ImcNoticeMessage::set_noticemetainfo(std::string&& value) {
  
  noticemetainfo_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Message.ImcNoticeMessage.noticeMetaInfo)
}
inline void Cloud_Message_ImcNoticeMessage::set_noticemetainfo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  noticemetainfo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Message.ImcNoticeMessage.noticeMetaInfo)
}
inline void Cloud_Message_ImcNoticeMessage::set_noticemetainfo(const void* value,
    size_t size) {
  
  noticemetainfo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Message.ImcNoticeMessage.noticeMetaInfo)
}
inline std::string* Cloud_Message_ImcNoticeMessage::_internal_mutable_noticemetainfo() {
  
  return noticemetainfo_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Message_ImcNoticeMessage::release_noticemetainfo() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.ImcNoticeMessage.noticeMetaInfo)
  return noticemetainfo_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Message_ImcNoticeMessage::set_allocated_noticemetainfo(std::string* noticemetainfo) {
  if (noticemetainfo != nullptr) {
    
  } else {
    
  }
  noticemetainfo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), noticemetainfo,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.ImcNoticeMessage.noticeMetaInfo)
}

// -------------------------------------------------------------------

// Cloud_Message_ConfirmInviteIntoGroupNoticeMetaInfo

// int64 requestId = 1;
inline void Cloud_Message_ConfirmInviteIntoGroupNoticeMetaInfo::clear_requestid() {
  requestid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Cloud_Message_ConfirmInviteIntoGroupNoticeMetaInfo::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Cloud_Message_ConfirmInviteIntoGroupNoticeMetaInfo::requestid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.ConfirmInviteIntoGroupNoticeMetaInfo.requestId)
  return _internal_requestid();
}
inline void Cloud_Message_ConfirmInviteIntoGroupNoticeMetaInfo::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  requestid_ = value;
}
inline void Cloud_Message_ConfirmInviteIntoGroupNoticeMetaInfo::set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.ConfirmInviteIntoGroupNoticeMetaInfo.requestId)
}

// string groupId = 2;
inline void Cloud_Message_ConfirmInviteIntoGroupNoticeMetaInfo::clear_groupid() {
  groupid_.ClearToEmpty();
}
inline const std::string& Cloud_Message_ConfirmInviteIntoGroupNoticeMetaInfo::groupid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.ConfirmInviteIntoGroupNoticeMetaInfo.groupId)
  return _internal_groupid();
}
inline void Cloud_Message_ConfirmInviteIntoGroupNoticeMetaInfo::set_groupid(const std::string& value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.ConfirmInviteIntoGroupNoticeMetaInfo.groupId)
}
inline std::string* Cloud_Message_ConfirmInviteIntoGroupNoticeMetaInfo::mutable_groupid() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.ConfirmInviteIntoGroupNoticeMetaInfo.groupId)
  return _internal_mutable_groupid();
}
inline const std::string& Cloud_Message_ConfirmInviteIntoGroupNoticeMetaInfo::_internal_groupid() const {
  return groupid_.Get();
}
inline void Cloud_Message_ConfirmInviteIntoGroupNoticeMetaInfo::_internal_set_groupid(const std::string& value) {
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Message_ConfirmInviteIntoGroupNoticeMetaInfo::set_groupid(std::string&& value) {
  
  groupid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Message.ConfirmInviteIntoGroupNoticeMetaInfo.groupId)
}
inline void Cloud_Message_ConfirmInviteIntoGroupNoticeMetaInfo::set_groupid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Message.ConfirmInviteIntoGroupNoticeMetaInfo.groupId)
}
inline void Cloud_Message_ConfirmInviteIntoGroupNoticeMetaInfo::set_groupid(const char* value,
    size_t size) {
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Message.ConfirmInviteIntoGroupNoticeMetaInfo.groupId)
}
inline std::string* Cloud_Message_ConfirmInviteIntoGroupNoticeMetaInfo::_internal_mutable_groupid() {
  
  return groupid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Message_ConfirmInviteIntoGroupNoticeMetaInfo::release_groupid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.ConfirmInviteIntoGroupNoticeMetaInfo.groupId)
  return groupid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Message_ConfirmInviteIntoGroupNoticeMetaInfo::set_allocated_groupid(std::string* groupid) {
  if (groupid != nullptr) {
    
  } else {
    
  }
  groupid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), groupid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.ConfirmInviteIntoGroupNoticeMetaInfo.groupId)
}

// .AcFunDanmu.Im.Cloud.Message.JoinRequestStatus status = 3;
inline void Cloud_Message_ConfirmInviteIntoGroupNoticeMetaInfo::clear_status() {
  status_ = 0;
}
inline ::AcFunDanmu::Im::Cloud_Message_JoinRequestStatus Cloud_Message_ConfirmInviteIntoGroupNoticeMetaInfo::_internal_status() const {
  return static_cast< ::AcFunDanmu::Im::Cloud_Message_JoinRequestStatus >(status_);
}
inline ::AcFunDanmu::Im::Cloud_Message_JoinRequestStatus Cloud_Message_ConfirmInviteIntoGroupNoticeMetaInfo::status() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.ConfirmInviteIntoGroupNoticeMetaInfo.status)
  return _internal_status();
}
inline void Cloud_Message_ConfirmInviteIntoGroupNoticeMetaInfo::_internal_set_status(::AcFunDanmu::Im::Cloud_Message_JoinRequestStatus value) {
  
  status_ = value;
}
inline void Cloud_Message_ConfirmInviteIntoGroupNoticeMetaInfo::set_status(::AcFunDanmu::Im::Cloud_Message_JoinRequestStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.ConfirmInviteIntoGroupNoticeMetaInfo.status)
}

// -------------------------------------------------------------------

// Cloud_Message_ConfirmJoinIntoGroupNoticeMetaInfo

// int64 requestId = 1;
inline void Cloud_Message_ConfirmJoinIntoGroupNoticeMetaInfo::clear_requestid() {
  requestid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Cloud_Message_ConfirmJoinIntoGroupNoticeMetaInfo::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Cloud_Message_ConfirmJoinIntoGroupNoticeMetaInfo::requestid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.ConfirmJoinIntoGroupNoticeMetaInfo.requestId)
  return _internal_requestid();
}
inline void Cloud_Message_ConfirmJoinIntoGroupNoticeMetaInfo::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  requestid_ = value;
}
inline void Cloud_Message_ConfirmJoinIntoGroupNoticeMetaInfo::set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.ConfirmJoinIntoGroupNoticeMetaInfo.requestId)
}

// string groupId = 2;
inline void Cloud_Message_ConfirmJoinIntoGroupNoticeMetaInfo::clear_groupid() {
  groupid_.ClearToEmpty();
}
inline const std::string& Cloud_Message_ConfirmJoinIntoGroupNoticeMetaInfo::groupid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.ConfirmJoinIntoGroupNoticeMetaInfo.groupId)
  return _internal_groupid();
}
inline void Cloud_Message_ConfirmJoinIntoGroupNoticeMetaInfo::set_groupid(const std::string& value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.ConfirmJoinIntoGroupNoticeMetaInfo.groupId)
}
inline std::string* Cloud_Message_ConfirmJoinIntoGroupNoticeMetaInfo::mutable_groupid() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.ConfirmJoinIntoGroupNoticeMetaInfo.groupId)
  return _internal_mutable_groupid();
}
inline const std::string& Cloud_Message_ConfirmJoinIntoGroupNoticeMetaInfo::_internal_groupid() const {
  return groupid_.Get();
}
inline void Cloud_Message_ConfirmJoinIntoGroupNoticeMetaInfo::_internal_set_groupid(const std::string& value) {
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Message_ConfirmJoinIntoGroupNoticeMetaInfo::set_groupid(std::string&& value) {
  
  groupid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Message.ConfirmJoinIntoGroupNoticeMetaInfo.groupId)
}
inline void Cloud_Message_ConfirmJoinIntoGroupNoticeMetaInfo::set_groupid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Message.ConfirmJoinIntoGroupNoticeMetaInfo.groupId)
}
inline void Cloud_Message_ConfirmJoinIntoGroupNoticeMetaInfo::set_groupid(const char* value,
    size_t size) {
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Message.ConfirmJoinIntoGroupNoticeMetaInfo.groupId)
}
inline std::string* Cloud_Message_ConfirmJoinIntoGroupNoticeMetaInfo::_internal_mutable_groupid() {
  
  return groupid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Message_ConfirmJoinIntoGroupNoticeMetaInfo::release_groupid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.ConfirmJoinIntoGroupNoticeMetaInfo.groupId)
  return groupid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Message_ConfirmJoinIntoGroupNoticeMetaInfo::set_allocated_groupid(std::string* groupid) {
  if (groupid != nullptr) {
    
  } else {
    
  }
  groupid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), groupid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.ConfirmJoinIntoGroupNoticeMetaInfo.groupId)
}

// .AcFunDanmu.Im.Cloud.Message.JoinRequestStatus status = 3;
inline void Cloud_Message_ConfirmJoinIntoGroupNoticeMetaInfo::clear_status() {
  status_ = 0;
}
inline ::AcFunDanmu::Im::Cloud_Message_JoinRequestStatus Cloud_Message_ConfirmJoinIntoGroupNoticeMetaInfo::_internal_status() const {
  return static_cast< ::AcFunDanmu::Im::Cloud_Message_JoinRequestStatus >(status_);
}
inline ::AcFunDanmu::Im::Cloud_Message_JoinRequestStatus Cloud_Message_ConfirmJoinIntoGroupNoticeMetaInfo::status() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.ConfirmJoinIntoGroupNoticeMetaInfo.status)
  return _internal_status();
}
inline void Cloud_Message_ConfirmJoinIntoGroupNoticeMetaInfo::_internal_set_status(::AcFunDanmu::Im::Cloud_Message_JoinRequestStatus value) {
  
  status_ = value;
}
inline void Cloud_Message_ConfirmJoinIntoGroupNoticeMetaInfo::set_status(::AcFunDanmu::Im::Cloud_Message_JoinRequestStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.ConfirmJoinIntoGroupNoticeMetaInfo.status)
}

// -------------------------------------------------------------------

// Cloud_Message_GroupCreateRequest

// repeated .AcFunDanmu.Im.Basic.User members = 1;
inline int Cloud_Message_GroupCreateRequest::_internal_members_size() const {
  return members_.size();
}
inline int Cloud_Message_GroupCreateRequest::members_size() const {
  return _internal_members_size();
}
inline void Cloud_Message_GroupCreateRequest::clear_members() {
  members_.Clear();
}
inline ::AcFunDanmu::Im::Basic_User* Cloud_Message_GroupCreateRequest::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupCreateRequest.members)
  return members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_User >*
Cloud_Message_GroupCreateRequest::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Cloud.Message.GroupCreateRequest.members)
  return &members_;
}
inline const ::AcFunDanmu::Im::Basic_User& Cloud_Message_GroupCreateRequest::_internal_members(int index) const {
  return members_.Get(index);
}
inline const ::AcFunDanmu::Im::Basic_User& Cloud_Message_GroupCreateRequest::members(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupCreateRequest.members)
  return _internal_members(index);
}
inline ::AcFunDanmu::Im::Basic_User* Cloud_Message_GroupCreateRequest::_internal_add_members() {
  return members_.Add();
}
inline ::AcFunDanmu::Im::Basic_User* Cloud_Message_GroupCreateRequest::add_members() {
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Cloud.Message.GroupCreateRequest.members)
  return _internal_add_members();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_User >&
Cloud_Message_GroupCreateRequest::members() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Cloud.Message.GroupCreateRequest.members)
  return members_;
}

// -------------------------------------------------------------------

// Cloud_Message_GroupCreateReponse

// string groupId = 1;
inline void Cloud_Message_GroupCreateReponse::clear_groupid() {
  groupid_.ClearToEmpty();
}
inline const std::string& Cloud_Message_GroupCreateReponse::groupid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupCreateReponse.groupId)
  return _internal_groupid();
}
inline void Cloud_Message_GroupCreateReponse::set_groupid(const std::string& value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupCreateReponse.groupId)
}
inline std::string* Cloud_Message_GroupCreateReponse::mutable_groupid() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupCreateReponse.groupId)
  return _internal_mutable_groupid();
}
inline const std::string& Cloud_Message_GroupCreateReponse::_internal_groupid() const {
  return groupid_.Get();
}
inline void Cloud_Message_GroupCreateReponse::_internal_set_groupid(const std::string& value) {
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Message_GroupCreateReponse::set_groupid(std::string&& value) {
  
  groupid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Message.GroupCreateReponse.groupId)
}
inline void Cloud_Message_GroupCreateReponse::set_groupid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Message.GroupCreateReponse.groupId)
}
inline void Cloud_Message_GroupCreateReponse::set_groupid(const char* value,
    size_t size) {
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Message.GroupCreateReponse.groupId)
}
inline std::string* Cloud_Message_GroupCreateReponse::_internal_mutable_groupid() {
  
  return groupid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Message_GroupCreateReponse::release_groupid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupCreateReponse.groupId)
  return groupid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Message_GroupCreateReponse::set_allocated_groupid(std::string* groupid) {
  if (groupid != nullptr) {
    
  } else {
    
  }
  groupid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), groupid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupCreateReponse.groupId)
}

// .AcFunDanmu.Im.Cloud.Message.GroupInfo groupInfo = 2;
inline bool Cloud_Message_GroupCreateReponse::_internal_has_groupinfo() const {
  return this != internal_default_instance() && groupinfo_ != nullptr;
}
inline bool Cloud_Message_GroupCreateReponse::has_groupinfo() const {
  return _internal_has_groupinfo();
}
inline void Cloud_Message_GroupCreateReponse::clear_groupinfo() {
  if (GetArena() == nullptr && groupinfo_ != nullptr) {
    delete groupinfo_;
  }
  groupinfo_ = nullptr;
}
inline const ::AcFunDanmu::Im::Cloud_Message_GroupInfo& Cloud_Message_GroupCreateReponse::_internal_groupinfo() const {
  const ::AcFunDanmu::Im::Cloud_Message_GroupInfo* p = groupinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Cloud_Message_GroupInfo&>(
      ::AcFunDanmu::Im::_Cloud_Message_GroupInfo_default_instance_);
}
inline const ::AcFunDanmu::Im::Cloud_Message_GroupInfo& Cloud_Message_GroupCreateReponse::groupinfo() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupCreateReponse.groupInfo)
  return _internal_groupinfo();
}
inline void Cloud_Message_GroupCreateReponse::unsafe_arena_set_allocated_groupinfo(
    ::AcFunDanmu::Im::Cloud_Message_GroupInfo* groupinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(groupinfo_);
  }
  groupinfo_ = groupinfo;
  if (groupinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupCreateReponse.groupInfo)
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupInfo* Cloud_Message_GroupCreateReponse::release_groupinfo() {
  
  ::AcFunDanmu::Im::Cloud_Message_GroupInfo* temp = groupinfo_;
  groupinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupInfo* Cloud_Message_GroupCreateReponse::unsafe_arena_release_groupinfo() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupCreateReponse.groupInfo)
  
  ::AcFunDanmu::Im::Cloud_Message_GroupInfo* temp = groupinfo_;
  groupinfo_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupInfo* Cloud_Message_GroupCreateReponse::_internal_mutable_groupinfo() {
  
  if (groupinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_GroupInfo>(GetArena());
    groupinfo_ = p;
  }
  return groupinfo_;
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupInfo* Cloud_Message_GroupCreateReponse::mutable_groupinfo() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupCreateReponse.groupInfo)
  return _internal_mutable_groupinfo();
}
inline void Cloud_Message_GroupCreateReponse::set_allocated_groupinfo(::AcFunDanmu::Im::Cloud_Message_GroupInfo* groupinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete groupinfo_;
  }
  if (groupinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(groupinfo);
    if (message_arena != submessage_arena) {
      groupinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, groupinfo, submessage_arena);
    }
    
  } else {
    
  }
  groupinfo_ = groupinfo;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupCreateReponse.groupInfo)
}

// repeated .AcFunDanmu.Im.Cloud.Message.GroupMember members = 3;
inline int Cloud_Message_GroupCreateReponse::_internal_members_size() const {
  return members_.size();
}
inline int Cloud_Message_GroupCreateReponse::members_size() const {
  return _internal_members_size();
}
inline void Cloud_Message_GroupCreateReponse::clear_members() {
  members_.Clear();
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupMember* Cloud_Message_GroupCreateReponse::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupCreateReponse.members)
  return members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud_Message_GroupMember >*
Cloud_Message_GroupCreateReponse::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Cloud.Message.GroupCreateReponse.members)
  return &members_;
}
inline const ::AcFunDanmu::Im::Cloud_Message_GroupMember& Cloud_Message_GroupCreateReponse::_internal_members(int index) const {
  return members_.Get(index);
}
inline const ::AcFunDanmu::Im::Cloud_Message_GroupMember& Cloud_Message_GroupCreateReponse::members(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupCreateReponse.members)
  return _internal_members(index);
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupMember* Cloud_Message_GroupCreateReponse::_internal_add_members() {
  return members_.Add();
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupMember* Cloud_Message_GroupCreateReponse::add_members() {
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Cloud.Message.GroupCreateReponse.members)
  return _internal_add_members();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud_Message_GroupMember >&
Cloud_Message_GroupCreateReponse::members() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Cloud.Message.GroupCreateReponse.members)
  return members_;
}

// -------------------------------------------------------------------

// Cloud_Message_GroupDeleteRequest

// string groupId = 1;
inline void Cloud_Message_GroupDeleteRequest::clear_groupid() {
  groupid_.ClearToEmpty();
}
inline const std::string& Cloud_Message_GroupDeleteRequest::groupid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupDeleteRequest.groupId)
  return _internal_groupid();
}
inline void Cloud_Message_GroupDeleteRequest::set_groupid(const std::string& value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupDeleteRequest.groupId)
}
inline std::string* Cloud_Message_GroupDeleteRequest::mutable_groupid() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupDeleteRequest.groupId)
  return _internal_mutable_groupid();
}
inline const std::string& Cloud_Message_GroupDeleteRequest::_internal_groupid() const {
  return groupid_.Get();
}
inline void Cloud_Message_GroupDeleteRequest::_internal_set_groupid(const std::string& value) {
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Message_GroupDeleteRequest::set_groupid(std::string&& value) {
  
  groupid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Message.GroupDeleteRequest.groupId)
}
inline void Cloud_Message_GroupDeleteRequest::set_groupid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Message.GroupDeleteRequest.groupId)
}
inline void Cloud_Message_GroupDeleteRequest::set_groupid(const char* value,
    size_t size) {
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Message.GroupDeleteRequest.groupId)
}
inline std::string* Cloud_Message_GroupDeleteRequest::_internal_mutable_groupid() {
  
  return groupid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Message_GroupDeleteRequest::release_groupid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupDeleteRequest.groupId)
  return groupid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Message_GroupDeleteRequest::set_allocated_groupid(std::string* groupid) {
  if (groupid != nullptr) {
    
  } else {
    
  }
  groupid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), groupid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupDeleteRequest.groupId)
}

// -------------------------------------------------------------------

// Cloud_Message_GroupDeleteResponse

// -------------------------------------------------------------------

// Cloud_Message_GroupInviteRequest

// string groupId = 1;
inline void Cloud_Message_GroupInviteRequest::clear_groupid() {
  groupid_.ClearToEmpty();
}
inline const std::string& Cloud_Message_GroupInviteRequest::groupid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupInviteRequest.groupId)
  return _internal_groupid();
}
inline void Cloud_Message_GroupInviteRequest::set_groupid(const std::string& value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupInviteRequest.groupId)
}
inline std::string* Cloud_Message_GroupInviteRequest::mutable_groupid() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupInviteRequest.groupId)
  return _internal_mutable_groupid();
}
inline const std::string& Cloud_Message_GroupInviteRequest::_internal_groupid() const {
  return groupid_.Get();
}
inline void Cloud_Message_GroupInviteRequest::_internal_set_groupid(const std::string& value) {
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Message_GroupInviteRequest::set_groupid(std::string&& value) {
  
  groupid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Message.GroupInviteRequest.groupId)
}
inline void Cloud_Message_GroupInviteRequest::set_groupid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Message.GroupInviteRequest.groupId)
}
inline void Cloud_Message_GroupInviteRequest::set_groupid(const char* value,
    size_t size) {
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Message.GroupInviteRequest.groupId)
}
inline std::string* Cloud_Message_GroupInviteRequest::_internal_mutable_groupid() {
  
  return groupid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Message_GroupInviteRequest::release_groupid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupInviteRequest.groupId)
  return groupid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Message_GroupInviteRequest::set_allocated_groupid(std::string* groupid) {
  if (groupid != nullptr) {
    
  } else {
    
  }
  groupid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), groupid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupInviteRequest.groupId)
}

// repeated .AcFunDanmu.Im.Basic.User members = 2;
inline int Cloud_Message_GroupInviteRequest::_internal_members_size() const {
  return members_.size();
}
inline int Cloud_Message_GroupInviteRequest::members_size() const {
  return _internal_members_size();
}
inline void Cloud_Message_GroupInviteRequest::clear_members() {
  members_.Clear();
}
inline ::AcFunDanmu::Im::Basic_User* Cloud_Message_GroupInviteRequest::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupInviteRequest.members)
  return members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_User >*
Cloud_Message_GroupInviteRequest::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Cloud.Message.GroupInviteRequest.members)
  return &members_;
}
inline const ::AcFunDanmu::Im::Basic_User& Cloud_Message_GroupInviteRequest::_internal_members(int index) const {
  return members_.Get(index);
}
inline const ::AcFunDanmu::Im::Basic_User& Cloud_Message_GroupInviteRequest::members(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupInviteRequest.members)
  return _internal_members(index);
}
inline ::AcFunDanmu::Im::Basic_User* Cloud_Message_GroupInviteRequest::_internal_add_members() {
  return members_.Add();
}
inline ::AcFunDanmu::Im::Basic_User* Cloud_Message_GroupInviteRequest::add_members() {
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Cloud.Message.GroupInviteRequest.members)
  return _internal_add_members();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_User >&
Cloud_Message_GroupInviteRequest::members() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Cloud.Message.GroupInviteRequest.members)
  return members_;
}

// string descContent = 3;
inline void Cloud_Message_GroupInviteRequest::clear_desccontent() {
  desccontent_.ClearToEmpty();
}
inline const std::string& Cloud_Message_GroupInviteRequest::desccontent() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupInviteRequest.descContent)
  return _internal_desccontent();
}
inline void Cloud_Message_GroupInviteRequest::set_desccontent(const std::string& value) {
  _internal_set_desccontent(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupInviteRequest.descContent)
}
inline std::string* Cloud_Message_GroupInviteRequest::mutable_desccontent() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupInviteRequest.descContent)
  return _internal_mutable_desccontent();
}
inline const std::string& Cloud_Message_GroupInviteRequest::_internal_desccontent() const {
  return desccontent_.Get();
}
inline void Cloud_Message_GroupInviteRequest::_internal_set_desccontent(const std::string& value) {
  
  desccontent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Message_GroupInviteRequest::set_desccontent(std::string&& value) {
  
  desccontent_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Message.GroupInviteRequest.descContent)
}
inline void Cloud_Message_GroupInviteRequest::set_desccontent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  desccontent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Message.GroupInviteRequest.descContent)
}
inline void Cloud_Message_GroupInviteRequest::set_desccontent(const char* value,
    size_t size) {
  
  desccontent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Message.GroupInviteRequest.descContent)
}
inline std::string* Cloud_Message_GroupInviteRequest::_internal_mutable_desccontent() {
  
  return desccontent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Message_GroupInviteRequest::release_desccontent() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupInviteRequest.descContent)
  return desccontent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Message_GroupInviteRequest::set_allocated_desccontent(std::string* desccontent) {
  if (desccontent != nullptr) {
    
  } else {
    
  }
  desccontent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desccontent,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupInviteRequest.descContent)
}

// -------------------------------------------------------------------

// Cloud_Message_GroupInvideResponse

// string groupId = 1;
inline void Cloud_Message_GroupInvideResponse::clear_groupid() {
  groupid_.ClearToEmpty();
}
inline const std::string& Cloud_Message_GroupInvideResponse::groupid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupInvideResponse.groupId)
  return _internal_groupid();
}
inline void Cloud_Message_GroupInvideResponse::set_groupid(const std::string& value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupInvideResponse.groupId)
}
inline std::string* Cloud_Message_GroupInvideResponse::mutable_groupid() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupInvideResponse.groupId)
  return _internal_mutable_groupid();
}
inline const std::string& Cloud_Message_GroupInvideResponse::_internal_groupid() const {
  return groupid_.Get();
}
inline void Cloud_Message_GroupInvideResponse::_internal_set_groupid(const std::string& value) {
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Message_GroupInvideResponse::set_groupid(std::string&& value) {
  
  groupid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Message.GroupInvideResponse.groupId)
}
inline void Cloud_Message_GroupInvideResponse::set_groupid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Message.GroupInvideResponse.groupId)
}
inline void Cloud_Message_GroupInvideResponse::set_groupid(const char* value,
    size_t size) {
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Message.GroupInvideResponse.groupId)
}
inline std::string* Cloud_Message_GroupInvideResponse::_internal_mutable_groupid() {
  
  return groupid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Message_GroupInvideResponse::release_groupid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupInvideResponse.groupId)
  return groupid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Message_GroupInvideResponse::set_allocated_groupid(std::string* groupid) {
  if (groupid != nullptr) {
    
  } else {
    
  }
  groupid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), groupid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupInvideResponse.groupId)
}

// .AcFunDanmu.Im.Cloud.Message.GroupInvideResponse.InviteStatus inviteStatus = 2;
inline void Cloud_Message_GroupInvideResponse::clear_invitestatus() {
  invitestatus_ = 0;
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupInvideResponse_InviteStatus Cloud_Message_GroupInvideResponse::_internal_invitestatus() const {
  return static_cast< ::AcFunDanmu::Im::Cloud_Message_GroupInvideResponse_InviteStatus >(invitestatus_);
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupInvideResponse_InviteStatus Cloud_Message_GroupInvideResponse::invitestatus() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupInvideResponse.inviteStatus)
  return _internal_invitestatus();
}
inline void Cloud_Message_GroupInvideResponse::_internal_set_invitestatus(::AcFunDanmu::Im::Cloud_Message_GroupInvideResponse_InviteStatus value) {
  
  invitestatus_ = value;
}
inline void Cloud_Message_GroupInvideResponse::set_invitestatus(::AcFunDanmu::Im::Cloud_Message_GroupInvideResponse_InviteStatus value) {
  _internal_set_invitestatus(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupInvideResponse.inviteStatus)
}

// -------------------------------------------------------------------

// Cloud_Message_GroupJoinRequest

// string groupId = 1;
inline void Cloud_Message_GroupJoinRequest::clear_groupid() {
  groupid_.ClearToEmpty();
}
inline const std::string& Cloud_Message_GroupJoinRequest::groupid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupJoinRequest.groupId)
  return _internal_groupid();
}
inline void Cloud_Message_GroupJoinRequest::set_groupid(const std::string& value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupJoinRequest.groupId)
}
inline std::string* Cloud_Message_GroupJoinRequest::mutable_groupid() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupJoinRequest.groupId)
  return _internal_mutable_groupid();
}
inline const std::string& Cloud_Message_GroupJoinRequest::_internal_groupid() const {
  return groupid_.Get();
}
inline void Cloud_Message_GroupJoinRequest::_internal_set_groupid(const std::string& value) {
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Message_GroupJoinRequest::set_groupid(std::string&& value) {
  
  groupid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Message.GroupJoinRequest.groupId)
}
inline void Cloud_Message_GroupJoinRequest::set_groupid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Message.GroupJoinRequest.groupId)
}
inline void Cloud_Message_GroupJoinRequest::set_groupid(const char* value,
    size_t size) {
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Message.GroupJoinRequest.groupId)
}
inline std::string* Cloud_Message_GroupJoinRequest::_internal_mutable_groupid() {
  
  return groupid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Message_GroupJoinRequest::release_groupid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupJoinRequest.groupId)
  return groupid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Message_GroupJoinRequest::set_allocated_groupid(std::string* groupid) {
  if (groupid != nullptr) {
    
  } else {
    
  }
  groupid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), groupid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupJoinRequest.groupId)
}

// .AcFunDanmu.Im.Basic.User inviter = 2;
inline bool Cloud_Message_GroupJoinRequest::_internal_has_inviter() const {
  return this != internal_default_instance() && inviter_ != nullptr;
}
inline bool Cloud_Message_GroupJoinRequest::has_inviter() const {
  return _internal_has_inviter();
}
inline void Cloud_Message_GroupJoinRequest::clear_inviter() {
  if (GetArena() == nullptr && inviter_ != nullptr) {
    delete inviter_;
  }
  inviter_ = nullptr;
}
inline const ::AcFunDanmu::Im::Basic_User& Cloud_Message_GroupJoinRequest::_internal_inviter() const {
  const ::AcFunDanmu::Im::Basic_User* p = inviter_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic_User&>(
      ::AcFunDanmu::Im::_Basic_User_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic_User& Cloud_Message_GroupJoinRequest::inviter() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupJoinRequest.inviter)
  return _internal_inviter();
}
inline void Cloud_Message_GroupJoinRequest::unsafe_arena_set_allocated_inviter(
    ::AcFunDanmu::Im::Basic_User* inviter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inviter_);
  }
  inviter_ = inviter;
  if (inviter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupJoinRequest.inviter)
}
inline ::AcFunDanmu::Im::Basic_User* Cloud_Message_GroupJoinRequest::release_inviter() {
  
  ::AcFunDanmu::Im::Basic_User* temp = inviter_;
  inviter_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::Basic_User* Cloud_Message_GroupJoinRequest::unsafe_arena_release_inviter() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupJoinRequest.inviter)
  
  ::AcFunDanmu::Im::Basic_User* temp = inviter_;
  inviter_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic_User* Cloud_Message_GroupJoinRequest::_internal_mutable_inviter() {
  
  if (inviter_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic_User>(GetArena());
    inviter_ = p;
  }
  return inviter_;
}
inline ::AcFunDanmu::Im::Basic_User* Cloud_Message_GroupJoinRequest::mutable_inviter() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupJoinRequest.inviter)
  return _internal_mutable_inviter();
}
inline void Cloud_Message_GroupJoinRequest::set_allocated_inviter(::AcFunDanmu::Im::Basic_User* inviter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete inviter_;
  }
  if (inviter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(inviter);
    if (message_arena != submessage_arena) {
      inviter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inviter, submessage_arena);
    }
    
  } else {
    
  }
  inviter_ = inviter;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupJoinRequest.inviter)
}

// string descContent = 3;
inline void Cloud_Message_GroupJoinRequest::clear_desccontent() {
  desccontent_.ClearToEmpty();
}
inline const std::string& Cloud_Message_GroupJoinRequest::desccontent() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupJoinRequest.descContent)
  return _internal_desccontent();
}
inline void Cloud_Message_GroupJoinRequest::set_desccontent(const std::string& value) {
  _internal_set_desccontent(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupJoinRequest.descContent)
}
inline std::string* Cloud_Message_GroupJoinRequest::mutable_desccontent() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupJoinRequest.descContent)
  return _internal_mutable_desccontent();
}
inline const std::string& Cloud_Message_GroupJoinRequest::_internal_desccontent() const {
  return desccontent_.Get();
}
inline void Cloud_Message_GroupJoinRequest::_internal_set_desccontent(const std::string& value) {
  
  desccontent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Message_GroupJoinRequest::set_desccontent(std::string&& value) {
  
  desccontent_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Message.GroupJoinRequest.descContent)
}
inline void Cloud_Message_GroupJoinRequest::set_desccontent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  desccontent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Message.GroupJoinRequest.descContent)
}
inline void Cloud_Message_GroupJoinRequest::set_desccontent(const char* value,
    size_t size) {
  
  desccontent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Message.GroupJoinRequest.descContent)
}
inline std::string* Cloud_Message_GroupJoinRequest::_internal_mutable_desccontent() {
  
  return desccontent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Message_GroupJoinRequest::release_desccontent() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupJoinRequest.descContent)
  return desccontent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Message_GroupJoinRequest::set_allocated_desccontent(std::string* desccontent) {
  if (desccontent != nullptr) {
    
  } else {
    
  }
  desccontent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desccontent,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupJoinRequest.descContent)
}

// .AcFunDanmu.Im.Cloud.Message.GroupFindType findType = 4;
inline void Cloud_Message_GroupJoinRequest::clear_findtype() {
  findtype_ = 0;
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupFindType Cloud_Message_GroupJoinRequest::_internal_findtype() const {
  return static_cast< ::AcFunDanmu::Im::Cloud_Message_GroupFindType >(findtype_);
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupFindType Cloud_Message_GroupJoinRequest::findtype() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupJoinRequest.findType)
  return _internal_findtype();
}
inline void Cloud_Message_GroupJoinRequest::_internal_set_findtype(::AcFunDanmu::Im::Cloud_Message_GroupFindType value) {
  
  findtype_ = value;
}
inline void Cloud_Message_GroupJoinRequest::set_findtype(::AcFunDanmu::Im::Cloud_Message_GroupFindType value) {
  _internal_set_findtype(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupJoinRequest.findType)
}

// -------------------------------------------------------------------

// Cloud_Message_GroupJoinResponse

// .AcFunDanmu.Im.Cloud.Message.GroupJoinResponse.JoinStatus joinStatus = 1;
inline void Cloud_Message_GroupJoinResponse::clear_joinstatus() {
  joinstatus_ = 0;
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupJoinResponse_JoinStatus Cloud_Message_GroupJoinResponse::_internal_joinstatus() const {
  return static_cast< ::AcFunDanmu::Im::Cloud_Message_GroupJoinResponse_JoinStatus >(joinstatus_);
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupJoinResponse_JoinStatus Cloud_Message_GroupJoinResponse::joinstatus() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupJoinResponse.joinStatus)
  return _internal_joinstatus();
}
inline void Cloud_Message_GroupJoinResponse::_internal_set_joinstatus(::AcFunDanmu::Im::Cloud_Message_GroupJoinResponse_JoinStatus value) {
  
  joinstatus_ = value;
}
inline void Cloud_Message_GroupJoinResponse::set_joinstatus(::AcFunDanmu::Im::Cloud_Message_GroupJoinResponse_JoinStatus value) {
  _internal_set_joinstatus(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupJoinResponse.joinStatus)
}

// -------------------------------------------------------------------

// Cloud_Message_GroupJoinRequestAckRequest

// int64 reqId = 1;
inline void Cloud_Message_GroupJoinRequestAckRequest::clear_reqid() {
  reqid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Cloud_Message_GroupJoinRequestAckRequest::_internal_reqid() const {
  return reqid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Cloud_Message_GroupJoinRequestAckRequest::reqid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestAckRequest.reqId)
  return _internal_reqid();
}
inline void Cloud_Message_GroupJoinRequestAckRequest::_internal_set_reqid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  reqid_ = value;
}
inline void Cloud_Message_GroupJoinRequestAckRequest::set_reqid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_reqid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestAckRequest.reqId)
}

// string groupId = 2;
inline void Cloud_Message_GroupJoinRequestAckRequest::clear_groupid() {
  groupid_.ClearToEmpty();
}
inline const std::string& Cloud_Message_GroupJoinRequestAckRequest::groupid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestAckRequest.groupId)
  return _internal_groupid();
}
inline void Cloud_Message_GroupJoinRequestAckRequest::set_groupid(const std::string& value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestAckRequest.groupId)
}
inline std::string* Cloud_Message_GroupJoinRequestAckRequest::mutable_groupid() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestAckRequest.groupId)
  return _internal_mutable_groupid();
}
inline const std::string& Cloud_Message_GroupJoinRequestAckRequest::_internal_groupid() const {
  return groupid_.Get();
}
inline void Cloud_Message_GroupJoinRequestAckRequest::_internal_set_groupid(const std::string& value) {
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Message_GroupJoinRequestAckRequest::set_groupid(std::string&& value) {
  
  groupid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestAckRequest.groupId)
}
inline void Cloud_Message_GroupJoinRequestAckRequest::set_groupid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestAckRequest.groupId)
}
inline void Cloud_Message_GroupJoinRequestAckRequest::set_groupid(const char* value,
    size_t size) {
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestAckRequest.groupId)
}
inline std::string* Cloud_Message_GroupJoinRequestAckRequest::_internal_mutable_groupid() {
  
  return groupid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Message_GroupJoinRequestAckRequest::release_groupid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestAckRequest.groupId)
  return groupid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Message_GroupJoinRequestAckRequest::set_allocated_groupid(std::string* groupid) {
  if (groupid != nullptr) {
    
  } else {
    
  }
  groupid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), groupid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestAckRequest.groupId)
}

// .AcFunDanmu.Im.Cloud.Message.GroupJoinRequestAckRequest.GroupJoinAckType groupJoinAckType = 3;
inline void Cloud_Message_GroupJoinRequestAckRequest::clear_groupjoinacktype() {
  groupjoinacktype_ = 0;
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupJoinRequestAckRequest_GroupJoinAckType Cloud_Message_GroupJoinRequestAckRequest::_internal_groupjoinacktype() const {
  return static_cast< ::AcFunDanmu::Im::Cloud_Message_GroupJoinRequestAckRequest_GroupJoinAckType >(groupjoinacktype_);
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupJoinRequestAckRequest_GroupJoinAckType Cloud_Message_GroupJoinRequestAckRequest::groupjoinacktype() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestAckRequest.groupJoinAckType)
  return _internal_groupjoinacktype();
}
inline void Cloud_Message_GroupJoinRequestAckRequest::_internal_set_groupjoinacktype(::AcFunDanmu::Im::Cloud_Message_GroupJoinRequestAckRequest_GroupJoinAckType value) {
  
  groupjoinacktype_ = value;
}
inline void Cloud_Message_GroupJoinRequestAckRequest::set_groupjoinacktype(::AcFunDanmu::Im::Cloud_Message_GroupJoinRequestAckRequest_GroupJoinAckType value) {
  _internal_set_groupjoinacktype(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestAckRequest.groupJoinAckType)
}

// -------------------------------------------------------------------

// Cloud_Message_GroupJoinRequestAckResponse

// -------------------------------------------------------------------

// Cloud_Message_GroupJoinRequestGetRequest

// int64 reqSeq = 1;
inline void Cloud_Message_GroupJoinRequestGetRequest::clear_reqseq() {
  reqseq_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Cloud_Message_GroupJoinRequestGetRequest::_internal_reqseq() const {
  return reqseq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Cloud_Message_GroupJoinRequestGetRequest::reqseq() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestGetRequest.reqSeq)
  return _internal_reqseq();
}
inline void Cloud_Message_GroupJoinRequestGetRequest::_internal_set_reqseq(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  reqseq_ = value;
}
inline void Cloud_Message_GroupJoinRequestGetRequest::set_reqseq(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_reqseq(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestGetRequest.reqSeq)
}

// string groupId = 2;
inline void Cloud_Message_GroupJoinRequestGetRequest::clear_groupid() {
  groupid_.ClearToEmpty();
}
inline const std::string& Cloud_Message_GroupJoinRequestGetRequest::groupid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestGetRequest.groupId)
  return _internal_groupid();
}
inline void Cloud_Message_GroupJoinRequestGetRequest::set_groupid(const std::string& value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestGetRequest.groupId)
}
inline std::string* Cloud_Message_GroupJoinRequestGetRequest::mutable_groupid() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestGetRequest.groupId)
  return _internal_mutable_groupid();
}
inline const std::string& Cloud_Message_GroupJoinRequestGetRequest::_internal_groupid() const {
  return groupid_.Get();
}
inline void Cloud_Message_GroupJoinRequestGetRequest::_internal_set_groupid(const std::string& value) {
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Message_GroupJoinRequestGetRequest::set_groupid(std::string&& value) {
  
  groupid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestGetRequest.groupId)
}
inline void Cloud_Message_GroupJoinRequestGetRequest::set_groupid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestGetRequest.groupId)
}
inline void Cloud_Message_GroupJoinRequestGetRequest::set_groupid(const char* value,
    size_t size) {
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestGetRequest.groupId)
}
inline std::string* Cloud_Message_GroupJoinRequestGetRequest::_internal_mutable_groupid() {
  
  return groupid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Message_GroupJoinRequestGetRequest::release_groupid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestGetRequest.groupId)
  return groupid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Message_GroupJoinRequestGetRequest::set_allocated_groupid(std::string* groupid) {
  if (groupid != nullptr) {
    
  } else {
    
  }
  groupid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), groupid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestGetRequest.groupId)
}

// -------------------------------------------------------------------

// Cloud_Message_GroupJoinRequestGetResponse

// string groupId = 1;
inline void Cloud_Message_GroupJoinRequestGetResponse::clear_groupid() {
  groupid_.ClearToEmpty();
}
inline const std::string& Cloud_Message_GroupJoinRequestGetResponse::groupid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestGetResponse.groupId)
  return _internal_groupid();
}
inline void Cloud_Message_GroupJoinRequestGetResponse::set_groupid(const std::string& value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestGetResponse.groupId)
}
inline std::string* Cloud_Message_GroupJoinRequestGetResponse::mutable_groupid() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestGetResponse.groupId)
  return _internal_mutable_groupid();
}
inline const std::string& Cloud_Message_GroupJoinRequestGetResponse::_internal_groupid() const {
  return groupid_.Get();
}
inline void Cloud_Message_GroupJoinRequestGetResponse::_internal_set_groupid(const std::string& value) {
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Message_GroupJoinRequestGetResponse::set_groupid(std::string&& value) {
  
  groupid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestGetResponse.groupId)
}
inline void Cloud_Message_GroupJoinRequestGetResponse::set_groupid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestGetResponse.groupId)
}
inline void Cloud_Message_GroupJoinRequestGetResponse::set_groupid(const char* value,
    size_t size) {
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestGetResponse.groupId)
}
inline std::string* Cloud_Message_GroupJoinRequestGetResponse::_internal_mutable_groupid() {
  
  return groupid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Message_GroupJoinRequestGetResponse::release_groupid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestGetResponse.groupId)
  return groupid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Message_GroupJoinRequestGetResponse::set_allocated_groupid(std::string* groupid) {
  if (groupid != nullptr) {
    
  } else {
    
  }
  groupid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), groupid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestGetResponse.groupId)
}

// .AcFunDanmu.Im.Basic.User inviter = 2;
inline bool Cloud_Message_GroupJoinRequestGetResponse::_internal_has_inviter() const {
  return this != internal_default_instance() && inviter_ != nullptr;
}
inline bool Cloud_Message_GroupJoinRequestGetResponse::has_inviter() const {
  return _internal_has_inviter();
}
inline void Cloud_Message_GroupJoinRequestGetResponse::clear_inviter() {
  if (GetArena() == nullptr && inviter_ != nullptr) {
    delete inviter_;
  }
  inviter_ = nullptr;
}
inline const ::AcFunDanmu::Im::Basic_User& Cloud_Message_GroupJoinRequestGetResponse::_internal_inviter() const {
  const ::AcFunDanmu::Im::Basic_User* p = inviter_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic_User&>(
      ::AcFunDanmu::Im::_Basic_User_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic_User& Cloud_Message_GroupJoinRequestGetResponse::inviter() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestGetResponse.inviter)
  return _internal_inviter();
}
inline void Cloud_Message_GroupJoinRequestGetResponse::unsafe_arena_set_allocated_inviter(
    ::AcFunDanmu::Im::Basic_User* inviter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inviter_);
  }
  inviter_ = inviter;
  if (inviter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestGetResponse.inviter)
}
inline ::AcFunDanmu::Im::Basic_User* Cloud_Message_GroupJoinRequestGetResponse::release_inviter() {
  
  ::AcFunDanmu::Im::Basic_User* temp = inviter_;
  inviter_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::Basic_User* Cloud_Message_GroupJoinRequestGetResponse::unsafe_arena_release_inviter() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestGetResponse.inviter)
  
  ::AcFunDanmu::Im::Basic_User* temp = inviter_;
  inviter_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic_User* Cloud_Message_GroupJoinRequestGetResponse::_internal_mutable_inviter() {
  
  if (inviter_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic_User>(GetArena());
    inviter_ = p;
  }
  return inviter_;
}
inline ::AcFunDanmu::Im::Basic_User* Cloud_Message_GroupJoinRequestGetResponse::mutable_inviter() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestGetResponse.inviter)
  return _internal_mutable_inviter();
}
inline void Cloud_Message_GroupJoinRequestGetResponse::set_allocated_inviter(::AcFunDanmu::Im::Basic_User* inviter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete inviter_;
  }
  if (inviter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(inviter);
    if (message_arena != submessage_arena) {
      inviter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inviter, submessage_arena);
    }
    
  } else {
    
  }
  inviter_ = inviter;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestGetResponse.inviter)
}

// repeated .AcFunDanmu.Im.Basic.User invitees = 3;
inline int Cloud_Message_GroupJoinRequestGetResponse::_internal_invitees_size() const {
  return invitees_.size();
}
inline int Cloud_Message_GroupJoinRequestGetResponse::invitees_size() const {
  return _internal_invitees_size();
}
inline void Cloud_Message_GroupJoinRequestGetResponse::clear_invitees() {
  invitees_.Clear();
}
inline ::AcFunDanmu::Im::Basic_User* Cloud_Message_GroupJoinRequestGetResponse::mutable_invitees(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestGetResponse.invitees)
  return invitees_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_User >*
Cloud_Message_GroupJoinRequestGetResponse::mutable_invitees() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestGetResponse.invitees)
  return &invitees_;
}
inline const ::AcFunDanmu::Im::Basic_User& Cloud_Message_GroupJoinRequestGetResponse::_internal_invitees(int index) const {
  return invitees_.Get(index);
}
inline const ::AcFunDanmu::Im::Basic_User& Cloud_Message_GroupJoinRequestGetResponse::invitees(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestGetResponse.invitees)
  return _internal_invitees(index);
}
inline ::AcFunDanmu::Im::Basic_User* Cloud_Message_GroupJoinRequestGetResponse::_internal_add_invitees() {
  return invitees_.Add();
}
inline ::AcFunDanmu::Im::Basic_User* Cloud_Message_GroupJoinRequestGetResponse::add_invitees() {
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestGetResponse.invitees)
  return _internal_add_invitees();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_User >&
Cloud_Message_GroupJoinRequestGetResponse::invitees() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestGetResponse.invitees)
  return invitees_;
}

// .AcFunDanmu.Im.Cloud.Message.GroupFindType findWay = 4;
inline void Cloud_Message_GroupJoinRequestGetResponse::clear_findway() {
  findway_ = 0;
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupFindType Cloud_Message_GroupJoinRequestGetResponse::_internal_findway() const {
  return static_cast< ::AcFunDanmu::Im::Cloud_Message_GroupFindType >(findway_);
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupFindType Cloud_Message_GroupJoinRequestGetResponse::findway() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestGetResponse.findWay)
  return _internal_findway();
}
inline void Cloud_Message_GroupJoinRequestGetResponse::_internal_set_findway(::AcFunDanmu::Im::Cloud_Message_GroupFindType value) {
  
  findway_ = value;
}
inline void Cloud_Message_GroupJoinRequestGetResponse::set_findway(::AcFunDanmu::Im::Cloud_Message_GroupFindType value) {
  _internal_set_findway(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestGetResponse.findWay)
}

// string descContent = 5;
inline void Cloud_Message_GroupJoinRequestGetResponse::clear_desccontent() {
  desccontent_.ClearToEmpty();
}
inline const std::string& Cloud_Message_GroupJoinRequestGetResponse::desccontent() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestGetResponse.descContent)
  return _internal_desccontent();
}
inline void Cloud_Message_GroupJoinRequestGetResponse::set_desccontent(const std::string& value) {
  _internal_set_desccontent(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestGetResponse.descContent)
}
inline std::string* Cloud_Message_GroupJoinRequestGetResponse::mutable_desccontent() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestGetResponse.descContent)
  return _internal_mutable_desccontent();
}
inline const std::string& Cloud_Message_GroupJoinRequestGetResponse::_internal_desccontent() const {
  return desccontent_.Get();
}
inline void Cloud_Message_GroupJoinRequestGetResponse::_internal_set_desccontent(const std::string& value) {
  
  desccontent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Message_GroupJoinRequestGetResponse::set_desccontent(std::string&& value) {
  
  desccontent_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestGetResponse.descContent)
}
inline void Cloud_Message_GroupJoinRequestGetResponse::set_desccontent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  desccontent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestGetResponse.descContent)
}
inline void Cloud_Message_GroupJoinRequestGetResponse::set_desccontent(const char* value,
    size_t size) {
  
  desccontent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestGetResponse.descContent)
}
inline std::string* Cloud_Message_GroupJoinRequestGetResponse::_internal_mutable_desccontent() {
  
  return desccontent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Message_GroupJoinRequestGetResponse::release_desccontent() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestGetResponse.descContent)
  return desccontent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Message_GroupJoinRequestGetResponse::set_allocated_desccontent(std::string* desccontent) {
  if (desccontent != nullptr) {
    
  } else {
    
  }
  desccontent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desccontent,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestGetResponse.descContent)
}

// .AcFunDanmu.Im.Cloud.Message.JoinRequestStatus status = 6;
inline void Cloud_Message_GroupJoinRequestGetResponse::clear_status() {
  status_ = 0;
}
inline ::AcFunDanmu::Im::Cloud_Message_JoinRequestStatus Cloud_Message_GroupJoinRequestGetResponse::_internal_status() const {
  return static_cast< ::AcFunDanmu::Im::Cloud_Message_JoinRequestStatus >(status_);
}
inline ::AcFunDanmu::Im::Cloud_Message_JoinRequestStatus Cloud_Message_GroupJoinRequestGetResponse::status() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestGetResponse.status)
  return _internal_status();
}
inline void Cloud_Message_GroupJoinRequestGetResponse::_internal_set_status(::AcFunDanmu::Im::Cloud_Message_JoinRequestStatus value) {
  
  status_ = value;
}
inline void Cloud_Message_GroupJoinRequestGetResponse::set_status(::AcFunDanmu::Im::Cloud_Message_JoinRequestStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestGetResponse.status)
}

// -------------------------------------------------------------------

// Cloud_Message_GroupJoinRequestCancelRequest

// int64 reqSeq = 1;
inline void Cloud_Message_GroupJoinRequestCancelRequest::clear_reqseq() {
  reqseq_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Cloud_Message_GroupJoinRequestCancelRequest::_internal_reqseq() const {
  return reqseq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Cloud_Message_GroupJoinRequestCancelRequest::reqseq() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestCancelRequest.reqSeq)
  return _internal_reqseq();
}
inline void Cloud_Message_GroupJoinRequestCancelRequest::_internal_set_reqseq(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  reqseq_ = value;
}
inline void Cloud_Message_GroupJoinRequestCancelRequest::set_reqseq(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_reqseq(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestCancelRequest.reqSeq)
}

// string groupId = 2;
inline void Cloud_Message_GroupJoinRequestCancelRequest::clear_groupid() {
  groupid_.ClearToEmpty();
}
inline const std::string& Cloud_Message_GroupJoinRequestCancelRequest::groupid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestCancelRequest.groupId)
  return _internal_groupid();
}
inline void Cloud_Message_GroupJoinRequestCancelRequest::set_groupid(const std::string& value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestCancelRequest.groupId)
}
inline std::string* Cloud_Message_GroupJoinRequestCancelRequest::mutable_groupid() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestCancelRequest.groupId)
  return _internal_mutable_groupid();
}
inline const std::string& Cloud_Message_GroupJoinRequestCancelRequest::_internal_groupid() const {
  return groupid_.Get();
}
inline void Cloud_Message_GroupJoinRequestCancelRequest::_internal_set_groupid(const std::string& value) {
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Message_GroupJoinRequestCancelRequest::set_groupid(std::string&& value) {
  
  groupid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestCancelRequest.groupId)
}
inline void Cloud_Message_GroupJoinRequestCancelRequest::set_groupid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestCancelRequest.groupId)
}
inline void Cloud_Message_GroupJoinRequestCancelRequest::set_groupid(const char* value,
    size_t size) {
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestCancelRequest.groupId)
}
inline std::string* Cloud_Message_GroupJoinRequestCancelRequest::_internal_mutable_groupid() {
  
  return groupid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Message_GroupJoinRequestCancelRequest::release_groupid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestCancelRequest.groupId)
  return groupid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Message_GroupJoinRequestCancelRequest::set_allocated_groupid(std::string* groupid) {
  if (groupid != nullptr) {
    
  } else {
    
  }
  groupid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), groupid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestCancelRequest.groupId)
}

// -------------------------------------------------------------------

// Cloud_Message_GroupJoinRequestCancelResposne

// string groupId = 1;
inline void Cloud_Message_GroupJoinRequestCancelResposne::clear_groupid() {
  groupid_.ClearToEmpty();
}
inline const std::string& Cloud_Message_GroupJoinRequestCancelResposne::groupid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestCancelResposne.groupId)
  return _internal_groupid();
}
inline void Cloud_Message_GroupJoinRequestCancelResposne::set_groupid(const std::string& value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestCancelResposne.groupId)
}
inline std::string* Cloud_Message_GroupJoinRequestCancelResposne::mutable_groupid() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestCancelResposne.groupId)
  return _internal_mutable_groupid();
}
inline const std::string& Cloud_Message_GroupJoinRequestCancelResposne::_internal_groupid() const {
  return groupid_.Get();
}
inline void Cloud_Message_GroupJoinRequestCancelResposne::_internal_set_groupid(const std::string& value) {
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Message_GroupJoinRequestCancelResposne::set_groupid(std::string&& value) {
  
  groupid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestCancelResposne.groupId)
}
inline void Cloud_Message_GroupJoinRequestCancelResposne::set_groupid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestCancelResposne.groupId)
}
inline void Cloud_Message_GroupJoinRequestCancelResposne::set_groupid(const char* value,
    size_t size) {
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestCancelResposne.groupId)
}
inline std::string* Cloud_Message_GroupJoinRequestCancelResposne::_internal_mutable_groupid() {
  
  return groupid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Message_GroupJoinRequestCancelResposne::release_groupid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestCancelResposne.groupId)
  return groupid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Message_GroupJoinRequestCancelResposne::set_allocated_groupid(std::string* groupid) {
  if (groupid != nullptr) {
    
  } else {
    
  }
  groupid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), groupid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestCancelResposne.groupId)
}

// .AcFunDanmu.Im.Basic.User inviter = 2;
inline bool Cloud_Message_GroupJoinRequestCancelResposne::_internal_has_inviter() const {
  return this != internal_default_instance() && inviter_ != nullptr;
}
inline bool Cloud_Message_GroupJoinRequestCancelResposne::has_inviter() const {
  return _internal_has_inviter();
}
inline void Cloud_Message_GroupJoinRequestCancelResposne::clear_inviter() {
  if (GetArena() == nullptr && inviter_ != nullptr) {
    delete inviter_;
  }
  inviter_ = nullptr;
}
inline const ::AcFunDanmu::Im::Basic_User& Cloud_Message_GroupJoinRequestCancelResposne::_internal_inviter() const {
  const ::AcFunDanmu::Im::Basic_User* p = inviter_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic_User&>(
      ::AcFunDanmu::Im::_Basic_User_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic_User& Cloud_Message_GroupJoinRequestCancelResposne::inviter() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestCancelResposne.inviter)
  return _internal_inviter();
}
inline void Cloud_Message_GroupJoinRequestCancelResposne::unsafe_arena_set_allocated_inviter(
    ::AcFunDanmu::Im::Basic_User* inviter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inviter_);
  }
  inviter_ = inviter;
  if (inviter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestCancelResposne.inviter)
}
inline ::AcFunDanmu::Im::Basic_User* Cloud_Message_GroupJoinRequestCancelResposne::release_inviter() {
  
  ::AcFunDanmu::Im::Basic_User* temp = inviter_;
  inviter_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::Basic_User* Cloud_Message_GroupJoinRequestCancelResposne::unsafe_arena_release_inviter() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestCancelResposne.inviter)
  
  ::AcFunDanmu::Im::Basic_User* temp = inviter_;
  inviter_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic_User* Cloud_Message_GroupJoinRequestCancelResposne::_internal_mutable_inviter() {
  
  if (inviter_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic_User>(GetArena());
    inviter_ = p;
  }
  return inviter_;
}
inline ::AcFunDanmu::Im::Basic_User* Cloud_Message_GroupJoinRequestCancelResposne::mutable_inviter() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestCancelResposne.inviter)
  return _internal_mutable_inviter();
}
inline void Cloud_Message_GroupJoinRequestCancelResposne::set_allocated_inviter(::AcFunDanmu::Im::Basic_User* inviter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete inviter_;
  }
  if (inviter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(inviter);
    if (message_arena != submessage_arena) {
      inviter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inviter, submessage_arena);
    }
    
  } else {
    
  }
  inviter_ = inviter;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestCancelResposne.inviter)
}

// repeated .AcFunDanmu.Im.Basic.User invitees = 3;
inline int Cloud_Message_GroupJoinRequestCancelResposne::_internal_invitees_size() const {
  return invitees_.size();
}
inline int Cloud_Message_GroupJoinRequestCancelResposne::invitees_size() const {
  return _internal_invitees_size();
}
inline void Cloud_Message_GroupJoinRequestCancelResposne::clear_invitees() {
  invitees_.Clear();
}
inline ::AcFunDanmu::Im::Basic_User* Cloud_Message_GroupJoinRequestCancelResposne::mutable_invitees(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestCancelResposne.invitees)
  return invitees_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_User >*
Cloud_Message_GroupJoinRequestCancelResposne::mutable_invitees() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestCancelResposne.invitees)
  return &invitees_;
}
inline const ::AcFunDanmu::Im::Basic_User& Cloud_Message_GroupJoinRequestCancelResposne::_internal_invitees(int index) const {
  return invitees_.Get(index);
}
inline const ::AcFunDanmu::Im::Basic_User& Cloud_Message_GroupJoinRequestCancelResposne::invitees(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestCancelResposne.invitees)
  return _internal_invitees(index);
}
inline ::AcFunDanmu::Im::Basic_User* Cloud_Message_GroupJoinRequestCancelResposne::_internal_add_invitees() {
  return invitees_.Add();
}
inline ::AcFunDanmu::Im::Basic_User* Cloud_Message_GroupJoinRequestCancelResposne::add_invitees() {
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestCancelResposne.invitees)
  return _internal_add_invitees();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_User >&
Cloud_Message_GroupJoinRequestCancelResposne::invitees() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestCancelResposne.invitees)
  return invitees_;
}

// .AcFunDanmu.Im.Cloud.Message.GroupFindType findWay = 4;
inline void Cloud_Message_GroupJoinRequestCancelResposne::clear_findway() {
  findway_ = 0;
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupFindType Cloud_Message_GroupJoinRequestCancelResposne::_internal_findway() const {
  return static_cast< ::AcFunDanmu::Im::Cloud_Message_GroupFindType >(findway_);
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupFindType Cloud_Message_GroupJoinRequestCancelResposne::findway() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestCancelResposne.findWay)
  return _internal_findway();
}
inline void Cloud_Message_GroupJoinRequestCancelResposne::_internal_set_findway(::AcFunDanmu::Im::Cloud_Message_GroupFindType value) {
  
  findway_ = value;
}
inline void Cloud_Message_GroupJoinRequestCancelResposne::set_findway(::AcFunDanmu::Im::Cloud_Message_GroupFindType value) {
  _internal_set_findway(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestCancelResposne.findWay)
}

// string descContent = 5;
inline void Cloud_Message_GroupJoinRequestCancelResposne::clear_desccontent() {
  desccontent_.ClearToEmpty();
}
inline const std::string& Cloud_Message_GroupJoinRequestCancelResposne::desccontent() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestCancelResposne.descContent)
  return _internal_desccontent();
}
inline void Cloud_Message_GroupJoinRequestCancelResposne::set_desccontent(const std::string& value) {
  _internal_set_desccontent(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestCancelResposne.descContent)
}
inline std::string* Cloud_Message_GroupJoinRequestCancelResposne::mutable_desccontent() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestCancelResposne.descContent)
  return _internal_mutable_desccontent();
}
inline const std::string& Cloud_Message_GroupJoinRequestCancelResposne::_internal_desccontent() const {
  return desccontent_.Get();
}
inline void Cloud_Message_GroupJoinRequestCancelResposne::_internal_set_desccontent(const std::string& value) {
  
  desccontent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Message_GroupJoinRequestCancelResposne::set_desccontent(std::string&& value) {
  
  desccontent_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestCancelResposne.descContent)
}
inline void Cloud_Message_GroupJoinRequestCancelResposne::set_desccontent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  desccontent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestCancelResposne.descContent)
}
inline void Cloud_Message_GroupJoinRequestCancelResposne::set_desccontent(const char* value,
    size_t size) {
  
  desccontent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestCancelResposne.descContent)
}
inline std::string* Cloud_Message_GroupJoinRequestCancelResposne::_internal_mutable_desccontent() {
  
  return desccontent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Message_GroupJoinRequestCancelResposne::release_desccontent() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestCancelResposne.descContent)
  return desccontent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Message_GroupJoinRequestCancelResposne::set_allocated_desccontent(std::string* desccontent) {
  if (desccontent != nullptr) {
    
  } else {
    
  }
  desccontent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desccontent,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestCancelResposne.descContent)
}

// .AcFunDanmu.Im.Cloud.Message.JoinRequestStatus status = 6;
inline void Cloud_Message_GroupJoinRequestCancelResposne::clear_status() {
  status_ = 0;
}
inline ::AcFunDanmu::Im::Cloud_Message_JoinRequestStatus Cloud_Message_GroupJoinRequestCancelResposne::_internal_status() const {
  return static_cast< ::AcFunDanmu::Im::Cloud_Message_JoinRequestStatus >(status_);
}
inline ::AcFunDanmu::Im::Cloud_Message_JoinRequestStatus Cloud_Message_GroupJoinRequestCancelResposne::status() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestCancelResposne.status)
  return _internal_status();
}
inline void Cloud_Message_GroupJoinRequestCancelResposne::_internal_set_status(::AcFunDanmu::Im::Cloud_Message_JoinRequestStatus value) {
  
  status_ = value;
}
inline void Cloud_Message_GroupJoinRequestCancelResposne::set_status(::AcFunDanmu::Im::Cloud_Message_JoinRequestStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupJoinRequestCancelResposne.status)
}

// -------------------------------------------------------------------

// Cloud_Message_GroupQuitRequest

// string groupId = 1;
inline void Cloud_Message_GroupQuitRequest::clear_groupid() {
  groupid_.ClearToEmpty();
}
inline const std::string& Cloud_Message_GroupQuitRequest::groupid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupQuitRequest.groupId)
  return _internal_groupid();
}
inline void Cloud_Message_GroupQuitRequest::set_groupid(const std::string& value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupQuitRequest.groupId)
}
inline std::string* Cloud_Message_GroupQuitRequest::mutable_groupid() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupQuitRequest.groupId)
  return _internal_mutable_groupid();
}
inline const std::string& Cloud_Message_GroupQuitRequest::_internal_groupid() const {
  return groupid_.Get();
}
inline void Cloud_Message_GroupQuitRequest::_internal_set_groupid(const std::string& value) {
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Message_GroupQuitRequest::set_groupid(std::string&& value) {
  
  groupid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Message.GroupQuitRequest.groupId)
}
inline void Cloud_Message_GroupQuitRequest::set_groupid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Message.GroupQuitRequest.groupId)
}
inline void Cloud_Message_GroupQuitRequest::set_groupid(const char* value,
    size_t size) {
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Message.GroupQuitRequest.groupId)
}
inline std::string* Cloud_Message_GroupQuitRequest::_internal_mutable_groupid() {
  
  return groupid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Message_GroupQuitRequest::release_groupid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupQuitRequest.groupId)
  return groupid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Message_GroupQuitRequest::set_allocated_groupid(std::string* groupid) {
  if (groupid != nullptr) {
    
  } else {
    
  }
  groupid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), groupid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupQuitRequest.groupId)
}

// -------------------------------------------------------------------

// Cloud_Message_GroupQuitResponse

// string groupId = 1;
inline void Cloud_Message_GroupQuitResponse::clear_groupid() {
  groupid_.ClearToEmpty();
}
inline const std::string& Cloud_Message_GroupQuitResponse::groupid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupQuitResponse.groupId)
  return _internal_groupid();
}
inline void Cloud_Message_GroupQuitResponse::set_groupid(const std::string& value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupQuitResponse.groupId)
}
inline std::string* Cloud_Message_GroupQuitResponse::mutable_groupid() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupQuitResponse.groupId)
  return _internal_mutable_groupid();
}
inline const std::string& Cloud_Message_GroupQuitResponse::_internal_groupid() const {
  return groupid_.Get();
}
inline void Cloud_Message_GroupQuitResponse::_internal_set_groupid(const std::string& value) {
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Message_GroupQuitResponse::set_groupid(std::string&& value) {
  
  groupid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Message.GroupQuitResponse.groupId)
}
inline void Cloud_Message_GroupQuitResponse::set_groupid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Message.GroupQuitResponse.groupId)
}
inline void Cloud_Message_GroupQuitResponse::set_groupid(const char* value,
    size_t size) {
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Message.GroupQuitResponse.groupId)
}
inline std::string* Cloud_Message_GroupQuitResponse::_internal_mutable_groupid() {
  
  return groupid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Message_GroupQuitResponse::release_groupid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupQuitResponse.groupId)
  return groupid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Message_GroupQuitResponse::set_allocated_groupid(std::string* groupid) {
  if (groupid != nullptr) {
    
  } else {
    
  }
  groupid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), groupid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupQuitResponse.groupId)
}

// -------------------------------------------------------------------

// Cloud_Message_GroupKickRequest

// string groupId = 1;
inline void Cloud_Message_GroupKickRequest::clear_groupid() {
  groupid_.ClearToEmpty();
}
inline const std::string& Cloud_Message_GroupKickRequest::groupid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupKickRequest.groupId)
  return _internal_groupid();
}
inline void Cloud_Message_GroupKickRequest::set_groupid(const std::string& value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupKickRequest.groupId)
}
inline std::string* Cloud_Message_GroupKickRequest::mutable_groupid() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupKickRequest.groupId)
  return _internal_mutable_groupid();
}
inline const std::string& Cloud_Message_GroupKickRequest::_internal_groupid() const {
  return groupid_.Get();
}
inline void Cloud_Message_GroupKickRequest::_internal_set_groupid(const std::string& value) {
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Message_GroupKickRequest::set_groupid(std::string&& value) {
  
  groupid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Message.GroupKickRequest.groupId)
}
inline void Cloud_Message_GroupKickRequest::set_groupid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Message.GroupKickRequest.groupId)
}
inline void Cloud_Message_GroupKickRequest::set_groupid(const char* value,
    size_t size) {
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Message.GroupKickRequest.groupId)
}
inline std::string* Cloud_Message_GroupKickRequest::_internal_mutable_groupid() {
  
  return groupid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Message_GroupKickRequest::release_groupid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupKickRequest.groupId)
  return groupid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Message_GroupKickRequest::set_allocated_groupid(std::string* groupid) {
  if (groupid != nullptr) {
    
  } else {
    
  }
  groupid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), groupid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupKickRequest.groupId)
}

// repeated .AcFunDanmu.Im.Basic.User target = 2;
inline int Cloud_Message_GroupKickRequest::_internal_target_size() const {
  return target_.size();
}
inline int Cloud_Message_GroupKickRequest::target_size() const {
  return _internal_target_size();
}
inline void Cloud_Message_GroupKickRequest::clear_target() {
  target_.Clear();
}
inline ::AcFunDanmu::Im::Basic_User* Cloud_Message_GroupKickRequest::mutable_target(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupKickRequest.target)
  return target_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_User >*
Cloud_Message_GroupKickRequest::mutable_target() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Cloud.Message.GroupKickRequest.target)
  return &target_;
}
inline const ::AcFunDanmu::Im::Basic_User& Cloud_Message_GroupKickRequest::_internal_target(int index) const {
  return target_.Get(index);
}
inline const ::AcFunDanmu::Im::Basic_User& Cloud_Message_GroupKickRequest::target(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupKickRequest.target)
  return _internal_target(index);
}
inline ::AcFunDanmu::Im::Basic_User* Cloud_Message_GroupKickRequest::_internal_add_target() {
  return target_.Add();
}
inline ::AcFunDanmu::Im::Basic_User* Cloud_Message_GroupKickRequest::add_target() {
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Cloud.Message.GroupKickRequest.target)
  return _internal_add_target();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_User >&
Cloud_Message_GroupKickRequest::target() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Cloud.Message.GroupKickRequest.target)
  return target_;
}

// -------------------------------------------------------------------

// Cloud_Message_GroupKickResponse

// string groupId = 1;
inline void Cloud_Message_GroupKickResponse::clear_groupid() {
  groupid_.ClearToEmpty();
}
inline const std::string& Cloud_Message_GroupKickResponse::groupid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupKickResponse.groupId)
  return _internal_groupid();
}
inline void Cloud_Message_GroupKickResponse::set_groupid(const std::string& value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupKickResponse.groupId)
}
inline std::string* Cloud_Message_GroupKickResponse::mutable_groupid() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupKickResponse.groupId)
  return _internal_mutable_groupid();
}
inline const std::string& Cloud_Message_GroupKickResponse::_internal_groupid() const {
  return groupid_.Get();
}
inline void Cloud_Message_GroupKickResponse::_internal_set_groupid(const std::string& value) {
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Message_GroupKickResponse::set_groupid(std::string&& value) {
  
  groupid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Message.GroupKickResponse.groupId)
}
inline void Cloud_Message_GroupKickResponse::set_groupid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Message.GroupKickResponse.groupId)
}
inline void Cloud_Message_GroupKickResponse::set_groupid(const char* value,
    size_t size) {
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Message.GroupKickResponse.groupId)
}
inline std::string* Cloud_Message_GroupKickResponse::_internal_mutable_groupid() {
  
  return groupid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Message_GroupKickResponse::release_groupid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupKickResponse.groupId)
  return groupid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Message_GroupKickResponse::set_allocated_groupid(std::string* groupid) {
  if (groupid != nullptr) {
    
  } else {
    
  }
  groupid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), groupid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupKickResponse.groupId)
}

// -------------------------------------------------------------------

// Cloud_Message_GroupSettingRequest

// string groupId = 1;
inline void Cloud_Message_GroupSettingRequest::clear_groupid() {
  groupid_.ClearToEmpty();
}
inline const std::string& Cloud_Message_GroupSettingRequest::groupid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.groupId)
  return _internal_groupid();
}
inline void Cloud_Message_GroupSettingRequest::set_groupid(const std::string& value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.groupId)
}
inline std::string* Cloud_Message_GroupSettingRequest::mutable_groupid() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.groupId)
  return _internal_mutable_groupid();
}
inline const std::string& Cloud_Message_GroupSettingRequest::_internal_groupid() const {
  return groupid_.Get();
}
inline void Cloud_Message_GroupSettingRequest::_internal_set_groupid(const std::string& value) {
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Message_GroupSettingRequest::set_groupid(std::string&& value) {
  
  groupid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.groupId)
}
inline void Cloud_Message_GroupSettingRequest::set_groupid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.groupId)
}
inline void Cloud_Message_GroupSettingRequest::set_groupid(const char* value,
    size_t size) {
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.groupId)
}
inline std::string* Cloud_Message_GroupSettingRequest::_internal_mutable_groupid() {
  
  return groupid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Message_GroupSettingRequest::release_groupid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.groupId)
  return groupid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Message_GroupSettingRequest::set_allocated_groupid(std::string* groupid) {
  if (groupid != nullptr) {
    
  } else {
    
  }
  groupid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), groupid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.groupId)
}

// .AcFunDanmu.Im.Cloud.Message.GroupSettingRename rename = 2;
inline bool Cloud_Message_GroupSettingRequest::_internal_has_rename() const {
  return GroupSetting_case() == kRename;
}
inline bool Cloud_Message_GroupSettingRequest::has_rename() const {
  return _internal_has_rename();
}
inline void Cloud_Message_GroupSettingRequest::set_has_rename() {
  _oneof_case_[0] = kRename;
}
inline void Cloud_Message_GroupSettingRequest::clear_rename() {
  if (_internal_has_rename()) {
    if (GetArena() == nullptr) {
      delete GroupSetting_.rename_;
    }
    clear_has_GroupSetting();
  }
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupSettingRename* Cloud_Message_GroupSettingRequest::release_rename() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.rename)
  if (_internal_has_rename()) {
    clear_has_GroupSetting();
      ::AcFunDanmu::Im::Cloud_Message_GroupSettingRename* temp = GroupSetting_.rename_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    GroupSetting_.rename_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::AcFunDanmu::Im::Cloud_Message_GroupSettingRename& Cloud_Message_GroupSettingRequest::_internal_rename() const {
  return _internal_has_rename()
      ? *GroupSetting_.rename_
      : reinterpret_cast< ::AcFunDanmu::Im::Cloud_Message_GroupSettingRename&>(::AcFunDanmu::Im::_Cloud_Message_GroupSettingRename_default_instance_);
}
inline const ::AcFunDanmu::Im::Cloud_Message_GroupSettingRename& Cloud_Message_GroupSettingRequest::rename() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.rename)
  return _internal_rename();
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupSettingRename* Cloud_Message_GroupSettingRequest::unsafe_arena_release_rename() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.rename)
  if (_internal_has_rename()) {
    clear_has_GroupSetting();
    ::AcFunDanmu::Im::Cloud_Message_GroupSettingRename* temp = GroupSetting_.rename_;
    GroupSetting_.rename_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Cloud_Message_GroupSettingRequest::unsafe_arena_set_allocated_rename(::AcFunDanmu::Im::Cloud_Message_GroupSettingRename* rename) {
  clear_GroupSetting();
  if (rename) {
    set_has_rename();
    GroupSetting_.rename_ = rename;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.rename)
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupSettingRename* Cloud_Message_GroupSettingRequest::_internal_mutable_rename() {
  if (!_internal_has_rename()) {
    clear_GroupSetting();
    set_has_rename();
    GroupSetting_.rename_ = CreateMaybeMessage< ::AcFunDanmu::Im::Cloud_Message_GroupSettingRename >(GetArena());
  }
  return GroupSetting_.rename_;
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupSettingRename* Cloud_Message_GroupSettingRequest::mutable_rename() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.rename)
  return _internal_mutable_rename();
}

// .AcFunDanmu.Im.Cloud.Message.GroupSettingDesc desc = 3;
inline bool Cloud_Message_GroupSettingRequest::_internal_has_desc() const {
  return GroupSetting_case() == kDesc;
}
inline bool Cloud_Message_GroupSettingRequest::has_desc() const {
  return _internal_has_desc();
}
inline void Cloud_Message_GroupSettingRequest::set_has_desc() {
  _oneof_case_[0] = kDesc;
}
inline void Cloud_Message_GroupSettingRequest::clear_desc() {
  if (_internal_has_desc()) {
    if (GetArena() == nullptr) {
      delete GroupSetting_.desc_;
    }
    clear_has_GroupSetting();
  }
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupSettingDesc* Cloud_Message_GroupSettingRequest::release_desc() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.desc)
  if (_internal_has_desc()) {
    clear_has_GroupSetting();
      ::AcFunDanmu::Im::Cloud_Message_GroupSettingDesc* temp = GroupSetting_.desc_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    GroupSetting_.desc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::AcFunDanmu::Im::Cloud_Message_GroupSettingDesc& Cloud_Message_GroupSettingRequest::_internal_desc() const {
  return _internal_has_desc()
      ? *GroupSetting_.desc_
      : reinterpret_cast< ::AcFunDanmu::Im::Cloud_Message_GroupSettingDesc&>(::AcFunDanmu::Im::_Cloud_Message_GroupSettingDesc_default_instance_);
}
inline const ::AcFunDanmu::Im::Cloud_Message_GroupSettingDesc& Cloud_Message_GroupSettingRequest::desc() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.desc)
  return _internal_desc();
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupSettingDesc* Cloud_Message_GroupSettingRequest::unsafe_arena_release_desc() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.desc)
  if (_internal_has_desc()) {
    clear_has_GroupSetting();
    ::AcFunDanmu::Im::Cloud_Message_GroupSettingDesc* temp = GroupSetting_.desc_;
    GroupSetting_.desc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Cloud_Message_GroupSettingRequest::unsafe_arena_set_allocated_desc(::AcFunDanmu::Im::Cloud_Message_GroupSettingDesc* desc) {
  clear_GroupSetting();
  if (desc) {
    set_has_desc();
    GroupSetting_.desc_ = desc;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.desc)
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupSettingDesc* Cloud_Message_GroupSettingRequest::_internal_mutable_desc() {
  if (!_internal_has_desc()) {
    clear_GroupSetting();
    set_has_desc();
    GroupSetting_.desc_ = CreateMaybeMessage< ::AcFunDanmu::Im::Cloud_Message_GroupSettingDesc >(GetArena());
  }
  return GroupSetting_.desc_;
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupSettingDesc* Cloud_Message_GroupSettingRequest::mutable_desc() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.desc)
  return _internal_mutable_desc();
}

// .AcFunDanmu.Im.Cloud.Message.GroupSettingJoinNeedPermission joinNeedPermission = 4;
inline bool Cloud_Message_GroupSettingRequest::_internal_has_joinneedpermission() const {
  return GroupSetting_case() == kJoinNeedPermission;
}
inline bool Cloud_Message_GroupSettingRequest::has_joinneedpermission() const {
  return _internal_has_joinneedpermission();
}
inline void Cloud_Message_GroupSettingRequest::set_has_joinneedpermission() {
  _oneof_case_[0] = kJoinNeedPermission;
}
inline void Cloud_Message_GroupSettingRequest::clear_joinneedpermission() {
  if (_internal_has_joinneedpermission()) {
    if (GetArena() == nullptr) {
      delete GroupSetting_.joinneedpermission_;
    }
    clear_has_GroupSetting();
  }
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupSettingJoinNeedPermission* Cloud_Message_GroupSettingRequest::release_joinneedpermission() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.joinNeedPermission)
  if (_internal_has_joinneedpermission()) {
    clear_has_GroupSetting();
      ::AcFunDanmu::Im::Cloud_Message_GroupSettingJoinNeedPermission* temp = GroupSetting_.joinneedpermission_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    GroupSetting_.joinneedpermission_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::AcFunDanmu::Im::Cloud_Message_GroupSettingJoinNeedPermission& Cloud_Message_GroupSettingRequest::_internal_joinneedpermission() const {
  return _internal_has_joinneedpermission()
      ? *GroupSetting_.joinneedpermission_
      : reinterpret_cast< ::AcFunDanmu::Im::Cloud_Message_GroupSettingJoinNeedPermission&>(::AcFunDanmu::Im::_Cloud_Message_GroupSettingJoinNeedPermission_default_instance_);
}
inline const ::AcFunDanmu::Im::Cloud_Message_GroupSettingJoinNeedPermission& Cloud_Message_GroupSettingRequest::joinneedpermission() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.joinNeedPermission)
  return _internal_joinneedpermission();
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupSettingJoinNeedPermission* Cloud_Message_GroupSettingRequest::unsafe_arena_release_joinneedpermission() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.joinNeedPermission)
  if (_internal_has_joinneedpermission()) {
    clear_has_GroupSetting();
    ::AcFunDanmu::Im::Cloud_Message_GroupSettingJoinNeedPermission* temp = GroupSetting_.joinneedpermission_;
    GroupSetting_.joinneedpermission_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Cloud_Message_GroupSettingRequest::unsafe_arena_set_allocated_joinneedpermission(::AcFunDanmu::Im::Cloud_Message_GroupSettingJoinNeedPermission* joinneedpermission) {
  clear_GroupSetting();
  if (joinneedpermission) {
    set_has_joinneedpermission();
    GroupSetting_.joinneedpermission_ = joinneedpermission;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.joinNeedPermission)
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupSettingJoinNeedPermission* Cloud_Message_GroupSettingRequest::_internal_mutable_joinneedpermission() {
  if (!_internal_has_joinneedpermission()) {
    clear_GroupSetting();
    set_has_joinneedpermission();
    GroupSetting_.joinneedpermission_ = CreateMaybeMessage< ::AcFunDanmu::Im::Cloud_Message_GroupSettingJoinNeedPermission >(GetArena());
  }
  return GroupSetting_.joinneedpermission_;
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupSettingJoinNeedPermission* Cloud_Message_GroupSettingRequest::mutable_joinneedpermission() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupSettingRequest.joinNeedPermission)
  return _internal_mutable_joinneedpermission();
}

inline bool Cloud_Message_GroupSettingRequest::has_GroupSetting() const {
  return GroupSetting_case() != GROUPSETTING_NOT_SET;
}
inline void Cloud_Message_GroupSettingRequest::clear_has_GroupSetting() {
  _oneof_case_[0] = GROUPSETTING_NOT_SET;
}
inline Cloud_Message_GroupSettingRequest::GroupSettingCase Cloud_Message_GroupSettingRequest::GroupSetting_case() const {
  return Cloud_Message_GroupSettingRequest::GroupSettingCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Cloud_Message_GroupSettingRename

// string groupName = 1;
inline void Cloud_Message_GroupSettingRename::clear_groupname() {
  groupname_.ClearToEmpty();
}
inline const std::string& Cloud_Message_GroupSettingRename::groupname() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupSettingRename.groupName)
  return _internal_groupname();
}
inline void Cloud_Message_GroupSettingRename::set_groupname(const std::string& value) {
  _internal_set_groupname(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupSettingRename.groupName)
}
inline std::string* Cloud_Message_GroupSettingRename::mutable_groupname() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupSettingRename.groupName)
  return _internal_mutable_groupname();
}
inline const std::string& Cloud_Message_GroupSettingRename::_internal_groupname() const {
  return groupname_.Get();
}
inline void Cloud_Message_GroupSettingRename::_internal_set_groupname(const std::string& value) {
  
  groupname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Message_GroupSettingRename::set_groupname(std::string&& value) {
  
  groupname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Message.GroupSettingRename.groupName)
}
inline void Cloud_Message_GroupSettingRename::set_groupname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  groupname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Message.GroupSettingRename.groupName)
}
inline void Cloud_Message_GroupSettingRename::set_groupname(const char* value,
    size_t size) {
  
  groupname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Message.GroupSettingRename.groupName)
}
inline std::string* Cloud_Message_GroupSettingRename::_internal_mutable_groupname() {
  
  return groupname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Message_GroupSettingRename::release_groupname() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupSettingRename.groupName)
  return groupname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Message_GroupSettingRename::set_allocated_groupname(std::string* groupname) {
  if (groupname != nullptr) {
    
  } else {
    
  }
  groupname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), groupname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupSettingRename.groupName)
}

// -------------------------------------------------------------------

// Cloud_Message_GroupSettingDesc

// string desc = 1;
inline void Cloud_Message_GroupSettingDesc::clear_desc() {
  desc_.ClearToEmpty();
}
inline const std::string& Cloud_Message_GroupSettingDesc::desc() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupSettingDesc.desc)
  return _internal_desc();
}
inline void Cloud_Message_GroupSettingDesc::set_desc(const std::string& value) {
  _internal_set_desc(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupSettingDesc.desc)
}
inline std::string* Cloud_Message_GroupSettingDesc::mutable_desc() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupSettingDesc.desc)
  return _internal_mutable_desc();
}
inline const std::string& Cloud_Message_GroupSettingDesc::_internal_desc() const {
  return desc_.Get();
}
inline void Cloud_Message_GroupSettingDesc::_internal_set_desc(const std::string& value) {
  
  desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Message_GroupSettingDesc::set_desc(std::string&& value) {
  
  desc_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Message.GroupSettingDesc.desc)
}
inline void Cloud_Message_GroupSettingDesc::set_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Message.GroupSettingDesc.desc)
}
inline void Cloud_Message_GroupSettingDesc::set_desc(const char* value,
    size_t size) {
  
  desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Message.GroupSettingDesc.desc)
}
inline std::string* Cloud_Message_GroupSettingDesc::_internal_mutable_desc() {
  
  return desc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Message_GroupSettingDesc::release_desc() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupSettingDesc.desc)
  return desc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Message_GroupSettingDesc::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desc,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupSettingDesc.desc)
}

// -------------------------------------------------------------------

// Cloud_Message_GroupSettingJoinNeedPermission

// .AcFunDanmu.Im.Cloud.Message.JoinNeedPermissionType joinNeedPermission = 1;
inline void Cloud_Message_GroupSettingJoinNeedPermission::clear_joinneedpermission() {
  joinneedpermission_ = 0;
}
inline ::AcFunDanmu::Im::Cloud_Message_JoinNeedPermissionType Cloud_Message_GroupSettingJoinNeedPermission::_internal_joinneedpermission() const {
  return static_cast< ::AcFunDanmu::Im::Cloud_Message_JoinNeedPermissionType >(joinneedpermission_);
}
inline ::AcFunDanmu::Im::Cloud_Message_JoinNeedPermissionType Cloud_Message_GroupSettingJoinNeedPermission::joinneedpermission() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupSettingJoinNeedPermission.joinNeedPermission)
  return _internal_joinneedpermission();
}
inline void Cloud_Message_GroupSettingJoinNeedPermission::_internal_set_joinneedpermission(::AcFunDanmu::Im::Cloud_Message_JoinNeedPermissionType value) {
  
  joinneedpermission_ = value;
}
inline void Cloud_Message_GroupSettingJoinNeedPermission::set_joinneedpermission(::AcFunDanmu::Im::Cloud_Message_JoinNeedPermissionType value) {
  _internal_set_joinneedpermission(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupSettingJoinNeedPermission.joinNeedPermission)
}

// -------------------------------------------------------------------

// Cloud_Message_GroupSettingResponse

// -------------------------------------------------------------------

// Cloud_Message_GroupMemberSettingRequest

// string groupId = 1;
inline void Cloud_Message_GroupMemberSettingRequest::clear_groupid() {
  groupid_.ClearToEmpty();
}
inline const std::string& Cloud_Message_GroupMemberSettingRequest::groupid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupMemberSettingRequest.groupId)
  return _internal_groupid();
}
inline void Cloud_Message_GroupMemberSettingRequest::set_groupid(const std::string& value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupMemberSettingRequest.groupId)
}
inline std::string* Cloud_Message_GroupMemberSettingRequest::mutable_groupid() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupMemberSettingRequest.groupId)
  return _internal_mutable_groupid();
}
inline const std::string& Cloud_Message_GroupMemberSettingRequest::_internal_groupid() const {
  return groupid_.Get();
}
inline void Cloud_Message_GroupMemberSettingRequest::_internal_set_groupid(const std::string& value) {
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Message_GroupMemberSettingRequest::set_groupid(std::string&& value) {
  
  groupid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Message.GroupMemberSettingRequest.groupId)
}
inline void Cloud_Message_GroupMemberSettingRequest::set_groupid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Message.GroupMemberSettingRequest.groupId)
}
inline void Cloud_Message_GroupMemberSettingRequest::set_groupid(const char* value,
    size_t size) {
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Message.GroupMemberSettingRequest.groupId)
}
inline std::string* Cloud_Message_GroupMemberSettingRequest::_internal_mutable_groupid() {
  
  return groupid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Message_GroupMemberSettingRequest::release_groupid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupMemberSettingRequest.groupId)
  return groupid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Message_GroupMemberSettingRequest::set_allocated_groupid(std::string* groupid) {
  if (groupid != nullptr) {
    
  } else {
    
  }
  groupid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), groupid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupMemberSettingRequest.groupId)
}

// .AcFunDanmu.Im.Cloud.Message.SetUserNickname setNickname = 2;
inline bool Cloud_Message_GroupMemberSettingRequest::_internal_has_setnickname() const {
  return UserSetting_case() == kSetNickname;
}
inline bool Cloud_Message_GroupMemberSettingRequest::has_setnickname() const {
  return _internal_has_setnickname();
}
inline void Cloud_Message_GroupMemberSettingRequest::set_has_setnickname() {
  _oneof_case_[0] = kSetNickname;
}
inline void Cloud_Message_GroupMemberSettingRequest::clear_setnickname() {
  if (_internal_has_setnickname()) {
    if (GetArena() == nullptr) {
      delete UserSetting_.setnickname_;
    }
    clear_has_UserSetting();
  }
}
inline ::AcFunDanmu::Im::Cloud_Message_SetUserNickname* Cloud_Message_GroupMemberSettingRequest::release_setnickname() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupMemberSettingRequest.setNickname)
  if (_internal_has_setnickname()) {
    clear_has_UserSetting();
      ::AcFunDanmu::Im::Cloud_Message_SetUserNickname* temp = UserSetting_.setnickname_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    UserSetting_.setnickname_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::AcFunDanmu::Im::Cloud_Message_SetUserNickname& Cloud_Message_GroupMemberSettingRequest::_internal_setnickname() const {
  return _internal_has_setnickname()
      ? *UserSetting_.setnickname_
      : reinterpret_cast< ::AcFunDanmu::Im::Cloud_Message_SetUserNickname&>(::AcFunDanmu::Im::_Cloud_Message_SetUserNickname_default_instance_);
}
inline const ::AcFunDanmu::Im::Cloud_Message_SetUserNickname& Cloud_Message_GroupMemberSettingRequest::setnickname() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupMemberSettingRequest.setNickname)
  return _internal_setnickname();
}
inline ::AcFunDanmu::Im::Cloud_Message_SetUserNickname* Cloud_Message_GroupMemberSettingRequest::unsafe_arena_release_setnickname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AcFunDanmu.Im.Cloud.Message.GroupMemberSettingRequest.setNickname)
  if (_internal_has_setnickname()) {
    clear_has_UserSetting();
    ::AcFunDanmu::Im::Cloud_Message_SetUserNickname* temp = UserSetting_.setnickname_;
    UserSetting_.setnickname_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Cloud_Message_GroupMemberSettingRequest::unsafe_arena_set_allocated_setnickname(::AcFunDanmu::Im::Cloud_Message_SetUserNickname* setnickname) {
  clear_UserSetting();
  if (setnickname) {
    set_has_setnickname();
    UserSetting_.setnickname_ = setnickname;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupMemberSettingRequest.setNickname)
}
inline ::AcFunDanmu::Im::Cloud_Message_SetUserNickname* Cloud_Message_GroupMemberSettingRequest::_internal_mutable_setnickname() {
  if (!_internal_has_setnickname()) {
    clear_UserSetting();
    set_has_setnickname();
    UserSetting_.setnickname_ = CreateMaybeMessage< ::AcFunDanmu::Im::Cloud_Message_SetUserNickname >(GetArena());
  }
  return UserSetting_.setnickname_;
}
inline ::AcFunDanmu::Im::Cloud_Message_SetUserNickname* Cloud_Message_GroupMemberSettingRequest::mutable_setnickname() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupMemberSettingRequest.setNickname)
  return _internal_mutable_setnickname();
}

// .AcFunDanmu.Im.Cloud.Message.SetUserAntiDisturbing setAntiDisturbing = 3;
inline bool Cloud_Message_GroupMemberSettingRequest::_internal_has_setantidisturbing() const {
  return UserSetting_case() == kSetAntiDisturbing;
}
inline bool Cloud_Message_GroupMemberSettingRequest::has_setantidisturbing() const {
  return _internal_has_setantidisturbing();
}
inline void Cloud_Message_GroupMemberSettingRequest::set_has_setantidisturbing() {
  _oneof_case_[0] = kSetAntiDisturbing;
}
inline void Cloud_Message_GroupMemberSettingRequest::clear_setantidisturbing() {
  if (_internal_has_setantidisturbing()) {
    if (GetArena() == nullptr) {
      delete UserSetting_.setantidisturbing_;
    }
    clear_has_UserSetting();
  }
}
inline ::AcFunDanmu::Im::Cloud_Message_SetUserAntiDisturbing* Cloud_Message_GroupMemberSettingRequest::release_setantidisturbing() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupMemberSettingRequest.setAntiDisturbing)
  if (_internal_has_setantidisturbing()) {
    clear_has_UserSetting();
      ::AcFunDanmu::Im::Cloud_Message_SetUserAntiDisturbing* temp = UserSetting_.setantidisturbing_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    UserSetting_.setantidisturbing_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::AcFunDanmu::Im::Cloud_Message_SetUserAntiDisturbing& Cloud_Message_GroupMemberSettingRequest::_internal_setantidisturbing() const {
  return _internal_has_setantidisturbing()
      ? *UserSetting_.setantidisturbing_
      : reinterpret_cast< ::AcFunDanmu::Im::Cloud_Message_SetUserAntiDisturbing&>(::AcFunDanmu::Im::_Cloud_Message_SetUserAntiDisturbing_default_instance_);
}
inline const ::AcFunDanmu::Im::Cloud_Message_SetUserAntiDisturbing& Cloud_Message_GroupMemberSettingRequest::setantidisturbing() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupMemberSettingRequest.setAntiDisturbing)
  return _internal_setantidisturbing();
}
inline ::AcFunDanmu::Im::Cloud_Message_SetUserAntiDisturbing* Cloud_Message_GroupMemberSettingRequest::unsafe_arena_release_setantidisturbing() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AcFunDanmu.Im.Cloud.Message.GroupMemberSettingRequest.setAntiDisturbing)
  if (_internal_has_setantidisturbing()) {
    clear_has_UserSetting();
    ::AcFunDanmu::Im::Cloud_Message_SetUserAntiDisturbing* temp = UserSetting_.setantidisturbing_;
    UserSetting_.setantidisturbing_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Cloud_Message_GroupMemberSettingRequest::unsafe_arena_set_allocated_setantidisturbing(::AcFunDanmu::Im::Cloud_Message_SetUserAntiDisturbing* setantidisturbing) {
  clear_UserSetting();
  if (setantidisturbing) {
    set_has_setantidisturbing();
    UserSetting_.setantidisturbing_ = setantidisturbing;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupMemberSettingRequest.setAntiDisturbing)
}
inline ::AcFunDanmu::Im::Cloud_Message_SetUserAntiDisturbing* Cloud_Message_GroupMemberSettingRequest::_internal_mutable_setantidisturbing() {
  if (!_internal_has_setantidisturbing()) {
    clear_UserSetting();
    set_has_setantidisturbing();
    UserSetting_.setantidisturbing_ = CreateMaybeMessage< ::AcFunDanmu::Im::Cloud_Message_SetUserAntiDisturbing >(GetArena());
  }
  return UserSetting_.setantidisturbing_;
}
inline ::AcFunDanmu::Im::Cloud_Message_SetUserAntiDisturbing* Cloud_Message_GroupMemberSettingRequest::mutable_setantidisturbing() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupMemberSettingRequest.setAntiDisturbing)
  return _internal_mutable_setantidisturbing();
}

inline bool Cloud_Message_GroupMemberSettingRequest::has_UserSetting() const {
  return UserSetting_case() != USERSETTING_NOT_SET;
}
inline void Cloud_Message_GroupMemberSettingRequest::clear_has_UserSetting() {
  _oneof_case_[0] = USERSETTING_NOT_SET;
}
inline Cloud_Message_GroupMemberSettingRequest::UserSettingCase Cloud_Message_GroupMemberSettingRequest::UserSetting_case() const {
  return Cloud_Message_GroupMemberSettingRequest::UserSettingCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Cloud_Message_SetUserNickname

// string nickname = 1;
inline void Cloud_Message_SetUserNickname::clear_nickname() {
  nickname_.ClearToEmpty();
}
inline const std::string& Cloud_Message_SetUserNickname::nickname() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.SetUserNickname.nickname)
  return _internal_nickname();
}
inline void Cloud_Message_SetUserNickname::set_nickname(const std::string& value) {
  _internal_set_nickname(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.SetUserNickname.nickname)
}
inline std::string* Cloud_Message_SetUserNickname::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.SetUserNickname.nickname)
  return _internal_mutable_nickname();
}
inline const std::string& Cloud_Message_SetUserNickname::_internal_nickname() const {
  return nickname_.Get();
}
inline void Cloud_Message_SetUserNickname::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Message_SetUserNickname::set_nickname(std::string&& value) {
  
  nickname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Message.SetUserNickname.nickname)
}
inline void Cloud_Message_SetUserNickname::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Message.SetUserNickname.nickname)
}
inline void Cloud_Message_SetUserNickname::set_nickname(const char* value,
    size_t size) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Message.SetUserNickname.nickname)
}
inline std::string* Cloud_Message_SetUserNickname::_internal_mutable_nickname() {
  
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Message_SetUserNickname::release_nickname() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.SetUserNickname.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Message_SetUserNickname::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.SetUserNickname.nickname)
}

// -------------------------------------------------------------------

// Cloud_Message_SetUserAntiDisturbing

// bool antiDisturbing = 1;
inline void Cloud_Message_SetUserAntiDisturbing::clear_antidisturbing() {
  antidisturbing_ = false;
}
inline bool Cloud_Message_SetUserAntiDisturbing::_internal_antidisturbing() const {
  return antidisturbing_;
}
inline bool Cloud_Message_SetUserAntiDisturbing::antidisturbing() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.SetUserAntiDisturbing.antiDisturbing)
  return _internal_antidisturbing();
}
inline void Cloud_Message_SetUserAntiDisturbing::_internal_set_antidisturbing(bool value) {
  
  antidisturbing_ = value;
}
inline void Cloud_Message_SetUserAntiDisturbing::set_antidisturbing(bool value) {
  _internal_set_antidisturbing(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.SetUserAntiDisturbing.antiDisturbing)
}

// -------------------------------------------------------------------

// Cloud_Message_GroupMemberSettingResponse

// -------------------------------------------------------------------

// Cloud_Message_GroupMemberListGetRequest

// string groupId = 1;
inline void Cloud_Message_GroupMemberListGetRequest::clear_groupid() {
  groupid_.ClearToEmpty();
}
inline const std::string& Cloud_Message_GroupMemberListGetRequest::groupid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupMemberListGetRequest.groupId)
  return _internal_groupid();
}
inline void Cloud_Message_GroupMemberListGetRequest::set_groupid(const std::string& value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupMemberListGetRequest.groupId)
}
inline std::string* Cloud_Message_GroupMemberListGetRequest::mutable_groupid() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupMemberListGetRequest.groupId)
  return _internal_mutable_groupid();
}
inline const std::string& Cloud_Message_GroupMemberListGetRequest::_internal_groupid() const {
  return groupid_.Get();
}
inline void Cloud_Message_GroupMemberListGetRequest::_internal_set_groupid(const std::string& value) {
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Message_GroupMemberListGetRequest::set_groupid(std::string&& value) {
  
  groupid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Message.GroupMemberListGetRequest.groupId)
}
inline void Cloud_Message_GroupMemberListGetRequest::set_groupid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Message.GroupMemberListGetRequest.groupId)
}
inline void Cloud_Message_GroupMemberListGetRequest::set_groupid(const char* value,
    size_t size) {
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Message.GroupMemberListGetRequest.groupId)
}
inline std::string* Cloud_Message_GroupMemberListGetRequest::_internal_mutable_groupid() {
  
  return groupid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Message_GroupMemberListGetRequest::release_groupid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupMemberListGetRequest.groupId)
  return groupid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Message_GroupMemberListGetRequest::set_allocated_groupid(std::string* groupid) {
  if (groupid != nullptr) {
    
  } else {
    
  }
  groupid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), groupid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupMemberListGetRequest.groupId)
}

// .AcFunDanmu.Im.Basic.SyncCookie syncCookie = 2;
inline bool Cloud_Message_GroupMemberListGetRequest::_internal_has_synccookie() const {
  return this != internal_default_instance() && synccookie_ != nullptr;
}
inline bool Cloud_Message_GroupMemberListGetRequest::has_synccookie() const {
  return _internal_has_synccookie();
}
inline void Cloud_Message_GroupMemberListGetRequest::clear_synccookie() {
  if (GetArena() == nullptr && synccookie_ != nullptr) {
    delete synccookie_;
  }
  synccookie_ = nullptr;
}
inline const ::AcFunDanmu::Im::Basic_SyncCookie& Cloud_Message_GroupMemberListGetRequest::_internal_synccookie() const {
  const ::AcFunDanmu::Im::Basic_SyncCookie* p = synccookie_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic_SyncCookie&>(
      ::AcFunDanmu::Im::_Basic_SyncCookie_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic_SyncCookie& Cloud_Message_GroupMemberListGetRequest::synccookie() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupMemberListGetRequest.syncCookie)
  return _internal_synccookie();
}
inline void Cloud_Message_GroupMemberListGetRequest::unsafe_arena_set_allocated_synccookie(
    ::AcFunDanmu::Im::Basic_SyncCookie* synccookie) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(synccookie_);
  }
  synccookie_ = synccookie;
  if (synccookie) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupMemberListGetRequest.syncCookie)
}
inline ::AcFunDanmu::Im::Basic_SyncCookie* Cloud_Message_GroupMemberListGetRequest::release_synccookie() {
  
  ::AcFunDanmu::Im::Basic_SyncCookie* temp = synccookie_;
  synccookie_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::Basic_SyncCookie* Cloud_Message_GroupMemberListGetRequest::unsafe_arena_release_synccookie() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupMemberListGetRequest.syncCookie)
  
  ::AcFunDanmu::Im::Basic_SyncCookie* temp = synccookie_;
  synccookie_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic_SyncCookie* Cloud_Message_GroupMemberListGetRequest::_internal_mutable_synccookie() {
  
  if (synccookie_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic_SyncCookie>(GetArena());
    synccookie_ = p;
  }
  return synccookie_;
}
inline ::AcFunDanmu::Im::Basic_SyncCookie* Cloud_Message_GroupMemberListGetRequest::mutable_synccookie() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupMemberListGetRequest.syncCookie)
  return _internal_mutable_synccookie();
}
inline void Cloud_Message_GroupMemberListGetRequest::set_allocated_synccookie(::AcFunDanmu::Im::Basic_SyncCookie* synccookie) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete synccookie_;
  }
  if (synccookie) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(synccookie);
    if (message_arena != submessage_arena) {
      synccookie = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, synccookie, submessage_arena);
    }
    
  } else {
    
  }
  synccookie_ = synccookie;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupMemberListGetRequest.syncCookie)
}

// -------------------------------------------------------------------

// Cloud_Message_GroupMemberListGetResponse

// repeated .AcFunDanmu.Im.Cloud.Message.GroupMember members = 1;
inline int Cloud_Message_GroupMemberListGetResponse::_internal_members_size() const {
  return members_.size();
}
inline int Cloud_Message_GroupMemberListGetResponse::members_size() const {
  return _internal_members_size();
}
inline void Cloud_Message_GroupMemberListGetResponse::clear_members() {
  members_.Clear();
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupMember* Cloud_Message_GroupMemberListGetResponse::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupMemberListGetResponse.members)
  return members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud_Message_GroupMember >*
Cloud_Message_GroupMemberListGetResponse::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Cloud.Message.GroupMemberListGetResponse.members)
  return &members_;
}
inline const ::AcFunDanmu::Im::Cloud_Message_GroupMember& Cloud_Message_GroupMemberListGetResponse::_internal_members(int index) const {
  return members_.Get(index);
}
inline const ::AcFunDanmu::Im::Cloud_Message_GroupMember& Cloud_Message_GroupMemberListGetResponse::members(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupMemberListGetResponse.members)
  return _internal_members(index);
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupMember* Cloud_Message_GroupMemberListGetResponse::_internal_add_members() {
  return members_.Add();
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupMember* Cloud_Message_GroupMemberListGetResponse::add_members() {
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Cloud.Message.GroupMemberListGetResponse.members)
  return _internal_add_members();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud_Message_GroupMember >&
Cloud_Message_GroupMemberListGetResponse::members() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Cloud.Message.GroupMemberListGetResponse.members)
  return members_;
}

// .AcFunDanmu.Im.Basic.SyncCookie syncCookie = 2;
inline bool Cloud_Message_GroupMemberListGetResponse::_internal_has_synccookie() const {
  return this != internal_default_instance() && synccookie_ != nullptr;
}
inline bool Cloud_Message_GroupMemberListGetResponse::has_synccookie() const {
  return _internal_has_synccookie();
}
inline void Cloud_Message_GroupMemberListGetResponse::clear_synccookie() {
  if (GetArena() == nullptr && synccookie_ != nullptr) {
    delete synccookie_;
  }
  synccookie_ = nullptr;
}
inline const ::AcFunDanmu::Im::Basic_SyncCookie& Cloud_Message_GroupMemberListGetResponse::_internal_synccookie() const {
  const ::AcFunDanmu::Im::Basic_SyncCookie* p = synccookie_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic_SyncCookie&>(
      ::AcFunDanmu::Im::_Basic_SyncCookie_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic_SyncCookie& Cloud_Message_GroupMemberListGetResponse::synccookie() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupMemberListGetResponse.syncCookie)
  return _internal_synccookie();
}
inline void Cloud_Message_GroupMemberListGetResponse::unsafe_arena_set_allocated_synccookie(
    ::AcFunDanmu::Im::Basic_SyncCookie* synccookie) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(synccookie_);
  }
  synccookie_ = synccookie;
  if (synccookie) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupMemberListGetResponse.syncCookie)
}
inline ::AcFunDanmu::Im::Basic_SyncCookie* Cloud_Message_GroupMemberListGetResponse::release_synccookie() {
  
  ::AcFunDanmu::Im::Basic_SyncCookie* temp = synccookie_;
  synccookie_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::Basic_SyncCookie* Cloud_Message_GroupMemberListGetResponse::unsafe_arena_release_synccookie() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupMemberListGetResponse.syncCookie)
  
  ::AcFunDanmu::Im::Basic_SyncCookie* temp = synccookie_;
  synccookie_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic_SyncCookie* Cloud_Message_GroupMemberListGetResponse::_internal_mutable_synccookie() {
  
  if (synccookie_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic_SyncCookie>(GetArena());
    synccookie_ = p;
  }
  return synccookie_;
}
inline ::AcFunDanmu::Im::Basic_SyncCookie* Cloud_Message_GroupMemberListGetResponse::mutable_synccookie() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupMemberListGetResponse.syncCookie)
  return _internal_mutable_synccookie();
}
inline void Cloud_Message_GroupMemberListGetResponse::set_allocated_synccookie(::AcFunDanmu::Im::Basic_SyncCookie* synccookie) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete synccookie_;
  }
  if (synccookie) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(synccookie);
    if (message_arena != submessage_arena) {
      synccookie = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, synccookie, submessage_arena);
    }
    
  } else {
    
  }
  synccookie_ = synccookie;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupMemberListGetResponse.syncCookie)
}

// -------------------------------------------------------------------

// Cloud_Message_GroupMemberGetRequest

// string groupId = 1;
inline void Cloud_Message_GroupMemberGetRequest::clear_groupid() {
  groupid_.ClearToEmpty();
}
inline const std::string& Cloud_Message_GroupMemberGetRequest::groupid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupMemberGetRequest.groupId)
  return _internal_groupid();
}
inline void Cloud_Message_GroupMemberGetRequest::set_groupid(const std::string& value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupMemberGetRequest.groupId)
}
inline std::string* Cloud_Message_GroupMemberGetRequest::mutable_groupid() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupMemberGetRequest.groupId)
  return _internal_mutable_groupid();
}
inline const std::string& Cloud_Message_GroupMemberGetRequest::_internal_groupid() const {
  return groupid_.Get();
}
inline void Cloud_Message_GroupMemberGetRequest::_internal_set_groupid(const std::string& value) {
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Message_GroupMemberGetRequest::set_groupid(std::string&& value) {
  
  groupid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Message.GroupMemberGetRequest.groupId)
}
inline void Cloud_Message_GroupMemberGetRequest::set_groupid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Message.GroupMemberGetRequest.groupId)
}
inline void Cloud_Message_GroupMemberGetRequest::set_groupid(const char* value,
    size_t size) {
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Message.GroupMemberGetRequest.groupId)
}
inline std::string* Cloud_Message_GroupMemberGetRequest::_internal_mutable_groupid() {
  
  return groupid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Message_GroupMemberGetRequest::release_groupid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupMemberGetRequest.groupId)
  return groupid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Message_GroupMemberGetRequest::set_allocated_groupid(std::string* groupid) {
  if (groupid != nullptr) {
    
  } else {
    
  }
  groupid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), groupid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupMemberGetRequest.groupId)
}

// .AcFunDanmu.Im.Basic.User user = 2;
inline bool Cloud_Message_GroupMemberGetRequest::_internal_has_user() const {
  return this != internal_default_instance() && user_ != nullptr;
}
inline bool Cloud_Message_GroupMemberGetRequest::has_user() const {
  return _internal_has_user();
}
inline void Cloud_Message_GroupMemberGetRequest::clear_user() {
  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
inline const ::AcFunDanmu::Im::Basic_User& Cloud_Message_GroupMemberGetRequest::_internal_user() const {
  const ::AcFunDanmu::Im::Basic_User* p = user_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic_User&>(
      ::AcFunDanmu::Im::_Basic_User_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic_User& Cloud_Message_GroupMemberGetRequest::user() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupMemberGetRequest.user)
  return _internal_user();
}
inline void Cloud_Message_GroupMemberGetRequest::unsafe_arena_set_allocated_user(
    ::AcFunDanmu::Im::Basic_User* user) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_);
  }
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupMemberGetRequest.user)
}
inline ::AcFunDanmu::Im::Basic_User* Cloud_Message_GroupMemberGetRequest::release_user() {
  
  ::AcFunDanmu::Im::Basic_User* temp = user_;
  user_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::Basic_User* Cloud_Message_GroupMemberGetRequest::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupMemberGetRequest.user)
  
  ::AcFunDanmu::Im::Basic_User* temp = user_;
  user_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic_User* Cloud_Message_GroupMemberGetRequest::_internal_mutable_user() {
  
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic_User>(GetArena());
    user_ = p;
  }
  return user_;
}
inline ::AcFunDanmu::Im::Basic_User* Cloud_Message_GroupMemberGetRequest::mutable_user() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupMemberGetRequest.user)
  return _internal_mutable_user();
}
inline void Cloud_Message_GroupMemberGetRequest::set_allocated_user(::AcFunDanmu::Im::Basic_User* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupMemberGetRequest.user)
}

// -------------------------------------------------------------------

// Cloud_Message_GroupMemberGetResponse

// .AcFunDanmu.Im.Cloud.Message.GroupMember member = 1;
inline bool Cloud_Message_GroupMemberGetResponse::_internal_has_member() const {
  return this != internal_default_instance() && member_ != nullptr;
}
inline bool Cloud_Message_GroupMemberGetResponse::has_member() const {
  return _internal_has_member();
}
inline void Cloud_Message_GroupMemberGetResponse::clear_member() {
  if (GetArena() == nullptr && member_ != nullptr) {
    delete member_;
  }
  member_ = nullptr;
}
inline const ::AcFunDanmu::Im::Cloud_Message_GroupMember& Cloud_Message_GroupMemberGetResponse::_internal_member() const {
  const ::AcFunDanmu::Im::Cloud_Message_GroupMember* p = member_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Cloud_Message_GroupMember&>(
      ::AcFunDanmu::Im::_Cloud_Message_GroupMember_default_instance_);
}
inline const ::AcFunDanmu::Im::Cloud_Message_GroupMember& Cloud_Message_GroupMemberGetResponse::member() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupMemberGetResponse.member)
  return _internal_member();
}
inline void Cloud_Message_GroupMemberGetResponse::unsafe_arena_set_allocated_member(
    ::AcFunDanmu::Im::Cloud_Message_GroupMember* member) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(member_);
  }
  member_ = member;
  if (member) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupMemberGetResponse.member)
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupMember* Cloud_Message_GroupMemberGetResponse::release_member() {
  
  ::AcFunDanmu::Im::Cloud_Message_GroupMember* temp = member_;
  member_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupMember* Cloud_Message_GroupMemberGetResponse::unsafe_arena_release_member() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupMemberGetResponse.member)
  
  ::AcFunDanmu::Im::Cloud_Message_GroupMember* temp = member_;
  member_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupMember* Cloud_Message_GroupMemberGetResponse::_internal_mutable_member() {
  
  if (member_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_GroupMember>(GetArena());
    member_ = p;
  }
  return member_;
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupMember* Cloud_Message_GroupMemberGetResponse::mutable_member() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupMemberGetResponse.member)
  return _internal_mutable_member();
}
inline void Cloud_Message_GroupMemberGetResponse::set_allocated_member(::AcFunDanmu::Im::Cloud_Message_GroupMember* member) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete member_;
  }
  if (member) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(member);
    if (message_arena != submessage_arena) {
      member = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, member, submessage_arena);
    }
    
  } else {
    
  }
  member_ = member;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupMemberGetResponse.member)
}

// -------------------------------------------------------------------

// Cloud_Message_UserGroupListRequest

// .AcFunDanmu.Im.Basic.SyncCookie syncCookie = 2;
inline bool Cloud_Message_UserGroupListRequest::_internal_has_synccookie() const {
  return this != internal_default_instance() && synccookie_ != nullptr;
}
inline bool Cloud_Message_UserGroupListRequest::has_synccookie() const {
  return _internal_has_synccookie();
}
inline void Cloud_Message_UserGroupListRequest::clear_synccookie() {
  if (GetArena() == nullptr && synccookie_ != nullptr) {
    delete synccookie_;
  }
  synccookie_ = nullptr;
}
inline const ::AcFunDanmu::Im::Basic_SyncCookie& Cloud_Message_UserGroupListRequest::_internal_synccookie() const {
  const ::AcFunDanmu::Im::Basic_SyncCookie* p = synccookie_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic_SyncCookie&>(
      ::AcFunDanmu::Im::_Basic_SyncCookie_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic_SyncCookie& Cloud_Message_UserGroupListRequest::synccookie() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.UserGroupListRequest.syncCookie)
  return _internal_synccookie();
}
inline void Cloud_Message_UserGroupListRequest::unsafe_arena_set_allocated_synccookie(
    ::AcFunDanmu::Im::Basic_SyncCookie* synccookie) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(synccookie_);
  }
  synccookie_ = synccookie;
  if (synccookie) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Message.UserGroupListRequest.syncCookie)
}
inline ::AcFunDanmu::Im::Basic_SyncCookie* Cloud_Message_UserGroupListRequest::release_synccookie() {
  
  ::AcFunDanmu::Im::Basic_SyncCookie* temp = synccookie_;
  synccookie_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::Basic_SyncCookie* Cloud_Message_UserGroupListRequest::unsafe_arena_release_synccookie() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.UserGroupListRequest.syncCookie)
  
  ::AcFunDanmu::Im::Basic_SyncCookie* temp = synccookie_;
  synccookie_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic_SyncCookie* Cloud_Message_UserGroupListRequest::_internal_mutable_synccookie() {
  
  if (synccookie_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic_SyncCookie>(GetArena());
    synccookie_ = p;
  }
  return synccookie_;
}
inline ::AcFunDanmu::Im::Basic_SyncCookie* Cloud_Message_UserGroupListRequest::mutable_synccookie() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.UserGroupListRequest.syncCookie)
  return _internal_mutable_synccookie();
}
inline void Cloud_Message_UserGroupListRequest::set_allocated_synccookie(::AcFunDanmu::Im::Basic_SyncCookie* synccookie) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete synccookie_;
  }
  if (synccookie) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(synccookie);
    if (message_arena != submessage_arena) {
      synccookie = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, synccookie, submessage_arena);
    }
    
  } else {
    
  }
  synccookie_ = synccookie;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.UserGroupListRequest.syncCookie)
}

// -------------------------------------------------------------------

// Cloud_Message_UserGroupListResponse

// repeated .AcFunDanmu.Im.Cloud.Message.UserGroupInfo userGroupInfo = 1;
inline int Cloud_Message_UserGroupListResponse::_internal_usergroupinfo_size() const {
  return usergroupinfo_.size();
}
inline int Cloud_Message_UserGroupListResponse::usergroupinfo_size() const {
  return _internal_usergroupinfo_size();
}
inline void Cloud_Message_UserGroupListResponse::clear_usergroupinfo() {
  usergroupinfo_.Clear();
}
inline ::AcFunDanmu::Im::Cloud_Message_UserGroupInfo* Cloud_Message_UserGroupListResponse::mutable_usergroupinfo(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.UserGroupListResponse.userGroupInfo)
  return usergroupinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud_Message_UserGroupInfo >*
Cloud_Message_UserGroupListResponse::mutable_usergroupinfo() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Cloud.Message.UserGroupListResponse.userGroupInfo)
  return &usergroupinfo_;
}
inline const ::AcFunDanmu::Im::Cloud_Message_UserGroupInfo& Cloud_Message_UserGroupListResponse::_internal_usergroupinfo(int index) const {
  return usergroupinfo_.Get(index);
}
inline const ::AcFunDanmu::Im::Cloud_Message_UserGroupInfo& Cloud_Message_UserGroupListResponse::usergroupinfo(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.UserGroupListResponse.userGroupInfo)
  return _internal_usergroupinfo(index);
}
inline ::AcFunDanmu::Im::Cloud_Message_UserGroupInfo* Cloud_Message_UserGroupListResponse::_internal_add_usergroupinfo() {
  return usergroupinfo_.Add();
}
inline ::AcFunDanmu::Im::Cloud_Message_UserGroupInfo* Cloud_Message_UserGroupListResponse::add_usergroupinfo() {
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Cloud.Message.UserGroupListResponse.userGroupInfo)
  return _internal_add_usergroupinfo();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud_Message_UserGroupInfo >&
Cloud_Message_UserGroupListResponse::usergroupinfo() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Cloud.Message.UserGroupListResponse.userGroupInfo)
  return usergroupinfo_;
}

// .AcFunDanmu.Im.Basic.SyncCookie syncCookie = 2;
inline bool Cloud_Message_UserGroupListResponse::_internal_has_synccookie() const {
  return this != internal_default_instance() && synccookie_ != nullptr;
}
inline bool Cloud_Message_UserGroupListResponse::has_synccookie() const {
  return _internal_has_synccookie();
}
inline void Cloud_Message_UserGroupListResponse::clear_synccookie() {
  if (GetArena() == nullptr && synccookie_ != nullptr) {
    delete synccookie_;
  }
  synccookie_ = nullptr;
}
inline const ::AcFunDanmu::Im::Basic_SyncCookie& Cloud_Message_UserGroupListResponse::_internal_synccookie() const {
  const ::AcFunDanmu::Im::Basic_SyncCookie* p = synccookie_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic_SyncCookie&>(
      ::AcFunDanmu::Im::_Basic_SyncCookie_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic_SyncCookie& Cloud_Message_UserGroupListResponse::synccookie() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.UserGroupListResponse.syncCookie)
  return _internal_synccookie();
}
inline void Cloud_Message_UserGroupListResponse::unsafe_arena_set_allocated_synccookie(
    ::AcFunDanmu::Im::Basic_SyncCookie* synccookie) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(synccookie_);
  }
  synccookie_ = synccookie;
  if (synccookie) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Message.UserGroupListResponse.syncCookie)
}
inline ::AcFunDanmu::Im::Basic_SyncCookie* Cloud_Message_UserGroupListResponse::release_synccookie() {
  
  ::AcFunDanmu::Im::Basic_SyncCookie* temp = synccookie_;
  synccookie_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::Basic_SyncCookie* Cloud_Message_UserGroupListResponse::unsafe_arena_release_synccookie() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.UserGroupListResponse.syncCookie)
  
  ::AcFunDanmu::Im::Basic_SyncCookie* temp = synccookie_;
  synccookie_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic_SyncCookie* Cloud_Message_UserGroupListResponse::_internal_mutable_synccookie() {
  
  if (synccookie_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic_SyncCookie>(GetArena());
    synccookie_ = p;
  }
  return synccookie_;
}
inline ::AcFunDanmu::Im::Basic_SyncCookie* Cloud_Message_UserGroupListResponse::mutable_synccookie() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.UserGroupListResponse.syncCookie)
  return _internal_mutable_synccookie();
}
inline void Cloud_Message_UserGroupListResponse::set_allocated_synccookie(::AcFunDanmu::Im::Basic_SyncCookie* synccookie) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete synccookie_;
  }
  if (synccookie) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(synccookie);
    if (message_arena != submessage_arena) {
      synccookie = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, synccookie, submessage_arena);
    }
    
  } else {
    
  }
  synccookie_ = synccookie;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.UserGroupListResponse.syncCookie)
}

// -------------------------------------------------------------------

// Cloud_Message_UserGroupRecord

// string groupId = 1;
inline void Cloud_Message_UserGroupRecord::clear_groupid() {
  groupid_.ClearToEmpty();
}
inline const std::string& Cloud_Message_UserGroupRecord::groupid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.UserGroupRecord.groupId)
  return _internal_groupid();
}
inline void Cloud_Message_UserGroupRecord::set_groupid(const std::string& value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.UserGroupRecord.groupId)
}
inline std::string* Cloud_Message_UserGroupRecord::mutable_groupid() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.UserGroupRecord.groupId)
  return _internal_mutable_groupid();
}
inline const std::string& Cloud_Message_UserGroupRecord::_internal_groupid() const {
  return groupid_.Get();
}
inline void Cloud_Message_UserGroupRecord::_internal_set_groupid(const std::string& value) {
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Message_UserGroupRecord::set_groupid(std::string&& value) {
  
  groupid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Message.UserGroupRecord.groupId)
}
inline void Cloud_Message_UserGroupRecord::set_groupid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Message.UserGroupRecord.groupId)
}
inline void Cloud_Message_UserGroupRecord::set_groupid(const char* value,
    size_t size) {
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Message.UserGroupRecord.groupId)
}
inline std::string* Cloud_Message_UserGroupRecord::_internal_mutable_groupid() {
  
  return groupid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Message_UserGroupRecord::release_groupid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.UserGroupRecord.groupId)
  return groupid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Message_UserGroupRecord::set_allocated_groupid(std::string* groupid) {
  if (groupid != nullptr) {
    
  } else {
    
  }
  groupid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), groupid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.UserGroupRecord.groupId)
}

// int64 updateTime = 2;
inline void Cloud_Message_UserGroupRecord::clear_updatetime() {
  updatetime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Cloud_Message_UserGroupRecord::_internal_updatetime() const {
  return updatetime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Cloud_Message_UserGroupRecord::updatetime() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.UserGroupRecord.updateTime)
  return _internal_updatetime();
}
inline void Cloud_Message_UserGroupRecord::_internal_set_updatetime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  updatetime_ = value;
}
inline void Cloud_Message_UserGroupRecord::set_updatetime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_updatetime(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.UserGroupRecord.updateTime)
}

// -------------------------------------------------------------------

// Cloud_Message_UserGroupGetRequest

// repeated string groupId = 1;
inline int Cloud_Message_UserGroupGetRequest::_internal_groupid_size() const {
  return groupid_.size();
}
inline int Cloud_Message_UserGroupGetRequest::groupid_size() const {
  return _internal_groupid_size();
}
inline void Cloud_Message_UserGroupGetRequest::clear_groupid() {
  groupid_.Clear();
}
inline std::string* Cloud_Message_UserGroupGetRequest::add_groupid() {
  // @@protoc_insertion_point(field_add_mutable:AcFunDanmu.Im.Cloud.Message.UserGroupGetRequest.groupId)
  return _internal_add_groupid();
}
inline const std::string& Cloud_Message_UserGroupGetRequest::_internal_groupid(int index) const {
  return groupid_.Get(index);
}
inline const std::string& Cloud_Message_UserGroupGetRequest::groupid(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.UserGroupGetRequest.groupId)
  return _internal_groupid(index);
}
inline std::string* Cloud_Message_UserGroupGetRequest::mutable_groupid(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.UserGroupGetRequest.groupId)
  return groupid_.Mutable(index);
}
inline void Cloud_Message_UserGroupGetRequest::set_groupid(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.UserGroupGetRequest.groupId)
  groupid_.Mutable(index)->assign(value);
}
inline void Cloud_Message_UserGroupGetRequest::set_groupid(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.UserGroupGetRequest.groupId)
  groupid_.Mutable(index)->assign(std::move(value));
}
inline void Cloud_Message_UserGroupGetRequest::set_groupid(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  groupid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Message.UserGroupGetRequest.groupId)
}
inline void Cloud_Message_UserGroupGetRequest::set_groupid(int index, const char* value, size_t size) {
  groupid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Message.UserGroupGetRequest.groupId)
}
inline std::string* Cloud_Message_UserGroupGetRequest::_internal_add_groupid() {
  return groupid_.Add();
}
inline void Cloud_Message_UserGroupGetRequest::add_groupid(const std::string& value) {
  groupid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Cloud.Message.UserGroupGetRequest.groupId)
}
inline void Cloud_Message_UserGroupGetRequest::add_groupid(std::string&& value) {
  groupid_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Cloud.Message.UserGroupGetRequest.groupId)
}
inline void Cloud_Message_UserGroupGetRequest::add_groupid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  groupid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AcFunDanmu.Im.Cloud.Message.UserGroupGetRequest.groupId)
}
inline void Cloud_Message_UserGroupGetRequest::add_groupid(const char* value, size_t size) {
  groupid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AcFunDanmu.Im.Cloud.Message.UserGroupGetRequest.groupId)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Cloud_Message_UserGroupGetRequest::groupid() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Cloud.Message.UserGroupGetRequest.groupId)
  return groupid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Cloud_Message_UserGroupGetRequest::mutable_groupid() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Cloud.Message.UserGroupGetRequest.groupId)
  return &groupid_;
}

// -------------------------------------------------------------------

// Cloud_Message_UserGroupGetResponse

// repeated .AcFunDanmu.Im.Cloud.Message.UserGroupInfo userGroupInfo = 1;
inline int Cloud_Message_UserGroupGetResponse::_internal_usergroupinfo_size() const {
  return usergroupinfo_.size();
}
inline int Cloud_Message_UserGroupGetResponse::usergroupinfo_size() const {
  return _internal_usergroupinfo_size();
}
inline void Cloud_Message_UserGroupGetResponse::clear_usergroupinfo() {
  usergroupinfo_.Clear();
}
inline ::AcFunDanmu::Im::Cloud_Message_UserGroupInfo* Cloud_Message_UserGroupGetResponse::mutable_usergroupinfo(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.UserGroupGetResponse.userGroupInfo)
  return usergroupinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud_Message_UserGroupInfo >*
Cloud_Message_UserGroupGetResponse::mutable_usergroupinfo() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Cloud.Message.UserGroupGetResponse.userGroupInfo)
  return &usergroupinfo_;
}
inline const ::AcFunDanmu::Im::Cloud_Message_UserGroupInfo& Cloud_Message_UserGroupGetResponse::_internal_usergroupinfo(int index) const {
  return usergroupinfo_.Get(index);
}
inline const ::AcFunDanmu::Im::Cloud_Message_UserGroupInfo& Cloud_Message_UserGroupGetResponse::usergroupinfo(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.UserGroupGetResponse.userGroupInfo)
  return _internal_usergroupinfo(index);
}
inline ::AcFunDanmu::Im::Cloud_Message_UserGroupInfo* Cloud_Message_UserGroupGetResponse::_internal_add_usergroupinfo() {
  return usergroupinfo_.Add();
}
inline ::AcFunDanmu::Im::Cloud_Message_UserGroupInfo* Cloud_Message_UserGroupGetResponse::add_usergroupinfo() {
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Cloud.Message.UserGroupGetResponse.userGroupInfo)
  return _internal_add_usergroupinfo();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Cloud_Message_UserGroupInfo >&
Cloud_Message_UserGroupGetResponse::usergroupinfo() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Cloud.Message.UserGroupGetResponse.userGroupInfo)
  return usergroupinfo_;
}

// -------------------------------------------------------------------

// Cloud_Message_UserGroupInfo

// .AcFunDanmu.Im.Cloud.Message.GroupInfo groupInfo = 1;
inline bool Cloud_Message_UserGroupInfo::_internal_has_groupinfo() const {
  return this != internal_default_instance() && groupinfo_ != nullptr;
}
inline bool Cloud_Message_UserGroupInfo::has_groupinfo() const {
  return _internal_has_groupinfo();
}
inline void Cloud_Message_UserGroupInfo::clear_groupinfo() {
  if (GetArena() == nullptr && groupinfo_ != nullptr) {
    delete groupinfo_;
  }
  groupinfo_ = nullptr;
}
inline const ::AcFunDanmu::Im::Cloud_Message_GroupInfo& Cloud_Message_UserGroupInfo::_internal_groupinfo() const {
  const ::AcFunDanmu::Im::Cloud_Message_GroupInfo* p = groupinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Cloud_Message_GroupInfo&>(
      ::AcFunDanmu::Im::_Cloud_Message_GroupInfo_default_instance_);
}
inline const ::AcFunDanmu::Im::Cloud_Message_GroupInfo& Cloud_Message_UserGroupInfo::groupinfo() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.UserGroupInfo.groupInfo)
  return _internal_groupinfo();
}
inline void Cloud_Message_UserGroupInfo::unsafe_arena_set_allocated_groupinfo(
    ::AcFunDanmu::Im::Cloud_Message_GroupInfo* groupinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(groupinfo_);
  }
  groupinfo_ = groupinfo;
  if (groupinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Message.UserGroupInfo.groupInfo)
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupInfo* Cloud_Message_UserGroupInfo::release_groupinfo() {
  
  ::AcFunDanmu::Im::Cloud_Message_GroupInfo* temp = groupinfo_;
  groupinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupInfo* Cloud_Message_UserGroupInfo::unsafe_arena_release_groupinfo() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.UserGroupInfo.groupInfo)
  
  ::AcFunDanmu::Im::Cloud_Message_GroupInfo* temp = groupinfo_;
  groupinfo_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupInfo* Cloud_Message_UserGroupInfo::_internal_mutable_groupinfo() {
  
  if (groupinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_GroupInfo>(GetArena());
    groupinfo_ = p;
  }
  return groupinfo_;
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupInfo* Cloud_Message_UserGroupInfo::mutable_groupinfo() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.UserGroupInfo.groupInfo)
  return _internal_mutable_groupinfo();
}
inline void Cloud_Message_UserGroupInfo::set_allocated_groupinfo(::AcFunDanmu::Im::Cloud_Message_GroupInfo* groupinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete groupinfo_;
  }
  if (groupinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(groupinfo);
    if (message_arena != submessage_arena) {
      groupinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, groupinfo, submessage_arena);
    }
    
  } else {
    
  }
  groupinfo_ = groupinfo;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.UserGroupInfo.groupInfo)
}

// .AcFunDanmu.Im.Cloud.Message.GroupMember groupMember = 2;
inline bool Cloud_Message_UserGroupInfo::_internal_has_groupmember() const {
  return this != internal_default_instance() && groupmember_ != nullptr;
}
inline bool Cloud_Message_UserGroupInfo::has_groupmember() const {
  return _internal_has_groupmember();
}
inline void Cloud_Message_UserGroupInfo::clear_groupmember() {
  if (GetArena() == nullptr && groupmember_ != nullptr) {
    delete groupmember_;
  }
  groupmember_ = nullptr;
}
inline const ::AcFunDanmu::Im::Cloud_Message_GroupMember& Cloud_Message_UserGroupInfo::_internal_groupmember() const {
  const ::AcFunDanmu::Im::Cloud_Message_GroupMember* p = groupmember_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Cloud_Message_GroupMember&>(
      ::AcFunDanmu::Im::_Cloud_Message_GroupMember_default_instance_);
}
inline const ::AcFunDanmu::Im::Cloud_Message_GroupMember& Cloud_Message_UserGroupInfo::groupmember() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.UserGroupInfo.groupMember)
  return _internal_groupmember();
}
inline void Cloud_Message_UserGroupInfo::unsafe_arena_set_allocated_groupmember(
    ::AcFunDanmu::Im::Cloud_Message_GroupMember* groupmember) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(groupmember_);
  }
  groupmember_ = groupmember;
  if (groupmember) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Message.UserGroupInfo.groupMember)
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupMember* Cloud_Message_UserGroupInfo::release_groupmember() {
  
  ::AcFunDanmu::Im::Cloud_Message_GroupMember* temp = groupmember_;
  groupmember_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupMember* Cloud_Message_UserGroupInfo::unsafe_arena_release_groupmember() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.UserGroupInfo.groupMember)
  
  ::AcFunDanmu::Im::Cloud_Message_GroupMember* temp = groupmember_;
  groupmember_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupMember* Cloud_Message_UserGroupInfo::_internal_mutable_groupmember() {
  
  if (groupmember_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_GroupMember>(GetArena());
    groupmember_ = p;
  }
  return groupmember_;
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupMember* Cloud_Message_UserGroupInfo::mutable_groupmember() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.UserGroupInfo.groupMember)
  return _internal_mutable_groupmember();
}
inline void Cloud_Message_UserGroupInfo::set_allocated_groupmember(::AcFunDanmu::Im::Cloud_Message_GroupMember* groupmember) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete groupmember_;
  }
  if (groupmember) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(groupmember);
    if (message_arena != submessage_arena) {
      groupmember = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, groupmember, submessage_arena);
    }
    
  } else {
    
  }
  groupmember_ = groupmember;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.UserGroupInfo.groupMember)
}

// -------------------------------------------------------------------

// Cloud_Message_GroupMember

// .AcFunDanmu.Im.Basic.User user = 1;
inline bool Cloud_Message_GroupMember::_internal_has_user() const {
  return this != internal_default_instance() && user_ != nullptr;
}
inline bool Cloud_Message_GroupMember::has_user() const {
  return _internal_has_user();
}
inline void Cloud_Message_GroupMember::clear_user() {
  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
inline const ::AcFunDanmu::Im::Basic_User& Cloud_Message_GroupMember::_internal_user() const {
  const ::AcFunDanmu::Im::Basic_User* p = user_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic_User&>(
      ::AcFunDanmu::Im::_Basic_User_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic_User& Cloud_Message_GroupMember::user() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupMember.user)
  return _internal_user();
}
inline void Cloud_Message_GroupMember::unsafe_arena_set_allocated_user(
    ::AcFunDanmu::Im::Basic_User* user) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_);
  }
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupMember.user)
}
inline ::AcFunDanmu::Im::Basic_User* Cloud_Message_GroupMember::release_user() {
  
  ::AcFunDanmu::Im::Basic_User* temp = user_;
  user_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::Basic_User* Cloud_Message_GroupMember::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupMember.user)
  
  ::AcFunDanmu::Im::Basic_User* temp = user_;
  user_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic_User* Cloud_Message_GroupMember::_internal_mutable_user() {
  
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic_User>(GetArena());
    user_ = p;
  }
  return user_;
}
inline ::AcFunDanmu::Im::Basic_User* Cloud_Message_GroupMember::mutable_user() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupMember.user)
  return _internal_mutable_user();
}
inline void Cloud_Message_GroupMember::set_allocated_user(::AcFunDanmu::Im::Basic_User* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupMember.user)
}

// string nickname = 2;
inline void Cloud_Message_GroupMember::clear_nickname() {
  nickname_.ClearToEmpty();
}
inline const std::string& Cloud_Message_GroupMember::nickname() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupMember.nickname)
  return _internal_nickname();
}
inline void Cloud_Message_GroupMember::set_nickname(const std::string& value) {
  _internal_set_nickname(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupMember.nickname)
}
inline std::string* Cloud_Message_GroupMember::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupMember.nickname)
  return _internal_mutable_nickname();
}
inline const std::string& Cloud_Message_GroupMember::_internal_nickname() const {
  return nickname_.Get();
}
inline void Cloud_Message_GroupMember::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Message_GroupMember::set_nickname(std::string&& value) {
  
  nickname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Message.GroupMember.nickname)
}
inline void Cloud_Message_GroupMember::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Message.GroupMember.nickname)
}
inline void Cloud_Message_GroupMember::set_nickname(const char* value,
    size_t size) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Message.GroupMember.nickname)
}
inline std::string* Cloud_Message_GroupMember::_internal_mutable_nickname() {
  
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Message_GroupMember::release_nickname() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupMember.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Message_GroupMember::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupMember.nickname)
}

// bool antiDisturbing = 3;
inline void Cloud_Message_GroupMember::clear_antidisturbing() {
  antidisturbing_ = false;
}
inline bool Cloud_Message_GroupMember::_internal_antidisturbing() const {
  return antidisturbing_;
}
inline bool Cloud_Message_GroupMember::antidisturbing() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupMember.antiDisturbing)
  return _internal_antidisturbing();
}
inline void Cloud_Message_GroupMember::_internal_set_antidisturbing(bool value) {
  
  antidisturbing_ = value;
}
inline void Cloud_Message_GroupMember::set_antidisturbing(bool value) {
  _internal_set_antidisturbing(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupMember.antiDisturbing)
}

// .AcFunDanmu.Im.Cloud.Message.GroupMember.GroupMemberStatus status = 4;
inline void Cloud_Message_GroupMember::clear_status() {
  status_ = 0;
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupMember_GroupMemberStatus Cloud_Message_GroupMember::_internal_status() const {
  return static_cast< ::AcFunDanmu::Im::Cloud_Message_GroupMember_GroupMemberStatus >(status_);
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupMember_GroupMemberStatus Cloud_Message_GroupMember::status() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupMember.status)
  return _internal_status();
}
inline void Cloud_Message_GroupMember::_internal_set_status(::AcFunDanmu::Im::Cloud_Message_GroupMember_GroupMemberStatus value) {
  
  status_ = value;
}
inline void Cloud_Message_GroupMember::set_status(::AcFunDanmu::Im::Cloud_Message_GroupMember_GroupMemberStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupMember.status)
}

// int64 inviterId = 5;
inline void Cloud_Message_GroupMember::clear_inviterid() {
  inviterid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Cloud_Message_GroupMember::_internal_inviterid() const {
  return inviterid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Cloud_Message_GroupMember::inviterid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupMember.inviterId)
  return _internal_inviterid();
}
inline void Cloud_Message_GroupMember::_internal_set_inviterid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  inviterid_ = value;
}
inline void Cloud_Message_GroupMember::set_inviterid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_inviterid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupMember.inviterId)
}

// int64 joinTime = 6;
inline void Cloud_Message_GroupMember::clear_jointime() {
  jointime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Cloud_Message_GroupMember::_internal_jointime() const {
  return jointime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Cloud_Message_GroupMember::jointime() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupMember.joinTime)
  return _internal_jointime();
}
inline void Cloud_Message_GroupMember::_internal_set_jointime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  jointime_ = value;
}
inline void Cloud_Message_GroupMember::set_jointime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_jointime(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupMember.joinTime)
}

// int64 createTime = 7;
inline void Cloud_Message_GroupMember::clear_createtime() {
  createtime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Cloud_Message_GroupMember::_internal_createtime() const {
  return createtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Cloud_Message_GroupMember::createtime() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupMember.createTime)
  return _internal_createtime();
}
inline void Cloud_Message_GroupMember::_internal_set_createtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  createtime_ = value;
}
inline void Cloud_Message_GroupMember::set_createtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_createtime(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupMember.createTime)
}

// int64 updateTime = 8;
inline void Cloud_Message_GroupMember::clear_updatetime() {
  updatetime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Cloud_Message_GroupMember::_internal_updatetime() const {
  return updatetime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Cloud_Message_GroupMember::updatetime() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupMember.updateTime)
  return _internal_updatetime();
}
inline void Cloud_Message_GroupMember::_internal_set_updatetime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  updatetime_ = value;
}
inline void Cloud_Message_GroupMember::set_updatetime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_updatetime(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupMember.updateTime)
}

// .AcFunDanmu.Im.Cloud.Message.GroupMember.GroupMemberRole role = 9;
inline void Cloud_Message_GroupMember::clear_role() {
  role_ = 0;
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupMember_GroupMemberRole Cloud_Message_GroupMember::_internal_role() const {
  return static_cast< ::AcFunDanmu::Im::Cloud_Message_GroupMember_GroupMemberRole >(role_);
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupMember_GroupMemberRole Cloud_Message_GroupMember::role() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupMember.role)
  return _internal_role();
}
inline void Cloud_Message_GroupMember::_internal_set_role(::AcFunDanmu::Im::Cloud_Message_GroupMember_GroupMemberRole value) {
  
  role_ = value;
}
inline void Cloud_Message_GroupMember::set_role(::AcFunDanmu::Im::Cloud_Message_GroupMember_GroupMemberRole value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupMember.role)
}

// .AcFunDanmu.Im.Cloud.Message.GroupFindType findType = 10;
inline void Cloud_Message_GroupMember::clear_findtype() {
  findtype_ = 0;
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupFindType Cloud_Message_GroupMember::_internal_findtype() const {
  return static_cast< ::AcFunDanmu::Im::Cloud_Message_GroupFindType >(findtype_);
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupFindType Cloud_Message_GroupMember::findtype() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupMember.findType)
  return _internal_findtype();
}
inline void Cloud_Message_GroupMember::_internal_set_findtype(::AcFunDanmu::Im::Cloud_Message_GroupFindType value) {
  
  findtype_ = value;
}
inline void Cloud_Message_GroupMember::set_findtype(::AcFunDanmu::Im::Cloud_Message_GroupFindType value) {
  _internal_set_findtype(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupMember.findType)
}

// -------------------------------------------------------------------

// Cloud_Message_GroupInfo

// .AcFunDanmu.Im.Cloud.Message.GroupBasicInfo basicInfo = 1;
inline bool Cloud_Message_GroupInfo::_internal_has_basicinfo() const {
  return this != internal_default_instance() && basicinfo_ != nullptr;
}
inline bool Cloud_Message_GroupInfo::has_basicinfo() const {
  return _internal_has_basicinfo();
}
inline void Cloud_Message_GroupInfo::clear_basicinfo() {
  if (GetArena() == nullptr && basicinfo_ != nullptr) {
    delete basicinfo_;
  }
  basicinfo_ = nullptr;
}
inline const ::AcFunDanmu::Im::Cloud_Message_GroupBasicInfo& Cloud_Message_GroupInfo::_internal_basicinfo() const {
  const ::AcFunDanmu::Im::Cloud_Message_GroupBasicInfo* p = basicinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Cloud_Message_GroupBasicInfo&>(
      ::AcFunDanmu::Im::_Cloud_Message_GroupBasicInfo_default_instance_);
}
inline const ::AcFunDanmu::Im::Cloud_Message_GroupBasicInfo& Cloud_Message_GroupInfo::basicinfo() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupInfo.basicInfo)
  return _internal_basicinfo();
}
inline void Cloud_Message_GroupInfo::unsafe_arena_set_allocated_basicinfo(
    ::AcFunDanmu::Im::Cloud_Message_GroupBasicInfo* basicinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(basicinfo_);
  }
  basicinfo_ = basicinfo;
  if (basicinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupInfo.basicInfo)
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupBasicInfo* Cloud_Message_GroupInfo::release_basicinfo() {
  
  ::AcFunDanmu::Im::Cloud_Message_GroupBasicInfo* temp = basicinfo_;
  basicinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupBasicInfo* Cloud_Message_GroupInfo::unsafe_arena_release_basicinfo() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupInfo.basicInfo)
  
  ::AcFunDanmu::Im::Cloud_Message_GroupBasicInfo* temp = basicinfo_;
  basicinfo_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupBasicInfo* Cloud_Message_GroupInfo::_internal_mutable_basicinfo() {
  
  if (basicinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_GroupBasicInfo>(GetArena());
    basicinfo_ = p;
  }
  return basicinfo_;
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupBasicInfo* Cloud_Message_GroupInfo::mutable_basicinfo() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupInfo.basicInfo)
  return _internal_mutable_basicinfo();
}
inline void Cloud_Message_GroupInfo::set_allocated_basicinfo(::AcFunDanmu::Im::Cloud_Message_GroupBasicInfo* basicinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete basicinfo_;
  }
  if (basicinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(basicinfo);
    if (message_arena != submessage_arena) {
      basicinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, basicinfo, submessage_arena);
    }
    
  } else {
    
  }
  basicinfo_ = basicinfo;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupInfo.basicInfo)
}

// .AcFunDanmu.Im.Cloud.Message.GroupMemberBriefInfo groupMemberBriefInfo = 2;
inline bool Cloud_Message_GroupInfo::_internal_has_groupmemberbriefinfo() const {
  return this != internal_default_instance() && groupmemberbriefinfo_ != nullptr;
}
inline bool Cloud_Message_GroupInfo::has_groupmemberbriefinfo() const {
  return _internal_has_groupmemberbriefinfo();
}
inline void Cloud_Message_GroupInfo::clear_groupmemberbriefinfo() {
  if (GetArena() == nullptr && groupmemberbriefinfo_ != nullptr) {
    delete groupmemberbriefinfo_;
  }
  groupmemberbriefinfo_ = nullptr;
}
inline const ::AcFunDanmu::Im::Cloud_Message_GroupMemberBriefInfo& Cloud_Message_GroupInfo::_internal_groupmemberbriefinfo() const {
  const ::AcFunDanmu::Im::Cloud_Message_GroupMemberBriefInfo* p = groupmemberbriefinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Cloud_Message_GroupMemberBriefInfo&>(
      ::AcFunDanmu::Im::_Cloud_Message_GroupMemberBriefInfo_default_instance_);
}
inline const ::AcFunDanmu::Im::Cloud_Message_GroupMemberBriefInfo& Cloud_Message_GroupInfo::groupmemberbriefinfo() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupInfo.groupMemberBriefInfo)
  return _internal_groupmemberbriefinfo();
}
inline void Cloud_Message_GroupInfo::unsafe_arena_set_allocated_groupmemberbriefinfo(
    ::AcFunDanmu::Im::Cloud_Message_GroupMemberBriefInfo* groupmemberbriefinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(groupmemberbriefinfo_);
  }
  groupmemberbriefinfo_ = groupmemberbriefinfo;
  if (groupmemberbriefinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupInfo.groupMemberBriefInfo)
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupMemberBriefInfo* Cloud_Message_GroupInfo::release_groupmemberbriefinfo() {
  
  ::AcFunDanmu::Im::Cloud_Message_GroupMemberBriefInfo* temp = groupmemberbriefinfo_;
  groupmemberbriefinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupMemberBriefInfo* Cloud_Message_GroupInfo::unsafe_arena_release_groupmemberbriefinfo() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupInfo.groupMemberBriefInfo)
  
  ::AcFunDanmu::Im::Cloud_Message_GroupMemberBriefInfo* temp = groupmemberbriefinfo_;
  groupmemberbriefinfo_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupMemberBriefInfo* Cloud_Message_GroupInfo::_internal_mutable_groupmemberbriefinfo() {
  
  if (groupmemberbriefinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Cloud_Message_GroupMemberBriefInfo>(GetArena());
    groupmemberbriefinfo_ = p;
  }
  return groupmemberbriefinfo_;
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupMemberBriefInfo* Cloud_Message_GroupInfo::mutable_groupmemberbriefinfo() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupInfo.groupMemberBriefInfo)
  return _internal_mutable_groupmemberbriefinfo();
}
inline void Cloud_Message_GroupInfo::set_allocated_groupmemberbriefinfo(::AcFunDanmu::Im::Cloud_Message_GroupMemberBriefInfo* groupmemberbriefinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete groupmemberbriefinfo_;
  }
  if (groupmemberbriefinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(groupmemberbriefinfo);
    if (message_arena != submessage_arena) {
      groupmemberbriefinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, groupmemberbriefinfo, submessage_arena);
    }
    
  } else {
    
  }
  groupmemberbriefinfo_ = groupmemberbriefinfo;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupInfo.groupMemberBriefInfo)
}

// -------------------------------------------------------------------

// Cloud_Message_GroupBasicInfo

// string groupId = 1;
inline void Cloud_Message_GroupBasicInfo::clear_groupid() {
  groupid_.ClearToEmpty();
}
inline const std::string& Cloud_Message_GroupBasicInfo::groupid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupBasicInfo.groupId)
  return _internal_groupid();
}
inline void Cloud_Message_GroupBasicInfo::set_groupid(const std::string& value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupBasicInfo.groupId)
}
inline std::string* Cloud_Message_GroupBasicInfo::mutable_groupid() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupBasicInfo.groupId)
  return _internal_mutable_groupid();
}
inline const std::string& Cloud_Message_GroupBasicInfo::_internal_groupid() const {
  return groupid_.Get();
}
inline void Cloud_Message_GroupBasicInfo::_internal_set_groupid(const std::string& value) {
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Message_GroupBasicInfo::set_groupid(std::string&& value) {
  
  groupid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Message.GroupBasicInfo.groupId)
}
inline void Cloud_Message_GroupBasicInfo::set_groupid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Message.GroupBasicInfo.groupId)
}
inline void Cloud_Message_GroupBasicInfo::set_groupid(const char* value,
    size_t size) {
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Message.GroupBasicInfo.groupId)
}
inline std::string* Cloud_Message_GroupBasicInfo::_internal_mutable_groupid() {
  
  return groupid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Message_GroupBasicInfo::release_groupid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupBasicInfo.groupId)
  return groupid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Message_GroupBasicInfo::set_allocated_groupid(std::string* groupid) {
  if (groupid != nullptr) {
    
  } else {
    
  }
  groupid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), groupid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupBasicInfo.groupId)
}

// string groupName = 2;
inline void Cloud_Message_GroupBasicInfo::clear_groupname() {
  groupname_.ClearToEmpty();
}
inline const std::string& Cloud_Message_GroupBasicInfo::groupname() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupBasicInfo.groupName)
  return _internal_groupname();
}
inline void Cloud_Message_GroupBasicInfo::set_groupname(const std::string& value) {
  _internal_set_groupname(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupBasicInfo.groupName)
}
inline std::string* Cloud_Message_GroupBasicInfo::mutable_groupname() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupBasicInfo.groupName)
  return _internal_mutable_groupname();
}
inline const std::string& Cloud_Message_GroupBasicInfo::_internal_groupname() const {
  return groupname_.Get();
}
inline void Cloud_Message_GroupBasicInfo::_internal_set_groupname(const std::string& value) {
  
  groupname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Message_GroupBasicInfo::set_groupname(std::string&& value) {
  
  groupname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Message.GroupBasicInfo.groupName)
}
inline void Cloud_Message_GroupBasicInfo::set_groupname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  groupname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Message.GroupBasicInfo.groupName)
}
inline void Cloud_Message_GroupBasicInfo::set_groupname(const char* value,
    size_t size) {
  
  groupname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Message.GroupBasicInfo.groupName)
}
inline std::string* Cloud_Message_GroupBasicInfo::_internal_mutable_groupname() {
  
  return groupname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Message_GroupBasicInfo::release_groupname() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupBasicInfo.groupName)
  return groupname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Message_GroupBasicInfo::set_allocated_groupname(std::string* groupname) {
  if (groupname != nullptr) {
    
  } else {
    
  }
  groupname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), groupname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupBasicInfo.groupName)
}

// .AcFunDanmu.Im.Basic.User admin = 3;
inline bool Cloud_Message_GroupBasicInfo::_internal_has_admin() const {
  return this != internal_default_instance() && admin_ != nullptr;
}
inline bool Cloud_Message_GroupBasicInfo::has_admin() const {
  return _internal_has_admin();
}
inline void Cloud_Message_GroupBasicInfo::clear_admin() {
  if (GetArena() == nullptr && admin_ != nullptr) {
    delete admin_;
  }
  admin_ = nullptr;
}
inline const ::AcFunDanmu::Im::Basic_User& Cloud_Message_GroupBasicInfo::_internal_admin() const {
  const ::AcFunDanmu::Im::Basic_User* p = admin_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic_User&>(
      ::AcFunDanmu::Im::_Basic_User_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic_User& Cloud_Message_GroupBasicInfo::admin() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupBasicInfo.admin)
  return _internal_admin();
}
inline void Cloud_Message_GroupBasicInfo::unsafe_arena_set_allocated_admin(
    ::AcFunDanmu::Im::Basic_User* admin) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(admin_);
  }
  admin_ = admin;
  if (admin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupBasicInfo.admin)
}
inline ::AcFunDanmu::Im::Basic_User* Cloud_Message_GroupBasicInfo::release_admin() {
  
  ::AcFunDanmu::Im::Basic_User* temp = admin_;
  admin_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::Basic_User* Cloud_Message_GroupBasicInfo::unsafe_arena_release_admin() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupBasicInfo.admin)
  
  ::AcFunDanmu::Im::Basic_User* temp = admin_;
  admin_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic_User* Cloud_Message_GroupBasicInfo::_internal_mutable_admin() {
  
  if (admin_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic_User>(GetArena());
    admin_ = p;
  }
  return admin_;
}
inline ::AcFunDanmu::Im::Basic_User* Cloud_Message_GroupBasicInfo::mutable_admin() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupBasicInfo.admin)
  return _internal_mutable_admin();
}
inline void Cloud_Message_GroupBasicInfo::set_allocated_admin(::AcFunDanmu::Im::Basic_User* admin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete admin_;
  }
  if (admin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(admin);
    if (message_arena != submessage_arena) {
      admin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, admin, submessage_arena);
    }
    
  } else {
    
  }
  admin_ = admin;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupBasicInfo.admin)
}

// .AcFunDanmu.Im.Cloud.Message.GroupStatus groupStatus = 4;
inline void Cloud_Message_GroupBasicInfo::clear_groupstatus() {
  groupstatus_ = 0;
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupStatus Cloud_Message_GroupBasicInfo::_internal_groupstatus() const {
  return static_cast< ::AcFunDanmu::Im::Cloud_Message_GroupStatus >(groupstatus_);
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupStatus Cloud_Message_GroupBasicInfo::groupstatus() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupBasicInfo.groupStatus)
  return _internal_groupstatus();
}
inline void Cloud_Message_GroupBasicInfo::_internal_set_groupstatus(::AcFunDanmu::Im::Cloud_Message_GroupStatus value) {
  
  groupstatus_ = value;
}
inline void Cloud_Message_GroupBasicInfo::set_groupstatus(::AcFunDanmu::Im::Cloud_Message_GroupStatus value) {
  _internal_set_groupstatus(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupBasicInfo.groupStatus)
}

// string description = 5;
inline void Cloud_Message_GroupBasicInfo::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& Cloud_Message_GroupBasicInfo::description() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupBasicInfo.description)
  return _internal_description();
}
inline void Cloud_Message_GroupBasicInfo::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupBasicInfo.description)
}
inline std::string* Cloud_Message_GroupBasicInfo::mutable_description() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupBasicInfo.description)
  return _internal_mutable_description();
}
inline const std::string& Cloud_Message_GroupBasicInfo::_internal_description() const {
  return description_.Get();
}
inline void Cloud_Message_GroupBasicInfo::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Message_GroupBasicInfo::set_description(std::string&& value) {
  
  description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Message.GroupBasicInfo.description)
}
inline void Cloud_Message_GroupBasicInfo::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Message.GroupBasicInfo.description)
}
inline void Cloud_Message_GroupBasicInfo::set_description(const char* value,
    size_t size) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Message.GroupBasicInfo.description)
}
inline std::string* Cloud_Message_GroupBasicInfo::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Message_GroupBasicInfo::release_description() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.GroupBasicInfo.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Message_GroupBasicInfo::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.GroupBasicInfo.description)
}

// .AcFunDanmu.Im.Cloud.Message.JoinNeedPermissionType joinNeedPermission = 6;
inline void Cloud_Message_GroupBasicInfo::clear_joinneedpermission() {
  joinneedpermission_ = 0;
}
inline ::AcFunDanmu::Im::Cloud_Message_JoinNeedPermissionType Cloud_Message_GroupBasicInfo::_internal_joinneedpermission() const {
  return static_cast< ::AcFunDanmu::Im::Cloud_Message_JoinNeedPermissionType >(joinneedpermission_);
}
inline ::AcFunDanmu::Im::Cloud_Message_JoinNeedPermissionType Cloud_Message_GroupBasicInfo::joinneedpermission() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupBasicInfo.joinNeedPermission)
  return _internal_joinneedpermission();
}
inline void Cloud_Message_GroupBasicInfo::_internal_set_joinneedpermission(::AcFunDanmu::Im::Cloud_Message_JoinNeedPermissionType value) {
  
  joinneedpermission_ = value;
}
inline void Cloud_Message_GroupBasicInfo::set_joinneedpermission(::AcFunDanmu::Im::Cloud_Message_JoinNeedPermissionType value) {
  _internal_set_joinneedpermission(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupBasicInfo.joinNeedPermission)
}

// int64 createTime = 7;
inline void Cloud_Message_GroupBasicInfo::clear_createtime() {
  createtime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Cloud_Message_GroupBasicInfo::_internal_createtime() const {
  return createtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Cloud_Message_GroupBasicInfo::createtime() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupBasicInfo.createTime)
  return _internal_createtime();
}
inline void Cloud_Message_GroupBasicInfo::_internal_set_createtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  createtime_ = value;
}
inline void Cloud_Message_GroupBasicInfo::set_createtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_createtime(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupBasicInfo.createTime)
}

// int64 updateTime = 8;
inline void Cloud_Message_GroupBasicInfo::clear_updatetime() {
  updatetime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Cloud_Message_GroupBasicInfo::_internal_updatetime() const {
  return updatetime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Cloud_Message_GroupBasicInfo::updatetime() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupBasicInfo.updateTime)
  return _internal_updatetime();
}
inline void Cloud_Message_GroupBasicInfo::_internal_set_updatetime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  updatetime_ = value;
}
inline void Cloud_Message_GroupBasicInfo::set_updatetime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_updatetime(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupBasicInfo.updateTime)
}

// .AcFunDanmu.Im.Cloud.Message.GroupType groupType = 9;
inline void Cloud_Message_GroupBasicInfo::clear_grouptype() {
  grouptype_ = 0;
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupType Cloud_Message_GroupBasicInfo::_internal_grouptype() const {
  return static_cast< ::AcFunDanmu::Im::Cloud_Message_GroupType >(grouptype_);
}
inline ::AcFunDanmu::Im::Cloud_Message_GroupType Cloud_Message_GroupBasicInfo::grouptype() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupBasicInfo.groupType)
  return _internal_grouptype();
}
inline void Cloud_Message_GroupBasicInfo::_internal_set_grouptype(::AcFunDanmu::Im::Cloud_Message_GroupType value) {
  
  grouptype_ = value;
}
inline void Cloud_Message_GroupBasicInfo::set_grouptype(::AcFunDanmu::Im::Cloud_Message_GroupType value) {
  _internal_set_grouptype(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupBasicInfo.groupType)
}

// .AcFunDanmu.Im.Cloud.Message.ForbiddenState forbiddenState = 10;
inline void Cloud_Message_GroupBasicInfo::clear_forbiddenstate() {
  forbiddenstate_ = 0;
}
inline ::AcFunDanmu::Im::Cloud_Message_ForbiddenState Cloud_Message_GroupBasicInfo::_internal_forbiddenstate() const {
  return static_cast< ::AcFunDanmu::Im::Cloud_Message_ForbiddenState >(forbiddenstate_);
}
inline ::AcFunDanmu::Im::Cloud_Message_ForbiddenState Cloud_Message_GroupBasicInfo::forbiddenstate() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupBasicInfo.forbiddenState)
  return _internal_forbiddenstate();
}
inline void Cloud_Message_GroupBasicInfo::_internal_set_forbiddenstate(::AcFunDanmu::Im::Cloud_Message_ForbiddenState value) {
  
  forbiddenstate_ = value;
}
inline void Cloud_Message_GroupBasicInfo::set_forbiddenstate(::AcFunDanmu::Im::Cloud_Message_ForbiddenState value) {
  _internal_set_forbiddenstate(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupBasicInfo.forbiddenState)
}

// -------------------------------------------------------------------

// Cloud_Message_GroupMemberBriefInfo

// int32 memberCount = 1;
inline void Cloud_Message_GroupMemberBriefInfo::clear_membercount() {
  membercount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Cloud_Message_GroupMemberBriefInfo::_internal_membercount() const {
  return membercount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Cloud_Message_GroupMemberBriefInfo::membercount() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupMemberBriefInfo.memberCount)
  return _internal_membercount();
}
inline void Cloud_Message_GroupMemberBriefInfo::_internal_set_membercount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  membercount_ = value;
}
inline void Cloud_Message_GroupMemberBriefInfo::set_membercount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_membercount(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupMemberBriefInfo.memberCount)
}

// repeated .AcFunDanmu.Im.Basic.User topMembers = 2;
inline int Cloud_Message_GroupMemberBriefInfo::_internal_topmembers_size() const {
  return topmembers_.size();
}
inline int Cloud_Message_GroupMemberBriefInfo::topmembers_size() const {
  return _internal_topmembers_size();
}
inline void Cloud_Message_GroupMemberBriefInfo::clear_topmembers() {
  topmembers_.Clear();
}
inline ::AcFunDanmu::Im::Basic_User* Cloud_Message_GroupMemberBriefInfo::mutable_topmembers(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.GroupMemberBriefInfo.topMembers)
  return topmembers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_User >*
Cloud_Message_GroupMemberBriefInfo::mutable_topmembers() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.Im.Cloud.Message.GroupMemberBriefInfo.topMembers)
  return &topmembers_;
}
inline const ::AcFunDanmu::Im::Basic_User& Cloud_Message_GroupMemberBriefInfo::_internal_topmembers(int index) const {
  return topmembers_.Get(index);
}
inline const ::AcFunDanmu::Im::Basic_User& Cloud_Message_GroupMemberBriefInfo::topmembers(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupMemberBriefInfo.topMembers)
  return _internal_topmembers(index);
}
inline ::AcFunDanmu::Im::Basic_User* Cloud_Message_GroupMemberBriefInfo::_internal_add_topmembers() {
  return topmembers_.Add();
}
inline ::AcFunDanmu::Im::Basic_User* Cloud_Message_GroupMemberBriefInfo::add_topmembers() {
  // @@protoc_insertion_point(field_add:AcFunDanmu.Im.Cloud.Message.GroupMemberBriefInfo.topMembers)
  return _internal_add_topmembers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::Im::Basic_User >&
Cloud_Message_GroupMemberBriefInfo::topmembers() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.Im.Cloud.Message.GroupMemberBriefInfo.topMembers)
  return topmembers_;
}

// int64 lastUpdateTime = 3;
inline void Cloud_Message_GroupMemberBriefInfo::clear_lastupdatetime() {
  lastupdatetime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Cloud_Message_GroupMemberBriefInfo::_internal_lastupdatetime() const {
  return lastupdatetime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Cloud_Message_GroupMemberBriefInfo::lastupdatetime() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.GroupMemberBriefInfo.lastUpdateTime)
  return _internal_lastupdatetime();
}
inline void Cloud_Message_GroupMemberBriefInfo::_internal_set_lastupdatetime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  lastupdatetime_ = value;
}
inline void Cloud_Message_GroupMemberBriefInfo::set_lastupdatetime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_lastupdatetime(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.GroupMemberBriefInfo.lastUpdateTime)
}

// -------------------------------------------------------------------

// Cloud_Message_ImcPassThroughRequest

// .AcFunDanmu.Im.ImMessage.ChatTarget chatTarget = 1;
inline bool Cloud_Message_ImcPassThroughRequest::_internal_has_chattarget() const {
  return this != internal_default_instance() && chattarget_ != nullptr;
}
inline bool Cloud_Message_ImcPassThroughRequest::has_chattarget() const {
  return _internal_has_chattarget();
}
inline void Cloud_Message_ImcPassThroughRequest::clear_chattarget() {
  if (GetArena() == nullptr && chattarget_ != nullptr) {
    delete chattarget_;
  }
  chattarget_ = nullptr;
}
inline const ::AcFunDanmu::Im::ImMessage_ChatTarget& Cloud_Message_ImcPassThroughRequest::_internal_chattarget() const {
  const ::AcFunDanmu::Im::ImMessage_ChatTarget* p = chattarget_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::ImMessage_ChatTarget&>(
      ::AcFunDanmu::Im::_ImMessage_ChatTarget_default_instance_);
}
inline const ::AcFunDanmu::Im::ImMessage_ChatTarget& Cloud_Message_ImcPassThroughRequest::chattarget() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.ImcPassThroughRequest.chatTarget)
  return _internal_chattarget();
}
inline void Cloud_Message_ImcPassThroughRequest::unsafe_arena_set_allocated_chattarget(
    ::AcFunDanmu::Im::ImMessage_ChatTarget* chattarget) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chattarget_);
  }
  chattarget_ = chattarget;
  if (chattarget) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Message.ImcPassThroughRequest.chatTarget)
}
inline ::AcFunDanmu::Im::ImMessage_ChatTarget* Cloud_Message_ImcPassThroughRequest::release_chattarget() {
  
  ::AcFunDanmu::Im::ImMessage_ChatTarget* temp = chattarget_;
  chattarget_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::ImMessage_ChatTarget* Cloud_Message_ImcPassThroughRequest::unsafe_arena_release_chattarget() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.ImcPassThroughRequest.chatTarget)
  
  ::AcFunDanmu::Im::ImMessage_ChatTarget* temp = chattarget_;
  chattarget_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::ImMessage_ChatTarget* Cloud_Message_ImcPassThroughRequest::_internal_mutable_chattarget() {
  
  if (chattarget_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_ChatTarget>(GetArena());
    chattarget_ = p;
  }
  return chattarget_;
}
inline ::AcFunDanmu::Im::ImMessage_ChatTarget* Cloud_Message_ImcPassThroughRequest::mutable_chattarget() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.ImcPassThroughRequest.chatTarget)
  return _internal_mutable_chattarget();
}
inline void Cloud_Message_ImcPassThroughRequest::set_allocated_chattarget(::AcFunDanmu::Im::ImMessage_ChatTarget* chattarget) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete chattarget_;
  }
  if (chattarget) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(chattarget);
    if (message_arena != submessage_arena) {
      chattarget = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chattarget, submessage_arena);
    }
    
  } else {
    
  }
  chattarget_ = chattarget;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.ImcPassThroughRequest.chatTarget)
}

// bytes content = 2;
inline void Cloud_Message_ImcPassThroughRequest::clear_content() {
  content_.ClearToEmpty();
}
inline const std::string& Cloud_Message_ImcPassThroughRequest::content() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.ImcPassThroughRequest.content)
  return _internal_content();
}
inline void Cloud_Message_ImcPassThroughRequest::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.ImcPassThroughRequest.content)
}
inline std::string* Cloud_Message_ImcPassThroughRequest::mutable_content() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.ImcPassThroughRequest.content)
  return _internal_mutable_content();
}
inline const std::string& Cloud_Message_ImcPassThroughRequest::_internal_content() const {
  return content_.Get();
}
inline void Cloud_Message_ImcPassThroughRequest::_internal_set_content(const std::string& value) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Message_ImcPassThroughRequest::set_content(std::string&& value) {
  
  content_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Message.ImcPassThroughRequest.content)
}
inline void Cloud_Message_ImcPassThroughRequest::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Message.ImcPassThroughRequest.content)
}
inline void Cloud_Message_ImcPassThroughRequest::set_content(const void* value,
    size_t size) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Message.ImcPassThroughRequest.content)
}
inline std::string* Cloud_Message_ImcPassThroughRequest::_internal_mutable_content() {
  
  return content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Message_ImcPassThroughRequest::release_content() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.ImcPassThroughRequest.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Message_ImcPassThroughRequest::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.ImcPassThroughRequest.content)
}

// int32 contentType = 3;
inline void Cloud_Message_ImcPassThroughRequest::clear_contenttype() {
  contenttype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Cloud_Message_ImcPassThroughRequest::_internal_contenttype() const {
  return contenttype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Cloud_Message_ImcPassThroughRequest::contenttype() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.ImcPassThroughRequest.contentType)
  return _internal_contenttype();
}
inline void Cloud_Message_ImcPassThroughRequest::_internal_set_contenttype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  contenttype_ = value;
}
inline void Cloud_Message_ImcPassThroughRequest::set_contenttype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_contenttype(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.ImcPassThroughRequest.contentType)
}

// -------------------------------------------------------------------

// Cloud_Message_ImcPassThroughResponse

// -------------------------------------------------------------------

// Cloud_Message_ImcPassThroughPush

// .AcFunDanmu.Im.ImMessage.ChatTarget chatTarget = 1;
inline bool Cloud_Message_ImcPassThroughPush::_internal_has_chattarget() const {
  return this != internal_default_instance() && chattarget_ != nullptr;
}
inline bool Cloud_Message_ImcPassThroughPush::has_chattarget() const {
  return _internal_has_chattarget();
}
inline void Cloud_Message_ImcPassThroughPush::clear_chattarget() {
  if (GetArena() == nullptr && chattarget_ != nullptr) {
    delete chattarget_;
  }
  chattarget_ = nullptr;
}
inline const ::AcFunDanmu::Im::ImMessage_ChatTarget& Cloud_Message_ImcPassThroughPush::_internal_chattarget() const {
  const ::AcFunDanmu::Im::ImMessage_ChatTarget* p = chattarget_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::ImMessage_ChatTarget&>(
      ::AcFunDanmu::Im::_ImMessage_ChatTarget_default_instance_);
}
inline const ::AcFunDanmu::Im::ImMessage_ChatTarget& Cloud_Message_ImcPassThroughPush::chattarget() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.ImcPassThroughPush.chatTarget)
  return _internal_chattarget();
}
inline void Cloud_Message_ImcPassThroughPush::unsafe_arena_set_allocated_chattarget(
    ::AcFunDanmu::Im::ImMessage_ChatTarget* chattarget) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chattarget_);
  }
  chattarget_ = chattarget;
  if (chattarget) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Message.ImcPassThroughPush.chatTarget)
}
inline ::AcFunDanmu::Im::ImMessage_ChatTarget* Cloud_Message_ImcPassThroughPush::release_chattarget() {
  
  ::AcFunDanmu::Im::ImMessage_ChatTarget* temp = chattarget_;
  chattarget_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::ImMessage_ChatTarget* Cloud_Message_ImcPassThroughPush::unsafe_arena_release_chattarget() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.ImcPassThroughPush.chatTarget)
  
  ::AcFunDanmu::Im::ImMessage_ChatTarget* temp = chattarget_;
  chattarget_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::ImMessage_ChatTarget* Cloud_Message_ImcPassThroughPush::_internal_mutable_chattarget() {
  
  if (chattarget_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::ImMessage_ChatTarget>(GetArena());
    chattarget_ = p;
  }
  return chattarget_;
}
inline ::AcFunDanmu::Im::ImMessage_ChatTarget* Cloud_Message_ImcPassThroughPush::mutable_chattarget() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.ImcPassThroughPush.chatTarget)
  return _internal_mutable_chattarget();
}
inline void Cloud_Message_ImcPassThroughPush::set_allocated_chattarget(::AcFunDanmu::Im::ImMessage_ChatTarget* chattarget) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete chattarget_;
  }
  if (chattarget) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(chattarget);
    if (message_arena != submessage_arena) {
      chattarget = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chattarget, submessage_arena);
    }
    
  } else {
    
  }
  chattarget_ = chattarget;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.ImcPassThroughPush.chatTarget)
}

// .AcFunDanmu.Im.Basic.User fromUser = 2;
inline bool Cloud_Message_ImcPassThroughPush::_internal_has_fromuser() const {
  return this != internal_default_instance() && fromuser_ != nullptr;
}
inline bool Cloud_Message_ImcPassThroughPush::has_fromuser() const {
  return _internal_has_fromuser();
}
inline void Cloud_Message_ImcPassThroughPush::clear_fromuser() {
  if (GetArena() == nullptr && fromuser_ != nullptr) {
    delete fromuser_;
  }
  fromuser_ = nullptr;
}
inline const ::AcFunDanmu::Im::Basic_User& Cloud_Message_ImcPassThroughPush::_internal_fromuser() const {
  const ::AcFunDanmu::Im::Basic_User* p = fromuser_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::Im::Basic_User&>(
      ::AcFunDanmu::Im::_Basic_User_default_instance_);
}
inline const ::AcFunDanmu::Im::Basic_User& Cloud_Message_ImcPassThroughPush::fromuser() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.ImcPassThroughPush.fromUser)
  return _internal_fromuser();
}
inline void Cloud_Message_ImcPassThroughPush::unsafe_arena_set_allocated_fromuser(
    ::AcFunDanmu::Im::Basic_User* fromuser) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fromuser_);
  }
  fromuser_ = fromuser;
  if (fromuser) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.Im.Cloud.Message.ImcPassThroughPush.fromUser)
}
inline ::AcFunDanmu::Im::Basic_User* Cloud_Message_ImcPassThroughPush::release_fromuser() {
  
  ::AcFunDanmu::Im::Basic_User* temp = fromuser_;
  fromuser_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::Im::Basic_User* Cloud_Message_ImcPassThroughPush::unsafe_arena_release_fromuser() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.ImcPassThroughPush.fromUser)
  
  ::AcFunDanmu::Im::Basic_User* temp = fromuser_;
  fromuser_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::Im::Basic_User* Cloud_Message_ImcPassThroughPush::_internal_mutable_fromuser() {
  
  if (fromuser_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::Im::Basic_User>(GetArena());
    fromuser_ = p;
  }
  return fromuser_;
}
inline ::AcFunDanmu::Im::Basic_User* Cloud_Message_ImcPassThroughPush::mutable_fromuser() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.ImcPassThroughPush.fromUser)
  return _internal_mutable_fromuser();
}
inline void Cloud_Message_ImcPassThroughPush::set_allocated_fromuser(::AcFunDanmu::Im::Basic_User* fromuser) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete fromuser_;
  }
  if (fromuser) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fromuser);
    if (message_arena != submessage_arena) {
      fromuser = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fromuser, submessage_arena);
    }
    
  } else {
    
  }
  fromuser_ = fromuser;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.ImcPassThroughPush.fromUser)
}

// bytes content = 3;
inline void Cloud_Message_ImcPassThroughPush::clear_content() {
  content_.ClearToEmpty();
}
inline const std::string& Cloud_Message_ImcPassThroughPush::content() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.ImcPassThroughPush.content)
  return _internal_content();
}
inline void Cloud_Message_ImcPassThroughPush::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.ImcPassThroughPush.content)
}
inline std::string* Cloud_Message_ImcPassThroughPush::mutable_content() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.Im.Cloud.Message.ImcPassThroughPush.content)
  return _internal_mutable_content();
}
inline const std::string& Cloud_Message_ImcPassThroughPush::_internal_content() const {
  return content_.Get();
}
inline void Cloud_Message_ImcPassThroughPush::_internal_set_content(const std::string& value) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cloud_Message_ImcPassThroughPush::set_content(std::string&& value) {
  
  content_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.Im.Cloud.Message.ImcPassThroughPush.content)
}
inline void Cloud_Message_ImcPassThroughPush::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.Im.Cloud.Message.ImcPassThroughPush.content)
}
inline void Cloud_Message_ImcPassThroughPush::set_content(const void* value,
    size_t size) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.Im.Cloud.Message.ImcPassThroughPush.content)
}
inline std::string* Cloud_Message_ImcPassThroughPush::_internal_mutable_content() {
  
  return content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cloud_Message_ImcPassThroughPush::release_content() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.Im.Cloud.Message.ImcPassThroughPush.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cloud_Message_ImcPassThroughPush::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.Im.Cloud.Message.ImcPassThroughPush.content)
}

// int32 contentType = 4;
inline void Cloud_Message_ImcPassThroughPush::clear_contenttype() {
  contenttype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Cloud_Message_ImcPassThroughPush::_internal_contenttype() const {
  return contenttype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Cloud_Message_ImcPassThroughPush::contenttype() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.ImcPassThroughPush.contentType)
  return _internal_contenttype();
}
inline void Cloud_Message_ImcPassThroughPush::_internal_set_contenttype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  contenttype_ = value;
}
inline void Cloud_Message_ImcPassThroughPush::set_contenttype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_contenttype(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.ImcPassThroughPush.contentType)
}

// -------------------------------------------------------------------

// Cloud_Message_InputtingContent

// int32 displayInterval = 1;
inline void Cloud_Message_InputtingContent::clear_displayinterval() {
  displayinterval_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Cloud_Message_InputtingContent::_internal_displayinterval() const {
  return displayinterval_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Cloud_Message_InputtingContent::displayinterval() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.Im.Cloud.Message.InputtingContent.displayInterval)
  return _internal_displayinterval();
}
inline void Cloud_Message_InputtingContent::_internal_set_displayinterval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  displayinterval_ = value;
}
inline void Cloud_Message_InputtingContent::set_displayinterval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_displayinterval(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.Im.Cloud.Message.InputtingContent.displayInterval)
}

// -------------------------------------------------------------------

// Cloud_Message

// -------------------------------------------------------------------

// Cloud

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Im
}  // namespace AcFunDanmu

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::AcFunDanmu::Im::Basic_PacketHeader_Flags> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::Im::Basic_PacketHeader_Flags>() {
  return ::AcFunDanmu::Im::Basic_PacketHeader_Flags_descriptor();
}
template <> struct is_proto_enum< ::AcFunDanmu::Im::Basic_PacketHeader_EncodingType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::Im::Basic_PacketHeader_EncodingType>() {
  return ::AcFunDanmu::Im::Basic_PacketHeader_EncodingType_descriptor();
}
template <> struct is_proto_enum< ::AcFunDanmu::Im::Basic_PacketHeader_EncryptionMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::Im::Basic_PacketHeader_EncryptionMode>() {
  return ::AcFunDanmu::Im::Basic_PacketHeader_EncryptionMode_descriptor();
}
template <> struct is_proto_enum< ::AcFunDanmu::Im::Basic_PacketHeader_Feature> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::Im::Basic_PacketHeader_Feature>() {
  return ::AcFunDanmu::Im::Basic_PacketHeader_Feature_descriptor();
}
template <> struct is_proto_enum< ::AcFunDanmu::Im::Basic_PingRequest_PingType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::Im::Basic_PingRequest_PingType>() {
  return ::AcFunDanmu::Im::Basic_PingRequest_PingType_descriptor();
}
template <> struct is_proto_enum< ::AcFunDanmu::Im::Basic_RegisterRequest_PresenceStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::Im::Basic_RegisterRequest_PresenceStatus>() {
  return ::AcFunDanmu::Im::Basic_RegisterRequest_PresenceStatus_descriptor();
}
template <> struct is_proto_enum< ::AcFunDanmu::Im::Basic_RegisterRequest_ActiveStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::Im::Basic_RegisterRequest_ActiveStatus>() {
  return ::AcFunDanmu::Im::Basic_RegisterRequest_ActiveStatus_descriptor();
}
template <> struct is_proto_enum< ::AcFunDanmu::Im::Basic_AccessPoint_AddressType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::Im::Basic_AccessPoint_AddressType>() {
  return ::AcFunDanmu::Im::Basic_AccessPoint_AddressType_descriptor();
}
template <> struct is_proto_enum< ::AcFunDanmu::Im::Basic_TokenInfo_TokenType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::Im::Basic_TokenInfo_TokenType>() {
  return ::AcFunDanmu::Im::Basic_TokenInfo_TokenType_descriptor();
}
template <> struct is_proto_enum< ::AcFunDanmu::Im::Basic_PushServiceToken_PushType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::Im::Basic_PushServiceToken_PushType>() {
  return ::AcFunDanmu::Im::Basic_PushServiceToken_PushType_descriptor();
}
template <> struct is_proto_enum< ::AcFunDanmu::Im::Basic_DeviceInfo_PlatformType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::Im::Basic_DeviceInfo_PlatformType>() {
  return ::AcFunDanmu::Im::Basic_DeviceInfo_PlatformType_descriptor();
}
template <> struct is_proto_enum< ::AcFunDanmu::Im::Basic_EnvInfo_NetworkType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::Im::Basic_EnvInfo_NetworkType>() {
  return ::AcFunDanmu::Im::Basic_EnvInfo_NetworkType_descriptor();
}
template <> struct is_proto_enum< ::AcFunDanmu::Im::Basic_SharePlatform> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::Im::Basic_SharePlatform>() {
  return ::AcFunDanmu::Im::Basic_SharePlatform_descriptor();
}
template <> struct is_proto_enum< ::AcFunDanmu::Im::Basic_ErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::Im::Basic_ErrorCode>() {
  return ::AcFunDanmu::Im::Basic_ErrorCode_descriptor();
}
template <> struct is_proto_enum< ::AcFunDanmu::Im::ImMessage_RemindBody_RemindType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::Im::ImMessage_RemindBody_RemindType>() {
  return ::AcFunDanmu::Im::ImMessage_RemindBody_RemindType_descriptor();
}
template <> struct is_proto_enum< ::AcFunDanmu::Im::ImMessage_MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::Im::ImMessage_MessageType>() {
  return ::AcFunDanmu::Im::ImMessage_MessageType_descriptor();
}
template <> struct is_proto_enum< ::AcFunDanmu::Im::ImMessage_KsUserRelationShip> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::Im::ImMessage_KsUserRelationShip>() {
  return ::AcFunDanmu::Im::ImMessage_KsUserRelationShip_descriptor();
}
template <> struct is_proto_enum< ::AcFunDanmu::Im::ImMessage_AccountType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::Im::ImMessage_AccountType>() {
  return ::AcFunDanmu::Im::ImMessage_AccountType_descriptor();
}
template <> struct is_proto_enum< ::AcFunDanmu::Im::ImMessage_ChatTargetType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::Im::ImMessage_ChatTargetType>() {
  return ::AcFunDanmu::Im::ImMessage_ChatTargetType_descriptor();
}
template <> struct is_proto_enum< ::AcFunDanmu::Im::ImMessage_SystemUser> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::Im::ImMessage_SystemUser>() {
  return ::AcFunDanmu::Im::ImMessage_SystemUser_descriptor();
}
template <> struct is_proto_enum< ::AcFunDanmu::Im::Cloud_Channel_UserAction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::Im::Cloud_Channel_UserAction>() {
  return ::AcFunDanmu::Im::Cloud_Channel_UserAction_descriptor();
}
template <> struct is_proto_enum< ::AcFunDanmu::Im::Cloud_Profile_UserOnlineStatus_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::Im::Cloud_Profile_UserOnlineStatus_Status>() {
  return ::AcFunDanmu::Im::Cloud_Profile_UserOnlineStatus_Status_descriptor();
}
template <> struct is_proto_enum< ::AcFunDanmu::Im::Cloud_Data_Update_KsImDataUpdateType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::Im::Cloud_Data_Update_KsImDataUpdateType>() {
  return ::AcFunDanmu::Im::Cloud_Data_Update_KsImDataUpdateType_descriptor();
}
template <> struct is_proto_enum< ::AcFunDanmu::Im::Cloud_Message_Emoticon_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::Im::Cloud_Message_Emoticon_Type>() {
  return ::AcFunDanmu::Im::Cloud_Message_Emoticon_Type_descriptor();
}
template <> struct is_proto_enum< ::AcFunDanmu::Im::Cloud_Message_GroupInvideResponse_InviteStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::Im::Cloud_Message_GroupInvideResponse_InviteStatus>() {
  return ::AcFunDanmu::Im::Cloud_Message_GroupInvideResponse_InviteStatus_descriptor();
}
template <> struct is_proto_enum< ::AcFunDanmu::Im::Cloud_Message_GroupJoinResponse_JoinStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::Im::Cloud_Message_GroupJoinResponse_JoinStatus>() {
  return ::AcFunDanmu::Im::Cloud_Message_GroupJoinResponse_JoinStatus_descriptor();
}
template <> struct is_proto_enum< ::AcFunDanmu::Im::Cloud_Message_GroupJoinRequestAckRequest_GroupJoinAckType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::Im::Cloud_Message_GroupJoinRequestAckRequest_GroupJoinAckType>() {
  return ::AcFunDanmu::Im::Cloud_Message_GroupJoinRequestAckRequest_GroupJoinAckType_descriptor();
}
template <> struct is_proto_enum< ::AcFunDanmu::Im::Cloud_Message_GroupMember_GroupMemberStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::Im::Cloud_Message_GroupMember_GroupMemberStatus>() {
  return ::AcFunDanmu::Im::Cloud_Message_GroupMember_GroupMemberStatus_descriptor();
}
template <> struct is_proto_enum< ::AcFunDanmu::Im::Cloud_Message_GroupMember_GroupMemberRole> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::Im::Cloud_Message_GroupMember_GroupMemberRole>() {
  return ::AcFunDanmu::Im::Cloud_Message_GroupMember_GroupMemberRole_descriptor();
}
template <> struct is_proto_enum< ::AcFunDanmu::Im::Cloud_Message_ImcMessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::Im::Cloud_Message_ImcMessageType>() {
  return ::AcFunDanmu::Im::Cloud_Message_ImcMessageType_descriptor();
}
template <> struct is_proto_enum< ::AcFunDanmu::Im::Cloud_Message_NoticeMetaType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::Im::Cloud_Message_NoticeMetaType>() {
  return ::AcFunDanmu::Im::Cloud_Message_NoticeMetaType_descriptor();
}
template <> struct is_proto_enum< ::AcFunDanmu::Im::Cloud_Message_GroupFindType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::Im::Cloud_Message_GroupFindType>() {
  return ::AcFunDanmu::Im::Cloud_Message_GroupFindType_descriptor();
}
template <> struct is_proto_enum< ::AcFunDanmu::Im::Cloud_Message_JoinRequestStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::Im::Cloud_Message_JoinRequestStatus>() {
  return ::AcFunDanmu::Im::Cloud_Message_JoinRequestStatus_descriptor();
}
template <> struct is_proto_enum< ::AcFunDanmu::Im::Cloud_Message_JoinNeedPermissionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::Im::Cloud_Message_JoinNeedPermissionType>() {
  return ::AcFunDanmu::Im::Cloud_Message_JoinNeedPermissionType_descriptor();
}
template <> struct is_proto_enum< ::AcFunDanmu::Im::Cloud_Message_GroupStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::Im::Cloud_Message_GroupStatus>() {
  return ::AcFunDanmu::Im::Cloud_Message_GroupStatus_descriptor();
}
template <> struct is_proto_enum< ::AcFunDanmu::Im::Cloud_Message_GroupType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::Im::Cloud_Message_GroupType>() {
  return ::AcFunDanmu::Im::Cloud_Message_GroupType_descriptor();
}
template <> struct is_proto_enum< ::AcFunDanmu::Im::Cloud_Message_ForbiddenState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::Im::Cloud_Message_ForbiddenState>() {
  return ::AcFunDanmu::Im::Cloud_Message_ForbiddenState_descriptor();
}
template <> struct is_proto_enum< ::AcFunDanmu::Im::Cloud_Message_PassThroughType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::Im::Cloud_Message_PassThroughType>() {
  return ::AcFunDanmu::Im::Cloud_Message_PassThroughType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Im_2eproto
