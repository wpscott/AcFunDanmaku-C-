// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ZtLiveUserIdentity.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ZtLiveUserIdentity_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ZtLiveUserIdentity_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ZtLiveUserIdentity_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ZtLiveUserIdentity_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ZtLiveUserIdentity_2eproto;
namespace AcFunDanmu {
class ZtLiveUserIdentity;
class ZtLiveUserIdentityDefaultTypeInternal;
extern ZtLiveUserIdentityDefaultTypeInternal _ZtLiveUserIdentity_default_instance_;
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::ZtLiveUserIdentity* Arena::CreateMaybeMessage<::AcFunDanmu::ZtLiveUserIdentity>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {

enum ZtLiveUserIdentity_ManagerType : int {
  ZtLiveUserIdentity_ManagerType_UNKNOWN_MANAGER_TYPE = 0,
  ZtLiveUserIdentity_ManagerType_NORMAL = 1,
  ZtLiveUserIdentity_ManagerType_ZtLiveUserIdentity_ManagerType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ZtLiveUserIdentity_ManagerType_ZtLiveUserIdentity_ManagerType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ZtLiveUserIdentity_ManagerType_IsValid(int value);
constexpr ZtLiveUserIdentity_ManagerType ZtLiveUserIdentity_ManagerType_ManagerType_MIN = ZtLiveUserIdentity_ManagerType_UNKNOWN_MANAGER_TYPE;
constexpr ZtLiveUserIdentity_ManagerType ZtLiveUserIdentity_ManagerType_ManagerType_MAX = ZtLiveUserIdentity_ManagerType_NORMAL;
constexpr int ZtLiveUserIdentity_ManagerType_ManagerType_ARRAYSIZE = ZtLiveUserIdentity_ManagerType_ManagerType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ZtLiveUserIdentity_ManagerType_descriptor();
template<typename T>
inline const std::string& ZtLiveUserIdentity_ManagerType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ZtLiveUserIdentity_ManagerType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ZtLiveUserIdentity_ManagerType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ZtLiveUserIdentity_ManagerType_descriptor(), enum_t_value);
}
inline bool ZtLiveUserIdentity_ManagerType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ZtLiveUserIdentity_ManagerType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ZtLiveUserIdentity_ManagerType>(
    ZtLiveUserIdentity_ManagerType_descriptor(), name, value);
}
// ===================================================================

class ZtLiveUserIdentity PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.ZtLiveUserIdentity) */ {
 public:
  inline ZtLiveUserIdentity() : ZtLiveUserIdentity(nullptr) {}
  virtual ~ZtLiveUserIdentity();

  ZtLiveUserIdentity(const ZtLiveUserIdentity& from);
  ZtLiveUserIdentity(ZtLiveUserIdentity&& from) noexcept
    : ZtLiveUserIdentity() {
    *this = ::std::move(from);
  }

  inline ZtLiveUserIdentity& operator=(const ZtLiveUserIdentity& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZtLiveUserIdentity& operator=(ZtLiveUserIdentity&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ZtLiveUserIdentity& default_instance();

  static inline const ZtLiveUserIdentity* internal_default_instance() {
    return reinterpret_cast<const ZtLiveUserIdentity*>(
               &_ZtLiveUserIdentity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ZtLiveUserIdentity& a, ZtLiveUserIdentity& b) {
    a.Swap(&b);
  }
  inline void Swap(ZtLiveUserIdentity* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZtLiveUserIdentity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ZtLiveUserIdentity* New() const final {
    return CreateMaybeMessage<ZtLiveUserIdentity>(nullptr);
  }

  ZtLiveUserIdentity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ZtLiveUserIdentity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ZtLiveUserIdentity& from);
  void MergeFrom(const ZtLiveUserIdentity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZtLiveUserIdentity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.ZtLiveUserIdentity";
  }
  protected:
  explicit ZtLiveUserIdentity(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ZtLiveUserIdentity_2eproto);
    return ::descriptor_table_ZtLiveUserIdentity_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ZtLiveUserIdentity_ManagerType ManagerType;
  static constexpr ManagerType UNKNOWN_MANAGER_TYPE =
    ZtLiveUserIdentity_ManagerType_UNKNOWN_MANAGER_TYPE;
  static constexpr ManagerType NORMAL =
    ZtLiveUserIdentity_ManagerType_NORMAL;
  static inline bool ManagerType_IsValid(int value) {
    return ZtLiveUserIdentity_ManagerType_IsValid(value);
  }
  static constexpr ManagerType ManagerType_MIN =
    ZtLiveUserIdentity_ManagerType_ManagerType_MIN;
  static constexpr ManagerType ManagerType_MAX =
    ZtLiveUserIdentity_ManagerType_ManagerType_MAX;
  static constexpr int ManagerType_ARRAYSIZE =
    ZtLiveUserIdentity_ManagerType_ManagerType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ManagerType_descriptor() {
    return ZtLiveUserIdentity_ManagerType_descriptor();
  }
  template<typename T>
  static inline const std::string& ManagerType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ManagerType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ManagerType_Name.");
    return ZtLiveUserIdentity_ManagerType_Name(enum_t_value);
  }
  static inline bool ManagerType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ManagerType* value) {
    return ZtLiveUserIdentity_ManagerType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kManagerTypeFieldNumber = 1,
  };
  // .AcFunDanmu.ZtLiveUserIdentity.ManagerType managerType = 1;
  void clear_managertype();
  ::AcFunDanmu::ZtLiveUserIdentity_ManagerType managertype() const;
  void set_managertype(::AcFunDanmu::ZtLiveUserIdentity_ManagerType value);
  private:
  ::AcFunDanmu::ZtLiveUserIdentity_ManagerType _internal_managertype() const;
  void _internal_set_managertype(::AcFunDanmu::ZtLiveUserIdentity_ManagerType value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.ZtLiveUserIdentity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int managertype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ZtLiveUserIdentity_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ZtLiveUserIdentity

// .AcFunDanmu.ZtLiveUserIdentity.ManagerType managerType = 1;
inline void ZtLiveUserIdentity::clear_managertype() {
  managertype_ = 0;
}
inline ::AcFunDanmu::ZtLiveUserIdentity_ManagerType ZtLiveUserIdentity::_internal_managertype() const {
  return static_cast< ::AcFunDanmu::ZtLiveUserIdentity_ManagerType >(managertype_);
}
inline ::AcFunDanmu::ZtLiveUserIdentity_ManagerType ZtLiveUserIdentity::managertype() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.ZtLiveUserIdentity.managerType)
  return _internal_managertype();
}
inline void ZtLiveUserIdentity::_internal_set_managertype(::AcFunDanmu::ZtLiveUserIdentity_ManagerType value) {
  
  managertype_ = value;
}
inline void ZtLiveUserIdentity::set_managertype(::AcFunDanmu::ZtLiveUserIdentity_ManagerType value) {
  _internal_set_managertype(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.ZtLiveUserIdentity.managerType)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace AcFunDanmu

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::AcFunDanmu::ZtLiveUserIdentity_ManagerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::ZtLiveUserIdentity_ManagerType>() {
  return ::AcFunDanmu::ZtLiveUserIdentity_ManagerType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ZtLiveUserIdentity_2eproto
