// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ZtLiveWidgetProto.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ZtLiveWidgetProto_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ZtLiveWidgetProto_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ZtLiveWidgetProto_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ZtLiveWidgetProto_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ZtLiveWidgetProto_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {

enum ZtLiveWidgetProtoA : int {
  ZtLiveWidgetProtoAa = 0,
  ZtLiveWidgetProtoAb = 1,
  ZtLiveWidgetProtoAc = 2,
  ZtLiveWidgetProtoAd = 3,
  ZtLiveWidgetProtoAe = 4,
  ZtLiveWidgetProtoA_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ZtLiveWidgetProtoA_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ZtLiveWidgetProtoA_IsValid(int value);
constexpr ZtLiveWidgetProtoA ZtLiveWidgetProtoA_MIN = ZtLiveWidgetProtoAa;
constexpr ZtLiveWidgetProtoA ZtLiveWidgetProtoA_MAX = ZtLiveWidgetProtoAe;
constexpr int ZtLiveWidgetProtoA_ARRAYSIZE = ZtLiveWidgetProtoA_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ZtLiveWidgetProtoA_descriptor();
template<typename T>
inline const std::string& ZtLiveWidgetProtoA_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ZtLiveWidgetProtoA>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ZtLiveWidgetProtoA_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ZtLiveWidgetProtoA_descriptor(), enum_t_value);
}
inline bool ZtLiveWidgetProtoA_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ZtLiveWidgetProtoA* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ZtLiveWidgetProtoA>(
    ZtLiveWidgetProtoA_descriptor(), name, value);
}
enum ZtLiveWidgetProtoB : int {
  ZtLiveWidgetProtoBa = 0,
  ZtLiveWidgetProtoBb = 1,
  ZtLiveWidgetProtoBc = 2,
  ZtLiveWidgetProtoBd = 3,
  ZtLiveWidgetProtoBe = 4,
  ZtLiveWidgetProtoBf = 5,
  ZtLiveWidgetProtoB_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ZtLiveWidgetProtoB_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ZtLiveWidgetProtoB_IsValid(int value);
constexpr ZtLiveWidgetProtoB ZtLiveWidgetProtoB_MIN = ZtLiveWidgetProtoBa;
constexpr ZtLiveWidgetProtoB ZtLiveWidgetProtoB_MAX = ZtLiveWidgetProtoBf;
constexpr int ZtLiveWidgetProtoB_ARRAYSIZE = ZtLiveWidgetProtoB_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ZtLiveWidgetProtoB_descriptor();
template<typename T>
inline const std::string& ZtLiveWidgetProtoB_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ZtLiveWidgetProtoB>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ZtLiveWidgetProtoB_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ZtLiveWidgetProtoB_descriptor(), enum_t_value);
}
inline bool ZtLiveWidgetProtoB_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ZtLiveWidgetProtoB* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ZtLiveWidgetProtoB>(
    ZtLiveWidgetProtoB_descriptor(), name, value);
}
enum ZtLiveWidgetProtoC : int {
  ZtLiveWidgetProtoCa = 0,
  ZtLiveWidgetProtoCb = 1,
  ZtLiveWidgetProtoCc = 2,
  ZtLiveWidgetProtoCd = 3,
  ZtLiveWidgetProtoC_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ZtLiveWidgetProtoC_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ZtLiveWidgetProtoC_IsValid(int value);
constexpr ZtLiveWidgetProtoC ZtLiveWidgetProtoC_MIN = ZtLiveWidgetProtoCa;
constexpr ZtLiveWidgetProtoC ZtLiveWidgetProtoC_MAX = ZtLiveWidgetProtoCd;
constexpr int ZtLiveWidgetProtoC_ARRAYSIZE = ZtLiveWidgetProtoC_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ZtLiveWidgetProtoC_descriptor();
template<typename T>
inline const std::string& ZtLiveWidgetProtoC_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ZtLiveWidgetProtoC>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ZtLiveWidgetProtoC_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ZtLiveWidgetProtoC_descriptor(), enum_t_value);
}
inline bool ZtLiveWidgetProtoC_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ZtLiveWidgetProtoC* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ZtLiveWidgetProtoC>(
    ZtLiveWidgetProtoC_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace AcFunDanmu

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::AcFunDanmu::ZtLiveWidgetProtoA> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::ZtLiveWidgetProtoA>() {
  return ::AcFunDanmu::ZtLiveWidgetProtoA_descriptor();
}
template <> struct is_proto_enum< ::AcFunDanmu::ZtLiveWidgetProtoB> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::ZtLiveWidgetProtoB>() {
  return ::AcFunDanmu::ZtLiveWidgetProtoB_descriptor();
}
template <> struct is_proto_enum< ::AcFunDanmu::ZtLiveWidgetProtoC> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::ZtLiveWidgetProtoC>() {
  return ::AcFunDanmu::ZtLiveWidgetProtoC_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ZtLiveWidgetProto_2eproto
