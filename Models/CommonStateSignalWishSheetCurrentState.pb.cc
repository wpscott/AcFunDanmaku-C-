// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommonStateSignalWishSheetCurrentState.proto

#include "CommonStateSignalWishSheetCurrentState.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace AcFunDanmu {
constexpr CommonStateSignalWishSheetCurrentState_WishCurrentState::CommonStateSignalWishSheetCurrentState_WishCurrentState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : c_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , g_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , h_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , d_(int64_t{0})
  , e_(int64_t{0})
  , f_(int64_t{0}){}
struct CommonStateSignalWishSheetCurrentState_WishCurrentStateDefaultTypeInternal {
  constexpr CommonStateSignalWishSheetCurrentState_WishCurrentStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommonStateSignalWishSheetCurrentState_WishCurrentStateDefaultTypeInternal() {}
  union {
    CommonStateSignalWishSheetCurrentState_WishCurrentState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommonStateSignalWishSheetCurrentState_WishCurrentStateDefaultTypeInternal _CommonStateSignalWishSheetCurrentState_WishCurrentState_default_instance_;
constexpr CommonStateSignalWishSheetCurrentState::CommonStateSignalWishSheetCurrentState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : b_()
  , a_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CommonStateSignalWishSheetCurrentStateDefaultTypeInternal {
  constexpr CommonStateSignalWishSheetCurrentStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommonStateSignalWishSheetCurrentStateDefaultTypeInternal() {}
  union {
    CommonStateSignalWishSheetCurrentState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommonStateSignalWishSheetCurrentStateDefaultTypeInternal _CommonStateSignalWishSheetCurrentState_default_instance_;
}  // namespace AcFunDanmu
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_CommonStateSignalWishSheetCurrentState_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_CommonStateSignalWishSheetCurrentState_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_CommonStateSignalWishSheetCurrentState_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_CommonStateSignalWishSheetCurrentState_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonStateSignalWishSheetCurrentState_WishCurrentState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonStateSignalWishSheetCurrentState_WishCurrentState, c_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonStateSignalWishSheetCurrentState_WishCurrentState, d_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonStateSignalWishSheetCurrentState_WishCurrentState, e_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonStateSignalWishSheetCurrentState_WishCurrentState, f_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonStateSignalWishSheetCurrentState_WishCurrentState, g_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonStateSignalWishSheetCurrentState_WishCurrentState, h_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonStateSignalWishSheetCurrentState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonStateSignalWishSheetCurrentState, a_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonStateSignalWishSheetCurrentState, b_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::AcFunDanmu::CommonStateSignalWishSheetCurrentState_WishCurrentState)},
  { 11, -1, sizeof(::AcFunDanmu::CommonStateSignalWishSheetCurrentState)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AcFunDanmu::_CommonStateSignalWishSheetCurrentState_WishCurrentState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AcFunDanmu::_CommonStateSignalWishSheetCurrentState_default_instance_),
};

const char descriptor_table_protodef_CommonStateSignalWishSheetCurrentState_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n,CommonStateSignalWishSheetCurrentState"
  ".proto\022\nAcFunDanmu\"\331\001\n&CommonStateSignal"
  "WishSheetCurrentState\022\t\n\001a\030\001 \001(\t\022N\n\001b\030\002 "
  "\003(\0132C.AcFunDanmu.CommonStateSignalWishSh"
  "eetCurrentState.WishCurrentState\032T\n\020Wish"
  "CurrentState\022\t\n\001c\030\001 \001(\t\022\t\n\001d\030\002 \001(\003\022\t\n\001e\030"
  "\003 \001(\003\022\t\n\001f\030\004 \001(\003\022\t\n\001g\030\005 \001(\t\022\t\n\001h\030\006 \001(\tb\006"
  "proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_CommonStateSignalWishSheetCurrentState_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_CommonStateSignalWishSheetCurrentState_2eproto = {
  false, false, 286, descriptor_table_protodef_CommonStateSignalWishSheetCurrentState_2eproto, "CommonStateSignalWishSheetCurrentState.proto", 
  &descriptor_table_CommonStateSignalWishSheetCurrentState_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_CommonStateSignalWishSheetCurrentState_2eproto::offsets,
  file_level_metadata_CommonStateSignalWishSheetCurrentState_2eproto, file_level_enum_descriptors_CommonStateSignalWishSheetCurrentState_2eproto, file_level_service_descriptors_CommonStateSignalWishSheetCurrentState_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_CommonStateSignalWishSheetCurrentState_2eproto_getter() {
  return &descriptor_table_CommonStateSignalWishSheetCurrentState_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_CommonStateSignalWishSheetCurrentState_2eproto(&descriptor_table_CommonStateSignalWishSheetCurrentState_2eproto);
namespace AcFunDanmu {

// ===================================================================

class CommonStateSignalWishSheetCurrentState_WishCurrentState::_Internal {
 public:
};

CommonStateSignalWishSheetCurrentState_WishCurrentState::CommonStateSignalWishSheetCurrentState_WishCurrentState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.CommonStateSignalWishSheetCurrentState.WishCurrentState)
}
CommonStateSignalWishSheetCurrentState_WishCurrentState::CommonStateSignalWishSheetCurrentState_WishCurrentState(const CommonStateSignalWishSheetCurrentState_WishCurrentState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  c_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_c().empty()) {
    c_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_c(), 
      GetArenaForAllocation());
  }
  g_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_g().empty()) {
    g_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_g(), 
      GetArenaForAllocation());
  }
  h_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_h().empty()) {
    h_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_h(), 
      GetArenaForAllocation());
  }
  ::memcpy(&d_, &from.d_,
    static_cast<size_t>(reinterpret_cast<char*>(&f_) -
    reinterpret_cast<char*>(&d_)) + sizeof(f_));
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.CommonStateSignalWishSheetCurrentState.WishCurrentState)
}

void CommonStateSignalWishSheetCurrentState_WishCurrentState::SharedCtor() {
c_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
g_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
h_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&d_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&f_) -
    reinterpret_cast<char*>(&d_)) + sizeof(f_));
}

CommonStateSignalWishSheetCurrentState_WishCurrentState::~CommonStateSignalWishSheetCurrentState_WishCurrentState() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.CommonStateSignalWishSheetCurrentState.WishCurrentState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommonStateSignalWishSheetCurrentState_WishCurrentState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  c_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  g_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  h_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CommonStateSignalWishSheetCurrentState_WishCurrentState::ArenaDtor(void* object) {
  CommonStateSignalWishSheetCurrentState_WishCurrentState* _this = reinterpret_cast< CommonStateSignalWishSheetCurrentState_WishCurrentState* >(object);
  (void)_this;
}
void CommonStateSignalWishSheetCurrentState_WishCurrentState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommonStateSignalWishSheetCurrentState_WishCurrentState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommonStateSignalWishSheetCurrentState_WishCurrentState::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.CommonStateSignalWishSheetCurrentState.WishCurrentState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  c_.ClearToEmpty();
  g_.ClearToEmpty();
  h_.ClearToEmpty();
  ::memset(&d_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f_) -
      reinterpret_cast<char*>(&d_)) + sizeof(f_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommonStateSignalWishSheetCurrentState_WishCurrentState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string c = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_c();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AcFunDanmu.CommonStateSignalWishSheetCurrentState.WishCurrentState.c"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 d = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          d_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 e = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          e_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 f = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          f_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string g = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_g();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AcFunDanmu.CommonStateSignalWishSheetCurrentState.WishCurrentState.g"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string h = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_h();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AcFunDanmu.CommonStateSignalWishSheetCurrentState.WishCurrentState.h"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommonStateSignalWishSheetCurrentState_WishCurrentState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.CommonStateSignalWishSheetCurrentState.WishCurrentState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string c = 1;
  if (!this->c().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_c().data(), static_cast<int>(this->_internal_c().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.CommonStateSignalWishSheetCurrentState.WishCurrentState.c");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_c(), target);
  }

  // int64 d = 2;
  if (this->d() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_d(), target);
  }

  // int64 e = 3;
  if (this->e() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_e(), target);
  }

  // int64 f = 4;
  if (this->f() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_f(), target);
  }

  // string g = 5;
  if (!this->g().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_g().data(), static_cast<int>(this->_internal_g().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.CommonStateSignalWishSheetCurrentState.WishCurrentState.g");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_g(), target);
  }

  // string h = 6;
  if (!this->h().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_h().data(), static_cast<int>(this->_internal_h().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.CommonStateSignalWishSheetCurrentState.WishCurrentState.h");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_h(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.CommonStateSignalWishSheetCurrentState.WishCurrentState)
  return target;
}

size_t CommonStateSignalWishSheetCurrentState_WishCurrentState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.CommonStateSignalWishSheetCurrentState.WishCurrentState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string c = 1;
  if (!this->c().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_c());
  }

  // string g = 5;
  if (!this->g().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_g());
  }

  // string h = 6;
  if (!this->h().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_h());
  }

  // int64 d = 2;
  if (this->d() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_d());
  }

  // int64 e = 3;
  if (this->e() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_e());
  }

  // int64 f = 4;
  if (this->f() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_f());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommonStateSignalWishSheetCurrentState_WishCurrentState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AcFunDanmu.CommonStateSignalWishSheetCurrentState.WishCurrentState)
  GOOGLE_DCHECK_NE(&from, this);
  const CommonStateSignalWishSheetCurrentState_WishCurrentState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommonStateSignalWishSheetCurrentState_WishCurrentState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AcFunDanmu.CommonStateSignalWishSheetCurrentState.WishCurrentState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AcFunDanmu.CommonStateSignalWishSheetCurrentState.WishCurrentState)
    MergeFrom(*source);
  }
}

void CommonStateSignalWishSheetCurrentState_WishCurrentState::MergeFrom(const CommonStateSignalWishSheetCurrentState_WishCurrentState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.CommonStateSignalWishSheetCurrentState.WishCurrentState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.c().empty()) {
    _internal_set_c(from._internal_c());
  }
  if (!from.g().empty()) {
    _internal_set_g(from._internal_g());
  }
  if (!from.h().empty()) {
    _internal_set_h(from._internal_h());
  }
  if (from.d() != 0) {
    _internal_set_d(from._internal_d());
  }
  if (from.e() != 0) {
    _internal_set_e(from._internal_e());
  }
  if (from.f() != 0) {
    _internal_set_f(from._internal_f());
  }
}

void CommonStateSignalWishSheetCurrentState_WishCurrentState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AcFunDanmu.CommonStateSignalWishSheetCurrentState.WishCurrentState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonStateSignalWishSheetCurrentState_WishCurrentState::CopyFrom(const CommonStateSignalWishSheetCurrentState_WishCurrentState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.CommonStateSignalWishSheetCurrentState.WishCurrentState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonStateSignalWishSheetCurrentState_WishCurrentState::IsInitialized() const {
  return true;
}

void CommonStateSignalWishSheetCurrentState_WishCurrentState::InternalSwap(CommonStateSignalWishSheetCurrentState_WishCurrentState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &c_, GetArenaForAllocation(),
      &other->c_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &g_, GetArenaForAllocation(),
      &other->g_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &h_, GetArenaForAllocation(),
      &other->h_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommonStateSignalWishSheetCurrentState_WishCurrentState, f_)
      + sizeof(CommonStateSignalWishSheetCurrentState_WishCurrentState::f_)
      - PROTOBUF_FIELD_OFFSET(CommonStateSignalWishSheetCurrentState_WishCurrentState, d_)>(
          reinterpret_cast<char*>(&d_),
          reinterpret_cast<char*>(&other->d_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommonStateSignalWishSheetCurrentState_WishCurrentState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CommonStateSignalWishSheetCurrentState_2eproto_getter, &descriptor_table_CommonStateSignalWishSheetCurrentState_2eproto_once,
      file_level_metadata_CommonStateSignalWishSheetCurrentState_2eproto[0]);
}

// ===================================================================

class CommonStateSignalWishSheetCurrentState::_Internal {
 public:
};

CommonStateSignalWishSheetCurrentState::CommonStateSignalWishSheetCurrentState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  b_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.CommonStateSignalWishSheetCurrentState)
}
CommonStateSignalWishSheetCurrentState::CommonStateSignalWishSheetCurrentState(const CommonStateSignalWishSheetCurrentState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      b_(from.b_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  a_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_a().empty()) {
    a_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_a(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.CommonStateSignalWishSheetCurrentState)
}

void CommonStateSignalWishSheetCurrentState::SharedCtor() {
a_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CommonStateSignalWishSheetCurrentState::~CommonStateSignalWishSheetCurrentState() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.CommonStateSignalWishSheetCurrentState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommonStateSignalWishSheetCurrentState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  a_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CommonStateSignalWishSheetCurrentState::ArenaDtor(void* object) {
  CommonStateSignalWishSheetCurrentState* _this = reinterpret_cast< CommonStateSignalWishSheetCurrentState* >(object);
  (void)_this;
}
void CommonStateSignalWishSheetCurrentState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommonStateSignalWishSheetCurrentState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommonStateSignalWishSheetCurrentState::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.CommonStateSignalWishSheetCurrentState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  b_.Clear();
  a_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommonStateSignalWishSheetCurrentState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string a = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_a();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AcFunDanmu.CommonStateSignalWishSheetCurrentState.a"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .AcFunDanmu.CommonStateSignalWishSheetCurrentState.WishCurrentState b = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_b(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommonStateSignalWishSheetCurrentState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.CommonStateSignalWishSheetCurrentState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string a = 1;
  if (!this->a().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_a().data(), static_cast<int>(this->_internal_a().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.CommonStateSignalWishSheetCurrentState.a");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_a(), target);
  }

  // repeated .AcFunDanmu.CommonStateSignalWishSheetCurrentState.WishCurrentState b = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_b_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_b(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.CommonStateSignalWishSheetCurrentState)
  return target;
}

size_t CommonStateSignalWishSheetCurrentState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.CommonStateSignalWishSheetCurrentState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .AcFunDanmu.CommonStateSignalWishSheetCurrentState.WishCurrentState b = 2;
  total_size += 1UL * this->_internal_b_size();
  for (const auto& msg : this->b_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string a = 1;
  if (!this->a().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_a());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommonStateSignalWishSheetCurrentState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AcFunDanmu.CommonStateSignalWishSheetCurrentState)
  GOOGLE_DCHECK_NE(&from, this);
  const CommonStateSignalWishSheetCurrentState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommonStateSignalWishSheetCurrentState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AcFunDanmu.CommonStateSignalWishSheetCurrentState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AcFunDanmu.CommonStateSignalWishSheetCurrentState)
    MergeFrom(*source);
  }
}

void CommonStateSignalWishSheetCurrentState::MergeFrom(const CommonStateSignalWishSheetCurrentState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.CommonStateSignalWishSheetCurrentState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  b_.MergeFrom(from.b_);
  if (!from.a().empty()) {
    _internal_set_a(from._internal_a());
  }
}

void CommonStateSignalWishSheetCurrentState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AcFunDanmu.CommonStateSignalWishSheetCurrentState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonStateSignalWishSheetCurrentState::CopyFrom(const CommonStateSignalWishSheetCurrentState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.CommonStateSignalWishSheetCurrentState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonStateSignalWishSheetCurrentState::IsInitialized() const {
  return true;
}

void CommonStateSignalWishSheetCurrentState::InternalSwap(CommonStateSignalWishSheetCurrentState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  b_.InternalSwap(&other->b_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &a_, GetArenaForAllocation(),
      &other->a_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CommonStateSignalWishSheetCurrentState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CommonStateSignalWishSheetCurrentState_2eproto_getter, &descriptor_table_CommonStateSignalWishSheetCurrentState_2eproto_once,
      file_level_metadata_CommonStateSignalWishSheetCurrentState_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AcFunDanmu::CommonStateSignalWishSheetCurrentState_WishCurrentState* Arena::CreateMaybeMessage< ::AcFunDanmu::CommonStateSignalWishSheetCurrentState_WishCurrentState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::CommonStateSignalWishSheetCurrentState_WishCurrentState >(arena);
}
template<> PROTOBUF_NOINLINE ::AcFunDanmu::CommonStateSignalWishSheetCurrentState* Arena::CreateMaybeMessage< ::AcFunDanmu::CommonStateSignalWishSheetCurrentState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::CommonStateSignalWishSheetCurrentState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
