// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommonStateSignalPkStatistic.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_CommonStateSignalPkStatistic_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_CommonStateSignalPkStatistic_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "PkAudienceContributionInfo.pb.h"
#include "PkPlayerStatistic.pb.h"
#include "PkRoundInfo.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_CommonStateSignalPkStatistic_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_CommonStateSignalPkStatistic_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_CommonStateSignalPkStatistic_2eproto;
namespace AcFunDanmu {
class CommonStateSignalPkStatistic;
struct CommonStateSignalPkStatisticDefaultTypeInternal;
extern CommonStateSignalPkStatisticDefaultTypeInternal _CommonStateSignalPkStatistic_default_instance_;
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::CommonStateSignalPkStatistic* Arena::CreateMaybeMessage<::AcFunDanmu::CommonStateSignalPkStatistic>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {

// ===================================================================

class CommonStateSignalPkStatistic final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.CommonStateSignalPkStatistic) */ {
 public:
  inline CommonStateSignalPkStatistic() : CommonStateSignalPkStatistic(nullptr) {}
  ~CommonStateSignalPkStatistic() override;
  explicit PROTOBUF_CONSTEXPR CommonStateSignalPkStatistic(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommonStateSignalPkStatistic(const CommonStateSignalPkStatistic& from);
  CommonStateSignalPkStatistic(CommonStateSignalPkStatistic&& from) noexcept
    : CommonStateSignalPkStatistic() {
    *this = ::std::move(from);
  }

  inline CommonStateSignalPkStatistic& operator=(const CommonStateSignalPkStatistic& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonStateSignalPkStatistic& operator=(CommonStateSignalPkStatistic&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommonStateSignalPkStatistic& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommonStateSignalPkStatistic* internal_default_instance() {
    return reinterpret_cast<const CommonStateSignalPkStatistic*>(
               &_CommonStateSignalPkStatistic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CommonStateSignalPkStatistic& a, CommonStateSignalPkStatistic& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonStateSignalPkStatistic* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonStateSignalPkStatistic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommonStateSignalPkStatistic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommonStateSignalPkStatistic>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommonStateSignalPkStatistic& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommonStateSignalPkStatistic& from) {
    CommonStateSignalPkStatistic::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonStateSignalPkStatistic* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.CommonStateSignalPkStatistic";
  }
  protected:
  explicit CommonStateSignalPkStatistic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIFieldNumber = 9,
    kJFieldNumber = 10,
    kAFieldNumber = 1,
    kKFieldNumber = 11,
    kBFieldNumber = 2,
    kCFieldNumber = 3,
    kDFieldNumber = 4,
    kFFieldNumber = 6,
    kGFieldNumber = 7,
    kHFieldNumber = 8,
    kLFieldNumber = 12,
    kEFieldNumber = 5,
  };
  // repeated .AcFunDanmu.PkAudienceContributionInfo i = 9;
  int i_size() const;
  private:
  int _internal_i_size() const;
  public:
  void clear_i();
  ::AcFunDanmu::PkAudienceContributionInfo* mutable_i(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::PkAudienceContributionInfo >*
      mutable_i();
  private:
  const ::AcFunDanmu::PkAudienceContributionInfo& _internal_i(int index) const;
  ::AcFunDanmu::PkAudienceContributionInfo* _internal_add_i();
  public:
  const ::AcFunDanmu::PkAudienceContributionInfo& i(int index) const;
  ::AcFunDanmu::PkAudienceContributionInfo* add_i();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::PkAudienceContributionInfo >&
      i() const;

  // repeated .AcFunDanmu.PkPlayerStatistic j = 10;
  int j_size() const;
  private:
  int _internal_j_size() const;
  public:
  void clear_j();
  ::AcFunDanmu::PkPlayerStatistic* mutable_j(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::PkPlayerStatistic >*
      mutable_j();
  private:
  const ::AcFunDanmu::PkPlayerStatistic& _internal_j(int index) const;
  ::AcFunDanmu::PkPlayerStatistic* _internal_add_j();
  public:
  const ::AcFunDanmu::PkPlayerStatistic& j(int index) const;
  ::AcFunDanmu::PkPlayerStatistic* add_j();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::PkPlayerStatistic >&
      j() const;

  // string a = 1;
  void clear_a();
  const std::string& a() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_a(ArgT0&& arg0, ArgT... args);
  std::string* mutable_a();
  PROTOBUF_NODISCARD std::string* release_a();
  void set_allocated_a(std::string* a);
  private:
  const std::string& _internal_a() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_a(const std::string& value);
  std::string* _internal_mutable_a();
  public:

  // .AcFunDanmu.PkRoundInfo k = 11;
  bool has_k() const;
  private:
  bool _internal_has_k() const;
  public:
  void clear_k();
  const ::AcFunDanmu::PkRoundInfo& k() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::PkRoundInfo* release_k();
  ::AcFunDanmu::PkRoundInfo* mutable_k();
  void set_allocated_k(::AcFunDanmu::PkRoundInfo* k);
  private:
  const ::AcFunDanmu::PkRoundInfo& _internal_k() const;
  ::AcFunDanmu::PkRoundInfo* _internal_mutable_k();
  public:
  void unsafe_arena_set_allocated_k(
      ::AcFunDanmu::PkRoundInfo* k);
  ::AcFunDanmu::PkRoundInfo* unsafe_arena_release_k();

  // int64 b = 2;
  void clear_b();
  int64_t b() const;
  void set_b(int64_t value);
  private:
  int64_t _internal_b() const;
  void _internal_set_b(int64_t value);
  public:

  // int64 c = 3;
  void clear_c();
  int64_t c() const;
  void set_c(int64_t value);
  private:
  int64_t _internal_c() const;
  void _internal_set_c(int64_t value);
  public:

  // int64 d = 4;
  void clear_d();
  int64_t d() const;
  void set_d(int64_t value);
  private:
  int64_t _internal_d() const;
  void _internal_set_d(int64_t value);
  public:

  // int64 f = 6;
  void clear_f();
  int64_t f() const;
  void set_f(int64_t value);
  private:
  int64_t _internal_f() const;
  void _internal_set_f(int64_t value);
  public:

  // int64 g = 7;
  void clear_g();
  int64_t g() const;
  void set_g(int64_t value);
  private:
  int64_t _internal_g() const;
  void _internal_set_g(int64_t value);
  public:

  // int64 h = 8;
  void clear_h();
  int64_t h() const;
  void set_h(int64_t value);
  private:
  int64_t _internal_h() const;
  void _internal_set_h(int64_t value);
  public:

  // int64 l = 12;
  void clear_l();
  int64_t l() const;
  void set_l(int64_t value);
  private:
  int64_t _internal_l() const;
  void _internal_set_l(int64_t value);
  public:

  // bool e = 5;
  void clear_e();
  bool e() const;
  void set_e(bool value);
  private:
  bool _internal_e() const;
  void _internal_set_e(bool value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.CommonStateSignalPkStatistic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::PkAudienceContributionInfo > i_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::PkPlayerStatistic > j_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr a_;
    ::AcFunDanmu::PkRoundInfo* k_;
    int64_t b_;
    int64_t c_;
    int64_t d_;
    int64_t f_;
    int64_t g_;
    int64_t h_;
    int64_t l_;
    bool e_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CommonStateSignalPkStatistic_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CommonStateSignalPkStatistic

// string a = 1;
inline void CommonStateSignalPkStatistic::clear_a() {
  _impl_.a_.ClearToEmpty();
}
inline const std::string& CommonStateSignalPkStatistic::a() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonStateSignalPkStatistic.a)
  return _internal_a();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommonStateSignalPkStatistic::set_a(ArgT0&& arg0, ArgT... args) {
 
 _impl_.a_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommonStateSignalPkStatistic.a)
}
inline std::string* CommonStateSignalPkStatistic::mutable_a() {
  std::string* _s = _internal_mutable_a();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.CommonStateSignalPkStatistic.a)
  return _s;
}
inline const std::string& CommonStateSignalPkStatistic::_internal_a() const {
  return _impl_.a_.Get();
}
inline void CommonStateSignalPkStatistic::_internal_set_a(const std::string& value) {
  
  _impl_.a_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonStateSignalPkStatistic::_internal_mutable_a() {
  
  return _impl_.a_.Mutable(GetArenaForAllocation());
}
inline std::string* CommonStateSignalPkStatistic::release_a() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.CommonStateSignalPkStatistic.a)
  return _impl_.a_.Release();
}
inline void CommonStateSignalPkStatistic::set_allocated_a(std::string* a) {
  if (a != nullptr) {
    
  } else {
    
  }
  _impl_.a_.SetAllocated(a, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.a_.IsDefault()) {
    _impl_.a_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.CommonStateSignalPkStatistic.a)
}

// int64 b = 2;
inline void CommonStateSignalPkStatistic::clear_b() {
  _impl_.b_ = int64_t{0};
}
inline int64_t CommonStateSignalPkStatistic::_internal_b() const {
  return _impl_.b_;
}
inline int64_t CommonStateSignalPkStatistic::b() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonStateSignalPkStatistic.b)
  return _internal_b();
}
inline void CommonStateSignalPkStatistic::_internal_set_b(int64_t value) {
  
  _impl_.b_ = value;
}
inline void CommonStateSignalPkStatistic::set_b(int64_t value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommonStateSignalPkStatistic.b)
}

// int64 c = 3;
inline void CommonStateSignalPkStatistic::clear_c() {
  _impl_.c_ = int64_t{0};
}
inline int64_t CommonStateSignalPkStatistic::_internal_c() const {
  return _impl_.c_;
}
inline int64_t CommonStateSignalPkStatistic::c() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonStateSignalPkStatistic.c)
  return _internal_c();
}
inline void CommonStateSignalPkStatistic::_internal_set_c(int64_t value) {
  
  _impl_.c_ = value;
}
inline void CommonStateSignalPkStatistic::set_c(int64_t value) {
  _internal_set_c(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommonStateSignalPkStatistic.c)
}

// int64 d = 4;
inline void CommonStateSignalPkStatistic::clear_d() {
  _impl_.d_ = int64_t{0};
}
inline int64_t CommonStateSignalPkStatistic::_internal_d() const {
  return _impl_.d_;
}
inline int64_t CommonStateSignalPkStatistic::d() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonStateSignalPkStatistic.d)
  return _internal_d();
}
inline void CommonStateSignalPkStatistic::_internal_set_d(int64_t value) {
  
  _impl_.d_ = value;
}
inline void CommonStateSignalPkStatistic::set_d(int64_t value) {
  _internal_set_d(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommonStateSignalPkStatistic.d)
}

// bool e = 5;
inline void CommonStateSignalPkStatistic::clear_e() {
  _impl_.e_ = false;
}
inline bool CommonStateSignalPkStatistic::_internal_e() const {
  return _impl_.e_;
}
inline bool CommonStateSignalPkStatistic::e() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonStateSignalPkStatistic.e)
  return _internal_e();
}
inline void CommonStateSignalPkStatistic::_internal_set_e(bool value) {
  
  _impl_.e_ = value;
}
inline void CommonStateSignalPkStatistic::set_e(bool value) {
  _internal_set_e(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommonStateSignalPkStatistic.e)
}

// int64 f = 6;
inline void CommonStateSignalPkStatistic::clear_f() {
  _impl_.f_ = int64_t{0};
}
inline int64_t CommonStateSignalPkStatistic::_internal_f() const {
  return _impl_.f_;
}
inline int64_t CommonStateSignalPkStatistic::f() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonStateSignalPkStatistic.f)
  return _internal_f();
}
inline void CommonStateSignalPkStatistic::_internal_set_f(int64_t value) {
  
  _impl_.f_ = value;
}
inline void CommonStateSignalPkStatistic::set_f(int64_t value) {
  _internal_set_f(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommonStateSignalPkStatistic.f)
}

// int64 g = 7;
inline void CommonStateSignalPkStatistic::clear_g() {
  _impl_.g_ = int64_t{0};
}
inline int64_t CommonStateSignalPkStatistic::_internal_g() const {
  return _impl_.g_;
}
inline int64_t CommonStateSignalPkStatistic::g() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonStateSignalPkStatistic.g)
  return _internal_g();
}
inline void CommonStateSignalPkStatistic::_internal_set_g(int64_t value) {
  
  _impl_.g_ = value;
}
inline void CommonStateSignalPkStatistic::set_g(int64_t value) {
  _internal_set_g(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommonStateSignalPkStatistic.g)
}

// int64 h = 8;
inline void CommonStateSignalPkStatistic::clear_h() {
  _impl_.h_ = int64_t{0};
}
inline int64_t CommonStateSignalPkStatistic::_internal_h() const {
  return _impl_.h_;
}
inline int64_t CommonStateSignalPkStatistic::h() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonStateSignalPkStatistic.h)
  return _internal_h();
}
inline void CommonStateSignalPkStatistic::_internal_set_h(int64_t value) {
  
  _impl_.h_ = value;
}
inline void CommonStateSignalPkStatistic::set_h(int64_t value) {
  _internal_set_h(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommonStateSignalPkStatistic.h)
}

// repeated .AcFunDanmu.PkAudienceContributionInfo i = 9;
inline int CommonStateSignalPkStatistic::_internal_i_size() const {
  return _impl_.i_.size();
}
inline int CommonStateSignalPkStatistic::i_size() const {
  return _internal_i_size();
}
inline ::AcFunDanmu::PkAudienceContributionInfo* CommonStateSignalPkStatistic::mutable_i(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.CommonStateSignalPkStatistic.i)
  return _impl_.i_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::PkAudienceContributionInfo >*
CommonStateSignalPkStatistic::mutable_i() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.CommonStateSignalPkStatistic.i)
  return &_impl_.i_;
}
inline const ::AcFunDanmu::PkAudienceContributionInfo& CommonStateSignalPkStatistic::_internal_i(int index) const {
  return _impl_.i_.Get(index);
}
inline const ::AcFunDanmu::PkAudienceContributionInfo& CommonStateSignalPkStatistic::i(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonStateSignalPkStatistic.i)
  return _internal_i(index);
}
inline ::AcFunDanmu::PkAudienceContributionInfo* CommonStateSignalPkStatistic::_internal_add_i() {
  return _impl_.i_.Add();
}
inline ::AcFunDanmu::PkAudienceContributionInfo* CommonStateSignalPkStatistic::add_i() {
  ::AcFunDanmu::PkAudienceContributionInfo* _add = _internal_add_i();
  // @@protoc_insertion_point(field_add:AcFunDanmu.CommonStateSignalPkStatistic.i)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::PkAudienceContributionInfo >&
CommonStateSignalPkStatistic::i() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.CommonStateSignalPkStatistic.i)
  return _impl_.i_;
}

// repeated .AcFunDanmu.PkPlayerStatistic j = 10;
inline int CommonStateSignalPkStatistic::_internal_j_size() const {
  return _impl_.j_.size();
}
inline int CommonStateSignalPkStatistic::j_size() const {
  return _internal_j_size();
}
inline ::AcFunDanmu::PkPlayerStatistic* CommonStateSignalPkStatistic::mutable_j(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.CommonStateSignalPkStatistic.j)
  return _impl_.j_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::PkPlayerStatistic >*
CommonStateSignalPkStatistic::mutable_j() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.CommonStateSignalPkStatistic.j)
  return &_impl_.j_;
}
inline const ::AcFunDanmu::PkPlayerStatistic& CommonStateSignalPkStatistic::_internal_j(int index) const {
  return _impl_.j_.Get(index);
}
inline const ::AcFunDanmu::PkPlayerStatistic& CommonStateSignalPkStatistic::j(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonStateSignalPkStatistic.j)
  return _internal_j(index);
}
inline ::AcFunDanmu::PkPlayerStatistic* CommonStateSignalPkStatistic::_internal_add_j() {
  return _impl_.j_.Add();
}
inline ::AcFunDanmu::PkPlayerStatistic* CommonStateSignalPkStatistic::add_j() {
  ::AcFunDanmu::PkPlayerStatistic* _add = _internal_add_j();
  // @@protoc_insertion_point(field_add:AcFunDanmu.CommonStateSignalPkStatistic.j)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::PkPlayerStatistic >&
CommonStateSignalPkStatistic::j() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.CommonStateSignalPkStatistic.j)
  return _impl_.j_;
}

// .AcFunDanmu.PkRoundInfo k = 11;
inline bool CommonStateSignalPkStatistic::_internal_has_k() const {
  return this != internal_default_instance() && _impl_.k_ != nullptr;
}
inline bool CommonStateSignalPkStatistic::has_k() const {
  return _internal_has_k();
}
inline const ::AcFunDanmu::PkRoundInfo& CommonStateSignalPkStatistic::_internal_k() const {
  const ::AcFunDanmu::PkRoundInfo* p = _impl_.k_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::PkRoundInfo&>(
      ::AcFunDanmu::_PkRoundInfo_default_instance_);
}
inline const ::AcFunDanmu::PkRoundInfo& CommonStateSignalPkStatistic::k() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonStateSignalPkStatistic.k)
  return _internal_k();
}
inline void CommonStateSignalPkStatistic::unsafe_arena_set_allocated_k(
    ::AcFunDanmu::PkRoundInfo* k) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.k_);
  }
  _impl_.k_ = k;
  if (k) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.CommonStateSignalPkStatistic.k)
}
inline ::AcFunDanmu::PkRoundInfo* CommonStateSignalPkStatistic::release_k() {
  
  ::AcFunDanmu::PkRoundInfo* temp = _impl_.k_;
  _impl_.k_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AcFunDanmu::PkRoundInfo* CommonStateSignalPkStatistic::unsafe_arena_release_k() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.CommonStateSignalPkStatistic.k)
  
  ::AcFunDanmu::PkRoundInfo* temp = _impl_.k_;
  _impl_.k_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::PkRoundInfo* CommonStateSignalPkStatistic::_internal_mutable_k() {
  
  if (_impl_.k_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::PkRoundInfo>(GetArenaForAllocation());
    _impl_.k_ = p;
  }
  return _impl_.k_;
}
inline ::AcFunDanmu::PkRoundInfo* CommonStateSignalPkStatistic::mutable_k() {
  ::AcFunDanmu::PkRoundInfo* _msg = _internal_mutable_k();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.CommonStateSignalPkStatistic.k)
  return _msg;
}
inline void CommonStateSignalPkStatistic::set_allocated_k(::AcFunDanmu::PkRoundInfo* k) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.k_);
  }
  if (k) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(k));
    if (message_arena != submessage_arena) {
      k = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, k, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.k_ = k;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.CommonStateSignalPkStatistic.k)
}

// int64 l = 12;
inline void CommonStateSignalPkStatistic::clear_l() {
  _impl_.l_ = int64_t{0};
}
inline int64_t CommonStateSignalPkStatistic::_internal_l() const {
  return _impl_.l_;
}
inline int64_t CommonStateSignalPkStatistic::l() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonStateSignalPkStatistic.l)
  return _internal_l();
}
inline void CommonStateSignalPkStatistic::_internal_set_l(int64_t value) {
  
  _impl_.l_ = value;
}
inline void CommonStateSignalPkStatistic::set_l(int64_t value) {
  _internal_set_l(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommonStateSignalPkStatistic.l)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace AcFunDanmu

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_CommonStateSignalPkStatistic_2eproto
