// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: acfun.live.proto

#include "acfun.live.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_acfun_2elive_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AcFunUserInfo_acfun_2elive_2eproto;
namespace AcFunDanmu {
class AcFunUserInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AcFunUserInfo> _instance;
} _AcFunUserInfo_default_instance_;
class AcfunActionSignalThrowBananaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AcfunActionSignalThrowBanana> _instance;
} _AcfunActionSignalThrowBanana_default_instance_;
class AcfunStateSignalDisplayInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AcfunStateSignalDisplayInfo> _instance;
} _AcfunStateSignalDisplayInfo_default_instance_;
class AcfunActionSignalJoinClubDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AcfunActionSignalJoinClub> _instance;
} _AcfunActionSignalJoinClub_default_instance_;
}  // namespace AcFunDanmu
static void InitDefaultsscc_info_AcFunUserInfo_acfun_2elive_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AcFunDanmu::_AcFunUserInfo_default_instance_;
    new (ptr) ::AcFunDanmu::AcFunUserInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AcFunUserInfo_acfun_2elive_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AcFunUserInfo_acfun_2elive_2eproto}, {}};

static void InitDefaultsscc_info_AcfunActionSignalJoinClub_acfun_2elive_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AcFunDanmu::_AcfunActionSignalJoinClub_default_instance_;
    new (ptr) ::AcFunDanmu::AcfunActionSignalJoinClub();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AcfunActionSignalJoinClub_acfun_2elive_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AcfunActionSignalJoinClub_acfun_2elive_2eproto}, {
      &scc_info_AcFunUserInfo_acfun_2elive_2eproto.base,}};

static void InitDefaultsscc_info_AcfunActionSignalThrowBanana_acfun_2elive_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AcFunDanmu::_AcfunActionSignalThrowBanana_default_instance_;
    new (ptr) ::AcFunDanmu::AcfunActionSignalThrowBanana();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AcfunActionSignalThrowBanana_acfun_2elive_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AcfunActionSignalThrowBanana_acfun_2elive_2eproto}, {
      &scc_info_AcFunUserInfo_acfun_2elive_2eproto.base,}};

static void InitDefaultsscc_info_AcfunStateSignalDisplayInfo_acfun_2elive_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AcFunDanmu::_AcfunStateSignalDisplayInfo_default_instance_;
    new (ptr) ::AcFunDanmu::AcfunStateSignalDisplayInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AcfunStateSignalDisplayInfo_acfun_2elive_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AcfunStateSignalDisplayInfo_acfun_2elive_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_acfun_2elive_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_acfun_2elive_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_acfun_2elive_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_acfun_2elive_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::AcFunUserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::AcFunUserInfo, userid_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::AcFunUserInfo, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::AcfunActionSignalThrowBanana, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::AcfunActionSignalThrowBanana, visitor_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::AcfunActionSignalThrowBanana, count_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::AcfunActionSignalThrowBanana, sendtimems_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::AcfunStateSignalDisplayInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::AcfunStateSignalDisplayInfo, bananacount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::AcfunActionSignalJoinClub, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::AcfunActionSignalJoinClub, fansinfo_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::AcfunActionSignalJoinClub, uperinfo_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::AcfunActionSignalJoinClub, jointimems_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::AcFunDanmu::AcFunUserInfo)},
  { 7, -1, sizeof(::AcFunDanmu::AcfunActionSignalThrowBanana)},
  { 15, -1, sizeof(::AcFunDanmu::AcfunStateSignalDisplayInfo)},
  { 21, -1, sizeof(::AcFunDanmu::AcfunActionSignalJoinClub)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AcFunDanmu::_AcFunUserInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AcFunDanmu::_AcfunActionSignalThrowBanana_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AcFunDanmu::_AcfunStateSignalDisplayInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AcFunDanmu::_AcfunActionSignalJoinClub_default_instance_),
};

const char descriptor_table_protodef_acfun_2elive_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020acfun.live.proto\022\nAcFunDanmu\"-\n\rAcFunU"
  "serInfo\022\016\n\006userId\030\001 \001(\003\022\014\n\004name\030\002 \001(\t\"m\n"
  "\034AcfunActionSignalThrowBanana\022*\n\007visitor"
  "\030\001 \001(\0132\031.AcFunDanmu.AcFunUserInfo\022\r\n\005cou"
  "nt\030\002 \001(\005\022\022\n\nsendTimeMs\030\003 \001(\003\"2\n\033AcfunSta"
  "teSignalDisplayInfo\022\023\n\013bananaCount\030\001 \001(\t"
  "\"\211\001\n\031AcfunActionSignalJoinClub\022+\n\010fansIn"
  "fo\030\001 \001(\0132\031.AcFunDanmu.AcFunUserInfo\022+\n\010u"
  "perInfo\030\002 \001(\0132\031.AcFunDanmu.AcFunUserInfo"
  "\022\022\n\njoinTimeMs\030\003 \001(\003b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_acfun_2elive_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_acfun_2elive_2eproto_sccs[4] = {
  &scc_info_AcFunUserInfo_acfun_2elive_2eproto.base,
  &scc_info_AcfunActionSignalJoinClub_acfun_2elive_2eproto.base,
  &scc_info_AcfunActionSignalThrowBanana_acfun_2elive_2eproto.base,
  &scc_info_AcfunStateSignalDisplayInfo_acfun_2elive_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_acfun_2elive_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_acfun_2elive_2eproto = {
  false, false, descriptor_table_protodef_acfun_2elive_2eproto, "acfun.live.proto", 388,
  &descriptor_table_acfun_2elive_2eproto_once, descriptor_table_acfun_2elive_2eproto_sccs, descriptor_table_acfun_2elive_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_acfun_2elive_2eproto::offsets,
  file_level_metadata_acfun_2elive_2eproto, 4, file_level_enum_descriptors_acfun_2elive_2eproto, file_level_service_descriptors_acfun_2elive_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_acfun_2elive_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_acfun_2elive_2eproto)), true);
namespace AcFunDanmu {

// ===================================================================

class AcFunUserInfo::_Internal {
 public:
};

AcFunUserInfo::AcFunUserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.AcFunUserInfo)
}
AcFunUserInfo::AcFunUserInfo(const AcFunUserInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.AcFunUserInfo)
}

void AcFunUserInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AcFunUserInfo_acfun_2elive_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userid_ = PROTOBUF_LONGLONG(0);
}

AcFunUserInfo::~AcFunUserInfo() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.AcFunUserInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AcFunUserInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AcFunUserInfo::ArenaDtor(void* object) {
  AcFunUserInfo* _this = reinterpret_cast< AcFunUserInfo* >(object);
  (void)_this;
}
void AcFunUserInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AcFunUserInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AcFunUserInfo& AcFunUserInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AcFunUserInfo_acfun_2elive_2eproto.base);
  return *internal_default_instance();
}


void AcFunUserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.AcFunUserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  userid_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AcFunUserInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 userId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AcFunDanmu.AcFunUserInfo.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AcFunUserInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.AcFunUserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 userId = 1;
  if (this->userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_userid(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.AcFunUserInfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.AcFunUserInfo)
  return target;
}

size_t AcFunUserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.AcFunUserInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int64 userId = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_userid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AcFunUserInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AcFunDanmu.AcFunUserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AcFunUserInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AcFunUserInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AcFunDanmu.AcFunUserInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AcFunDanmu.AcFunUserInfo)
    MergeFrom(*source);
  }
}

void AcFunUserInfo::MergeFrom(const AcFunUserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.AcFunUserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.userid() != 0) {
    _internal_set_userid(from._internal_userid());
  }
}

void AcFunUserInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AcFunDanmu.AcFunUserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcFunUserInfo::CopyFrom(const AcFunUserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.AcFunUserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcFunUserInfo::IsInitialized() const {
  return true;
}

void AcFunUserInfo::InternalSwap(AcFunUserInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(userid_, other->userid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AcFunUserInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AcfunActionSignalThrowBanana::_Internal {
 public:
  static const ::AcFunDanmu::AcFunUserInfo& visitor(const AcfunActionSignalThrowBanana* msg);
};

const ::AcFunDanmu::AcFunUserInfo&
AcfunActionSignalThrowBanana::_Internal::visitor(const AcfunActionSignalThrowBanana* msg) {
  return *msg->visitor_;
}
AcfunActionSignalThrowBanana::AcfunActionSignalThrowBanana(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.AcfunActionSignalThrowBanana)
}
AcfunActionSignalThrowBanana::AcfunActionSignalThrowBanana(const AcfunActionSignalThrowBanana& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_visitor()) {
    visitor_ = new ::AcFunDanmu::AcFunUserInfo(*from.visitor_);
  } else {
    visitor_ = nullptr;
  }
  ::memcpy(&sendtimems_, &from.sendtimems_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&sendtimems_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.AcfunActionSignalThrowBanana)
}

void AcfunActionSignalThrowBanana::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AcfunActionSignalThrowBanana_acfun_2elive_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&visitor_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&visitor_)) + sizeof(count_));
}

AcfunActionSignalThrowBanana::~AcfunActionSignalThrowBanana() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.AcfunActionSignalThrowBanana)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AcfunActionSignalThrowBanana::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete visitor_;
}

void AcfunActionSignalThrowBanana::ArenaDtor(void* object) {
  AcfunActionSignalThrowBanana* _this = reinterpret_cast< AcfunActionSignalThrowBanana* >(object);
  (void)_this;
}
void AcfunActionSignalThrowBanana::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AcfunActionSignalThrowBanana::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AcfunActionSignalThrowBanana& AcfunActionSignalThrowBanana::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AcfunActionSignalThrowBanana_acfun_2elive_2eproto.base);
  return *internal_default_instance();
}


void AcfunActionSignalThrowBanana::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.AcfunActionSignalThrowBanana)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && visitor_ != nullptr) {
    delete visitor_;
  }
  visitor_ = nullptr;
  ::memset(&sendtimems_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&sendtimems_)) + sizeof(count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AcfunActionSignalThrowBanana::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .AcFunDanmu.AcFunUserInfo visitor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_visitor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 sendTimeMs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sendtimems_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AcfunActionSignalThrowBanana::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.AcfunActionSignalThrowBanana)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AcFunDanmu.AcFunUserInfo visitor = 1;
  if (this->has_visitor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::visitor(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // int64 sendTimeMs = 3;
  if (this->sendtimems() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_sendtimems(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.AcfunActionSignalThrowBanana)
  return target;
}

size_t AcfunActionSignalThrowBanana::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.AcfunActionSignalThrowBanana)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .AcFunDanmu.AcFunUserInfo visitor = 1;
  if (this->has_visitor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *visitor_);
  }

  // int64 sendTimeMs = 3;
  if (this->sendtimems() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_sendtimems());
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AcfunActionSignalThrowBanana::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AcFunDanmu.AcfunActionSignalThrowBanana)
  GOOGLE_DCHECK_NE(&from, this);
  const AcfunActionSignalThrowBanana* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AcfunActionSignalThrowBanana>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AcFunDanmu.AcfunActionSignalThrowBanana)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AcFunDanmu.AcfunActionSignalThrowBanana)
    MergeFrom(*source);
  }
}

void AcfunActionSignalThrowBanana::MergeFrom(const AcfunActionSignalThrowBanana& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.AcfunActionSignalThrowBanana)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_visitor()) {
    _internal_mutable_visitor()->::AcFunDanmu::AcFunUserInfo::MergeFrom(from._internal_visitor());
  }
  if (from.sendtimems() != 0) {
    _internal_set_sendtimems(from._internal_sendtimems());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void AcfunActionSignalThrowBanana::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AcFunDanmu.AcfunActionSignalThrowBanana)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcfunActionSignalThrowBanana::CopyFrom(const AcfunActionSignalThrowBanana& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.AcfunActionSignalThrowBanana)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcfunActionSignalThrowBanana::IsInitialized() const {
  return true;
}

void AcfunActionSignalThrowBanana::InternalSwap(AcfunActionSignalThrowBanana* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AcfunActionSignalThrowBanana, count_)
      + sizeof(AcfunActionSignalThrowBanana::count_)
      - PROTOBUF_FIELD_OFFSET(AcfunActionSignalThrowBanana, visitor_)>(
          reinterpret_cast<char*>(&visitor_),
          reinterpret_cast<char*>(&other->visitor_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AcfunActionSignalThrowBanana::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AcfunStateSignalDisplayInfo::_Internal {
 public:
};

AcfunStateSignalDisplayInfo::AcfunStateSignalDisplayInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.AcfunStateSignalDisplayInfo)
}
AcfunStateSignalDisplayInfo::AcfunStateSignalDisplayInfo(const AcfunStateSignalDisplayInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bananacount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bananacount().empty()) {
    bananacount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bananacount(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.AcfunStateSignalDisplayInfo)
}

void AcfunStateSignalDisplayInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AcfunStateSignalDisplayInfo_acfun_2elive_2eproto.base);
  bananacount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AcfunStateSignalDisplayInfo::~AcfunStateSignalDisplayInfo() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.AcfunStateSignalDisplayInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AcfunStateSignalDisplayInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  bananacount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AcfunStateSignalDisplayInfo::ArenaDtor(void* object) {
  AcfunStateSignalDisplayInfo* _this = reinterpret_cast< AcfunStateSignalDisplayInfo* >(object);
  (void)_this;
}
void AcfunStateSignalDisplayInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AcfunStateSignalDisplayInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AcfunStateSignalDisplayInfo& AcfunStateSignalDisplayInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AcfunStateSignalDisplayInfo_acfun_2elive_2eproto.base);
  return *internal_default_instance();
}


void AcfunStateSignalDisplayInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.AcfunStateSignalDisplayInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bananacount_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AcfunStateSignalDisplayInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string bananaCount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_bananacount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AcFunDanmu.AcfunStateSignalDisplayInfo.bananaCount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AcfunStateSignalDisplayInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.AcfunStateSignalDisplayInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string bananaCount = 1;
  if (this->bananacount().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bananacount().data(), static_cast<int>(this->_internal_bananacount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.AcfunStateSignalDisplayInfo.bananaCount");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_bananacount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.AcfunStateSignalDisplayInfo)
  return target;
}

size_t AcfunStateSignalDisplayInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.AcfunStateSignalDisplayInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bananaCount = 1;
  if (this->bananacount().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bananacount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AcfunStateSignalDisplayInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AcFunDanmu.AcfunStateSignalDisplayInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AcfunStateSignalDisplayInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AcfunStateSignalDisplayInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AcFunDanmu.AcfunStateSignalDisplayInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AcFunDanmu.AcfunStateSignalDisplayInfo)
    MergeFrom(*source);
  }
}

void AcfunStateSignalDisplayInfo::MergeFrom(const AcfunStateSignalDisplayInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.AcfunStateSignalDisplayInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bananacount().size() > 0) {
    _internal_set_bananacount(from._internal_bananacount());
  }
}

void AcfunStateSignalDisplayInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AcFunDanmu.AcfunStateSignalDisplayInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcfunStateSignalDisplayInfo::CopyFrom(const AcfunStateSignalDisplayInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.AcfunStateSignalDisplayInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcfunStateSignalDisplayInfo::IsInitialized() const {
  return true;
}

void AcfunStateSignalDisplayInfo::InternalSwap(AcfunStateSignalDisplayInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bananacount_.Swap(&other->bananacount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AcfunStateSignalDisplayInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AcfunActionSignalJoinClub::_Internal {
 public:
  static const ::AcFunDanmu::AcFunUserInfo& fansinfo(const AcfunActionSignalJoinClub* msg);
  static const ::AcFunDanmu::AcFunUserInfo& uperinfo(const AcfunActionSignalJoinClub* msg);
};

const ::AcFunDanmu::AcFunUserInfo&
AcfunActionSignalJoinClub::_Internal::fansinfo(const AcfunActionSignalJoinClub* msg) {
  return *msg->fansinfo_;
}
const ::AcFunDanmu::AcFunUserInfo&
AcfunActionSignalJoinClub::_Internal::uperinfo(const AcfunActionSignalJoinClub* msg) {
  return *msg->uperinfo_;
}
AcfunActionSignalJoinClub::AcfunActionSignalJoinClub(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.AcfunActionSignalJoinClub)
}
AcfunActionSignalJoinClub::AcfunActionSignalJoinClub(const AcfunActionSignalJoinClub& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fansinfo()) {
    fansinfo_ = new ::AcFunDanmu::AcFunUserInfo(*from.fansinfo_);
  } else {
    fansinfo_ = nullptr;
  }
  if (from._internal_has_uperinfo()) {
    uperinfo_ = new ::AcFunDanmu::AcFunUserInfo(*from.uperinfo_);
  } else {
    uperinfo_ = nullptr;
  }
  jointimems_ = from.jointimems_;
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.AcfunActionSignalJoinClub)
}

void AcfunActionSignalJoinClub::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AcfunActionSignalJoinClub_acfun_2elive_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&fansinfo_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&jointimems_) -
      reinterpret_cast<char*>(&fansinfo_)) + sizeof(jointimems_));
}

AcfunActionSignalJoinClub::~AcfunActionSignalJoinClub() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.AcfunActionSignalJoinClub)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AcfunActionSignalJoinClub::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete fansinfo_;
  if (this != internal_default_instance()) delete uperinfo_;
}

void AcfunActionSignalJoinClub::ArenaDtor(void* object) {
  AcfunActionSignalJoinClub* _this = reinterpret_cast< AcfunActionSignalJoinClub* >(object);
  (void)_this;
}
void AcfunActionSignalJoinClub::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AcfunActionSignalJoinClub::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AcfunActionSignalJoinClub& AcfunActionSignalJoinClub::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AcfunActionSignalJoinClub_acfun_2elive_2eproto.base);
  return *internal_default_instance();
}


void AcfunActionSignalJoinClub::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.AcfunActionSignalJoinClub)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && fansinfo_ != nullptr) {
    delete fansinfo_;
  }
  fansinfo_ = nullptr;
  if (GetArena() == nullptr && uperinfo_ != nullptr) {
    delete uperinfo_;
  }
  uperinfo_ = nullptr;
  jointimems_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AcfunActionSignalJoinClub::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .AcFunDanmu.AcFunUserInfo fansInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fansinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AcFunDanmu.AcFunUserInfo uperInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_uperinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 joinTimeMs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          jointimems_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AcfunActionSignalJoinClub::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.AcfunActionSignalJoinClub)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AcFunDanmu.AcFunUserInfo fansInfo = 1;
  if (this->has_fansinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::fansinfo(this), target, stream);
  }

  // .AcFunDanmu.AcFunUserInfo uperInfo = 2;
  if (this->has_uperinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::uperinfo(this), target, stream);
  }

  // int64 joinTimeMs = 3;
  if (this->jointimems() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_jointimems(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.AcfunActionSignalJoinClub)
  return target;
}

size_t AcfunActionSignalJoinClub::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.AcfunActionSignalJoinClub)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .AcFunDanmu.AcFunUserInfo fansInfo = 1;
  if (this->has_fansinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fansinfo_);
  }

  // .AcFunDanmu.AcFunUserInfo uperInfo = 2;
  if (this->has_uperinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uperinfo_);
  }

  // int64 joinTimeMs = 3;
  if (this->jointimems() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_jointimems());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AcfunActionSignalJoinClub::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AcFunDanmu.AcfunActionSignalJoinClub)
  GOOGLE_DCHECK_NE(&from, this);
  const AcfunActionSignalJoinClub* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AcfunActionSignalJoinClub>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AcFunDanmu.AcfunActionSignalJoinClub)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AcFunDanmu.AcfunActionSignalJoinClub)
    MergeFrom(*source);
  }
}

void AcfunActionSignalJoinClub::MergeFrom(const AcfunActionSignalJoinClub& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.AcfunActionSignalJoinClub)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fansinfo()) {
    _internal_mutable_fansinfo()->::AcFunDanmu::AcFunUserInfo::MergeFrom(from._internal_fansinfo());
  }
  if (from.has_uperinfo()) {
    _internal_mutable_uperinfo()->::AcFunDanmu::AcFunUserInfo::MergeFrom(from._internal_uperinfo());
  }
  if (from.jointimems() != 0) {
    _internal_set_jointimems(from._internal_jointimems());
  }
}

void AcfunActionSignalJoinClub::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AcFunDanmu.AcfunActionSignalJoinClub)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcfunActionSignalJoinClub::CopyFrom(const AcfunActionSignalJoinClub& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.AcfunActionSignalJoinClub)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcfunActionSignalJoinClub::IsInitialized() const {
  return true;
}

void AcfunActionSignalJoinClub::InternalSwap(AcfunActionSignalJoinClub* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AcfunActionSignalJoinClub, jointimems_)
      + sizeof(AcfunActionSignalJoinClub::jointimems_)
      - PROTOBUF_FIELD_OFFSET(AcfunActionSignalJoinClub, fansinfo_)>(
          reinterpret_cast<char*>(&fansinfo_),
          reinterpret_cast<char*>(&other->fansinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AcfunActionSignalJoinClub::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AcFunDanmu::AcFunUserInfo* Arena::CreateMaybeMessage< ::AcFunDanmu::AcFunUserInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::AcFunUserInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::AcFunDanmu::AcfunActionSignalThrowBanana* Arena::CreateMaybeMessage< ::AcFunDanmu::AcfunActionSignalThrowBanana >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::AcfunActionSignalThrowBanana >(arena);
}
template<> PROTOBUF_NOINLINE ::AcFunDanmu::AcfunStateSignalDisplayInfo* Arena::CreateMaybeMessage< ::AcFunDanmu::AcfunStateSignalDisplayInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::AcfunStateSignalDisplayInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::AcFunDanmu::AcfunActionSignalJoinClub* Arena::CreateMaybeMessage< ::AcFunDanmu::AcfunActionSignalJoinClub >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::AcfunActionSignalJoinClub >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
