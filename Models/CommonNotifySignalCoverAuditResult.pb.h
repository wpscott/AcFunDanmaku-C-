// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommonNotifySignalCoverAuditResult.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_CommonNotifySignalCoverAuditResult_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_CommonNotifySignalCoverAuditResult_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_CommonNotifySignalCoverAuditResult_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_CommonNotifySignalCoverAuditResult_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_CommonNotifySignalCoverAuditResult_2eproto;
namespace AcFunDanmu {
class CommonNotifySignalCoverAuditResult;
struct CommonNotifySignalCoverAuditResultDefaultTypeInternal;
extern CommonNotifySignalCoverAuditResultDefaultTypeInternal _CommonNotifySignalCoverAuditResult_default_instance_;
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::CommonNotifySignalCoverAuditResult* Arena::CreateMaybeMessage<::AcFunDanmu::CommonNotifySignalCoverAuditResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {

enum CommonNotifySignalCoverAuditResult_AuditStatus : int {
  CommonNotifySignalCoverAuditResult_AuditStatus_SUCCESS = 0,
  CommonNotifySignalCoverAuditResult_AuditStatus_COVER_AUDIT_FAILED = 1,
  CommonNotifySignalCoverAuditResult_AuditStatus_CAPTION_AUDIT_FAILED = 2,
  CommonNotifySignalCoverAuditResult_AuditStatus_BOTH_FAILED = 3,
  CommonNotifySignalCoverAuditResult_AuditStatus_CommonNotifySignalCoverAuditResult_AuditStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CommonNotifySignalCoverAuditResult_AuditStatus_CommonNotifySignalCoverAuditResult_AuditStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CommonNotifySignalCoverAuditResult_AuditStatus_IsValid(int value);
constexpr CommonNotifySignalCoverAuditResult_AuditStatus CommonNotifySignalCoverAuditResult_AuditStatus_AuditStatus_MIN = CommonNotifySignalCoverAuditResult_AuditStatus_SUCCESS;
constexpr CommonNotifySignalCoverAuditResult_AuditStatus CommonNotifySignalCoverAuditResult_AuditStatus_AuditStatus_MAX = CommonNotifySignalCoverAuditResult_AuditStatus_BOTH_FAILED;
constexpr int CommonNotifySignalCoverAuditResult_AuditStatus_AuditStatus_ARRAYSIZE = CommonNotifySignalCoverAuditResult_AuditStatus_AuditStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommonNotifySignalCoverAuditResult_AuditStatus_descriptor();
template<typename T>
inline const std::string& CommonNotifySignalCoverAuditResult_AuditStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CommonNotifySignalCoverAuditResult_AuditStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CommonNotifySignalCoverAuditResult_AuditStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CommonNotifySignalCoverAuditResult_AuditStatus_descriptor(), enum_t_value);
}
inline bool CommonNotifySignalCoverAuditResult_AuditStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CommonNotifySignalCoverAuditResult_AuditStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CommonNotifySignalCoverAuditResult_AuditStatus>(
    CommonNotifySignalCoverAuditResult_AuditStatus_descriptor(), name, value);
}
// ===================================================================

class CommonNotifySignalCoverAuditResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.CommonNotifySignalCoverAuditResult) */ {
 public:
  inline CommonNotifySignalCoverAuditResult() : CommonNotifySignalCoverAuditResult(nullptr) {}
  ~CommonNotifySignalCoverAuditResult() override;
  explicit PROTOBUF_CONSTEXPR CommonNotifySignalCoverAuditResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommonNotifySignalCoverAuditResult(const CommonNotifySignalCoverAuditResult& from);
  CommonNotifySignalCoverAuditResult(CommonNotifySignalCoverAuditResult&& from) noexcept
    : CommonNotifySignalCoverAuditResult() {
    *this = ::std::move(from);
  }

  inline CommonNotifySignalCoverAuditResult& operator=(const CommonNotifySignalCoverAuditResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonNotifySignalCoverAuditResult& operator=(CommonNotifySignalCoverAuditResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommonNotifySignalCoverAuditResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommonNotifySignalCoverAuditResult* internal_default_instance() {
    return reinterpret_cast<const CommonNotifySignalCoverAuditResult*>(
               &_CommonNotifySignalCoverAuditResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CommonNotifySignalCoverAuditResult& a, CommonNotifySignalCoverAuditResult& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonNotifySignalCoverAuditResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonNotifySignalCoverAuditResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommonNotifySignalCoverAuditResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommonNotifySignalCoverAuditResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommonNotifySignalCoverAuditResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommonNotifySignalCoverAuditResult& from) {
    CommonNotifySignalCoverAuditResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonNotifySignalCoverAuditResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.CommonNotifySignalCoverAuditResult";
  }
  protected:
  explicit CommonNotifySignalCoverAuditResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CommonNotifySignalCoverAuditResult_AuditStatus AuditStatus;
  static constexpr AuditStatus SUCCESS =
    CommonNotifySignalCoverAuditResult_AuditStatus_SUCCESS;
  static constexpr AuditStatus COVER_AUDIT_FAILED =
    CommonNotifySignalCoverAuditResult_AuditStatus_COVER_AUDIT_FAILED;
  static constexpr AuditStatus CAPTION_AUDIT_FAILED =
    CommonNotifySignalCoverAuditResult_AuditStatus_CAPTION_AUDIT_FAILED;
  static constexpr AuditStatus BOTH_FAILED =
    CommonNotifySignalCoverAuditResult_AuditStatus_BOTH_FAILED;
  static inline bool AuditStatus_IsValid(int value) {
    return CommonNotifySignalCoverAuditResult_AuditStatus_IsValid(value);
  }
  static constexpr AuditStatus AuditStatus_MIN =
    CommonNotifySignalCoverAuditResult_AuditStatus_AuditStatus_MIN;
  static constexpr AuditStatus AuditStatus_MAX =
    CommonNotifySignalCoverAuditResult_AuditStatus_AuditStatus_MAX;
  static constexpr int AuditStatus_ARRAYSIZE =
    CommonNotifySignalCoverAuditResult_AuditStatus_AuditStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AuditStatus_descriptor() {
    return CommonNotifySignalCoverAuditResult_AuditStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& AuditStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AuditStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AuditStatus_Name.");
    return CommonNotifySignalCoverAuditResult_AuditStatus_Name(enum_t_value);
  }
  static inline bool AuditStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AuditStatus* value) {
    return CommonNotifySignalCoverAuditResult_AuditStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAuditStatusFieldNumber = 1,
  };
  // .AcFunDanmu.CommonNotifySignalCoverAuditResult.AuditStatus auditStatus = 1;
  void clear_auditstatus();
  ::AcFunDanmu::CommonNotifySignalCoverAuditResult_AuditStatus auditstatus() const;
  void set_auditstatus(::AcFunDanmu::CommonNotifySignalCoverAuditResult_AuditStatus value);
  private:
  ::AcFunDanmu::CommonNotifySignalCoverAuditResult_AuditStatus _internal_auditstatus() const;
  void _internal_set_auditstatus(::AcFunDanmu::CommonNotifySignalCoverAuditResult_AuditStatus value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.CommonNotifySignalCoverAuditResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int auditstatus_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CommonNotifySignalCoverAuditResult_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CommonNotifySignalCoverAuditResult

// .AcFunDanmu.CommonNotifySignalCoverAuditResult.AuditStatus auditStatus = 1;
inline void CommonNotifySignalCoverAuditResult::clear_auditstatus() {
  _impl_.auditstatus_ = 0;
}
inline ::AcFunDanmu::CommonNotifySignalCoverAuditResult_AuditStatus CommonNotifySignalCoverAuditResult::_internal_auditstatus() const {
  return static_cast< ::AcFunDanmu::CommonNotifySignalCoverAuditResult_AuditStatus >(_impl_.auditstatus_);
}
inline ::AcFunDanmu::CommonNotifySignalCoverAuditResult_AuditStatus CommonNotifySignalCoverAuditResult::auditstatus() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonNotifySignalCoverAuditResult.auditStatus)
  return _internal_auditstatus();
}
inline void CommonNotifySignalCoverAuditResult::_internal_set_auditstatus(::AcFunDanmu::CommonNotifySignalCoverAuditResult_AuditStatus value) {
  
  _impl_.auditstatus_ = value;
}
inline void CommonNotifySignalCoverAuditResult::set_auditstatus(::AcFunDanmu::CommonNotifySignalCoverAuditResult_AuditStatus value) {
  _internal_set_auditstatus(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommonNotifySignalCoverAuditResult.auditStatus)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace AcFunDanmu

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::AcFunDanmu::CommonNotifySignalCoverAuditResult_AuditStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::CommonNotifySignalCoverAuditResult_AuditStatus>() {
  return ::AcFunDanmu::CommonNotifySignalCoverAuditResult_AuditStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_CommonNotifySignalCoverAuditResult_2eproto
