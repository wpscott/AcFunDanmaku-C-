// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PacketHeader.proto

#include "PacketHeader.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace AcFunDanmu {
constexpr PacketHeader::PacketHeader(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : features_()
  , _features_cached_byte_size_()
  , kpn_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tokeninfo_(nullptr)
  , uid_(int64_t{0})
  , instanceid_(int64_t{0})
  , appid_(0)
  , flags_(0u)
  , encodingtype_(0)

  , decodedpayloadlen_(0u)
  , seqid_(int64_t{0})
  , encryptionmode_(0)
{}
struct PacketHeaderDefaultTypeInternal {
  constexpr PacketHeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PacketHeaderDefaultTypeInternal() {}
  union {
    PacketHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PacketHeaderDefaultTypeInternal _PacketHeader_default_instance_;
}  // namespace AcFunDanmu
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_PacketHeader_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_PacketHeader_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_PacketHeader_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_PacketHeader_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::PacketHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::PacketHeader, appid_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::PacketHeader, uid_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::PacketHeader, instanceid_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::PacketHeader, flags_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::PacketHeader, encodingtype_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::PacketHeader, decodedpayloadlen_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::PacketHeader, encryptionmode_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::PacketHeader, tokeninfo_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::PacketHeader, seqid_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::PacketHeader, features_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::PacketHeader, kpn_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::AcFunDanmu::PacketHeader)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AcFunDanmu::_PacketHeader_default_instance_),
};

const char descriptor_table_protodef_PacketHeader_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022PacketHeader.proto\022\nAcFunDanmu\032\017TokenI"
  "nfo.proto\"\340\004\n\014PacketHeader\022\r\n\005appId\030\001 \001("
  "\005\022\013\n\003uid\030\002 \001(\003\022\022\n\ninstanceId\030\003 \001(\003\022\r\n\005fl"
  "ags\030\005 \001(\r\022;\n\014encodingType\030\006 \001(\0162%.AcFunD"
  "anmu.PacketHeader.EncodingType\022\031\n\021decode"
  "dPayloadLen\030\007 \001(\r\022\?\n\016encryptionMode\030\010 \001("
  "\0162\'.AcFunDanmu.PacketHeader.EncryptionMo"
  "de\022(\n\ttokenInfo\030\t \001(\0132\025.AcFunDanmu.Token"
  "Info\022\r\n\005seqId\030\n \001(\003\0222\n\010features\030\013 \003(\0162 ."
  "AcFunDanmu.PacketHeader.Feature\022\013\n\003kpn\030\014"
  " \001(\t\"\?\n\005Flags\022\020\n\014kDirUpstream\020\000\022\022\n\016kDirD"
  "ownstream\020\001\022\014\n\010kDirMask\020\001\032\002\020\001\"3\n\014Encodin"
  "gType\022\021\n\rkEncodingNone\020\000\022\020\n\014kEncodingLz4"
  "\020\001\"]\n\016EncryptionMode\022\023\n\017kEncryptionNone\020"
  "\000\022\033\n\027kEncryptionServiceToken\020\001\022\031\n\025kEncry"
  "ptionSessionKey\020\002\")\n\007Feature\022\014\n\010kReserve"
  "\020\000\022\020\n\014kCompressLz4\020\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_PacketHeader_2eproto_deps[1] = {
  &::descriptor_table_TokenInfo_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_PacketHeader_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_PacketHeader_2eproto = {
  false, false, 668, descriptor_table_protodef_PacketHeader_2eproto, "PacketHeader.proto", 
  &descriptor_table_PacketHeader_2eproto_once, descriptor_table_PacketHeader_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_PacketHeader_2eproto::offsets,
  file_level_metadata_PacketHeader_2eproto, file_level_enum_descriptors_PacketHeader_2eproto, file_level_service_descriptors_PacketHeader_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_PacketHeader_2eproto_getter() {
  return &descriptor_table_PacketHeader_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_PacketHeader_2eproto(&descriptor_table_PacketHeader_2eproto);
namespace AcFunDanmu {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PacketHeader_Flags_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_PacketHeader_2eproto);
  return file_level_enum_descriptors_PacketHeader_2eproto[0];
}
bool PacketHeader_Flags_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PacketHeader_Flags PacketHeader::kDirUpstream;
constexpr PacketHeader_Flags PacketHeader::kDirDownstream;
constexpr PacketHeader_Flags PacketHeader::kDirMask;
constexpr PacketHeader_Flags PacketHeader::Flags_MIN;
constexpr PacketHeader_Flags PacketHeader::Flags_MAX;
constexpr int PacketHeader::Flags_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PacketHeader_EncodingType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_PacketHeader_2eproto);
  return file_level_enum_descriptors_PacketHeader_2eproto[1];
}
bool PacketHeader_EncodingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PacketHeader_EncodingType PacketHeader::kEncodingNone;
constexpr PacketHeader_EncodingType PacketHeader::kEncodingLz4;
constexpr PacketHeader_EncodingType PacketHeader::EncodingType_MIN;
constexpr PacketHeader_EncodingType PacketHeader::EncodingType_MAX;
constexpr int PacketHeader::EncodingType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PacketHeader_EncryptionMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_PacketHeader_2eproto);
  return file_level_enum_descriptors_PacketHeader_2eproto[2];
}
bool PacketHeader_EncryptionMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PacketHeader_EncryptionMode PacketHeader::kEncryptionNone;
constexpr PacketHeader_EncryptionMode PacketHeader::kEncryptionServiceToken;
constexpr PacketHeader_EncryptionMode PacketHeader::kEncryptionSessionKey;
constexpr PacketHeader_EncryptionMode PacketHeader::EncryptionMode_MIN;
constexpr PacketHeader_EncryptionMode PacketHeader::EncryptionMode_MAX;
constexpr int PacketHeader::EncryptionMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PacketHeader_Feature_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_PacketHeader_2eproto);
  return file_level_enum_descriptors_PacketHeader_2eproto[3];
}
bool PacketHeader_Feature_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PacketHeader_Feature PacketHeader::kReserve;
constexpr PacketHeader_Feature PacketHeader::kCompressLz4;
constexpr PacketHeader_Feature PacketHeader::Feature_MIN;
constexpr PacketHeader_Feature PacketHeader::Feature_MAX;
constexpr int PacketHeader::Feature_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class PacketHeader::_Internal {
 public:
  static const ::AcFunDanmu::TokenInfo& tokeninfo(const PacketHeader* msg);
};

const ::AcFunDanmu::TokenInfo&
PacketHeader::_Internal::tokeninfo(const PacketHeader* msg) {
  return *msg->tokeninfo_;
}
void PacketHeader::clear_tokeninfo() {
  if (GetArenaForAllocation() == nullptr && tokeninfo_ != nullptr) {
    delete tokeninfo_;
  }
  tokeninfo_ = nullptr;
}
PacketHeader::PacketHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  features_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.PacketHeader)
}
PacketHeader::PacketHeader(const PacketHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      features_(from.features_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  kpn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_kpn().empty()) {
    kpn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_kpn(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_tokeninfo()) {
    tokeninfo_ = new ::AcFunDanmu::TokenInfo(*from.tokeninfo_);
  } else {
    tokeninfo_ = nullptr;
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&encryptionmode_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(encryptionmode_));
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.PacketHeader)
}

void PacketHeader::SharedCtor() {
kpn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tokeninfo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&encryptionmode_) -
    reinterpret_cast<char*>(&tokeninfo_)) + sizeof(encryptionmode_));
}

PacketHeader::~PacketHeader() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.PacketHeader)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PacketHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  kpn_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tokeninfo_;
}

void PacketHeader::ArenaDtor(void* object) {
  PacketHeader* _this = reinterpret_cast< PacketHeader* >(object);
  (void)_this;
}
void PacketHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PacketHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PacketHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.PacketHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  features_.Clear();
  kpn_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && tokeninfo_ != nullptr) {
    delete tokeninfo_;
  }
  tokeninfo_ = nullptr;
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&encryptionmode_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(encryptionmode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PacketHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 appId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 instanceId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          instanceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 flags = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AcFunDanmu.PacketHeader.EncodingType encodingType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_encodingtype(static_cast<::AcFunDanmu::PacketHeader_EncodingType>(val));
        } else goto handle_unusual;
        continue;
      // uint32 decodedPayloadLen = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          decodedpayloadlen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AcFunDanmu.PacketHeader.EncryptionMode encryptionMode = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_encryptionmode(static_cast<::AcFunDanmu::PacketHeader_EncryptionMode>(val));
        } else goto handle_unusual;
        continue;
      // .AcFunDanmu.TokenInfo tokenInfo = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_tokeninfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 seqId = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          seqid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .AcFunDanmu.PacketHeader.Feature features = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_features(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_features(static_cast<::AcFunDanmu::PacketHeader_Feature>(val));
        } else goto handle_unusual;
        continue;
      // string kpn = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_kpn();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AcFunDanmu.PacketHeader.kpn"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PacketHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.PacketHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 appId = 1;
  if (this->appid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_appid(), target);
  }

  // int64 uid = 2;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_uid(), target);
  }

  // int64 instanceId = 3;
  if (this->instanceid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_instanceid(), target);
  }

  // uint32 flags = 5;
  if (this->flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_flags(), target);
  }

  // .AcFunDanmu.PacketHeader.EncodingType encodingType = 6;
  if (this->encodingtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_encodingtype(), target);
  }

  // uint32 decodedPayloadLen = 7;
  if (this->decodedpayloadlen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_decodedpayloadlen(), target);
  }

  // .AcFunDanmu.PacketHeader.EncryptionMode encryptionMode = 8;
  if (this->encryptionmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_encryptionmode(), target);
  }

  // .AcFunDanmu.TokenInfo tokenInfo = 9;
  if (this->has_tokeninfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::tokeninfo(this), target, stream);
  }

  // int64 seqId = 10;
  if (this->seqid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_seqid(), target);
  }

  // repeated .AcFunDanmu.PacketHeader.Feature features = 11;
  {
    int byte_size = _features_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          11, features_, byte_size, target);
    }
  }

  // string kpn = 12;
  if (!this->kpn().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_kpn().data(), static_cast<int>(this->_internal_kpn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.PacketHeader.kpn");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_kpn(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.PacketHeader)
  return target;
}

size_t PacketHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.PacketHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .AcFunDanmu.PacketHeader.Feature features = 11;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_features_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_features(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _features_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string kpn = 12;
  if (!this->kpn().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_kpn());
  }

  // .AcFunDanmu.TokenInfo tokenInfo = 9;
  if (this->has_tokeninfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tokeninfo_);
  }

  // int64 uid = 2;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_uid());
  }

  // int64 instanceId = 3;
  if (this->instanceid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_instanceid());
  }

  // int32 appId = 1;
  if (this->appid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_appid());
  }

  // uint32 flags = 5;
  if (this->flags() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_flags());
  }

  // .AcFunDanmu.PacketHeader.EncodingType encodingType = 6;
  if (this->encodingtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_encodingtype());
  }

  // uint32 decodedPayloadLen = 7;
  if (this->decodedpayloadlen() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_decodedpayloadlen());
  }

  // int64 seqId = 10;
  if (this->seqid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_seqid());
  }

  // .AcFunDanmu.PacketHeader.EncryptionMode encryptionMode = 8;
  if (this->encryptionmode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_encryptionmode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PacketHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AcFunDanmu.PacketHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const PacketHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PacketHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AcFunDanmu.PacketHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AcFunDanmu.PacketHeader)
    MergeFrom(*source);
  }
}

void PacketHeader::MergeFrom(const PacketHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.PacketHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  features_.MergeFrom(from.features_);
  if (!from.kpn().empty()) {
    _internal_set_kpn(from._internal_kpn());
  }
  if (from.has_tokeninfo()) {
    _internal_mutable_tokeninfo()->::AcFunDanmu::TokenInfo::MergeFrom(from._internal_tokeninfo());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.instanceid() != 0) {
    _internal_set_instanceid(from._internal_instanceid());
  }
  if (from.appid() != 0) {
    _internal_set_appid(from._internal_appid());
  }
  if (from.flags() != 0) {
    _internal_set_flags(from._internal_flags());
  }
  if (from.encodingtype() != 0) {
    _internal_set_encodingtype(from._internal_encodingtype());
  }
  if (from.decodedpayloadlen() != 0) {
    _internal_set_decodedpayloadlen(from._internal_decodedpayloadlen());
  }
  if (from.seqid() != 0) {
    _internal_set_seqid(from._internal_seqid());
  }
  if (from.encryptionmode() != 0) {
    _internal_set_encryptionmode(from._internal_encryptionmode());
  }
}

void PacketHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AcFunDanmu.PacketHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PacketHeader::CopyFrom(const PacketHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.PacketHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketHeader::IsInitialized() const {
  return true;
}

void PacketHeader::InternalSwap(PacketHeader* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  features_.InternalSwap(&other->features_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &kpn_, GetArenaForAllocation(),
      &other->kpn_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PacketHeader, encryptionmode_)
      + sizeof(PacketHeader::encryptionmode_)
      - PROTOBUF_FIELD_OFFSET(PacketHeader, tokeninfo_)>(
          reinterpret_cast<char*>(&tokeninfo_),
          reinterpret_cast<char*>(&other->tokeninfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PacketHeader::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_PacketHeader_2eproto_getter, &descriptor_table_PacketHeader_2eproto_once,
      file_level_metadata_PacketHeader_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AcFunDanmu::PacketHeader* Arena::CreateMaybeMessage< ::AcFunDanmu::PacketHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::PacketHeader >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
