// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ZtLiveCsEnterRoom.proto

#include "ZtLiveCsEnterRoom.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace AcFunDanmu {
PROTOBUF_CONSTEXPR ZtLiveCsEnterRoom::ZtLiveCsEnterRoom(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.enterroomattach_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.clientlivesdkversion_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.isauthor_)*/false
  , /*decltype(_impl_.reconnectcount_)*/0
  , /*decltype(_impl_.lasterrorcode_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ZtLiveCsEnterRoomDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ZtLiveCsEnterRoomDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ZtLiveCsEnterRoomDefaultTypeInternal() {}
  union {
    ZtLiveCsEnterRoom _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ZtLiveCsEnterRoomDefaultTypeInternal _ZtLiveCsEnterRoom_default_instance_;
PROTOBUF_CONSTEXPR ZtLiveCsEnterRoomAck::ZtLiveCsEnterRoomAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.heartbeatintervalms_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ZtLiveCsEnterRoomAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ZtLiveCsEnterRoomAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ZtLiveCsEnterRoomAckDefaultTypeInternal() {}
  union {
    ZtLiveCsEnterRoomAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ZtLiveCsEnterRoomAckDefaultTypeInternal _ZtLiveCsEnterRoomAck_default_instance_;
}  // namespace AcFunDanmu
static ::_pb::Metadata file_level_metadata_ZtLiveCsEnterRoom_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_ZtLiveCsEnterRoom_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ZtLiveCsEnterRoom_2eproto = nullptr;

const uint32_t TableStruct_ZtLiveCsEnterRoom_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::ZtLiveCsEnterRoom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::ZtLiveCsEnterRoom, _impl_.isauthor_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::ZtLiveCsEnterRoom, _impl_.reconnectcount_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::ZtLiveCsEnterRoom, _impl_.lasterrorcode_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::ZtLiveCsEnterRoom, _impl_.enterroomattach_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::ZtLiveCsEnterRoom, _impl_.clientlivesdkversion_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::ZtLiveCsEnterRoomAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::ZtLiveCsEnterRoomAck, _impl_.heartbeatintervalms_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::AcFunDanmu::ZtLiveCsEnterRoom)},
  { 11, -1, -1, sizeof(::AcFunDanmu::ZtLiveCsEnterRoomAck)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::AcFunDanmu::_ZtLiveCsEnterRoom_default_instance_._instance,
  &::AcFunDanmu::_ZtLiveCsEnterRoomAck_default_instance_._instance,
};

const char descriptor_table_protodef_ZtLiveCsEnterRoom_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027ZtLiveCsEnterRoom.proto\022\nAcFunDanmu\"\213\001"
  "\n\021ZtLiveCsEnterRoom\022\020\n\010isAuthor\030\001 \001(\010\022\026\n"
  "\016reconnectCount\030\002 \001(\005\022\025\n\rlastErrorCode\030\003"
  " \001(\005\022\027\n\017enterRoomAttach\030\004 \001(\t\022\034\n\024clientL"
  "iveSdkVersion\030\005 \001(\t\"3\n\024ZtLiveCsEnterRoom"
  "Ack\022\033\n\023heartbeatIntervalMs\030\001 \001(\003b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_ZtLiveCsEnterRoom_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ZtLiveCsEnterRoom_2eproto = {
    false, false, 240, descriptor_table_protodef_ZtLiveCsEnterRoom_2eproto,
    "ZtLiveCsEnterRoom.proto",
    &descriptor_table_ZtLiveCsEnterRoom_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_ZtLiveCsEnterRoom_2eproto::offsets,
    file_level_metadata_ZtLiveCsEnterRoom_2eproto, file_level_enum_descriptors_ZtLiveCsEnterRoom_2eproto,
    file_level_service_descriptors_ZtLiveCsEnterRoom_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ZtLiveCsEnterRoom_2eproto_getter() {
  return &descriptor_table_ZtLiveCsEnterRoom_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ZtLiveCsEnterRoom_2eproto(&descriptor_table_ZtLiveCsEnterRoom_2eproto);
namespace AcFunDanmu {

// ===================================================================

class ZtLiveCsEnterRoom::_Internal {
 public:
};

ZtLiveCsEnterRoom::ZtLiveCsEnterRoom(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.ZtLiveCsEnterRoom)
}
ZtLiveCsEnterRoom::ZtLiveCsEnterRoom(const ZtLiveCsEnterRoom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ZtLiveCsEnterRoom* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.enterroomattach_){}
    , decltype(_impl_.clientlivesdkversion_){}
    , decltype(_impl_.isauthor_){}
    , decltype(_impl_.reconnectcount_){}
    , decltype(_impl_.lasterrorcode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.enterroomattach_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.enterroomattach_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_enterroomattach().empty()) {
    _this->_impl_.enterroomattach_.Set(from._internal_enterroomattach(), 
      _this->GetArenaForAllocation());
  }
  _impl_.clientlivesdkversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientlivesdkversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientlivesdkversion().empty()) {
    _this->_impl_.clientlivesdkversion_.Set(from._internal_clientlivesdkversion(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.isauthor_, &from._impl_.isauthor_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lasterrorcode_) -
    reinterpret_cast<char*>(&_impl_.isauthor_)) + sizeof(_impl_.lasterrorcode_));
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.ZtLiveCsEnterRoom)
}

inline void ZtLiveCsEnterRoom::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.enterroomattach_){}
    , decltype(_impl_.clientlivesdkversion_){}
    , decltype(_impl_.isauthor_){false}
    , decltype(_impl_.reconnectcount_){0}
    , decltype(_impl_.lasterrorcode_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.enterroomattach_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.enterroomattach_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.clientlivesdkversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientlivesdkversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ZtLiveCsEnterRoom::~ZtLiveCsEnterRoom() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.ZtLiveCsEnterRoom)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ZtLiveCsEnterRoom::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.enterroomattach_.Destroy();
  _impl_.clientlivesdkversion_.Destroy();
}

void ZtLiveCsEnterRoom::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ZtLiveCsEnterRoom::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.ZtLiveCsEnterRoom)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.enterroomattach_.ClearToEmpty();
  _impl_.clientlivesdkversion_.ClearToEmpty();
  ::memset(&_impl_.isauthor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.lasterrorcode_) -
      reinterpret_cast<char*>(&_impl_.isauthor_)) + sizeof(_impl_.lasterrorcode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ZtLiveCsEnterRoom::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool isAuthor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.isauthor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 reconnectCount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.reconnectcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 lastErrorCode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.lasterrorcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string enterRoomAttach = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_enterroomattach();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.ZtLiveCsEnterRoom.enterRoomAttach"));
        } else
          goto handle_unusual;
        continue;
      // string clientLiveSdkVersion = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_clientlivesdkversion();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AcFunDanmu.ZtLiveCsEnterRoom.clientLiveSdkVersion"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ZtLiveCsEnterRoom::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.ZtLiveCsEnterRoom)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isAuthor = 1;
  if (this->_internal_isauthor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_isauthor(), target);
  }

  // int32 reconnectCount = 2;
  if (this->_internal_reconnectcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_reconnectcount(), target);
  }

  // int32 lastErrorCode = 3;
  if (this->_internal_lasterrorcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_lasterrorcode(), target);
  }

  // string enterRoomAttach = 4;
  if (!this->_internal_enterroomattach().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_enterroomattach().data(), static_cast<int>(this->_internal_enterroomattach().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.ZtLiveCsEnterRoom.enterRoomAttach");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_enterroomattach(), target);
  }

  // string clientLiveSdkVersion = 5;
  if (!this->_internal_clientlivesdkversion().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientlivesdkversion().data(), static_cast<int>(this->_internal_clientlivesdkversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.ZtLiveCsEnterRoom.clientLiveSdkVersion");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_clientlivesdkversion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.ZtLiveCsEnterRoom)
  return target;
}

size_t ZtLiveCsEnterRoom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.ZtLiveCsEnterRoom)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string enterRoomAttach = 4;
  if (!this->_internal_enterroomattach().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enterroomattach());
  }

  // string clientLiveSdkVersion = 5;
  if (!this->_internal_clientlivesdkversion().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientlivesdkversion());
  }

  // bool isAuthor = 1;
  if (this->_internal_isauthor() != 0) {
    total_size += 1 + 1;
  }

  // int32 reconnectCount = 2;
  if (this->_internal_reconnectcount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_reconnectcount());
  }

  // int32 lastErrorCode = 3;
  if (this->_internal_lasterrorcode() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_lasterrorcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ZtLiveCsEnterRoom::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ZtLiveCsEnterRoom::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ZtLiveCsEnterRoom::GetClassData() const { return &_class_data_; }


void ZtLiveCsEnterRoom::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ZtLiveCsEnterRoom*>(&to_msg);
  auto& from = static_cast<const ZtLiveCsEnterRoom&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.ZtLiveCsEnterRoom)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_enterroomattach().empty()) {
    _this->_internal_set_enterroomattach(from._internal_enterroomattach());
  }
  if (!from._internal_clientlivesdkversion().empty()) {
    _this->_internal_set_clientlivesdkversion(from._internal_clientlivesdkversion());
  }
  if (from._internal_isauthor() != 0) {
    _this->_internal_set_isauthor(from._internal_isauthor());
  }
  if (from._internal_reconnectcount() != 0) {
    _this->_internal_set_reconnectcount(from._internal_reconnectcount());
  }
  if (from._internal_lasterrorcode() != 0) {
    _this->_internal_set_lasterrorcode(from._internal_lasterrorcode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ZtLiveCsEnterRoom::CopyFrom(const ZtLiveCsEnterRoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.ZtLiveCsEnterRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZtLiveCsEnterRoom::IsInitialized() const {
  return true;
}

void ZtLiveCsEnterRoom::InternalSwap(ZtLiveCsEnterRoom* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.enterroomattach_, lhs_arena,
      &other->_impl_.enterroomattach_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientlivesdkversion_, lhs_arena,
      &other->_impl_.clientlivesdkversion_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ZtLiveCsEnterRoom, _impl_.lasterrorcode_)
      + sizeof(ZtLiveCsEnterRoom::_impl_.lasterrorcode_)
      - PROTOBUF_FIELD_OFFSET(ZtLiveCsEnterRoom, _impl_.isauthor_)>(
          reinterpret_cast<char*>(&_impl_.isauthor_),
          reinterpret_cast<char*>(&other->_impl_.isauthor_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ZtLiveCsEnterRoom::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ZtLiveCsEnterRoom_2eproto_getter, &descriptor_table_ZtLiveCsEnterRoom_2eproto_once,
      file_level_metadata_ZtLiveCsEnterRoom_2eproto[0]);
}

// ===================================================================

class ZtLiveCsEnterRoomAck::_Internal {
 public:
};

ZtLiveCsEnterRoomAck::ZtLiveCsEnterRoomAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.ZtLiveCsEnterRoomAck)
}
ZtLiveCsEnterRoomAck::ZtLiveCsEnterRoomAck(const ZtLiveCsEnterRoomAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ZtLiveCsEnterRoomAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.heartbeatintervalms_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.heartbeatintervalms_ = from._impl_.heartbeatintervalms_;
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.ZtLiveCsEnterRoomAck)
}

inline void ZtLiveCsEnterRoomAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.heartbeatintervalms_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ZtLiveCsEnterRoomAck::~ZtLiveCsEnterRoomAck() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.ZtLiveCsEnterRoomAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ZtLiveCsEnterRoomAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ZtLiveCsEnterRoomAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ZtLiveCsEnterRoomAck::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.ZtLiveCsEnterRoomAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.heartbeatintervalms_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ZtLiveCsEnterRoomAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 heartbeatIntervalMs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.heartbeatintervalms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ZtLiveCsEnterRoomAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.ZtLiveCsEnterRoomAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 heartbeatIntervalMs = 1;
  if (this->_internal_heartbeatintervalms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_heartbeatintervalms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.ZtLiveCsEnterRoomAck)
  return target;
}

size_t ZtLiveCsEnterRoomAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.ZtLiveCsEnterRoomAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 heartbeatIntervalMs = 1;
  if (this->_internal_heartbeatintervalms() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_heartbeatintervalms());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ZtLiveCsEnterRoomAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ZtLiveCsEnterRoomAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ZtLiveCsEnterRoomAck::GetClassData() const { return &_class_data_; }


void ZtLiveCsEnterRoomAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ZtLiveCsEnterRoomAck*>(&to_msg);
  auto& from = static_cast<const ZtLiveCsEnterRoomAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.ZtLiveCsEnterRoomAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_heartbeatintervalms() != 0) {
    _this->_internal_set_heartbeatintervalms(from._internal_heartbeatintervalms());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ZtLiveCsEnterRoomAck::CopyFrom(const ZtLiveCsEnterRoomAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.ZtLiveCsEnterRoomAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZtLiveCsEnterRoomAck::IsInitialized() const {
  return true;
}

void ZtLiveCsEnterRoomAck::InternalSwap(ZtLiveCsEnterRoomAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.heartbeatintervalms_, other->_impl_.heartbeatintervalms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ZtLiveCsEnterRoomAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ZtLiveCsEnterRoom_2eproto_getter, &descriptor_table_ZtLiveCsEnterRoom_2eproto_once,
      file_level_metadata_ZtLiveCsEnterRoom_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AcFunDanmu::ZtLiveCsEnterRoom*
Arena::CreateMaybeMessage< ::AcFunDanmu::ZtLiveCsEnterRoom >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::ZtLiveCsEnterRoom >(arena);
}
template<> PROTOBUF_NOINLINE ::AcFunDanmu::ZtLiveCsEnterRoomAck*
Arena::CreateMaybeMessage< ::AcFunDanmu::ZtLiveCsEnterRoomAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::ZtLiveCsEnterRoomAck >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
