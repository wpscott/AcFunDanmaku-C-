// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommonStateSignalTopUsers.proto

#include "CommonStateSignalTopUsers.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace AcFunDanmu {
constexpr CommonStateSignalTopUsers_TopUser::CommonStateSignalTopUsers_TopUser(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : customwatchinglistdata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , displaysendamount_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , userinfo_(nullptr)
  , anonymoususer_(false){}
struct CommonStateSignalTopUsers_TopUserDefaultTypeInternal {
  constexpr CommonStateSignalTopUsers_TopUserDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommonStateSignalTopUsers_TopUserDefaultTypeInternal() {}
  union {
    CommonStateSignalTopUsers_TopUser _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommonStateSignalTopUsers_TopUserDefaultTypeInternal _CommonStateSignalTopUsers_TopUser_default_instance_;
constexpr CommonStateSignalTopUsers::CommonStateSignalTopUsers(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_(){}
struct CommonStateSignalTopUsersDefaultTypeInternal {
  constexpr CommonStateSignalTopUsersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommonStateSignalTopUsersDefaultTypeInternal() {}
  union {
    CommonStateSignalTopUsers _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommonStateSignalTopUsersDefaultTypeInternal _CommonStateSignalTopUsers_default_instance_;
}  // namespace AcFunDanmu
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_CommonStateSignalTopUsers_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_CommonStateSignalTopUsers_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_CommonStateSignalTopUsers_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_CommonStateSignalTopUsers_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonStateSignalTopUsers_TopUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonStateSignalTopUsers_TopUser, userinfo_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonStateSignalTopUsers_TopUser, customwatchinglistdata_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonStateSignalTopUsers_TopUser, displaysendamount_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonStateSignalTopUsers_TopUser, anonymoususer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonStateSignalTopUsers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonStateSignalTopUsers, user_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::AcFunDanmu::CommonStateSignalTopUsers_TopUser)},
  { 9, -1, sizeof(::AcFunDanmu::CommonStateSignalTopUsers)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AcFunDanmu::_CommonStateSignalTopUsers_TopUser_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AcFunDanmu::_CommonStateSignalTopUsers_default_instance_),
};

const char descriptor_table_protodef_CommonStateSignalTopUsers_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037CommonStateSignalTopUsers.proto\022\nAcFun"
  "Danmu\032\024ZtLiveUserInfo.proto\"\344\001\n\031CommonSt"
  "ateSignalTopUsers\022;\n\004user\030\001 \003(\0132-.AcFunD"
  "anmu.CommonStateSignalTopUsers.TopUser\032\211"
  "\001\n\007TopUser\022,\n\010userInfo\030\001 \001(\0132\032.AcFunDanm"
  "u.ZtLiveUserInfo\022\036\n\026customWatchingListDa"
  "ta\030\003 \001(\t\022\031\n\021displaySendAmount\030\004 \001(\t\022\025\n\ra"
  "nonymousUser\030\005 \001(\010b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_CommonStateSignalTopUsers_2eproto_deps[1] = {
  &::descriptor_table_ZtLiveUserInfo_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_CommonStateSignalTopUsers_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_CommonStateSignalTopUsers_2eproto = {
  false, false, 306, descriptor_table_protodef_CommonStateSignalTopUsers_2eproto, "CommonStateSignalTopUsers.proto", 
  &descriptor_table_CommonStateSignalTopUsers_2eproto_once, descriptor_table_CommonStateSignalTopUsers_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_CommonStateSignalTopUsers_2eproto::offsets,
  file_level_metadata_CommonStateSignalTopUsers_2eproto, file_level_enum_descriptors_CommonStateSignalTopUsers_2eproto, file_level_service_descriptors_CommonStateSignalTopUsers_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_CommonStateSignalTopUsers_2eproto_getter() {
  return &descriptor_table_CommonStateSignalTopUsers_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_CommonStateSignalTopUsers_2eproto(&descriptor_table_CommonStateSignalTopUsers_2eproto);
namespace AcFunDanmu {

// ===================================================================

class CommonStateSignalTopUsers_TopUser::_Internal {
 public:
  static const ::AcFunDanmu::ZtLiveUserInfo& userinfo(const CommonStateSignalTopUsers_TopUser* msg);
};

const ::AcFunDanmu::ZtLiveUserInfo&
CommonStateSignalTopUsers_TopUser::_Internal::userinfo(const CommonStateSignalTopUsers_TopUser* msg) {
  return *msg->userinfo_;
}
void CommonStateSignalTopUsers_TopUser::clear_userinfo() {
  if (GetArenaForAllocation() == nullptr && userinfo_ != nullptr) {
    delete userinfo_;
  }
  userinfo_ = nullptr;
}
CommonStateSignalTopUsers_TopUser::CommonStateSignalTopUsers_TopUser(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.CommonStateSignalTopUsers.TopUser)
}
CommonStateSignalTopUsers_TopUser::CommonStateSignalTopUsers_TopUser(const CommonStateSignalTopUsers_TopUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  customwatchinglistdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_customwatchinglistdata().empty()) {
    customwatchinglistdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_customwatchinglistdata(), 
      GetArenaForAllocation());
  }
  displaysendamount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_displaysendamount().empty()) {
    displaysendamount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_displaysendamount(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_userinfo()) {
    userinfo_ = new ::AcFunDanmu::ZtLiveUserInfo(*from.userinfo_);
  } else {
    userinfo_ = nullptr;
  }
  anonymoususer_ = from.anonymoususer_;
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.CommonStateSignalTopUsers.TopUser)
}

void CommonStateSignalTopUsers_TopUser::SharedCtor() {
customwatchinglistdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
displaysendamount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&userinfo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&anonymoususer_) -
    reinterpret_cast<char*>(&userinfo_)) + sizeof(anonymoususer_));
}

CommonStateSignalTopUsers_TopUser::~CommonStateSignalTopUsers_TopUser() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.CommonStateSignalTopUsers.TopUser)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommonStateSignalTopUsers_TopUser::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  customwatchinglistdata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  displaysendamount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete userinfo_;
}

void CommonStateSignalTopUsers_TopUser::ArenaDtor(void* object) {
  CommonStateSignalTopUsers_TopUser* _this = reinterpret_cast< CommonStateSignalTopUsers_TopUser* >(object);
  (void)_this;
}
void CommonStateSignalTopUsers_TopUser::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommonStateSignalTopUsers_TopUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommonStateSignalTopUsers_TopUser::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.CommonStateSignalTopUsers.TopUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  customwatchinglistdata_.ClearToEmpty();
  displaysendamount_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && userinfo_ != nullptr) {
    delete userinfo_;
  }
  userinfo_ = nullptr;
  anonymoususer_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommonStateSignalTopUsers_TopUser::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .AcFunDanmu.ZtLiveUserInfo userInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_userinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string customWatchingListData = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_customwatchinglistdata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AcFunDanmu.CommonStateSignalTopUsers.TopUser.customWatchingListData"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string displaySendAmount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_displaysendamount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AcFunDanmu.CommonStateSignalTopUsers.TopUser.displaySendAmount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool anonymousUser = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          anonymoususer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommonStateSignalTopUsers_TopUser::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.CommonStateSignalTopUsers.TopUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AcFunDanmu.ZtLiveUserInfo userInfo = 1;
  if (this->has_userinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::userinfo(this), target, stream);
  }

  // string customWatchingListData = 3;
  if (!this->customwatchinglistdata().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_customwatchinglistdata().data(), static_cast<int>(this->_internal_customwatchinglistdata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.CommonStateSignalTopUsers.TopUser.customWatchingListData");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_customwatchinglistdata(), target);
  }

  // string displaySendAmount = 4;
  if (!this->displaysendamount().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_displaysendamount().data(), static_cast<int>(this->_internal_displaysendamount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.CommonStateSignalTopUsers.TopUser.displaySendAmount");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_displaysendamount(), target);
  }

  // bool anonymousUser = 5;
  if (this->anonymoususer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_anonymoususer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.CommonStateSignalTopUsers.TopUser)
  return target;
}

size_t CommonStateSignalTopUsers_TopUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.CommonStateSignalTopUsers.TopUser)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string customWatchingListData = 3;
  if (!this->customwatchinglistdata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_customwatchinglistdata());
  }

  // string displaySendAmount = 4;
  if (!this->displaysendamount().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_displaysendamount());
  }

  // .AcFunDanmu.ZtLiveUserInfo userInfo = 1;
  if (this->has_userinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *userinfo_);
  }

  // bool anonymousUser = 5;
  if (this->anonymoususer() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommonStateSignalTopUsers_TopUser::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AcFunDanmu.CommonStateSignalTopUsers.TopUser)
  GOOGLE_DCHECK_NE(&from, this);
  const CommonStateSignalTopUsers_TopUser* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommonStateSignalTopUsers_TopUser>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AcFunDanmu.CommonStateSignalTopUsers.TopUser)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AcFunDanmu.CommonStateSignalTopUsers.TopUser)
    MergeFrom(*source);
  }
}

void CommonStateSignalTopUsers_TopUser::MergeFrom(const CommonStateSignalTopUsers_TopUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.CommonStateSignalTopUsers.TopUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.customwatchinglistdata().empty()) {
    _internal_set_customwatchinglistdata(from._internal_customwatchinglistdata());
  }
  if (!from.displaysendamount().empty()) {
    _internal_set_displaysendamount(from._internal_displaysendamount());
  }
  if (from.has_userinfo()) {
    _internal_mutable_userinfo()->::AcFunDanmu::ZtLiveUserInfo::MergeFrom(from._internal_userinfo());
  }
  if (from.anonymoususer() != 0) {
    _internal_set_anonymoususer(from._internal_anonymoususer());
  }
}

void CommonStateSignalTopUsers_TopUser::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AcFunDanmu.CommonStateSignalTopUsers.TopUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonStateSignalTopUsers_TopUser::CopyFrom(const CommonStateSignalTopUsers_TopUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.CommonStateSignalTopUsers.TopUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonStateSignalTopUsers_TopUser::IsInitialized() const {
  return true;
}

void CommonStateSignalTopUsers_TopUser::InternalSwap(CommonStateSignalTopUsers_TopUser* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &customwatchinglistdata_, GetArenaForAllocation(),
      &other->customwatchinglistdata_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &displaysendamount_, GetArenaForAllocation(),
      &other->displaysendamount_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommonStateSignalTopUsers_TopUser, anonymoususer_)
      + sizeof(CommonStateSignalTopUsers_TopUser::anonymoususer_)
      - PROTOBUF_FIELD_OFFSET(CommonStateSignalTopUsers_TopUser, userinfo_)>(
          reinterpret_cast<char*>(&userinfo_),
          reinterpret_cast<char*>(&other->userinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommonStateSignalTopUsers_TopUser::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CommonStateSignalTopUsers_2eproto_getter, &descriptor_table_CommonStateSignalTopUsers_2eproto_once,
      file_level_metadata_CommonStateSignalTopUsers_2eproto[0]);
}

// ===================================================================

class CommonStateSignalTopUsers::_Internal {
 public:
};

CommonStateSignalTopUsers::CommonStateSignalTopUsers(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  user_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.CommonStateSignalTopUsers)
}
CommonStateSignalTopUsers::CommonStateSignalTopUsers(const CommonStateSignalTopUsers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      user_(from.user_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.CommonStateSignalTopUsers)
}

void CommonStateSignalTopUsers::SharedCtor() {
}

CommonStateSignalTopUsers::~CommonStateSignalTopUsers() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.CommonStateSignalTopUsers)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommonStateSignalTopUsers::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CommonStateSignalTopUsers::ArenaDtor(void* object) {
  CommonStateSignalTopUsers* _this = reinterpret_cast< CommonStateSignalTopUsers* >(object);
  (void)_this;
}
void CommonStateSignalTopUsers::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommonStateSignalTopUsers::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommonStateSignalTopUsers::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.CommonStateSignalTopUsers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommonStateSignalTopUsers::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .AcFunDanmu.CommonStateSignalTopUsers.TopUser user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_user(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommonStateSignalTopUsers::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.CommonStateSignalTopUsers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .AcFunDanmu.CommonStateSignalTopUsers.TopUser user = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_user_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_user(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.CommonStateSignalTopUsers)
  return target;
}

size_t CommonStateSignalTopUsers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.CommonStateSignalTopUsers)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .AcFunDanmu.CommonStateSignalTopUsers.TopUser user = 1;
  total_size += 1UL * this->_internal_user_size();
  for (const auto& msg : this->user_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommonStateSignalTopUsers::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AcFunDanmu.CommonStateSignalTopUsers)
  GOOGLE_DCHECK_NE(&from, this);
  const CommonStateSignalTopUsers* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommonStateSignalTopUsers>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AcFunDanmu.CommonStateSignalTopUsers)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AcFunDanmu.CommonStateSignalTopUsers)
    MergeFrom(*source);
  }
}

void CommonStateSignalTopUsers::MergeFrom(const CommonStateSignalTopUsers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.CommonStateSignalTopUsers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_.MergeFrom(from.user_);
}

void CommonStateSignalTopUsers::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AcFunDanmu.CommonStateSignalTopUsers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonStateSignalTopUsers::CopyFrom(const CommonStateSignalTopUsers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.CommonStateSignalTopUsers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonStateSignalTopUsers::IsInitialized() const {
  return true;
}

void CommonStateSignalTopUsers::InternalSwap(CommonStateSignalTopUsers* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  user_.InternalSwap(&other->user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommonStateSignalTopUsers::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CommonStateSignalTopUsers_2eproto_getter, &descriptor_table_CommonStateSignalTopUsers_2eproto_once,
      file_level_metadata_CommonStateSignalTopUsers_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AcFunDanmu::CommonStateSignalTopUsers_TopUser* Arena::CreateMaybeMessage< ::AcFunDanmu::CommonStateSignalTopUsers_TopUser >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::CommonStateSignalTopUsers_TopUser >(arena);
}
template<> PROTOBUF_NOINLINE ::AcFunDanmu::CommonStateSignalTopUsers* Arena::CreateMaybeMessage< ::AcFunDanmu::CommonStateSignalTopUsers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::CommonStateSignalTopUsers >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
