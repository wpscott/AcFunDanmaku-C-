// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommonStateSignalCurrentRedpackList.proto

#include "CommonStateSignalCurrentRedpackList.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace AcFunDanmu {
constexpr CommonStateSignalCurrentRedpackList_Redpack::CommonStateSignalCurrentRedpackList_Redpack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : redpackid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , redpackbizunit_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sender_(nullptr)
  , grabbegintimems_(int64_t{0})
  , gettokenlatesttimems_(int64_t{0})
  , redpackamount_(int64_t{0})
  , settlebegintime_(int64_t{0})
  , displaystatus_(0)
{}
struct CommonStateSignalCurrentRedpackList_RedpackDefaultTypeInternal {
  constexpr CommonStateSignalCurrentRedpackList_RedpackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommonStateSignalCurrentRedpackList_RedpackDefaultTypeInternal() {}
  union {
    CommonStateSignalCurrentRedpackList_Redpack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommonStateSignalCurrentRedpackList_RedpackDefaultTypeInternal _CommonStateSignalCurrentRedpackList_Redpack_default_instance_;
constexpr CommonStateSignalCurrentRedpackList::CommonStateSignalCurrentRedpackList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : redpacks_(){}
struct CommonStateSignalCurrentRedpackListDefaultTypeInternal {
  constexpr CommonStateSignalCurrentRedpackListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommonStateSignalCurrentRedpackListDefaultTypeInternal() {}
  union {
    CommonStateSignalCurrentRedpackList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommonStateSignalCurrentRedpackListDefaultTypeInternal _CommonStateSignalCurrentRedpackList_default_instance_;
}  // namespace AcFunDanmu
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_CommonStateSignalCurrentRedpackList_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_CommonStateSignalCurrentRedpackList_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_CommonStateSignalCurrentRedpackList_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_CommonStateSignalCurrentRedpackList_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonStateSignalCurrentRedpackList_Redpack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonStateSignalCurrentRedpackList_Redpack, sender_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonStateSignalCurrentRedpackList_Redpack, displaystatus_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonStateSignalCurrentRedpackList_Redpack, grabbegintimems_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonStateSignalCurrentRedpackList_Redpack, gettokenlatesttimems_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonStateSignalCurrentRedpackList_Redpack, redpackid_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonStateSignalCurrentRedpackList_Redpack, redpackbizunit_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonStateSignalCurrentRedpackList_Redpack, redpackamount_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonStateSignalCurrentRedpackList_Redpack, settlebegintime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonStateSignalCurrentRedpackList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonStateSignalCurrentRedpackList, redpacks_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::AcFunDanmu::CommonStateSignalCurrentRedpackList_Redpack)},
  { 13, -1, sizeof(::AcFunDanmu::CommonStateSignalCurrentRedpackList)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AcFunDanmu::_CommonStateSignalCurrentRedpackList_Redpack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AcFunDanmu::_CommonStateSignalCurrentRedpackList_default_instance_),
};

const char descriptor_table_protodef_CommonStateSignalCurrentRedpackList_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)CommonStateSignalCurrentRedpackList.pr"
  "oto\022\nAcFunDanmu\032\024ZtLiveUserInfo.proto\"\322\003"
  "\n#CommonStateSignalCurrentRedpackList\022I\n"
  "\010redpacks\030\001 \003(\01327.AcFunDanmu.CommonState"
  "SignalCurrentRedpackList.Redpack\032\244\002\n\007Red"
  "pack\022*\n\006sender\030\001 \001(\0132\032.AcFunDanmu.ZtLive"
  "UserInfo\022[\n\rdisplayStatus\030\002 \001(\0162D.AcFunD"
  "anmu.CommonStateSignalCurrentRedpackList"
  ".RedpackDisplayStatus\022\027\n\017grabBeginTimeMs"
  "\030\003 \001(\003\022\034\n\024getTokenLatestTimeMs\030\004 \001(\003\022\021\n\t"
  "redPackId\030\005 \001(\t\022\026\n\016redpackBizUnit\030\006 \001(\t\022"
  "\025\n\rredpackAmount\030\007 \001(\003\022\027\n\017settleBeginTim"
  "e\030\010 \001(\003\"9\n\024RedpackDisplayStatus\022\010\n\004SHOW\020"
  "\000\022\r\n\tGET_TOKEN\020\001\022\010\n\004GRAB\020\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_CommonStateSignalCurrentRedpackList_2eproto_deps[1] = {
  &::descriptor_table_ZtLiveUserInfo_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_CommonStateSignalCurrentRedpackList_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_CommonStateSignalCurrentRedpackList_2eproto = {
  false, false, 554, descriptor_table_protodef_CommonStateSignalCurrentRedpackList_2eproto, "CommonStateSignalCurrentRedpackList.proto", 
  &descriptor_table_CommonStateSignalCurrentRedpackList_2eproto_once, descriptor_table_CommonStateSignalCurrentRedpackList_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_CommonStateSignalCurrentRedpackList_2eproto::offsets,
  file_level_metadata_CommonStateSignalCurrentRedpackList_2eproto, file_level_enum_descriptors_CommonStateSignalCurrentRedpackList_2eproto, file_level_service_descriptors_CommonStateSignalCurrentRedpackList_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_CommonStateSignalCurrentRedpackList_2eproto_getter() {
  return &descriptor_table_CommonStateSignalCurrentRedpackList_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_CommonStateSignalCurrentRedpackList_2eproto(&descriptor_table_CommonStateSignalCurrentRedpackList_2eproto);
namespace AcFunDanmu {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommonStateSignalCurrentRedpackList_RedpackDisplayStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_CommonStateSignalCurrentRedpackList_2eproto);
  return file_level_enum_descriptors_CommonStateSignalCurrentRedpackList_2eproto[0];
}
bool CommonStateSignalCurrentRedpackList_RedpackDisplayStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CommonStateSignalCurrentRedpackList_RedpackDisplayStatus CommonStateSignalCurrentRedpackList::SHOW;
constexpr CommonStateSignalCurrentRedpackList_RedpackDisplayStatus CommonStateSignalCurrentRedpackList::GET_TOKEN;
constexpr CommonStateSignalCurrentRedpackList_RedpackDisplayStatus CommonStateSignalCurrentRedpackList::GRAB;
constexpr CommonStateSignalCurrentRedpackList_RedpackDisplayStatus CommonStateSignalCurrentRedpackList::RedpackDisplayStatus_MIN;
constexpr CommonStateSignalCurrentRedpackList_RedpackDisplayStatus CommonStateSignalCurrentRedpackList::RedpackDisplayStatus_MAX;
constexpr int CommonStateSignalCurrentRedpackList::RedpackDisplayStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class CommonStateSignalCurrentRedpackList_Redpack::_Internal {
 public:
  static const ::AcFunDanmu::ZtLiveUserInfo& sender(const CommonStateSignalCurrentRedpackList_Redpack* msg);
};

const ::AcFunDanmu::ZtLiveUserInfo&
CommonStateSignalCurrentRedpackList_Redpack::_Internal::sender(const CommonStateSignalCurrentRedpackList_Redpack* msg) {
  return *msg->sender_;
}
void CommonStateSignalCurrentRedpackList_Redpack::clear_sender() {
  if (GetArenaForAllocation() == nullptr && sender_ != nullptr) {
    delete sender_;
  }
  sender_ = nullptr;
}
CommonStateSignalCurrentRedpackList_Redpack::CommonStateSignalCurrentRedpackList_Redpack(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.CommonStateSignalCurrentRedpackList.Redpack)
}
CommonStateSignalCurrentRedpackList_Redpack::CommonStateSignalCurrentRedpackList_Redpack(const CommonStateSignalCurrentRedpackList_Redpack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  redpackid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_redpackid().empty()) {
    redpackid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_redpackid(), 
      GetArenaForAllocation());
  }
  redpackbizunit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_redpackbizunit().empty()) {
    redpackbizunit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_redpackbizunit(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_sender()) {
    sender_ = new ::AcFunDanmu::ZtLiveUserInfo(*from.sender_);
  } else {
    sender_ = nullptr;
  }
  ::memcpy(&grabbegintimems_, &from.grabbegintimems_,
    static_cast<size_t>(reinterpret_cast<char*>(&displaystatus_) -
    reinterpret_cast<char*>(&grabbegintimems_)) + sizeof(displaystatus_));
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.CommonStateSignalCurrentRedpackList.Redpack)
}

void CommonStateSignalCurrentRedpackList_Redpack::SharedCtor() {
redpackid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
redpackbizunit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sender_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&displaystatus_) -
    reinterpret_cast<char*>(&sender_)) + sizeof(displaystatus_));
}

CommonStateSignalCurrentRedpackList_Redpack::~CommonStateSignalCurrentRedpackList_Redpack() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.CommonStateSignalCurrentRedpackList.Redpack)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommonStateSignalCurrentRedpackList_Redpack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  redpackid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  redpackbizunit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sender_;
}

void CommonStateSignalCurrentRedpackList_Redpack::ArenaDtor(void* object) {
  CommonStateSignalCurrentRedpackList_Redpack* _this = reinterpret_cast< CommonStateSignalCurrentRedpackList_Redpack* >(object);
  (void)_this;
}
void CommonStateSignalCurrentRedpackList_Redpack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommonStateSignalCurrentRedpackList_Redpack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommonStateSignalCurrentRedpackList_Redpack::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.CommonStateSignalCurrentRedpackList.Redpack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  redpackid_.ClearToEmpty();
  redpackbizunit_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && sender_ != nullptr) {
    delete sender_;
  }
  sender_ = nullptr;
  ::memset(&grabbegintimems_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&displaystatus_) -
      reinterpret_cast<char*>(&grabbegintimems_)) + sizeof(displaystatus_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommonStateSignalCurrentRedpackList_Redpack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .AcFunDanmu.ZtLiveUserInfo sender = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sender(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AcFunDanmu.CommonStateSignalCurrentRedpackList.RedpackDisplayStatus displayStatus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_displaystatus(static_cast<::AcFunDanmu::CommonStateSignalCurrentRedpackList_RedpackDisplayStatus>(val));
        } else goto handle_unusual;
        continue;
      // int64 grabBeginTimeMs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          grabbegintimems_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 getTokenLatestTimeMs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          gettokenlatesttimems_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string redPackId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_redpackid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AcFunDanmu.CommonStateSignalCurrentRedpackList.Redpack.redPackId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string redpackBizUnit = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_redpackbizunit();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AcFunDanmu.CommonStateSignalCurrentRedpackList.Redpack.redpackBizUnit"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 redpackAmount = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          redpackamount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 settleBeginTime = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          settlebegintime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommonStateSignalCurrentRedpackList_Redpack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.CommonStateSignalCurrentRedpackList.Redpack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AcFunDanmu.ZtLiveUserInfo sender = 1;
  if (this->has_sender()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::sender(this), target, stream);
  }

  // .AcFunDanmu.CommonStateSignalCurrentRedpackList.RedpackDisplayStatus displayStatus = 2;
  if (this->displaystatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_displaystatus(), target);
  }

  // int64 grabBeginTimeMs = 3;
  if (this->grabbegintimems() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_grabbegintimems(), target);
  }

  // int64 getTokenLatestTimeMs = 4;
  if (this->gettokenlatesttimems() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_gettokenlatesttimems(), target);
  }

  // string redPackId = 5;
  if (!this->redpackid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_redpackid().data(), static_cast<int>(this->_internal_redpackid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.CommonStateSignalCurrentRedpackList.Redpack.redPackId");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_redpackid(), target);
  }

  // string redpackBizUnit = 6;
  if (!this->redpackbizunit().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_redpackbizunit().data(), static_cast<int>(this->_internal_redpackbizunit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.CommonStateSignalCurrentRedpackList.Redpack.redpackBizUnit");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_redpackbizunit(), target);
  }

  // int64 redpackAmount = 7;
  if (this->redpackamount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_redpackamount(), target);
  }

  // int64 settleBeginTime = 8;
  if (this->settlebegintime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_settlebegintime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.CommonStateSignalCurrentRedpackList.Redpack)
  return target;
}

size_t CommonStateSignalCurrentRedpackList_Redpack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.CommonStateSignalCurrentRedpackList.Redpack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string redPackId = 5;
  if (!this->redpackid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_redpackid());
  }

  // string redpackBizUnit = 6;
  if (!this->redpackbizunit().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_redpackbizunit());
  }

  // .AcFunDanmu.ZtLiveUserInfo sender = 1;
  if (this->has_sender()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sender_);
  }

  // int64 grabBeginTimeMs = 3;
  if (this->grabbegintimems() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_grabbegintimems());
  }

  // int64 getTokenLatestTimeMs = 4;
  if (this->gettokenlatesttimems() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_gettokenlatesttimems());
  }

  // int64 redpackAmount = 7;
  if (this->redpackamount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_redpackamount());
  }

  // int64 settleBeginTime = 8;
  if (this->settlebegintime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_settlebegintime());
  }

  // .AcFunDanmu.CommonStateSignalCurrentRedpackList.RedpackDisplayStatus displayStatus = 2;
  if (this->displaystatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_displaystatus());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommonStateSignalCurrentRedpackList_Redpack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AcFunDanmu.CommonStateSignalCurrentRedpackList.Redpack)
  GOOGLE_DCHECK_NE(&from, this);
  const CommonStateSignalCurrentRedpackList_Redpack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommonStateSignalCurrentRedpackList_Redpack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AcFunDanmu.CommonStateSignalCurrentRedpackList.Redpack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AcFunDanmu.CommonStateSignalCurrentRedpackList.Redpack)
    MergeFrom(*source);
  }
}

void CommonStateSignalCurrentRedpackList_Redpack::MergeFrom(const CommonStateSignalCurrentRedpackList_Redpack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.CommonStateSignalCurrentRedpackList.Redpack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.redpackid().empty()) {
    _internal_set_redpackid(from._internal_redpackid());
  }
  if (!from.redpackbizunit().empty()) {
    _internal_set_redpackbizunit(from._internal_redpackbizunit());
  }
  if (from.has_sender()) {
    _internal_mutable_sender()->::AcFunDanmu::ZtLiveUserInfo::MergeFrom(from._internal_sender());
  }
  if (from.grabbegintimems() != 0) {
    _internal_set_grabbegintimems(from._internal_grabbegintimems());
  }
  if (from.gettokenlatesttimems() != 0) {
    _internal_set_gettokenlatesttimems(from._internal_gettokenlatesttimems());
  }
  if (from.redpackamount() != 0) {
    _internal_set_redpackamount(from._internal_redpackamount());
  }
  if (from.settlebegintime() != 0) {
    _internal_set_settlebegintime(from._internal_settlebegintime());
  }
  if (from.displaystatus() != 0) {
    _internal_set_displaystatus(from._internal_displaystatus());
  }
}

void CommonStateSignalCurrentRedpackList_Redpack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AcFunDanmu.CommonStateSignalCurrentRedpackList.Redpack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonStateSignalCurrentRedpackList_Redpack::CopyFrom(const CommonStateSignalCurrentRedpackList_Redpack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.CommonStateSignalCurrentRedpackList.Redpack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonStateSignalCurrentRedpackList_Redpack::IsInitialized() const {
  return true;
}

void CommonStateSignalCurrentRedpackList_Redpack::InternalSwap(CommonStateSignalCurrentRedpackList_Redpack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &redpackid_, GetArenaForAllocation(),
      &other->redpackid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &redpackbizunit_, GetArenaForAllocation(),
      &other->redpackbizunit_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommonStateSignalCurrentRedpackList_Redpack, displaystatus_)
      + sizeof(CommonStateSignalCurrentRedpackList_Redpack::displaystatus_)
      - PROTOBUF_FIELD_OFFSET(CommonStateSignalCurrentRedpackList_Redpack, sender_)>(
          reinterpret_cast<char*>(&sender_),
          reinterpret_cast<char*>(&other->sender_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommonStateSignalCurrentRedpackList_Redpack::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CommonStateSignalCurrentRedpackList_2eproto_getter, &descriptor_table_CommonStateSignalCurrentRedpackList_2eproto_once,
      file_level_metadata_CommonStateSignalCurrentRedpackList_2eproto[0]);
}

// ===================================================================

class CommonStateSignalCurrentRedpackList::_Internal {
 public:
};

CommonStateSignalCurrentRedpackList::CommonStateSignalCurrentRedpackList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  redpacks_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.CommonStateSignalCurrentRedpackList)
}
CommonStateSignalCurrentRedpackList::CommonStateSignalCurrentRedpackList(const CommonStateSignalCurrentRedpackList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      redpacks_(from.redpacks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.CommonStateSignalCurrentRedpackList)
}

void CommonStateSignalCurrentRedpackList::SharedCtor() {
}

CommonStateSignalCurrentRedpackList::~CommonStateSignalCurrentRedpackList() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.CommonStateSignalCurrentRedpackList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommonStateSignalCurrentRedpackList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CommonStateSignalCurrentRedpackList::ArenaDtor(void* object) {
  CommonStateSignalCurrentRedpackList* _this = reinterpret_cast< CommonStateSignalCurrentRedpackList* >(object);
  (void)_this;
}
void CommonStateSignalCurrentRedpackList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommonStateSignalCurrentRedpackList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommonStateSignalCurrentRedpackList::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.CommonStateSignalCurrentRedpackList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  redpacks_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommonStateSignalCurrentRedpackList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .AcFunDanmu.CommonStateSignalCurrentRedpackList.Redpack redpacks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_redpacks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommonStateSignalCurrentRedpackList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.CommonStateSignalCurrentRedpackList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .AcFunDanmu.CommonStateSignalCurrentRedpackList.Redpack redpacks = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_redpacks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_redpacks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.CommonStateSignalCurrentRedpackList)
  return target;
}

size_t CommonStateSignalCurrentRedpackList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.CommonStateSignalCurrentRedpackList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .AcFunDanmu.CommonStateSignalCurrentRedpackList.Redpack redpacks = 1;
  total_size += 1UL * this->_internal_redpacks_size();
  for (const auto& msg : this->redpacks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommonStateSignalCurrentRedpackList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AcFunDanmu.CommonStateSignalCurrentRedpackList)
  GOOGLE_DCHECK_NE(&from, this);
  const CommonStateSignalCurrentRedpackList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommonStateSignalCurrentRedpackList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AcFunDanmu.CommonStateSignalCurrentRedpackList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AcFunDanmu.CommonStateSignalCurrentRedpackList)
    MergeFrom(*source);
  }
}

void CommonStateSignalCurrentRedpackList::MergeFrom(const CommonStateSignalCurrentRedpackList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.CommonStateSignalCurrentRedpackList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  redpacks_.MergeFrom(from.redpacks_);
}

void CommonStateSignalCurrentRedpackList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AcFunDanmu.CommonStateSignalCurrentRedpackList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonStateSignalCurrentRedpackList::CopyFrom(const CommonStateSignalCurrentRedpackList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.CommonStateSignalCurrentRedpackList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonStateSignalCurrentRedpackList::IsInitialized() const {
  return true;
}

void CommonStateSignalCurrentRedpackList::InternalSwap(CommonStateSignalCurrentRedpackList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  redpacks_.InternalSwap(&other->redpacks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommonStateSignalCurrentRedpackList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CommonStateSignalCurrentRedpackList_2eproto_getter, &descriptor_table_CommonStateSignalCurrentRedpackList_2eproto_once,
      file_level_metadata_CommonStateSignalCurrentRedpackList_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AcFunDanmu::CommonStateSignalCurrentRedpackList_Redpack* Arena::CreateMaybeMessage< ::AcFunDanmu::CommonStateSignalCurrentRedpackList_Redpack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::CommonStateSignalCurrentRedpackList_Redpack >(arena);
}
template<> PROTOBUF_NOINLINE ::AcFunDanmu::CommonStateSignalCurrentRedpackList* Arena::CreateMaybeMessage< ::AcFunDanmu::CommonStateSignalCurrentRedpackList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::CommonStateSignalCurrentRedpackList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
