// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WidgetItem.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_WidgetItem_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_WidgetItem_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "WidgetDisplayStyle.pb.h"
#include "WidgetPictureInfo.pb.h"
#include "ZtLiveWidgetProto.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_WidgetItem_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_WidgetItem_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_WidgetItem_2eproto;
namespace AcFunDanmu {
class WidgetItem;
struct WidgetItemDefaultTypeInternal;
extern WidgetItemDefaultTypeInternal _WidgetItem_default_instance_;
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::WidgetItem* Arena::CreateMaybeMessage<::AcFunDanmu::WidgetItem>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {

// ===================================================================

class WidgetItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.WidgetItem) */ {
 public:
  inline WidgetItem() : WidgetItem(nullptr) {}
  ~WidgetItem() override;
  explicit PROTOBUF_CONSTEXPR WidgetItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WidgetItem(const WidgetItem& from);
  WidgetItem(WidgetItem&& from) noexcept
    : WidgetItem() {
    *this = ::std::move(from);
  }

  inline WidgetItem& operator=(const WidgetItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline WidgetItem& operator=(WidgetItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WidgetItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const WidgetItem* internal_default_instance() {
    return reinterpret_cast<const WidgetItem*>(
               &_WidgetItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WidgetItem& a, WidgetItem& b) {
    a.Swap(&b);
  }
  inline void Swap(WidgetItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WidgetItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WidgetItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WidgetItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WidgetItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WidgetItem& from) {
    WidgetItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WidgetItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.WidgetItem";
  }
  protected:
  explicit WidgetItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLFieldNumber = 12,
    kMFieldNumber = 13,
    kBFieldNumber = 2,
    kGFieldNumber = 7,
    kFFieldNumber = 6,
    kJFieldNumber = 10,
    kAFieldNumber = 1,
    kDFieldNumber = 4,
    kEFieldNumber = 5,
    kCFieldNumber = 3,
    kHFieldNumber = 8,
    kIFieldNumber = 9,
    kKFieldNumber = 11,
    kNFieldNumber = 14,
  };
  // repeated string l = 12;
  int l_size() const;
  private:
  int _internal_l_size() const;
  public:
  void clear_l();
  const std::string& l(int index) const;
  std::string* mutable_l(int index);
  void set_l(int index, const std::string& value);
  void set_l(int index, std::string&& value);
  void set_l(int index, const char* value);
  void set_l(int index, const char* value, size_t size);
  std::string* add_l();
  void add_l(const std::string& value);
  void add_l(std::string&& value);
  void add_l(const char* value);
  void add_l(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& l() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_l();
  private:
  const std::string& _internal_l(int index) const;
  std::string* _internal_add_l();
  public:

  // repeated string m = 13;
  int m_size() const;
  private:
  int _internal_m_size() const;
  public:
  void clear_m();
  const std::string& m(int index) const;
  std::string* mutable_m(int index);
  void set_m(int index, const std::string& value);
  void set_m(int index, std::string&& value);
  void set_m(int index, const char* value);
  void set_m(int index, const char* value, size_t size);
  std::string* add_m();
  void add_m(const std::string& value);
  void add_m(std::string&& value);
  void add_m(const char* value);
  void add_m(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& m() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_m();
  private:
  const std::string& _internal_m(int index) const;
  std::string* _internal_add_m();
  public:

  // string b = 2;
  void clear_b();
  const std::string& b() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_b(ArgT0&& arg0, ArgT... args);
  std::string* mutable_b();
  PROTOBUF_NODISCARD std::string* release_b();
  void set_allocated_b(std::string* b);
  private:
  const std::string& _internal_b() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_b(const std::string& value);
  std::string* _internal_mutable_b();
  public:

  // string g = 7;
  void clear_g();
  const std::string& g() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_g(ArgT0&& arg0, ArgT... args);
  std::string* mutable_g();
  PROTOBUF_NODISCARD std::string* release_g();
  void set_allocated_g(std::string* g);
  private:
  const std::string& _internal_g() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_g(const std::string& value);
  std::string* _internal_mutable_g();
  public:

  // .AcFunDanmu.WidgetPictureInfo f = 6;
  bool has_f() const;
  private:
  bool _internal_has_f() const;
  public:
  void clear_f();
  const ::AcFunDanmu::WidgetPictureInfo& f() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::WidgetPictureInfo* release_f();
  ::AcFunDanmu::WidgetPictureInfo* mutable_f();
  void set_allocated_f(::AcFunDanmu::WidgetPictureInfo* f);
  private:
  const ::AcFunDanmu::WidgetPictureInfo& _internal_f() const;
  ::AcFunDanmu::WidgetPictureInfo* _internal_mutable_f();
  public:
  void unsafe_arena_set_allocated_f(
      ::AcFunDanmu::WidgetPictureInfo* f);
  ::AcFunDanmu::WidgetPictureInfo* unsafe_arena_release_f();

  // .AcFunDanmu.WidgetDisplayStyle j = 10;
  bool has_j() const;
  private:
  bool _internal_has_j() const;
  public:
  void clear_j();
  const ::AcFunDanmu::WidgetDisplayStyle& j() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::WidgetDisplayStyle* release_j();
  ::AcFunDanmu::WidgetDisplayStyle* mutable_j();
  void set_allocated_j(::AcFunDanmu::WidgetDisplayStyle* j);
  private:
  const ::AcFunDanmu::WidgetDisplayStyle& _internal_j() const;
  ::AcFunDanmu::WidgetDisplayStyle* _internal_mutable_j();
  public:
  void unsafe_arena_set_allocated_j(
      ::AcFunDanmu::WidgetDisplayStyle* j);
  ::AcFunDanmu::WidgetDisplayStyle* unsafe_arena_release_j();

  // int64 a = 1;
  void clear_a();
  int64_t a() const;
  void set_a(int64_t value);
  private:
  int64_t _internal_a() const;
  void _internal_set_a(int64_t value);
  public:

  // int64 d = 4;
  void clear_d();
  int64_t d() const;
  void set_d(int64_t value);
  private:
  int64_t _internal_d() const;
  void _internal_set_d(int64_t value);
  public:

  // int64 e = 5;
  void clear_e();
  int64_t e() const;
  void set_e(int64_t value);
  private:
  int64_t _internal_e() const;
  void _internal_set_e(int64_t value);
  public:

  // int32 c = 3;
  void clear_c();
  int32_t c() const;
  void set_c(int32_t value);
  private:
  int32_t _internal_c() const;
  void _internal_set_c(int32_t value);
  public:

  // .AcFunDanmu.ZtLiveWidgetProtoA h = 8;
  void clear_h();
  ::AcFunDanmu::ZtLiveWidgetProtoA h() const;
  void set_h(::AcFunDanmu::ZtLiveWidgetProtoA value);
  private:
  ::AcFunDanmu::ZtLiveWidgetProtoA _internal_h() const;
  void _internal_set_h(::AcFunDanmu::ZtLiveWidgetProtoA value);
  public:

  // .AcFunDanmu.ZtLiveWidgetProtoB i = 9;
  void clear_i();
  ::AcFunDanmu::ZtLiveWidgetProtoB i() const;
  void set_i(::AcFunDanmu::ZtLiveWidgetProtoB value);
  private:
  ::AcFunDanmu::ZtLiveWidgetProtoB _internal_i() const;
  void _internal_set_i(::AcFunDanmu::ZtLiveWidgetProtoB value);
  public:

  // .AcFunDanmu.ZtLiveWidgetProtoC k = 11;
  void clear_k();
  ::AcFunDanmu::ZtLiveWidgetProtoC k() const;
  void set_k(::AcFunDanmu::ZtLiveWidgetProtoC value);
  private:
  ::AcFunDanmu::ZtLiveWidgetProtoC _internal_k() const;
  void _internal_set_k(::AcFunDanmu::ZtLiveWidgetProtoC value);
  public:

  // int64 n = 14;
  void clear_n();
  int64_t n() const;
  void set_n(int64_t value);
  private:
  int64_t _internal_n() const;
  void _internal_set_n(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.WidgetItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> l_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> m_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr b_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr g_;
    ::AcFunDanmu::WidgetPictureInfo* f_;
    ::AcFunDanmu::WidgetDisplayStyle* j_;
    int64_t a_;
    int64_t d_;
    int64_t e_;
    int32_t c_;
    int h_;
    int i_;
    int k_;
    int64_t n_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_WidgetItem_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WidgetItem

// int64 a = 1;
inline void WidgetItem::clear_a() {
  _impl_.a_ = int64_t{0};
}
inline int64_t WidgetItem::_internal_a() const {
  return _impl_.a_;
}
inline int64_t WidgetItem::a() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.WidgetItem.a)
  return _internal_a();
}
inline void WidgetItem::_internal_set_a(int64_t value) {
  
  _impl_.a_ = value;
}
inline void WidgetItem::set_a(int64_t value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.WidgetItem.a)
}

// string b = 2;
inline void WidgetItem::clear_b() {
  _impl_.b_.ClearToEmpty();
}
inline const std::string& WidgetItem::b() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.WidgetItem.b)
  return _internal_b();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WidgetItem::set_b(ArgT0&& arg0, ArgT... args) {
 
 _impl_.b_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.WidgetItem.b)
}
inline std::string* WidgetItem::mutable_b() {
  std::string* _s = _internal_mutable_b();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.WidgetItem.b)
  return _s;
}
inline const std::string& WidgetItem::_internal_b() const {
  return _impl_.b_.Get();
}
inline void WidgetItem::_internal_set_b(const std::string& value) {
  
  _impl_.b_.Set(value, GetArenaForAllocation());
}
inline std::string* WidgetItem::_internal_mutable_b() {
  
  return _impl_.b_.Mutable(GetArenaForAllocation());
}
inline std::string* WidgetItem::release_b() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.WidgetItem.b)
  return _impl_.b_.Release();
}
inline void WidgetItem::set_allocated_b(std::string* b) {
  if (b != nullptr) {
    
  } else {
    
  }
  _impl_.b_.SetAllocated(b, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.b_.IsDefault()) {
    _impl_.b_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.WidgetItem.b)
}

// int32 c = 3;
inline void WidgetItem::clear_c() {
  _impl_.c_ = 0;
}
inline int32_t WidgetItem::_internal_c() const {
  return _impl_.c_;
}
inline int32_t WidgetItem::c() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.WidgetItem.c)
  return _internal_c();
}
inline void WidgetItem::_internal_set_c(int32_t value) {
  
  _impl_.c_ = value;
}
inline void WidgetItem::set_c(int32_t value) {
  _internal_set_c(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.WidgetItem.c)
}

// int64 d = 4;
inline void WidgetItem::clear_d() {
  _impl_.d_ = int64_t{0};
}
inline int64_t WidgetItem::_internal_d() const {
  return _impl_.d_;
}
inline int64_t WidgetItem::d() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.WidgetItem.d)
  return _internal_d();
}
inline void WidgetItem::_internal_set_d(int64_t value) {
  
  _impl_.d_ = value;
}
inline void WidgetItem::set_d(int64_t value) {
  _internal_set_d(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.WidgetItem.d)
}

// int64 e = 5;
inline void WidgetItem::clear_e() {
  _impl_.e_ = int64_t{0};
}
inline int64_t WidgetItem::_internal_e() const {
  return _impl_.e_;
}
inline int64_t WidgetItem::e() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.WidgetItem.e)
  return _internal_e();
}
inline void WidgetItem::_internal_set_e(int64_t value) {
  
  _impl_.e_ = value;
}
inline void WidgetItem::set_e(int64_t value) {
  _internal_set_e(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.WidgetItem.e)
}

// .AcFunDanmu.WidgetPictureInfo f = 6;
inline bool WidgetItem::_internal_has_f() const {
  return this != internal_default_instance() && _impl_.f_ != nullptr;
}
inline bool WidgetItem::has_f() const {
  return _internal_has_f();
}
inline const ::AcFunDanmu::WidgetPictureInfo& WidgetItem::_internal_f() const {
  const ::AcFunDanmu::WidgetPictureInfo* p = _impl_.f_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::WidgetPictureInfo&>(
      ::AcFunDanmu::_WidgetPictureInfo_default_instance_);
}
inline const ::AcFunDanmu::WidgetPictureInfo& WidgetItem::f() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.WidgetItem.f)
  return _internal_f();
}
inline void WidgetItem::unsafe_arena_set_allocated_f(
    ::AcFunDanmu::WidgetPictureInfo* f) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.f_);
  }
  _impl_.f_ = f;
  if (f) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.WidgetItem.f)
}
inline ::AcFunDanmu::WidgetPictureInfo* WidgetItem::release_f() {
  
  ::AcFunDanmu::WidgetPictureInfo* temp = _impl_.f_;
  _impl_.f_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AcFunDanmu::WidgetPictureInfo* WidgetItem::unsafe_arena_release_f() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.WidgetItem.f)
  
  ::AcFunDanmu::WidgetPictureInfo* temp = _impl_.f_;
  _impl_.f_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::WidgetPictureInfo* WidgetItem::_internal_mutable_f() {
  
  if (_impl_.f_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::WidgetPictureInfo>(GetArenaForAllocation());
    _impl_.f_ = p;
  }
  return _impl_.f_;
}
inline ::AcFunDanmu::WidgetPictureInfo* WidgetItem::mutable_f() {
  ::AcFunDanmu::WidgetPictureInfo* _msg = _internal_mutable_f();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.WidgetItem.f)
  return _msg;
}
inline void WidgetItem::set_allocated_f(::AcFunDanmu::WidgetPictureInfo* f) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.f_);
  }
  if (f) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(f));
    if (message_arena != submessage_arena) {
      f = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.f_ = f;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.WidgetItem.f)
}

// string g = 7;
inline void WidgetItem::clear_g() {
  _impl_.g_.ClearToEmpty();
}
inline const std::string& WidgetItem::g() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.WidgetItem.g)
  return _internal_g();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WidgetItem::set_g(ArgT0&& arg0, ArgT... args) {
 
 _impl_.g_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.WidgetItem.g)
}
inline std::string* WidgetItem::mutable_g() {
  std::string* _s = _internal_mutable_g();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.WidgetItem.g)
  return _s;
}
inline const std::string& WidgetItem::_internal_g() const {
  return _impl_.g_.Get();
}
inline void WidgetItem::_internal_set_g(const std::string& value) {
  
  _impl_.g_.Set(value, GetArenaForAllocation());
}
inline std::string* WidgetItem::_internal_mutable_g() {
  
  return _impl_.g_.Mutable(GetArenaForAllocation());
}
inline std::string* WidgetItem::release_g() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.WidgetItem.g)
  return _impl_.g_.Release();
}
inline void WidgetItem::set_allocated_g(std::string* g) {
  if (g != nullptr) {
    
  } else {
    
  }
  _impl_.g_.SetAllocated(g, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.g_.IsDefault()) {
    _impl_.g_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.WidgetItem.g)
}

// .AcFunDanmu.ZtLiveWidgetProtoA h = 8;
inline void WidgetItem::clear_h() {
  _impl_.h_ = 0;
}
inline ::AcFunDanmu::ZtLiveWidgetProtoA WidgetItem::_internal_h() const {
  return static_cast< ::AcFunDanmu::ZtLiveWidgetProtoA >(_impl_.h_);
}
inline ::AcFunDanmu::ZtLiveWidgetProtoA WidgetItem::h() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.WidgetItem.h)
  return _internal_h();
}
inline void WidgetItem::_internal_set_h(::AcFunDanmu::ZtLiveWidgetProtoA value) {
  
  _impl_.h_ = value;
}
inline void WidgetItem::set_h(::AcFunDanmu::ZtLiveWidgetProtoA value) {
  _internal_set_h(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.WidgetItem.h)
}

// .AcFunDanmu.ZtLiveWidgetProtoB i = 9;
inline void WidgetItem::clear_i() {
  _impl_.i_ = 0;
}
inline ::AcFunDanmu::ZtLiveWidgetProtoB WidgetItem::_internal_i() const {
  return static_cast< ::AcFunDanmu::ZtLiveWidgetProtoB >(_impl_.i_);
}
inline ::AcFunDanmu::ZtLiveWidgetProtoB WidgetItem::i() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.WidgetItem.i)
  return _internal_i();
}
inline void WidgetItem::_internal_set_i(::AcFunDanmu::ZtLiveWidgetProtoB value) {
  
  _impl_.i_ = value;
}
inline void WidgetItem::set_i(::AcFunDanmu::ZtLiveWidgetProtoB value) {
  _internal_set_i(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.WidgetItem.i)
}

// .AcFunDanmu.WidgetDisplayStyle j = 10;
inline bool WidgetItem::_internal_has_j() const {
  return this != internal_default_instance() && _impl_.j_ != nullptr;
}
inline bool WidgetItem::has_j() const {
  return _internal_has_j();
}
inline const ::AcFunDanmu::WidgetDisplayStyle& WidgetItem::_internal_j() const {
  const ::AcFunDanmu::WidgetDisplayStyle* p = _impl_.j_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::WidgetDisplayStyle&>(
      ::AcFunDanmu::_WidgetDisplayStyle_default_instance_);
}
inline const ::AcFunDanmu::WidgetDisplayStyle& WidgetItem::j() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.WidgetItem.j)
  return _internal_j();
}
inline void WidgetItem::unsafe_arena_set_allocated_j(
    ::AcFunDanmu::WidgetDisplayStyle* j) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.j_);
  }
  _impl_.j_ = j;
  if (j) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.WidgetItem.j)
}
inline ::AcFunDanmu::WidgetDisplayStyle* WidgetItem::release_j() {
  
  ::AcFunDanmu::WidgetDisplayStyle* temp = _impl_.j_;
  _impl_.j_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AcFunDanmu::WidgetDisplayStyle* WidgetItem::unsafe_arena_release_j() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.WidgetItem.j)
  
  ::AcFunDanmu::WidgetDisplayStyle* temp = _impl_.j_;
  _impl_.j_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::WidgetDisplayStyle* WidgetItem::_internal_mutable_j() {
  
  if (_impl_.j_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::WidgetDisplayStyle>(GetArenaForAllocation());
    _impl_.j_ = p;
  }
  return _impl_.j_;
}
inline ::AcFunDanmu::WidgetDisplayStyle* WidgetItem::mutable_j() {
  ::AcFunDanmu::WidgetDisplayStyle* _msg = _internal_mutable_j();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.WidgetItem.j)
  return _msg;
}
inline void WidgetItem::set_allocated_j(::AcFunDanmu::WidgetDisplayStyle* j) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.j_);
  }
  if (j) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(j));
    if (message_arena != submessage_arena) {
      j = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, j, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.j_ = j;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.WidgetItem.j)
}

// .AcFunDanmu.ZtLiveWidgetProtoC k = 11;
inline void WidgetItem::clear_k() {
  _impl_.k_ = 0;
}
inline ::AcFunDanmu::ZtLiveWidgetProtoC WidgetItem::_internal_k() const {
  return static_cast< ::AcFunDanmu::ZtLiveWidgetProtoC >(_impl_.k_);
}
inline ::AcFunDanmu::ZtLiveWidgetProtoC WidgetItem::k() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.WidgetItem.k)
  return _internal_k();
}
inline void WidgetItem::_internal_set_k(::AcFunDanmu::ZtLiveWidgetProtoC value) {
  
  _impl_.k_ = value;
}
inline void WidgetItem::set_k(::AcFunDanmu::ZtLiveWidgetProtoC value) {
  _internal_set_k(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.WidgetItem.k)
}

// repeated string l = 12;
inline int WidgetItem::_internal_l_size() const {
  return _impl_.l_.size();
}
inline int WidgetItem::l_size() const {
  return _internal_l_size();
}
inline void WidgetItem::clear_l() {
  _impl_.l_.Clear();
}
inline std::string* WidgetItem::add_l() {
  std::string* _s = _internal_add_l();
  // @@protoc_insertion_point(field_add_mutable:AcFunDanmu.WidgetItem.l)
  return _s;
}
inline const std::string& WidgetItem::_internal_l(int index) const {
  return _impl_.l_.Get(index);
}
inline const std::string& WidgetItem::l(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.WidgetItem.l)
  return _internal_l(index);
}
inline std::string* WidgetItem::mutable_l(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.WidgetItem.l)
  return _impl_.l_.Mutable(index);
}
inline void WidgetItem::set_l(int index, const std::string& value) {
  _impl_.l_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.WidgetItem.l)
}
inline void WidgetItem::set_l(int index, std::string&& value) {
  _impl_.l_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:AcFunDanmu.WidgetItem.l)
}
inline void WidgetItem::set_l(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.l_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.WidgetItem.l)
}
inline void WidgetItem::set_l(int index, const char* value, size_t size) {
  _impl_.l_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.WidgetItem.l)
}
inline std::string* WidgetItem::_internal_add_l() {
  return _impl_.l_.Add();
}
inline void WidgetItem::add_l(const std::string& value) {
  _impl_.l_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AcFunDanmu.WidgetItem.l)
}
inline void WidgetItem::add_l(std::string&& value) {
  _impl_.l_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AcFunDanmu.WidgetItem.l)
}
inline void WidgetItem::add_l(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.l_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AcFunDanmu.WidgetItem.l)
}
inline void WidgetItem::add_l(const char* value, size_t size) {
  _impl_.l_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AcFunDanmu.WidgetItem.l)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
WidgetItem::l() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.WidgetItem.l)
  return _impl_.l_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
WidgetItem::mutable_l() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.WidgetItem.l)
  return &_impl_.l_;
}

// repeated string m = 13;
inline int WidgetItem::_internal_m_size() const {
  return _impl_.m_.size();
}
inline int WidgetItem::m_size() const {
  return _internal_m_size();
}
inline void WidgetItem::clear_m() {
  _impl_.m_.Clear();
}
inline std::string* WidgetItem::add_m() {
  std::string* _s = _internal_add_m();
  // @@protoc_insertion_point(field_add_mutable:AcFunDanmu.WidgetItem.m)
  return _s;
}
inline const std::string& WidgetItem::_internal_m(int index) const {
  return _impl_.m_.Get(index);
}
inline const std::string& WidgetItem::m(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.WidgetItem.m)
  return _internal_m(index);
}
inline std::string* WidgetItem::mutable_m(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.WidgetItem.m)
  return _impl_.m_.Mutable(index);
}
inline void WidgetItem::set_m(int index, const std::string& value) {
  _impl_.m_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.WidgetItem.m)
}
inline void WidgetItem::set_m(int index, std::string&& value) {
  _impl_.m_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:AcFunDanmu.WidgetItem.m)
}
inline void WidgetItem::set_m(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.m_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.WidgetItem.m)
}
inline void WidgetItem::set_m(int index, const char* value, size_t size) {
  _impl_.m_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.WidgetItem.m)
}
inline std::string* WidgetItem::_internal_add_m() {
  return _impl_.m_.Add();
}
inline void WidgetItem::add_m(const std::string& value) {
  _impl_.m_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AcFunDanmu.WidgetItem.m)
}
inline void WidgetItem::add_m(std::string&& value) {
  _impl_.m_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AcFunDanmu.WidgetItem.m)
}
inline void WidgetItem::add_m(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.m_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AcFunDanmu.WidgetItem.m)
}
inline void WidgetItem::add_m(const char* value, size_t size) {
  _impl_.m_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AcFunDanmu.WidgetItem.m)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
WidgetItem::m() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.WidgetItem.m)
  return _impl_.m_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
WidgetItem::mutable_m() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.WidgetItem.m)
  return &_impl_.m_;
}

// int64 n = 14;
inline void WidgetItem::clear_n() {
  _impl_.n_ = int64_t{0};
}
inline int64_t WidgetItem::_internal_n() const {
  return _impl_.n_;
}
inline int64_t WidgetItem::n() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.WidgetItem.n)
  return _internal_n();
}
inline void WidgetItem::_internal_set_n(int64_t value) {
  
  _impl_.n_ = value;
}
inline void WidgetItem::set_n(int64_t value) {
  _internal_set_n(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.WidgetItem.n)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace AcFunDanmu

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_WidgetItem_2eproto
