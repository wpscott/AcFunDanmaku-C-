// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommonActionSignalGift.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_CommonActionSignalGift_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_CommonActionSignalGift_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ZtLiveUserInfo.pb.h"
#include "ZtDrawGiftInfo.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_CommonActionSignalGift_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_CommonActionSignalGift_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_CommonActionSignalGift_2eproto;
namespace AcFunDanmu {
class CommonActionSignalGift;
struct CommonActionSignalGiftDefaultTypeInternal;
extern CommonActionSignalGiftDefaultTypeInternal _CommonActionSignalGift_default_instance_;
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::CommonActionSignalGift* Arena::CreateMaybeMessage<::AcFunDanmu::CommonActionSignalGift>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {

// ===================================================================

class CommonActionSignalGift final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.CommonActionSignalGift) */ {
 public:
  inline CommonActionSignalGift() : CommonActionSignalGift(nullptr) {}
  ~CommonActionSignalGift() override;
  explicit PROTOBUF_CONSTEXPR CommonActionSignalGift(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommonActionSignalGift(const CommonActionSignalGift& from);
  CommonActionSignalGift(CommonActionSignalGift&& from) noexcept
    : CommonActionSignalGift() {
    *this = ::std::move(from);
  }

  inline CommonActionSignalGift& operator=(const CommonActionSignalGift& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonActionSignalGift& operator=(CommonActionSignalGift&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommonActionSignalGift& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommonActionSignalGift* internal_default_instance() {
    return reinterpret_cast<const CommonActionSignalGift*>(
               &_CommonActionSignalGift_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CommonActionSignalGift& a, CommonActionSignalGift& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonActionSignalGift* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonActionSignalGift* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommonActionSignalGift* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommonActionSignalGift>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommonActionSignalGift& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommonActionSignalGift& from) {
    CommonActionSignalGift::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonActionSignalGift* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.CommonActionSignalGift";
  }
  protected:
  explicit CommonActionSignalGift(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComboKeyFieldNumber = 7,
    kUserInfoFieldNumber = 1,
    kDrawGiftInfoFieldNumber = 10,
    kSendTimeMsFieldNumber = 2,
    kGiftIdFieldNumber = 3,
    kBatchSizeFieldNumber = 4,
    kComboCountFieldNumber = 5,
    kRankFieldNumber = 6,
    kSlotDisplayDurationMsFieldNumber = 8,
    kExpireDurationMsFieldNumber = 9,
  };
  // string comboKey = 7;
  void clear_combokey();
  const std::string& combokey() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_combokey(ArgT0&& arg0, ArgT... args);
  std::string* mutable_combokey();
  PROTOBUF_NODISCARD std::string* release_combokey();
  void set_allocated_combokey(std::string* combokey);
  private:
  const std::string& _internal_combokey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_combokey(const std::string& value);
  std::string* _internal_mutable_combokey();
  public:

  // .AcFunDanmu.ZtLiveUserInfo userInfo = 1;
  bool has_userinfo() const;
  private:
  bool _internal_has_userinfo() const;
  public:
  void clear_userinfo();
  const ::AcFunDanmu::ZtLiveUserInfo& userinfo() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::ZtLiveUserInfo* release_userinfo();
  ::AcFunDanmu::ZtLiveUserInfo* mutable_userinfo();
  void set_allocated_userinfo(::AcFunDanmu::ZtLiveUserInfo* userinfo);
  private:
  const ::AcFunDanmu::ZtLiveUserInfo& _internal_userinfo() const;
  ::AcFunDanmu::ZtLiveUserInfo* _internal_mutable_userinfo();
  public:
  void unsafe_arena_set_allocated_userinfo(
      ::AcFunDanmu::ZtLiveUserInfo* userinfo);
  ::AcFunDanmu::ZtLiveUserInfo* unsafe_arena_release_userinfo();

  // .AcFunDanmu.ZtDrawGiftInfo drawGiftInfo = 10;
  bool has_drawgiftinfo() const;
  private:
  bool _internal_has_drawgiftinfo() const;
  public:
  void clear_drawgiftinfo();
  const ::AcFunDanmu::ZtDrawGiftInfo& drawgiftinfo() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::ZtDrawGiftInfo* release_drawgiftinfo();
  ::AcFunDanmu::ZtDrawGiftInfo* mutable_drawgiftinfo();
  void set_allocated_drawgiftinfo(::AcFunDanmu::ZtDrawGiftInfo* drawgiftinfo);
  private:
  const ::AcFunDanmu::ZtDrawGiftInfo& _internal_drawgiftinfo() const;
  ::AcFunDanmu::ZtDrawGiftInfo* _internal_mutable_drawgiftinfo();
  public:
  void unsafe_arena_set_allocated_drawgiftinfo(
      ::AcFunDanmu::ZtDrawGiftInfo* drawgiftinfo);
  ::AcFunDanmu::ZtDrawGiftInfo* unsafe_arena_release_drawgiftinfo();

  // int64 sendTimeMs = 2;
  void clear_sendtimems();
  int64_t sendtimems() const;
  void set_sendtimems(int64_t value);
  private:
  int64_t _internal_sendtimems() const;
  void _internal_set_sendtimems(int64_t value);
  public:

  // int64 giftId = 3;
  void clear_giftid();
  int64_t giftid() const;
  void set_giftid(int64_t value);
  private:
  int64_t _internal_giftid() const;
  void _internal_set_giftid(int64_t value);
  public:

  // int32 batchSize = 4;
  void clear_batchsize();
  int32_t batchsize() const;
  void set_batchsize(int32_t value);
  private:
  int32_t _internal_batchsize() const;
  void _internal_set_batchsize(int32_t value);
  public:

  // int32 comboCount = 5;
  void clear_combocount();
  int32_t combocount() const;
  void set_combocount(int32_t value);
  private:
  int32_t _internal_combocount() const;
  void _internal_set_combocount(int32_t value);
  public:

  // int64 rank = 6;
  void clear_rank();
  int64_t rank() const;
  void set_rank(int64_t value);
  private:
  int64_t _internal_rank() const;
  void _internal_set_rank(int64_t value);
  public:

  // int64 slotDisplayDurationMs = 8;
  void clear_slotdisplaydurationms();
  int64_t slotdisplaydurationms() const;
  void set_slotdisplaydurationms(int64_t value);
  private:
  int64_t _internal_slotdisplaydurationms() const;
  void _internal_set_slotdisplaydurationms(int64_t value);
  public:

  // int64 expireDurationMs = 9;
  void clear_expiredurationms();
  int64_t expiredurationms() const;
  void set_expiredurationms(int64_t value);
  private:
  int64_t _internal_expiredurationms() const;
  void _internal_set_expiredurationms(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.CommonActionSignalGift)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr combokey_;
    ::AcFunDanmu::ZtLiveUserInfo* userinfo_;
    ::AcFunDanmu::ZtDrawGiftInfo* drawgiftinfo_;
    int64_t sendtimems_;
    int64_t giftid_;
    int32_t batchsize_;
    int32_t combocount_;
    int64_t rank_;
    int64_t slotdisplaydurationms_;
    int64_t expiredurationms_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CommonActionSignalGift_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CommonActionSignalGift

// .AcFunDanmu.ZtLiveUserInfo userInfo = 1;
inline bool CommonActionSignalGift::_internal_has_userinfo() const {
  return this != internal_default_instance() && _impl_.userinfo_ != nullptr;
}
inline bool CommonActionSignalGift::has_userinfo() const {
  return _internal_has_userinfo();
}
inline const ::AcFunDanmu::ZtLiveUserInfo& CommonActionSignalGift::_internal_userinfo() const {
  const ::AcFunDanmu::ZtLiveUserInfo* p = _impl_.userinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::ZtLiveUserInfo&>(
      ::AcFunDanmu::_ZtLiveUserInfo_default_instance_);
}
inline const ::AcFunDanmu::ZtLiveUserInfo& CommonActionSignalGift::userinfo() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonActionSignalGift.userInfo)
  return _internal_userinfo();
}
inline void CommonActionSignalGift::unsafe_arena_set_allocated_userinfo(
    ::AcFunDanmu::ZtLiveUserInfo* userinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  _impl_.userinfo_ = userinfo;
  if (userinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.CommonActionSignalGift.userInfo)
}
inline ::AcFunDanmu::ZtLiveUserInfo* CommonActionSignalGift::release_userinfo() {
  
  ::AcFunDanmu::ZtLiveUserInfo* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AcFunDanmu::ZtLiveUserInfo* CommonActionSignalGift::unsafe_arena_release_userinfo() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.CommonActionSignalGift.userInfo)
  
  ::AcFunDanmu::ZtLiveUserInfo* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::ZtLiveUserInfo* CommonActionSignalGift::_internal_mutable_userinfo() {
  
  if (_impl_.userinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::ZtLiveUserInfo>(GetArenaForAllocation());
    _impl_.userinfo_ = p;
  }
  return _impl_.userinfo_;
}
inline ::AcFunDanmu::ZtLiveUserInfo* CommonActionSignalGift::mutable_userinfo() {
  ::AcFunDanmu::ZtLiveUserInfo* _msg = _internal_mutable_userinfo();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.CommonActionSignalGift.userInfo)
  return _msg;
}
inline void CommonActionSignalGift::set_allocated_userinfo(::AcFunDanmu::ZtLiveUserInfo* userinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  if (userinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userinfo));
    if (message_arena != submessage_arena) {
      userinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userinfo_ = userinfo;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.CommonActionSignalGift.userInfo)
}

// int64 sendTimeMs = 2;
inline void CommonActionSignalGift::clear_sendtimems() {
  _impl_.sendtimems_ = int64_t{0};
}
inline int64_t CommonActionSignalGift::_internal_sendtimems() const {
  return _impl_.sendtimems_;
}
inline int64_t CommonActionSignalGift::sendtimems() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonActionSignalGift.sendTimeMs)
  return _internal_sendtimems();
}
inline void CommonActionSignalGift::_internal_set_sendtimems(int64_t value) {
  
  _impl_.sendtimems_ = value;
}
inline void CommonActionSignalGift::set_sendtimems(int64_t value) {
  _internal_set_sendtimems(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommonActionSignalGift.sendTimeMs)
}

// int64 giftId = 3;
inline void CommonActionSignalGift::clear_giftid() {
  _impl_.giftid_ = int64_t{0};
}
inline int64_t CommonActionSignalGift::_internal_giftid() const {
  return _impl_.giftid_;
}
inline int64_t CommonActionSignalGift::giftid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonActionSignalGift.giftId)
  return _internal_giftid();
}
inline void CommonActionSignalGift::_internal_set_giftid(int64_t value) {
  
  _impl_.giftid_ = value;
}
inline void CommonActionSignalGift::set_giftid(int64_t value) {
  _internal_set_giftid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommonActionSignalGift.giftId)
}

// int32 batchSize = 4;
inline void CommonActionSignalGift::clear_batchsize() {
  _impl_.batchsize_ = 0;
}
inline int32_t CommonActionSignalGift::_internal_batchsize() const {
  return _impl_.batchsize_;
}
inline int32_t CommonActionSignalGift::batchsize() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonActionSignalGift.batchSize)
  return _internal_batchsize();
}
inline void CommonActionSignalGift::_internal_set_batchsize(int32_t value) {
  
  _impl_.batchsize_ = value;
}
inline void CommonActionSignalGift::set_batchsize(int32_t value) {
  _internal_set_batchsize(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommonActionSignalGift.batchSize)
}

// int32 comboCount = 5;
inline void CommonActionSignalGift::clear_combocount() {
  _impl_.combocount_ = 0;
}
inline int32_t CommonActionSignalGift::_internal_combocount() const {
  return _impl_.combocount_;
}
inline int32_t CommonActionSignalGift::combocount() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonActionSignalGift.comboCount)
  return _internal_combocount();
}
inline void CommonActionSignalGift::_internal_set_combocount(int32_t value) {
  
  _impl_.combocount_ = value;
}
inline void CommonActionSignalGift::set_combocount(int32_t value) {
  _internal_set_combocount(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommonActionSignalGift.comboCount)
}

// int64 rank = 6;
inline void CommonActionSignalGift::clear_rank() {
  _impl_.rank_ = int64_t{0};
}
inline int64_t CommonActionSignalGift::_internal_rank() const {
  return _impl_.rank_;
}
inline int64_t CommonActionSignalGift::rank() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonActionSignalGift.rank)
  return _internal_rank();
}
inline void CommonActionSignalGift::_internal_set_rank(int64_t value) {
  
  _impl_.rank_ = value;
}
inline void CommonActionSignalGift::set_rank(int64_t value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommonActionSignalGift.rank)
}

// string comboKey = 7;
inline void CommonActionSignalGift::clear_combokey() {
  _impl_.combokey_.ClearToEmpty();
}
inline const std::string& CommonActionSignalGift::combokey() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonActionSignalGift.comboKey)
  return _internal_combokey();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommonActionSignalGift::set_combokey(ArgT0&& arg0, ArgT... args) {
 
 _impl_.combokey_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommonActionSignalGift.comboKey)
}
inline std::string* CommonActionSignalGift::mutable_combokey() {
  std::string* _s = _internal_mutable_combokey();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.CommonActionSignalGift.comboKey)
  return _s;
}
inline const std::string& CommonActionSignalGift::_internal_combokey() const {
  return _impl_.combokey_.Get();
}
inline void CommonActionSignalGift::_internal_set_combokey(const std::string& value) {
  
  _impl_.combokey_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonActionSignalGift::_internal_mutable_combokey() {
  
  return _impl_.combokey_.Mutable(GetArenaForAllocation());
}
inline std::string* CommonActionSignalGift::release_combokey() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.CommonActionSignalGift.comboKey)
  return _impl_.combokey_.Release();
}
inline void CommonActionSignalGift::set_allocated_combokey(std::string* combokey) {
  if (combokey != nullptr) {
    
  } else {
    
  }
  _impl_.combokey_.SetAllocated(combokey, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.combokey_.IsDefault()) {
    _impl_.combokey_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.CommonActionSignalGift.comboKey)
}

// int64 slotDisplayDurationMs = 8;
inline void CommonActionSignalGift::clear_slotdisplaydurationms() {
  _impl_.slotdisplaydurationms_ = int64_t{0};
}
inline int64_t CommonActionSignalGift::_internal_slotdisplaydurationms() const {
  return _impl_.slotdisplaydurationms_;
}
inline int64_t CommonActionSignalGift::slotdisplaydurationms() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonActionSignalGift.slotDisplayDurationMs)
  return _internal_slotdisplaydurationms();
}
inline void CommonActionSignalGift::_internal_set_slotdisplaydurationms(int64_t value) {
  
  _impl_.slotdisplaydurationms_ = value;
}
inline void CommonActionSignalGift::set_slotdisplaydurationms(int64_t value) {
  _internal_set_slotdisplaydurationms(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommonActionSignalGift.slotDisplayDurationMs)
}

// int64 expireDurationMs = 9;
inline void CommonActionSignalGift::clear_expiredurationms() {
  _impl_.expiredurationms_ = int64_t{0};
}
inline int64_t CommonActionSignalGift::_internal_expiredurationms() const {
  return _impl_.expiredurationms_;
}
inline int64_t CommonActionSignalGift::expiredurationms() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonActionSignalGift.expireDurationMs)
  return _internal_expiredurationms();
}
inline void CommonActionSignalGift::_internal_set_expiredurationms(int64_t value) {
  
  _impl_.expiredurationms_ = value;
}
inline void CommonActionSignalGift::set_expiredurationms(int64_t value) {
  _internal_set_expiredurationms(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommonActionSignalGift.expireDurationMs)
}

// .AcFunDanmu.ZtDrawGiftInfo drawGiftInfo = 10;
inline bool CommonActionSignalGift::_internal_has_drawgiftinfo() const {
  return this != internal_default_instance() && _impl_.drawgiftinfo_ != nullptr;
}
inline bool CommonActionSignalGift::has_drawgiftinfo() const {
  return _internal_has_drawgiftinfo();
}
inline const ::AcFunDanmu::ZtDrawGiftInfo& CommonActionSignalGift::_internal_drawgiftinfo() const {
  const ::AcFunDanmu::ZtDrawGiftInfo* p = _impl_.drawgiftinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::ZtDrawGiftInfo&>(
      ::AcFunDanmu::_ZtDrawGiftInfo_default_instance_);
}
inline const ::AcFunDanmu::ZtDrawGiftInfo& CommonActionSignalGift::drawgiftinfo() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonActionSignalGift.drawGiftInfo)
  return _internal_drawgiftinfo();
}
inline void CommonActionSignalGift::unsafe_arena_set_allocated_drawgiftinfo(
    ::AcFunDanmu::ZtDrawGiftInfo* drawgiftinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.drawgiftinfo_);
  }
  _impl_.drawgiftinfo_ = drawgiftinfo;
  if (drawgiftinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.CommonActionSignalGift.drawGiftInfo)
}
inline ::AcFunDanmu::ZtDrawGiftInfo* CommonActionSignalGift::release_drawgiftinfo() {
  
  ::AcFunDanmu::ZtDrawGiftInfo* temp = _impl_.drawgiftinfo_;
  _impl_.drawgiftinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AcFunDanmu::ZtDrawGiftInfo* CommonActionSignalGift::unsafe_arena_release_drawgiftinfo() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.CommonActionSignalGift.drawGiftInfo)
  
  ::AcFunDanmu::ZtDrawGiftInfo* temp = _impl_.drawgiftinfo_;
  _impl_.drawgiftinfo_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::ZtDrawGiftInfo* CommonActionSignalGift::_internal_mutable_drawgiftinfo() {
  
  if (_impl_.drawgiftinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::ZtDrawGiftInfo>(GetArenaForAllocation());
    _impl_.drawgiftinfo_ = p;
  }
  return _impl_.drawgiftinfo_;
}
inline ::AcFunDanmu::ZtDrawGiftInfo* CommonActionSignalGift::mutable_drawgiftinfo() {
  ::AcFunDanmu::ZtDrawGiftInfo* _msg = _internal_mutable_drawgiftinfo();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.CommonActionSignalGift.drawGiftInfo)
  return _msg;
}
inline void CommonActionSignalGift::set_allocated_drawgiftinfo(::AcFunDanmu::ZtDrawGiftInfo* drawgiftinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.drawgiftinfo_);
  }
  if (drawgiftinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawgiftinfo));
    if (message_arena != submessage_arena) {
      drawgiftinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drawgiftinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.drawgiftinfo_ = drawgiftinfo;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.CommonActionSignalGift.drawGiftInfo)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace AcFunDanmu

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_CommonActionSignalGift_2eproto
