// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ZtLiveCsCmd.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ZtLiveCsCmd_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ZtLiveCsCmd_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ZtLiveCsCmd_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ZtLiveCsCmd_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ZtLiveCsCmd_2eproto;
namespace AcFunDanmu {
class ZtLiveCsCmd;
struct ZtLiveCsCmdDefaultTypeInternal;
extern ZtLiveCsCmdDefaultTypeInternal _ZtLiveCsCmd_default_instance_;
class ZtLiveCsCmdAck;
struct ZtLiveCsCmdAckDefaultTypeInternal;
extern ZtLiveCsCmdAckDefaultTypeInternal _ZtLiveCsCmdAck_default_instance_;
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::ZtLiveCsCmd* Arena::CreateMaybeMessage<::AcFunDanmu::ZtLiveCsCmd>(Arena*);
template<> ::AcFunDanmu::ZtLiveCsCmdAck* Arena::CreateMaybeMessage<::AcFunDanmu::ZtLiveCsCmdAck>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {

// ===================================================================

class ZtLiveCsCmd final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.ZtLiveCsCmd) */ {
 public:
  inline ZtLiveCsCmd() : ZtLiveCsCmd(nullptr) {}
  ~ZtLiveCsCmd() override;
  explicit constexpr ZtLiveCsCmd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ZtLiveCsCmd(const ZtLiveCsCmd& from);
  ZtLiveCsCmd(ZtLiveCsCmd&& from) noexcept
    : ZtLiveCsCmd() {
    *this = ::std::move(from);
  }

  inline ZtLiveCsCmd& operator=(const ZtLiveCsCmd& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZtLiveCsCmd& operator=(ZtLiveCsCmd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ZtLiveCsCmd& default_instance() {
    return *internal_default_instance();
  }
  static inline const ZtLiveCsCmd* internal_default_instance() {
    return reinterpret_cast<const ZtLiveCsCmd*>(
               &_ZtLiveCsCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ZtLiveCsCmd& a, ZtLiveCsCmd& b) {
    a.Swap(&b);
  }
  inline void Swap(ZtLiveCsCmd* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZtLiveCsCmd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ZtLiveCsCmd* New() const final {
    return new ZtLiveCsCmd();
  }

  ZtLiveCsCmd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ZtLiveCsCmd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ZtLiveCsCmd& from);
  void MergeFrom(const ZtLiveCsCmd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZtLiveCsCmd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.ZtLiveCsCmd";
  }
  protected:
  explicit ZtLiveCsCmd(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCmdTypeFieldNumber = 1,
    kPayloadFieldNumber = 2,
    kTicketFieldNumber = 3,
    kLiveIdFieldNumber = 4,
  };
  // string cmdType = 1;
  void clear_cmdtype();
  const std::string& cmdtype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cmdtype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cmdtype();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_cmdtype();
  void set_allocated_cmdtype(std::string* cmdtype);
  private:
  const std::string& _internal_cmdtype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cmdtype(const std::string& value);
  std::string* _internal_mutable_cmdtype();
  public:

  // bytes payload = 2;
  void clear_payload();
  const std::string& payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // string ticket = 3;
  void clear_ticket();
  const std::string& ticket() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ticket(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ticket();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_ticket();
  void set_allocated_ticket(std::string* ticket);
  private:
  const std::string& _internal_ticket() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ticket(const std::string& value);
  std::string* _internal_mutable_ticket();
  public:

  // string liveId = 4;
  void clear_liveid();
  const std::string& liveid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_liveid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_liveid();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_liveid();
  void set_allocated_liveid(std::string* liveid);
  private:
  const std::string& _internal_liveid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_liveid(const std::string& value);
  std::string* _internal_mutable_liveid();
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.ZtLiveCsCmd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cmdtype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ticket_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr liveid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ZtLiveCsCmd_2eproto;
};
// -------------------------------------------------------------------

class ZtLiveCsCmdAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.ZtLiveCsCmdAck) */ {
 public:
  inline ZtLiveCsCmdAck() : ZtLiveCsCmdAck(nullptr) {}
  ~ZtLiveCsCmdAck() override;
  explicit constexpr ZtLiveCsCmdAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ZtLiveCsCmdAck(const ZtLiveCsCmdAck& from);
  ZtLiveCsCmdAck(ZtLiveCsCmdAck&& from) noexcept
    : ZtLiveCsCmdAck() {
    *this = ::std::move(from);
  }

  inline ZtLiveCsCmdAck& operator=(const ZtLiveCsCmdAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZtLiveCsCmdAck& operator=(ZtLiveCsCmdAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ZtLiveCsCmdAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const ZtLiveCsCmdAck* internal_default_instance() {
    return reinterpret_cast<const ZtLiveCsCmdAck*>(
               &_ZtLiveCsCmdAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ZtLiveCsCmdAck& a, ZtLiveCsCmdAck& b) {
    a.Swap(&b);
  }
  inline void Swap(ZtLiveCsCmdAck* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZtLiveCsCmdAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ZtLiveCsCmdAck* New() const final {
    return new ZtLiveCsCmdAck();
  }

  ZtLiveCsCmdAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ZtLiveCsCmdAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ZtLiveCsCmdAck& from);
  void MergeFrom(const ZtLiveCsCmdAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZtLiveCsCmdAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.ZtLiveCsCmdAck";
  }
  protected:
  explicit ZtLiveCsCmdAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCmdAckTypeFieldNumber = 1,
    kErrorMsgFieldNumber = 3,
    kPayloadFieldNumber = 4,
    kErrorCodeFieldNumber = 2,
  };
  // string cmdAckType = 1;
  void clear_cmdacktype();
  const std::string& cmdacktype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cmdacktype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cmdacktype();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_cmdacktype();
  void set_allocated_cmdacktype(std::string* cmdacktype);
  private:
  const std::string& _internal_cmdacktype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cmdacktype(const std::string& value);
  std::string* _internal_mutable_cmdacktype();
  public:

  // string errorMsg = 3;
  void clear_errormsg();
  const std::string& errormsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errormsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errormsg();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_errormsg();
  void set_allocated_errormsg(std::string* errormsg);
  private:
  const std::string& _internal_errormsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errormsg(const std::string& value);
  std::string* _internal_mutable_errormsg();
  public:

  // bytes payload = 4;
  void clear_payload();
  const std::string& payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // int64 errorCode = 2;
  void clear_errorcode();
  ::PROTOBUF_NAMESPACE_ID::int64 errorcode() const;
  void set_errorcode(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_errorcode() const;
  void _internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.ZtLiveCsCmdAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cmdacktype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errormsg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  ::PROTOBUF_NAMESPACE_ID::int64 errorcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ZtLiveCsCmd_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ZtLiveCsCmd

// string cmdType = 1;
inline void ZtLiveCsCmd::clear_cmdtype() {
  cmdtype_.ClearToEmpty();
}
inline const std::string& ZtLiveCsCmd::cmdtype() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.ZtLiveCsCmd.cmdType)
  return _internal_cmdtype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ZtLiveCsCmd::set_cmdtype(ArgT0&& arg0, ArgT... args) {
 
 cmdtype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.ZtLiveCsCmd.cmdType)
}
inline std::string* ZtLiveCsCmd::mutable_cmdtype() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.ZtLiveCsCmd.cmdType)
  return _internal_mutable_cmdtype();
}
inline const std::string& ZtLiveCsCmd::_internal_cmdtype() const {
  return cmdtype_.Get();
}
inline void ZtLiveCsCmd::_internal_set_cmdtype(const std::string& value) {
  
  cmdtype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ZtLiveCsCmd::_internal_mutable_cmdtype() {
  
  return cmdtype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ZtLiveCsCmd::release_cmdtype() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.ZtLiveCsCmd.cmdType)
  return cmdtype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ZtLiveCsCmd::set_allocated_cmdtype(std::string* cmdtype) {
  if (cmdtype != nullptr) {
    
  } else {
    
  }
  cmdtype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cmdtype,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.ZtLiveCsCmd.cmdType)
}

// bytes payload = 2;
inline void ZtLiveCsCmd::clear_payload() {
  payload_.ClearToEmpty();
}
inline const std::string& ZtLiveCsCmd::payload() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.ZtLiveCsCmd.payload)
  return _internal_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ZtLiveCsCmd::set_payload(ArgT0&& arg0, ArgT... args) {
 
 payload_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.ZtLiveCsCmd.payload)
}
inline std::string* ZtLiveCsCmd::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.ZtLiveCsCmd.payload)
  return _internal_mutable_payload();
}
inline const std::string& ZtLiveCsCmd::_internal_payload() const {
  return payload_.Get();
}
inline void ZtLiveCsCmd::_internal_set_payload(const std::string& value) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ZtLiveCsCmd::_internal_mutable_payload() {
  
  return payload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ZtLiveCsCmd::release_payload() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.ZtLiveCsCmd.payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ZtLiveCsCmd::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.ZtLiveCsCmd.payload)
}

// string ticket = 3;
inline void ZtLiveCsCmd::clear_ticket() {
  ticket_.ClearToEmpty();
}
inline const std::string& ZtLiveCsCmd::ticket() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.ZtLiveCsCmd.ticket)
  return _internal_ticket();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ZtLiveCsCmd::set_ticket(ArgT0&& arg0, ArgT... args) {
 
 ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.ZtLiveCsCmd.ticket)
}
inline std::string* ZtLiveCsCmd::mutable_ticket() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.ZtLiveCsCmd.ticket)
  return _internal_mutable_ticket();
}
inline const std::string& ZtLiveCsCmd::_internal_ticket() const {
  return ticket_.Get();
}
inline void ZtLiveCsCmd::_internal_set_ticket(const std::string& value) {
  
  ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ZtLiveCsCmd::_internal_mutable_ticket() {
  
  return ticket_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ZtLiveCsCmd::release_ticket() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.ZtLiveCsCmd.ticket)
  return ticket_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ZtLiveCsCmd::set_allocated_ticket(std::string* ticket) {
  if (ticket != nullptr) {
    
  } else {
    
  }
  ticket_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ticket,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.ZtLiveCsCmd.ticket)
}

// string liveId = 4;
inline void ZtLiveCsCmd::clear_liveid() {
  liveid_.ClearToEmpty();
}
inline const std::string& ZtLiveCsCmd::liveid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.ZtLiveCsCmd.liveId)
  return _internal_liveid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ZtLiveCsCmd::set_liveid(ArgT0&& arg0, ArgT... args) {
 
 liveid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.ZtLiveCsCmd.liveId)
}
inline std::string* ZtLiveCsCmd::mutable_liveid() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.ZtLiveCsCmd.liveId)
  return _internal_mutable_liveid();
}
inline const std::string& ZtLiveCsCmd::_internal_liveid() const {
  return liveid_.Get();
}
inline void ZtLiveCsCmd::_internal_set_liveid(const std::string& value) {
  
  liveid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ZtLiveCsCmd::_internal_mutable_liveid() {
  
  return liveid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ZtLiveCsCmd::release_liveid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.ZtLiveCsCmd.liveId)
  return liveid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ZtLiveCsCmd::set_allocated_liveid(std::string* liveid) {
  if (liveid != nullptr) {
    
  } else {
    
  }
  liveid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), liveid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.ZtLiveCsCmd.liveId)
}

// -------------------------------------------------------------------

// ZtLiveCsCmdAck

// string cmdAckType = 1;
inline void ZtLiveCsCmdAck::clear_cmdacktype() {
  cmdacktype_.ClearToEmpty();
}
inline const std::string& ZtLiveCsCmdAck::cmdacktype() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.ZtLiveCsCmdAck.cmdAckType)
  return _internal_cmdacktype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ZtLiveCsCmdAck::set_cmdacktype(ArgT0&& arg0, ArgT... args) {
 
 cmdacktype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.ZtLiveCsCmdAck.cmdAckType)
}
inline std::string* ZtLiveCsCmdAck::mutable_cmdacktype() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.ZtLiveCsCmdAck.cmdAckType)
  return _internal_mutable_cmdacktype();
}
inline const std::string& ZtLiveCsCmdAck::_internal_cmdacktype() const {
  return cmdacktype_.Get();
}
inline void ZtLiveCsCmdAck::_internal_set_cmdacktype(const std::string& value) {
  
  cmdacktype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ZtLiveCsCmdAck::_internal_mutable_cmdacktype() {
  
  return cmdacktype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ZtLiveCsCmdAck::release_cmdacktype() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.ZtLiveCsCmdAck.cmdAckType)
  return cmdacktype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ZtLiveCsCmdAck::set_allocated_cmdacktype(std::string* cmdacktype) {
  if (cmdacktype != nullptr) {
    
  } else {
    
  }
  cmdacktype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cmdacktype,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.ZtLiveCsCmdAck.cmdAckType)
}

// int64 errorCode = 2;
inline void ZtLiveCsCmdAck::clear_errorcode() {
  errorcode_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ZtLiveCsCmdAck::_internal_errorcode() const {
  return errorcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ZtLiveCsCmdAck::errorcode() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.ZtLiveCsCmdAck.errorCode)
  return _internal_errorcode();
}
inline void ZtLiveCsCmdAck::_internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  errorcode_ = value;
}
inline void ZtLiveCsCmdAck::set_errorcode(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.ZtLiveCsCmdAck.errorCode)
}

// string errorMsg = 3;
inline void ZtLiveCsCmdAck::clear_errormsg() {
  errormsg_.ClearToEmpty();
}
inline const std::string& ZtLiveCsCmdAck::errormsg() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.ZtLiveCsCmdAck.errorMsg)
  return _internal_errormsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ZtLiveCsCmdAck::set_errormsg(ArgT0&& arg0, ArgT... args) {
 
 errormsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.ZtLiveCsCmdAck.errorMsg)
}
inline std::string* ZtLiveCsCmdAck::mutable_errormsg() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.ZtLiveCsCmdAck.errorMsg)
  return _internal_mutable_errormsg();
}
inline const std::string& ZtLiveCsCmdAck::_internal_errormsg() const {
  return errormsg_.Get();
}
inline void ZtLiveCsCmdAck::_internal_set_errormsg(const std::string& value) {
  
  errormsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ZtLiveCsCmdAck::_internal_mutable_errormsg() {
  
  return errormsg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ZtLiveCsCmdAck::release_errormsg() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.ZtLiveCsCmdAck.errorMsg)
  return errormsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ZtLiveCsCmdAck::set_allocated_errormsg(std::string* errormsg) {
  if (errormsg != nullptr) {
    
  } else {
    
  }
  errormsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errormsg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.ZtLiveCsCmdAck.errorMsg)
}

// bytes payload = 4;
inline void ZtLiveCsCmdAck::clear_payload() {
  payload_.ClearToEmpty();
}
inline const std::string& ZtLiveCsCmdAck::payload() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.ZtLiveCsCmdAck.payload)
  return _internal_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ZtLiveCsCmdAck::set_payload(ArgT0&& arg0, ArgT... args) {
 
 payload_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.ZtLiveCsCmdAck.payload)
}
inline std::string* ZtLiveCsCmdAck::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.ZtLiveCsCmdAck.payload)
  return _internal_mutable_payload();
}
inline const std::string& ZtLiveCsCmdAck::_internal_payload() const {
  return payload_.Get();
}
inline void ZtLiveCsCmdAck::_internal_set_payload(const std::string& value) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ZtLiveCsCmdAck::_internal_mutable_payload() {
  
  return payload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ZtLiveCsCmdAck::release_payload() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.ZtLiveCsCmdAck.payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ZtLiveCsCmdAck::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.ZtLiveCsCmdAck.payload)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace AcFunDanmu

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ZtLiveCsCmd_2eproto
