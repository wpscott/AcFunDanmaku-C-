// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ZtLiveScMessage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ZtLiveScMessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ZtLiveScMessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ZtLiveScMessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ZtLiveScMessage_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ZtLiveScMessage_2eproto;
namespace AcFunDanmu {
class ZtLiveScMessage;
struct ZtLiveScMessageDefaultTypeInternal;
extern ZtLiveScMessageDefaultTypeInternal _ZtLiveScMessage_default_instance_;
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::ZtLiveScMessage* Arena::CreateMaybeMessage<::AcFunDanmu::ZtLiveScMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {

enum ZtLiveScMessage_CompressionType : int {
  ZtLiveScMessage_CompressionType_UNKNOWN = 0,
  ZtLiveScMessage_CompressionType_NONE = 1,
  ZtLiveScMessage_CompressionType_GZIP = 2,
  ZtLiveScMessage_CompressionType_ZtLiveScMessage_CompressionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ZtLiveScMessage_CompressionType_ZtLiveScMessage_CompressionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ZtLiveScMessage_CompressionType_IsValid(int value);
constexpr ZtLiveScMessage_CompressionType ZtLiveScMessage_CompressionType_CompressionType_MIN = ZtLiveScMessage_CompressionType_UNKNOWN;
constexpr ZtLiveScMessage_CompressionType ZtLiveScMessage_CompressionType_CompressionType_MAX = ZtLiveScMessage_CompressionType_GZIP;
constexpr int ZtLiveScMessage_CompressionType_CompressionType_ARRAYSIZE = ZtLiveScMessage_CompressionType_CompressionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ZtLiveScMessage_CompressionType_descriptor();
template<typename T>
inline const std::string& ZtLiveScMessage_CompressionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ZtLiveScMessage_CompressionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ZtLiveScMessage_CompressionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ZtLiveScMessage_CompressionType_descriptor(), enum_t_value);
}
inline bool ZtLiveScMessage_CompressionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ZtLiveScMessage_CompressionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ZtLiveScMessage_CompressionType>(
    ZtLiveScMessage_CompressionType_descriptor(), name, value);
}
// ===================================================================

class ZtLiveScMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.ZtLiveScMessage) */ {
 public:
  inline ZtLiveScMessage() : ZtLiveScMessage(nullptr) {}
  ~ZtLiveScMessage() override;
  explicit PROTOBUF_CONSTEXPR ZtLiveScMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ZtLiveScMessage(const ZtLiveScMessage& from);
  ZtLiveScMessage(ZtLiveScMessage&& from) noexcept
    : ZtLiveScMessage() {
    *this = ::std::move(from);
  }

  inline ZtLiveScMessage& operator=(const ZtLiveScMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZtLiveScMessage& operator=(ZtLiveScMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ZtLiveScMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ZtLiveScMessage* internal_default_instance() {
    return reinterpret_cast<const ZtLiveScMessage*>(
               &_ZtLiveScMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ZtLiveScMessage& a, ZtLiveScMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ZtLiveScMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZtLiveScMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ZtLiveScMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ZtLiveScMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ZtLiveScMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ZtLiveScMessage& from) {
    ZtLiveScMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZtLiveScMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.ZtLiveScMessage";
  }
  protected:
  explicit ZtLiveScMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ZtLiveScMessage_CompressionType CompressionType;
  static constexpr CompressionType UNKNOWN =
    ZtLiveScMessage_CompressionType_UNKNOWN;
  static constexpr CompressionType NONE =
    ZtLiveScMessage_CompressionType_NONE;
  static constexpr CompressionType GZIP =
    ZtLiveScMessage_CompressionType_GZIP;
  static inline bool CompressionType_IsValid(int value) {
    return ZtLiveScMessage_CompressionType_IsValid(value);
  }
  static constexpr CompressionType CompressionType_MIN =
    ZtLiveScMessage_CompressionType_CompressionType_MIN;
  static constexpr CompressionType CompressionType_MAX =
    ZtLiveScMessage_CompressionType_CompressionType_MAX;
  static constexpr int CompressionType_ARRAYSIZE =
    ZtLiveScMessage_CompressionType_CompressionType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CompressionType_descriptor() {
    return ZtLiveScMessage_CompressionType_descriptor();
  }
  template<typename T>
  static inline const std::string& CompressionType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CompressionType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CompressionType_Name.");
    return ZtLiveScMessage_CompressionType_Name(enum_t_value);
  }
  static inline bool CompressionType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CompressionType* value) {
    return ZtLiveScMessage_CompressionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMessageTypeFieldNumber = 1,
    kPayloadFieldNumber = 3,
    kLiveIdFieldNumber = 4,
    kTicketFieldNumber = 5,
    kServerTimestampMsFieldNumber = 6,
    kCompressionTypeFieldNumber = 2,
  };
  // string messageType = 1;
  void clear_messagetype();
  const std::string& messagetype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_messagetype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_messagetype();
  PROTOBUF_NODISCARD std::string* release_messagetype();
  void set_allocated_messagetype(std::string* messagetype);
  private:
  const std::string& _internal_messagetype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_messagetype(const std::string& value);
  std::string* _internal_mutable_messagetype();
  public:

  // bytes payload = 3;
  void clear_payload();
  const std::string& payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // string liveId = 4;
  void clear_liveid();
  const std::string& liveid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_liveid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_liveid();
  PROTOBUF_NODISCARD std::string* release_liveid();
  void set_allocated_liveid(std::string* liveid);
  private:
  const std::string& _internal_liveid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_liveid(const std::string& value);
  std::string* _internal_mutable_liveid();
  public:

  // string ticket = 5;
  void clear_ticket();
  const std::string& ticket() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ticket(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ticket();
  PROTOBUF_NODISCARD std::string* release_ticket();
  void set_allocated_ticket(std::string* ticket);
  private:
  const std::string& _internal_ticket() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ticket(const std::string& value);
  std::string* _internal_mutable_ticket();
  public:

  // int64 serverTimestampMs = 6;
  void clear_servertimestampms();
  int64_t servertimestampms() const;
  void set_servertimestampms(int64_t value);
  private:
  int64_t _internal_servertimestampms() const;
  void _internal_set_servertimestampms(int64_t value);
  public:

  // .AcFunDanmu.ZtLiveScMessage.CompressionType compressionType = 2;
  void clear_compressiontype();
  ::AcFunDanmu::ZtLiveScMessage_CompressionType compressiontype() const;
  void set_compressiontype(::AcFunDanmu::ZtLiveScMessage_CompressionType value);
  private:
  ::AcFunDanmu::ZtLiveScMessage_CompressionType _internal_compressiontype() const;
  void _internal_set_compressiontype(::AcFunDanmu::ZtLiveScMessage_CompressionType value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.ZtLiveScMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr messagetype_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr liveid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ticket_;
    int64_t servertimestampms_;
    int compressiontype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ZtLiveScMessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ZtLiveScMessage

// string messageType = 1;
inline void ZtLiveScMessage::clear_messagetype() {
  _impl_.messagetype_.ClearToEmpty();
}
inline const std::string& ZtLiveScMessage::messagetype() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.ZtLiveScMessage.messageType)
  return _internal_messagetype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ZtLiveScMessage::set_messagetype(ArgT0&& arg0, ArgT... args) {
 
 _impl_.messagetype_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.ZtLiveScMessage.messageType)
}
inline std::string* ZtLiveScMessage::mutable_messagetype() {
  std::string* _s = _internal_mutable_messagetype();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.ZtLiveScMessage.messageType)
  return _s;
}
inline const std::string& ZtLiveScMessage::_internal_messagetype() const {
  return _impl_.messagetype_.Get();
}
inline void ZtLiveScMessage::_internal_set_messagetype(const std::string& value) {
  
  _impl_.messagetype_.Set(value, GetArenaForAllocation());
}
inline std::string* ZtLiveScMessage::_internal_mutable_messagetype() {
  
  return _impl_.messagetype_.Mutable(GetArenaForAllocation());
}
inline std::string* ZtLiveScMessage::release_messagetype() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.ZtLiveScMessage.messageType)
  return _impl_.messagetype_.Release();
}
inline void ZtLiveScMessage::set_allocated_messagetype(std::string* messagetype) {
  if (messagetype != nullptr) {
    
  } else {
    
  }
  _impl_.messagetype_.SetAllocated(messagetype, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.messagetype_.IsDefault()) {
    _impl_.messagetype_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.ZtLiveScMessage.messageType)
}

// .AcFunDanmu.ZtLiveScMessage.CompressionType compressionType = 2;
inline void ZtLiveScMessage::clear_compressiontype() {
  _impl_.compressiontype_ = 0;
}
inline ::AcFunDanmu::ZtLiveScMessage_CompressionType ZtLiveScMessage::_internal_compressiontype() const {
  return static_cast< ::AcFunDanmu::ZtLiveScMessage_CompressionType >(_impl_.compressiontype_);
}
inline ::AcFunDanmu::ZtLiveScMessage_CompressionType ZtLiveScMessage::compressiontype() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.ZtLiveScMessage.compressionType)
  return _internal_compressiontype();
}
inline void ZtLiveScMessage::_internal_set_compressiontype(::AcFunDanmu::ZtLiveScMessage_CompressionType value) {
  
  _impl_.compressiontype_ = value;
}
inline void ZtLiveScMessage::set_compressiontype(::AcFunDanmu::ZtLiveScMessage_CompressionType value) {
  _internal_set_compressiontype(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.ZtLiveScMessage.compressionType)
}

// bytes payload = 3;
inline void ZtLiveScMessage::clear_payload() {
  _impl_.payload_.ClearToEmpty();
}
inline const std::string& ZtLiveScMessage::payload() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.ZtLiveScMessage.payload)
  return _internal_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ZtLiveScMessage::set_payload(ArgT0&& arg0, ArgT... args) {
 
 _impl_.payload_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.ZtLiveScMessage.payload)
}
inline std::string* ZtLiveScMessage::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.ZtLiveScMessage.payload)
  return _s;
}
inline const std::string& ZtLiveScMessage::_internal_payload() const {
  return _impl_.payload_.Get();
}
inline void ZtLiveScMessage::_internal_set_payload(const std::string& value) {
  
  _impl_.payload_.Set(value, GetArenaForAllocation());
}
inline std::string* ZtLiveScMessage::_internal_mutable_payload() {
  
  return _impl_.payload_.Mutable(GetArenaForAllocation());
}
inline std::string* ZtLiveScMessage::release_payload() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.ZtLiveScMessage.payload)
  return _impl_.payload_.Release();
}
inline void ZtLiveScMessage::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  _impl_.payload_.SetAllocated(payload, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.payload_.IsDefault()) {
    _impl_.payload_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.ZtLiveScMessage.payload)
}

// string liveId = 4;
inline void ZtLiveScMessage::clear_liveid() {
  _impl_.liveid_.ClearToEmpty();
}
inline const std::string& ZtLiveScMessage::liveid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.ZtLiveScMessage.liveId)
  return _internal_liveid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ZtLiveScMessage::set_liveid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.liveid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.ZtLiveScMessage.liveId)
}
inline std::string* ZtLiveScMessage::mutable_liveid() {
  std::string* _s = _internal_mutable_liveid();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.ZtLiveScMessage.liveId)
  return _s;
}
inline const std::string& ZtLiveScMessage::_internal_liveid() const {
  return _impl_.liveid_.Get();
}
inline void ZtLiveScMessage::_internal_set_liveid(const std::string& value) {
  
  _impl_.liveid_.Set(value, GetArenaForAllocation());
}
inline std::string* ZtLiveScMessage::_internal_mutable_liveid() {
  
  return _impl_.liveid_.Mutable(GetArenaForAllocation());
}
inline std::string* ZtLiveScMessage::release_liveid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.ZtLiveScMessage.liveId)
  return _impl_.liveid_.Release();
}
inline void ZtLiveScMessage::set_allocated_liveid(std::string* liveid) {
  if (liveid != nullptr) {
    
  } else {
    
  }
  _impl_.liveid_.SetAllocated(liveid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.liveid_.IsDefault()) {
    _impl_.liveid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.ZtLiveScMessage.liveId)
}

// string ticket = 5;
inline void ZtLiveScMessage::clear_ticket() {
  _impl_.ticket_.ClearToEmpty();
}
inline const std::string& ZtLiveScMessage::ticket() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.ZtLiveScMessage.ticket)
  return _internal_ticket();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ZtLiveScMessage::set_ticket(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ticket_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.ZtLiveScMessage.ticket)
}
inline std::string* ZtLiveScMessage::mutable_ticket() {
  std::string* _s = _internal_mutable_ticket();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.ZtLiveScMessage.ticket)
  return _s;
}
inline const std::string& ZtLiveScMessage::_internal_ticket() const {
  return _impl_.ticket_.Get();
}
inline void ZtLiveScMessage::_internal_set_ticket(const std::string& value) {
  
  _impl_.ticket_.Set(value, GetArenaForAllocation());
}
inline std::string* ZtLiveScMessage::_internal_mutable_ticket() {
  
  return _impl_.ticket_.Mutable(GetArenaForAllocation());
}
inline std::string* ZtLiveScMessage::release_ticket() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.ZtLiveScMessage.ticket)
  return _impl_.ticket_.Release();
}
inline void ZtLiveScMessage::set_allocated_ticket(std::string* ticket) {
  if (ticket != nullptr) {
    
  } else {
    
  }
  _impl_.ticket_.SetAllocated(ticket, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ticket_.IsDefault()) {
    _impl_.ticket_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.ZtLiveScMessage.ticket)
}

// int64 serverTimestampMs = 6;
inline void ZtLiveScMessage::clear_servertimestampms() {
  _impl_.servertimestampms_ = int64_t{0};
}
inline int64_t ZtLiveScMessage::_internal_servertimestampms() const {
  return _impl_.servertimestampms_;
}
inline int64_t ZtLiveScMessage::servertimestampms() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.ZtLiveScMessage.serverTimestampMs)
  return _internal_servertimestampms();
}
inline void ZtLiveScMessage::_internal_set_servertimestampms(int64_t value) {
  
  _impl_.servertimestampms_ = value;
}
inline void ZtLiveScMessage::set_servertimestampms(int64_t value) {
  _internal_set_servertimestampms(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.ZtLiveScMessage.serverTimestampMs)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace AcFunDanmu

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::AcFunDanmu::ZtLiveScMessage_CompressionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::ZtLiveScMessage_CompressionType>() {
  return ::AcFunDanmu::ZtLiveScMessage_CompressionType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ZtLiveScMessage_2eproto
