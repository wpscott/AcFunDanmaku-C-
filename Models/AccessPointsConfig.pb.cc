// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AccessPointsConfig.proto

#include "AccessPointsConfig.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace AcFunDanmu {
constexpr AccessPointsConfig::AccessPointsConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : optimalaps_()
  , backupaps_()
  , availableports_()
  , _availableports_cached_byte_size_()
  , forecelastconnectedap_(nullptr){}
struct AccessPointsConfigDefaultTypeInternal {
  constexpr AccessPointsConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AccessPointsConfigDefaultTypeInternal() {}
  union {
    AccessPointsConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AccessPointsConfigDefaultTypeInternal _AccessPointsConfig_default_instance_;
}  // namespace AcFunDanmu
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_AccessPointsConfig_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_AccessPointsConfig_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_AccessPointsConfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_AccessPointsConfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::AccessPointsConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::AccessPointsConfig, optimalaps_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::AccessPointsConfig, backupaps_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::AccessPointsConfig, availableports_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::AccessPointsConfig, forecelastconnectedap_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::AcFunDanmu::AccessPointsConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AcFunDanmu::_AccessPointsConfig_default_instance_),
};

const char descriptor_table_protodef_AccessPointsConfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030AccessPointsConfig.proto\022\nAcFunDanmu\032\021"
  "AccessPoint.proto\"\275\001\n\022AccessPointsConfig"
  "\022+\n\noptimalAps\030\001 \003(\0132\027.AcFunDanmu.Access"
  "Point\022*\n\tbackupAps\030\002 \003(\0132\027.AcFunDanmu.Ac"
  "cessPoint\022\026\n\016availablePorts\030\003 \003(\r\0226\n\025for"
  "eceLastConnectedAp\030\004 \001(\0132\027.AcFunDanmu.Ac"
  "cessPointb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_AccessPointsConfig_2eproto_deps[1] = {
  &::descriptor_table_AccessPoint_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_AccessPointsConfig_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_AccessPointsConfig_2eproto = {
  false, false, 257, descriptor_table_protodef_AccessPointsConfig_2eproto, "AccessPointsConfig.proto", 
  &descriptor_table_AccessPointsConfig_2eproto_once, descriptor_table_AccessPointsConfig_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_AccessPointsConfig_2eproto::offsets,
  file_level_metadata_AccessPointsConfig_2eproto, file_level_enum_descriptors_AccessPointsConfig_2eproto, file_level_service_descriptors_AccessPointsConfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_AccessPointsConfig_2eproto_getter() {
  return &descriptor_table_AccessPointsConfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_AccessPointsConfig_2eproto(&descriptor_table_AccessPointsConfig_2eproto);
namespace AcFunDanmu {

// ===================================================================

class AccessPointsConfig::_Internal {
 public:
  static const ::AcFunDanmu::AccessPoint& forecelastconnectedap(const AccessPointsConfig* msg);
};

const ::AcFunDanmu::AccessPoint&
AccessPointsConfig::_Internal::forecelastconnectedap(const AccessPointsConfig* msg) {
  return *msg->forecelastconnectedap_;
}
void AccessPointsConfig::clear_optimalaps() {
  optimalaps_.Clear();
}
void AccessPointsConfig::clear_backupaps() {
  backupaps_.Clear();
}
void AccessPointsConfig::clear_forecelastconnectedap() {
  if (GetArenaForAllocation() == nullptr && forecelastconnectedap_ != nullptr) {
    delete forecelastconnectedap_;
  }
  forecelastconnectedap_ = nullptr;
}
AccessPointsConfig::AccessPointsConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  optimalaps_(arena),
  backupaps_(arena),
  availableports_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.AccessPointsConfig)
}
AccessPointsConfig::AccessPointsConfig(const AccessPointsConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      optimalaps_(from.optimalaps_),
      backupaps_(from.backupaps_),
      availableports_(from.availableports_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_forecelastconnectedap()) {
    forecelastconnectedap_ = new ::AcFunDanmu::AccessPoint(*from.forecelastconnectedap_);
  } else {
    forecelastconnectedap_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.AccessPointsConfig)
}

void AccessPointsConfig::SharedCtor() {
forecelastconnectedap_ = nullptr;
}

AccessPointsConfig::~AccessPointsConfig() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.AccessPointsConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AccessPointsConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete forecelastconnectedap_;
}

void AccessPointsConfig::ArenaDtor(void* object) {
  AccessPointsConfig* _this = reinterpret_cast< AccessPointsConfig* >(object);
  (void)_this;
}
void AccessPointsConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccessPointsConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AccessPointsConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.AccessPointsConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  optimalaps_.Clear();
  backupaps_.Clear();
  availableports_.Clear();
  if (GetArenaForAllocation() == nullptr && forecelastconnectedap_ != nullptr) {
    delete forecelastconnectedap_;
  }
  forecelastconnectedap_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccessPointsConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .AcFunDanmu.AccessPoint optimalAps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_optimalaps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .AcFunDanmu.AccessPoint backupAps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_backupaps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 availablePorts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_availableports(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_availableports(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AcFunDanmu.AccessPoint foreceLastConnectedAp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_forecelastconnectedap(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccessPointsConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.AccessPointsConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .AcFunDanmu.AccessPoint optimalAps = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_optimalaps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_optimalaps(i), target, stream);
  }

  // repeated .AcFunDanmu.AccessPoint backupAps = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_backupaps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_backupaps(i), target, stream);
  }

  // repeated uint32 availablePorts = 3;
  {
    int byte_size = _availableports_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_availableports(), byte_size, target);
    }
  }

  // .AcFunDanmu.AccessPoint foreceLastConnectedAp = 4;
  if (this->has_forecelastconnectedap()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::forecelastconnectedap(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.AccessPointsConfig)
  return target;
}

size_t AccessPointsConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.AccessPointsConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .AcFunDanmu.AccessPoint optimalAps = 1;
  total_size += 1UL * this->_internal_optimalaps_size();
  for (const auto& msg : this->optimalaps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .AcFunDanmu.AccessPoint backupAps = 2;
  total_size += 1UL * this->_internal_backupaps_size();
  for (const auto& msg : this->backupaps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 availablePorts = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->availableports_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _availableports_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .AcFunDanmu.AccessPoint foreceLastConnectedAp = 4;
  if (this->has_forecelastconnectedap()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *forecelastconnectedap_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccessPointsConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AcFunDanmu.AccessPointsConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const AccessPointsConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccessPointsConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AcFunDanmu.AccessPointsConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AcFunDanmu.AccessPointsConfig)
    MergeFrom(*source);
  }
}

void AccessPointsConfig::MergeFrom(const AccessPointsConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.AccessPointsConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  optimalaps_.MergeFrom(from.optimalaps_);
  backupaps_.MergeFrom(from.backupaps_);
  availableports_.MergeFrom(from.availableports_);
  if (from.has_forecelastconnectedap()) {
    _internal_mutable_forecelastconnectedap()->::AcFunDanmu::AccessPoint::MergeFrom(from._internal_forecelastconnectedap());
  }
}

void AccessPointsConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AcFunDanmu.AccessPointsConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccessPointsConfig::CopyFrom(const AccessPointsConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.AccessPointsConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccessPointsConfig::IsInitialized() const {
  return true;
}

void AccessPointsConfig::InternalSwap(AccessPointsConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  optimalaps_.InternalSwap(&other->optimalaps_);
  backupaps_.InternalSwap(&other->backupaps_);
  availableports_.InternalSwap(&other->availableports_);
  swap(forecelastconnectedap_, other->forecelastconnectedap_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccessPointsConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_AccessPointsConfig_2eproto_getter, &descriptor_table_AccessPointsConfig_2eproto_once,
      file_level_metadata_AccessPointsConfig_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AcFunDanmu::AccessPointsConfig* Arena::CreateMaybeMessage< ::AcFunDanmu::AccessPointsConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::AccessPointsConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
