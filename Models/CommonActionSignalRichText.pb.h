// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommonActionSignalRichText.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_CommonActionSignalRichText_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_CommonActionSignalRichText_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ZtLiveUserInfo.pb.h"
#include "ImageCdnNode.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_CommonActionSignalRichText_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_CommonActionSignalRichText_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_CommonActionSignalRichText_2eproto;
namespace AcFunDanmu {
class CommonActionSignalRichText;
struct CommonActionSignalRichTextDefaultTypeInternal;
extern CommonActionSignalRichTextDefaultTypeInternal _CommonActionSignalRichText_default_instance_;
class CommonActionSignalRichText_ImageSegment;
struct CommonActionSignalRichText_ImageSegmentDefaultTypeInternal;
extern CommonActionSignalRichText_ImageSegmentDefaultTypeInternal _CommonActionSignalRichText_ImageSegment_default_instance_;
class CommonActionSignalRichText_PlainSegment;
struct CommonActionSignalRichText_PlainSegmentDefaultTypeInternal;
extern CommonActionSignalRichText_PlainSegmentDefaultTypeInternal _CommonActionSignalRichText_PlainSegment_default_instance_;
class CommonActionSignalRichText_RichTextSegment;
struct CommonActionSignalRichText_RichTextSegmentDefaultTypeInternal;
extern CommonActionSignalRichText_RichTextSegmentDefaultTypeInternal _CommonActionSignalRichText_RichTextSegment_default_instance_;
class CommonActionSignalRichText_UserInfoSegment;
struct CommonActionSignalRichText_UserInfoSegmentDefaultTypeInternal;
extern CommonActionSignalRichText_UserInfoSegmentDefaultTypeInternal _CommonActionSignalRichText_UserInfoSegment_default_instance_;
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::CommonActionSignalRichText* Arena::CreateMaybeMessage<::AcFunDanmu::CommonActionSignalRichText>(Arena*);
template<> ::AcFunDanmu::CommonActionSignalRichText_ImageSegment* Arena::CreateMaybeMessage<::AcFunDanmu::CommonActionSignalRichText_ImageSegment>(Arena*);
template<> ::AcFunDanmu::CommonActionSignalRichText_PlainSegment* Arena::CreateMaybeMessage<::AcFunDanmu::CommonActionSignalRichText_PlainSegment>(Arena*);
template<> ::AcFunDanmu::CommonActionSignalRichText_RichTextSegment* Arena::CreateMaybeMessage<::AcFunDanmu::CommonActionSignalRichText_RichTextSegment>(Arena*);
template<> ::AcFunDanmu::CommonActionSignalRichText_UserInfoSegment* Arena::CreateMaybeMessage<::AcFunDanmu::CommonActionSignalRichText_UserInfoSegment>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {

// ===================================================================

class CommonActionSignalRichText_ImageSegment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.CommonActionSignalRichText.ImageSegment) */ {
 public:
  inline CommonActionSignalRichText_ImageSegment() : CommonActionSignalRichText_ImageSegment(nullptr) {}
  ~CommonActionSignalRichText_ImageSegment() override;
  explicit PROTOBUF_CONSTEXPR CommonActionSignalRichText_ImageSegment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommonActionSignalRichText_ImageSegment(const CommonActionSignalRichText_ImageSegment& from);
  CommonActionSignalRichText_ImageSegment(CommonActionSignalRichText_ImageSegment&& from) noexcept
    : CommonActionSignalRichText_ImageSegment() {
    *this = ::std::move(from);
  }

  inline CommonActionSignalRichText_ImageSegment& operator=(const CommonActionSignalRichText_ImageSegment& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonActionSignalRichText_ImageSegment& operator=(CommonActionSignalRichText_ImageSegment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommonActionSignalRichText_ImageSegment& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommonActionSignalRichText_ImageSegment* internal_default_instance() {
    return reinterpret_cast<const CommonActionSignalRichText_ImageSegment*>(
               &_CommonActionSignalRichText_ImageSegment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CommonActionSignalRichText_ImageSegment& a, CommonActionSignalRichText_ImageSegment& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonActionSignalRichText_ImageSegment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonActionSignalRichText_ImageSegment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommonActionSignalRichText_ImageSegment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommonActionSignalRichText_ImageSegment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommonActionSignalRichText_ImageSegment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommonActionSignalRichText_ImageSegment& from) {
    CommonActionSignalRichText_ImageSegment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonActionSignalRichText_ImageSegment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.CommonActionSignalRichText.ImageSegment";
  }
  protected:
  explicit CommonActionSignalRichText_ImageSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPicturesFieldNumber = 1,
    kAlternativeTextFieldNumber = 2,
    kAlternativeColorFieldNumber = 3,
    kDFieldNumber = 4,
  };
  // repeated .AcFunDanmu.ImageCdnNode pictures = 1;
  int pictures_size() const;
  private:
  int _internal_pictures_size() const;
  public:
  void clear_pictures();
  ::AcFunDanmu::ImageCdnNode* mutable_pictures(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::ImageCdnNode >*
      mutable_pictures();
  private:
  const ::AcFunDanmu::ImageCdnNode& _internal_pictures(int index) const;
  ::AcFunDanmu::ImageCdnNode* _internal_add_pictures();
  public:
  const ::AcFunDanmu::ImageCdnNode& pictures(int index) const;
  ::AcFunDanmu::ImageCdnNode* add_pictures();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::ImageCdnNode >&
      pictures() const;

  // string alternativeText = 2;
  void clear_alternativetext();
  const std::string& alternativetext() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_alternativetext(ArgT0&& arg0, ArgT... args);
  std::string* mutable_alternativetext();
  PROTOBUF_NODISCARD std::string* release_alternativetext();
  void set_allocated_alternativetext(std::string* alternativetext);
  private:
  const std::string& _internal_alternativetext() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alternativetext(const std::string& value);
  std::string* _internal_mutable_alternativetext();
  public:

  // string alternativeColor = 3;
  void clear_alternativecolor();
  const std::string& alternativecolor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_alternativecolor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_alternativecolor();
  PROTOBUF_NODISCARD std::string* release_alternativecolor();
  void set_allocated_alternativecolor(std::string* alternativecolor);
  private:
  const std::string& _internal_alternativecolor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alternativecolor(const std::string& value);
  std::string* _internal_mutable_alternativecolor();
  public:

  // string d = 4;
  void clear_d();
  const std::string& d() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_d(ArgT0&& arg0, ArgT... args);
  std::string* mutable_d();
  PROTOBUF_NODISCARD std::string* release_d();
  void set_allocated_d(std::string* d);
  private:
  const std::string& _internal_d() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_d(const std::string& value);
  std::string* _internal_mutable_d();
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.CommonActionSignalRichText.ImageSegment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::ImageCdnNode > pictures_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alternativetext_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alternativecolor_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr d_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CommonActionSignalRichText_2eproto;
};
// -------------------------------------------------------------------

class CommonActionSignalRichText_PlainSegment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.CommonActionSignalRichText.PlainSegment) */ {
 public:
  inline CommonActionSignalRichText_PlainSegment() : CommonActionSignalRichText_PlainSegment(nullptr) {}
  ~CommonActionSignalRichText_PlainSegment() override;
  explicit PROTOBUF_CONSTEXPR CommonActionSignalRichText_PlainSegment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommonActionSignalRichText_PlainSegment(const CommonActionSignalRichText_PlainSegment& from);
  CommonActionSignalRichText_PlainSegment(CommonActionSignalRichText_PlainSegment&& from) noexcept
    : CommonActionSignalRichText_PlainSegment() {
    *this = ::std::move(from);
  }

  inline CommonActionSignalRichText_PlainSegment& operator=(const CommonActionSignalRichText_PlainSegment& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonActionSignalRichText_PlainSegment& operator=(CommonActionSignalRichText_PlainSegment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommonActionSignalRichText_PlainSegment& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommonActionSignalRichText_PlainSegment* internal_default_instance() {
    return reinterpret_cast<const CommonActionSignalRichText_PlainSegment*>(
               &_CommonActionSignalRichText_PlainSegment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CommonActionSignalRichText_PlainSegment& a, CommonActionSignalRichText_PlainSegment& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonActionSignalRichText_PlainSegment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonActionSignalRichText_PlainSegment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommonActionSignalRichText_PlainSegment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommonActionSignalRichText_PlainSegment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommonActionSignalRichText_PlainSegment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommonActionSignalRichText_PlainSegment& from) {
    CommonActionSignalRichText_PlainSegment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonActionSignalRichText_PlainSegment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.CommonActionSignalRichText.PlainSegment";
  }
  protected:
  explicit CommonActionSignalRichText_PlainSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
    kColorFieldNumber = 2,
    kCFieldNumber = 3,
  };
  // string text = 1;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // string color = 2;
  void clear_color();
  const std::string& color() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_color(ArgT0&& arg0, ArgT... args);
  std::string* mutable_color();
  PROTOBUF_NODISCARD std::string* release_color();
  void set_allocated_color(std::string* color);
  private:
  const std::string& _internal_color() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_color(const std::string& value);
  std::string* _internal_mutable_color();
  public:

  // string c = 3;
  void clear_c();
  const std::string& c() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_c(ArgT0&& arg0, ArgT... args);
  std::string* mutable_c();
  PROTOBUF_NODISCARD std::string* release_c();
  void set_allocated_c(std::string* c);
  private:
  const std::string& _internal_c() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_c(const std::string& value);
  std::string* _internal_mutable_c();
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.CommonActionSignalRichText.PlainSegment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr color_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr c_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CommonActionSignalRichText_2eproto;
};
// -------------------------------------------------------------------

class CommonActionSignalRichText_RichTextSegment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.CommonActionSignalRichText.RichTextSegment) */ {
 public:
  inline CommonActionSignalRichText_RichTextSegment() : CommonActionSignalRichText_RichTextSegment(nullptr) {}
  ~CommonActionSignalRichText_RichTextSegment() override;
  explicit PROTOBUF_CONSTEXPR CommonActionSignalRichText_RichTextSegment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommonActionSignalRichText_RichTextSegment(const CommonActionSignalRichText_RichTextSegment& from);
  CommonActionSignalRichText_RichTextSegment(CommonActionSignalRichText_RichTextSegment&& from) noexcept
    : CommonActionSignalRichText_RichTextSegment() {
    *this = ::std::move(from);
  }

  inline CommonActionSignalRichText_RichTextSegment& operator=(const CommonActionSignalRichText_RichTextSegment& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonActionSignalRichText_RichTextSegment& operator=(CommonActionSignalRichText_RichTextSegment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommonActionSignalRichText_RichTextSegment& default_instance() {
    return *internal_default_instance();
  }
  enum SegmentCase {
    kUserInfo = 1,
    kPlain = 2,
    kImage = 3,
    SEGMENT_NOT_SET = 0,
  };

  static inline const CommonActionSignalRichText_RichTextSegment* internal_default_instance() {
    return reinterpret_cast<const CommonActionSignalRichText_RichTextSegment*>(
               &_CommonActionSignalRichText_RichTextSegment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CommonActionSignalRichText_RichTextSegment& a, CommonActionSignalRichText_RichTextSegment& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonActionSignalRichText_RichTextSegment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonActionSignalRichText_RichTextSegment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommonActionSignalRichText_RichTextSegment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommonActionSignalRichText_RichTextSegment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommonActionSignalRichText_RichTextSegment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommonActionSignalRichText_RichTextSegment& from) {
    CommonActionSignalRichText_RichTextSegment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonActionSignalRichText_RichTextSegment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.CommonActionSignalRichText.RichTextSegment";
  }
  protected:
  explicit CommonActionSignalRichText_RichTextSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserInfoFieldNumber = 1,
    kPlainFieldNumber = 2,
    kImageFieldNumber = 3,
  };
  // .AcFunDanmu.CommonActionSignalRichText.UserInfoSegment userInfo = 1;
  bool has_userinfo() const;
  private:
  bool _internal_has_userinfo() const;
  public:
  void clear_userinfo();
  const ::AcFunDanmu::CommonActionSignalRichText_UserInfoSegment& userinfo() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::CommonActionSignalRichText_UserInfoSegment* release_userinfo();
  ::AcFunDanmu::CommonActionSignalRichText_UserInfoSegment* mutable_userinfo();
  void set_allocated_userinfo(::AcFunDanmu::CommonActionSignalRichText_UserInfoSegment* userinfo);
  private:
  const ::AcFunDanmu::CommonActionSignalRichText_UserInfoSegment& _internal_userinfo() const;
  ::AcFunDanmu::CommonActionSignalRichText_UserInfoSegment* _internal_mutable_userinfo();
  public:
  void unsafe_arena_set_allocated_userinfo(
      ::AcFunDanmu::CommonActionSignalRichText_UserInfoSegment* userinfo);
  ::AcFunDanmu::CommonActionSignalRichText_UserInfoSegment* unsafe_arena_release_userinfo();

  // .AcFunDanmu.CommonActionSignalRichText.PlainSegment plain = 2;
  bool has_plain() const;
  private:
  bool _internal_has_plain() const;
  public:
  void clear_plain();
  const ::AcFunDanmu::CommonActionSignalRichText_PlainSegment& plain() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::CommonActionSignalRichText_PlainSegment* release_plain();
  ::AcFunDanmu::CommonActionSignalRichText_PlainSegment* mutable_plain();
  void set_allocated_plain(::AcFunDanmu::CommonActionSignalRichText_PlainSegment* plain);
  private:
  const ::AcFunDanmu::CommonActionSignalRichText_PlainSegment& _internal_plain() const;
  ::AcFunDanmu::CommonActionSignalRichText_PlainSegment* _internal_mutable_plain();
  public:
  void unsafe_arena_set_allocated_plain(
      ::AcFunDanmu::CommonActionSignalRichText_PlainSegment* plain);
  ::AcFunDanmu::CommonActionSignalRichText_PlainSegment* unsafe_arena_release_plain();

  // .AcFunDanmu.CommonActionSignalRichText.ImageSegment image = 3;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::AcFunDanmu::CommonActionSignalRichText_ImageSegment& image() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::CommonActionSignalRichText_ImageSegment* release_image();
  ::AcFunDanmu::CommonActionSignalRichText_ImageSegment* mutable_image();
  void set_allocated_image(::AcFunDanmu::CommonActionSignalRichText_ImageSegment* image);
  private:
  const ::AcFunDanmu::CommonActionSignalRichText_ImageSegment& _internal_image() const;
  ::AcFunDanmu::CommonActionSignalRichText_ImageSegment* _internal_mutable_image();
  public:
  void unsafe_arena_set_allocated_image(
      ::AcFunDanmu::CommonActionSignalRichText_ImageSegment* image);
  ::AcFunDanmu::CommonActionSignalRichText_ImageSegment* unsafe_arena_release_image();

  void clear_segment();
  SegmentCase segment_case() const;
  // @@protoc_insertion_point(class_scope:AcFunDanmu.CommonActionSignalRichText.RichTextSegment)
 private:
  class _Internal;
  void set_has_userinfo();
  void set_has_plain();
  void set_has_image();

  inline bool has_segment() const;
  inline void clear_has_segment();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union SegmentUnion {
      constexpr SegmentUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::AcFunDanmu::CommonActionSignalRichText_UserInfoSegment* userinfo_;
      ::AcFunDanmu::CommonActionSignalRichText_PlainSegment* plain_;
      ::AcFunDanmu::CommonActionSignalRichText_ImageSegment* image_;
    } segment_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CommonActionSignalRichText_2eproto;
};
// -------------------------------------------------------------------

class CommonActionSignalRichText_UserInfoSegment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.CommonActionSignalRichText.UserInfoSegment) */ {
 public:
  inline CommonActionSignalRichText_UserInfoSegment() : CommonActionSignalRichText_UserInfoSegment(nullptr) {}
  ~CommonActionSignalRichText_UserInfoSegment() override;
  explicit PROTOBUF_CONSTEXPR CommonActionSignalRichText_UserInfoSegment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommonActionSignalRichText_UserInfoSegment(const CommonActionSignalRichText_UserInfoSegment& from);
  CommonActionSignalRichText_UserInfoSegment(CommonActionSignalRichText_UserInfoSegment&& from) noexcept
    : CommonActionSignalRichText_UserInfoSegment() {
    *this = ::std::move(from);
  }

  inline CommonActionSignalRichText_UserInfoSegment& operator=(const CommonActionSignalRichText_UserInfoSegment& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonActionSignalRichText_UserInfoSegment& operator=(CommonActionSignalRichText_UserInfoSegment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommonActionSignalRichText_UserInfoSegment& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommonActionSignalRichText_UserInfoSegment* internal_default_instance() {
    return reinterpret_cast<const CommonActionSignalRichText_UserInfoSegment*>(
               &_CommonActionSignalRichText_UserInfoSegment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CommonActionSignalRichText_UserInfoSegment& a, CommonActionSignalRichText_UserInfoSegment& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonActionSignalRichText_UserInfoSegment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonActionSignalRichText_UserInfoSegment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommonActionSignalRichText_UserInfoSegment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommonActionSignalRichText_UserInfoSegment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommonActionSignalRichText_UserInfoSegment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommonActionSignalRichText_UserInfoSegment& from) {
    CommonActionSignalRichText_UserInfoSegment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonActionSignalRichText_UserInfoSegment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.CommonActionSignalRichText.UserInfoSegment";
  }
  protected:
  explicit CommonActionSignalRichText_UserInfoSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorFieldNumber = 2,
    kUserFieldNumber = 1,
  };
  // string color = 2;
  void clear_color();
  const std::string& color() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_color(ArgT0&& arg0, ArgT... args);
  std::string* mutable_color();
  PROTOBUF_NODISCARD std::string* release_color();
  void set_allocated_color(std::string* color);
  private:
  const std::string& _internal_color() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_color(const std::string& value);
  std::string* _internal_mutable_color();
  public:

  // .AcFunDanmu.ZtLiveUserInfo user = 1;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::AcFunDanmu::ZtLiveUserInfo& user() const;
  PROTOBUF_NODISCARD ::AcFunDanmu::ZtLiveUserInfo* release_user();
  ::AcFunDanmu::ZtLiveUserInfo* mutable_user();
  void set_allocated_user(::AcFunDanmu::ZtLiveUserInfo* user);
  private:
  const ::AcFunDanmu::ZtLiveUserInfo& _internal_user() const;
  ::AcFunDanmu::ZtLiveUserInfo* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::AcFunDanmu::ZtLiveUserInfo* user);
  ::AcFunDanmu::ZtLiveUserInfo* unsafe_arena_release_user();

  // @@protoc_insertion_point(class_scope:AcFunDanmu.CommonActionSignalRichText.UserInfoSegment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr color_;
    ::AcFunDanmu::ZtLiveUserInfo* user_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CommonActionSignalRichText_2eproto;
};
// -------------------------------------------------------------------

class CommonActionSignalRichText final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.CommonActionSignalRichText) */ {
 public:
  inline CommonActionSignalRichText() : CommonActionSignalRichText(nullptr) {}
  ~CommonActionSignalRichText() override;
  explicit PROTOBUF_CONSTEXPR CommonActionSignalRichText(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommonActionSignalRichText(const CommonActionSignalRichText& from);
  CommonActionSignalRichText(CommonActionSignalRichText&& from) noexcept
    : CommonActionSignalRichText() {
    *this = ::std::move(from);
  }

  inline CommonActionSignalRichText& operator=(const CommonActionSignalRichText& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonActionSignalRichText& operator=(CommonActionSignalRichText&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommonActionSignalRichText& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommonActionSignalRichText* internal_default_instance() {
    return reinterpret_cast<const CommonActionSignalRichText*>(
               &_CommonActionSignalRichText_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CommonActionSignalRichText& a, CommonActionSignalRichText& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonActionSignalRichText* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonActionSignalRichText* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommonActionSignalRichText* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommonActionSignalRichText>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommonActionSignalRichText& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommonActionSignalRichText& from) {
    CommonActionSignalRichText::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonActionSignalRichText* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.CommonActionSignalRichText";
  }
  protected:
  explicit CommonActionSignalRichText(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CommonActionSignalRichText_ImageSegment ImageSegment;
  typedef CommonActionSignalRichText_PlainSegment PlainSegment;
  typedef CommonActionSignalRichText_RichTextSegment RichTextSegment;
  typedef CommonActionSignalRichText_UserInfoSegment UserInfoSegment;

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentsFieldNumber = 1,
    kSendTimeMsFieldNumber = 2,
  };
  // repeated .AcFunDanmu.CommonActionSignalRichText.RichTextSegment segments = 1;
  int segments_size() const;
  private:
  int _internal_segments_size() const;
  public:
  void clear_segments();
  ::AcFunDanmu::CommonActionSignalRichText_RichTextSegment* mutable_segments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::CommonActionSignalRichText_RichTextSegment >*
      mutable_segments();
  private:
  const ::AcFunDanmu::CommonActionSignalRichText_RichTextSegment& _internal_segments(int index) const;
  ::AcFunDanmu::CommonActionSignalRichText_RichTextSegment* _internal_add_segments();
  public:
  const ::AcFunDanmu::CommonActionSignalRichText_RichTextSegment& segments(int index) const;
  ::AcFunDanmu::CommonActionSignalRichText_RichTextSegment* add_segments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::CommonActionSignalRichText_RichTextSegment >&
      segments() const;

  // int64 sendTimeMs = 2;
  void clear_sendtimems();
  int64_t sendtimems() const;
  void set_sendtimems(int64_t value);
  private:
  int64_t _internal_sendtimems() const;
  void _internal_set_sendtimems(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.CommonActionSignalRichText)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::CommonActionSignalRichText_RichTextSegment > segments_;
    int64_t sendtimems_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CommonActionSignalRichText_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CommonActionSignalRichText_ImageSegment

// repeated .AcFunDanmu.ImageCdnNode pictures = 1;
inline int CommonActionSignalRichText_ImageSegment::_internal_pictures_size() const {
  return _impl_.pictures_.size();
}
inline int CommonActionSignalRichText_ImageSegment::pictures_size() const {
  return _internal_pictures_size();
}
inline ::AcFunDanmu::ImageCdnNode* CommonActionSignalRichText_ImageSegment::mutable_pictures(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.CommonActionSignalRichText.ImageSegment.pictures)
  return _impl_.pictures_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::ImageCdnNode >*
CommonActionSignalRichText_ImageSegment::mutable_pictures() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.CommonActionSignalRichText.ImageSegment.pictures)
  return &_impl_.pictures_;
}
inline const ::AcFunDanmu::ImageCdnNode& CommonActionSignalRichText_ImageSegment::_internal_pictures(int index) const {
  return _impl_.pictures_.Get(index);
}
inline const ::AcFunDanmu::ImageCdnNode& CommonActionSignalRichText_ImageSegment::pictures(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonActionSignalRichText.ImageSegment.pictures)
  return _internal_pictures(index);
}
inline ::AcFunDanmu::ImageCdnNode* CommonActionSignalRichText_ImageSegment::_internal_add_pictures() {
  return _impl_.pictures_.Add();
}
inline ::AcFunDanmu::ImageCdnNode* CommonActionSignalRichText_ImageSegment::add_pictures() {
  ::AcFunDanmu::ImageCdnNode* _add = _internal_add_pictures();
  // @@protoc_insertion_point(field_add:AcFunDanmu.CommonActionSignalRichText.ImageSegment.pictures)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::ImageCdnNode >&
CommonActionSignalRichText_ImageSegment::pictures() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.CommonActionSignalRichText.ImageSegment.pictures)
  return _impl_.pictures_;
}

// string alternativeText = 2;
inline void CommonActionSignalRichText_ImageSegment::clear_alternativetext() {
  _impl_.alternativetext_.ClearToEmpty();
}
inline const std::string& CommonActionSignalRichText_ImageSegment::alternativetext() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonActionSignalRichText.ImageSegment.alternativeText)
  return _internal_alternativetext();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommonActionSignalRichText_ImageSegment::set_alternativetext(ArgT0&& arg0, ArgT... args) {
 
 _impl_.alternativetext_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommonActionSignalRichText.ImageSegment.alternativeText)
}
inline std::string* CommonActionSignalRichText_ImageSegment::mutable_alternativetext() {
  std::string* _s = _internal_mutable_alternativetext();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.CommonActionSignalRichText.ImageSegment.alternativeText)
  return _s;
}
inline const std::string& CommonActionSignalRichText_ImageSegment::_internal_alternativetext() const {
  return _impl_.alternativetext_.Get();
}
inline void CommonActionSignalRichText_ImageSegment::_internal_set_alternativetext(const std::string& value) {
  
  _impl_.alternativetext_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonActionSignalRichText_ImageSegment::_internal_mutable_alternativetext() {
  
  return _impl_.alternativetext_.Mutable(GetArenaForAllocation());
}
inline std::string* CommonActionSignalRichText_ImageSegment::release_alternativetext() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.CommonActionSignalRichText.ImageSegment.alternativeText)
  return _impl_.alternativetext_.Release();
}
inline void CommonActionSignalRichText_ImageSegment::set_allocated_alternativetext(std::string* alternativetext) {
  if (alternativetext != nullptr) {
    
  } else {
    
  }
  _impl_.alternativetext_.SetAllocated(alternativetext, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.alternativetext_.IsDefault()) {
    _impl_.alternativetext_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.CommonActionSignalRichText.ImageSegment.alternativeText)
}

// string alternativeColor = 3;
inline void CommonActionSignalRichText_ImageSegment::clear_alternativecolor() {
  _impl_.alternativecolor_.ClearToEmpty();
}
inline const std::string& CommonActionSignalRichText_ImageSegment::alternativecolor() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonActionSignalRichText.ImageSegment.alternativeColor)
  return _internal_alternativecolor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommonActionSignalRichText_ImageSegment::set_alternativecolor(ArgT0&& arg0, ArgT... args) {
 
 _impl_.alternativecolor_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommonActionSignalRichText.ImageSegment.alternativeColor)
}
inline std::string* CommonActionSignalRichText_ImageSegment::mutable_alternativecolor() {
  std::string* _s = _internal_mutable_alternativecolor();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.CommonActionSignalRichText.ImageSegment.alternativeColor)
  return _s;
}
inline const std::string& CommonActionSignalRichText_ImageSegment::_internal_alternativecolor() const {
  return _impl_.alternativecolor_.Get();
}
inline void CommonActionSignalRichText_ImageSegment::_internal_set_alternativecolor(const std::string& value) {
  
  _impl_.alternativecolor_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonActionSignalRichText_ImageSegment::_internal_mutable_alternativecolor() {
  
  return _impl_.alternativecolor_.Mutable(GetArenaForAllocation());
}
inline std::string* CommonActionSignalRichText_ImageSegment::release_alternativecolor() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.CommonActionSignalRichText.ImageSegment.alternativeColor)
  return _impl_.alternativecolor_.Release();
}
inline void CommonActionSignalRichText_ImageSegment::set_allocated_alternativecolor(std::string* alternativecolor) {
  if (alternativecolor != nullptr) {
    
  } else {
    
  }
  _impl_.alternativecolor_.SetAllocated(alternativecolor, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.alternativecolor_.IsDefault()) {
    _impl_.alternativecolor_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.CommonActionSignalRichText.ImageSegment.alternativeColor)
}

// string d = 4;
inline void CommonActionSignalRichText_ImageSegment::clear_d() {
  _impl_.d_.ClearToEmpty();
}
inline const std::string& CommonActionSignalRichText_ImageSegment::d() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonActionSignalRichText.ImageSegment.d)
  return _internal_d();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommonActionSignalRichText_ImageSegment::set_d(ArgT0&& arg0, ArgT... args) {
 
 _impl_.d_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommonActionSignalRichText.ImageSegment.d)
}
inline std::string* CommonActionSignalRichText_ImageSegment::mutable_d() {
  std::string* _s = _internal_mutable_d();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.CommonActionSignalRichText.ImageSegment.d)
  return _s;
}
inline const std::string& CommonActionSignalRichText_ImageSegment::_internal_d() const {
  return _impl_.d_.Get();
}
inline void CommonActionSignalRichText_ImageSegment::_internal_set_d(const std::string& value) {
  
  _impl_.d_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonActionSignalRichText_ImageSegment::_internal_mutable_d() {
  
  return _impl_.d_.Mutable(GetArenaForAllocation());
}
inline std::string* CommonActionSignalRichText_ImageSegment::release_d() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.CommonActionSignalRichText.ImageSegment.d)
  return _impl_.d_.Release();
}
inline void CommonActionSignalRichText_ImageSegment::set_allocated_d(std::string* d) {
  if (d != nullptr) {
    
  } else {
    
  }
  _impl_.d_.SetAllocated(d, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.d_.IsDefault()) {
    _impl_.d_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.CommonActionSignalRichText.ImageSegment.d)
}

// -------------------------------------------------------------------

// CommonActionSignalRichText_PlainSegment

// string text = 1;
inline void CommonActionSignalRichText_PlainSegment::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& CommonActionSignalRichText_PlainSegment::text() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonActionSignalRichText.PlainSegment.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommonActionSignalRichText_PlainSegment::set_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommonActionSignalRichText.PlainSegment.text)
}
inline std::string* CommonActionSignalRichText_PlainSegment::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.CommonActionSignalRichText.PlainSegment.text)
  return _s;
}
inline const std::string& CommonActionSignalRichText_PlainSegment::_internal_text() const {
  return _impl_.text_.Get();
}
inline void CommonActionSignalRichText_PlainSegment::_internal_set_text(const std::string& value) {
  
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonActionSignalRichText_PlainSegment::_internal_mutable_text() {
  
  return _impl_.text_.Mutable(GetArenaForAllocation());
}
inline std::string* CommonActionSignalRichText_PlainSegment::release_text() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.CommonActionSignalRichText.PlainSegment.text)
  return _impl_.text_.Release();
}
inline void CommonActionSignalRichText_PlainSegment::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  _impl_.text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.CommonActionSignalRichText.PlainSegment.text)
}

// string color = 2;
inline void CommonActionSignalRichText_PlainSegment::clear_color() {
  _impl_.color_.ClearToEmpty();
}
inline const std::string& CommonActionSignalRichText_PlainSegment::color() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonActionSignalRichText.PlainSegment.color)
  return _internal_color();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommonActionSignalRichText_PlainSegment::set_color(ArgT0&& arg0, ArgT... args) {
 
 _impl_.color_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommonActionSignalRichText.PlainSegment.color)
}
inline std::string* CommonActionSignalRichText_PlainSegment::mutable_color() {
  std::string* _s = _internal_mutable_color();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.CommonActionSignalRichText.PlainSegment.color)
  return _s;
}
inline const std::string& CommonActionSignalRichText_PlainSegment::_internal_color() const {
  return _impl_.color_.Get();
}
inline void CommonActionSignalRichText_PlainSegment::_internal_set_color(const std::string& value) {
  
  _impl_.color_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonActionSignalRichText_PlainSegment::_internal_mutable_color() {
  
  return _impl_.color_.Mutable(GetArenaForAllocation());
}
inline std::string* CommonActionSignalRichText_PlainSegment::release_color() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.CommonActionSignalRichText.PlainSegment.color)
  return _impl_.color_.Release();
}
inline void CommonActionSignalRichText_PlainSegment::set_allocated_color(std::string* color) {
  if (color != nullptr) {
    
  } else {
    
  }
  _impl_.color_.SetAllocated(color, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.color_.IsDefault()) {
    _impl_.color_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.CommonActionSignalRichText.PlainSegment.color)
}

// string c = 3;
inline void CommonActionSignalRichText_PlainSegment::clear_c() {
  _impl_.c_.ClearToEmpty();
}
inline const std::string& CommonActionSignalRichText_PlainSegment::c() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonActionSignalRichText.PlainSegment.c)
  return _internal_c();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommonActionSignalRichText_PlainSegment::set_c(ArgT0&& arg0, ArgT... args) {
 
 _impl_.c_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommonActionSignalRichText.PlainSegment.c)
}
inline std::string* CommonActionSignalRichText_PlainSegment::mutable_c() {
  std::string* _s = _internal_mutable_c();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.CommonActionSignalRichText.PlainSegment.c)
  return _s;
}
inline const std::string& CommonActionSignalRichText_PlainSegment::_internal_c() const {
  return _impl_.c_.Get();
}
inline void CommonActionSignalRichText_PlainSegment::_internal_set_c(const std::string& value) {
  
  _impl_.c_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonActionSignalRichText_PlainSegment::_internal_mutable_c() {
  
  return _impl_.c_.Mutable(GetArenaForAllocation());
}
inline std::string* CommonActionSignalRichText_PlainSegment::release_c() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.CommonActionSignalRichText.PlainSegment.c)
  return _impl_.c_.Release();
}
inline void CommonActionSignalRichText_PlainSegment::set_allocated_c(std::string* c) {
  if (c != nullptr) {
    
  } else {
    
  }
  _impl_.c_.SetAllocated(c, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.c_.IsDefault()) {
    _impl_.c_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.CommonActionSignalRichText.PlainSegment.c)
}

// -------------------------------------------------------------------

// CommonActionSignalRichText_RichTextSegment

// .AcFunDanmu.CommonActionSignalRichText.UserInfoSegment userInfo = 1;
inline bool CommonActionSignalRichText_RichTextSegment::_internal_has_userinfo() const {
  return segment_case() == kUserInfo;
}
inline bool CommonActionSignalRichText_RichTextSegment::has_userinfo() const {
  return _internal_has_userinfo();
}
inline void CommonActionSignalRichText_RichTextSegment::set_has_userinfo() {
  _impl_._oneof_case_[0] = kUserInfo;
}
inline void CommonActionSignalRichText_RichTextSegment::clear_userinfo() {
  if (_internal_has_userinfo()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.segment_.userinfo_;
    }
    clear_has_segment();
  }
}
inline ::AcFunDanmu::CommonActionSignalRichText_UserInfoSegment* CommonActionSignalRichText_RichTextSegment::release_userinfo() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.CommonActionSignalRichText.RichTextSegment.userInfo)
  if (_internal_has_userinfo()) {
    clear_has_segment();
    ::AcFunDanmu::CommonActionSignalRichText_UserInfoSegment* temp = _impl_.segment_.userinfo_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.segment_.userinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::AcFunDanmu::CommonActionSignalRichText_UserInfoSegment& CommonActionSignalRichText_RichTextSegment::_internal_userinfo() const {
  return _internal_has_userinfo()
      ? *_impl_.segment_.userinfo_
      : reinterpret_cast< ::AcFunDanmu::CommonActionSignalRichText_UserInfoSegment&>(::AcFunDanmu::_CommonActionSignalRichText_UserInfoSegment_default_instance_);
}
inline const ::AcFunDanmu::CommonActionSignalRichText_UserInfoSegment& CommonActionSignalRichText_RichTextSegment::userinfo() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonActionSignalRichText.RichTextSegment.userInfo)
  return _internal_userinfo();
}
inline ::AcFunDanmu::CommonActionSignalRichText_UserInfoSegment* CommonActionSignalRichText_RichTextSegment::unsafe_arena_release_userinfo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AcFunDanmu.CommonActionSignalRichText.RichTextSegment.userInfo)
  if (_internal_has_userinfo()) {
    clear_has_segment();
    ::AcFunDanmu::CommonActionSignalRichText_UserInfoSegment* temp = _impl_.segment_.userinfo_;
    _impl_.segment_.userinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CommonActionSignalRichText_RichTextSegment::unsafe_arena_set_allocated_userinfo(::AcFunDanmu::CommonActionSignalRichText_UserInfoSegment* userinfo) {
  clear_segment();
  if (userinfo) {
    set_has_userinfo();
    _impl_.segment_.userinfo_ = userinfo;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.CommonActionSignalRichText.RichTextSegment.userInfo)
}
inline ::AcFunDanmu::CommonActionSignalRichText_UserInfoSegment* CommonActionSignalRichText_RichTextSegment::_internal_mutable_userinfo() {
  if (!_internal_has_userinfo()) {
    clear_segment();
    set_has_userinfo();
    _impl_.segment_.userinfo_ = CreateMaybeMessage< ::AcFunDanmu::CommonActionSignalRichText_UserInfoSegment >(GetArenaForAllocation());
  }
  return _impl_.segment_.userinfo_;
}
inline ::AcFunDanmu::CommonActionSignalRichText_UserInfoSegment* CommonActionSignalRichText_RichTextSegment::mutable_userinfo() {
  ::AcFunDanmu::CommonActionSignalRichText_UserInfoSegment* _msg = _internal_mutable_userinfo();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.CommonActionSignalRichText.RichTextSegment.userInfo)
  return _msg;
}

// .AcFunDanmu.CommonActionSignalRichText.PlainSegment plain = 2;
inline bool CommonActionSignalRichText_RichTextSegment::_internal_has_plain() const {
  return segment_case() == kPlain;
}
inline bool CommonActionSignalRichText_RichTextSegment::has_plain() const {
  return _internal_has_plain();
}
inline void CommonActionSignalRichText_RichTextSegment::set_has_plain() {
  _impl_._oneof_case_[0] = kPlain;
}
inline void CommonActionSignalRichText_RichTextSegment::clear_plain() {
  if (_internal_has_plain()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.segment_.plain_;
    }
    clear_has_segment();
  }
}
inline ::AcFunDanmu::CommonActionSignalRichText_PlainSegment* CommonActionSignalRichText_RichTextSegment::release_plain() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.CommonActionSignalRichText.RichTextSegment.plain)
  if (_internal_has_plain()) {
    clear_has_segment();
    ::AcFunDanmu::CommonActionSignalRichText_PlainSegment* temp = _impl_.segment_.plain_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.segment_.plain_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::AcFunDanmu::CommonActionSignalRichText_PlainSegment& CommonActionSignalRichText_RichTextSegment::_internal_plain() const {
  return _internal_has_plain()
      ? *_impl_.segment_.plain_
      : reinterpret_cast< ::AcFunDanmu::CommonActionSignalRichText_PlainSegment&>(::AcFunDanmu::_CommonActionSignalRichText_PlainSegment_default_instance_);
}
inline const ::AcFunDanmu::CommonActionSignalRichText_PlainSegment& CommonActionSignalRichText_RichTextSegment::plain() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonActionSignalRichText.RichTextSegment.plain)
  return _internal_plain();
}
inline ::AcFunDanmu::CommonActionSignalRichText_PlainSegment* CommonActionSignalRichText_RichTextSegment::unsafe_arena_release_plain() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AcFunDanmu.CommonActionSignalRichText.RichTextSegment.plain)
  if (_internal_has_plain()) {
    clear_has_segment();
    ::AcFunDanmu::CommonActionSignalRichText_PlainSegment* temp = _impl_.segment_.plain_;
    _impl_.segment_.plain_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CommonActionSignalRichText_RichTextSegment::unsafe_arena_set_allocated_plain(::AcFunDanmu::CommonActionSignalRichText_PlainSegment* plain) {
  clear_segment();
  if (plain) {
    set_has_plain();
    _impl_.segment_.plain_ = plain;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.CommonActionSignalRichText.RichTextSegment.plain)
}
inline ::AcFunDanmu::CommonActionSignalRichText_PlainSegment* CommonActionSignalRichText_RichTextSegment::_internal_mutable_plain() {
  if (!_internal_has_plain()) {
    clear_segment();
    set_has_plain();
    _impl_.segment_.plain_ = CreateMaybeMessage< ::AcFunDanmu::CommonActionSignalRichText_PlainSegment >(GetArenaForAllocation());
  }
  return _impl_.segment_.plain_;
}
inline ::AcFunDanmu::CommonActionSignalRichText_PlainSegment* CommonActionSignalRichText_RichTextSegment::mutable_plain() {
  ::AcFunDanmu::CommonActionSignalRichText_PlainSegment* _msg = _internal_mutable_plain();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.CommonActionSignalRichText.RichTextSegment.plain)
  return _msg;
}

// .AcFunDanmu.CommonActionSignalRichText.ImageSegment image = 3;
inline bool CommonActionSignalRichText_RichTextSegment::_internal_has_image() const {
  return segment_case() == kImage;
}
inline bool CommonActionSignalRichText_RichTextSegment::has_image() const {
  return _internal_has_image();
}
inline void CommonActionSignalRichText_RichTextSegment::set_has_image() {
  _impl_._oneof_case_[0] = kImage;
}
inline void CommonActionSignalRichText_RichTextSegment::clear_image() {
  if (_internal_has_image()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.segment_.image_;
    }
    clear_has_segment();
  }
}
inline ::AcFunDanmu::CommonActionSignalRichText_ImageSegment* CommonActionSignalRichText_RichTextSegment::release_image() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.CommonActionSignalRichText.RichTextSegment.image)
  if (_internal_has_image()) {
    clear_has_segment();
    ::AcFunDanmu::CommonActionSignalRichText_ImageSegment* temp = _impl_.segment_.image_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.segment_.image_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::AcFunDanmu::CommonActionSignalRichText_ImageSegment& CommonActionSignalRichText_RichTextSegment::_internal_image() const {
  return _internal_has_image()
      ? *_impl_.segment_.image_
      : reinterpret_cast< ::AcFunDanmu::CommonActionSignalRichText_ImageSegment&>(::AcFunDanmu::_CommonActionSignalRichText_ImageSegment_default_instance_);
}
inline const ::AcFunDanmu::CommonActionSignalRichText_ImageSegment& CommonActionSignalRichText_RichTextSegment::image() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonActionSignalRichText.RichTextSegment.image)
  return _internal_image();
}
inline ::AcFunDanmu::CommonActionSignalRichText_ImageSegment* CommonActionSignalRichText_RichTextSegment::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AcFunDanmu.CommonActionSignalRichText.RichTextSegment.image)
  if (_internal_has_image()) {
    clear_has_segment();
    ::AcFunDanmu::CommonActionSignalRichText_ImageSegment* temp = _impl_.segment_.image_;
    _impl_.segment_.image_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CommonActionSignalRichText_RichTextSegment::unsafe_arena_set_allocated_image(::AcFunDanmu::CommonActionSignalRichText_ImageSegment* image) {
  clear_segment();
  if (image) {
    set_has_image();
    _impl_.segment_.image_ = image;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.CommonActionSignalRichText.RichTextSegment.image)
}
inline ::AcFunDanmu::CommonActionSignalRichText_ImageSegment* CommonActionSignalRichText_RichTextSegment::_internal_mutable_image() {
  if (!_internal_has_image()) {
    clear_segment();
    set_has_image();
    _impl_.segment_.image_ = CreateMaybeMessage< ::AcFunDanmu::CommonActionSignalRichText_ImageSegment >(GetArenaForAllocation());
  }
  return _impl_.segment_.image_;
}
inline ::AcFunDanmu::CommonActionSignalRichText_ImageSegment* CommonActionSignalRichText_RichTextSegment::mutable_image() {
  ::AcFunDanmu::CommonActionSignalRichText_ImageSegment* _msg = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.CommonActionSignalRichText.RichTextSegment.image)
  return _msg;
}

inline bool CommonActionSignalRichText_RichTextSegment::has_segment() const {
  return segment_case() != SEGMENT_NOT_SET;
}
inline void CommonActionSignalRichText_RichTextSegment::clear_has_segment() {
  _impl_._oneof_case_[0] = SEGMENT_NOT_SET;
}
inline CommonActionSignalRichText_RichTextSegment::SegmentCase CommonActionSignalRichText_RichTextSegment::segment_case() const {
  return CommonActionSignalRichText_RichTextSegment::SegmentCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// CommonActionSignalRichText_UserInfoSegment

// .AcFunDanmu.ZtLiveUserInfo user = 1;
inline bool CommonActionSignalRichText_UserInfoSegment::_internal_has_user() const {
  return this != internal_default_instance() && _impl_.user_ != nullptr;
}
inline bool CommonActionSignalRichText_UserInfoSegment::has_user() const {
  return _internal_has_user();
}
inline const ::AcFunDanmu::ZtLiveUserInfo& CommonActionSignalRichText_UserInfoSegment::_internal_user() const {
  const ::AcFunDanmu::ZtLiveUserInfo* p = _impl_.user_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::ZtLiveUserInfo&>(
      ::AcFunDanmu::_ZtLiveUserInfo_default_instance_);
}
inline const ::AcFunDanmu::ZtLiveUserInfo& CommonActionSignalRichText_UserInfoSegment::user() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonActionSignalRichText.UserInfoSegment.user)
  return _internal_user();
}
inline void CommonActionSignalRichText_UserInfoSegment::unsafe_arena_set_allocated_user(
    ::AcFunDanmu::ZtLiveUserInfo* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_);
  }
  _impl_.user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.CommonActionSignalRichText.UserInfoSegment.user)
}
inline ::AcFunDanmu::ZtLiveUserInfo* CommonActionSignalRichText_UserInfoSegment::release_user() {
  
  ::AcFunDanmu::ZtLiveUserInfo* temp = _impl_.user_;
  _impl_.user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AcFunDanmu::ZtLiveUserInfo* CommonActionSignalRichText_UserInfoSegment::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.CommonActionSignalRichText.UserInfoSegment.user)
  
  ::AcFunDanmu::ZtLiveUserInfo* temp = _impl_.user_;
  _impl_.user_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::ZtLiveUserInfo* CommonActionSignalRichText_UserInfoSegment::_internal_mutable_user() {
  
  if (_impl_.user_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::ZtLiveUserInfo>(GetArenaForAllocation());
    _impl_.user_ = p;
  }
  return _impl_.user_;
}
inline ::AcFunDanmu::ZtLiveUserInfo* CommonActionSignalRichText_UserInfoSegment::mutable_user() {
  ::AcFunDanmu::ZtLiveUserInfo* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.CommonActionSignalRichText.UserInfoSegment.user)
  return _msg;
}
inline void CommonActionSignalRichText_UserInfoSegment::set_allocated_user(::AcFunDanmu::ZtLiveUserInfo* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_);
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user));
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.user_ = user;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.CommonActionSignalRichText.UserInfoSegment.user)
}

// string color = 2;
inline void CommonActionSignalRichText_UserInfoSegment::clear_color() {
  _impl_.color_.ClearToEmpty();
}
inline const std::string& CommonActionSignalRichText_UserInfoSegment::color() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonActionSignalRichText.UserInfoSegment.color)
  return _internal_color();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommonActionSignalRichText_UserInfoSegment::set_color(ArgT0&& arg0, ArgT... args) {
 
 _impl_.color_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommonActionSignalRichText.UserInfoSegment.color)
}
inline std::string* CommonActionSignalRichText_UserInfoSegment::mutable_color() {
  std::string* _s = _internal_mutable_color();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.CommonActionSignalRichText.UserInfoSegment.color)
  return _s;
}
inline const std::string& CommonActionSignalRichText_UserInfoSegment::_internal_color() const {
  return _impl_.color_.Get();
}
inline void CommonActionSignalRichText_UserInfoSegment::_internal_set_color(const std::string& value) {
  
  _impl_.color_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonActionSignalRichText_UserInfoSegment::_internal_mutable_color() {
  
  return _impl_.color_.Mutable(GetArenaForAllocation());
}
inline std::string* CommonActionSignalRichText_UserInfoSegment::release_color() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.CommonActionSignalRichText.UserInfoSegment.color)
  return _impl_.color_.Release();
}
inline void CommonActionSignalRichText_UserInfoSegment::set_allocated_color(std::string* color) {
  if (color != nullptr) {
    
  } else {
    
  }
  _impl_.color_.SetAllocated(color, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.color_.IsDefault()) {
    _impl_.color_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.CommonActionSignalRichText.UserInfoSegment.color)
}

// -------------------------------------------------------------------

// CommonActionSignalRichText

// repeated .AcFunDanmu.CommonActionSignalRichText.RichTextSegment segments = 1;
inline int CommonActionSignalRichText::_internal_segments_size() const {
  return _impl_.segments_.size();
}
inline int CommonActionSignalRichText::segments_size() const {
  return _internal_segments_size();
}
inline void CommonActionSignalRichText::clear_segments() {
  _impl_.segments_.Clear();
}
inline ::AcFunDanmu::CommonActionSignalRichText_RichTextSegment* CommonActionSignalRichText::mutable_segments(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.CommonActionSignalRichText.segments)
  return _impl_.segments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::CommonActionSignalRichText_RichTextSegment >*
CommonActionSignalRichText::mutable_segments() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.CommonActionSignalRichText.segments)
  return &_impl_.segments_;
}
inline const ::AcFunDanmu::CommonActionSignalRichText_RichTextSegment& CommonActionSignalRichText::_internal_segments(int index) const {
  return _impl_.segments_.Get(index);
}
inline const ::AcFunDanmu::CommonActionSignalRichText_RichTextSegment& CommonActionSignalRichText::segments(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonActionSignalRichText.segments)
  return _internal_segments(index);
}
inline ::AcFunDanmu::CommonActionSignalRichText_RichTextSegment* CommonActionSignalRichText::_internal_add_segments() {
  return _impl_.segments_.Add();
}
inline ::AcFunDanmu::CommonActionSignalRichText_RichTextSegment* CommonActionSignalRichText::add_segments() {
  ::AcFunDanmu::CommonActionSignalRichText_RichTextSegment* _add = _internal_add_segments();
  // @@protoc_insertion_point(field_add:AcFunDanmu.CommonActionSignalRichText.segments)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::CommonActionSignalRichText_RichTextSegment >&
CommonActionSignalRichText::segments() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.CommonActionSignalRichText.segments)
  return _impl_.segments_;
}

// int64 sendTimeMs = 2;
inline void CommonActionSignalRichText::clear_sendtimems() {
  _impl_.sendtimems_ = int64_t{0};
}
inline int64_t CommonActionSignalRichText::_internal_sendtimems() const {
  return _impl_.sendtimems_;
}
inline int64_t CommonActionSignalRichText::sendtimems() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonActionSignalRichText.sendTimeMs)
  return _internal_sendtimems();
}
inline void CommonActionSignalRichText::_internal_set_sendtimems(int64_t value) {
  
  _impl_.sendtimems_ = value;
}
inline void CommonActionSignalRichText::set_sendtimems(int64_t value) {
  _internal_set_sendtimems(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommonActionSignalRichText.sendTimeMs)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace AcFunDanmu

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_CommonActionSignalRichText_2eproto
