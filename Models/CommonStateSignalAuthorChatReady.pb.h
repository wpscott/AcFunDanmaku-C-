// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommonStateSignalAuthorChatReady.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_CommonStateSignalAuthorChatReady_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_CommonStateSignalAuthorChatReady_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "AuthorChatPlayerInfo.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_CommonStateSignalAuthorChatReady_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_CommonStateSignalAuthorChatReady_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_CommonStateSignalAuthorChatReady_2eproto;
namespace AcFunDanmu {
class CommonStateSignalAuthorChatReady;
class CommonStateSignalAuthorChatReadyDefaultTypeInternal;
extern CommonStateSignalAuthorChatReadyDefaultTypeInternal _CommonStateSignalAuthorChatReady_default_instance_;
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::CommonStateSignalAuthorChatReady* Arena::CreateMaybeMessage<::AcFunDanmu::CommonStateSignalAuthorChatReady>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {

// ===================================================================

class CommonStateSignalAuthorChatReady PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.CommonStateSignalAuthorChatReady) */ {
 public:
  inline CommonStateSignalAuthorChatReady() : CommonStateSignalAuthorChatReady(nullptr) {}
  virtual ~CommonStateSignalAuthorChatReady();

  CommonStateSignalAuthorChatReady(const CommonStateSignalAuthorChatReady& from);
  CommonStateSignalAuthorChatReady(CommonStateSignalAuthorChatReady&& from) noexcept
    : CommonStateSignalAuthorChatReady() {
    *this = ::std::move(from);
  }

  inline CommonStateSignalAuthorChatReady& operator=(const CommonStateSignalAuthorChatReady& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonStateSignalAuthorChatReady& operator=(CommonStateSignalAuthorChatReady&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommonStateSignalAuthorChatReady& default_instance();

  static inline const CommonStateSignalAuthorChatReady* internal_default_instance() {
    return reinterpret_cast<const CommonStateSignalAuthorChatReady*>(
               &_CommonStateSignalAuthorChatReady_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CommonStateSignalAuthorChatReady& a, CommonStateSignalAuthorChatReady& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonStateSignalAuthorChatReady* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonStateSignalAuthorChatReady* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommonStateSignalAuthorChatReady* New() const final {
    return CreateMaybeMessage<CommonStateSignalAuthorChatReady>(nullptr);
  }

  CommonStateSignalAuthorChatReady* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommonStateSignalAuthorChatReady>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommonStateSignalAuthorChatReady& from);
  void MergeFrom(const CommonStateSignalAuthorChatReady& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonStateSignalAuthorChatReady* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.CommonStateSignalAuthorChatReady";
  }
  protected:
  explicit CommonStateSignalAuthorChatReady(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CommonStateSignalAuthorChatReady_2eproto);
    return ::descriptor_table_CommonStateSignalAuthorChatReady_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthorChatIdFieldNumber = 1,
    kInviterUserInfoFieldNumber = 2,
    kInviteeUserInfoFieldNumber = 3,
  };
  // string authorChatId = 1;
  void clear_authorchatid();
  const std::string& authorchatid() const;
  void set_authorchatid(const std::string& value);
  void set_authorchatid(std::string&& value);
  void set_authorchatid(const char* value);
  void set_authorchatid(const char* value, size_t size);
  std::string* mutable_authorchatid();
  std::string* release_authorchatid();
  void set_allocated_authorchatid(std::string* authorchatid);
  private:
  const std::string& _internal_authorchatid() const;
  void _internal_set_authorchatid(const std::string& value);
  std::string* _internal_mutable_authorchatid();
  public:

  // .AcFunDanmu.AuthorChatPlayerInfo inviterUserInfo = 2;
  bool has_inviteruserinfo() const;
  private:
  bool _internal_has_inviteruserinfo() const;
  public:
  void clear_inviteruserinfo();
  const ::AcFunDanmu::AuthorChatPlayerInfo& inviteruserinfo() const;
  ::AcFunDanmu::AuthorChatPlayerInfo* release_inviteruserinfo();
  ::AcFunDanmu::AuthorChatPlayerInfo* mutable_inviteruserinfo();
  void set_allocated_inviteruserinfo(::AcFunDanmu::AuthorChatPlayerInfo* inviteruserinfo);
  private:
  const ::AcFunDanmu::AuthorChatPlayerInfo& _internal_inviteruserinfo() const;
  ::AcFunDanmu::AuthorChatPlayerInfo* _internal_mutable_inviteruserinfo();
  public:
  void unsafe_arena_set_allocated_inviteruserinfo(
      ::AcFunDanmu::AuthorChatPlayerInfo* inviteruserinfo);
  ::AcFunDanmu::AuthorChatPlayerInfo* unsafe_arena_release_inviteruserinfo();

  // .AcFunDanmu.AuthorChatPlayerInfo inviteeUserInfo = 3;
  bool has_inviteeuserinfo() const;
  private:
  bool _internal_has_inviteeuserinfo() const;
  public:
  void clear_inviteeuserinfo();
  const ::AcFunDanmu::AuthorChatPlayerInfo& inviteeuserinfo() const;
  ::AcFunDanmu::AuthorChatPlayerInfo* release_inviteeuserinfo();
  ::AcFunDanmu::AuthorChatPlayerInfo* mutable_inviteeuserinfo();
  void set_allocated_inviteeuserinfo(::AcFunDanmu::AuthorChatPlayerInfo* inviteeuserinfo);
  private:
  const ::AcFunDanmu::AuthorChatPlayerInfo& _internal_inviteeuserinfo() const;
  ::AcFunDanmu::AuthorChatPlayerInfo* _internal_mutable_inviteeuserinfo();
  public:
  void unsafe_arena_set_allocated_inviteeuserinfo(
      ::AcFunDanmu::AuthorChatPlayerInfo* inviteeuserinfo);
  ::AcFunDanmu::AuthorChatPlayerInfo* unsafe_arena_release_inviteeuserinfo();

  // @@protoc_insertion_point(class_scope:AcFunDanmu.CommonStateSignalAuthorChatReady)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authorchatid_;
  ::AcFunDanmu::AuthorChatPlayerInfo* inviteruserinfo_;
  ::AcFunDanmu::AuthorChatPlayerInfo* inviteeuserinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CommonStateSignalAuthorChatReady_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CommonStateSignalAuthorChatReady

// string authorChatId = 1;
inline void CommonStateSignalAuthorChatReady::clear_authorchatid() {
  authorchatid_.ClearToEmpty();
}
inline const std::string& CommonStateSignalAuthorChatReady::authorchatid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonStateSignalAuthorChatReady.authorChatId)
  return _internal_authorchatid();
}
inline void CommonStateSignalAuthorChatReady::set_authorchatid(const std::string& value) {
  _internal_set_authorchatid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommonStateSignalAuthorChatReady.authorChatId)
}
inline std::string* CommonStateSignalAuthorChatReady::mutable_authorchatid() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.CommonStateSignalAuthorChatReady.authorChatId)
  return _internal_mutable_authorchatid();
}
inline const std::string& CommonStateSignalAuthorChatReady::_internal_authorchatid() const {
  return authorchatid_.Get();
}
inline void CommonStateSignalAuthorChatReady::_internal_set_authorchatid(const std::string& value) {
  
  authorchatid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CommonStateSignalAuthorChatReady::set_authorchatid(std::string&& value) {
  
  authorchatid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.CommonStateSignalAuthorChatReady.authorChatId)
}
inline void CommonStateSignalAuthorChatReady::set_authorchatid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  authorchatid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.CommonStateSignalAuthorChatReady.authorChatId)
}
inline void CommonStateSignalAuthorChatReady::set_authorchatid(const char* value,
    size_t size) {
  
  authorchatid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.CommonStateSignalAuthorChatReady.authorChatId)
}
inline std::string* CommonStateSignalAuthorChatReady::_internal_mutable_authorchatid() {
  
  return authorchatid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CommonStateSignalAuthorChatReady::release_authorchatid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.CommonStateSignalAuthorChatReady.authorChatId)
  return authorchatid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommonStateSignalAuthorChatReady::set_allocated_authorchatid(std::string* authorchatid) {
  if (authorchatid != nullptr) {
    
  } else {
    
  }
  authorchatid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), authorchatid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.CommonStateSignalAuthorChatReady.authorChatId)
}

// .AcFunDanmu.AuthorChatPlayerInfo inviterUserInfo = 2;
inline bool CommonStateSignalAuthorChatReady::_internal_has_inviteruserinfo() const {
  return this != internal_default_instance() && inviteruserinfo_ != nullptr;
}
inline bool CommonStateSignalAuthorChatReady::has_inviteruserinfo() const {
  return _internal_has_inviteruserinfo();
}
inline const ::AcFunDanmu::AuthorChatPlayerInfo& CommonStateSignalAuthorChatReady::_internal_inviteruserinfo() const {
  const ::AcFunDanmu::AuthorChatPlayerInfo* p = inviteruserinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::AuthorChatPlayerInfo&>(
      ::AcFunDanmu::_AuthorChatPlayerInfo_default_instance_);
}
inline const ::AcFunDanmu::AuthorChatPlayerInfo& CommonStateSignalAuthorChatReady::inviteruserinfo() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonStateSignalAuthorChatReady.inviterUserInfo)
  return _internal_inviteruserinfo();
}
inline void CommonStateSignalAuthorChatReady::unsafe_arena_set_allocated_inviteruserinfo(
    ::AcFunDanmu::AuthorChatPlayerInfo* inviteruserinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inviteruserinfo_);
  }
  inviteruserinfo_ = inviteruserinfo;
  if (inviteruserinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.CommonStateSignalAuthorChatReady.inviterUserInfo)
}
inline ::AcFunDanmu::AuthorChatPlayerInfo* CommonStateSignalAuthorChatReady::release_inviteruserinfo() {
  
  ::AcFunDanmu::AuthorChatPlayerInfo* temp = inviteruserinfo_;
  inviteruserinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::AuthorChatPlayerInfo* CommonStateSignalAuthorChatReady::unsafe_arena_release_inviteruserinfo() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.CommonStateSignalAuthorChatReady.inviterUserInfo)
  
  ::AcFunDanmu::AuthorChatPlayerInfo* temp = inviteruserinfo_;
  inviteruserinfo_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::AuthorChatPlayerInfo* CommonStateSignalAuthorChatReady::_internal_mutable_inviteruserinfo() {
  
  if (inviteruserinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::AuthorChatPlayerInfo>(GetArena());
    inviteruserinfo_ = p;
  }
  return inviteruserinfo_;
}
inline ::AcFunDanmu::AuthorChatPlayerInfo* CommonStateSignalAuthorChatReady::mutable_inviteruserinfo() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.CommonStateSignalAuthorChatReady.inviterUserInfo)
  return _internal_mutable_inviteruserinfo();
}
inline void CommonStateSignalAuthorChatReady::set_allocated_inviteruserinfo(::AcFunDanmu::AuthorChatPlayerInfo* inviteruserinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(inviteruserinfo_);
  }
  if (inviteruserinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inviteruserinfo)->GetArena();
    if (message_arena != submessage_arena) {
      inviteruserinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inviteruserinfo, submessage_arena);
    }
    
  } else {
    
  }
  inviteruserinfo_ = inviteruserinfo;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.CommonStateSignalAuthorChatReady.inviterUserInfo)
}

// .AcFunDanmu.AuthorChatPlayerInfo inviteeUserInfo = 3;
inline bool CommonStateSignalAuthorChatReady::_internal_has_inviteeuserinfo() const {
  return this != internal_default_instance() && inviteeuserinfo_ != nullptr;
}
inline bool CommonStateSignalAuthorChatReady::has_inviteeuserinfo() const {
  return _internal_has_inviteeuserinfo();
}
inline const ::AcFunDanmu::AuthorChatPlayerInfo& CommonStateSignalAuthorChatReady::_internal_inviteeuserinfo() const {
  const ::AcFunDanmu::AuthorChatPlayerInfo* p = inviteeuserinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::AuthorChatPlayerInfo&>(
      ::AcFunDanmu::_AuthorChatPlayerInfo_default_instance_);
}
inline const ::AcFunDanmu::AuthorChatPlayerInfo& CommonStateSignalAuthorChatReady::inviteeuserinfo() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonStateSignalAuthorChatReady.inviteeUserInfo)
  return _internal_inviteeuserinfo();
}
inline void CommonStateSignalAuthorChatReady::unsafe_arena_set_allocated_inviteeuserinfo(
    ::AcFunDanmu::AuthorChatPlayerInfo* inviteeuserinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inviteeuserinfo_);
  }
  inviteeuserinfo_ = inviteeuserinfo;
  if (inviteeuserinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.CommonStateSignalAuthorChatReady.inviteeUserInfo)
}
inline ::AcFunDanmu::AuthorChatPlayerInfo* CommonStateSignalAuthorChatReady::release_inviteeuserinfo() {
  
  ::AcFunDanmu::AuthorChatPlayerInfo* temp = inviteeuserinfo_;
  inviteeuserinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::AuthorChatPlayerInfo* CommonStateSignalAuthorChatReady::unsafe_arena_release_inviteeuserinfo() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.CommonStateSignalAuthorChatReady.inviteeUserInfo)
  
  ::AcFunDanmu::AuthorChatPlayerInfo* temp = inviteeuserinfo_;
  inviteeuserinfo_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::AuthorChatPlayerInfo* CommonStateSignalAuthorChatReady::_internal_mutable_inviteeuserinfo() {
  
  if (inviteeuserinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::AuthorChatPlayerInfo>(GetArena());
    inviteeuserinfo_ = p;
  }
  return inviteeuserinfo_;
}
inline ::AcFunDanmu::AuthorChatPlayerInfo* CommonStateSignalAuthorChatReady::mutable_inviteeuserinfo() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.CommonStateSignalAuthorChatReady.inviteeUserInfo)
  return _internal_mutable_inviteeuserinfo();
}
inline void CommonStateSignalAuthorChatReady::set_allocated_inviteeuserinfo(::AcFunDanmu::AuthorChatPlayerInfo* inviteeuserinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(inviteeuserinfo_);
  }
  if (inviteeuserinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inviteeuserinfo)->GetArena();
    if (message_arena != submessage_arena) {
      inviteeuserinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inviteeuserinfo, submessage_arena);
    }
    
  } else {
    
  }
  inviteeuserinfo_ = inviteeuserinfo;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.CommonStateSignalAuthorChatReady.inviteeUserInfo)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace AcFunDanmu

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_CommonStateSignalAuthorChatReady_2eproto
