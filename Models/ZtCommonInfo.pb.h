// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ZtCommonInfo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ZtCommonInfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ZtCommonInfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ZtCommonInfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ZtCommonInfo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ZtCommonInfo_2eproto;
namespace AcFunDanmu {
class ZtCommonInfo;
class ZtCommonInfoDefaultTypeInternal;
extern ZtCommonInfoDefaultTypeInternal _ZtCommonInfo_default_instance_;
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::ZtCommonInfo* Arena::CreateMaybeMessage<::AcFunDanmu::ZtCommonInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {

// ===================================================================

class ZtCommonInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.ZtCommonInfo) */ {
 public:
  inline ZtCommonInfo() : ZtCommonInfo(nullptr) {}
  virtual ~ZtCommonInfo();

  ZtCommonInfo(const ZtCommonInfo& from);
  ZtCommonInfo(ZtCommonInfo&& from) noexcept
    : ZtCommonInfo() {
    *this = ::std::move(from);
  }

  inline ZtCommonInfo& operator=(const ZtCommonInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZtCommonInfo& operator=(ZtCommonInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ZtCommonInfo& default_instance();

  static inline const ZtCommonInfo* internal_default_instance() {
    return reinterpret_cast<const ZtCommonInfo*>(
               &_ZtCommonInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ZtCommonInfo& a, ZtCommonInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ZtCommonInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZtCommonInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ZtCommonInfo* New() const final {
    return CreateMaybeMessage<ZtCommonInfo>(nullptr);
  }

  ZtCommonInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ZtCommonInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ZtCommonInfo& from);
  void MergeFrom(const ZtCommonInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZtCommonInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.ZtCommonInfo";
  }
  protected:
  explicit ZtCommonInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ZtCommonInfo_2eproto);
    return ::descriptor_table_ZtCommonInfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKpnFieldNumber = 1,
    kKpfFieldNumber = 2,
    kSubBizFieldNumber = 3,
    kDidFieldNumber = 5,
    kAppVerFieldNumber = 7,
    kVerFieldNumber = 8,
    kLatFieldNumber = 9,
    kLonFieldNumber = 10,
    kModFieldNumber = 11,
    kNetFieldNumber = 12,
    kSysFieldNumber = 13,
    kCFieldNumber = 14,
    kLanguageFieldNumber = 15,
    kCountryCodeFieldNumber = 16,
    kUidFieldNumber = 4,
    kClientIpFieldNumber = 6,
  };
  // string kpn = 1;
  void clear_kpn();
  const std::string& kpn() const;
  void set_kpn(const std::string& value);
  void set_kpn(std::string&& value);
  void set_kpn(const char* value);
  void set_kpn(const char* value, size_t size);
  std::string* mutable_kpn();
  std::string* release_kpn();
  void set_allocated_kpn(std::string* kpn);
  private:
  const std::string& _internal_kpn() const;
  void _internal_set_kpn(const std::string& value);
  std::string* _internal_mutable_kpn();
  public:

  // string kpf = 2;
  void clear_kpf();
  const std::string& kpf() const;
  void set_kpf(const std::string& value);
  void set_kpf(std::string&& value);
  void set_kpf(const char* value);
  void set_kpf(const char* value, size_t size);
  std::string* mutable_kpf();
  std::string* release_kpf();
  void set_allocated_kpf(std::string* kpf);
  private:
  const std::string& _internal_kpf() const;
  void _internal_set_kpf(const std::string& value);
  std::string* _internal_mutable_kpf();
  public:

  // string subBiz = 3;
  void clear_subbiz();
  const std::string& subbiz() const;
  void set_subbiz(const std::string& value);
  void set_subbiz(std::string&& value);
  void set_subbiz(const char* value);
  void set_subbiz(const char* value, size_t size);
  std::string* mutable_subbiz();
  std::string* release_subbiz();
  void set_allocated_subbiz(std::string* subbiz);
  private:
  const std::string& _internal_subbiz() const;
  void _internal_set_subbiz(const std::string& value);
  std::string* _internal_mutable_subbiz();
  public:

  // string did = 5;
  void clear_did();
  const std::string& did() const;
  void set_did(const std::string& value);
  void set_did(std::string&& value);
  void set_did(const char* value);
  void set_did(const char* value, size_t size);
  std::string* mutable_did();
  std::string* release_did();
  void set_allocated_did(std::string* did);
  private:
  const std::string& _internal_did() const;
  void _internal_set_did(const std::string& value);
  std::string* _internal_mutable_did();
  public:

  // string appVer = 7;
  void clear_appver();
  const std::string& appver() const;
  void set_appver(const std::string& value);
  void set_appver(std::string&& value);
  void set_appver(const char* value);
  void set_appver(const char* value, size_t size);
  std::string* mutable_appver();
  std::string* release_appver();
  void set_allocated_appver(std::string* appver);
  private:
  const std::string& _internal_appver() const;
  void _internal_set_appver(const std::string& value);
  std::string* _internal_mutable_appver();
  public:

  // string ver = 8;
  void clear_ver();
  const std::string& ver() const;
  void set_ver(const std::string& value);
  void set_ver(std::string&& value);
  void set_ver(const char* value);
  void set_ver(const char* value, size_t size);
  std::string* mutable_ver();
  std::string* release_ver();
  void set_allocated_ver(std::string* ver);
  private:
  const std::string& _internal_ver() const;
  void _internal_set_ver(const std::string& value);
  std::string* _internal_mutable_ver();
  public:

  // string lat = 9;
  void clear_lat();
  const std::string& lat() const;
  void set_lat(const std::string& value);
  void set_lat(std::string&& value);
  void set_lat(const char* value);
  void set_lat(const char* value, size_t size);
  std::string* mutable_lat();
  std::string* release_lat();
  void set_allocated_lat(std::string* lat);
  private:
  const std::string& _internal_lat() const;
  void _internal_set_lat(const std::string& value);
  std::string* _internal_mutable_lat();
  public:

  // string lon = 10;
  void clear_lon();
  const std::string& lon() const;
  void set_lon(const std::string& value);
  void set_lon(std::string&& value);
  void set_lon(const char* value);
  void set_lon(const char* value, size_t size);
  std::string* mutable_lon();
  std::string* release_lon();
  void set_allocated_lon(std::string* lon);
  private:
  const std::string& _internal_lon() const;
  void _internal_set_lon(const std::string& value);
  std::string* _internal_mutable_lon();
  public:

  // string mod = 11;
  void clear_mod();
  const std::string& mod() const;
  void set_mod(const std::string& value);
  void set_mod(std::string&& value);
  void set_mod(const char* value);
  void set_mod(const char* value, size_t size);
  std::string* mutable_mod();
  std::string* release_mod();
  void set_allocated_mod(std::string* mod);
  private:
  const std::string& _internal_mod() const;
  void _internal_set_mod(const std::string& value);
  std::string* _internal_mutable_mod();
  public:

  // string net = 12;
  void clear_net();
  const std::string& net() const;
  void set_net(const std::string& value);
  void set_net(std::string&& value);
  void set_net(const char* value);
  void set_net(const char* value, size_t size);
  std::string* mutable_net();
  std::string* release_net();
  void set_allocated_net(std::string* net);
  private:
  const std::string& _internal_net() const;
  void _internal_set_net(const std::string& value);
  std::string* _internal_mutable_net();
  public:

  // string sys = 13;
  void clear_sys();
  const std::string& sys() const;
  void set_sys(const std::string& value);
  void set_sys(std::string&& value);
  void set_sys(const char* value);
  void set_sys(const char* value, size_t size);
  std::string* mutable_sys();
  std::string* release_sys();
  void set_allocated_sys(std::string* sys);
  private:
  const std::string& _internal_sys() const;
  void _internal_set_sys(const std::string& value);
  std::string* _internal_mutable_sys();
  public:

  // string c = 14;
  void clear_c();
  const std::string& c() const;
  void set_c(const std::string& value);
  void set_c(std::string&& value);
  void set_c(const char* value);
  void set_c(const char* value, size_t size);
  std::string* mutable_c();
  std::string* release_c();
  void set_allocated_c(std::string* c);
  private:
  const std::string& _internal_c() const;
  void _internal_set_c(const std::string& value);
  std::string* _internal_mutable_c();
  public:

  // string language = 15;
  void clear_language();
  const std::string& language() const;
  void set_language(const std::string& value);
  void set_language(std::string&& value);
  void set_language(const char* value);
  void set_language(const char* value, size_t size);
  std::string* mutable_language();
  std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // string countryCode = 16;
  void clear_countrycode();
  const std::string& countrycode() const;
  void set_countrycode(const std::string& value);
  void set_countrycode(std::string&& value);
  void set_countrycode(const char* value);
  void set_countrycode(const char* value, size_t size);
  std::string* mutable_countrycode();
  std::string* release_countrycode();
  void set_allocated_countrycode(std::string* countrycode);
  private:
  const std::string& _internal_countrycode() const;
  void _internal_set_countrycode(const std::string& value);
  std::string* _internal_mutable_countrycode();
  public:

  // int64 uid = 4;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int64 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 clientIp = 6;
  void clear_clientip();
  ::PROTOBUF_NAMESPACE_ID::int64 clientip() const;
  void set_clientip(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_clientip() const;
  void _internal_set_clientip(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.ZtCommonInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kpn_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kpf_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subbiz_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr did_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appver_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ver_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lat_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lon_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mod_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr net_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sys_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr c_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr countrycode_;
  ::PROTOBUF_NAMESPACE_ID::int64 uid_;
  ::PROTOBUF_NAMESPACE_ID::int64 clientip_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ZtCommonInfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ZtCommonInfo

// string kpn = 1;
inline void ZtCommonInfo::clear_kpn() {
  kpn_.ClearToEmpty();
}
inline const std::string& ZtCommonInfo::kpn() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.ZtCommonInfo.kpn)
  return _internal_kpn();
}
inline void ZtCommonInfo::set_kpn(const std::string& value) {
  _internal_set_kpn(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.ZtCommonInfo.kpn)
}
inline std::string* ZtCommonInfo::mutable_kpn() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.ZtCommonInfo.kpn)
  return _internal_mutable_kpn();
}
inline const std::string& ZtCommonInfo::_internal_kpn() const {
  return kpn_.Get();
}
inline void ZtCommonInfo::_internal_set_kpn(const std::string& value) {
  
  kpn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ZtCommonInfo::set_kpn(std::string&& value) {
  
  kpn_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.ZtCommonInfo.kpn)
}
inline void ZtCommonInfo::set_kpn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  kpn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.ZtCommonInfo.kpn)
}
inline void ZtCommonInfo::set_kpn(const char* value,
    size_t size) {
  
  kpn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.ZtCommonInfo.kpn)
}
inline std::string* ZtCommonInfo::_internal_mutable_kpn() {
  
  return kpn_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ZtCommonInfo::release_kpn() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.ZtCommonInfo.kpn)
  return kpn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ZtCommonInfo::set_allocated_kpn(std::string* kpn) {
  if (kpn != nullptr) {
    
  } else {
    
  }
  kpn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), kpn,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.ZtCommonInfo.kpn)
}

// string kpf = 2;
inline void ZtCommonInfo::clear_kpf() {
  kpf_.ClearToEmpty();
}
inline const std::string& ZtCommonInfo::kpf() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.ZtCommonInfo.kpf)
  return _internal_kpf();
}
inline void ZtCommonInfo::set_kpf(const std::string& value) {
  _internal_set_kpf(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.ZtCommonInfo.kpf)
}
inline std::string* ZtCommonInfo::mutable_kpf() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.ZtCommonInfo.kpf)
  return _internal_mutable_kpf();
}
inline const std::string& ZtCommonInfo::_internal_kpf() const {
  return kpf_.Get();
}
inline void ZtCommonInfo::_internal_set_kpf(const std::string& value) {
  
  kpf_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ZtCommonInfo::set_kpf(std::string&& value) {
  
  kpf_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.ZtCommonInfo.kpf)
}
inline void ZtCommonInfo::set_kpf(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  kpf_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.ZtCommonInfo.kpf)
}
inline void ZtCommonInfo::set_kpf(const char* value,
    size_t size) {
  
  kpf_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.ZtCommonInfo.kpf)
}
inline std::string* ZtCommonInfo::_internal_mutable_kpf() {
  
  return kpf_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ZtCommonInfo::release_kpf() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.ZtCommonInfo.kpf)
  return kpf_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ZtCommonInfo::set_allocated_kpf(std::string* kpf) {
  if (kpf != nullptr) {
    
  } else {
    
  }
  kpf_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), kpf,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.ZtCommonInfo.kpf)
}

// string subBiz = 3;
inline void ZtCommonInfo::clear_subbiz() {
  subbiz_.ClearToEmpty();
}
inline const std::string& ZtCommonInfo::subbiz() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.ZtCommonInfo.subBiz)
  return _internal_subbiz();
}
inline void ZtCommonInfo::set_subbiz(const std::string& value) {
  _internal_set_subbiz(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.ZtCommonInfo.subBiz)
}
inline std::string* ZtCommonInfo::mutable_subbiz() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.ZtCommonInfo.subBiz)
  return _internal_mutable_subbiz();
}
inline const std::string& ZtCommonInfo::_internal_subbiz() const {
  return subbiz_.Get();
}
inline void ZtCommonInfo::_internal_set_subbiz(const std::string& value) {
  
  subbiz_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ZtCommonInfo::set_subbiz(std::string&& value) {
  
  subbiz_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.ZtCommonInfo.subBiz)
}
inline void ZtCommonInfo::set_subbiz(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subbiz_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.ZtCommonInfo.subBiz)
}
inline void ZtCommonInfo::set_subbiz(const char* value,
    size_t size) {
  
  subbiz_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.ZtCommonInfo.subBiz)
}
inline std::string* ZtCommonInfo::_internal_mutable_subbiz() {
  
  return subbiz_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ZtCommonInfo::release_subbiz() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.ZtCommonInfo.subBiz)
  return subbiz_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ZtCommonInfo::set_allocated_subbiz(std::string* subbiz) {
  if (subbiz != nullptr) {
    
  } else {
    
  }
  subbiz_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subbiz,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.ZtCommonInfo.subBiz)
}

// int64 uid = 4;
inline void ZtCommonInfo::clear_uid() {
  uid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ZtCommonInfo::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ZtCommonInfo::uid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.ZtCommonInfo.uid)
  return _internal_uid();
}
inline void ZtCommonInfo::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  uid_ = value;
}
inline void ZtCommonInfo::set_uid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.ZtCommonInfo.uid)
}

// string did = 5;
inline void ZtCommonInfo::clear_did() {
  did_.ClearToEmpty();
}
inline const std::string& ZtCommonInfo::did() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.ZtCommonInfo.did)
  return _internal_did();
}
inline void ZtCommonInfo::set_did(const std::string& value) {
  _internal_set_did(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.ZtCommonInfo.did)
}
inline std::string* ZtCommonInfo::mutable_did() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.ZtCommonInfo.did)
  return _internal_mutable_did();
}
inline const std::string& ZtCommonInfo::_internal_did() const {
  return did_.Get();
}
inline void ZtCommonInfo::_internal_set_did(const std::string& value) {
  
  did_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ZtCommonInfo::set_did(std::string&& value) {
  
  did_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.ZtCommonInfo.did)
}
inline void ZtCommonInfo::set_did(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  did_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.ZtCommonInfo.did)
}
inline void ZtCommonInfo::set_did(const char* value,
    size_t size) {
  
  did_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.ZtCommonInfo.did)
}
inline std::string* ZtCommonInfo::_internal_mutable_did() {
  
  return did_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ZtCommonInfo::release_did() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.ZtCommonInfo.did)
  return did_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ZtCommonInfo::set_allocated_did(std::string* did) {
  if (did != nullptr) {
    
  } else {
    
  }
  did_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), did,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.ZtCommonInfo.did)
}

// int64 clientIp = 6;
inline void ZtCommonInfo::clear_clientip() {
  clientip_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ZtCommonInfo::_internal_clientip() const {
  return clientip_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ZtCommonInfo::clientip() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.ZtCommonInfo.clientIp)
  return _internal_clientip();
}
inline void ZtCommonInfo::_internal_set_clientip(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  clientip_ = value;
}
inline void ZtCommonInfo::set_clientip(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_clientip(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.ZtCommonInfo.clientIp)
}

// string appVer = 7;
inline void ZtCommonInfo::clear_appver() {
  appver_.ClearToEmpty();
}
inline const std::string& ZtCommonInfo::appver() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.ZtCommonInfo.appVer)
  return _internal_appver();
}
inline void ZtCommonInfo::set_appver(const std::string& value) {
  _internal_set_appver(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.ZtCommonInfo.appVer)
}
inline std::string* ZtCommonInfo::mutable_appver() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.ZtCommonInfo.appVer)
  return _internal_mutable_appver();
}
inline const std::string& ZtCommonInfo::_internal_appver() const {
  return appver_.Get();
}
inline void ZtCommonInfo::_internal_set_appver(const std::string& value) {
  
  appver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ZtCommonInfo::set_appver(std::string&& value) {
  
  appver_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.ZtCommonInfo.appVer)
}
inline void ZtCommonInfo::set_appver(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  appver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.ZtCommonInfo.appVer)
}
inline void ZtCommonInfo::set_appver(const char* value,
    size_t size) {
  
  appver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.ZtCommonInfo.appVer)
}
inline std::string* ZtCommonInfo::_internal_mutable_appver() {
  
  return appver_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ZtCommonInfo::release_appver() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.ZtCommonInfo.appVer)
  return appver_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ZtCommonInfo::set_allocated_appver(std::string* appver) {
  if (appver != nullptr) {
    
  } else {
    
  }
  appver_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), appver,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.ZtCommonInfo.appVer)
}

// string ver = 8;
inline void ZtCommonInfo::clear_ver() {
  ver_.ClearToEmpty();
}
inline const std::string& ZtCommonInfo::ver() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.ZtCommonInfo.ver)
  return _internal_ver();
}
inline void ZtCommonInfo::set_ver(const std::string& value) {
  _internal_set_ver(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.ZtCommonInfo.ver)
}
inline std::string* ZtCommonInfo::mutable_ver() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.ZtCommonInfo.ver)
  return _internal_mutable_ver();
}
inline const std::string& ZtCommonInfo::_internal_ver() const {
  return ver_.Get();
}
inline void ZtCommonInfo::_internal_set_ver(const std::string& value) {
  
  ver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ZtCommonInfo::set_ver(std::string&& value) {
  
  ver_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.ZtCommonInfo.ver)
}
inline void ZtCommonInfo::set_ver(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.ZtCommonInfo.ver)
}
inline void ZtCommonInfo::set_ver(const char* value,
    size_t size) {
  
  ver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.ZtCommonInfo.ver)
}
inline std::string* ZtCommonInfo::_internal_mutable_ver() {
  
  return ver_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ZtCommonInfo::release_ver() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.ZtCommonInfo.ver)
  return ver_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ZtCommonInfo::set_allocated_ver(std::string* ver) {
  if (ver != nullptr) {
    
  } else {
    
  }
  ver_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ver,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.ZtCommonInfo.ver)
}

// string lat = 9;
inline void ZtCommonInfo::clear_lat() {
  lat_.ClearToEmpty();
}
inline const std::string& ZtCommonInfo::lat() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.ZtCommonInfo.lat)
  return _internal_lat();
}
inline void ZtCommonInfo::set_lat(const std::string& value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.ZtCommonInfo.lat)
}
inline std::string* ZtCommonInfo::mutable_lat() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.ZtCommonInfo.lat)
  return _internal_mutable_lat();
}
inline const std::string& ZtCommonInfo::_internal_lat() const {
  return lat_.Get();
}
inline void ZtCommonInfo::_internal_set_lat(const std::string& value) {
  
  lat_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ZtCommonInfo::set_lat(std::string&& value) {
  
  lat_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.ZtCommonInfo.lat)
}
inline void ZtCommonInfo::set_lat(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lat_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.ZtCommonInfo.lat)
}
inline void ZtCommonInfo::set_lat(const char* value,
    size_t size) {
  
  lat_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.ZtCommonInfo.lat)
}
inline std::string* ZtCommonInfo::_internal_mutable_lat() {
  
  return lat_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ZtCommonInfo::release_lat() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.ZtCommonInfo.lat)
  return lat_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ZtCommonInfo::set_allocated_lat(std::string* lat) {
  if (lat != nullptr) {
    
  } else {
    
  }
  lat_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lat,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.ZtCommonInfo.lat)
}

// string lon = 10;
inline void ZtCommonInfo::clear_lon() {
  lon_.ClearToEmpty();
}
inline const std::string& ZtCommonInfo::lon() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.ZtCommonInfo.lon)
  return _internal_lon();
}
inline void ZtCommonInfo::set_lon(const std::string& value) {
  _internal_set_lon(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.ZtCommonInfo.lon)
}
inline std::string* ZtCommonInfo::mutable_lon() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.ZtCommonInfo.lon)
  return _internal_mutable_lon();
}
inline const std::string& ZtCommonInfo::_internal_lon() const {
  return lon_.Get();
}
inline void ZtCommonInfo::_internal_set_lon(const std::string& value) {
  
  lon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ZtCommonInfo::set_lon(std::string&& value) {
  
  lon_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.ZtCommonInfo.lon)
}
inline void ZtCommonInfo::set_lon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.ZtCommonInfo.lon)
}
inline void ZtCommonInfo::set_lon(const char* value,
    size_t size) {
  
  lon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.ZtCommonInfo.lon)
}
inline std::string* ZtCommonInfo::_internal_mutable_lon() {
  
  return lon_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ZtCommonInfo::release_lon() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.ZtCommonInfo.lon)
  return lon_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ZtCommonInfo::set_allocated_lon(std::string* lon) {
  if (lon != nullptr) {
    
  } else {
    
  }
  lon_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lon,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.ZtCommonInfo.lon)
}

// string mod = 11;
inline void ZtCommonInfo::clear_mod() {
  mod_.ClearToEmpty();
}
inline const std::string& ZtCommonInfo::mod() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.ZtCommonInfo.mod)
  return _internal_mod();
}
inline void ZtCommonInfo::set_mod(const std::string& value) {
  _internal_set_mod(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.ZtCommonInfo.mod)
}
inline std::string* ZtCommonInfo::mutable_mod() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.ZtCommonInfo.mod)
  return _internal_mutable_mod();
}
inline const std::string& ZtCommonInfo::_internal_mod() const {
  return mod_.Get();
}
inline void ZtCommonInfo::_internal_set_mod(const std::string& value) {
  
  mod_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ZtCommonInfo::set_mod(std::string&& value) {
  
  mod_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.ZtCommonInfo.mod)
}
inline void ZtCommonInfo::set_mod(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mod_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.ZtCommonInfo.mod)
}
inline void ZtCommonInfo::set_mod(const char* value,
    size_t size) {
  
  mod_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.ZtCommonInfo.mod)
}
inline std::string* ZtCommonInfo::_internal_mutable_mod() {
  
  return mod_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ZtCommonInfo::release_mod() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.ZtCommonInfo.mod)
  return mod_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ZtCommonInfo::set_allocated_mod(std::string* mod) {
  if (mod != nullptr) {
    
  } else {
    
  }
  mod_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mod,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.ZtCommonInfo.mod)
}

// string net = 12;
inline void ZtCommonInfo::clear_net() {
  net_.ClearToEmpty();
}
inline const std::string& ZtCommonInfo::net() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.ZtCommonInfo.net)
  return _internal_net();
}
inline void ZtCommonInfo::set_net(const std::string& value) {
  _internal_set_net(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.ZtCommonInfo.net)
}
inline std::string* ZtCommonInfo::mutable_net() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.ZtCommonInfo.net)
  return _internal_mutable_net();
}
inline const std::string& ZtCommonInfo::_internal_net() const {
  return net_.Get();
}
inline void ZtCommonInfo::_internal_set_net(const std::string& value) {
  
  net_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ZtCommonInfo::set_net(std::string&& value) {
  
  net_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.ZtCommonInfo.net)
}
inline void ZtCommonInfo::set_net(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  net_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.ZtCommonInfo.net)
}
inline void ZtCommonInfo::set_net(const char* value,
    size_t size) {
  
  net_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.ZtCommonInfo.net)
}
inline std::string* ZtCommonInfo::_internal_mutable_net() {
  
  return net_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ZtCommonInfo::release_net() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.ZtCommonInfo.net)
  return net_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ZtCommonInfo::set_allocated_net(std::string* net) {
  if (net != nullptr) {
    
  } else {
    
  }
  net_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), net,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.ZtCommonInfo.net)
}

// string sys = 13;
inline void ZtCommonInfo::clear_sys() {
  sys_.ClearToEmpty();
}
inline const std::string& ZtCommonInfo::sys() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.ZtCommonInfo.sys)
  return _internal_sys();
}
inline void ZtCommonInfo::set_sys(const std::string& value) {
  _internal_set_sys(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.ZtCommonInfo.sys)
}
inline std::string* ZtCommonInfo::mutable_sys() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.ZtCommonInfo.sys)
  return _internal_mutable_sys();
}
inline const std::string& ZtCommonInfo::_internal_sys() const {
  return sys_.Get();
}
inline void ZtCommonInfo::_internal_set_sys(const std::string& value) {
  
  sys_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ZtCommonInfo::set_sys(std::string&& value) {
  
  sys_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.ZtCommonInfo.sys)
}
inline void ZtCommonInfo::set_sys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sys_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.ZtCommonInfo.sys)
}
inline void ZtCommonInfo::set_sys(const char* value,
    size_t size) {
  
  sys_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.ZtCommonInfo.sys)
}
inline std::string* ZtCommonInfo::_internal_mutable_sys() {
  
  return sys_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ZtCommonInfo::release_sys() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.ZtCommonInfo.sys)
  return sys_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ZtCommonInfo::set_allocated_sys(std::string* sys) {
  if (sys != nullptr) {
    
  } else {
    
  }
  sys_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sys,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.ZtCommonInfo.sys)
}

// string c = 14;
inline void ZtCommonInfo::clear_c() {
  c_.ClearToEmpty();
}
inline const std::string& ZtCommonInfo::c() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.ZtCommonInfo.c)
  return _internal_c();
}
inline void ZtCommonInfo::set_c(const std::string& value) {
  _internal_set_c(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.ZtCommonInfo.c)
}
inline std::string* ZtCommonInfo::mutable_c() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.ZtCommonInfo.c)
  return _internal_mutable_c();
}
inline const std::string& ZtCommonInfo::_internal_c() const {
  return c_.Get();
}
inline void ZtCommonInfo::_internal_set_c(const std::string& value) {
  
  c_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ZtCommonInfo::set_c(std::string&& value) {
  
  c_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.ZtCommonInfo.c)
}
inline void ZtCommonInfo::set_c(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  c_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.ZtCommonInfo.c)
}
inline void ZtCommonInfo::set_c(const char* value,
    size_t size) {
  
  c_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.ZtCommonInfo.c)
}
inline std::string* ZtCommonInfo::_internal_mutable_c() {
  
  return c_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ZtCommonInfo::release_c() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.ZtCommonInfo.c)
  return c_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ZtCommonInfo::set_allocated_c(std::string* c) {
  if (c != nullptr) {
    
  } else {
    
  }
  c_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), c,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.ZtCommonInfo.c)
}

// string language = 15;
inline void ZtCommonInfo::clear_language() {
  language_.ClearToEmpty();
}
inline const std::string& ZtCommonInfo::language() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.ZtCommonInfo.language)
  return _internal_language();
}
inline void ZtCommonInfo::set_language(const std::string& value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.ZtCommonInfo.language)
}
inline std::string* ZtCommonInfo::mutable_language() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.ZtCommonInfo.language)
  return _internal_mutable_language();
}
inline const std::string& ZtCommonInfo::_internal_language() const {
  return language_.Get();
}
inline void ZtCommonInfo::_internal_set_language(const std::string& value) {
  
  language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ZtCommonInfo::set_language(std::string&& value) {
  
  language_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.ZtCommonInfo.language)
}
inline void ZtCommonInfo::set_language(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.ZtCommonInfo.language)
}
inline void ZtCommonInfo::set_language(const char* value,
    size_t size) {
  
  language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.ZtCommonInfo.language)
}
inline std::string* ZtCommonInfo::_internal_mutable_language() {
  
  return language_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ZtCommonInfo::release_language() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.ZtCommonInfo.language)
  return language_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ZtCommonInfo::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    
  } else {
    
  }
  language_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.ZtCommonInfo.language)
}

// string countryCode = 16;
inline void ZtCommonInfo::clear_countrycode() {
  countrycode_.ClearToEmpty();
}
inline const std::string& ZtCommonInfo::countrycode() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.ZtCommonInfo.countryCode)
  return _internal_countrycode();
}
inline void ZtCommonInfo::set_countrycode(const std::string& value) {
  _internal_set_countrycode(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.ZtCommonInfo.countryCode)
}
inline std::string* ZtCommonInfo::mutable_countrycode() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.ZtCommonInfo.countryCode)
  return _internal_mutable_countrycode();
}
inline const std::string& ZtCommonInfo::_internal_countrycode() const {
  return countrycode_.Get();
}
inline void ZtCommonInfo::_internal_set_countrycode(const std::string& value) {
  
  countrycode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ZtCommonInfo::set_countrycode(std::string&& value) {
  
  countrycode_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.ZtCommonInfo.countryCode)
}
inline void ZtCommonInfo::set_countrycode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  countrycode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.ZtCommonInfo.countryCode)
}
inline void ZtCommonInfo::set_countrycode(const char* value,
    size_t size) {
  
  countrycode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.ZtCommonInfo.countryCode)
}
inline std::string* ZtCommonInfo::_internal_mutable_countrycode() {
  
  return countrycode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ZtCommonInfo::release_countrycode() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.ZtCommonInfo.countryCode)
  return countrycode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ZtCommonInfo::set_allocated_countrycode(std::string* countrycode) {
  if (countrycode != nullptr) {
    
  } else {
    
  }
  countrycode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), countrycode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.ZtCommonInfo.countryCode)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace AcFunDanmu

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ZtCommonInfo_2eproto
