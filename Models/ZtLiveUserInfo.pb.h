// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ZtLiveUserInfo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ZtLiveUserInfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ZtLiveUserInfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ImageCdnNode.pb.h"
#include "ZtLiveUserIdentity.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ZtLiveUserInfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ZtLiveUserInfo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ZtLiveUserInfo_2eproto;
namespace AcFunDanmu {
class ZtLiveUserInfo;
class ZtLiveUserInfoDefaultTypeInternal;
extern ZtLiveUserInfoDefaultTypeInternal _ZtLiveUserInfo_default_instance_;
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::ZtLiveUserInfo* Arena::CreateMaybeMessage<::AcFunDanmu::ZtLiveUserInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {

// ===================================================================

class ZtLiveUserInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.ZtLiveUserInfo) */ {
 public:
  inline ZtLiveUserInfo() : ZtLiveUserInfo(nullptr) {}
  virtual ~ZtLiveUserInfo();

  ZtLiveUserInfo(const ZtLiveUserInfo& from);
  ZtLiveUserInfo(ZtLiveUserInfo&& from) noexcept
    : ZtLiveUserInfo() {
    *this = ::std::move(from);
  }

  inline ZtLiveUserInfo& operator=(const ZtLiveUserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZtLiveUserInfo& operator=(ZtLiveUserInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ZtLiveUserInfo& default_instance();

  static inline const ZtLiveUserInfo* internal_default_instance() {
    return reinterpret_cast<const ZtLiveUserInfo*>(
               &_ZtLiveUserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ZtLiveUserInfo& a, ZtLiveUserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ZtLiveUserInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZtLiveUserInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ZtLiveUserInfo* New() const final {
    return CreateMaybeMessage<ZtLiveUserInfo>(nullptr);
  }

  ZtLiveUserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ZtLiveUserInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ZtLiveUserInfo& from);
  void MergeFrom(const ZtLiveUserInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZtLiveUserInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.ZtLiveUserInfo";
  }
  protected:
  explicit ZtLiveUserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ZtLiveUserInfo_2eproto);
    return ::descriptor_table_ZtLiveUserInfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAvatarFieldNumber = 3,
    kNicknameFieldNumber = 2,
    kBadgeFieldNumber = 4,
    kUserIdentityFieldNumber = 5,
    kUserIdFieldNumber = 1,
  };
  // repeated .AcFunDanmu.ImageCdnNode avatar = 3;
  int avatar_size() const;
  private:
  int _internal_avatar_size() const;
  public:
  void clear_avatar();
  ::AcFunDanmu::ImageCdnNode* mutable_avatar(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::ImageCdnNode >*
      mutable_avatar();
  private:
  const ::AcFunDanmu::ImageCdnNode& _internal_avatar(int index) const;
  ::AcFunDanmu::ImageCdnNode* _internal_add_avatar();
  public:
  const ::AcFunDanmu::ImageCdnNode& avatar(int index) const;
  ::AcFunDanmu::ImageCdnNode* add_avatar();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::ImageCdnNode >&
      avatar() const;

  // string nickname = 2;
  void clear_nickname();
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // string badge = 4;
  void clear_badge();
  const std::string& badge() const;
  void set_badge(const std::string& value);
  void set_badge(std::string&& value);
  void set_badge(const char* value);
  void set_badge(const char* value, size_t size);
  std::string* mutable_badge();
  std::string* release_badge();
  void set_allocated_badge(std::string* badge);
  private:
  const std::string& _internal_badge() const;
  void _internal_set_badge(const std::string& value);
  std::string* _internal_mutable_badge();
  public:

  // .AcFunDanmu.ZtLiveUserIdentity userIdentity = 5;
  bool has_useridentity() const;
  private:
  bool _internal_has_useridentity() const;
  public:
  void clear_useridentity();
  const ::AcFunDanmu::ZtLiveUserIdentity& useridentity() const;
  ::AcFunDanmu::ZtLiveUserIdentity* release_useridentity();
  ::AcFunDanmu::ZtLiveUserIdentity* mutable_useridentity();
  void set_allocated_useridentity(::AcFunDanmu::ZtLiveUserIdentity* useridentity);
  private:
  const ::AcFunDanmu::ZtLiveUserIdentity& _internal_useridentity() const;
  ::AcFunDanmu::ZtLiveUserIdentity* _internal_mutable_useridentity();
  public:
  void unsafe_arena_set_allocated_useridentity(
      ::AcFunDanmu::ZtLiveUserIdentity* useridentity);
  ::AcFunDanmu::ZtLiveUserIdentity* unsafe_arena_release_useridentity();

  // int64 userId = 1;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int64 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.ZtLiveUserInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::ImageCdnNode > avatar_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr badge_;
  ::AcFunDanmu::ZtLiveUserIdentity* useridentity_;
  ::PROTOBUF_NAMESPACE_ID::int64 userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ZtLiveUserInfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ZtLiveUserInfo

// int64 userId = 1;
inline void ZtLiveUserInfo::clear_userid() {
  userid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ZtLiveUserInfo::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ZtLiveUserInfo::userid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.ZtLiveUserInfo.userId)
  return _internal_userid();
}
inline void ZtLiveUserInfo::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  userid_ = value;
}
inline void ZtLiveUserInfo::set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.ZtLiveUserInfo.userId)
}

// string nickname = 2;
inline void ZtLiveUserInfo::clear_nickname() {
  nickname_.ClearToEmpty();
}
inline const std::string& ZtLiveUserInfo::nickname() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.ZtLiveUserInfo.nickname)
  return _internal_nickname();
}
inline void ZtLiveUserInfo::set_nickname(const std::string& value) {
  _internal_set_nickname(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.ZtLiveUserInfo.nickname)
}
inline std::string* ZtLiveUserInfo::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.ZtLiveUserInfo.nickname)
  return _internal_mutable_nickname();
}
inline const std::string& ZtLiveUserInfo::_internal_nickname() const {
  return nickname_.Get();
}
inline void ZtLiveUserInfo::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ZtLiveUserInfo::set_nickname(std::string&& value) {
  
  nickname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.ZtLiveUserInfo.nickname)
}
inline void ZtLiveUserInfo::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.ZtLiveUserInfo.nickname)
}
inline void ZtLiveUserInfo::set_nickname(const char* value,
    size_t size) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.ZtLiveUserInfo.nickname)
}
inline std::string* ZtLiveUserInfo::_internal_mutable_nickname() {
  
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ZtLiveUserInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.ZtLiveUserInfo.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ZtLiveUserInfo::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.ZtLiveUserInfo.nickname)
}

// repeated .AcFunDanmu.ImageCdnNode avatar = 3;
inline int ZtLiveUserInfo::_internal_avatar_size() const {
  return avatar_.size();
}
inline int ZtLiveUserInfo::avatar_size() const {
  return _internal_avatar_size();
}
inline ::AcFunDanmu::ImageCdnNode* ZtLiveUserInfo::mutable_avatar(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.ZtLiveUserInfo.avatar)
  return avatar_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::ImageCdnNode >*
ZtLiveUserInfo::mutable_avatar() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.ZtLiveUserInfo.avatar)
  return &avatar_;
}
inline const ::AcFunDanmu::ImageCdnNode& ZtLiveUserInfo::_internal_avatar(int index) const {
  return avatar_.Get(index);
}
inline const ::AcFunDanmu::ImageCdnNode& ZtLiveUserInfo::avatar(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.ZtLiveUserInfo.avatar)
  return _internal_avatar(index);
}
inline ::AcFunDanmu::ImageCdnNode* ZtLiveUserInfo::_internal_add_avatar() {
  return avatar_.Add();
}
inline ::AcFunDanmu::ImageCdnNode* ZtLiveUserInfo::add_avatar() {
  // @@protoc_insertion_point(field_add:AcFunDanmu.ZtLiveUserInfo.avatar)
  return _internal_add_avatar();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::ImageCdnNode >&
ZtLiveUserInfo::avatar() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.ZtLiveUserInfo.avatar)
  return avatar_;
}

// string badge = 4;
inline void ZtLiveUserInfo::clear_badge() {
  badge_.ClearToEmpty();
}
inline const std::string& ZtLiveUserInfo::badge() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.ZtLiveUserInfo.badge)
  return _internal_badge();
}
inline void ZtLiveUserInfo::set_badge(const std::string& value) {
  _internal_set_badge(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.ZtLiveUserInfo.badge)
}
inline std::string* ZtLiveUserInfo::mutable_badge() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.ZtLiveUserInfo.badge)
  return _internal_mutable_badge();
}
inline const std::string& ZtLiveUserInfo::_internal_badge() const {
  return badge_.Get();
}
inline void ZtLiveUserInfo::_internal_set_badge(const std::string& value) {
  
  badge_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ZtLiveUserInfo::set_badge(std::string&& value) {
  
  badge_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.ZtLiveUserInfo.badge)
}
inline void ZtLiveUserInfo::set_badge(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  badge_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.ZtLiveUserInfo.badge)
}
inline void ZtLiveUserInfo::set_badge(const char* value,
    size_t size) {
  
  badge_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.ZtLiveUserInfo.badge)
}
inline std::string* ZtLiveUserInfo::_internal_mutable_badge() {
  
  return badge_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ZtLiveUserInfo::release_badge() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.ZtLiveUserInfo.badge)
  return badge_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ZtLiveUserInfo::set_allocated_badge(std::string* badge) {
  if (badge != nullptr) {
    
  } else {
    
  }
  badge_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), badge,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.ZtLiveUserInfo.badge)
}

// .AcFunDanmu.ZtLiveUserIdentity userIdentity = 5;
inline bool ZtLiveUserInfo::_internal_has_useridentity() const {
  return this != internal_default_instance() && useridentity_ != nullptr;
}
inline bool ZtLiveUserInfo::has_useridentity() const {
  return _internal_has_useridentity();
}
inline const ::AcFunDanmu::ZtLiveUserIdentity& ZtLiveUserInfo::_internal_useridentity() const {
  const ::AcFunDanmu::ZtLiveUserIdentity* p = useridentity_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::ZtLiveUserIdentity&>(
      ::AcFunDanmu::_ZtLiveUserIdentity_default_instance_);
}
inline const ::AcFunDanmu::ZtLiveUserIdentity& ZtLiveUserInfo::useridentity() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.ZtLiveUserInfo.userIdentity)
  return _internal_useridentity();
}
inline void ZtLiveUserInfo::unsafe_arena_set_allocated_useridentity(
    ::AcFunDanmu::ZtLiveUserIdentity* useridentity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(useridentity_);
  }
  useridentity_ = useridentity;
  if (useridentity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.ZtLiveUserInfo.userIdentity)
}
inline ::AcFunDanmu::ZtLiveUserIdentity* ZtLiveUserInfo::release_useridentity() {
  
  ::AcFunDanmu::ZtLiveUserIdentity* temp = useridentity_;
  useridentity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::ZtLiveUserIdentity* ZtLiveUserInfo::unsafe_arena_release_useridentity() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.ZtLiveUserInfo.userIdentity)
  
  ::AcFunDanmu::ZtLiveUserIdentity* temp = useridentity_;
  useridentity_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::ZtLiveUserIdentity* ZtLiveUserInfo::_internal_mutable_useridentity() {
  
  if (useridentity_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::ZtLiveUserIdentity>(GetArena());
    useridentity_ = p;
  }
  return useridentity_;
}
inline ::AcFunDanmu::ZtLiveUserIdentity* ZtLiveUserInfo::mutable_useridentity() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.ZtLiveUserInfo.userIdentity)
  return _internal_mutable_useridentity();
}
inline void ZtLiveUserInfo::set_allocated_useridentity(::AcFunDanmu::ZtLiveUserIdentity* useridentity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(useridentity_);
  }
  if (useridentity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(useridentity)->GetArena();
    if (message_arena != submessage_arena) {
      useridentity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, useridentity, submessage_arena);
    }
    
  } else {
    
  }
  useridentity_ = useridentity;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.ZtLiveUserInfo.userIdentity)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace AcFunDanmu

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ZtLiveUserInfo_2eproto
