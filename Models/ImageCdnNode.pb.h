// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ImageCdnNode.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ImageCdnNode_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ImageCdnNode_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ImageCdnNode_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ImageCdnNode_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ImageCdnNode_2eproto;
namespace AcFunDanmu {
class ImageCdnNode;
class ImageCdnNodeDefaultTypeInternal;
extern ImageCdnNodeDefaultTypeInternal _ImageCdnNode_default_instance_;
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::ImageCdnNode* Arena::CreateMaybeMessage<::AcFunDanmu::ImageCdnNode>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {

// ===================================================================

class ImageCdnNode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.ImageCdnNode) */ {
 public:
  inline ImageCdnNode() : ImageCdnNode(nullptr) {}
  virtual ~ImageCdnNode();

  ImageCdnNode(const ImageCdnNode& from);
  ImageCdnNode(ImageCdnNode&& from) noexcept
    : ImageCdnNode() {
    *this = ::std::move(from);
  }

  inline ImageCdnNode& operator=(const ImageCdnNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageCdnNode& operator=(ImageCdnNode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImageCdnNode& default_instance();

  static inline const ImageCdnNode* internal_default_instance() {
    return reinterpret_cast<const ImageCdnNode*>(
               &_ImageCdnNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ImageCdnNode& a, ImageCdnNode& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageCdnNode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageCdnNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageCdnNode* New() const final {
    return CreateMaybeMessage<ImageCdnNode>(nullptr);
  }

  ImageCdnNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageCdnNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImageCdnNode& from);
  void MergeFrom(const ImageCdnNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageCdnNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.ImageCdnNode";
  }
  protected:
  explicit ImageCdnNode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ImageCdnNode_2eproto);
    return ::descriptor_table_ImageCdnNode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCdnFieldNumber = 1,
    kUrlFieldNumber = 2,
    kUrlPatternFieldNumber = 3,
  };
  // string cdn = 1;
  void clear_cdn();
  const std::string& cdn() const;
  void set_cdn(const std::string& value);
  void set_cdn(std::string&& value);
  void set_cdn(const char* value);
  void set_cdn(const char* value, size_t size);
  std::string* mutable_cdn();
  std::string* release_cdn();
  void set_allocated_cdn(std::string* cdn);
  private:
  const std::string& _internal_cdn() const;
  void _internal_set_cdn(const std::string& value);
  std::string* _internal_mutable_cdn();
  public:

  // string url = 2;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // string urlPattern = 3;
  void clear_urlpattern();
  const std::string& urlpattern() const;
  void set_urlpattern(const std::string& value);
  void set_urlpattern(std::string&& value);
  void set_urlpattern(const char* value);
  void set_urlpattern(const char* value, size_t size);
  std::string* mutable_urlpattern();
  std::string* release_urlpattern();
  void set_allocated_urlpattern(std::string* urlpattern);
  private:
  const std::string& _internal_urlpattern() const;
  void _internal_set_urlpattern(const std::string& value);
  std::string* _internal_mutable_urlpattern();
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.ImageCdnNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cdn_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr urlpattern_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ImageCdnNode_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ImageCdnNode

// string cdn = 1;
inline void ImageCdnNode::clear_cdn() {
  cdn_.ClearToEmpty();
}
inline const std::string& ImageCdnNode::cdn() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.ImageCdnNode.cdn)
  return _internal_cdn();
}
inline void ImageCdnNode::set_cdn(const std::string& value) {
  _internal_set_cdn(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.ImageCdnNode.cdn)
}
inline std::string* ImageCdnNode::mutable_cdn() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.ImageCdnNode.cdn)
  return _internal_mutable_cdn();
}
inline const std::string& ImageCdnNode::_internal_cdn() const {
  return cdn_.Get();
}
inline void ImageCdnNode::_internal_set_cdn(const std::string& value) {
  
  cdn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ImageCdnNode::set_cdn(std::string&& value) {
  
  cdn_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.ImageCdnNode.cdn)
}
inline void ImageCdnNode::set_cdn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cdn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.ImageCdnNode.cdn)
}
inline void ImageCdnNode::set_cdn(const char* value,
    size_t size) {
  
  cdn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.ImageCdnNode.cdn)
}
inline std::string* ImageCdnNode::_internal_mutable_cdn() {
  
  return cdn_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ImageCdnNode::release_cdn() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.ImageCdnNode.cdn)
  return cdn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImageCdnNode::set_allocated_cdn(std::string* cdn) {
  if (cdn != nullptr) {
    
  } else {
    
  }
  cdn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cdn,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.ImageCdnNode.cdn)
}

// string url = 2;
inline void ImageCdnNode::clear_url() {
  url_.ClearToEmpty();
}
inline const std::string& ImageCdnNode::url() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.ImageCdnNode.url)
  return _internal_url();
}
inline void ImageCdnNode::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.ImageCdnNode.url)
}
inline std::string* ImageCdnNode::mutable_url() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.ImageCdnNode.url)
  return _internal_mutable_url();
}
inline const std::string& ImageCdnNode::_internal_url() const {
  return url_.Get();
}
inline void ImageCdnNode::_internal_set_url(const std::string& value) {
  
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ImageCdnNode::set_url(std::string&& value) {
  
  url_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.ImageCdnNode.url)
}
inline void ImageCdnNode::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.ImageCdnNode.url)
}
inline void ImageCdnNode::set_url(const char* value,
    size_t size) {
  
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.ImageCdnNode.url)
}
inline std::string* ImageCdnNode::_internal_mutable_url() {
  
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ImageCdnNode::release_url() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.ImageCdnNode.url)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImageCdnNode::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.ImageCdnNode.url)
}

// string urlPattern = 3;
inline void ImageCdnNode::clear_urlpattern() {
  urlpattern_.ClearToEmpty();
}
inline const std::string& ImageCdnNode::urlpattern() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.ImageCdnNode.urlPattern)
  return _internal_urlpattern();
}
inline void ImageCdnNode::set_urlpattern(const std::string& value) {
  _internal_set_urlpattern(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.ImageCdnNode.urlPattern)
}
inline std::string* ImageCdnNode::mutable_urlpattern() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.ImageCdnNode.urlPattern)
  return _internal_mutable_urlpattern();
}
inline const std::string& ImageCdnNode::_internal_urlpattern() const {
  return urlpattern_.Get();
}
inline void ImageCdnNode::_internal_set_urlpattern(const std::string& value) {
  
  urlpattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ImageCdnNode::set_urlpattern(std::string&& value) {
  
  urlpattern_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.ImageCdnNode.urlPattern)
}
inline void ImageCdnNode::set_urlpattern(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  urlpattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.ImageCdnNode.urlPattern)
}
inline void ImageCdnNode::set_urlpattern(const char* value,
    size_t size) {
  
  urlpattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.ImageCdnNode.urlPattern)
}
inline std::string* ImageCdnNode::_internal_mutable_urlpattern() {
  
  return urlpattern_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ImageCdnNode::release_urlpattern() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.ImageCdnNode.urlPattern)
  return urlpattern_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImageCdnNode::set_allocated_urlpattern(std::string* urlpattern) {
  if (urlpattern != nullptr) {
    
  } else {
    
  }
  urlpattern_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), urlpattern,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.ImageCdnNode.urlPattern)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace AcFunDanmu

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ImageCdnNode_2eproto
