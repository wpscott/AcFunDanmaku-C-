// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SdkOption.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_SdkOption_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_SdkOption_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_SdkOption_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_SdkOption_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SdkOption_2eproto;
namespace AcFunDanmu {
class SdkOption;
class SdkOptionDefaultTypeInternal;
extern SdkOptionDefaultTypeInternal _SdkOption_default_instance_;
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::SdkOption* Arena::CreateMaybeMessage<::AcFunDanmu::SdkOption>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {

// ===================================================================

class SdkOption PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.SdkOption) */ {
 public:
  inline SdkOption() : SdkOption(nullptr) {}
  virtual ~SdkOption();

  SdkOption(const SdkOption& from);
  SdkOption(SdkOption&& from) noexcept
    : SdkOption() {
    *this = ::std::move(from);
  }

  inline SdkOption& operator=(const SdkOption& from) {
    CopyFrom(from);
    return *this;
  }
  inline SdkOption& operator=(SdkOption&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SdkOption& default_instance();

  static inline const SdkOption* internal_default_instance() {
    return reinterpret_cast<const SdkOption*>(
               &_SdkOption_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SdkOption& a, SdkOption& b) {
    a.Swap(&b);
  }
  inline void Swap(SdkOption* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SdkOption* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SdkOption* New() const final {
    return CreateMaybeMessage<SdkOption>(nullptr);
  }

  SdkOption* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SdkOption>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SdkOption& from);
  void MergeFrom(const SdkOption& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SdkOption* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.SdkOption";
  }
  protected:
  explicit SdkOption(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SdkOption_2eproto);
    return ::descriptor_table_SdkOption_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetCheckServersFieldNumber = 4,
    kReportSecurityFieldNumber = 2,
    kReportIntervalSecondsFieldNumber = 1,
    kLz4CompressionThresholdBytesFieldNumber = 3,
  };
  // repeated string netCheckServers = 4;
  int netcheckservers_size() const;
  private:
  int _internal_netcheckservers_size() const;
  public:
  void clear_netcheckservers();
  const std::string& netcheckservers(int index) const;
  std::string* mutable_netcheckservers(int index);
  void set_netcheckservers(int index, const std::string& value);
  void set_netcheckservers(int index, std::string&& value);
  void set_netcheckservers(int index, const char* value);
  void set_netcheckservers(int index, const char* value, size_t size);
  std::string* add_netcheckservers();
  void add_netcheckservers(const std::string& value);
  void add_netcheckservers(std::string&& value);
  void add_netcheckservers(const char* value);
  void add_netcheckservers(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& netcheckservers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_netcheckservers();
  private:
  const std::string& _internal_netcheckservers(int index) const;
  std::string* _internal_add_netcheckservers();
  public:

  // string reportSecurity = 2;
  void clear_reportsecurity();
  const std::string& reportsecurity() const;
  void set_reportsecurity(const std::string& value);
  void set_reportsecurity(std::string&& value);
  void set_reportsecurity(const char* value);
  void set_reportsecurity(const char* value, size_t size);
  std::string* mutable_reportsecurity();
  std::string* release_reportsecurity();
  void set_allocated_reportsecurity(std::string* reportsecurity);
  private:
  const std::string& _internal_reportsecurity() const;
  void _internal_set_reportsecurity(const std::string& value);
  std::string* _internal_mutable_reportsecurity();
  public:

  // int32 reportIntervalSeconds = 1;
  void clear_reportintervalseconds();
  ::PROTOBUF_NAMESPACE_ID::int32 reportintervalseconds() const;
  void set_reportintervalseconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reportintervalseconds() const;
  void _internal_set_reportintervalseconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 lz4CompressionThresholdBytes = 3;
  void clear_lz4compressionthresholdbytes();
  ::PROTOBUF_NAMESPACE_ID::int32 lz4compressionthresholdbytes() const;
  void set_lz4compressionthresholdbytes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lz4compressionthresholdbytes() const;
  void _internal_set_lz4compressionthresholdbytes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.SdkOption)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> netcheckservers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reportsecurity_;
  ::PROTOBUF_NAMESPACE_ID::int32 reportintervalseconds_;
  ::PROTOBUF_NAMESPACE_ID::int32 lz4compressionthresholdbytes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SdkOption_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SdkOption

// int32 reportIntervalSeconds = 1;
inline void SdkOption::clear_reportintervalseconds() {
  reportintervalseconds_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SdkOption::_internal_reportintervalseconds() const {
  return reportintervalseconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SdkOption::reportintervalseconds() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.SdkOption.reportIntervalSeconds)
  return _internal_reportintervalseconds();
}
inline void SdkOption::_internal_set_reportintervalseconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reportintervalseconds_ = value;
}
inline void SdkOption::set_reportintervalseconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reportintervalseconds(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.SdkOption.reportIntervalSeconds)
}

// string reportSecurity = 2;
inline void SdkOption::clear_reportsecurity() {
  reportsecurity_.ClearToEmpty();
}
inline const std::string& SdkOption::reportsecurity() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.SdkOption.reportSecurity)
  return _internal_reportsecurity();
}
inline void SdkOption::set_reportsecurity(const std::string& value) {
  _internal_set_reportsecurity(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.SdkOption.reportSecurity)
}
inline std::string* SdkOption::mutable_reportsecurity() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.SdkOption.reportSecurity)
  return _internal_mutable_reportsecurity();
}
inline const std::string& SdkOption::_internal_reportsecurity() const {
  return reportsecurity_.Get();
}
inline void SdkOption::_internal_set_reportsecurity(const std::string& value) {
  
  reportsecurity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SdkOption::set_reportsecurity(std::string&& value) {
  
  reportsecurity_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.SdkOption.reportSecurity)
}
inline void SdkOption::set_reportsecurity(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reportsecurity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.SdkOption.reportSecurity)
}
inline void SdkOption::set_reportsecurity(const char* value,
    size_t size) {
  
  reportsecurity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.SdkOption.reportSecurity)
}
inline std::string* SdkOption::_internal_mutable_reportsecurity() {
  
  return reportsecurity_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SdkOption::release_reportsecurity() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.SdkOption.reportSecurity)
  return reportsecurity_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SdkOption::set_allocated_reportsecurity(std::string* reportsecurity) {
  if (reportsecurity != nullptr) {
    
  } else {
    
  }
  reportsecurity_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reportsecurity,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.SdkOption.reportSecurity)
}

// int32 lz4CompressionThresholdBytes = 3;
inline void SdkOption::clear_lz4compressionthresholdbytes() {
  lz4compressionthresholdbytes_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SdkOption::_internal_lz4compressionthresholdbytes() const {
  return lz4compressionthresholdbytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SdkOption::lz4compressionthresholdbytes() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.SdkOption.lz4CompressionThresholdBytes)
  return _internal_lz4compressionthresholdbytes();
}
inline void SdkOption::_internal_set_lz4compressionthresholdbytes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lz4compressionthresholdbytes_ = value;
}
inline void SdkOption::set_lz4compressionthresholdbytes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lz4compressionthresholdbytes(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.SdkOption.lz4CompressionThresholdBytes)
}

// repeated string netCheckServers = 4;
inline int SdkOption::_internal_netcheckservers_size() const {
  return netcheckservers_.size();
}
inline int SdkOption::netcheckservers_size() const {
  return _internal_netcheckservers_size();
}
inline void SdkOption::clear_netcheckservers() {
  netcheckservers_.Clear();
}
inline std::string* SdkOption::add_netcheckservers() {
  // @@protoc_insertion_point(field_add_mutable:AcFunDanmu.SdkOption.netCheckServers)
  return _internal_add_netcheckservers();
}
inline const std::string& SdkOption::_internal_netcheckservers(int index) const {
  return netcheckservers_.Get(index);
}
inline const std::string& SdkOption::netcheckservers(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.SdkOption.netCheckServers)
  return _internal_netcheckservers(index);
}
inline std::string* SdkOption::mutable_netcheckservers(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.SdkOption.netCheckServers)
  return netcheckservers_.Mutable(index);
}
inline void SdkOption::set_netcheckservers(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:AcFunDanmu.SdkOption.netCheckServers)
  netcheckservers_.Mutable(index)->assign(value);
}
inline void SdkOption::set_netcheckservers(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:AcFunDanmu.SdkOption.netCheckServers)
  netcheckservers_.Mutable(index)->assign(std::move(value));
}
inline void SdkOption::set_netcheckservers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  netcheckservers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.SdkOption.netCheckServers)
}
inline void SdkOption::set_netcheckservers(int index, const char* value, size_t size) {
  netcheckservers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.SdkOption.netCheckServers)
}
inline std::string* SdkOption::_internal_add_netcheckservers() {
  return netcheckservers_.Add();
}
inline void SdkOption::add_netcheckservers(const std::string& value) {
  netcheckservers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AcFunDanmu.SdkOption.netCheckServers)
}
inline void SdkOption::add_netcheckservers(std::string&& value) {
  netcheckservers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AcFunDanmu.SdkOption.netCheckServers)
}
inline void SdkOption::add_netcheckservers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  netcheckservers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AcFunDanmu.SdkOption.netCheckServers)
}
inline void SdkOption::add_netcheckservers(const char* value, size_t size) {
  netcheckservers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AcFunDanmu.SdkOption.netCheckServers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SdkOption::netcheckservers() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.SdkOption.netCheckServers)
  return netcheckservers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SdkOption::mutable_netcheckservers() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.SdkOption.netCheckServers)
  return &netcheckservers_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace AcFunDanmu

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_SdkOption_2eproto
