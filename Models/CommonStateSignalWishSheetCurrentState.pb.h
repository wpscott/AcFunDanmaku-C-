// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommonStateSignalWishSheetCurrentState.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_CommonStateSignalWishSheetCurrentState_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_CommonStateSignalWishSheetCurrentState_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_CommonStateSignalWishSheetCurrentState_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_CommonStateSignalWishSheetCurrentState_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_CommonStateSignalWishSheetCurrentState_2eproto;
namespace AcFunDanmu {
class CommonStateSignalWishSheetCurrentState;
struct CommonStateSignalWishSheetCurrentStateDefaultTypeInternal;
extern CommonStateSignalWishSheetCurrentStateDefaultTypeInternal _CommonStateSignalWishSheetCurrentState_default_instance_;
class CommonStateSignalWishSheetCurrentState_WishCurrentState;
struct CommonStateSignalWishSheetCurrentState_WishCurrentStateDefaultTypeInternal;
extern CommonStateSignalWishSheetCurrentState_WishCurrentStateDefaultTypeInternal _CommonStateSignalWishSheetCurrentState_WishCurrentState_default_instance_;
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::CommonStateSignalWishSheetCurrentState* Arena::CreateMaybeMessage<::AcFunDanmu::CommonStateSignalWishSheetCurrentState>(Arena*);
template<> ::AcFunDanmu::CommonStateSignalWishSheetCurrentState_WishCurrentState* Arena::CreateMaybeMessage<::AcFunDanmu::CommonStateSignalWishSheetCurrentState_WishCurrentState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {

// ===================================================================

class CommonStateSignalWishSheetCurrentState_WishCurrentState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.CommonStateSignalWishSheetCurrentState.WishCurrentState) */ {
 public:
  inline CommonStateSignalWishSheetCurrentState_WishCurrentState() : CommonStateSignalWishSheetCurrentState_WishCurrentState(nullptr) {}
  ~CommonStateSignalWishSheetCurrentState_WishCurrentState() override;
  explicit PROTOBUF_CONSTEXPR CommonStateSignalWishSheetCurrentState_WishCurrentState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommonStateSignalWishSheetCurrentState_WishCurrentState(const CommonStateSignalWishSheetCurrentState_WishCurrentState& from);
  CommonStateSignalWishSheetCurrentState_WishCurrentState(CommonStateSignalWishSheetCurrentState_WishCurrentState&& from) noexcept
    : CommonStateSignalWishSheetCurrentState_WishCurrentState() {
    *this = ::std::move(from);
  }

  inline CommonStateSignalWishSheetCurrentState_WishCurrentState& operator=(const CommonStateSignalWishSheetCurrentState_WishCurrentState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonStateSignalWishSheetCurrentState_WishCurrentState& operator=(CommonStateSignalWishSheetCurrentState_WishCurrentState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommonStateSignalWishSheetCurrentState_WishCurrentState& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommonStateSignalWishSheetCurrentState_WishCurrentState* internal_default_instance() {
    return reinterpret_cast<const CommonStateSignalWishSheetCurrentState_WishCurrentState*>(
               &_CommonStateSignalWishSheetCurrentState_WishCurrentState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CommonStateSignalWishSheetCurrentState_WishCurrentState& a, CommonStateSignalWishSheetCurrentState_WishCurrentState& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonStateSignalWishSheetCurrentState_WishCurrentState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonStateSignalWishSheetCurrentState_WishCurrentState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommonStateSignalWishSheetCurrentState_WishCurrentState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommonStateSignalWishSheetCurrentState_WishCurrentState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommonStateSignalWishSheetCurrentState_WishCurrentState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommonStateSignalWishSheetCurrentState_WishCurrentState& from) {
    CommonStateSignalWishSheetCurrentState_WishCurrentState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonStateSignalWishSheetCurrentState_WishCurrentState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.CommonStateSignalWishSheetCurrentState.WishCurrentState";
  }
  protected:
  explicit CommonStateSignalWishSheetCurrentState_WishCurrentState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAFieldNumber = 1,
    kEFieldNumber = 5,
    kFFieldNumber = 6,
    kBFieldNumber = 2,
    kCFieldNumber = 3,
    kDFieldNumber = 4,
  };
  // string a = 1;
  void clear_a();
  const std::string& a() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_a(ArgT0&& arg0, ArgT... args);
  std::string* mutable_a();
  PROTOBUF_NODISCARD std::string* release_a();
  void set_allocated_a(std::string* a);
  private:
  const std::string& _internal_a() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_a(const std::string& value);
  std::string* _internal_mutable_a();
  public:

  // string e = 5;
  void clear_e();
  const std::string& e() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_e(ArgT0&& arg0, ArgT... args);
  std::string* mutable_e();
  PROTOBUF_NODISCARD std::string* release_e();
  void set_allocated_e(std::string* e);
  private:
  const std::string& _internal_e() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_e(const std::string& value);
  std::string* _internal_mutable_e();
  public:

  // string f = 6;
  void clear_f();
  const std::string& f() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_f(ArgT0&& arg0, ArgT... args);
  std::string* mutable_f();
  PROTOBUF_NODISCARD std::string* release_f();
  void set_allocated_f(std::string* f);
  private:
  const std::string& _internal_f() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f(const std::string& value);
  std::string* _internal_mutable_f();
  public:

  // int64 b = 2;
  void clear_b();
  int64_t b() const;
  void set_b(int64_t value);
  private:
  int64_t _internal_b() const;
  void _internal_set_b(int64_t value);
  public:

  // int64 c = 3;
  void clear_c();
  int64_t c() const;
  void set_c(int64_t value);
  private:
  int64_t _internal_c() const;
  void _internal_set_c(int64_t value);
  public:

  // int64 d = 4;
  void clear_d();
  int64_t d() const;
  void set_d(int64_t value);
  private:
  int64_t _internal_d() const;
  void _internal_set_d(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.CommonStateSignalWishSheetCurrentState.WishCurrentState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr a_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr e_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f_;
    int64_t b_;
    int64_t c_;
    int64_t d_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CommonStateSignalWishSheetCurrentState_2eproto;
};
// -------------------------------------------------------------------

class CommonStateSignalWishSheetCurrentState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.CommonStateSignalWishSheetCurrentState) */ {
 public:
  inline CommonStateSignalWishSheetCurrentState() : CommonStateSignalWishSheetCurrentState(nullptr) {}
  ~CommonStateSignalWishSheetCurrentState() override;
  explicit PROTOBUF_CONSTEXPR CommonStateSignalWishSheetCurrentState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommonStateSignalWishSheetCurrentState(const CommonStateSignalWishSheetCurrentState& from);
  CommonStateSignalWishSheetCurrentState(CommonStateSignalWishSheetCurrentState&& from) noexcept
    : CommonStateSignalWishSheetCurrentState() {
    *this = ::std::move(from);
  }

  inline CommonStateSignalWishSheetCurrentState& operator=(const CommonStateSignalWishSheetCurrentState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonStateSignalWishSheetCurrentState& operator=(CommonStateSignalWishSheetCurrentState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommonStateSignalWishSheetCurrentState& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommonStateSignalWishSheetCurrentState* internal_default_instance() {
    return reinterpret_cast<const CommonStateSignalWishSheetCurrentState*>(
               &_CommonStateSignalWishSheetCurrentState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CommonStateSignalWishSheetCurrentState& a, CommonStateSignalWishSheetCurrentState& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonStateSignalWishSheetCurrentState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonStateSignalWishSheetCurrentState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommonStateSignalWishSheetCurrentState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommonStateSignalWishSheetCurrentState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommonStateSignalWishSheetCurrentState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommonStateSignalWishSheetCurrentState& from) {
    CommonStateSignalWishSheetCurrentState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonStateSignalWishSheetCurrentState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.CommonStateSignalWishSheetCurrentState";
  }
  protected:
  explicit CommonStateSignalWishSheetCurrentState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CommonStateSignalWishSheetCurrentState_WishCurrentState WishCurrentState;

  // accessors -------------------------------------------------------

  enum : int {
    kBFieldNumber = 2,
    kAFieldNumber = 1,
  };
  // repeated .AcFunDanmu.CommonStateSignalWishSheetCurrentState.WishCurrentState b = 2;
  int b_size() const;
  private:
  int _internal_b_size() const;
  public:
  void clear_b();
  ::AcFunDanmu::CommonStateSignalWishSheetCurrentState_WishCurrentState* mutable_b(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::CommonStateSignalWishSheetCurrentState_WishCurrentState >*
      mutable_b();
  private:
  const ::AcFunDanmu::CommonStateSignalWishSheetCurrentState_WishCurrentState& _internal_b(int index) const;
  ::AcFunDanmu::CommonStateSignalWishSheetCurrentState_WishCurrentState* _internal_add_b();
  public:
  const ::AcFunDanmu::CommonStateSignalWishSheetCurrentState_WishCurrentState& b(int index) const;
  ::AcFunDanmu::CommonStateSignalWishSheetCurrentState_WishCurrentState* add_b();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::CommonStateSignalWishSheetCurrentState_WishCurrentState >&
      b() const;

  // string a = 1;
  void clear_a();
  const std::string& a() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_a(ArgT0&& arg0, ArgT... args);
  std::string* mutable_a();
  PROTOBUF_NODISCARD std::string* release_a();
  void set_allocated_a(std::string* a);
  private:
  const std::string& _internal_a() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_a(const std::string& value);
  std::string* _internal_mutable_a();
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.CommonStateSignalWishSheetCurrentState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::CommonStateSignalWishSheetCurrentState_WishCurrentState > b_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr a_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CommonStateSignalWishSheetCurrentState_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CommonStateSignalWishSheetCurrentState_WishCurrentState

// string a = 1;
inline void CommonStateSignalWishSheetCurrentState_WishCurrentState::clear_a() {
  _impl_.a_.ClearToEmpty();
}
inline const std::string& CommonStateSignalWishSheetCurrentState_WishCurrentState::a() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonStateSignalWishSheetCurrentState.WishCurrentState.a)
  return _internal_a();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommonStateSignalWishSheetCurrentState_WishCurrentState::set_a(ArgT0&& arg0, ArgT... args) {
 
 _impl_.a_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommonStateSignalWishSheetCurrentState.WishCurrentState.a)
}
inline std::string* CommonStateSignalWishSheetCurrentState_WishCurrentState::mutable_a() {
  std::string* _s = _internal_mutable_a();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.CommonStateSignalWishSheetCurrentState.WishCurrentState.a)
  return _s;
}
inline const std::string& CommonStateSignalWishSheetCurrentState_WishCurrentState::_internal_a() const {
  return _impl_.a_.Get();
}
inline void CommonStateSignalWishSheetCurrentState_WishCurrentState::_internal_set_a(const std::string& value) {
  
  _impl_.a_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonStateSignalWishSheetCurrentState_WishCurrentState::_internal_mutable_a() {
  
  return _impl_.a_.Mutable(GetArenaForAllocation());
}
inline std::string* CommonStateSignalWishSheetCurrentState_WishCurrentState::release_a() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.CommonStateSignalWishSheetCurrentState.WishCurrentState.a)
  return _impl_.a_.Release();
}
inline void CommonStateSignalWishSheetCurrentState_WishCurrentState::set_allocated_a(std::string* a) {
  if (a != nullptr) {
    
  } else {
    
  }
  _impl_.a_.SetAllocated(a, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.a_.IsDefault()) {
    _impl_.a_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.CommonStateSignalWishSheetCurrentState.WishCurrentState.a)
}

// int64 b = 2;
inline void CommonStateSignalWishSheetCurrentState_WishCurrentState::clear_b() {
  _impl_.b_ = int64_t{0};
}
inline int64_t CommonStateSignalWishSheetCurrentState_WishCurrentState::_internal_b() const {
  return _impl_.b_;
}
inline int64_t CommonStateSignalWishSheetCurrentState_WishCurrentState::b() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonStateSignalWishSheetCurrentState.WishCurrentState.b)
  return _internal_b();
}
inline void CommonStateSignalWishSheetCurrentState_WishCurrentState::_internal_set_b(int64_t value) {
  
  _impl_.b_ = value;
}
inline void CommonStateSignalWishSheetCurrentState_WishCurrentState::set_b(int64_t value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommonStateSignalWishSheetCurrentState.WishCurrentState.b)
}

// int64 c = 3;
inline void CommonStateSignalWishSheetCurrentState_WishCurrentState::clear_c() {
  _impl_.c_ = int64_t{0};
}
inline int64_t CommonStateSignalWishSheetCurrentState_WishCurrentState::_internal_c() const {
  return _impl_.c_;
}
inline int64_t CommonStateSignalWishSheetCurrentState_WishCurrentState::c() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonStateSignalWishSheetCurrentState.WishCurrentState.c)
  return _internal_c();
}
inline void CommonStateSignalWishSheetCurrentState_WishCurrentState::_internal_set_c(int64_t value) {
  
  _impl_.c_ = value;
}
inline void CommonStateSignalWishSheetCurrentState_WishCurrentState::set_c(int64_t value) {
  _internal_set_c(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommonStateSignalWishSheetCurrentState.WishCurrentState.c)
}

// int64 d = 4;
inline void CommonStateSignalWishSheetCurrentState_WishCurrentState::clear_d() {
  _impl_.d_ = int64_t{0};
}
inline int64_t CommonStateSignalWishSheetCurrentState_WishCurrentState::_internal_d() const {
  return _impl_.d_;
}
inline int64_t CommonStateSignalWishSheetCurrentState_WishCurrentState::d() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonStateSignalWishSheetCurrentState.WishCurrentState.d)
  return _internal_d();
}
inline void CommonStateSignalWishSheetCurrentState_WishCurrentState::_internal_set_d(int64_t value) {
  
  _impl_.d_ = value;
}
inline void CommonStateSignalWishSheetCurrentState_WishCurrentState::set_d(int64_t value) {
  _internal_set_d(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommonStateSignalWishSheetCurrentState.WishCurrentState.d)
}

// string e = 5;
inline void CommonStateSignalWishSheetCurrentState_WishCurrentState::clear_e() {
  _impl_.e_.ClearToEmpty();
}
inline const std::string& CommonStateSignalWishSheetCurrentState_WishCurrentState::e() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonStateSignalWishSheetCurrentState.WishCurrentState.e)
  return _internal_e();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommonStateSignalWishSheetCurrentState_WishCurrentState::set_e(ArgT0&& arg0, ArgT... args) {
 
 _impl_.e_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommonStateSignalWishSheetCurrentState.WishCurrentState.e)
}
inline std::string* CommonStateSignalWishSheetCurrentState_WishCurrentState::mutable_e() {
  std::string* _s = _internal_mutable_e();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.CommonStateSignalWishSheetCurrentState.WishCurrentState.e)
  return _s;
}
inline const std::string& CommonStateSignalWishSheetCurrentState_WishCurrentState::_internal_e() const {
  return _impl_.e_.Get();
}
inline void CommonStateSignalWishSheetCurrentState_WishCurrentState::_internal_set_e(const std::string& value) {
  
  _impl_.e_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonStateSignalWishSheetCurrentState_WishCurrentState::_internal_mutable_e() {
  
  return _impl_.e_.Mutable(GetArenaForAllocation());
}
inline std::string* CommonStateSignalWishSheetCurrentState_WishCurrentState::release_e() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.CommonStateSignalWishSheetCurrentState.WishCurrentState.e)
  return _impl_.e_.Release();
}
inline void CommonStateSignalWishSheetCurrentState_WishCurrentState::set_allocated_e(std::string* e) {
  if (e != nullptr) {
    
  } else {
    
  }
  _impl_.e_.SetAllocated(e, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.e_.IsDefault()) {
    _impl_.e_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.CommonStateSignalWishSheetCurrentState.WishCurrentState.e)
}

// string f = 6;
inline void CommonStateSignalWishSheetCurrentState_WishCurrentState::clear_f() {
  _impl_.f_.ClearToEmpty();
}
inline const std::string& CommonStateSignalWishSheetCurrentState_WishCurrentState::f() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonStateSignalWishSheetCurrentState.WishCurrentState.f)
  return _internal_f();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommonStateSignalWishSheetCurrentState_WishCurrentState::set_f(ArgT0&& arg0, ArgT... args) {
 
 _impl_.f_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommonStateSignalWishSheetCurrentState.WishCurrentState.f)
}
inline std::string* CommonStateSignalWishSheetCurrentState_WishCurrentState::mutable_f() {
  std::string* _s = _internal_mutable_f();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.CommonStateSignalWishSheetCurrentState.WishCurrentState.f)
  return _s;
}
inline const std::string& CommonStateSignalWishSheetCurrentState_WishCurrentState::_internal_f() const {
  return _impl_.f_.Get();
}
inline void CommonStateSignalWishSheetCurrentState_WishCurrentState::_internal_set_f(const std::string& value) {
  
  _impl_.f_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonStateSignalWishSheetCurrentState_WishCurrentState::_internal_mutable_f() {
  
  return _impl_.f_.Mutable(GetArenaForAllocation());
}
inline std::string* CommonStateSignalWishSheetCurrentState_WishCurrentState::release_f() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.CommonStateSignalWishSheetCurrentState.WishCurrentState.f)
  return _impl_.f_.Release();
}
inline void CommonStateSignalWishSheetCurrentState_WishCurrentState::set_allocated_f(std::string* f) {
  if (f != nullptr) {
    
  } else {
    
  }
  _impl_.f_.SetAllocated(f, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.f_.IsDefault()) {
    _impl_.f_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.CommonStateSignalWishSheetCurrentState.WishCurrentState.f)
}

// -------------------------------------------------------------------

// CommonStateSignalWishSheetCurrentState

// string a = 1;
inline void CommonStateSignalWishSheetCurrentState::clear_a() {
  _impl_.a_.ClearToEmpty();
}
inline const std::string& CommonStateSignalWishSheetCurrentState::a() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonStateSignalWishSheetCurrentState.a)
  return _internal_a();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommonStateSignalWishSheetCurrentState::set_a(ArgT0&& arg0, ArgT... args) {
 
 _impl_.a_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommonStateSignalWishSheetCurrentState.a)
}
inline std::string* CommonStateSignalWishSheetCurrentState::mutable_a() {
  std::string* _s = _internal_mutable_a();
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.CommonStateSignalWishSheetCurrentState.a)
  return _s;
}
inline const std::string& CommonStateSignalWishSheetCurrentState::_internal_a() const {
  return _impl_.a_.Get();
}
inline void CommonStateSignalWishSheetCurrentState::_internal_set_a(const std::string& value) {
  
  _impl_.a_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonStateSignalWishSheetCurrentState::_internal_mutable_a() {
  
  return _impl_.a_.Mutable(GetArenaForAllocation());
}
inline std::string* CommonStateSignalWishSheetCurrentState::release_a() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.CommonStateSignalWishSheetCurrentState.a)
  return _impl_.a_.Release();
}
inline void CommonStateSignalWishSheetCurrentState::set_allocated_a(std::string* a) {
  if (a != nullptr) {
    
  } else {
    
  }
  _impl_.a_.SetAllocated(a, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.a_.IsDefault()) {
    _impl_.a_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.CommonStateSignalWishSheetCurrentState.a)
}

// repeated .AcFunDanmu.CommonStateSignalWishSheetCurrentState.WishCurrentState b = 2;
inline int CommonStateSignalWishSheetCurrentState::_internal_b_size() const {
  return _impl_.b_.size();
}
inline int CommonStateSignalWishSheetCurrentState::b_size() const {
  return _internal_b_size();
}
inline void CommonStateSignalWishSheetCurrentState::clear_b() {
  _impl_.b_.Clear();
}
inline ::AcFunDanmu::CommonStateSignalWishSheetCurrentState_WishCurrentState* CommonStateSignalWishSheetCurrentState::mutable_b(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.CommonStateSignalWishSheetCurrentState.b)
  return _impl_.b_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::CommonStateSignalWishSheetCurrentState_WishCurrentState >*
CommonStateSignalWishSheetCurrentState::mutable_b() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.CommonStateSignalWishSheetCurrentState.b)
  return &_impl_.b_;
}
inline const ::AcFunDanmu::CommonStateSignalWishSheetCurrentState_WishCurrentState& CommonStateSignalWishSheetCurrentState::_internal_b(int index) const {
  return _impl_.b_.Get(index);
}
inline const ::AcFunDanmu::CommonStateSignalWishSheetCurrentState_WishCurrentState& CommonStateSignalWishSheetCurrentState::b(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonStateSignalWishSheetCurrentState.b)
  return _internal_b(index);
}
inline ::AcFunDanmu::CommonStateSignalWishSheetCurrentState_WishCurrentState* CommonStateSignalWishSheetCurrentState::_internal_add_b() {
  return _impl_.b_.Add();
}
inline ::AcFunDanmu::CommonStateSignalWishSheetCurrentState_WishCurrentState* CommonStateSignalWishSheetCurrentState::add_b() {
  ::AcFunDanmu::CommonStateSignalWishSheetCurrentState_WishCurrentState* _add = _internal_add_b();
  // @@protoc_insertion_point(field_add:AcFunDanmu.CommonStateSignalWishSheetCurrentState.b)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::CommonStateSignalWishSheetCurrentState_WishCurrentState >&
CommonStateSignalWishSheetCurrentState::b() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.CommonStateSignalWishSheetCurrentState.b)
  return _impl_.b_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace AcFunDanmu

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_CommonStateSignalWishSheetCurrentState_2eproto
