// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ZtLiveScStatusChanged.proto

#include "ZtLiveScStatusChanged.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace AcFunDanmu {
constexpr ZtLiveScStatusChanged_BannedInfo::ZtLiveScStatusChanged_BannedInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : banreason_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ZtLiveScStatusChanged_BannedInfoDefaultTypeInternal {
  constexpr ZtLiveScStatusChanged_BannedInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ZtLiveScStatusChanged_BannedInfoDefaultTypeInternal() {}
  union {
    ZtLiveScStatusChanged_BannedInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ZtLiveScStatusChanged_BannedInfoDefaultTypeInternal _ZtLiveScStatusChanged_BannedInfo_default_instance_;
constexpr ZtLiveScStatusChanged::ZtLiveScStatusChanged(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bannedinfo_(nullptr)
  , maxrandomdelayms_(int64_t{0})
  , type_(0)
{}
struct ZtLiveScStatusChangedDefaultTypeInternal {
  constexpr ZtLiveScStatusChangedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ZtLiveScStatusChangedDefaultTypeInternal() {}
  union {
    ZtLiveScStatusChanged _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ZtLiveScStatusChangedDefaultTypeInternal _ZtLiveScStatusChanged_default_instance_;
}  // namespace AcFunDanmu
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ZtLiveScStatusChanged_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ZtLiveScStatusChanged_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ZtLiveScStatusChanged_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ZtLiveScStatusChanged_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::ZtLiveScStatusChanged_BannedInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::ZtLiveScStatusChanged_BannedInfo, banreason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::ZtLiveScStatusChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::ZtLiveScStatusChanged, type_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::ZtLiveScStatusChanged, maxrandomdelayms_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::ZtLiveScStatusChanged, bannedinfo_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::AcFunDanmu::ZtLiveScStatusChanged_BannedInfo)},
  { 6, -1, sizeof(::AcFunDanmu::ZtLiveScStatusChanged)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AcFunDanmu::_ZtLiveScStatusChanged_BannedInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AcFunDanmu::_ZtLiveScStatusChanged_default_instance_),
};

const char descriptor_table_protodef_ZtLiveScStatusChanged_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033ZtLiveScStatusChanged.proto\022\nAcFunDanm"
  "u\"\254\002\n\025ZtLiveScStatusChanged\0224\n\004type\030\001 \001("
  "\0162&.AcFunDanmu.ZtLiveScStatusChanged.Typ"
  "e\022\030\n\020maxRandomDelayMs\030\002 \001(\003\022@\n\nbannedInf"
  "o\030\003 \001(\0132,.AcFunDanmu.ZtLiveScStatusChang"
  "ed.BannedInfo\032\037\n\nBannedInfo\022\021\n\tbanReason"
  "\030\001 \001(\t\"`\n\004Type\022\013\n\007UNKNOWN\020\000\022\017\n\013LIVE_CLOS"
  "ED\020\001\022\023\n\017NEW_LIVE_OPENED\020\002\022\024\n\020LIVE_URL_CH"
  "ANGED\020\003\022\017\n\013LIVE_BANNED\020\004b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ZtLiveScStatusChanged_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ZtLiveScStatusChanged_2eproto = {
  false, false, 352, descriptor_table_protodef_ZtLiveScStatusChanged_2eproto, "ZtLiveScStatusChanged.proto", 
  &descriptor_table_ZtLiveScStatusChanged_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_ZtLiveScStatusChanged_2eproto::offsets,
  file_level_metadata_ZtLiveScStatusChanged_2eproto, file_level_enum_descriptors_ZtLiveScStatusChanged_2eproto, file_level_service_descriptors_ZtLiveScStatusChanged_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_ZtLiveScStatusChanged_2eproto_getter() {
  return &descriptor_table_ZtLiveScStatusChanged_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ZtLiveScStatusChanged_2eproto(&descriptor_table_ZtLiveScStatusChanged_2eproto);
namespace AcFunDanmu {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ZtLiveScStatusChanged_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ZtLiveScStatusChanged_2eproto);
  return file_level_enum_descriptors_ZtLiveScStatusChanged_2eproto[0];
}
bool ZtLiveScStatusChanged_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ZtLiveScStatusChanged_Type ZtLiveScStatusChanged::UNKNOWN;
constexpr ZtLiveScStatusChanged_Type ZtLiveScStatusChanged::LIVE_CLOSED;
constexpr ZtLiveScStatusChanged_Type ZtLiveScStatusChanged::NEW_LIVE_OPENED;
constexpr ZtLiveScStatusChanged_Type ZtLiveScStatusChanged::LIVE_URL_CHANGED;
constexpr ZtLiveScStatusChanged_Type ZtLiveScStatusChanged::LIVE_BANNED;
constexpr ZtLiveScStatusChanged_Type ZtLiveScStatusChanged::Type_MIN;
constexpr ZtLiveScStatusChanged_Type ZtLiveScStatusChanged::Type_MAX;
constexpr int ZtLiveScStatusChanged::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class ZtLiveScStatusChanged_BannedInfo::_Internal {
 public:
};

ZtLiveScStatusChanged_BannedInfo::ZtLiveScStatusChanged_BannedInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.ZtLiveScStatusChanged.BannedInfo)
}
ZtLiveScStatusChanged_BannedInfo::ZtLiveScStatusChanged_BannedInfo(const ZtLiveScStatusChanged_BannedInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  banreason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_banreason().empty()) {
    banreason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_banreason(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.ZtLiveScStatusChanged.BannedInfo)
}

void ZtLiveScStatusChanged_BannedInfo::SharedCtor() {
banreason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ZtLiveScStatusChanged_BannedInfo::~ZtLiveScStatusChanged_BannedInfo() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.ZtLiveScStatusChanged.BannedInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ZtLiveScStatusChanged_BannedInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  banreason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ZtLiveScStatusChanged_BannedInfo::ArenaDtor(void* object) {
  ZtLiveScStatusChanged_BannedInfo* _this = reinterpret_cast< ZtLiveScStatusChanged_BannedInfo* >(object);
  (void)_this;
}
void ZtLiveScStatusChanged_BannedInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ZtLiveScStatusChanged_BannedInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ZtLiveScStatusChanged_BannedInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.ZtLiveScStatusChanged.BannedInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  banreason_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ZtLiveScStatusChanged_BannedInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string banReason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_banreason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AcFunDanmu.ZtLiveScStatusChanged.BannedInfo.banReason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ZtLiveScStatusChanged_BannedInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.ZtLiveScStatusChanged.BannedInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string banReason = 1;
  if (!this->banreason().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_banreason().data(), static_cast<int>(this->_internal_banreason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.ZtLiveScStatusChanged.BannedInfo.banReason");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_banreason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.ZtLiveScStatusChanged.BannedInfo)
  return target;
}

size_t ZtLiveScStatusChanged_BannedInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.ZtLiveScStatusChanged.BannedInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string banReason = 1;
  if (!this->banreason().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_banreason());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ZtLiveScStatusChanged_BannedInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AcFunDanmu.ZtLiveScStatusChanged.BannedInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ZtLiveScStatusChanged_BannedInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ZtLiveScStatusChanged_BannedInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AcFunDanmu.ZtLiveScStatusChanged.BannedInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AcFunDanmu.ZtLiveScStatusChanged.BannedInfo)
    MergeFrom(*source);
  }
}

void ZtLiveScStatusChanged_BannedInfo::MergeFrom(const ZtLiveScStatusChanged_BannedInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.ZtLiveScStatusChanged.BannedInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.banreason().empty()) {
    _internal_set_banreason(from._internal_banreason());
  }
}

void ZtLiveScStatusChanged_BannedInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AcFunDanmu.ZtLiveScStatusChanged.BannedInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZtLiveScStatusChanged_BannedInfo::CopyFrom(const ZtLiveScStatusChanged_BannedInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.ZtLiveScStatusChanged.BannedInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZtLiveScStatusChanged_BannedInfo::IsInitialized() const {
  return true;
}

void ZtLiveScStatusChanged_BannedInfo::InternalSwap(ZtLiveScStatusChanged_BannedInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &banreason_, GetArenaForAllocation(),
      &other->banreason_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ZtLiveScStatusChanged_BannedInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ZtLiveScStatusChanged_2eproto_getter, &descriptor_table_ZtLiveScStatusChanged_2eproto_once,
      file_level_metadata_ZtLiveScStatusChanged_2eproto[0]);
}

// ===================================================================

class ZtLiveScStatusChanged::_Internal {
 public:
  static const ::AcFunDanmu::ZtLiveScStatusChanged_BannedInfo& bannedinfo(const ZtLiveScStatusChanged* msg);
};

const ::AcFunDanmu::ZtLiveScStatusChanged_BannedInfo&
ZtLiveScStatusChanged::_Internal::bannedinfo(const ZtLiveScStatusChanged* msg) {
  return *msg->bannedinfo_;
}
ZtLiveScStatusChanged::ZtLiveScStatusChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.ZtLiveScStatusChanged)
}
ZtLiveScStatusChanged::ZtLiveScStatusChanged(const ZtLiveScStatusChanged& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bannedinfo()) {
    bannedinfo_ = new ::AcFunDanmu::ZtLiveScStatusChanged_BannedInfo(*from.bannedinfo_);
  } else {
    bannedinfo_ = nullptr;
  }
  ::memcpy(&maxrandomdelayms_, &from.maxrandomdelayms_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&maxrandomdelayms_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.ZtLiveScStatusChanged)
}

void ZtLiveScStatusChanged::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bannedinfo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&bannedinfo_)) + sizeof(type_));
}

ZtLiveScStatusChanged::~ZtLiveScStatusChanged() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.ZtLiveScStatusChanged)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ZtLiveScStatusChanged::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete bannedinfo_;
}

void ZtLiveScStatusChanged::ArenaDtor(void* object) {
  ZtLiveScStatusChanged* _this = reinterpret_cast< ZtLiveScStatusChanged* >(object);
  (void)_this;
}
void ZtLiveScStatusChanged::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ZtLiveScStatusChanged::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ZtLiveScStatusChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.ZtLiveScStatusChanged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && bannedinfo_ != nullptr) {
    delete bannedinfo_;
  }
  bannedinfo_ = nullptr;
  ::memset(&maxrandomdelayms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&maxrandomdelayms_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ZtLiveScStatusChanged::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .AcFunDanmu.ZtLiveScStatusChanged.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::AcFunDanmu::ZtLiveScStatusChanged_Type>(val));
        } else goto handle_unusual;
        continue;
      // int64 maxRandomDelayMs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          maxrandomdelayms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AcFunDanmu.ZtLiveScStatusChanged.BannedInfo bannedInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_bannedinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ZtLiveScStatusChanged::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.ZtLiveScStatusChanged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AcFunDanmu.ZtLiveScStatusChanged.Type type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // int64 maxRandomDelayMs = 2;
  if (this->maxrandomdelayms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_maxrandomdelayms(), target);
  }

  // .AcFunDanmu.ZtLiveScStatusChanged.BannedInfo bannedInfo = 3;
  if (this->has_bannedinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::bannedinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.ZtLiveScStatusChanged)
  return target;
}

size_t ZtLiveScStatusChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.ZtLiveScStatusChanged)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .AcFunDanmu.ZtLiveScStatusChanged.BannedInfo bannedInfo = 3;
  if (this->has_bannedinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bannedinfo_);
  }

  // int64 maxRandomDelayMs = 2;
  if (this->maxrandomdelayms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_maxrandomdelayms());
  }

  // .AcFunDanmu.ZtLiveScStatusChanged.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ZtLiveScStatusChanged::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AcFunDanmu.ZtLiveScStatusChanged)
  GOOGLE_DCHECK_NE(&from, this);
  const ZtLiveScStatusChanged* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ZtLiveScStatusChanged>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AcFunDanmu.ZtLiveScStatusChanged)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AcFunDanmu.ZtLiveScStatusChanged)
    MergeFrom(*source);
  }
}

void ZtLiveScStatusChanged::MergeFrom(const ZtLiveScStatusChanged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.ZtLiveScStatusChanged)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_bannedinfo()) {
    _internal_mutable_bannedinfo()->::AcFunDanmu::ZtLiveScStatusChanged_BannedInfo::MergeFrom(from._internal_bannedinfo());
  }
  if (from.maxrandomdelayms() != 0) {
    _internal_set_maxrandomdelayms(from._internal_maxrandomdelayms());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void ZtLiveScStatusChanged::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AcFunDanmu.ZtLiveScStatusChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZtLiveScStatusChanged::CopyFrom(const ZtLiveScStatusChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.ZtLiveScStatusChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZtLiveScStatusChanged::IsInitialized() const {
  return true;
}

void ZtLiveScStatusChanged::InternalSwap(ZtLiveScStatusChanged* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ZtLiveScStatusChanged, type_)
      + sizeof(ZtLiveScStatusChanged::type_)
      - PROTOBUF_FIELD_OFFSET(ZtLiveScStatusChanged, bannedinfo_)>(
          reinterpret_cast<char*>(&bannedinfo_),
          reinterpret_cast<char*>(&other->bannedinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ZtLiveScStatusChanged::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ZtLiveScStatusChanged_2eproto_getter, &descriptor_table_ZtLiveScStatusChanged_2eproto_once,
      file_level_metadata_ZtLiveScStatusChanged_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AcFunDanmu::ZtLiveScStatusChanged_BannedInfo* Arena::CreateMaybeMessage< ::AcFunDanmu::ZtLiveScStatusChanged_BannedInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::ZtLiveScStatusChanged_BannedInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::AcFunDanmu::ZtLiveScStatusChanged* Arena::CreateMaybeMessage< ::AcFunDanmu::ZtLiveScStatusChanged >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::ZtLiveScStatusChanged >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
