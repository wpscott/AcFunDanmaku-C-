// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Register.proto

#include "Register.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace AcFunDanmu {
constexpr RegisterRequest::RegisterRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pushservicetokenlist_()
  , appcustomstatus_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , appinfo_(nullptr)
  , deviceinfo_(nullptr)
  , envinfo_(nullptr)
  , pushservicetoken_(nullptr)
  , ztcommoninfo_(nullptr)
  , presencestatus_(0)

  , appactivestatus_(0)

  , instanceid_(int64_t{0})
  , keepaliveintervalsec_(0)
  , ipv6available_(false){}
struct RegisterRequestDefaultTypeInternal {
  constexpr RegisterRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RegisterRequestDefaultTypeInternal() {}
  union {
    RegisterRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegisterRequestDefaultTypeInternal _RegisterRequest_default_instance_;
constexpr RegisterResponse::RegisterResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sesskey_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , accesspointsconfig_(nullptr)
  , sdkoption_(nullptr)
  , accesspointsconfigipv6_(nullptr)
  , accesspointsconfigquic_(nullptr)
  , accesspointsconfigquicipv6_(nullptr)
  , accesspointsconfigws_(nullptr)
  , instanceid_(int64_t{0})
  , cleanaccesspoint_(false)
  , flowcostsamplerate_(0)
  , commandsamplerate_(0){}
struct RegisterResponseDefaultTypeInternal {
  constexpr RegisterResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RegisterResponseDefaultTypeInternal() {}
  union {
    RegisterResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegisterResponseDefaultTypeInternal _RegisterResponse_default_instance_;
}  // namespace AcFunDanmu
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Register_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Register_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Register_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Register_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::RegisterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::RegisterRequest, appinfo_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::RegisterRequest, deviceinfo_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::RegisterRequest, envinfo_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::RegisterRequest, presencestatus_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::RegisterRequest, appactivestatus_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::RegisterRequest, appcustomstatus_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::RegisterRequest, pushservicetoken_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::RegisterRequest, instanceid_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::RegisterRequest, pushservicetokenlist_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::RegisterRequest, keepaliveintervalsec_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::RegisterRequest, ztcommoninfo_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::RegisterRequest, ipv6available_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::RegisterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::RegisterResponse, accesspointsconfig_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::RegisterResponse, sesskey_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::RegisterResponse, instanceid_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::RegisterResponse, sdkoption_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::RegisterResponse, accesspointsconfigipv6_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::RegisterResponse, accesspointsconfigquic_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::RegisterResponse, accesspointsconfigquicipv6_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::RegisterResponse, cleanaccesspoint_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::RegisterResponse, flowcostsamplerate_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::RegisterResponse, commandsamplerate_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::RegisterResponse, accesspointsconfigws_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::AcFunDanmu::RegisterRequest)},
  { 17, -1, sizeof(::AcFunDanmu::RegisterResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AcFunDanmu::_RegisterRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AcFunDanmu::_RegisterResponse_default_instance_),
};

const char descriptor_table_protodef_Register_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016Register.proto\022\nAcFunDanmu\032\rAppInfo.pr"
  "oto\032\020DeviceInfo.proto\032\rEnvInfo.proto\032\022Zt"
  "CommonInfo.proto\032\030AccessPointsConfig.pro"
  "to\032\026PushServiceToken.proto\032\017SdkOption.pr"
  "oto\"\235\005\n\017RegisterRequest\022$\n\007appInfo\030\001 \001(\013"
  "2\023.AcFunDanmu.AppInfo\022*\n\ndeviceInfo\030\002 \001("
  "\0132\026.AcFunDanmu.DeviceInfo\022$\n\007envInfo\030\003 \001"
  "(\0132\023.AcFunDanmu.EnvInfo\022B\n\016presenceStatu"
  "s\030\004 \001(\0162*.AcFunDanmu.RegisterRequest.Pre"
  "senceStatus\022A\n\017appActiveStatus\030\005 \001(\0162(.A"
  "cFunDanmu.RegisterRequest.ActiveStatus\022\027"
  "\n\017appCustomStatus\030\006 \001(\014\0226\n\020pushServiceTo"
  "ken\030\007 \001(\0132\034.AcFunDanmu.PushServiceToken\022"
  "\022\n\ninstanceId\030\010 \001(\003\022:\n\024pushServiceTokenL"
  "ist\030\t \003(\0132\034.AcFunDanmu.PushServiceToken\022"
  "\034\n\024keepaliveIntervalSec\030\n \001(\005\022.\n\014ztCommo"
  "nInfo\030\013 \001(\0132\030.AcFunDanmu.ZtCommonInfo\022\025\n"
  "\ripv6Available\030\014 \001(\010\";\n\016PresenceStatus\022\024"
  "\n\020kPresenceOffline\020\000\022\023\n\017kPresenceOnline\020"
  "\001\"H\n\014ActiveStatus\022\014\n\010kInvalid\020\000\022\024\n\020kAppI"
  "nForeground\020\001\022\024\n\020kAppInBackground\020\002\"\360\003\n\020"
  "RegisterResponse\022:\n\022accessPointsConfig\030\001"
  " \001(\0132\036.AcFunDanmu.AccessPointsConfig\022\017\n\007"
  "sessKey\030\002 \001(\014\022\022\n\ninstanceId\030\003 \001(\003\022(\n\tsdk"
  "Option\030\004 \001(\0132\025.AcFunDanmu.SdkOption\022>\n\026a"
  "ccessPointsConfigIpv6\030\005 \001(\0132\036.AcFunDanmu"
  ".AccessPointsConfig\022>\n\026accessPointsConfi"
  "gQUic\030\006 \001(\0132\036.AcFunDanmu.AccessPointsCon"
  "fig\022B\n\032accessPointsConfigQuicIpv6\030\007 \001(\0132"
  "\036.AcFunDanmu.AccessPointsConfig\022\030\n\020clean"
  "AccessPoint\030\010 \001(\010\022\032\n\022flowCostSampleRate\030"
  "\t \001(\002\022\031\n\021commandSampleRate\030\n \001(\002\022<\n\024acce"
  "ssPointsConfigWs\030\013 \001(\0132\036.AcFunDanmu.Acce"
  "ssPointsConfigb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Register_2eproto_deps[7] = {
  &::descriptor_table_AccessPointsConfig_2eproto,
  &::descriptor_table_AppInfo_2eproto,
  &::descriptor_table_DeviceInfo_2eproto,
  &::descriptor_table_EnvInfo_2eproto,
  &::descriptor_table_PushServiceToken_2eproto,
  &::descriptor_table_SdkOption_2eproto,
  &::descriptor_table_ZtCommonInfo_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Register_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Register_2eproto = {
  false, false, 1342, descriptor_table_protodef_Register_2eproto, "Register.proto", 
  &descriptor_table_Register_2eproto_once, descriptor_table_Register_2eproto_deps, 7, 2,
  schemas, file_default_instances, TableStruct_Register_2eproto::offsets,
  file_level_metadata_Register_2eproto, file_level_enum_descriptors_Register_2eproto, file_level_service_descriptors_Register_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_Register_2eproto_getter() {
  return &descriptor_table_Register_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Register_2eproto(&descriptor_table_Register_2eproto);
namespace AcFunDanmu {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RegisterRequest_PresenceStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Register_2eproto);
  return file_level_enum_descriptors_Register_2eproto[0];
}
bool RegisterRequest_PresenceStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RegisterRequest_PresenceStatus RegisterRequest::kPresenceOffline;
constexpr RegisterRequest_PresenceStatus RegisterRequest::kPresenceOnline;
constexpr RegisterRequest_PresenceStatus RegisterRequest::PresenceStatus_MIN;
constexpr RegisterRequest_PresenceStatus RegisterRequest::PresenceStatus_MAX;
constexpr int RegisterRequest::PresenceStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RegisterRequest_ActiveStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Register_2eproto);
  return file_level_enum_descriptors_Register_2eproto[1];
}
bool RegisterRequest_ActiveStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RegisterRequest_ActiveStatus RegisterRequest::kInvalid;
constexpr RegisterRequest_ActiveStatus RegisterRequest::kAppInForeground;
constexpr RegisterRequest_ActiveStatus RegisterRequest::kAppInBackground;
constexpr RegisterRequest_ActiveStatus RegisterRequest::ActiveStatus_MIN;
constexpr RegisterRequest_ActiveStatus RegisterRequest::ActiveStatus_MAX;
constexpr int RegisterRequest::ActiveStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class RegisterRequest::_Internal {
 public:
  static const ::AcFunDanmu::AppInfo& appinfo(const RegisterRequest* msg);
  static const ::AcFunDanmu::DeviceInfo& deviceinfo(const RegisterRequest* msg);
  static const ::AcFunDanmu::EnvInfo& envinfo(const RegisterRequest* msg);
  static const ::AcFunDanmu::PushServiceToken& pushservicetoken(const RegisterRequest* msg);
  static const ::AcFunDanmu::ZtCommonInfo& ztcommoninfo(const RegisterRequest* msg);
};

const ::AcFunDanmu::AppInfo&
RegisterRequest::_Internal::appinfo(const RegisterRequest* msg) {
  return *msg->appinfo_;
}
const ::AcFunDanmu::DeviceInfo&
RegisterRequest::_Internal::deviceinfo(const RegisterRequest* msg) {
  return *msg->deviceinfo_;
}
const ::AcFunDanmu::EnvInfo&
RegisterRequest::_Internal::envinfo(const RegisterRequest* msg) {
  return *msg->envinfo_;
}
const ::AcFunDanmu::PushServiceToken&
RegisterRequest::_Internal::pushservicetoken(const RegisterRequest* msg) {
  return *msg->pushservicetoken_;
}
const ::AcFunDanmu::ZtCommonInfo&
RegisterRequest::_Internal::ztcommoninfo(const RegisterRequest* msg) {
  return *msg->ztcommoninfo_;
}
void RegisterRequest::clear_appinfo() {
  if (GetArenaForAllocation() == nullptr && appinfo_ != nullptr) {
    delete appinfo_;
  }
  appinfo_ = nullptr;
}
void RegisterRequest::clear_deviceinfo() {
  if (GetArenaForAllocation() == nullptr && deviceinfo_ != nullptr) {
    delete deviceinfo_;
  }
  deviceinfo_ = nullptr;
}
void RegisterRequest::clear_envinfo() {
  if (GetArenaForAllocation() == nullptr && envinfo_ != nullptr) {
    delete envinfo_;
  }
  envinfo_ = nullptr;
}
void RegisterRequest::clear_pushservicetoken() {
  if (GetArenaForAllocation() == nullptr && pushservicetoken_ != nullptr) {
    delete pushservicetoken_;
  }
  pushservicetoken_ = nullptr;
}
void RegisterRequest::clear_pushservicetokenlist() {
  pushservicetokenlist_.Clear();
}
void RegisterRequest::clear_ztcommoninfo() {
  if (GetArenaForAllocation() == nullptr && ztcommoninfo_ != nullptr) {
    delete ztcommoninfo_;
  }
  ztcommoninfo_ = nullptr;
}
RegisterRequest::RegisterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pushservicetokenlist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.RegisterRequest)
}
RegisterRequest::RegisterRequest(const RegisterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pushservicetokenlist_(from.pushservicetokenlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  appcustomstatus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_appcustomstatus().empty()) {
    appcustomstatus_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_appcustomstatus(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_appinfo()) {
    appinfo_ = new ::AcFunDanmu::AppInfo(*from.appinfo_);
  } else {
    appinfo_ = nullptr;
  }
  if (from._internal_has_deviceinfo()) {
    deviceinfo_ = new ::AcFunDanmu::DeviceInfo(*from.deviceinfo_);
  } else {
    deviceinfo_ = nullptr;
  }
  if (from._internal_has_envinfo()) {
    envinfo_ = new ::AcFunDanmu::EnvInfo(*from.envinfo_);
  } else {
    envinfo_ = nullptr;
  }
  if (from._internal_has_pushservicetoken()) {
    pushservicetoken_ = new ::AcFunDanmu::PushServiceToken(*from.pushservicetoken_);
  } else {
    pushservicetoken_ = nullptr;
  }
  if (from._internal_has_ztcommoninfo()) {
    ztcommoninfo_ = new ::AcFunDanmu::ZtCommonInfo(*from.ztcommoninfo_);
  } else {
    ztcommoninfo_ = nullptr;
  }
  ::memcpy(&presencestatus_, &from.presencestatus_,
    static_cast<size_t>(reinterpret_cast<char*>(&ipv6available_) -
    reinterpret_cast<char*>(&presencestatus_)) + sizeof(ipv6available_));
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.RegisterRequest)
}

void RegisterRequest::SharedCtor() {
appcustomstatus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appinfo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ipv6available_) -
    reinterpret_cast<char*>(&appinfo_)) + sizeof(ipv6available_));
}

RegisterRequest::~RegisterRequest() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.RegisterRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RegisterRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  appcustomstatus_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete appinfo_;
  if (this != internal_default_instance()) delete deviceinfo_;
  if (this != internal_default_instance()) delete envinfo_;
  if (this != internal_default_instance()) delete pushservicetoken_;
  if (this != internal_default_instance()) delete ztcommoninfo_;
}

void RegisterRequest::ArenaDtor(void* object) {
  RegisterRequest* _this = reinterpret_cast< RegisterRequest* >(object);
  (void)_this;
}
void RegisterRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegisterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RegisterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.RegisterRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pushservicetokenlist_.Clear();
  appcustomstatus_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && appinfo_ != nullptr) {
    delete appinfo_;
  }
  appinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && deviceinfo_ != nullptr) {
    delete deviceinfo_;
  }
  deviceinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && envinfo_ != nullptr) {
    delete envinfo_;
  }
  envinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && pushservicetoken_ != nullptr) {
    delete pushservicetoken_;
  }
  pushservicetoken_ = nullptr;
  if (GetArenaForAllocation() == nullptr && ztcommoninfo_ != nullptr) {
    delete ztcommoninfo_;
  }
  ztcommoninfo_ = nullptr;
  ::memset(&presencestatus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ipv6available_) -
      reinterpret_cast<char*>(&presencestatus_)) + sizeof(ipv6available_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .AcFunDanmu.AppInfo appInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_appinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AcFunDanmu.DeviceInfo deviceInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_deviceinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AcFunDanmu.EnvInfo envInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_envinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AcFunDanmu.RegisterRequest.PresenceStatus presenceStatus = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_presencestatus(static_cast<::AcFunDanmu::RegisterRequest_PresenceStatus>(val));
        } else goto handle_unusual;
        continue;
      // .AcFunDanmu.RegisterRequest.ActiveStatus appActiveStatus = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_appactivestatus(static_cast<::AcFunDanmu::RegisterRequest_ActiveStatus>(val));
        } else goto handle_unusual;
        continue;
      // bytes appCustomStatus = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_appcustomstatus();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AcFunDanmu.PushServiceToken pushServiceToken = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_pushservicetoken(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 instanceId = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          instanceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .AcFunDanmu.PushServiceToken pushServiceTokenList = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pushservicetokenlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 keepaliveIntervalSec = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          keepaliveintervalsec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AcFunDanmu.ZtCommonInfo ztCommonInfo = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_ztcommoninfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ipv6Available = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ipv6available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.RegisterRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AcFunDanmu.AppInfo appInfo = 1;
  if (this->has_appinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::appinfo(this), target, stream);
  }

  // .AcFunDanmu.DeviceInfo deviceInfo = 2;
  if (this->has_deviceinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::deviceinfo(this), target, stream);
  }

  // .AcFunDanmu.EnvInfo envInfo = 3;
  if (this->has_envinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::envinfo(this), target, stream);
  }

  // .AcFunDanmu.RegisterRequest.PresenceStatus presenceStatus = 4;
  if (this->presencestatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_presencestatus(), target);
  }

  // .AcFunDanmu.RegisterRequest.ActiveStatus appActiveStatus = 5;
  if (this->appactivestatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_appactivestatus(), target);
  }

  // bytes appCustomStatus = 6;
  if (!this->appcustomstatus().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_appcustomstatus(), target);
  }

  // .AcFunDanmu.PushServiceToken pushServiceToken = 7;
  if (this->has_pushservicetoken()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::pushservicetoken(this), target, stream);
  }

  // int64 instanceId = 8;
  if (this->instanceid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_instanceid(), target);
  }

  // repeated .AcFunDanmu.PushServiceToken pushServiceTokenList = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pushservicetokenlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_pushservicetokenlist(i), target, stream);
  }

  // int32 keepaliveIntervalSec = 10;
  if (this->keepaliveintervalsec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_keepaliveintervalsec(), target);
  }

  // .AcFunDanmu.ZtCommonInfo ztCommonInfo = 11;
  if (this->has_ztcommoninfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::ztcommoninfo(this), target, stream);
  }

  // bool ipv6Available = 12;
  if (this->ipv6available() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_ipv6available(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.RegisterRequest)
  return target;
}

size_t RegisterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.RegisterRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .AcFunDanmu.PushServiceToken pushServiceTokenList = 9;
  total_size += 1UL * this->_internal_pushservicetokenlist_size();
  for (const auto& msg : this->pushservicetokenlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes appCustomStatus = 6;
  if (!this->appcustomstatus().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_appcustomstatus());
  }

  // .AcFunDanmu.AppInfo appInfo = 1;
  if (this->has_appinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *appinfo_);
  }

  // .AcFunDanmu.DeviceInfo deviceInfo = 2;
  if (this->has_deviceinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *deviceinfo_);
  }

  // .AcFunDanmu.EnvInfo envInfo = 3;
  if (this->has_envinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *envinfo_);
  }

  // .AcFunDanmu.PushServiceToken pushServiceToken = 7;
  if (this->has_pushservicetoken()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pushservicetoken_);
  }

  // .AcFunDanmu.ZtCommonInfo ztCommonInfo = 11;
  if (this->has_ztcommoninfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ztcommoninfo_);
  }

  // .AcFunDanmu.RegisterRequest.PresenceStatus presenceStatus = 4;
  if (this->presencestatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_presencestatus());
  }

  // .AcFunDanmu.RegisterRequest.ActiveStatus appActiveStatus = 5;
  if (this->appactivestatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_appactivestatus());
  }

  // int64 instanceId = 8;
  if (this->instanceid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_instanceid());
  }

  // int32 keepaliveIntervalSec = 10;
  if (this->keepaliveintervalsec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_keepaliveintervalsec());
  }

  // bool ipv6Available = 12;
  if (this->ipv6available() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AcFunDanmu.RegisterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisterRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AcFunDanmu.RegisterRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AcFunDanmu.RegisterRequest)
    MergeFrom(*source);
  }
}

void RegisterRequest::MergeFrom(const RegisterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.RegisterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pushservicetokenlist_.MergeFrom(from.pushservicetokenlist_);
  if (!from.appcustomstatus().empty()) {
    _internal_set_appcustomstatus(from._internal_appcustomstatus());
  }
  if (from.has_appinfo()) {
    _internal_mutable_appinfo()->::AcFunDanmu::AppInfo::MergeFrom(from._internal_appinfo());
  }
  if (from.has_deviceinfo()) {
    _internal_mutable_deviceinfo()->::AcFunDanmu::DeviceInfo::MergeFrom(from._internal_deviceinfo());
  }
  if (from.has_envinfo()) {
    _internal_mutable_envinfo()->::AcFunDanmu::EnvInfo::MergeFrom(from._internal_envinfo());
  }
  if (from.has_pushservicetoken()) {
    _internal_mutable_pushservicetoken()->::AcFunDanmu::PushServiceToken::MergeFrom(from._internal_pushservicetoken());
  }
  if (from.has_ztcommoninfo()) {
    _internal_mutable_ztcommoninfo()->::AcFunDanmu::ZtCommonInfo::MergeFrom(from._internal_ztcommoninfo());
  }
  if (from.presencestatus() != 0) {
    _internal_set_presencestatus(from._internal_presencestatus());
  }
  if (from.appactivestatus() != 0) {
    _internal_set_appactivestatus(from._internal_appactivestatus());
  }
  if (from.instanceid() != 0) {
    _internal_set_instanceid(from._internal_instanceid());
  }
  if (from.keepaliveintervalsec() != 0) {
    _internal_set_keepaliveintervalsec(from._internal_keepaliveintervalsec());
  }
  if (from.ipv6available() != 0) {
    _internal_set_ipv6available(from._internal_ipv6available());
  }
}

void RegisterRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AcFunDanmu.RegisterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterRequest::CopyFrom(const RegisterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.RegisterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterRequest::IsInitialized() const {
  return true;
}

void RegisterRequest::InternalSwap(RegisterRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  pushservicetokenlist_.InternalSwap(&other->pushservicetokenlist_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &appcustomstatus_, GetArenaForAllocation(),
      &other->appcustomstatus_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegisterRequest, ipv6available_)
      + sizeof(RegisterRequest::ipv6available_)
      - PROTOBUF_FIELD_OFFSET(RegisterRequest, appinfo_)>(
          reinterpret_cast<char*>(&appinfo_),
          reinterpret_cast<char*>(&other->appinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Register_2eproto_getter, &descriptor_table_Register_2eproto_once,
      file_level_metadata_Register_2eproto[0]);
}

// ===================================================================

class RegisterResponse::_Internal {
 public:
  static const ::AcFunDanmu::AccessPointsConfig& accesspointsconfig(const RegisterResponse* msg);
  static const ::AcFunDanmu::SdkOption& sdkoption(const RegisterResponse* msg);
  static const ::AcFunDanmu::AccessPointsConfig& accesspointsconfigipv6(const RegisterResponse* msg);
  static const ::AcFunDanmu::AccessPointsConfig& accesspointsconfigquic(const RegisterResponse* msg);
  static const ::AcFunDanmu::AccessPointsConfig& accesspointsconfigquicipv6(const RegisterResponse* msg);
  static const ::AcFunDanmu::AccessPointsConfig& accesspointsconfigws(const RegisterResponse* msg);
};

const ::AcFunDanmu::AccessPointsConfig&
RegisterResponse::_Internal::accesspointsconfig(const RegisterResponse* msg) {
  return *msg->accesspointsconfig_;
}
const ::AcFunDanmu::SdkOption&
RegisterResponse::_Internal::sdkoption(const RegisterResponse* msg) {
  return *msg->sdkoption_;
}
const ::AcFunDanmu::AccessPointsConfig&
RegisterResponse::_Internal::accesspointsconfigipv6(const RegisterResponse* msg) {
  return *msg->accesspointsconfigipv6_;
}
const ::AcFunDanmu::AccessPointsConfig&
RegisterResponse::_Internal::accesspointsconfigquic(const RegisterResponse* msg) {
  return *msg->accesspointsconfigquic_;
}
const ::AcFunDanmu::AccessPointsConfig&
RegisterResponse::_Internal::accesspointsconfigquicipv6(const RegisterResponse* msg) {
  return *msg->accesspointsconfigquicipv6_;
}
const ::AcFunDanmu::AccessPointsConfig&
RegisterResponse::_Internal::accesspointsconfigws(const RegisterResponse* msg) {
  return *msg->accesspointsconfigws_;
}
void RegisterResponse::clear_accesspointsconfig() {
  if (GetArenaForAllocation() == nullptr && accesspointsconfig_ != nullptr) {
    delete accesspointsconfig_;
  }
  accesspointsconfig_ = nullptr;
}
void RegisterResponse::clear_sdkoption() {
  if (GetArenaForAllocation() == nullptr && sdkoption_ != nullptr) {
    delete sdkoption_;
  }
  sdkoption_ = nullptr;
}
void RegisterResponse::clear_accesspointsconfigipv6() {
  if (GetArenaForAllocation() == nullptr && accesspointsconfigipv6_ != nullptr) {
    delete accesspointsconfigipv6_;
  }
  accesspointsconfigipv6_ = nullptr;
}
void RegisterResponse::clear_accesspointsconfigquic() {
  if (GetArenaForAllocation() == nullptr && accesspointsconfigquic_ != nullptr) {
    delete accesspointsconfigquic_;
  }
  accesspointsconfigquic_ = nullptr;
}
void RegisterResponse::clear_accesspointsconfigquicipv6() {
  if (GetArenaForAllocation() == nullptr && accesspointsconfigquicipv6_ != nullptr) {
    delete accesspointsconfigquicipv6_;
  }
  accesspointsconfigquicipv6_ = nullptr;
}
void RegisterResponse::clear_accesspointsconfigws() {
  if (GetArenaForAllocation() == nullptr && accesspointsconfigws_ != nullptr) {
    delete accesspointsconfigws_;
  }
  accesspointsconfigws_ = nullptr;
}
RegisterResponse::RegisterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.RegisterResponse)
}
RegisterResponse::RegisterResponse(const RegisterResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sesskey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sesskey().empty()) {
    sesskey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sesskey(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_accesspointsconfig()) {
    accesspointsconfig_ = new ::AcFunDanmu::AccessPointsConfig(*from.accesspointsconfig_);
  } else {
    accesspointsconfig_ = nullptr;
  }
  if (from._internal_has_sdkoption()) {
    sdkoption_ = new ::AcFunDanmu::SdkOption(*from.sdkoption_);
  } else {
    sdkoption_ = nullptr;
  }
  if (from._internal_has_accesspointsconfigipv6()) {
    accesspointsconfigipv6_ = new ::AcFunDanmu::AccessPointsConfig(*from.accesspointsconfigipv6_);
  } else {
    accesspointsconfigipv6_ = nullptr;
  }
  if (from._internal_has_accesspointsconfigquic()) {
    accesspointsconfigquic_ = new ::AcFunDanmu::AccessPointsConfig(*from.accesspointsconfigquic_);
  } else {
    accesspointsconfigquic_ = nullptr;
  }
  if (from._internal_has_accesspointsconfigquicipv6()) {
    accesspointsconfigquicipv6_ = new ::AcFunDanmu::AccessPointsConfig(*from.accesspointsconfigquicipv6_);
  } else {
    accesspointsconfigquicipv6_ = nullptr;
  }
  if (from._internal_has_accesspointsconfigws()) {
    accesspointsconfigws_ = new ::AcFunDanmu::AccessPointsConfig(*from.accesspointsconfigws_);
  } else {
    accesspointsconfigws_ = nullptr;
  }
  ::memcpy(&instanceid_, &from.instanceid_,
    static_cast<size_t>(reinterpret_cast<char*>(&commandsamplerate_) -
    reinterpret_cast<char*>(&instanceid_)) + sizeof(commandsamplerate_));
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.RegisterResponse)
}

void RegisterResponse::SharedCtor() {
sesskey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&accesspointsconfig_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&commandsamplerate_) -
    reinterpret_cast<char*>(&accesspointsconfig_)) + sizeof(commandsamplerate_));
}

RegisterResponse::~RegisterResponse() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.RegisterResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RegisterResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sesskey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete accesspointsconfig_;
  if (this != internal_default_instance()) delete sdkoption_;
  if (this != internal_default_instance()) delete accesspointsconfigipv6_;
  if (this != internal_default_instance()) delete accesspointsconfigquic_;
  if (this != internal_default_instance()) delete accesspointsconfigquicipv6_;
  if (this != internal_default_instance()) delete accesspointsconfigws_;
}

void RegisterResponse::ArenaDtor(void* object) {
  RegisterResponse* _this = reinterpret_cast< RegisterResponse* >(object);
  (void)_this;
}
void RegisterResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegisterResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RegisterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.RegisterResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sesskey_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && accesspointsconfig_ != nullptr) {
    delete accesspointsconfig_;
  }
  accesspointsconfig_ = nullptr;
  if (GetArenaForAllocation() == nullptr && sdkoption_ != nullptr) {
    delete sdkoption_;
  }
  sdkoption_ = nullptr;
  if (GetArenaForAllocation() == nullptr && accesspointsconfigipv6_ != nullptr) {
    delete accesspointsconfigipv6_;
  }
  accesspointsconfigipv6_ = nullptr;
  if (GetArenaForAllocation() == nullptr && accesspointsconfigquic_ != nullptr) {
    delete accesspointsconfigquic_;
  }
  accesspointsconfigquic_ = nullptr;
  if (GetArenaForAllocation() == nullptr && accesspointsconfigquicipv6_ != nullptr) {
    delete accesspointsconfigquicipv6_;
  }
  accesspointsconfigquicipv6_ = nullptr;
  if (GetArenaForAllocation() == nullptr && accesspointsconfigws_ != nullptr) {
    delete accesspointsconfigws_;
  }
  accesspointsconfigws_ = nullptr;
  ::memset(&instanceid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&commandsamplerate_) -
      reinterpret_cast<char*>(&instanceid_)) + sizeof(commandsamplerate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .AcFunDanmu.AccessPointsConfig accessPointsConfig = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_accesspointsconfig(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sessKey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sesskey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 instanceId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          instanceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AcFunDanmu.SdkOption sdkOption = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_sdkoption(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AcFunDanmu.AccessPointsConfig accessPointsConfigIpv6 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_accesspointsconfigipv6(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AcFunDanmu.AccessPointsConfig accessPointsConfigQUic = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_accesspointsconfigquic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AcFunDanmu.AccessPointsConfig accessPointsConfigQuicIpv6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_accesspointsconfigquicipv6(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool cleanAccessPoint = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          cleanaccesspoint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float flowCostSampleRate = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          flowcostsamplerate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float commandSampleRate = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          commandsamplerate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .AcFunDanmu.AccessPointsConfig accessPointsConfigWs = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_accesspointsconfigws(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.RegisterResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AcFunDanmu.AccessPointsConfig accessPointsConfig = 1;
  if (this->has_accesspointsconfig()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::accesspointsconfig(this), target, stream);
  }

  // bytes sessKey = 2;
  if (!this->sesskey().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_sesskey(), target);
  }

  // int64 instanceId = 3;
  if (this->instanceid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_instanceid(), target);
  }

  // .AcFunDanmu.SdkOption sdkOption = 4;
  if (this->has_sdkoption()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::sdkoption(this), target, stream);
  }

  // .AcFunDanmu.AccessPointsConfig accessPointsConfigIpv6 = 5;
  if (this->has_accesspointsconfigipv6()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::accesspointsconfigipv6(this), target, stream);
  }

  // .AcFunDanmu.AccessPointsConfig accessPointsConfigQUic = 6;
  if (this->has_accesspointsconfigquic()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::accesspointsconfigquic(this), target, stream);
  }

  // .AcFunDanmu.AccessPointsConfig accessPointsConfigQuicIpv6 = 7;
  if (this->has_accesspointsconfigquicipv6()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::accesspointsconfigquicipv6(this), target, stream);
  }

  // bool cleanAccessPoint = 8;
  if (this->cleanaccesspoint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_cleanaccesspoint(), target);
  }

  // float flowCostSampleRate = 9;
  if (!(this->flowcostsamplerate() <= 0 && this->flowcostsamplerate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_flowcostsamplerate(), target);
  }

  // float commandSampleRate = 10;
  if (!(this->commandsamplerate() <= 0 && this->commandsamplerate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_commandsamplerate(), target);
  }

  // .AcFunDanmu.AccessPointsConfig accessPointsConfigWs = 11;
  if (this->has_accesspointsconfigws()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::accesspointsconfigws(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.RegisterResponse)
  return target;
}

size_t RegisterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.RegisterResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sessKey = 2;
  if (!this->sesskey().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sesskey());
  }

  // .AcFunDanmu.AccessPointsConfig accessPointsConfig = 1;
  if (this->has_accesspointsconfig()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *accesspointsconfig_);
  }

  // .AcFunDanmu.SdkOption sdkOption = 4;
  if (this->has_sdkoption()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sdkoption_);
  }

  // .AcFunDanmu.AccessPointsConfig accessPointsConfigIpv6 = 5;
  if (this->has_accesspointsconfigipv6()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *accesspointsconfigipv6_);
  }

  // .AcFunDanmu.AccessPointsConfig accessPointsConfigQUic = 6;
  if (this->has_accesspointsconfigquic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *accesspointsconfigquic_);
  }

  // .AcFunDanmu.AccessPointsConfig accessPointsConfigQuicIpv6 = 7;
  if (this->has_accesspointsconfigquicipv6()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *accesspointsconfigquicipv6_);
  }

  // .AcFunDanmu.AccessPointsConfig accessPointsConfigWs = 11;
  if (this->has_accesspointsconfigws()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *accesspointsconfigws_);
  }

  // int64 instanceId = 3;
  if (this->instanceid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_instanceid());
  }

  // bool cleanAccessPoint = 8;
  if (this->cleanaccesspoint() != 0) {
    total_size += 1 + 1;
  }

  // float flowCostSampleRate = 9;
  if (!(this->flowcostsamplerate() <= 0 && this->flowcostsamplerate() >= 0)) {
    total_size += 1 + 4;
  }

  // float commandSampleRate = 10;
  if (!(this->commandsamplerate() <= 0 && this->commandsamplerate() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AcFunDanmu.RegisterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisterResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AcFunDanmu.RegisterResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AcFunDanmu.RegisterResponse)
    MergeFrom(*source);
  }
}

void RegisterResponse::MergeFrom(const RegisterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.RegisterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.sesskey().empty()) {
    _internal_set_sesskey(from._internal_sesskey());
  }
  if (from.has_accesspointsconfig()) {
    _internal_mutable_accesspointsconfig()->::AcFunDanmu::AccessPointsConfig::MergeFrom(from._internal_accesspointsconfig());
  }
  if (from.has_sdkoption()) {
    _internal_mutable_sdkoption()->::AcFunDanmu::SdkOption::MergeFrom(from._internal_sdkoption());
  }
  if (from.has_accesspointsconfigipv6()) {
    _internal_mutable_accesspointsconfigipv6()->::AcFunDanmu::AccessPointsConfig::MergeFrom(from._internal_accesspointsconfigipv6());
  }
  if (from.has_accesspointsconfigquic()) {
    _internal_mutable_accesspointsconfigquic()->::AcFunDanmu::AccessPointsConfig::MergeFrom(from._internal_accesspointsconfigquic());
  }
  if (from.has_accesspointsconfigquicipv6()) {
    _internal_mutable_accesspointsconfigquicipv6()->::AcFunDanmu::AccessPointsConfig::MergeFrom(from._internal_accesspointsconfigquicipv6());
  }
  if (from.has_accesspointsconfigws()) {
    _internal_mutable_accesspointsconfigws()->::AcFunDanmu::AccessPointsConfig::MergeFrom(from._internal_accesspointsconfigws());
  }
  if (from.instanceid() != 0) {
    _internal_set_instanceid(from._internal_instanceid());
  }
  if (from.cleanaccesspoint() != 0) {
    _internal_set_cleanaccesspoint(from._internal_cleanaccesspoint());
  }
  if (!(from.flowcostsamplerate() <= 0 && from.flowcostsamplerate() >= 0)) {
    _internal_set_flowcostsamplerate(from._internal_flowcostsamplerate());
  }
  if (!(from.commandsamplerate() <= 0 && from.commandsamplerate() >= 0)) {
    _internal_set_commandsamplerate(from._internal_commandsamplerate());
  }
}

void RegisterResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AcFunDanmu.RegisterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterResponse::CopyFrom(const RegisterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.RegisterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterResponse::IsInitialized() const {
  return true;
}

void RegisterResponse::InternalSwap(RegisterResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sesskey_, GetArenaForAllocation(),
      &other->sesskey_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegisterResponse, commandsamplerate_)
      + sizeof(RegisterResponse::commandsamplerate_)
      - PROTOBUF_FIELD_OFFSET(RegisterResponse, accesspointsconfig_)>(
          reinterpret_cast<char*>(&accesspointsconfig_),
          reinterpret_cast<char*>(&other->accesspointsconfig_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Register_2eproto_getter, &descriptor_table_Register_2eproto_once,
      file_level_metadata_Register_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AcFunDanmu::RegisterRequest* Arena::CreateMaybeMessage< ::AcFunDanmu::RegisterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::RegisterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::AcFunDanmu::RegisterResponse* Arena::CreateMaybeMessage< ::AcFunDanmu::RegisterResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::RegisterResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
