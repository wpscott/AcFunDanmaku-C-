// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KeepAlive.proto

#include "KeepAlive.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_AccessPointsConfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AccessPointsConfig_AccessPointsConfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PushServiceToken_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PushServiceToken_PushServiceToken_2eproto;
namespace AcFunDanmu {
class KeepAliveRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KeepAliveRequest> _instance;
} _KeepAliveRequest_default_instance_;
class KeepAliveResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KeepAliveResponse> _instance;
} _KeepAliveResponse_default_instance_;
}  // namespace AcFunDanmu
static void InitDefaultsscc_info_KeepAliveRequest_KeepAlive_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AcFunDanmu::_KeepAliveRequest_default_instance_;
    new (ptr) ::AcFunDanmu::KeepAliveRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AcFunDanmu::KeepAliveRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_KeepAliveRequest_KeepAlive_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_KeepAliveRequest_KeepAlive_2eproto}, {
      &scc_info_PushServiceToken_PushServiceToken_2eproto.base,}};

static void InitDefaultsscc_info_KeepAliveResponse_KeepAlive_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AcFunDanmu::_KeepAliveResponse_default_instance_;
    new (ptr) ::AcFunDanmu::KeepAliveResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AcFunDanmu::KeepAliveResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_KeepAliveResponse_KeepAlive_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_KeepAliveResponse_KeepAlive_2eproto}, {
      &scc_info_AccessPointsConfig_AccessPointsConfig_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_KeepAlive_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_KeepAlive_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_KeepAlive_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_KeepAlive_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::KeepAliveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::KeepAliveRequest, presencestatus_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::KeepAliveRequest, appactivestatus_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::KeepAliveRequest, pushservicetoken_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::KeepAliveRequest, pushservicetokenlist_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::KeepAliveRequest, keepaliveintervalsec_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::KeepAliveResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::KeepAliveResponse, accesspointsconfig_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::KeepAliveResponse, servermsec_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::KeepAliveResponse, accesspointsconfigipv6_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::AcFunDanmu::KeepAliveRequest)},
  { 10, -1, sizeof(::AcFunDanmu::KeepAliveResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AcFunDanmu::_KeepAliveRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AcFunDanmu::_KeepAliveResponse_default_instance_),
};

const char descriptor_table_protodef_KeepAlive_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017KeepAlive.proto\022\nAcFunDanmu\032\016Register."
  "proto\032\026PushServiceToken.proto\032\030AccessPoi"
  "ntsConfig.proto\"\253\002\n\020KeepAliveRequest\022B\n\016"
  "presenceStatus\030\001 \001(\0162*.AcFunDanmu.Regist"
  "erRequest.PresenceStatus\022A\n\017appActiveSta"
  "tus\030\002 \001(\0162(.AcFunDanmu.RegisterRequest.A"
  "ctiveStatus\0226\n\020pushServiceToken\030\003 \001(\0132\034."
  "AcFunDanmu.PushServiceToken\022:\n\024pushServi"
  "ceTokenList\030\004 \003(\0132\034.AcFunDanmu.PushServi"
  "ceToken\022\034\n\024keepaliveIntervalSec\030\005 \001(\005\"\243\001"
  "\n\021KeepAliveResponse\022:\n\022accessPointsConfi"
  "g\030\001 \001(\0132\036.AcFunDanmu.AccessPointsConfig\022"
  "\022\n\nserverMsec\030\002 \001(\003\022>\n\026accessPointsConfi"
  "gIpv6\030\003 \001(\0132\036.AcFunDanmu.AccessPointsCon"
  "figb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_KeepAlive_2eproto_deps[3] = {
  &::descriptor_table_AccessPointsConfig_2eproto,
  &::descriptor_table_PushServiceToken_2eproto,
  &::descriptor_table_Register_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_KeepAlive_2eproto_sccs[2] = {
  &scc_info_KeepAliveRequest_KeepAlive_2eproto.base,
  &scc_info_KeepAliveResponse_KeepAlive_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_KeepAlive_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_KeepAlive_2eproto = {
  false, false, descriptor_table_protodef_KeepAlive_2eproto, "KeepAlive.proto", 571,
  &descriptor_table_KeepAlive_2eproto_once, descriptor_table_KeepAlive_2eproto_sccs, descriptor_table_KeepAlive_2eproto_deps, 2, 3,
  schemas, file_default_instances, TableStruct_KeepAlive_2eproto::offsets,
  file_level_metadata_KeepAlive_2eproto, 2, file_level_enum_descriptors_KeepAlive_2eproto, file_level_service_descriptors_KeepAlive_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_KeepAlive_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_KeepAlive_2eproto)), true);
namespace AcFunDanmu {

// ===================================================================

void KeepAliveRequest::InitAsDefaultInstance() {
  ::AcFunDanmu::_KeepAliveRequest_default_instance_._instance.get_mutable()->pushservicetoken_ = const_cast< ::AcFunDanmu::PushServiceToken*>(
      ::AcFunDanmu::PushServiceToken::internal_default_instance());
}
class KeepAliveRequest::_Internal {
 public:
  static const ::AcFunDanmu::PushServiceToken& pushservicetoken(const KeepAliveRequest* msg);
};

const ::AcFunDanmu::PushServiceToken&
KeepAliveRequest::_Internal::pushservicetoken(const KeepAliveRequest* msg) {
  return *msg->pushservicetoken_;
}
void KeepAliveRequest::clear_pushservicetoken() {
  if (GetArena() == nullptr && pushservicetoken_ != nullptr) {
    delete pushservicetoken_;
  }
  pushservicetoken_ = nullptr;
}
void KeepAliveRequest::clear_pushservicetokenlist() {
  pushservicetokenlist_.Clear();
}
KeepAliveRequest::KeepAliveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pushservicetokenlist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.KeepAliveRequest)
}
KeepAliveRequest::KeepAliveRequest(const KeepAliveRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pushservicetokenlist_(from.pushservicetokenlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pushservicetoken()) {
    pushservicetoken_ = new ::AcFunDanmu::PushServiceToken(*from.pushservicetoken_);
  } else {
    pushservicetoken_ = nullptr;
  }
  ::memcpy(&presencestatus_, &from.presencestatus_,
    static_cast<size_t>(reinterpret_cast<char*>(&keepaliveintervalsec_) -
    reinterpret_cast<char*>(&presencestatus_)) + sizeof(keepaliveintervalsec_));
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.KeepAliveRequest)
}

void KeepAliveRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KeepAliveRequest_KeepAlive_2eproto.base);
  ::memset(&pushservicetoken_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&keepaliveintervalsec_) -
      reinterpret_cast<char*>(&pushservicetoken_)) + sizeof(keepaliveintervalsec_));
}

KeepAliveRequest::~KeepAliveRequest() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.KeepAliveRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KeepAliveRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pushservicetoken_;
}

void KeepAliveRequest::ArenaDtor(void* object) {
  KeepAliveRequest* _this = reinterpret_cast< KeepAliveRequest* >(object);
  (void)_this;
}
void KeepAliveRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KeepAliveRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeepAliveRequest& KeepAliveRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KeepAliveRequest_KeepAlive_2eproto.base);
  return *internal_default_instance();
}


void KeepAliveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.KeepAliveRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pushservicetokenlist_.Clear();
  if (GetArena() == nullptr && pushservicetoken_ != nullptr) {
    delete pushservicetoken_;
  }
  pushservicetoken_ = nullptr;
  ::memset(&presencestatus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&keepaliveintervalsec_) -
      reinterpret_cast<char*>(&presencestatus_)) + sizeof(keepaliveintervalsec_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeepAliveRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .AcFunDanmu.RegisterRequest.PresenceStatus presenceStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_presencestatus(static_cast<::AcFunDanmu::RegisterRequest_PresenceStatus>(val));
        } else goto handle_unusual;
        continue;
      // .AcFunDanmu.RegisterRequest.ActiveStatus appActiveStatus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_appactivestatus(static_cast<::AcFunDanmu::RegisterRequest_ActiveStatus>(val));
        } else goto handle_unusual;
        continue;
      // .AcFunDanmu.PushServiceToken pushServiceToken = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pushservicetoken(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .AcFunDanmu.PushServiceToken pushServiceTokenList = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pushservicetokenlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 keepaliveIntervalSec = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          keepaliveintervalsec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeepAliveRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.KeepAliveRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AcFunDanmu.RegisterRequest.PresenceStatus presenceStatus = 1;
  if (this->presencestatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_presencestatus(), target);
  }

  // .AcFunDanmu.RegisterRequest.ActiveStatus appActiveStatus = 2;
  if (this->appactivestatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_appactivestatus(), target);
  }

  // .AcFunDanmu.PushServiceToken pushServiceToken = 3;
  if (this->has_pushservicetoken()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pushservicetoken(this), target, stream);
  }

  // repeated .AcFunDanmu.PushServiceToken pushServiceTokenList = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pushservicetokenlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_pushservicetokenlist(i), target, stream);
  }

  // int32 keepaliveIntervalSec = 5;
  if (this->keepaliveintervalsec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_keepaliveintervalsec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.KeepAliveRequest)
  return target;
}

size_t KeepAliveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.KeepAliveRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .AcFunDanmu.PushServiceToken pushServiceTokenList = 4;
  total_size += 1UL * this->_internal_pushservicetokenlist_size();
  for (const auto& msg : this->pushservicetokenlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .AcFunDanmu.PushServiceToken pushServiceToken = 3;
  if (this->has_pushservicetoken()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pushservicetoken_);
  }

  // .AcFunDanmu.RegisterRequest.PresenceStatus presenceStatus = 1;
  if (this->presencestatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_presencestatus());
  }

  // .AcFunDanmu.RegisterRequest.ActiveStatus appActiveStatus = 2;
  if (this->appactivestatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_appactivestatus());
  }

  // int32 keepaliveIntervalSec = 5;
  if (this->keepaliveintervalsec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_keepaliveintervalsec());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeepAliveRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AcFunDanmu.KeepAliveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const KeepAliveRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeepAliveRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AcFunDanmu.KeepAliveRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AcFunDanmu.KeepAliveRequest)
    MergeFrom(*source);
  }
}

void KeepAliveRequest::MergeFrom(const KeepAliveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.KeepAliveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pushservicetokenlist_.MergeFrom(from.pushservicetokenlist_);
  if (from.has_pushservicetoken()) {
    _internal_mutable_pushservicetoken()->::AcFunDanmu::PushServiceToken::MergeFrom(from._internal_pushservicetoken());
  }
  if (from.presencestatus() != 0) {
    _internal_set_presencestatus(from._internal_presencestatus());
  }
  if (from.appactivestatus() != 0) {
    _internal_set_appactivestatus(from._internal_appactivestatus());
  }
  if (from.keepaliveintervalsec() != 0) {
    _internal_set_keepaliveintervalsec(from._internal_keepaliveintervalsec());
  }
}

void KeepAliveRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AcFunDanmu.KeepAliveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeepAliveRequest::CopyFrom(const KeepAliveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.KeepAliveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeepAliveRequest::IsInitialized() const {
  return true;
}

void KeepAliveRequest::InternalSwap(KeepAliveRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pushservicetokenlist_.InternalSwap(&other->pushservicetokenlist_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KeepAliveRequest, keepaliveintervalsec_)
      + sizeof(KeepAliveRequest::keepaliveintervalsec_)
      - PROTOBUF_FIELD_OFFSET(KeepAliveRequest, pushservicetoken_)>(
          reinterpret_cast<char*>(&pushservicetoken_),
          reinterpret_cast<char*>(&other->pushservicetoken_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KeepAliveRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KeepAliveResponse::InitAsDefaultInstance() {
  ::AcFunDanmu::_KeepAliveResponse_default_instance_._instance.get_mutable()->accesspointsconfig_ = const_cast< ::AcFunDanmu::AccessPointsConfig*>(
      ::AcFunDanmu::AccessPointsConfig::internal_default_instance());
  ::AcFunDanmu::_KeepAliveResponse_default_instance_._instance.get_mutable()->accesspointsconfigipv6_ = const_cast< ::AcFunDanmu::AccessPointsConfig*>(
      ::AcFunDanmu::AccessPointsConfig::internal_default_instance());
}
class KeepAliveResponse::_Internal {
 public:
  static const ::AcFunDanmu::AccessPointsConfig& accesspointsconfig(const KeepAliveResponse* msg);
  static const ::AcFunDanmu::AccessPointsConfig& accesspointsconfigipv6(const KeepAliveResponse* msg);
};

const ::AcFunDanmu::AccessPointsConfig&
KeepAliveResponse::_Internal::accesspointsconfig(const KeepAliveResponse* msg) {
  return *msg->accesspointsconfig_;
}
const ::AcFunDanmu::AccessPointsConfig&
KeepAliveResponse::_Internal::accesspointsconfigipv6(const KeepAliveResponse* msg) {
  return *msg->accesspointsconfigipv6_;
}
void KeepAliveResponse::clear_accesspointsconfig() {
  if (GetArena() == nullptr && accesspointsconfig_ != nullptr) {
    delete accesspointsconfig_;
  }
  accesspointsconfig_ = nullptr;
}
void KeepAliveResponse::clear_accesspointsconfigipv6() {
  if (GetArena() == nullptr && accesspointsconfigipv6_ != nullptr) {
    delete accesspointsconfigipv6_;
  }
  accesspointsconfigipv6_ = nullptr;
}
KeepAliveResponse::KeepAliveResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.KeepAliveResponse)
}
KeepAliveResponse::KeepAliveResponse(const KeepAliveResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_accesspointsconfig()) {
    accesspointsconfig_ = new ::AcFunDanmu::AccessPointsConfig(*from.accesspointsconfig_);
  } else {
    accesspointsconfig_ = nullptr;
  }
  if (from._internal_has_accesspointsconfigipv6()) {
    accesspointsconfigipv6_ = new ::AcFunDanmu::AccessPointsConfig(*from.accesspointsconfigipv6_);
  } else {
    accesspointsconfigipv6_ = nullptr;
  }
  servermsec_ = from.servermsec_;
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.KeepAliveResponse)
}

void KeepAliveResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KeepAliveResponse_KeepAlive_2eproto.base);
  ::memset(&accesspointsconfig_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&servermsec_) -
      reinterpret_cast<char*>(&accesspointsconfig_)) + sizeof(servermsec_));
}

KeepAliveResponse::~KeepAliveResponse() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.KeepAliveResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KeepAliveResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete accesspointsconfig_;
  if (this != internal_default_instance()) delete accesspointsconfigipv6_;
}

void KeepAliveResponse::ArenaDtor(void* object) {
  KeepAliveResponse* _this = reinterpret_cast< KeepAliveResponse* >(object);
  (void)_this;
}
void KeepAliveResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KeepAliveResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeepAliveResponse& KeepAliveResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KeepAliveResponse_KeepAlive_2eproto.base);
  return *internal_default_instance();
}


void KeepAliveResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.KeepAliveResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && accesspointsconfig_ != nullptr) {
    delete accesspointsconfig_;
  }
  accesspointsconfig_ = nullptr;
  if (GetArena() == nullptr && accesspointsconfigipv6_ != nullptr) {
    delete accesspointsconfigipv6_;
  }
  accesspointsconfigipv6_ = nullptr;
  servermsec_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeepAliveResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .AcFunDanmu.AccessPointsConfig accessPointsConfig = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_accesspointsconfig(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 serverMsec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          servermsec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AcFunDanmu.AccessPointsConfig accessPointsConfigIpv6 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_accesspointsconfigipv6(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeepAliveResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.KeepAliveResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AcFunDanmu.AccessPointsConfig accessPointsConfig = 1;
  if (this->has_accesspointsconfig()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::accesspointsconfig(this), target, stream);
  }

  // int64 serverMsec = 2;
  if (this->servermsec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_servermsec(), target);
  }

  // .AcFunDanmu.AccessPointsConfig accessPointsConfigIpv6 = 3;
  if (this->has_accesspointsconfigipv6()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::accesspointsconfigipv6(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.KeepAliveResponse)
  return target;
}

size_t KeepAliveResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.KeepAliveResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .AcFunDanmu.AccessPointsConfig accessPointsConfig = 1;
  if (this->has_accesspointsconfig()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *accesspointsconfig_);
  }

  // .AcFunDanmu.AccessPointsConfig accessPointsConfigIpv6 = 3;
  if (this->has_accesspointsconfigipv6()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *accesspointsconfigipv6_);
  }

  // int64 serverMsec = 2;
  if (this->servermsec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_servermsec());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeepAliveResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AcFunDanmu.KeepAliveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const KeepAliveResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeepAliveResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AcFunDanmu.KeepAliveResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AcFunDanmu.KeepAliveResponse)
    MergeFrom(*source);
  }
}

void KeepAliveResponse::MergeFrom(const KeepAliveResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.KeepAliveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_accesspointsconfig()) {
    _internal_mutable_accesspointsconfig()->::AcFunDanmu::AccessPointsConfig::MergeFrom(from._internal_accesspointsconfig());
  }
  if (from.has_accesspointsconfigipv6()) {
    _internal_mutable_accesspointsconfigipv6()->::AcFunDanmu::AccessPointsConfig::MergeFrom(from._internal_accesspointsconfigipv6());
  }
  if (from.servermsec() != 0) {
    _internal_set_servermsec(from._internal_servermsec());
  }
}

void KeepAliveResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AcFunDanmu.KeepAliveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeepAliveResponse::CopyFrom(const KeepAliveResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.KeepAliveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeepAliveResponse::IsInitialized() const {
  return true;
}

void KeepAliveResponse::InternalSwap(KeepAliveResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KeepAliveResponse, servermsec_)
      + sizeof(KeepAliveResponse::servermsec_)
      - PROTOBUF_FIELD_OFFSET(KeepAliveResponse, accesspointsconfig_)>(
          reinterpret_cast<char*>(&accesspointsconfig_),
          reinterpret_cast<char*>(&other->accesspointsconfig_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KeepAliveResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AcFunDanmu::KeepAliveRequest* Arena::CreateMaybeMessage< ::AcFunDanmu::KeepAliveRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::KeepAliveRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::AcFunDanmu::KeepAliveResponse* Arena::CreateMaybeMessage< ::AcFunDanmu::KeepAliveResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::KeepAliveResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
