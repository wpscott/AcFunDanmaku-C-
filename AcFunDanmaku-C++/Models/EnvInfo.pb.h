// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EnvInfo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_EnvInfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_EnvInfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_EnvInfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_EnvInfo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_EnvInfo_2eproto;
namespace AcFunDanmu {
class EnvInfo;
class EnvInfoDefaultTypeInternal;
extern EnvInfoDefaultTypeInternal _EnvInfo_default_instance_;
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::EnvInfo* Arena::CreateMaybeMessage<::AcFunDanmu::EnvInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {

enum EnvInfo_NetworkType : int {
  EnvInfo_NetworkType_kInvalid = 0,
  EnvInfo_NetworkType_kWIFI = 1,
  EnvInfo_NetworkType_kCellular = 2,
  EnvInfo_NetworkType_EnvInfo_NetworkType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EnvInfo_NetworkType_EnvInfo_NetworkType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EnvInfo_NetworkType_IsValid(int value);
constexpr EnvInfo_NetworkType EnvInfo_NetworkType_NetworkType_MIN = EnvInfo_NetworkType_kInvalid;
constexpr EnvInfo_NetworkType EnvInfo_NetworkType_NetworkType_MAX = EnvInfo_NetworkType_kCellular;
constexpr int EnvInfo_NetworkType_NetworkType_ARRAYSIZE = EnvInfo_NetworkType_NetworkType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EnvInfo_NetworkType_descriptor();
template<typename T>
inline const std::string& EnvInfo_NetworkType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EnvInfo_NetworkType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EnvInfo_NetworkType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EnvInfo_NetworkType_descriptor(), enum_t_value);
}
inline bool EnvInfo_NetworkType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EnvInfo_NetworkType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EnvInfo_NetworkType>(
    EnvInfo_NetworkType_descriptor(), name, value);
}
// ===================================================================

class EnvInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.EnvInfo) */ {
 public:
  inline EnvInfo() : EnvInfo(nullptr) {}
  virtual ~EnvInfo();

  EnvInfo(const EnvInfo& from);
  EnvInfo(EnvInfo&& from) noexcept
    : EnvInfo() {
    *this = ::std::move(from);
  }

  inline EnvInfo& operator=(const EnvInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnvInfo& operator=(EnvInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnvInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnvInfo* internal_default_instance() {
    return reinterpret_cast<const EnvInfo*>(
               &_EnvInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EnvInfo& a, EnvInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(EnvInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnvInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnvInfo* New() const final {
    return CreateMaybeMessage<EnvInfo>(nullptr);
  }

  EnvInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnvInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnvInfo& from);
  void MergeFrom(const EnvInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnvInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.EnvInfo";
  }
  protected:
  explicit EnvInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_EnvInfo_2eproto);
    return ::descriptor_table_EnvInfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef EnvInfo_NetworkType NetworkType;
  static constexpr NetworkType kInvalid =
    EnvInfo_NetworkType_kInvalid;
  static constexpr NetworkType kWIFI =
    EnvInfo_NetworkType_kWIFI;
  static constexpr NetworkType kCellular =
    EnvInfo_NetworkType_kCellular;
  static inline bool NetworkType_IsValid(int value) {
    return EnvInfo_NetworkType_IsValid(value);
  }
  static constexpr NetworkType NetworkType_MIN =
    EnvInfo_NetworkType_NetworkType_MIN;
  static constexpr NetworkType NetworkType_MAX =
    EnvInfo_NetworkType_NetworkType_MAX;
  static constexpr int NetworkType_ARRAYSIZE =
    EnvInfo_NetworkType_NetworkType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  NetworkType_descriptor() {
    return EnvInfo_NetworkType_descriptor();
  }
  template<typename T>
  static inline const std::string& NetworkType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, NetworkType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function NetworkType_Name.");
    return EnvInfo_NetworkType_Name(enum_t_value);
  }
  static inline bool NetworkType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      NetworkType* value) {
    return EnvInfo_NetworkType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAppNameFieldNumber = 2,
    kNetworkTypeFieldNumber = 1,
  };
  // bytes appName = 2;
  void clear_appname();
  const std::string& appname() const;
  void set_appname(const std::string& value);
  void set_appname(std::string&& value);
  void set_appname(const char* value);
  void set_appname(const void* value, size_t size);
  std::string* mutable_appname();
  std::string* release_appname();
  void set_allocated_appname(std::string* appname);
  private:
  const std::string& _internal_appname() const;
  void _internal_set_appname(const std::string& value);
  std::string* _internal_mutable_appname();
  public:

  // .AcFunDanmu.EnvInfo.NetworkType networkType = 1;
  void clear_networktype();
  ::AcFunDanmu::EnvInfo_NetworkType networktype() const;
  void set_networktype(::AcFunDanmu::EnvInfo_NetworkType value);
  private:
  ::AcFunDanmu::EnvInfo_NetworkType _internal_networktype() const;
  void _internal_set_networktype(::AcFunDanmu::EnvInfo_NetworkType value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.EnvInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appname_;
  int networktype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_EnvInfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EnvInfo

// .AcFunDanmu.EnvInfo.NetworkType networkType = 1;
inline void EnvInfo::clear_networktype() {
  networktype_ = 0;
}
inline ::AcFunDanmu::EnvInfo_NetworkType EnvInfo::_internal_networktype() const {
  return static_cast< ::AcFunDanmu::EnvInfo_NetworkType >(networktype_);
}
inline ::AcFunDanmu::EnvInfo_NetworkType EnvInfo::networktype() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.EnvInfo.networkType)
  return _internal_networktype();
}
inline void EnvInfo::_internal_set_networktype(::AcFunDanmu::EnvInfo_NetworkType value) {
  
  networktype_ = value;
}
inline void EnvInfo::set_networktype(::AcFunDanmu::EnvInfo_NetworkType value) {
  _internal_set_networktype(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.EnvInfo.networkType)
}

// bytes appName = 2;
inline void EnvInfo::clear_appname() {
  appname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EnvInfo::appname() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.EnvInfo.appName)
  return _internal_appname();
}
inline void EnvInfo::set_appname(const std::string& value) {
  _internal_set_appname(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.EnvInfo.appName)
}
inline std::string* EnvInfo::mutable_appname() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.EnvInfo.appName)
  return _internal_mutable_appname();
}
inline const std::string& EnvInfo::_internal_appname() const {
  return appname_.Get();
}
inline void EnvInfo::_internal_set_appname(const std::string& value) {
  
  appname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EnvInfo::set_appname(std::string&& value) {
  
  appname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.EnvInfo.appName)
}
inline void EnvInfo::set_appname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  appname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.EnvInfo.appName)
}
inline void EnvInfo::set_appname(const void* value,
    size_t size) {
  
  appname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.EnvInfo.appName)
}
inline std::string* EnvInfo::_internal_mutable_appname() {
  
  return appname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EnvInfo::release_appname() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.EnvInfo.appName)
  return appname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EnvInfo::set_allocated_appname(std::string* appname) {
  if (appname != nullptr) {
    
  } else {
    
  }
  appname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), appname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.EnvInfo.appName)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace AcFunDanmu

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::AcFunDanmu::EnvInfo_NetworkType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::EnvInfo_NetworkType>() {
  return ::AcFunDanmu::EnvInfo_NetworkType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_EnvInfo_2eproto
