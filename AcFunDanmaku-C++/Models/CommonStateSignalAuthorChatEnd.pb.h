// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommonStateSignalAuthorChatEnd.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_CommonStateSignalAuthorChatEnd_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_CommonStateSignalAuthorChatEnd_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_CommonStateSignalAuthorChatEnd_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_CommonStateSignalAuthorChatEnd_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_CommonStateSignalAuthorChatEnd_2eproto;
namespace AcFunDanmu {
class CommonStateSignalAuthorChatEnd;
class CommonStateSignalAuthorChatEndDefaultTypeInternal;
extern CommonStateSignalAuthorChatEndDefaultTypeInternal _CommonStateSignalAuthorChatEnd_default_instance_;
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::CommonStateSignalAuthorChatEnd* Arena::CreateMaybeMessage<::AcFunDanmu::CommonStateSignalAuthorChatEnd>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {

enum CommonStateSignalAuthorChatEnd_Unknown : int {
  CommonStateSignalAuthorChatEnd_Unknown_d = 0,
  CommonStateSignalAuthorChatEnd_Unknown_e = 1,
  CommonStateSignalAuthorChatEnd_Unknown_f = 2,
  CommonStateSignalAuthorChatEnd_Unknown_g = 3,
  CommonStateSignalAuthorChatEnd_Unknown_h = 4,
  CommonStateSignalAuthorChatEnd_Unknown_i = 5,
  CommonStateSignalAuthorChatEnd_Unknown_j = 6,
  CommonStateSignalAuthorChatEnd_Unknown_k = 7,
  CommonStateSignalAuthorChatEnd_Unknown_l = 8,
  CommonStateSignalAuthorChatEnd_Unknown_CommonStateSignalAuthorChatEnd_Unknown_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CommonStateSignalAuthorChatEnd_Unknown_CommonStateSignalAuthorChatEnd_Unknown_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CommonStateSignalAuthorChatEnd_Unknown_IsValid(int value);
constexpr CommonStateSignalAuthorChatEnd_Unknown CommonStateSignalAuthorChatEnd_Unknown_Unknown_MIN = CommonStateSignalAuthorChatEnd_Unknown_d;
constexpr CommonStateSignalAuthorChatEnd_Unknown CommonStateSignalAuthorChatEnd_Unknown_Unknown_MAX = CommonStateSignalAuthorChatEnd_Unknown_l;
constexpr int CommonStateSignalAuthorChatEnd_Unknown_Unknown_ARRAYSIZE = CommonStateSignalAuthorChatEnd_Unknown_Unknown_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommonStateSignalAuthorChatEnd_Unknown_descriptor();
template<typename T>
inline const std::string& CommonStateSignalAuthorChatEnd_Unknown_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CommonStateSignalAuthorChatEnd_Unknown>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CommonStateSignalAuthorChatEnd_Unknown_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CommonStateSignalAuthorChatEnd_Unknown_descriptor(), enum_t_value);
}
inline bool CommonStateSignalAuthorChatEnd_Unknown_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CommonStateSignalAuthorChatEnd_Unknown* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CommonStateSignalAuthorChatEnd_Unknown>(
    CommonStateSignalAuthorChatEnd_Unknown_descriptor(), name, value);
}
// ===================================================================

class CommonStateSignalAuthorChatEnd PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.CommonStateSignalAuthorChatEnd) */ {
 public:
  inline CommonStateSignalAuthorChatEnd() : CommonStateSignalAuthorChatEnd(nullptr) {}
  virtual ~CommonStateSignalAuthorChatEnd();

  CommonStateSignalAuthorChatEnd(const CommonStateSignalAuthorChatEnd& from);
  CommonStateSignalAuthorChatEnd(CommonStateSignalAuthorChatEnd&& from) noexcept
    : CommonStateSignalAuthorChatEnd() {
    *this = ::std::move(from);
  }

  inline CommonStateSignalAuthorChatEnd& operator=(const CommonStateSignalAuthorChatEnd& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonStateSignalAuthorChatEnd& operator=(CommonStateSignalAuthorChatEnd&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommonStateSignalAuthorChatEnd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommonStateSignalAuthorChatEnd* internal_default_instance() {
    return reinterpret_cast<const CommonStateSignalAuthorChatEnd*>(
               &_CommonStateSignalAuthorChatEnd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CommonStateSignalAuthorChatEnd& a, CommonStateSignalAuthorChatEnd& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonStateSignalAuthorChatEnd* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonStateSignalAuthorChatEnd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommonStateSignalAuthorChatEnd* New() const final {
    return CreateMaybeMessage<CommonStateSignalAuthorChatEnd>(nullptr);
  }

  CommonStateSignalAuthorChatEnd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommonStateSignalAuthorChatEnd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommonStateSignalAuthorChatEnd& from);
  void MergeFrom(const CommonStateSignalAuthorChatEnd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonStateSignalAuthorChatEnd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.CommonStateSignalAuthorChatEnd";
  }
  protected:
  explicit CommonStateSignalAuthorChatEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CommonStateSignalAuthorChatEnd_2eproto);
    return ::descriptor_table_CommonStateSignalAuthorChatEnd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CommonStateSignalAuthorChatEnd_Unknown Unknown;
  static constexpr Unknown d =
    CommonStateSignalAuthorChatEnd_Unknown_d;
  static constexpr Unknown e =
    CommonStateSignalAuthorChatEnd_Unknown_e;
  static constexpr Unknown f =
    CommonStateSignalAuthorChatEnd_Unknown_f;
  static constexpr Unknown g =
    CommonStateSignalAuthorChatEnd_Unknown_g;
  static constexpr Unknown h =
    CommonStateSignalAuthorChatEnd_Unknown_h;
  static constexpr Unknown i =
    CommonStateSignalAuthorChatEnd_Unknown_i;
  static constexpr Unknown j =
    CommonStateSignalAuthorChatEnd_Unknown_j;
  static constexpr Unknown k =
    CommonStateSignalAuthorChatEnd_Unknown_k;
  static constexpr Unknown l =
    CommonStateSignalAuthorChatEnd_Unknown_l;
  static inline bool Unknown_IsValid(int value) {
    return CommonStateSignalAuthorChatEnd_Unknown_IsValid(value);
  }
  static constexpr Unknown Unknown_MIN =
    CommonStateSignalAuthorChatEnd_Unknown_Unknown_MIN;
  static constexpr Unknown Unknown_MAX =
    CommonStateSignalAuthorChatEnd_Unknown_Unknown_MAX;
  static constexpr int Unknown_ARRAYSIZE =
    CommonStateSignalAuthorChatEnd_Unknown_Unknown_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Unknown_descriptor() {
    return CommonStateSignalAuthorChatEnd_Unknown_descriptor();
  }
  template<typename T>
  static inline const std::string& Unknown_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Unknown>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Unknown_Name.");
    return CommonStateSignalAuthorChatEnd_Unknown_Name(enum_t_value);
  }
  static inline bool Unknown_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Unknown* value) {
    return CommonStateSignalAuthorChatEnd_Unknown_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAFieldNumber = 1,
    kCFieldNumber = 3,
    kBFieldNumber = 2,
  };
  // string a = 1;
  void clear_a();
  const std::string& a() const;
  void set_a(const std::string& value);
  void set_a(std::string&& value);
  void set_a(const char* value);
  void set_a(const char* value, size_t size);
  std::string* mutable_a();
  std::string* release_a();
  void set_allocated_a(std::string* a);
  private:
  const std::string& _internal_a() const;
  void _internal_set_a(const std::string& value);
  std::string* _internal_mutable_a();
  public:

  // string c = 3;
  void clear_c();
  const std::string& c() const;
  void set_c(const std::string& value);
  void set_c(std::string&& value);
  void set_c(const char* value);
  void set_c(const char* value, size_t size);
  std::string* mutable_c();
  std::string* release_c();
  void set_allocated_c(std::string* c);
  private:
  const std::string& _internal_c() const;
  void _internal_set_c(const std::string& value);
  std::string* _internal_mutable_c();
  public:

  // .AcFunDanmu.CommonStateSignalAuthorChatEnd.Unknown b = 2;
  void clear_b();
  ::AcFunDanmu::CommonStateSignalAuthorChatEnd_Unknown b() const;
  void set_b(::AcFunDanmu::CommonStateSignalAuthorChatEnd_Unknown value);
  private:
  ::AcFunDanmu::CommonStateSignalAuthorChatEnd_Unknown _internal_b() const;
  void _internal_set_b(::AcFunDanmu::CommonStateSignalAuthorChatEnd_Unknown value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.CommonStateSignalAuthorChatEnd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr a_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr c_;
  int b_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CommonStateSignalAuthorChatEnd_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CommonStateSignalAuthorChatEnd

// string a = 1;
inline void CommonStateSignalAuthorChatEnd::clear_a() {
  a_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CommonStateSignalAuthorChatEnd::a() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonStateSignalAuthorChatEnd.a)
  return _internal_a();
}
inline void CommonStateSignalAuthorChatEnd::set_a(const std::string& value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommonStateSignalAuthorChatEnd.a)
}
inline std::string* CommonStateSignalAuthorChatEnd::mutable_a() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.CommonStateSignalAuthorChatEnd.a)
  return _internal_mutable_a();
}
inline const std::string& CommonStateSignalAuthorChatEnd::_internal_a() const {
  return a_.Get();
}
inline void CommonStateSignalAuthorChatEnd::_internal_set_a(const std::string& value) {
  
  a_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CommonStateSignalAuthorChatEnd::set_a(std::string&& value) {
  
  a_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.CommonStateSignalAuthorChatEnd.a)
}
inline void CommonStateSignalAuthorChatEnd::set_a(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  a_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.CommonStateSignalAuthorChatEnd.a)
}
inline void CommonStateSignalAuthorChatEnd::set_a(const char* value,
    size_t size) {
  
  a_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.CommonStateSignalAuthorChatEnd.a)
}
inline std::string* CommonStateSignalAuthorChatEnd::_internal_mutable_a() {
  
  return a_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CommonStateSignalAuthorChatEnd::release_a() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.CommonStateSignalAuthorChatEnd.a)
  return a_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommonStateSignalAuthorChatEnd::set_allocated_a(std::string* a) {
  if (a != nullptr) {
    
  } else {
    
  }
  a_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), a,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.CommonStateSignalAuthorChatEnd.a)
}

// .AcFunDanmu.CommonStateSignalAuthorChatEnd.Unknown b = 2;
inline void CommonStateSignalAuthorChatEnd::clear_b() {
  b_ = 0;
}
inline ::AcFunDanmu::CommonStateSignalAuthorChatEnd_Unknown CommonStateSignalAuthorChatEnd::_internal_b() const {
  return static_cast< ::AcFunDanmu::CommonStateSignalAuthorChatEnd_Unknown >(b_);
}
inline ::AcFunDanmu::CommonStateSignalAuthorChatEnd_Unknown CommonStateSignalAuthorChatEnd::b() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonStateSignalAuthorChatEnd.b)
  return _internal_b();
}
inline void CommonStateSignalAuthorChatEnd::_internal_set_b(::AcFunDanmu::CommonStateSignalAuthorChatEnd_Unknown value) {
  
  b_ = value;
}
inline void CommonStateSignalAuthorChatEnd::set_b(::AcFunDanmu::CommonStateSignalAuthorChatEnd_Unknown value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommonStateSignalAuthorChatEnd.b)
}

// string c = 3;
inline void CommonStateSignalAuthorChatEnd::clear_c() {
  c_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CommonStateSignalAuthorChatEnd::c() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonStateSignalAuthorChatEnd.c)
  return _internal_c();
}
inline void CommonStateSignalAuthorChatEnd::set_c(const std::string& value) {
  _internal_set_c(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommonStateSignalAuthorChatEnd.c)
}
inline std::string* CommonStateSignalAuthorChatEnd::mutable_c() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.CommonStateSignalAuthorChatEnd.c)
  return _internal_mutable_c();
}
inline const std::string& CommonStateSignalAuthorChatEnd::_internal_c() const {
  return c_.Get();
}
inline void CommonStateSignalAuthorChatEnd::_internal_set_c(const std::string& value) {
  
  c_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CommonStateSignalAuthorChatEnd::set_c(std::string&& value) {
  
  c_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.CommonStateSignalAuthorChatEnd.c)
}
inline void CommonStateSignalAuthorChatEnd::set_c(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  c_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.CommonStateSignalAuthorChatEnd.c)
}
inline void CommonStateSignalAuthorChatEnd::set_c(const char* value,
    size_t size) {
  
  c_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.CommonStateSignalAuthorChatEnd.c)
}
inline std::string* CommonStateSignalAuthorChatEnd::_internal_mutable_c() {
  
  return c_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CommonStateSignalAuthorChatEnd::release_c() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.CommonStateSignalAuthorChatEnd.c)
  return c_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommonStateSignalAuthorChatEnd::set_allocated_c(std::string* c) {
  if (c != nullptr) {
    
  } else {
    
  }
  c_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), c,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.CommonStateSignalAuthorChatEnd.c)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace AcFunDanmu

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::AcFunDanmu::CommonStateSignalAuthorChatEnd_Unknown> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::CommonStateSignalAuthorChatEnd_Unknown>() {
  return ::AcFunDanmu::CommonStateSignalAuthorChatEnd_Unknown_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_CommonStateSignalAuthorChatEnd_2eproto
