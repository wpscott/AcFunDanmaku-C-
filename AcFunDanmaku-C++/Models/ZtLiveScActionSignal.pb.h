// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ZtLiveScActionSignal.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ZtLiveScActionSignal_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ZtLiveScActionSignal_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ZtLiveActionSignalItem.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ZtLiveScActionSignal_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ZtLiveScActionSignal_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ZtLiveScActionSignal_2eproto;
namespace AcFunDanmu {
class ZtLiveScActionSignal;
class ZtLiveScActionSignalDefaultTypeInternal;
extern ZtLiveScActionSignalDefaultTypeInternal _ZtLiveScActionSignal_default_instance_;
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::ZtLiveScActionSignal* Arena::CreateMaybeMessage<::AcFunDanmu::ZtLiveScActionSignal>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {

// ===================================================================

class ZtLiveScActionSignal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.ZtLiveScActionSignal) */ {
 public:
  inline ZtLiveScActionSignal() : ZtLiveScActionSignal(nullptr) {}
  virtual ~ZtLiveScActionSignal();

  ZtLiveScActionSignal(const ZtLiveScActionSignal& from);
  ZtLiveScActionSignal(ZtLiveScActionSignal&& from) noexcept
    : ZtLiveScActionSignal() {
    *this = ::std::move(from);
  }

  inline ZtLiveScActionSignal& operator=(const ZtLiveScActionSignal& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZtLiveScActionSignal& operator=(ZtLiveScActionSignal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ZtLiveScActionSignal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ZtLiveScActionSignal* internal_default_instance() {
    return reinterpret_cast<const ZtLiveScActionSignal*>(
               &_ZtLiveScActionSignal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ZtLiveScActionSignal& a, ZtLiveScActionSignal& b) {
    a.Swap(&b);
  }
  inline void Swap(ZtLiveScActionSignal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZtLiveScActionSignal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ZtLiveScActionSignal* New() const final {
    return CreateMaybeMessage<ZtLiveScActionSignal>(nullptr);
  }

  ZtLiveScActionSignal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ZtLiveScActionSignal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ZtLiveScActionSignal& from);
  void MergeFrom(const ZtLiveScActionSignal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZtLiveScActionSignal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.ZtLiveScActionSignal";
  }
  protected:
  explicit ZtLiveScActionSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ZtLiveScActionSignal_2eproto);
    return ::descriptor_table_ZtLiveScActionSignal_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 1,
  };
  // repeated .AcFunDanmu.ZtLiveActionSignalItem item = 1;
  int item_size() const;
  private:
  int _internal_item_size() const;
  public:
  void clear_item();
  ::AcFunDanmu::ZtLiveActionSignalItem* mutable_item(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::ZtLiveActionSignalItem >*
      mutable_item();
  private:
  const ::AcFunDanmu::ZtLiveActionSignalItem& _internal_item(int index) const;
  ::AcFunDanmu::ZtLiveActionSignalItem* _internal_add_item();
  public:
  const ::AcFunDanmu::ZtLiveActionSignalItem& item(int index) const;
  ::AcFunDanmu::ZtLiveActionSignalItem* add_item();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::ZtLiveActionSignalItem >&
      item() const;

  // @@protoc_insertion_point(class_scope:AcFunDanmu.ZtLiveScActionSignal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::ZtLiveActionSignalItem > item_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ZtLiveScActionSignal_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ZtLiveScActionSignal

// repeated .AcFunDanmu.ZtLiveActionSignalItem item = 1;
inline int ZtLiveScActionSignal::_internal_item_size() const {
  return item_.size();
}
inline int ZtLiveScActionSignal::item_size() const {
  return _internal_item_size();
}
inline ::AcFunDanmu::ZtLiveActionSignalItem* ZtLiveScActionSignal::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.ZtLiveScActionSignal.item)
  return item_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::ZtLiveActionSignalItem >*
ZtLiveScActionSignal::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.ZtLiveScActionSignal.item)
  return &item_;
}
inline const ::AcFunDanmu::ZtLiveActionSignalItem& ZtLiveScActionSignal::_internal_item(int index) const {
  return item_.Get(index);
}
inline const ::AcFunDanmu::ZtLiveActionSignalItem& ZtLiveScActionSignal::item(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.ZtLiveScActionSignal.item)
  return _internal_item(index);
}
inline ::AcFunDanmu::ZtLiveActionSignalItem* ZtLiveScActionSignal::_internal_add_item() {
  return item_.Add();
}
inline ::AcFunDanmu::ZtLiveActionSignalItem* ZtLiveScActionSignal::add_item() {
  // @@protoc_insertion_point(field_add:AcFunDanmu.ZtLiveScActionSignal.item)
  return _internal_add_item();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::ZtLiveActionSignalItem >&
ZtLiveScActionSignal::item() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.ZtLiveScActionSignal.item)
  return item_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace AcFunDanmu

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ZtLiveScActionSignal_2eproto
