// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommonStateSignalChatReady.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_CommonStateSignalChatReady_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_CommonStateSignalChatReady_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ChatMediaType.pb.h"
#include "ZtLiveUserInfo.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_CommonStateSignalChatReady_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_CommonStateSignalChatReady_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_CommonStateSignalChatReady_2eproto;
namespace AcFunDanmu {
class CommonStateSignalChatReady;
class CommonStateSignalChatReadyDefaultTypeInternal;
extern CommonStateSignalChatReadyDefaultTypeInternal _CommonStateSignalChatReady_default_instance_;
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::CommonStateSignalChatReady* Arena::CreateMaybeMessage<::AcFunDanmu::CommonStateSignalChatReady>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {

// ===================================================================

class CommonStateSignalChatReady PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.CommonStateSignalChatReady) */ {
 public:
  inline CommonStateSignalChatReady() : CommonStateSignalChatReady(nullptr) {}
  virtual ~CommonStateSignalChatReady();

  CommonStateSignalChatReady(const CommonStateSignalChatReady& from);
  CommonStateSignalChatReady(CommonStateSignalChatReady&& from) noexcept
    : CommonStateSignalChatReady() {
    *this = ::std::move(from);
  }

  inline CommonStateSignalChatReady& operator=(const CommonStateSignalChatReady& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonStateSignalChatReady& operator=(CommonStateSignalChatReady&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommonStateSignalChatReady& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommonStateSignalChatReady* internal_default_instance() {
    return reinterpret_cast<const CommonStateSignalChatReady*>(
               &_CommonStateSignalChatReady_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CommonStateSignalChatReady& a, CommonStateSignalChatReady& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonStateSignalChatReady* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonStateSignalChatReady* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommonStateSignalChatReady* New() const final {
    return CreateMaybeMessage<CommonStateSignalChatReady>(nullptr);
  }

  CommonStateSignalChatReady* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommonStateSignalChatReady>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommonStateSignalChatReady& from);
  void MergeFrom(const CommonStateSignalChatReady& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonStateSignalChatReady* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.CommonStateSignalChatReady";
  }
  protected:
  explicit CommonStateSignalChatReady(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CommonStateSignalChatReady_2eproto);
    return ::descriptor_table_CommonStateSignalChatReady_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatIdFieldNumber = 1,
    kGuestUserInfoFieldNumber = 2,
    kMediaTypeFieldNumber = 3,
  };
  // string chatId = 1;
  void clear_chatid();
  const std::string& chatid() const;
  void set_chatid(const std::string& value);
  void set_chatid(std::string&& value);
  void set_chatid(const char* value);
  void set_chatid(const char* value, size_t size);
  std::string* mutable_chatid();
  std::string* release_chatid();
  void set_allocated_chatid(std::string* chatid);
  private:
  const std::string& _internal_chatid() const;
  void _internal_set_chatid(const std::string& value);
  std::string* _internal_mutable_chatid();
  public:

  // .AcFunDanmu.ZtLiveUserInfo guestUserInfo = 2;
  bool has_guestuserinfo() const;
  private:
  bool _internal_has_guestuserinfo() const;
  public:
  void clear_guestuserinfo();
  const ::AcFunDanmu::ZtLiveUserInfo& guestuserinfo() const;
  ::AcFunDanmu::ZtLiveUserInfo* release_guestuserinfo();
  ::AcFunDanmu::ZtLiveUserInfo* mutable_guestuserinfo();
  void set_allocated_guestuserinfo(::AcFunDanmu::ZtLiveUserInfo* guestuserinfo);
  private:
  const ::AcFunDanmu::ZtLiveUserInfo& _internal_guestuserinfo() const;
  ::AcFunDanmu::ZtLiveUserInfo* _internal_mutable_guestuserinfo();
  public:
  void unsafe_arena_set_allocated_guestuserinfo(
      ::AcFunDanmu::ZtLiveUserInfo* guestuserinfo);
  ::AcFunDanmu::ZtLiveUserInfo* unsafe_arena_release_guestuserinfo();

  // .AcFunDanmu.ChatMediaType mediaType = 3;
  void clear_mediatype();
  ::AcFunDanmu::ChatMediaType mediatype() const;
  void set_mediatype(::AcFunDanmu::ChatMediaType value);
  private:
  ::AcFunDanmu::ChatMediaType _internal_mediatype() const;
  void _internal_set_mediatype(::AcFunDanmu::ChatMediaType value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.CommonStateSignalChatReady)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chatid_;
  ::AcFunDanmu::ZtLiveUserInfo* guestuserinfo_;
  int mediatype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CommonStateSignalChatReady_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CommonStateSignalChatReady

// string chatId = 1;
inline void CommonStateSignalChatReady::clear_chatid() {
  chatid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CommonStateSignalChatReady::chatid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonStateSignalChatReady.chatId)
  return _internal_chatid();
}
inline void CommonStateSignalChatReady::set_chatid(const std::string& value) {
  _internal_set_chatid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommonStateSignalChatReady.chatId)
}
inline std::string* CommonStateSignalChatReady::mutable_chatid() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.CommonStateSignalChatReady.chatId)
  return _internal_mutable_chatid();
}
inline const std::string& CommonStateSignalChatReady::_internal_chatid() const {
  return chatid_.Get();
}
inline void CommonStateSignalChatReady::_internal_set_chatid(const std::string& value) {
  
  chatid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CommonStateSignalChatReady::set_chatid(std::string&& value) {
  
  chatid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.CommonStateSignalChatReady.chatId)
}
inline void CommonStateSignalChatReady::set_chatid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chatid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.CommonStateSignalChatReady.chatId)
}
inline void CommonStateSignalChatReady::set_chatid(const char* value,
    size_t size) {
  
  chatid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.CommonStateSignalChatReady.chatId)
}
inline std::string* CommonStateSignalChatReady::_internal_mutable_chatid() {
  
  return chatid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CommonStateSignalChatReady::release_chatid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.CommonStateSignalChatReady.chatId)
  return chatid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommonStateSignalChatReady::set_allocated_chatid(std::string* chatid) {
  if (chatid != nullptr) {
    
  } else {
    
  }
  chatid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chatid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.CommonStateSignalChatReady.chatId)
}

// .AcFunDanmu.ZtLiveUserInfo guestUserInfo = 2;
inline bool CommonStateSignalChatReady::_internal_has_guestuserinfo() const {
  return this != internal_default_instance() && guestuserinfo_ != nullptr;
}
inline bool CommonStateSignalChatReady::has_guestuserinfo() const {
  return _internal_has_guestuserinfo();
}
inline const ::AcFunDanmu::ZtLiveUserInfo& CommonStateSignalChatReady::_internal_guestuserinfo() const {
  const ::AcFunDanmu::ZtLiveUserInfo* p = guestuserinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::AcFunDanmu::ZtLiveUserInfo*>(
      &::AcFunDanmu::_ZtLiveUserInfo_default_instance_);
}
inline const ::AcFunDanmu::ZtLiveUserInfo& CommonStateSignalChatReady::guestuserinfo() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonStateSignalChatReady.guestUserInfo)
  return _internal_guestuserinfo();
}
inline void CommonStateSignalChatReady::unsafe_arena_set_allocated_guestuserinfo(
    ::AcFunDanmu::ZtLiveUserInfo* guestuserinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guestuserinfo_);
  }
  guestuserinfo_ = guestuserinfo;
  if (guestuserinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.CommonStateSignalChatReady.guestUserInfo)
}
inline ::AcFunDanmu::ZtLiveUserInfo* CommonStateSignalChatReady::release_guestuserinfo() {
  
  ::AcFunDanmu::ZtLiveUserInfo* temp = guestuserinfo_;
  guestuserinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::ZtLiveUserInfo* CommonStateSignalChatReady::unsafe_arena_release_guestuserinfo() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.CommonStateSignalChatReady.guestUserInfo)
  
  ::AcFunDanmu::ZtLiveUserInfo* temp = guestuserinfo_;
  guestuserinfo_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::ZtLiveUserInfo* CommonStateSignalChatReady::_internal_mutable_guestuserinfo() {
  
  if (guestuserinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::ZtLiveUserInfo>(GetArena());
    guestuserinfo_ = p;
  }
  return guestuserinfo_;
}
inline ::AcFunDanmu::ZtLiveUserInfo* CommonStateSignalChatReady::mutable_guestuserinfo() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.CommonStateSignalChatReady.guestUserInfo)
  return _internal_mutable_guestuserinfo();
}
inline void CommonStateSignalChatReady::set_allocated_guestuserinfo(::AcFunDanmu::ZtLiveUserInfo* guestuserinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(guestuserinfo_);
  }
  if (guestuserinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guestuserinfo)->GetArena();
    if (message_arena != submessage_arena) {
      guestuserinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guestuserinfo, submessage_arena);
    }
    
  } else {
    
  }
  guestuserinfo_ = guestuserinfo;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.CommonStateSignalChatReady.guestUserInfo)
}

// .AcFunDanmu.ChatMediaType mediaType = 3;
inline void CommonStateSignalChatReady::clear_mediatype() {
  mediatype_ = 0;
}
inline ::AcFunDanmu::ChatMediaType CommonStateSignalChatReady::_internal_mediatype() const {
  return static_cast< ::AcFunDanmu::ChatMediaType >(mediatype_);
}
inline ::AcFunDanmu::ChatMediaType CommonStateSignalChatReady::mediatype() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonStateSignalChatReady.mediaType)
  return _internal_mediatype();
}
inline void CommonStateSignalChatReady::_internal_set_mediatype(::AcFunDanmu::ChatMediaType value) {
  
  mediatype_ = value;
}
inline void CommonStateSignalChatReady::set_mediatype(::AcFunDanmu::ChatMediaType value) {
  _internal_set_mediatype(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommonStateSignalChatReady.mediaType)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace AcFunDanmu

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_CommonStateSignalChatReady_2eproto
