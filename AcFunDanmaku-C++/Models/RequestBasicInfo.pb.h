// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RequestBasicInfo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_RequestBasicInfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_RequestBasicInfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "DeviceInfo.pb.h"
#include "AppInfo.pb.h"
#include "EnvInfo.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_RequestBasicInfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_RequestBasicInfo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_RequestBasicInfo_2eproto;
namespace AcFunDanmu {
class RequestBasicInfo;
class RequestBasicInfoDefaultTypeInternal;
extern RequestBasicInfoDefaultTypeInternal _RequestBasicInfo_default_instance_;
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::RequestBasicInfo* Arena::CreateMaybeMessage<::AcFunDanmu::RequestBasicInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {

// ===================================================================

class RequestBasicInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.RequestBasicInfo) */ {
 public:
  inline RequestBasicInfo() : RequestBasicInfo(nullptr) {}
  virtual ~RequestBasicInfo();

  RequestBasicInfo(const RequestBasicInfo& from);
  RequestBasicInfo(RequestBasicInfo&& from) noexcept
    : RequestBasicInfo() {
    *this = ::std::move(from);
  }

  inline RequestBasicInfo& operator=(const RequestBasicInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestBasicInfo& operator=(RequestBasicInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestBasicInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestBasicInfo* internal_default_instance() {
    return reinterpret_cast<const RequestBasicInfo*>(
               &_RequestBasicInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RequestBasicInfo& a, RequestBasicInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestBasicInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestBasicInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestBasicInfo* New() const final {
    return CreateMaybeMessage<RequestBasicInfo>(nullptr);
  }

  RequestBasicInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestBasicInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestBasicInfo& from);
  void MergeFrom(const RequestBasicInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestBasicInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.RequestBasicInfo";
  }
  protected:
  explicit RequestBasicInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RequestBasicInfo_2eproto);
    return ::descriptor_table_RequestBasicInfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 2,
    kClientIpFieldNumber = 3,
    kAppVersionFieldNumber = 4,
    kChannelFieldNumber = 5,
    kLocationFieldNumber = 10,
    kKpfFieldNumber = 11,
    kAppInfoFieldNumber = 6,
    kDeviceInfoFieldNumber = 7,
    kEnvInfoFieldNumber = 8,
    kClientTypeFieldNumber = 1,
    kClientPortFieldNumber = 9,
  };
  // string deviceId = 2;
  void clear_deviceid();
  const std::string& deviceid() const;
  void set_deviceid(const std::string& value);
  void set_deviceid(std::string&& value);
  void set_deviceid(const char* value);
  void set_deviceid(const char* value, size_t size);
  std::string* mutable_deviceid();
  std::string* release_deviceid();
  void set_allocated_deviceid(std::string* deviceid);
  private:
  const std::string& _internal_deviceid() const;
  void _internal_set_deviceid(const std::string& value);
  std::string* _internal_mutable_deviceid();
  public:

  // string clientIp = 3;
  void clear_clientip();
  const std::string& clientip() const;
  void set_clientip(const std::string& value);
  void set_clientip(std::string&& value);
  void set_clientip(const char* value);
  void set_clientip(const char* value, size_t size);
  std::string* mutable_clientip();
  std::string* release_clientip();
  void set_allocated_clientip(std::string* clientip);
  private:
  const std::string& _internal_clientip() const;
  void _internal_set_clientip(const std::string& value);
  std::string* _internal_mutable_clientip();
  public:

  // string appVersion = 4;
  void clear_appversion();
  const std::string& appversion() const;
  void set_appversion(const std::string& value);
  void set_appversion(std::string&& value);
  void set_appversion(const char* value);
  void set_appversion(const char* value, size_t size);
  std::string* mutable_appversion();
  std::string* release_appversion();
  void set_allocated_appversion(std::string* appversion);
  private:
  const std::string& _internal_appversion() const;
  void _internal_set_appversion(const std::string& value);
  std::string* _internal_mutable_appversion();
  public:

  // string channel = 5;
  void clear_channel();
  const std::string& channel() const;
  void set_channel(const std::string& value);
  void set_channel(std::string&& value);
  void set_channel(const char* value);
  void set_channel(const char* value, size_t size);
  std::string* mutable_channel();
  std::string* release_channel();
  void set_allocated_channel(std::string* channel);
  private:
  const std::string& _internal_channel() const;
  void _internal_set_channel(const std::string& value);
  std::string* _internal_mutable_channel();
  public:

  // string location = 10;
  void clear_location();
  const std::string& location() const;
  void set_location(const std::string& value);
  void set_location(std::string&& value);
  void set_location(const char* value);
  void set_location(const char* value, size_t size);
  std::string* mutable_location();
  std::string* release_location();
  void set_allocated_location(std::string* location);
  private:
  const std::string& _internal_location() const;
  void _internal_set_location(const std::string& value);
  std::string* _internal_mutable_location();
  public:

  // string kpf = 11;
  void clear_kpf();
  const std::string& kpf() const;
  void set_kpf(const std::string& value);
  void set_kpf(std::string&& value);
  void set_kpf(const char* value);
  void set_kpf(const char* value, size_t size);
  std::string* mutable_kpf();
  std::string* release_kpf();
  void set_allocated_kpf(std::string* kpf);
  private:
  const std::string& _internal_kpf() const;
  void _internal_set_kpf(const std::string& value);
  std::string* _internal_mutable_kpf();
  public:

  // .AcFunDanmu.AppInfo appInfo = 6;
  bool has_appinfo() const;
  private:
  bool _internal_has_appinfo() const;
  public:
  void clear_appinfo();
  const ::AcFunDanmu::AppInfo& appinfo() const;
  ::AcFunDanmu::AppInfo* release_appinfo();
  ::AcFunDanmu::AppInfo* mutable_appinfo();
  void set_allocated_appinfo(::AcFunDanmu::AppInfo* appinfo);
  private:
  const ::AcFunDanmu::AppInfo& _internal_appinfo() const;
  ::AcFunDanmu::AppInfo* _internal_mutable_appinfo();
  public:
  void unsafe_arena_set_allocated_appinfo(
      ::AcFunDanmu::AppInfo* appinfo);
  ::AcFunDanmu::AppInfo* unsafe_arena_release_appinfo();

  // .AcFunDanmu.DeviceInfo deviceInfo = 7;
  bool has_deviceinfo() const;
  private:
  bool _internal_has_deviceinfo() const;
  public:
  void clear_deviceinfo();
  const ::AcFunDanmu::DeviceInfo& deviceinfo() const;
  ::AcFunDanmu::DeviceInfo* release_deviceinfo();
  ::AcFunDanmu::DeviceInfo* mutable_deviceinfo();
  void set_allocated_deviceinfo(::AcFunDanmu::DeviceInfo* deviceinfo);
  private:
  const ::AcFunDanmu::DeviceInfo& _internal_deviceinfo() const;
  ::AcFunDanmu::DeviceInfo* _internal_mutable_deviceinfo();
  public:
  void unsafe_arena_set_allocated_deviceinfo(
      ::AcFunDanmu::DeviceInfo* deviceinfo);
  ::AcFunDanmu::DeviceInfo* unsafe_arena_release_deviceinfo();

  // .AcFunDanmu.EnvInfo envInfo = 8;
  bool has_envinfo() const;
  private:
  bool _internal_has_envinfo() const;
  public:
  void clear_envinfo();
  const ::AcFunDanmu::EnvInfo& envinfo() const;
  ::AcFunDanmu::EnvInfo* release_envinfo();
  ::AcFunDanmu::EnvInfo* mutable_envinfo();
  void set_allocated_envinfo(::AcFunDanmu::EnvInfo* envinfo);
  private:
  const ::AcFunDanmu::EnvInfo& _internal_envinfo() const;
  ::AcFunDanmu::EnvInfo* _internal_mutable_envinfo();
  public:
  void unsafe_arena_set_allocated_envinfo(
      ::AcFunDanmu::EnvInfo* envinfo);
  ::AcFunDanmu::EnvInfo* unsafe_arena_release_envinfo();

  // .AcFunDanmu.DeviceInfo.PlatformType clientType = 1;
  void clear_clienttype();
  ::AcFunDanmu::DeviceInfo_PlatformType clienttype() const;
  void set_clienttype(::AcFunDanmu::DeviceInfo_PlatformType value);
  private:
  ::AcFunDanmu::DeviceInfo_PlatformType _internal_clienttype() const;
  void _internal_set_clienttype(::AcFunDanmu::DeviceInfo_PlatformType value);
  public:

  // int32 clientPort = 9;
  void clear_clientport();
  ::PROTOBUF_NAMESPACE_ID::int32 clientport() const;
  void set_clientport(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_clientport() const;
  void _internal_set_clientport(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.RequestBasicInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appversion_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kpf_;
  ::AcFunDanmu::AppInfo* appinfo_;
  ::AcFunDanmu::DeviceInfo* deviceinfo_;
  ::AcFunDanmu::EnvInfo* envinfo_;
  int clienttype_;
  ::PROTOBUF_NAMESPACE_ID::int32 clientport_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RequestBasicInfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RequestBasicInfo

// .AcFunDanmu.DeviceInfo.PlatformType clientType = 1;
inline void RequestBasicInfo::clear_clienttype() {
  clienttype_ = 0;
}
inline ::AcFunDanmu::DeviceInfo_PlatformType RequestBasicInfo::_internal_clienttype() const {
  return static_cast< ::AcFunDanmu::DeviceInfo_PlatformType >(clienttype_);
}
inline ::AcFunDanmu::DeviceInfo_PlatformType RequestBasicInfo::clienttype() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.RequestBasicInfo.clientType)
  return _internal_clienttype();
}
inline void RequestBasicInfo::_internal_set_clienttype(::AcFunDanmu::DeviceInfo_PlatformType value) {
  
  clienttype_ = value;
}
inline void RequestBasicInfo::set_clienttype(::AcFunDanmu::DeviceInfo_PlatformType value) {
  _internal_set_clienttype(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.RequestBasicInfo.clientType)
}

// string deviceId = 2;
inline void RequestBasicInfo::clear_deviceid() {
  deviceid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RequestBasicInfo::deviceid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.RequestBasicInfo.deviceId)
  return _internal_deviceid();
}
inline void RequestBasicInfo::set_deviceid(const std::string& value) {
  _internal_set_deviceid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.RequestBasicInfo.deviceId)
}
inline std::string* RequestBasicInfo::mutable_deviceid() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.RequestBasicInfo.deviceId)
  return _internal_mutable_deviceid();
}
inline const std::string& RequestBasicInfo::_internal_deviceid() const {
  return deviceid_.Get();
}
inline void RequestBasicInfo::_internal_set_deviceid(const std::string& value) {
  
  deviceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RequestBasicInfo::set_deviceid(std::string&& value) {
  
  deviceid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.RequestBasicInfo.deviceId)
}
inline void RequestBasicInfo::set_deviceid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deviceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.RequestBasicInfo.deviceId)
}
inline void RequestBasicInfo::set_deviceid(const char* value,
    size_t size) {
  
  deviceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.RequestBasicInfo.deviceId)
}
inline std::string* RequestBasicInfo::_internal_mutable_deviceid() {
  
  return deviceid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RequestBasicInfo::release_deviceid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.RequestBasicInfo.deviceId)
  return deviceid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RequestBasicInfo::set_allocated_deviceid(std::string* deviceid) {
  if (deviceid != nullptr) {
    
  } else {
    
  }
  deviceid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deviceid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.RequestBasicInfo.deviceId)
}

// string clientIp = 3;
inline void RequestBasicInfo::clear_clientip() {
  clientip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RequestBasicInfo::clientip() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.RequestBasicInfo.clientIp)
  return _internal_clientip();
}
inline void RequestBasicInfo::set_clientip(const std::string& value) {
  _internal_set_clientip(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.RequestBasicInfo.clientIp)
}
inline std::string* RequestBasicInfo::mutable_clientip() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.RequestBasicInfo.clientIp)
  return _internal_mutable_clientip();
}
inline const std::string& RequestBasicInfo::_internal_clientip() const {
  return clientip_.Get();
}
inline void RequestBasicInfo::_internal_set_clientip(const std::string& value) {
  
  clientip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RequestBasicInfo::set_clientip(std::string&& value) {
  
  clientip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.RequestBasicInfo.clientIp)
}
inline void RequestBasicInfo::set_clientip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  clientip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.RequestBasicInfo.clientIp)
}
inline void RequestBasicInfo::set_clientip(const char* value,
    size_t size) {
  
  clientip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.RequestBasicInfo.clientIp)
}
inline std::string* RequestBasicInfo::_internal_mutable_clientip() {
  
  return clientip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RequestBasicInfo::release_clientip() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.RequestBasicInfo.clientIp)
  return clientip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RequestBasicInfo::set_allocated_clientip(std::string* clientip) {
  if (clientip != nullptr) {
    
  } else {
    
  }
  clientip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.RequestBasicInfo.clientIp)
}

// string appVersion = 4;
inline void RequestBasicInfo::clear_appversion() {
  appversion_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RequestBasicInfo::appversion() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.RequestBasicInfo.appVersion)
  return _internal_appversion();
}
inline void RequestBasicInfo::set_appversion(const std::string& value) {
  _internal_set_appversion(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.RequestBasicInfo.appVersion)
}
inline std::string* RequestBasicInfo::mutable_appversion() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.RequestBasicInfo.appVersion)
  return _internal_mutable_appversion();
}
inline const std::string& RequestBasicInfo::_internal_appversion() const {
  return appversion_.Get();
}
inline void RequestBasicInfo::_internal_set_appversion(const std::string& value) {
  
  appversion_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RequestBasicInfo::set_appversion(std::string&& value) {
  
  appversion_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.RequestBasicInfo.appVersion)
}
inline void RequestBasicInfo::set_appversion(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  appversion_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.RequestBasicInfo.appVersion)
}
inline void RequestBasicInfo::set_appversion(const char* value,
    size_t size) {
  
  appversion_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.RequestBasicInfo.appVersion)
}
inline std::string* RequestBasicInfo::_internal_mutable_appversion() {
  
  return appversion_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RequestBasicInfo::release_appversion() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.RequestBasicInfo.appVersion)
  return appversion_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RequestBasicInfo::set_allocated_appversion(std::string* appversion) {
  if (appversion != nullptr) {
    
  } else {
    
  }
  appversion_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), appversion,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.RequestBasicInfo.appVersion)
}

// string channel = 5;
inline void RequestBasicInfo::clear_channel() {
  channel_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RequestBasicInfo::channel() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.RequestBasicInfo.channel)
  return _internal_channel();
}
inline void RequestBasicInfo::set_channel(const std::string& value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.RequestBasicInfo.channel)
}
inline std::string* RequestBasicInfo::mutable_channel() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.RequestBasicInfo.channel)
  return _internal_mutable_channel();
}
inline const std::string& RequestBasicInfo::_internal_channel() const {
  return channel_.Get();
}
inline void RequestBasicInfo::_internal_set_channel(const std::string& value) {
  
  channel_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RequestBasicInfo::set_channel(std::string&& value) {
  
  channel_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.RequestBasicInfo.channel)
}
inline void RequestBasicInfo::set_channel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channel_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.RequestBasicInfo.channel)
}
inline void RequestBasicInfo::set_channel(const char* value,
    size_t size) {
  
  channel_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.RequestBasicInfo.channel)
}
inline std::string* RequestBasicInfo::_internal_mutable_channel() {
  
  return channel_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RequestBasicInfo::release_channel() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.RequestBasicInfo.channel)
  return channel_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RequestBasicInfo::set_allocated_channel(std::string* channel) {
  if (channel != nullptr) {
    
  } else {
    
  }
  channel_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.RequestBasicInfo.channel)
}

// .AcFunDanmu.AppInfo appInfo = 6;
inline bool RequestBasicInfo::_internal_has_appinfo() const {
  return this != internal_default_instance() && appinfo_ != nullptr;
}
inline bool RequestBasicInfo::has_appinfo() const {
  return _internal_has_appinfo();
}
inline const ::AcFunDanmu::AppInfo& RequestBasicInfo::_internal_appinfo() const {
  const ::AcFunDanmu::AppInfo* p = appinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::AcFunDanmu::AppInfo*>(
      &::AcFunDanmu::_AppInfo_default_instance_);
}
inline const ::AcFunDanmu::AppInfo& RequestBasicInfo::appinfo() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.RequestBasicInfo.appInfo)
  return _internal_appinfo();
}
inline void RequestBasicInfo::unsafe_arena_set_allocated_appinfo(
    ::AcFunDanmu::AppInfo* appinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(appinfo_);
  }
  appinfo_ = appinfo;
  if (appinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.RequestBasicInfo.appInfo)
}
inline ::AcFunDanmu::AppInfo* RequestBasicInfo::release_appinfo() {
  
  ::AcFunDanmu::AppInfo* temp = appinfo_;
  appinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::AppInfo* RequestBasicInfo::unsafe_arena_release_appinfo() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.RequestBasicInfo.appInfo)
  
  ::AcFunDanmu::AppInfo* temp = appinfo_;
  appinfo_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::AppInfo* RequestBasicInfo::_internal_mutable_appinfo() {
  
  if (appinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::AppInfo>(GetArena());
    appinfo_ = p;
  }
  return appinfo_;
}
inline ::AcFunDanmu::AppInfo* RequestBasicInfo::mutable_appinfo() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.RequestBasicInfo.appInfo)
  return _internal_mutable_appinfo();
}
inline void RequestBasicInfo::set_allocated_appinfo(::AcFunDanmu::AppInfo* appinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(appinfo_);
  }
  if (appinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(appinfo)->GetArena();
    if (message_arena != submessage_arena) {
      appinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, appinfo, submessage_arena);
    }
    
  } else {
    
  }
  appinfo_ = appinfo;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.RequestBasicInfo.appInfo)
}

// .AcFunDanmu.DeviceInfo deviceInfo = 7;
inline bool RequestBasicInfo::_internal_has_deviceinfo() const {
  return this != internal_default_instance() && deviceinfo_ != nullptr;
}
inline bool RequestBasicInfo::has_deviceinfo() const {
  return _internal_has_deviceinfo();
}
inline const ::AcFunDanmu::DeviceInfo& RequestBasicInfo::_internal_deviceinfo() const {
  const ::AcFunDanmu::DeviceInfo* p = deviceinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::AcFunDanmu::DeviceInfo*>(
      &::AcFunDanmu::_DeviceInfo_default_instance_);
}
inline const ::AcFunDanmu::DeviceInfo& RequestBasicInfo::deviceinfo() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.RequestBasicInfo.deviceInfo)
  return _internal_deviceinfo();
}
inline void RequestBasicInfo::unsafe_arena_set_allocated_deviceinfo(
    ::AcFunDanmu::DeviceInfo* deviceinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deviceinfo_);
  }
  deviceinfo_ = deviceinfo;
  if (deviceinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.RequestBasicInfo.deviceInfo)
}
inline ::AcFunDanmu::DeviceInfo* RequestBasicInfo::release_deviceinfo() {
  
  ::AcFunDanmu::DeviceInfo* temp = deviceinfo_;
  deviceinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::DeviceInfo* RequestBasicInfo::unsafe_arena_release_deviceinfo() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.RequestBasicInfo.deviceInfo)
  
  ::AcFunDanmu::DeviceInfo* temp = deviceinfo_;
  deviceinfo_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::DeviceInfo* RequestBasicInfo::_internal_mutable_deviceinfo() {
  
  if (deviceinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::DeviceInfo>(GetArena());
    deviceinfo_ = p;
  }
  return deviceinfo_;
}
inline ::AcFunDanmu::DeviceInfo* RequestBasicInfo::mutable_deviceinfo() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.RequestBasicInfo.deviceInfo)
  return _internal_mutable_deviceinfo();
}
inline void RequestBasicInfo::set_allocated_deviceinfo(::AcFunDanmu::DeviceInfo* deviceinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(deviceinfo_);
  }
  if (deviceinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deviceinfo)->GetArena();
    if (message_arena != submessage_arena) {
      deviceinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deviceinfo, submessage_arena);
    }
    
  } else {
    
  }
  deviceinfo_ = deviceinfo;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.RequestBasicInfo.deviceInfo)
}

// .AcFunDanmu.EnvInfo envInfo = 8;
inline bool RequestBasicInfo::_internal_has_envinfo() const {
  return this != internal_default_instance() && envinfo_ != nullptr;
}
inline bool RequestBasicInfo::has_envinfo() const {
  return _internal_has_envinfo();
}
inline const ::AcFunDanmu::EnvInfo& RequestBasicInfo::_internal_envinfo() const {
  const ::AcFunDanmu::EnvInfo* p = envinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::AcFunDanmu::EnvInfo*>(
      &::AcFunDanmu::_EnvInfo_default_instance_);
}
inline const ::AcFunDanmu::EnvInfo& RequestBasicInfo::envinfo() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.RequestBasicInfo.envInfo)
  return _internal_envinfo();
}
inline void RequestBasicInfo::unsafe_arena_set_allocated_envinfo(
    ::AcFunDanmu::EnvInfo* envinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(envinfo_);
  }
  envinfo_ = envinfo;
  if (envinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.RequestBasicInfo.envInfo)
}
inline ::AcFunDanmu::EnvInfo* RequestBasicInfo::release_envinfo() {
  
  ::AcFunDanmu::EnvInfo* temp = envinfo_;
  envinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::EnvInfo* RequestBasicInfo::unsafe_arena_release_envinfo() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.RequestBasicInfo.envInfo)
  
  ::AcFunDanmu::EnvInfo* temp = envinfo_;
  envinfo_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::EnvInfo* RequestBasicInfo::_internal_mutable_envinfo() {
  
  if (envinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::EnvInfo>(GetArena());
    envinfo_ = p;
  }
  return envinfo_;
}
inline ::AcFunDanmu::EnvInfo* RequestBasicInfo::mutable_envinfo() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.RequestBasicInfo.envInfo)
  return _internal_mutable_envinfo();
}
inline void RequestBasicInfo::set_allocated_envinfo(::AcFunDanmu::EnvInfo* envinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(envinfo_);
  }
  if (envinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(envinfo)->GetArena();
    if (message_arena != submessage_arena) {
      envinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, envinfo, submessage_arena);
    }
    
  } else {
    
  }
  envinfo_ = envinfo;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.RequestBasicInfo.envInfo)
}

// int32 clientPort = 9;
inline void RequestBasicInfo::clear_clientport() {
  clientport_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestBasicInfo::_internal_clientport() const {
  return clientport_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestBasicInfo::clientport() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.RequestBasicInfo.clientPort)
  return _internal_clientport();
}
inline void RequestBasicInfo::_internal_set_clientport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  clientport_ = value;
}
inline void RequestBasicInfo::set_clientport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_clientport(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.RequestBasicInfo.clientPort)
}

// string location = 10;
inline void RequestBasicInfo::clear_location() {
  location_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RequestBasicInfo::location() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.RequestBasicInfo.location)
  return _internal_location();
}
inline void RequestBasicInfo::set_location(const std::string& value) {
  _internal_set_location(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.RequestBasicInfo.location)
}
inline std::string* RequestBasicInfo::mutable_location() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.RequestBasicInfo.location)
  return _internal_mutable_location();
}
inline const std::string& RequestBasicInfo::_internal_location() const {
  return location_.Get();
}
inline void RequestBasicInfo::_internal_set_location(const std::string& value) {
  
  location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RequestBasicInfo::set_location(std::string&& value) {
  
  location_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.RequestBasicInfo.location)
}
inline void RequestBasicInfo::set_location(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.RequestBasicInfo.location)
}
inline void RequestBasicInfo::set_location(const char* value,
    size_t size) {
  
  location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.RequestBasicInfo.location)
}
inline std::string* RequestBasicInfo::_internal_mutable_location() {
  
  return location_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RequestBasicInfo::release_location() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.RequestBasicInfo.location)
  return location_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RequestBasicInfo::set_allocated_location(std::string* location) {
  if (location != nullptr) {
    
  } else {
    
  }
  location_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), location,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.RequestBasicInfo.location)
}

// string kpf = 11;
inline void RequestBasicInfo::clear_kpf() {
  kpf_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RequestBasicInfo::kpf() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.RequestBasicInfo.kpf)
  return _internal_kpf();
}
inline void RequestBasicInfo::set_kpf(const std::string& value) {
  _internal_set_kpf(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.RequestBasicInfo.kpf)
}
inline std::string* RequestBasicInfo::mutable_kpf() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.RequestBasicInfo.kpf)
  return _internal_mutable_kpf();
}
inline const std::string& RequestBasicInfo::_internal_kpf() const {
  return kpf_.Get();
}
inline void RequestBasicInfo::_internal_set_kpf(const std::string& value) {
  
  kpf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RequestBasicInfo::set_kpf(std::string&& value) {
  
  kpf_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.RequestBasicInfo.kpf)
}
inline void RequestBasicInfo::set_kpf(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  kpf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.RequestBasicInfo.kpf)
}
inline void RequestBasicInfo::set_kpf(const char* value,
    size_t size) {
  
  kpf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.RequestBasicInfo.kpf)
}
inline std::string* RequestBasicInfo::_internal_mutable_kpf() {
  
  return kpf_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RequestBasicInfo::release_kpf() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.RequestBasicInfo.kpf)
  return kpf_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RequestBasicInfo::set_allocated_kpf(std::string* kpf) {
  if (kpf != nullptr) {
    
  } else {
    
  }
  kpf_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), kpf,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.RequestBasicInfo.kpf)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace AcFunDanmu

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_RequestBasicInfo_2eproto
