// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DownstreamPayload.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_DownstreamPayload_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_DownstreamPayload_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_DownstreamPayload_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_DownstreamPayload_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DownstreamPayload_2eproto;
namespace AcFunDanmu {
class DownstreamPayload;
class DownstreamPayloadDefaultTypeInternal;
extern DownstreamPayloadDefaultTypeInternal _DownstreamPayload_default_instance_;
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::DownstreamPayload* Arena::CreateMaybeMessage<::AcFunDanmu::DownstreamPayload>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {

// ===================================================================

class DownstreamPayload PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.DownstreamPayload) */ {
 public:
  inline DownstreamPayload() : DownstreamPayload(nullptr) {}
  virtual ~DownstreamPayload();

  DownstreamPayload(const DownstreamPayload& from);
  DownstreamPayload(DownstreamPayload&& from) noexcept
    : DownstreamPayload() {
    *this = ::std::move(from);
  }

  inline DownstreamPayload& operator=(const DownstreamPayload& from) {
    CopyFrom(from);
    return *this;
  }
  inline DownstreamPayload& operator=(DownstreamPayload&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DownstreamPayload& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DownstreamPayload* internal_default_instance() {
    return reinterpret_cast<const DownstreamPayload*>(
               &_DownstreamPayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DownstreamPayload& a, DownstreamPayload& b) {
    a.Swap(&b);
  }
  inline void Swap(DownstreamPayload* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DownstreamPayload* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DownstreamPayload* New() const final {
    return CreateMaybeMessage<DownstreamPayload>(nullptr);
  }

  DownstreamPayload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DownstreamPayload>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DownstreamPayload& from);
  void MergeFrom(const DownstreamPayload& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DownstreamPayload* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.DownstreamPayload";
  }
  protected:
  explicit DownstreamPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DownstreamPayload_2eproto);
    return ::descriptor_table_DownstreamPayload_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kPayloadDataFieldNumber = 4,
    kErrorMsgFieldNumber = 5,
    kErrorDataFieldNumber = 6,
    kSubBizFieldNumber = 7,
    kSeqIdFieldNumber = 2,
    kErrorCodeFieldNumber = 3,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // bytes payloadData = 4;
  void clear_payloaddata();
  const std::string& payloaddata() const;
  void set_payloaddata(const std::string& value);
  void set_payloaddata(std::string&& value);
  void set_payloaddata(const char* value);
  void set_payloaddata(const void* value, size_t size);
  std::string* mutable_payloaddata();
  std::string* release_payloaddata();
  void set_allocated_payloaddata(std::string* payloaddata);
  private:
  const std::string& _internal_payloaddata() const;
  void _internal_set_payloaddata(const std::string& value);
  std::string* _internal_mutable_payloaddata();
  public:

  // string errorMsg = 5;
  void clear_errormsg();
  const std::string& errormsg() const;
  void set_errormsg(const std::string& value);
  void set_errormsg(std::string&& value);
  void set_errormsg(const char* value);
  void set_errormsg(const char* value, size_t size);
  std::string* mutable_errormsg();
  std::string* release_errormsg();
  void set_allocated_errormsg(std::string* errormsg);
  private:
  const std::string& _internal_errormsg() const;
  void _internal_set_errormsg(const std::string& value);
  std::string* _internal_mutable_errormsg();
  public:

  // bytes errorData = 6;
  void clear_errordata();
  const std::string& errordata() const;
  void set_errordata(const std::string& value);
  void set_errordata(std::string&& value);
  void set_errordata(const char* value);
  void set_errordata(const void* value, size_t size);
  std::string* mutable_errordata();
  std::string* release_errordata();
  void set_allocated_errordata(std::string* errordata);
  private:
  const std::string& _internal_errordata() const;
  void _internal_set_errordata(const std::string& value);
  std::string* _internal_mutable_errordata();
  public:

  // string subBiz = 7;
  void clear_subbiz();
  const std::string& subbiz() const;
  void set_subbiz(const std::string& value);
  void set_subbiz(std::string&& value);
  void set_subbiz(const char* value);
  void set_subbiz(const char* value, size_t size);
  std::string* mutable_subbiz();
  std::string* release_subbiz();
  void set_allocated_subbiz(std::string* subbiz);
  private:
  const std::string& _internal_subbiz() const;
  void _internal_set_subbiz(const std::string& value);
  std::string* _internal_mutable_subbiz();
  public:

  // int64 seqId = 2;
  void clear_seqid();
  ::PROTOBUF_NAMESPACE_ID::int64 seqid() const;
  void set_seqid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_seqid() const;
  void _internal_set_seqid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 errorCode = 3;
  void clear_errorcode();
  ::PROTOBUF_NAMESPACE_ID::int32 errorcode() const;
  void set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_errorcode() const;
  void _internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.DownstreamPayload)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payloaddata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errormsg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errordata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subbiz_;
  ::PROTOBUF_NAMESPACE_ID::int64 seqid_;
  ::PROTOBUF_NAMESPACE_ID::int32 errorcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DownstreamPayload_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DownstreamPayload

// string command = 1;
inline void DownstreamPayload::clear_command() {
  command_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DownstreamPayload::command() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.DownstreamPayload.command)
  return _internal_command();
}
inline void DownstreamPayload::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.DownstreamPayload.command)
}
inline std::string* DownstreamPayload::mutable_command() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.DownstreamPayload.command)
  return _internal_mutable_command();
}
inline const std::string& DownstreamPayload::_internal_command() const {
  return command_.Get();
}
inline void DownstreamPayload::_internal_set_command(const std::string& value) {
  
  command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DownstreamPayload::set_command(std::string&& value) {
  
  command_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.DownstreamPayload.command)
}
inline void DownstreamPayload::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.DownstreamPayload.command)
}
inline void DownstreamPayload::set_command(const char* value,
    size_t size) {
  
  command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.DownstreamPayload.command)
}
inline std::string* DownstreamPayload::_internal_mutable_command() {
  
  return command_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DownstreamPayload::release_command() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.DownstreamPayload.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DownstreamPayload::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.DownstreamPayload.command)
}

// int64 seqId = 2;
inline void DownstreamPayload::clear_seqid() {
  seqid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DownstreamPayload::_internal_seqid() const {
  return seqid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DownstreamPayload::seqid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.DownstreamPayload.seqId)
  return _internal_seqid();
}
inline void DownstreamPayload::_internal_set_seqid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  seqid_ = value;
}
inline void DownstreamPayload::set_seqid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_seqid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.DownstreamPayload.seqId)
}

// int32 errorCode = 3;
inline void DownstreamPayload::clear_errorcode() {
  errorcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DownstreamPayload::_internal_errorcode() const {
  return errorcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DownstreamPayload::errorcode() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.DownstreamPayload.errorCode)
  return _internal_errorcode();
}
inline void DownstreamPayload::_internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  errorcode_ = value;
}
inline void DownstreamPayload::set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.DownstreamPayload.errorCode)
}

// bytes payloadData = 4;
inline void DownstreamPayload::clear_payloaddata() {
  payloaddata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DownstreamPayload::payloaddata() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.DownstreamPayload.payloadData)
  return _internal_payloaddata();
}
inline void DownstreamPayload::set_payloaddata(const std::string& value) {
  _internal_set_payloaddata(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.DownstreamPayload.payloadData)
}
inline std::string* DownstreamPayload::mutable_payloaddata() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.DownstreamPayload.payloadData)
  return _internal_mutable_payloaddata();
}
inline const std::string& DownstreamPayload::_internal_payloaddata() const {
  return payloaddata_.Get();
}
inline void DownstreamPayload::_internal_set_payloaddata(const std::string& value) {
  
  payloaddata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DownstreamPayload::set_payloaddata(std::string&& value) {
  
  payloaddata_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.DownstreamPayload.payloadData)
}
inline void DownstreamPayload::set_payloaddata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payloaddata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.DownstreamPayload.payloadData)
}
inline void DownstreamPayload::set_payloaddata(const void* value,
    size_t size) {
  
  payloaddata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.DownstreamPayload.payloadData)
}
inline std::string* DownstreamPayload::_internal_mutable_payloaddata() {
  
  return payloaddata_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DownstreamPayload::release_payloaddata() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.DownstreamPayload.payloadData)
  return payloaddata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DownstreamPayload::set_allocated_payloaddata(std::string* payloaddata) {
  if (payloaddata != nullptr) {
    
  } else {
    
  }
  payloaddata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payloaddata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.DownstreamPayload.payloadData)
}

// string errorMsg = 5;
inline void DownstreamPayload::clear_errormsg() {
  errormsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DownstreamPayload::errormsg() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.DownstreamPayload.errorMsg)
  return _internal_errormsg();
}
inline void DownstreamPayload::set_errormsg(const std::string& value) {
  _internal_set_errormsg(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.DownstreamPayload.errorMsg)
}
inline std::string* DownstreamPayload::mutable_errormsg() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.DownstreamPayload.errorMsg)
  return _internal_mutable_errormsg();
}
inline const std::string& DownstreamPayload::_internal_errormsg() const {
  return errormsg_.Get();
}
inline void DownstreamPayload::_internal_set_errormsg(const std::string& value) {
  
  errormsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DownstreamPayload::set_errormsg(std::string&& value) {
  
  errormsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.DownstreamPayload.errorMsg)
}
inline void DownstreamPayload::set_errormsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errormsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.DownstreamPayload.errorMsg)
}
inline void DownstreamPayload::set_errormsg(const char* value,
    size_t size) {
  
  errormsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.DownstreamPayload.errorMsg)
}
inline std::string* DownstreamPayload::_internal_mutable_errormsg() {
  
  return errormsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DownstreamPayload::release_errormsg() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.DownstreamPayload.errorMsg)
  return errormsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DownstreamPayload::set_allocated_errormsg(std::string* errormsg) {
  if (errormsg != nullptr) {
    
  } else {
    
  }
  errormsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errormsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.DownstreamPayload.errorMsg)
}

// bytes errorData = 6;
inline void DownstreamPayload::clear_errordata() {
  errordata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DownstreamPayload::errordata() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.DownstreamPayload.errorData)
  return _internal_errordata();
}
inline void DownstreamPayload::set_errordata(const std::string& value) {
  _internal_set_errordata(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.DownstreamPayload.errorData)
}
inline std::string* DownstreamPayload::mutable_errordata() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.DownstreamPayload.errorData)
  return _internal_mutable_errordata();
}
inline const std::string& DownstreamPayload::_internal_errordata() const {
  return errordata_.Get();
}
inline void DownstreamPayload::_internal_set_errordata(const std::string& value) {
  
  errordata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DownstreamPayload::set_errordata(std::string&& value) {
  
  errordata_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.DownstreamPayload.errorData)
}
inline void DownstreamPayload::set_errordata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errordata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.DownstreamPayload.errorData)
}
inline void DownstreamPayload::set_errordata(const void* value,
    size_t size) {
  
  errordata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.DownstreamPayload.errorData)
}
inline std::string* DownstreamPayload::_internal_mutable_errordata() {
  
  return errordata_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DownstreamPayload::release_errordata() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.DownstreamPayload.errorData)
  return errordata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DownstreamPayload::set_allocated_errordata(std::string* errordata) {
  if (errordata != nullptr) {
    
  } else {
    
  }
  errordata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errordata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.DownstreamPayload.errorData)
}

// string subBiz = 7;
inline void DownstreamPayload::clear_subbiz() {
  subbiz_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DownstreamPayload::subbiz() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.DownstreamPayload.subBiz)
  return _internal_subbiz();
}
inline void DownstreamPayload::set_subbiz(const std::string& value) {
  _internal_set_subbiz(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.DownstreamPayload.subBiz)
}
inline std::string* DownstreamPayload::mutable_subbiz() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.DownstreamPayload.subBiz)
  return _internal_mutable_subbiz();
}
inline const std::string& DownstreamPayload::_internal_subbiz() const {
  return subbiz_.Get();
}
inline void DownstreamPayload::_internal_set_subbiz(const std::string& value) {
  
  subbiz_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DownstreamPayload::set_subbiz(std::string&& value) {
  
  subbiz_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.DownstreamPayload.subBiz)
}
inline void DownstreamPayload::set_subbiz(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subbiz_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.DownstreamPayload.subBiz)
}
inline void DownstreamPayload::set_subbiz(const char* value,
    size_t size) {
  
  subbiz_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.DownstreamPayload.subBiz)
}
inline std::string* DownstreamPayload::_internal_mutable_subbiz() {
  
  return subbiz_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DownstreamPayload::release_subbiz() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.DownstreamPayload.subBiz)
  return subbiz_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DownstreamPayload::set_allocated_subbiz(std::string* subbiz) {
  if (subbiz != nullptr) {
    
  } else {
    
  }
  subbiz_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subbiz,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.DownstreamPayload.subBiz)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace AcFunDanmu

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_DownstreamPayload_2eproto
