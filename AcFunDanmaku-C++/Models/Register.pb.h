// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Register.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Register_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Register_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "AppInfo.pb.h"
#include "DeviceInfo.pb.h"
#include "EnvInfo.pb.h"
#include "ZtCommonInfo.pb.h"
#include "AccessPointsConfig.pb.h"
#include "PushServiceToken.pb.h"
#include "SdkOption.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Register_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Register_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Register_2eproto;
namespace AcFunDanmu {
class RegisterRequest;
class RegisterRequestDefaultTypeInternal;
extern RegisterRequestDefaultTypeInternal _RegisterRequest_default_instance_;
class RegisterResponse;
class RegisterResponseDefaultTypeInternal;
extern RegisterResponseDefaultTypeInternal _RegisterResponse_default_instance_;
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::RegisterRequest* Arena::CreateMaybeMessage<::AcFunDanmu::RegisterRequest>(Arena*);
template<> ::AcFunDanmu::RegisterResponse* Arena::CreateMaybeMessage<::AcFunDanmu::RegisterResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {

enum RegisterRequest_PresenceStatus : int {
  RegisterRequest_PresenceStatus_kPresenceOffline = 0,
  RegisterRequest_PresenceStatus_kPresenceOnline = 1,
  RegisterRequest_PresenceStatus_RegisterRequest_PresenceStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RegisterRequest_PresenceStatus_RegisterRequest_PresenceStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RegisterRequest_PresenceStatus_IsValid(int value);
constexpr RegisterRequest_PresenceStatus RegisterRequest_PresenceStatus_PresenceStatus_MIN = RegisterRequest_PresenceStatus_kPresenceOffline;
constexpr RegisterRequest_PresenceStatus RegisterRequest_PresenceStatus_PresenceStatus_MAX = RegisterRequest_PresenceStatus_kPresenceOnline;
constexpr int RegisterRequest_PresenceStatus_PresenceStatus_ARRAYSIZE = RegisterRequest_PresenceStatus_PresenceStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RegisterRequest_PresenceStatus_descriptor();
template<typename T>
inline const std::string& RegisterRequest_PresenceStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RegisterRequest_PresenceStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RegisterRequest_PresenceStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RegisterRequest_PresenceStatus_descriptor(), enum_t_value);
}
inline bool RegisterRequest_PresenceStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RegisterRequest_PresenceStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RegisterRequest_PresenceStatus>(
    RegisterRequest_PresenceStatus_descriptor(), name, value);
}
enum RegisterRequest_ActiveStatus : int {
  RegisterRequest_ActiveStatus_kInvalid = 0,
  RegisterRequest_ActiveStatus_kAppInForeground = 1,
  RegisterRequest_ActiveStatus_kAppInBackground = 2,
  RegisterRequest_ActiveStatus_RegisterRequest_ActiveStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RegisterRequest_ActiveStatus_RegisterRequest_ActiveStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RegisterRequest_ActiveStatus_IsValid(int value);
constexpr RegisterRequest_ActiveStatus RegisterRequest_ActiveStatus_ActiveStatus_MIN = RegisterRequest_ActiveStatus_kInvalid;
constexpr RegisterRequest_ActiveStatus RegisterRequest_ActiveStatus_ActiveStatus_MAX = RegisterRequest_ActiveStatus_kAppInBackground;
constexpr int RegisterRequest_ActiveStatus_ActiveStatus_ARRAYSIZE = RegisterRequest_ActiveStatus_ActiveStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RegisterRequest_ActiveStatus_descriptor();
template<typename T>
inline const std::string& RegisterRequest_ActiveStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RegisterRequest_ActiveStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RegisterRequest_ActiveStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RegisterRequest_ActiveStatus_descriptor(), enum_t_value);
}
inline bool RegisterRequest_ActiveStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RegisterRequest_ActiveStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RegisterRequest_ActiveStatus>(
    RegisterRequest_ActiveStatus_descriptor(), name, value);
}
// ===================================================================

class RegisterRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.RegisterRequest) */ {
 public:
  inline RegisterRequest() : RegisterRequest(nullptr) {}
  virtual ~RegisterRequest();

  RegisterRequest(const RegisterRequest& from);
  RegisterRequest(RegisterRequest&& from) noexcept
    : RegisterRequest() {
    *this = ::std::move(from);
  }

  inline RegisterRequest& operator=(const RegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterRequest& operator=(RegisterRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterRequest& default_instance();

  static inline const RegisterRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterRequest*>(
               &_RegisterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RegisterRequest& a, RegisterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterRequest* New() const final {
    return CreateMaybeMessage<RegisterRequest>(nullptr);
  }

  RegisterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterRequest& from);
  void MergeFrom(const RegisterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.RegisterRequest";
  }
  protected:
  explicit RegisterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Register_2eproto);
    return ::descriptor_table_Register_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef RegisterRequest_PresenceStatus PresenceStatus;
  static constexpr PresenceStatus kPresenceOffline =
    RegisterRequest_PresenceStatus_kPresenceOffline;
  static constexpr PresenceStatus kPresenceOnline =
    RegisterRequest_PresenceStatus_kPresenceOnline;
  static inline bool PresenceStatus_IsValid(int value) {
    return RegisterRequest_PresenceStatus_IsValid(value);
  }
  static constexpr PresenceStatus PresenceStatus_MIN =
    RegisterRequest_PresenceStatus_PresenceStatus_MIN;
  static constexpr PresenceStatus PresenceStatus_MAX =
    RegisterRequest_PresenceStatus_PresenceStatus_MAX;
  static constexpr int PresenceStatus_ARRAYSIZE =
    RegisterRequest_PresenceStatus_PresenceStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PresenceStatus_descriptor() {
    return RegisterRequest_PresenceStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& PresenceStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PresenceStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PresenceStatus_Name.");
    return RegisterRequest_PresenceStatus_Name(enum_t_value);
  }
  static inline bool PresenceStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PresenceStatus* value) {
    return RegisterRequest_PresenceStatus_Parse(name, value);
  }

  typedef RegisterRequest_ActiveStatus ActiveStatus;
  static constexpr ActiveStatus kInvalid =
    RegisterRequest_ActiveStatus_kInvalid;
  static constexpr ActiveStatus kAppInForeground =
    RegisterRequest_ActiveStatus_kAppInForeground;
  static constexpr ActiveStatus kAppInBackground =
    RegisterRequest_ActiveStatus_kAppInBackground;
  static inline bool ActiveStatus_IsValid(int value) {
    return RegisterRequest_ActiveStatus_IsValid(value);
  }
  static constexpr ActiveStatus ActiveStatus_MIN =
    RegisterRequest_ActiveStatus_ActiveStatus_MIN;
  static constexpr ActiveStatus ActiveStatus_MAX =
    RegisterRequest_ActiveStatus_ActiveStatus_MAX;
  static constexpr int ActiveStatus_ARRAYSIZE =
    RegisterRequest_ActiveStatus_ActiveStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ActiveStatus_descriptor() {
    return RegisterRequest_ActiveStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& ActiveStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ActiveStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ActiveStatus_Name.");
    return RegisterRequest_ActiveStatus_Name(enum_t_value);
  }
  static inline bool ActiveStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ActiveStatus* value) {
    return RegisterRequest_ActiveStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPushServiceTokenListFieldNumber = 9,
    kAppCustomStatusFieldNumber = 6,
    kAppInfoFieldNumber = 1,
    kDeviceInfoFieldNumber = 2,
    kEnvInfoFieldNumber = 3,
    kPushServiceTokenFieldNumber = 7,
    kZtCommonInfoFieldNumber = 11,
    kPresenceStatusFieldNumber = 4,
    kAppActiveStatusFieldNumber = 5,
    kInstanceIdFieldNumber = 8,
    kKeepaliveIntervalSecFieldNumber = 10,
  };
  // repeated .AcFunDanmu.PushServiceToken pushServiceTokenList = 9;
  int pushservicetokenlist_size() const;
  private:
  int _internal_pushservicetokenlist_size() const;
  public:
  void clear_pushservicetokenlist();
  ::AcFunDanmu::PushServiceToken* mutable_pushservicetokenlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::PushServiceToken >*
      mutable_pushservicetokenlist();
  private:
  const ::AcFunDanmu::PushServiceToken& _internal_pushservicetokenlist(int index) const;
  ::AcFunDanmu::PushServiceToken* _internal_add_pushservicetokenlist();
  public:
  const ::AcFunDanmu::PushServiceToken& pushservicetokenlist(int index) const;
  ::AcFunDanmu::PushServiceToken* add_pushservicetokenlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::PushServiceToken >&
      pushservicetokenlist() const;

  // bytes appCustomStatus = 6;
  void clear_appcustomstatus();
  const std::string& appcustomstatus() const;
  void set_appcustomstatus(const std::string& value);
  void set_appcustomstatus(std::string&& value);
  void set_appcustomstatus(const char* value);
  void set_appcustomstatus(const void* value, size_t size);
  std::string* mutable_appcustomstatus();
  std::string* release_appcustomstatus();
  void set_allocated_appcustomstatus(std::string* appcustomstatus);
  private:
  const std::string& _internal_appcustomstatus() const;
  void _internal_set_appcustomstatus(const std::string& value);
  std::string* _internal_mutable_appcustomstatus();
  public:

  // .AcFunDanmu.AppInfo appInfo = 1;
  bool has_appinfo() const;
  private:
  bool _internal_has_appinfo() const;
  public:
  void clear_appinfo();
  const ::AcFunDanmu::AppInfo& appinfo() const;
  ::AcFunDanmu::AppInfo* release_appinfo();
  ::AcFunDanmu::AppInfo* mutable_appinfo();
  void set_allocated_appinfo(::AcFunDanmu::AppInfo* appinfo);
  private:
  const ::AcFunDanmu::AppInfo& _internal_appinfo() const;
  ::AcFunDanmu::AppInfo* _internal_mutable_appinfo();
  public:
  void unsafe_arena_set_allocated_appinfo(
      ::AcFunDanmu::AppInfo* appinfo);
  ::AcFunDanmu::AppInfo* unsafe_arena_release_appinfo();

  // .AcFunDanmu.DeviceInfo deviceInfo = 2;
  bool has_deviceinfo() const;
  private:
  bool _internal_has_deviceinfo() const;
  public:
  void clear_deviceinfo();
  const ::AcFunDanmu::DeviceInfo& deviceinfo() const;
  ::AcFunDanmu::DeviceInfo* release_deviceinfo();
  ::AcFunDanmu::DeviceInfo* mutable_deviceinfo();
  void set_allocated_deviceinfo(::AcFunDanmu::DeviceInfo* deviceinfo);
  private:
  const ::AcFunDanmu::DeviceInfo& _internal_deviceinfo() const;
  ::AcFunDanmu::DeviceInfo* _internal_mutable_deviceinfo();
  public:
  void unsafe_arena_set_allocated_deviceinfo(
      ::AcFunDanmu::DeviceInfo* deviceinfo);
  ::AcFunDanmu::DeviceInfo* unsafe_arena_release_deviceinfo();

  // .AcFunDanmu.EnvInfo envInfo = 3;
  bool has_envinfo() const;
  private:
  bool _internal_has_envinfo() const;
  public:
  void clear_envinfo();
  const ::AcFunDanmu::EnvInfo& envinfo() const;
  ::AcFunDanmu::EnvInfo* release_envinfo();
  ::AcFunDanmu::EnvInfo* mutable_envinfo();
  void set_allocated_envinfo(::AcFunDanmu::EnvInfo* envinfo);
  private:
  const ::AcFunDanmu::EnvInfo& _internal_envinfo() const;
  ::AcFunDanmu::EnvInfo* _internal_mutable_envinfo();
  public:
  void unsafe_arena_set_allocated_envinfo(
      ::AcFunDanmu::EnvInfo* envinfo);
  ::AcFunDanmu::EnvInfo* unsafe_arena_release_envinfo();

  // .AcFunDanmu.PushServiceToken pushServiceToken = 7;
  bool has_pushservicetoken() const;
  private:
  bool _internal_has_pushservicetoken() const;
  public:
  void clear_pushservicetoken();
  const ::AcFunDanmu::PushServiceToken& pushservicetoken() const;
  ::AcFunDanmu::PushServiceToken* release_pushservicetoken();
  ::AcFunDanmu::PushServiceToken* mutable_pushservicetoken();
  void set_allocated_pushservicetoken(::AcFunDanmu::PushServiceToken* pushservicetoken);
  private:
  const ::AcFunDanmu::PushServiceToken& _internal_pushservicetoken() const;
  ::AcFunDanmu::PushServiceToken* _internal_mutable_pushservicetoken();
  public:
  void unsafe_arena_set_allocated_pushservicetoken(
      ::AcFunDanmu::PushServiceToken* pushservicetoken);
  ::AcFunDanmu::PushServiceToken* unsafe_arena_release_pushservicetoken();

  // .AcFunDanmu.ZtCommonInfo ztCommonInfo = 11;
  bool has_ztcommoninfo() const;
  private:
  bool _internal_has_ztcommoninfo() const;
  public:
  void clear_ztcommoninfo();
  const ::AcFunDanmu::ZtCommonInfo& ztcommoninfo() const;
  ::AcFunDanmu::ZtCommonInfo* release_ztcommoninfo();
  ::AcFunDanmu::ZtCommonInfo* mutable_ztcommoninfo();
  void set_allocated_ztcommoninfo(::AcFunDanmu::ZtCommonInfo* ztcommoninfo);
  private:
  const ::AcFunDanmu::ZtCommonInfo& _internal_ztcommoninfo() const;
  ::AcFunDanmu::ZtCommonInfo* _internal_mutable_ztcommoninfo();
  public:
  void unsafe_arena_set_allocated_ztcommoninfo(
      ::AcFunDanmu::ZtCommonInfo* ztcommoninfo);
  ::AcFunDanmu::ZtCommonInfo* unsafe_arena_release_ztcommoninfo();

  // .AcFunDanmu.RegisterRequest.PresenceStatus presenceStatus = 4;
  void clear_presencestatus();
  ::AcFunDanmu::RegisterRequest_PresenceStatus presencestatus() const;
  void set_presencestatus(::AcFunDanmu::RegisterRequest_PresenceStatus value);
  private:
  ::AcFunDanmu::RegisterRequest_PresenceStatus _internal_presencestatus() const;
  void _internal_set_presencestatus(::AcFunDanmu::RegisterRequest_PresenceStatus value);
  public:

  // .AcFunDanmu.RegisterRequest.ActiveStatus appActiveStatus = 5;
  void clear_appactivestatus();
  ::AcFunDanmu::RegisterRequest_ActiveStatus appactivestatus() const;
  void set_appactivestatus(::AcFunDanmu::RegisterRequest_ActiveStatus value);
  private:
  ::AcFunDanmu::RegisterRequest_ActiveStatus _internal_appactivestatus() const;
  void _internal_set_appactivestatus(::AcFunDanmu::RegisterRequest_ActiveStatus value);
  public:

  // int64 instanceId = 8;
  void clear_instanceid();
  ::PROTOBUF_NAMESPACE_ID::int64 instanceid() const;
  void set_instanceid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_instanceid() const;
  void _internal_set_instanceid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 keepaliveIntervalSec = 10;
  void clear_keepaliveintervalsec();
  ::PROTOBUF_NAMESPACE_ID::int32 keepaliveintervalsec() const;
  void set_keepaliveintervalsec(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_keepaliveintervalsec() const;
  void _internal_set_keepaliveintervalsec(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.RegisterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::PushServiceToken > pushservicetokenlist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appcustomstatus_;
  ::AcFunDanmu::AppInfo* appinfo_;
  ::AcFunDanmu::DeviceInfo* deviceinfo_;
  ::AcFunDanmu::EnvInfo* envinfo_;
  ::AcFunDanmu::PushServiceToken* pushservicetoken_;
  ::AcFunDanmu::ZtCommonInfo* ztcommoninfo_;
  int presencestatus_;
  int appactivestatus_;
  ::PROTOBUF_NAMESPACE_ID::int64 instanceid_;
  ::PROTOBUF_NAMESPACE_ID::int32 keepaliveintervalsec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Register_2eproto;
};
// -------------------------------------------------------------------

class RegisterResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.RegisterResponse) */ {
 public:
  inline RegisterResponse() : RegisterResponse(nullptr) {}
  virtual ~RegisterResponse();

  RegisterResponse(const RegisterResponse& from);
  RegisterResponse(RegisterResponse&& from) noexcept
    : RegisterResponse() {
    *this = ::std::move(from);
  }

  inline RegisterResponse& operator=(const RegisterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterResponse& operator=(RegisterResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterResponse& default_instance();

  static inline const RegisterResponse* internal_default_instance() {
    return reinterpret_cast<const RegisterResponse*>(
               &_RegisterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RegisterResponse& a, RegisterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterResponse* New() const final {
    return CreateMaybeMessage<RegisterResponse>(nullptr);
  }

  RegisterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterResponse& from);
  void MergeFrom(const RegisterResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.RegisterResponse";
  }
  protected:
  explicit RegisterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Register_2eproto);
    return ::descriptor_table_Register_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessKeyFieldNumber = 2,
    kAccessPointsConfigFieldNumber = 1,
    kSdkOptionFieldNumber = 4,
    kAccessPointsCOnfigIpv6FieldNumber = 5,
    kInstanceIdFieldNumber = 3,
  };
  // bytes sessKey = 2;
  void clear_sesskey();
  const std::string& sesskey() const;
  void set_sesskey(const std::string& value);
  void set_sesskey(std::string&& value);
  void set_sesskey(const char* value);
  void set_sesskey(const void* value, size_t size);
  std::string* mutable_sesskey();
  std::string* release_sesskey();
  void set_allocated_sesskey(std::string* sesskey);
  private:
  const std::string& _internal_sesskey() const;
  void _internal_set_sesskey(const std::string& value);
  std::string* _internal_mutable_sesskey();
  public:

  // .AcFunDanmu.AccessPointsConfig accessPointsConfig = 1;
  bool has_accesspointsconfig() const;
  private:
  bool _internal_has_accesspointsconfig() const;
  public:
  void clear_accesspointsconfig();
  const ::AcFunDanmu::AccessPointsConfig& accesspointsconfig() const;
  ::AcFunDanmu::AccessPointsConfig* release_accesspointsconfig();
  ::AcFunDanmu::AccessPointsConfig* mutable_accesspointsconfig();
  void set_allocated_accesspointsconfig(::AcFunDanmu::AccessPointsConfig* accesspointsconfig);
  private:
  const ::AcFunDanmu::AccessPointsConfig& _internal_accesspointsconfig() const;
  ::AcFunDanmu::AccessPointsConfig* _internal_mutable_accesspointsconfig();
  public:
  void unsafe_arena_set_allocated_accesspointsconfig(
      ::AcFunDanmu::AccessPointsConfig* accesspointsconfig);
  ::AcFunDanmu::AccessPointsConfig* unsafe_arena_release_accesspointsconfig();

  // .AcFunDanmu.SdkOption sdkOption = 4;
  bool has_sdkoption() const;
  private:
  bool _internal_has_sdkoption() const;
  public:
  void clear_sdkoption();
  const ::AcFunDanmu::SdkOption& sdkoption() const;
  ::AcFunDanmu::SdkOption* release_sdkoption();
  ::AcFunDanmu::SdkOption* mutable_sdkoption();
  void set_allocated_sdkoption(::AcFunDanmu::SdkOption* sdkoption);
  private:
  const ::AcFunDanmu::SdkOption& _internal_sdkoption() const;
  ::AcFunDanmu::SdkOption* _internal_mutable_sdkoption();
  public:
  void unsafe_arena_set_allocated_sdkoption(
      ::AcFunDanmu::SdkOption* sdkoption);
  ::AcFunDanmu::SdkOption* unsafe_arena_release_sdkoption();

  // .AcFunDanmu.AccessPointsConfig accessPointsCOnfigIpv6 = 5;
  bool has_accesspointsconfigipv6() const;
  private:
  bool _internal_has_accesspointsconfigipv6() const;
  public:
  void clear_accesspointsconfigipv6();
  const ::AcFunDanmu::AccessPointsConfig& accesspointsconfigipv6() const;
  ::AcFunDanmu::AccessPointsConfig* release_accesspointsconfigipv6();
  ::AcFunDanmu::AccessPointsConfig* mutable_accesspointsconfigipv6();
  void set_allocated_accesspointsconfigipv6(::AcFunDanmu::AccessPointsConfig* accesspointsconfigipv6);
  private:
  const ::AcFunDanmu::AccessPointsConfig& _internal_accesspointsconfigipv6() const;
  ::AcFunDanmu::AccessPointsConfig* _internal_mutable_accesspointsconfigipv6();
  public:
  void unsafe_arena_set_allocated_accesspointsconfigipv6(
      ::AcFunDanmu::AccessPointsConfig* accesspointsconfigipv6);
  ::AcFunDanmu::AccessPointsConfig* unsafe_arena_release_accesspointsconfigipv6();

  // int64 instanceId = 3;
  void clear_instanceid();
  ::PROTOBUF_NAMESPACE_ID::int64 instanceid() const;
  void set_instanceid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_instanceid() const;
  void _internal_set_instanceid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.RegisterResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sesskey_;
  ::AcFunDanmu::AccessPointsConfig* accesspointsconfig_;
  ::AcFunDanmu::SdkOption* sdkoption_;
  ::AcFunDanmu::AccessPointsConfig* accesspointsconfigipv6_;
  ::PROTOBUF_NAMESPACE_ID::int64 instanceid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Register_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RegisterRequest

// .AcFunDanmu.AppInfo appInfo = 1;
inline bool RegisterRequest::_internal_has_appinfo() const {
  return this != internal_default_instance() && appinfo_ != nullptr;
}
inline bool RegisterRequest::has_appinfo() const {
  return _internal_has_appinfo();
}
inline const ::AcFunDanmu::AppInfo& RegisterRequest::_internal_appinfo() const {
  const ::AcFunDanmu::AppInfo* p = appinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::AppInfo&>(
      ::AcFunDanmu::_AppInfo_default_instance_);
}
inline const ::AcFunDanmu::AppInfo& RegisterRequest::appinfo() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.RegisterRequest.appInfo)
  return _internal_appinfo();
}
inline void RegisterRequest::unsafe_arena_set_allocated_appinfo(
    ::AcFunDanmu::AppInfo* appinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(appinfo_);
  }
  appinfo_ = appinfo;
  if (appinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.RegisterRequest.appInfo)
}
inline ::AcFunDanmu::AppInfo* RegisterRequest::release_appinfo() {
  
  ::AcFunDanmu::AppInfo* temp = appinfo_;
  appinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::AppInfo* RegisterRequest::unsafe_arena_release_appinfo() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.RegisterRequest.appInfo)
  
  ::AcFunDanmu::AppInfo* temp = appinfo_;
  appinfo_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::AppInfo* RegisterRequest::_internal_mutable_appinfo() {
  
  if (appinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::AppInfo>(GetArena());
    appinfo_ = p;
  }
  return appinfo_;
}
inline ::AcFunDanmu::AppInfo* RegisterRequest::mutable_appinfo() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.RegisterRequest.appInfo)
  return _internal_mutable_appinfo();
}
inline void RegisterRequest::set_allocated_appinfo(::AcFunDanmu::AppInfo* appinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(appinfo_);
  }
  if (appinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(appinfo)->GetArena();
    if (message_arena != submessage_arena) {
      appinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, appinfo, submessage_arena);
    }
    
  } else {
    
  }
  appinfo_ = appinfo;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.RegisterRequest.appInfo)
}

// .AcFunDanmu.DeviceInfo deviceInfo = 2;
inline bool RegisterRequest::_internal_has_deviceinfo() const {
  return this != internal_default_instance() && deviceinfo_ != nullptr;
}
inline bool RegisterRequest::has_deviceinfo() const {
  return _internal_has_deviceinfo();
}
inline const ::AcFunDanmu::DeviceInfo& RegisterRequest::_internal_deviceinfo() const {
  const ::AcFunDanmu::DeviceInfo* p = deviceinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::DeviceInfo&>(
      ::AcFunDanmu::_DeviceInfo_default_instance_);
}
inline const ::AcFunDanmu::DeviceInfo& RegisterRequest::deviceinfo() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.RegisterRequest.deviceInfo)
  return _internal_deviceinfo();
}
inline void RegisterRequest::unsafe_arena_set_allocated_deviceinfo(
    ::AcFunDanmu::DeviceInfo* deviceinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deviceinfo_);
  }
  deviceinfo_ = deviceinfo;
  if (deviceinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.RegisterRequest.deviceInfo)
}
inline ::AcFunDanmu::DeviceInfo* RegisterRequest::release_deviceinfo() {
  
  ::AcFunDanmu::DeviceInfo* temp = deviceinfo_;
  deviceinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::DeviceInfo* RegisterRequest::unsafe_arena_release_deviceinfo() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.RegisterRequest.deviceInfo)
  
  ::AcFunDanmu::DeviceInfo* temp = deviceinfo_;
  deviceinfo_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::DeviceInfo* RegisterRequest::_internal_mutable_deviceinfo() {
  
  if (deviceinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::DeviceInfo>(GetArena());
    deviceinfo_ = p;
  }
  return deviceinfo_;
}
inline ::AcFunDanmu::DeviceInfo* RegisterRequest::mutable_deviceinfo() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.RegisterRequest.deviceInfo)
  return _internal_mutable_deviceinfo();
}
inline void RegisterRequest::set_allocated_deviceinfo(::AcFunDanmu::DeviceInfo* deviceinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(deviceinfo_);
  }
  if (deviceinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deviceinfo)->GetArena();
    if (message_arena != submessage_arena) {
      deviceinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deviceinfo, submessage_arena);
    }
    
  } else {
    
  }
  deviceinfo_ = deviceinfo;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.RegisterRequest.deviceInfo)
}

// .AcFunDanmu.EnvInfo envInfo = 3;
inline bool RegisterRequest::_internal_has_envinfo() const {
  return this != internal_default_instance() && envinfo_ != nullptr;
}
inline bool RegisterRequest::has_envinfo() const {
  return _internal_has_envinfo();
}
inline const ::AcFunDanmu::EnvInfo& RegisterRequest::_internal_envinfo() const {
  const ::AcFunDanmu::EnvInfo* p = envinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::EnvInfo&>(
      ::AcFunDanmu::_EnvInfo_default_instance_);
}
inline const ::AcFunDanmu::EnvInfo& RegisterRequest::envinfo() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.RegisterRequest.envInfo)
  return _internal_envinfo();
}
inline void RegisterRequest::unsafe_arena_set_allocated_envinfo(
    ::AcFunDanmu::EnvInfo* envinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(envinfo_);
  }
  envinfo_ = envinfo;
  if (envinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.RegisterRequest.envInfo)
}
inline ::AcFunDanmu::EnvInfo* RegisterRequest::release_envinfo() {
  
  ::AcFunDanmu::EnvInfo* temp = envinfo_;
  envinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::EnvInfo* RegisterRequest::unsafe_arena_release_envinfo() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.RegisterRequest.envInfo)
  
  ::AcFunDanmu::EnvInfo* temp = envinfo_;
  envinfo_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::EnvInfo* RegisterRequest::_internal_mutable_envinfo() {
  
  if (envinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::EnvInfo>(GetArena());
    envinfo_ = p;
  }
  return envinfo_;
}
inline ::AcFunDanmu::EnvInfo* RegisterRequest::mutable_envinfo() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.RegisterRequest.envInfo)
  return _internal_mutable_envinfo();
}
inline void RegisterRequest::set_allocated_envinfo(::AcFunDanmu::EnvInfo* envinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(envinfo_);
  }
  if (envinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(envinfo)->GetArena();
    if (message_arena != submessage_arena) {
      envinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, envinfo, submessage_arena);
    }
    
  } else {
    
  }
  envinfo_ = envinfo;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.RegisterRequest.envInfo)
}

// .AcFunDanmu.RegisterRequest.PresenceStatus presenceStatus = 4;
inline void RegisterRequest::clear_presencestatus() {
  presencestatus_ = 0;
}
inline ::AcFunDanmu::RegisterRequest_PresenceStatus RegisterRequest::_internal_presencestatus() const {
  return static_cast< ::AcFunDanmu::RegisterRequest_PresenceStatus >(presencestatus_);
}
inline ::AcFunDanmu::RegisterRequest_PresenceStatus RegisterRequest::presencestatus() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.RegisterRequest.presenceStatus)
  return _internal_presencestatus();
}
inline void RegisterRequest::_internal_set_presencestatus(::AcFunDanmu::RegisterRequest_PresenceStatus value) {
  
  presencestatus_ = value;
}
inline void RegisterRequest::set_presencestatus(::AcFunDanmu::RegisterRequest_PresenceStatus value) {
  _internal_set_presencestatus(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.RegisterRequest.presenceStatus)
}

// .AcFunDanmu.RegisterRequest.ActiveStatus appActiveStatus = 5;
inline void RegisterRequest::clear_appactivestatus() {
  appactivestatus_ = 0;
}
inline ::AcFunDanmu::RegisterRequest_ActiveStatus RegisterRequest::_internal_appactivestatus() const {
  return static_cast< ::AcFunDanmu::RegisterRequest_ActiveStatus >(appactivestatus_);
}
inline ::AcFunDanmu::RegisterRequest_ActiveStatus RegisterRequest::appactivestatus() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.RegisterRequest.appActiveStatus)
  return _internal_appactivestatus();
}
inline void RegisterRequest::_internal_set_appactivestatus(::AcFunDanmu::RegisterRequest_ActiveStatus value) {
  
  appactivestatus_ = value;
}
inline void RegisterRequest::set_appactivestatus(::AcFunDanmu::RegisterRequest_ActiveStatus value) {
  _internal_set_appactivestatus(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.RegisterRequest.appActiveStatus)
}

// bytes appCustomStatus = 6;
inline void RegisterRequest::clear_appcustomstatus() {
  appcustomstatus_.ClearToEmpty();
}
inline const std::string& RegisterRequest::appcustomstatus() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.RegisterRequest.appCustomStatus)
  return _internal_appcustomstatus();
}
inline void RegisterRequest::set_appcustomstatus(const std::string& value) {
  _internal_set_appcustomstatus(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.RegisterRequest.appCustomStatus)
}
inline std::string* RegisterRequest::mutable_appcustomstatus() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.RegisterRequest.appCustomStatus)
  return _internal_mutable_appcustomstatus();
}
inline const std::string& RegisterRequest::_internal_appcustomstatus() const {
  return appcustomstatus_.Get();
}
inline void RegisterRequest::_internal_set_appcustomstatus(const std::string& value) {
  
  appcustomstatus_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RegisterRequest::set_appcustomstatus(std::string&& value) {
  
  appcustomstatus_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.RegisterRequest.appCustomStatus)
}
inline void RegisterRequest::set_appcustomstatus(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  appcustomstatus_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.RegisterRequest.appCustomStatus)
}
inline void RegisterRequest::set_appcustomstatus(const void* value,
    size_t size) {
  
  appcustomstatus_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.RegisterRequest.appCustomStatus)
}
inline std::string* RegisterRequest::_internal_mutable_appcustomstatus() {
  
  return appcustomstatus_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RegisterRequest::release_appcustomstatus() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.RegisterRequest.appCustomStatus)
  return appcustomstatus_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterRequest::set_allocated_appcustomstatus(std::string* appcustomstatus) {
  if (appcustomstatus != nullptr) {
    
  } else {
    
  }
  appcustomstatus_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), appcustomstatus,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.RegisterRequest.appCustomStatus)
}

// .AcFunDanmu.PushServiceToken pushServiceToken = 7;
inline bool RegisterRequest::_internal_has_pushservicetoken() const {
  return this != internal_default_instance() && pushservicetoken_ != nullptr;
}
inline bool RegisterRequest::has_pushservicetoken() const {
  return _internal_has_pushservicetoken();
}
inline const ::AcFunDanmu::PushServiceToken& RegisterRequest::_internal_pushservicetoken() const {
  const ::AcFunDanmu::PushServiceToken* p = pushservicetoken_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::PushServiceToken&>(
      ::AcFunDanmu::_PushServiceToken_default_instance_);
}
inline const ::AcFunDanmu::PushServiceToken& RegisterRequest::pushservicetoken() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.RegisterRequest.pushServiceToken)
  return _internal_pushservicetoken();
}
inline void RegisterRequest::unsafe_arena_set_allocated_pushservicetoken(
    ::AcFunDanmu::PushServiceToken* pushservicetoken) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pushservicetoken_);
  }
  pushservicetoken_ = pushservicetoken;
  if (pushservicetoken) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.RegisterRequest.pushServiceToken)
}
inline ::AcFunDanmu::PushServiceToken* RegisterRequest::release_pushservicetoken() {
  
  ::AcFunDanmu::PushServiceToken* temp = pushservicetoken_;
  pushservicetoken_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::PushServiceToken* RegisterRequest::unsafe_arena_release_pushservicetoken() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.RegisterRequest.pushServiceToken)
  
  ::AcFunDanmu::PushServiceToken* temp = pushservicetoken_;
  pushservicetoken_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::PushServiceToken* RegisterRequest::_internal_mutable_pushservicetoken() {
  
  if (pushservicetoken_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::PushServiceToken>(GetArena());
    pushservicetoken_ = p;
  }
  return pushservicetoken_;
}
inline ::AcFunDanmu::PushServiceToken* RegisterRequest::mutable_pushservicetoken() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.RegisterRequest.pushServiceToken)
  return _internal_mutable_pushservicetoken();
}
inline void RegisterRequest::set_allocated_pushservicetoken(::AcFunDanmu::PushServiceToken* pushservicetoken) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pushservicetoken_);
  }
  if (pushservicetoken) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pushservicetoken)->GetArena();
    if (message_arena != submessage_arena) {
      pushservicetoken = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pushservicetoken, submessage_arena);
    }
    
  } else {
    
  }
  pushservicetoken_ = pushservicetoken;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.RegisterRequest.pushServiceToken)
}

// int64 instanceId = 8;
inline void RegisterRequest::clear_instanceid() {
  instanceid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RegisterRequest::_internal_instanceid() const {
  return instanceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RegisterRequest::instanceid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.RegisterRequest.instanceId)
  return _internal_instanceid();
}
inline void RegisterRequest::_internal_set_instanceid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  instanceid_ = value;
}
inline void RegisterRequest::set_instanceid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_instanceid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.RegisterRequest.instanceId)
}

// repeated .AcFunDanmu.PushServiceToken pushServiceTokenList = 9;
inline int RegisterRequest::_internal_pushservicetokenlist_size() const {
  return pushservicetokenlist_.size();
}
inline int RegisterRequest::pushservicetokenlist_size() const {
  return _internal_pushservicetokenlist_size();
}
inline ::AcFunDanmu::PushServiceToken* RegisterRequest::mutable_pushservicetokenlist(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.RegisterRequest.pushServiceTokenList)
  return pushservicetokenlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::PushServiceToken >*
RegisterRequest::mutable_pushservicetokenlist() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.RegisterRequest.pushServiceTokenList)
  return &pushservicetokenlist_;
}
inline const ::AcFunDanmu::PushServiceToken& RegisterRequest::_internal_pushservicetokenlist(int index) const {
  return pushservicetokenlist_.Get(index);
}
inline const ::AcFunDanmu::PushServiceToken& RegisterRequest::pushservicetokenlist(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.RegisterRequest.pushServiceTokenList)
  return _internal_pushservicetokenlist(index);
}
inline ::AcFunDanmu::PushServiceToken* RegisterRequest::_internal_add_pushservicetokenlist() {
  return pushservicetokenlist_.Add();
}
inline ::AcFunDanmu::PushServiceToken* RegisterRequest::add_pushservicetokenlist() {
  // @@protoc_insertion_point(field_add:AcFunDanmu.RegisterRequest.pushServiceTokenList)
  return _internal_add_pushservicetokenlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::PushServiceToken >&
RegisterRequest::pushservicetokenlist() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.RegisterRequest.pushServiceTokenList)
  return pushservicetokenlist_;
}

// int32 keepaliveIntervalSec = 10;
inline void RegisterRequest::clear_keepaliveintervalsec() {
  keepaliveintervalsec_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterRequest::_internal_keepaliveintervalsec() const {
  return keepaliveintervalsec_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterRequest::keepaliveintervalsec() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.RegisterRequest.keepaliveIntervalSec)
  return _internal_keepaliveintervalsec();
}
inline void RegisterRequest::_internal_set_keepaliveintervalsec(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  keepaliveintervalsec_ = value;
}
inline void RegisterRequest::set_keepaliveintervalsec(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_keepaliveintervalsec(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.RegisterRequest.keepaliveIntervalSec)
}

// .AcFunDanmu.ZtCommonInfo ztCommonInfo = 11;
inline bool RegisterRequest::_internal_has_ztcommoninfo() const {
  return this != internal_default_instance() && ztcommoninfo_ != nullptr;
}
inline bool RegisterRequest::has_ztcommoninfo() const {
  return _internal_has_ztcommoninfo();
}
inline const ::AcFunDanmu::ZtCommonInfo& RegisterRequest::_internal_ztcommoninfo() const {
  const ::AcFunDanmu::ZtCommonInfo* p = ztcommoninfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::ZtCommonInfo&>(
      ::AcFunDanmu::_ZtCommonInfo_default_instance_);
}
inline const ::AcFunDanmu::ZtCommonInfo& RegisterRequest::ztcommoninfo() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.RegisterRequest.ztCommonInfo)
  return _internal_ztcommoninfo();
}
inline void RegisterRequest::unsafe_arena_set_allocated_ztcommoninfo(
    ::AcFunDanmu::ZtCommonInfo* ztcommoninfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ztcommoninfo_);
  }
  ztcommoninfo_ = ztcommoninfo;
  if (ztcommoninfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.RegisterRequest.ztCommonInfo)
}
inline ::AcFunDanmu::ZtCommonInfo* RegisterRequest::release_ztcommoninfo() {
  
  ::AcFunDanmu::ZtCommonInfo* temp = ztcommoninfo_;
  ztcommoninfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::ZtCommonInfo* RegisterRequest::unsafe_arena_release_ztcommoninfo() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.RegisterRequest.ztCommonInfo)
  
  ::AcFunDanmu::ZtCommonInfo* temp = ztcommoninfo_;
  ztcommoninfo_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::ZtCommonInfo* RegisterRequest::_internal_mutable_ztcommoninfo() {
  
  if (ztcommoninfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::ZtCommonInfo>(GetArena());
    ztcommoninfo_ = p;
  }
  return ztcommoninfo_;
}
inline ::AcFunDanmu::ZtCommonInfo* RegisterRequest::mutable_ztcommoninfo() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.RegisterRequest.ztCommonInfo)
  return _internal_mutable_ztcommoninfo();
}
inline void RegisterRequest::set_allocated_ztcommoninfo(::AcFunDanmu::ZtCommonInfo* ztcommoninfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ztcommoninfo_);
  }
  if (ztcommoninfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ztcommoninfo)->GetArena();
    if (message_arena != submessage_arena) {
      ztcommoninfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ztcommoninfo, submessage_arena);
    }
    
  } else {
    
  }
  ztcommoninfo_ = ztcommoninfo;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.RegisterRequest.ztCommonInfo)
}

// -------------------------------------------------------------------

// RegisterResponse

// .AcFunDanmu.AccessPointsConfig accessPointsConfig = 1;
inline bool RegisterResponse::_internal_has_accesspointsconfig() const {
  return this != internal_default_instance() && accesspointsconfig_ != nullptr;
}
inline bool RegisterResponse::has_accesspointsconfig() const {
  return _internal_has_accesspointsconfig();
}
inline const ::AcFunDanmu::AccessPointsConfig& RegisterResponse::_internal_accesspointsconfig() const {
  const ::AcFunDanmu::AccessPointsConfig* p = accesspointsconfig_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::AccessPointsConfig&>(
      ::AcFunDanmu::_AccessPointsConfig_default_instance_);
}
inline const ::AcFunDanmu::AccessPointsConfig& RegisterResponse::accesspointsconfig() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.RegisterResponse.accessPointsConfig)
  return _internal_accesspointsconfig();
}
inline void RegisterResponse::unsafe_arena_set_allocated_accesspointsconfig(
    ::AcFunDanmu::AccessPointsConfig* accesspointsconfig) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(accesspointsconfig_);
  }
  accesspointsconfig_ = accesspointsconfig;
  if (accesspointsconfig) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.RegisterResponse.accessPointsConfig)
}
inline ::AcFunDanmu::AccessPointsConfig* RegisterResponse::release_accesspointsconfig() {
  
  ::AcFunDanmu::AccessPointsConfig* temp = accesspointsconfig_;
  accesspointsconfig_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::AccessPointsConfig* RegisterResponse::unsafe_arena_release_accesspointsconfig() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.RegisterResponse.accessPointsConfig)
  
  ::AcFunDanmu::AccessPointsConfig* temp = accesspointsconfig_;
  accesspointsconfig_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::AccessPointsConfig* RegisterResponse::_internal_mutable_accesspointsconfig() {
  
  if (accesspointsconfig_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::AccessPointsConfig>(GetArena());
    accesspointsconfig_ = p;
  }
  return accesspointsconfig_;
}
inline ::AcFunDanmu::AccessPointsConfig* RegisterResponse::mutable_accesspointsconfig() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.RegisterResponse.accessPointsConfig)
  return _internal_mutable_accesspointsconfig();
}
inline void RegisterResponse::set_allocated_accesspointsconfig(::AcFunDanmu::AccessPointsConfig* accesspointsconfig) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(accesspointsconfig_);
  }
  if (accesspointsconfig) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(accesspointsconfig)->GetArena();
    if (message_arena != submessage_arena) {
      accesspointsconfig = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accesspointsconfig, submessage_arena);
    }
    
  } else {
    
  }
  accesspointsconfig_ = accesspointsconfig;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.RegisterResponse.accessPointsConfig)
}

// bytes sessKey = 2;
inline void RegisterResponse::clear_sesskey() {
  sesskey_.ClearToEmpty();
}
inline const std::string& RegisterResponse::sesskey() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.RegisterResponse.sessKey)
  return _internal_sesskey();
}
inline void RegisterResponse::set_sesskey(const std::string& value) {
  _internal_set_sesskey(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.RegisterResponse.sessKey)
}
inline std::string* RegisterResponse::mutable_sesskey() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.RegisterResponse.sessKey)
  return _internal_mutable_sesskey();
}
inline const std::string& RegisterResponse::_internal_sesskey() const {
  return sesskey_.Get();
}
inline void RegisterResponse::_internal_set_sesskey(const std::string& value) {
  
  sesskey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RegisterResponse::set_sesskey(std::string&& value) {
  
  sesskey_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.RegisterResponse.sessKey)
}
inline void RegisterResponse::set_sesskey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sesskey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.RegisterResponse.sessKey)
}
inline void RegisterResponse::set_sesskey(const void* value,
    size_t size) {
  
  sesskey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.RegisterResponse.sessKey)
}
inline std::string* RegisterResponse::_internal_mutable_sesskey() {
  
  return sesskey_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RegisterResponse::release_sesskey() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.RegisterResponse.sessKey)
  return sesskey_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterResponse::set_allocated_sesskey(std::string* sesskey) {
  if (sesskey != nullptr) {
    
  } else {
    
  }
  sesskey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sesskey,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.RegisterResponse.sessKey)
}

// int64 instanceId = 3;
inline void RegisterResponse::clear_instanceid() {
  instanceid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RegisterResponse::_internal_instanceid() const {
  return instanceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RegisterResponse::instanceid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.RegisterResponse.instanceId)
  return _internal_instanceid();
}
inline void RegisterResponse::_internal_set_instanceid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  instanceid_ = value;
}
inline void RegisterResponse::set_instanceid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_instanceid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.RegisterResponse.instanceId)
}

// .AcFunDanmu.SdkOption sdkOption = 4;
inline bool RegisterResponse::_internal_has_sdkoption() const {
  return this != internal_default_instance() && sdkoption_ != nullptr;
}
inline bool RegisterResponse::has_sdkoption() const {
  return _internal_has_sdkoption();
}
inline const ::AcFunDanmu::SdkOption& RegisterResponse::_internal_sdkoption() const {
  const ::AcFunDanmu::SdkOption* p = sdkoption_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::SdkOption&>(
      ::AcFunDanmu::_SdkOption_default_instance_);
}
inline const ::AcFunDanmu::SdkOption& RegisterResponse::sdkoption() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.RegisterResponse.sdkOption)
  return _internal_sdkoption();
}
inline void RegisterResponse::unsafe_arena_set_allocated_sdkoption(
    ::AcFunDanmu::SdkOption* sdkoption) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sdkoption_);
  }
  sdkoption_ = sdkoption;
  if (sdkoption) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.RegisterResponse.sdkOption)
}
inline ::AcFunDanmu::SdkOption* RegisterResponse::release_sdkoption() {
  
  ::AcFunDanmu::SdkOption* temp = sdkoption_;
  sdkoption_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::SdkOption* RegisterResponse::unsafe_arena_release_sdkoption() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.RegisterResponse.sdkOption)
  
  ::AcFunDanmu::SdkOption* temp = sdkoption_;
  sdkoption_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::SdkOption* RegisterResponse::_internal_mutable_sdkoption() {
  
  if (sdkoption_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::SdkOption>(GetArena());
    sdkoption_ = p;
  }
  return sdkoption_;
}
inline ::AcFunDanmu::SdkOption* RegisterResponse::mutable_sdkoption() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.RegisterResponse.sdkOption)
  return _internal_mutable_sdkoption();
}
inline void RegisterResponse::set_allocated_sdkoption(::AcFunDanmu::SdkOption* sdkoption) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sdkoption_);
  }
  if (sdkoption) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sdkoption)->GetArena();
    if (message_arena != submessage_arena) {
      sdkoption = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sdkoption, submessage_arena);
    }
    
  } else {
    
  }
  sdkoption_ = sdkoption;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.RegisterResponse.sdkOption)
}

// .AcFunDanmu.AccessPointsConfig accessPointsCOnfigIpv6 = 5;
inline bool RegisterResponse::_internal_has_accesspointsconfigipv6() const {
  return this != internal_default_instance() && accesspointsconfigipv6_ != nullptr;
}
inline bool RegisterResponse::has_accesspointsconfigipv6() const {
  return _internal_has_accesspointsconfigipv6();
}
inline const ::AcFunDanmu::AccessPointsConfig& RegisterResponse::_internal_accesspointsconfigipv6() const {
  const ::AcFunDanmu::AccessPointsConfig* p = accesspointsconfigipv6_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::AccessPointsConfig&>(
      ::AcFunDanmu::_AccessPointsConfig_default_instance_);
}
inline const ::AcFunDanmu::AccessPointsConfig& RegisterResponse::accesspointsconfigipv6() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.RegisterResponse.accessPointsCOnfigIpv6)
  return _internal_accesspointsconfigipv6();
}
inline void RegisterResponse::unsafe_arena_set_allocated_accesspointsconfigipv6(
    ::AcFunDanmu::AccessPointsConfig* accesspointsconfigipv6) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(accesspointsconfigipv6_);
  }
  accesspointsconfigipv6_ = accesspointsconfigipv6;
  if (accesspointsconfigipv6) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.RegisterResponse.accessPointsCOnfigIpv6)
}
inline ::AcFunDanmu::AccessPointsConfig* RegisterResponse::release_accesspointsconfigipv6() {
  
  ::AcFunDanmu::AccessPointsConfig* temp = accesspointsconfigipv6_;
  accesspointsconfigipv6_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::AccessPointsConfig* RegisterResponse::unsafe_arena_release_accesspointsconfigipv6() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.RegisterResponse.accessPointsCOnfigIpv6)
  
  ::AcFunDanmu::AccessPointsConfig* temp = accesspointsconfigipv6_;
  accesspointsconfigipv6_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::AccessPointsConfig* RegisterResponse::_internal_mutable_accesspointsconfigipv6() {
  
  if (accesspointsconfigipv6_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::AccessPointsConfig>(GetArena());
    accesspointsconfigipv6_ = p;
  }
  return accesspointsconfigipv6_;
}
inline ::AcFunDanmu::AccessPointsConfig* RegisterResponse::mutable_accesspointsconfigipv6() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.RegisterResponse.accessPointsCOnfigIpv6)
  return _internal_mutable_accesspointsconfigipv6();
}
inline void RegisterResponse::set_allocated_accesspointsconfigipv6(::AcFunDanmu::AccessPointsConfig* accesspointsconfigipv6) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(accesspointsconfigipv6_);
  }
  if (accesspointsconfigipv6) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(accesspointsconfigipv6)->GetArena();
    if (message_arena != submessage_arena) {
      accesspointsconfigipv6 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accesspointsconfigipv6, submessage_arena);
    }
    
  } else {
    
  }
  accesspointsconfigipv6_ = accesspointsconfigipv6;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.RegisterResponse.accessPointsCOnfigIpv6)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace AcFunDanmu

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::AcFunDanmu::RegisterRequest_PresenceStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::RegisterRequest_PresenceStatus>() {
  return ::AcFunDanmu::RegisterRequest_PresenceStatus_descriptor();
}
template <> struct is_proto_enum< ::AcFunDanmu::RegisterRequest_ActiveStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::RegisterRequest_ActiveStatus>() {
  return ::AcFunDanmu::RegisterRequest_ActiveStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Register_2eproto
