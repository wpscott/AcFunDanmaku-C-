// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ZtLiveCsEnterRoom.proto

#include "ZtLiveCsEnterRoom.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace AcFunDanmu {
class ZtLiveCsEnterRoomDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ZtLiveCsEnterRoom> _instance;
} _ZtLiveCsEnterRoom_default_instance_;
class ZtLiveCsEnterRoomAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ZtLiveCsEnterRoomAck> _instance;
} _ZtLiveCsEnterRoomAck_default_instance_;
}  // namespace AcFunDanmu
static void InitDefaultsscc_info_ZtLiveCsEnterRoom_ZtLiveCsEnterRoom_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AcFunDanmu::_ZtLiveCsEnterRoom_default_instance_;
    new (ptr) ::AcFunDanmu::ZtLiveCsEnterRoom();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AcFunDanmu::ZtLiveCsEnterRoom::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ZtLiveCsEnterRoom_ZtLiveCsEnterRoom_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ZtLiveCsEnterRoom_ZtLiveCsEnterRoom_2eproto}, {}};

static void InitDefaultsscc_info_ZtLiveCsEnterRoomAck_ZtLiveCsEnterRoom_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AcFunDanmu::_ZtLiveCsEnterRoomAck_default_instance_;
    new (ptr) ::AcFunDanmu::ZtLiveCsEnterRoomAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AcFunDanmu::ZtLiveCsEnterRoomAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ZtLiveCsEnterRoomAck_ZtLiveCsEnterRoom_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ZtLiveCsEnterRoomAck_ZtLiveCsEnterRoom_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ZtLiveCsEnterRoom_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ZtLiveCsEnterRoom_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ZtLiveCsEnterRoom_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ZtLiveCsEnterRoom_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::ZtLiveCsEnterRoom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::ZtLiveCsEnterRoom, isauthor_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::ZtLiveCsEnterRoom, reconnectcount_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::ZtLiveCsEnterRoom, lasterrorcode_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::ZtLiveCsEnterRoom, enterroomattach_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::ZtLiveCsEnterRoom, clientlivesdkversion_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::ZtLiveCsEnterRoomAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::ZtLiveCsEnterRoomAck, heartbeatintervalms_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::AcFunDanmu::ZtLiveCsEnterRoom)},
  { 10, -1, sizeof(::AcFunDanmu::ZtLiveCsEnterRoomAck)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AcFunDanmu::_ZtLiveCsEnterRoom_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AcFunDanmu::_ZtLiveCsEnterRoomAck_default_instance_),
};

const char descriptor_table_protodef_ZtLiveCsEnterRoom_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027ZtLiveCsEnterRoom.proto\022\nAcFunDanmu\"\213\001"
  "\n\021ZtLiveCsEnterRoom\022\020\n\010isAuthor\030\001 \001(\010\022\026\n"
  "\016reconnectCount\030\002 \001(\005\022\025\n\rlastErrorCode\030\003"
  " \001(\005\022\027\n\017enterRoomAttach\030\004 \001(\t\022\034\n\024clientL"
  "iveSdkVersion\030\005 \001(\t\"3\n\024ZtLiveCsEnterRoom"
  "Ack\022\033\n\023heartbeatIntervalMs\030\001 \001(\003b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ZtLiveCsEnterRoom_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ZtLiveCsEnterRoom_2eproto_sccs[2] = {
  &scc_info_ZtLiveCsEnterRoom_ZtLiveCsEnterRoom_2eproto.base,
  &scc_info_ZtLiveCsEnterRoomAck_ZtLiveCsEnterRoom_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ZtLiveCsEnterRoom_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ZtLiveCsEnterRoom_2eproto = {
  false, false, descriptor_table_protodef_ZtLiveCsEnterRoom_2eproto, "ZtLiveCsEnterRoom.proto", 240,
  &descriptor_table_ZtLiveCsEnterRoom_2eproto_once, descriptor_table_ZtLiveCsEnterRoom_2eproto_sccs, descriptor_table_ZtLiveCsEnterRoom_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_ZtLiveCsEnterRoom_2eproto::offsets,
  file_level_metadata_ZtLiveCsEnterRoom_2eproto, 2, file_level_enum_descriptors_ZtLiveCsEnterRoom_2eproto, file_level_service_descriptors_ZtLiveCsEnterRoom_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ZtLiveCsEnterRoom_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ZtLiveCsEnterRoom_2eproto)), true);
namespace AcFunDanmu {

// ===================================================================

void ZtLiveCsEnterRoom::InitAsDefaultInstance() {
}
class ZtLiveCsEnterRoom::_Internal {
 public:
};

ZtLiveCsEnterRoom::ZtLiveCsEnterRoom(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.ZtLiveCsEnterRoom)
}
ZtLiveCsEnterRoom::ZtLiveCsEnterRoom(const ZtLiveCsEnterRoom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enterroomattach_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_enterroomattach().empty()) {
    enterroomattach_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enterroomattach(),
      GetArena());
  }
  clientlivesdkversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_clientlivesdkversion().empty()) {
    clientlivesdkversion_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_clientlivesdkversion(),
      GetArena());
  }
  ::memcpy(&isauthor_, &from.isauthor_,
    static_cast<size_t>(reinterpret_cast<char*>(&lasterrorcode_) -
    reinterpret_cast<char*>(&isauthor_)) + sizeof(lasterrorcode_));
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.ZtLiveCsEnterRoom)
}

void ZtLiveCsEnterRoom::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ZtLiveCsEnterRoom_ZtLiveCsEnterRoom_2eproto.base);
  enterroomattach_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientlivesdkversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&isauthor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lasterrorcode_) -
      reinterpret_cast<char*>(&isauthor_)) + sizeof(lasterrorcode_));
}

ZtLiveCsEnterRoom::~ZtLiveCsEnterRoom() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.ZtLiveCsEnterRoom)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ZtLiveCsEnterRoom::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enterroomattach_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientlivesdkversion_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ZtLiveCsEnterRoom::ArenaDtor(void* object) {
  ZtLiveCsEnterRoom* _this = reinterpret_cast< ZtLiveCsEnterRoom* >(object);
  (void)_this;
}
void ZtLiveCsEnterRoom::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ZtLiveCsEnterRoom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ZtLiveCsEnterRoom& ZtLiveCsEnterRoom::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ZtLiveCsEnterRoom_ZtLiveCsEnterRoom_2eproto.base);
  return *internal_default_instance();
}


void ZtLiveCsEnterRoom::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.ZtLiveCsEnterRoom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enterroomattach_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  clientlivesdkversion_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&isauthor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lasterrorcode_) -
      reinterpret_cast<char*>(&isauthor_)) + sizeof(lasterrorcode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ZtLiveCsEnterRoom::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool isAuthor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          isauthor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 reconnectCount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          reconnectcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lastErrorCode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          lasterrorcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string enterRoomAttach = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_enterroomattach();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AcFunDanmu.ZtLiveCsEnterRoom.enterRoomAttach"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string clientLiveSdkVersion = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_clientlivesdkversion();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AcFunDanmu.ZtLiveCsEnterRoom.clientLiveSdkVersion"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ZtLiveCsEnterRoom::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.ZtLiveCsEnterRoom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isAuthor = 1;
  if (this->isauthor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_isauthor(), target);
  }

  // int32 reconnectCount = 2;
  if (this->reconnectcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_reconnectcount(), target);
  }

  // int32 lastErrorCode = 3;
  if (this->lasterrorcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_lasterrorcode(), target);
  }

  // string enterRoomAttach = 4;
  if (this->enterroomattach().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_enterroomattach().data(), static_cast<int>(this->_internal_enterroomattach().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.ZtLiveCsEnterRoom.enterRoomAttach");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_enterroomattach(), target);
  }

  // string clientLiveSdkVersion = 5;
  if (this->clientlivesdkversion().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientlivesdkversion().data(), static_cast<int>(this->_internal_clientlivesdkversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.ZtLiveCsEnterRoom.clientLiveSdkVersion");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_clientlivesdkversion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.ZtLiveCsEnterRoom)
  return target;
}

size_t ZtLiveCsEnterRoom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.ZtLiveCsEnterRoom)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string enterRoomAttach = 4;
  if (this->enterroomattach().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enterroomattach());
  }

  // string clientLiveSdkVersion = 5;
  if (this->clientlivesdkversion().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientlivesdkversion());
  }

  // bool isAuthor = 1;
  if (this->isauthor() != 0) {
    total_size += 1 + 1;
  }

  // int32 reconnectCount = 2;
  if (this->reconnectcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reconnectcount());
  }

  // int32 lastErrorCode = 3;
  if (this->lasterrorcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lasterrorcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ZtLiveCsEnterRoom::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AcFunDanmu.ZtLiveCsEnterRoom)
  GOOGLE_DCHECK_NE(&from, this);
  const ZtLiveCsEnterRoom* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ZtLiveCsEnterRoom>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AcFunDanmu.ZtLiveCsEnterRoom)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AcFunDanmu.ZtLiveCsEnterRoom)
    MergeFrom(*source);
  }
}

void ZtLiveCsEnterRoom::MergeFrom(const ZtLiveCsEnterRoom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.ZtLiveCsEnterRoom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enterroomattach().size() > 0) {
    _internal_set_enterroomattach(from._internal_enterroomattach());
  }
  if (from.clientlivesdkversion().size() > 0) {
    _internal_set_clientlivesdkversion(from._internal_clientlivesdkversion());
  }
  if (from.isauthor() != 0) {
    _internal_set_isauthor(from._internal_isauthor());
  }
  if (from.reconnectcount() != 0) {
    _internal_set_reconnectcount(from._internal_reconnectcount());
  }
  if (from.lasterrorcode() != 0) {
    _internal_set_lasterrorcode(from._internal_lasterrorcode());
  }
}

void ZtLiveCsEnterRoom::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AcFunDanmu.ZtLiveCsEnterRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZtLiveCsEnterRoom::CopyFrom(const ZtLiveCsEnterRoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.ZtLiveCsEnterRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZtLiveCsEnterRoom::IsInitialized() const {
  return true;
}

void ZtLiveCsEnterRoom::InternalSwap(ZtLiveCsEnterRoom* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  enterroomattach_.Swap(&other->enterroomattach_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  clientlivesdkversion_.Swap(&other->clientlivesdkversion_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ZtLiveCsEnterRoom, lasterrorcode_)
      + sizeof(ZtLiveCsEnterRoom::lasterrorcode_)
      - PROTOBUF_FIELD_OFFSET(ZtLiveCsEnterRoom, isauthor_)>(
          reinterpret_cast<char*>(&isauthor_),
          reinterpret_cast<char*>(&other->isauthor_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ZtLiveCsEnterRoom::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ZtLiveCsEnterRoomAck::InitAsDefaultInstance() {
}
class ZtLiveCsEnterRoomAck::_Internal {
 public:
};

ZtLiveCsEnterRoomAck::ZtLiveCsEnterRoomAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.ZtLiveCsEnterRoomAck)
}
ZtLiveCsEnterRoomAck::ZtLiveCsEnterRoomAck(const ZtLiveCsEnterRoomAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  heartbeatintervalms_ = from.heartbeatintervalms_;
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.ZtLiveCsEnterRoomAck)
}

void ZtLiveCsEnterRoomAck::SharedCtor() {
  heartbeatintervalms_ = PROTOBUF_LONGLONG(0);
}

ZtLiveCsEnterRoomAck::~ZtLiveCsEnterRoomAck() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.ZtLiveCsEnterRoomAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ZtLiveCsEnterRoomAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ZtLiveCsEnterRoomAck::ArenaDtor(void* object) {
  ZtLiveCsEnterRoomAck* _this = reinterpret_cast< ZtLiveCsEnterRoomAck* >(object);
  (void)_this;
}
void ZtLiveCsEnterRoomAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ZtLiveCsEnterRoomAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ZtLiveCsEnterRoomAck& ZtLiveCsEnterRoomAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ZtLiveCsEnterRoomAck_ZtLiveCsEnterRoom_2eproto.base);
  return *internal_default_instance();
}


void ZtLiveCsEnterRoomAck::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.ZtLiveCsEnterRoomAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  heartbeatintervalms_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ZtLiveCsEnterRoomAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 heartbeatIntervalMs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          heartbeatintervalms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ZtLiveCsEnterRoomAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.ZtLiveCsEnterRoomAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 heartbeatIntervalMs = 1;
  if (this->heartbeatintervalms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_heartbeatintervalms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.ZtLiveCsEnterRoomAck)
  return target;
}

size_t ZtLiveCsEnterRoomAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.ZtLiveCsEnterRoomAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 heartbeatIntervalMs = 1;
  if (this->heartbeatintervalms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_heartbeatintervalms());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ZtLiveCsEnterRoomAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AcFunDanmu.ZtLiveCsEnterRoomAck)
  GOOGLE_DCHECK_NE(&from, this);
  const ZtLiveCsEnterRoomAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ZtLiveCsEnterRoomAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AcFunDanmu.ZtLiveCsEnterRoomAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AcFunDanmu.ZtLiveCsEnterRoomAck)
    MergeFrom(*source);
  }
}

void ZtLiveCsEnterRoomAck::MergeFrom(const ZtLiveCsEnterRoomAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.ZtLiveCsEnterRoomAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.heartbeatintervalms() != 0) {
    _internal_set_heartbeatintervalms(from._internal_heartbeatintervalms());
  }
}

void ZtLiveCsEnterRoomAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AcFunDanmu.ZtLiveCsEnterRoomAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZtLiveCsEnterRoomAck::CopyFrom(const ZtLiveCsEnterRoomAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.ZtLiveCsEnterRoomAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZtLiveCsEnterRoomAck::IsInitialized() const {
  return true;
}

void ZtLiveCsEnterRoomAck::InternalSwap(ZtLiveCsEnterRoomAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(heartbeatintervalms_, other->heartbeatintervalms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ZtLiveCsEnterRoomAck::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AcFunDanmu::ZtLiveCsEnterRoom* Arena::CreateMaybeMessage< ::AcFunDanmu::ZtLiveCsEnterRoom >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::ZtLiveCsEnterRoom >(arena);
}
template<> PROTOBUF_NOINLINE ::AcFunDanmu::ZtLiveCsEnterRoomAck* Arena::CreateMaybeMessage< ::AcFunDanmu::ZtLiveCsEnterRoomAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::ZtLiveCsEnterRoomAck >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
