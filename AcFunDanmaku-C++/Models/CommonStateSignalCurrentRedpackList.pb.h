// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommonStateSignalCurrentRedpackList.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_CommonStateSignalCurrentRedpackList_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_CommonStateSignalCurrentRedpackList_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ZtLiveUserInfo.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_CommonStateSignalCurrentRedpackList_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_CommonStateSignalCurrentRedpackList_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_CommonStateSignalCurrentRedpackList_2eproto;
namespace AcFunDanmu {
class CommonStateSignalCurrentRedpackList;
class CommonStateSignalCurrentRedpackListDefaultTypeInternal;
extern CommonStateSignalCurrentRedpackListDefaultTypeInternal _CommonStateSignalCurrentRedpackList_default_instance_;
class CommonStateSignalCurrentRedpackList_Redpack;
class CommonStateSignalCurrentRedpackList_RedpackDefaultTypeInternal;
extern CommonStateSignalCurrentRedpackList_RedpackDefaultTypeInternal _CommonStateSignalCurrentRedpackList_Redpack_default_instance_;
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::CommonStateSignalCurrentRedpackList* Arena::CreateMaybeMessage<::AcFunDanmu::CommonStateSignalCurrentRedpackList>(Arena*);
template<> ::AcFunDanmu::CommonStateSignalCurrentRedpackList_Redpack* Arena::CreateMaybeMessage<::AcFunDanmu::CommonStateSignalCurrentRedpackList_Redpack>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {

enum CommonStateSignalCurrentRedpackList_RedpackDisplayStatus : int {
  CommonStateSignalCurrentRedpackList_RedpackDisplayStatus_SHOW = 0,
  CommonStateSignalCurrentRedpackList_RedpackDisplayStatus_GET_TOKEN = 1,
  CommonStateSignalCurrentRedpackList_RedpackDisplayStatus_GRAB = 2,
  CommonStateSignalCurrentRedpackList_RedpackDisplayStatus_CommonStateSignalCurrentRedpackList_RedpackDisplayStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CommonStateSignalCurrentRedpackList_RedpackDisplayStatus_CommonStateSignalCurrentRedpackList_RedpackDisplayStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CommonStateSignalCurrentRedpackList_RedpackDisplayStatus_IsValid(int value);
constexpr CommonStateSignalCurrentRedpackList_RedpackDisplayStatus CommonStateSignalCurrentRedpackList_RedpackDisplayStatus_RedpackDisplayStatus_MIN = CommonStateSignalCurrentRedpackList_RedpackDisplayStatus_SHOW;
constexpr CommonStateSignalCurrentRedpackList_RedpackDisplayStatus CommonStateSignalCurrentRedpackList_RedpackDisplayStatus_RedpackDisplayStatus_MAX = CommonStateSignalCurrentRedpackList_RedpackDisplayStatus_GRAB;
constexpr int CommonStateSignalCurrentRedpackList_RedpackDisplayStatus_RedpackDisplayStatus_ARRAYSIZE = CommonStateSignalCurrentRedpackList_RedpackDisplayStatus_RedpackDisplayStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommonStateSignalCurrentRedpackList_RedpackDisplayStatus_descriptor();
template<typename T>
inline const std::string& CommonStateSignalCurrentRedpackList_RedpackDisplayStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CommonStateSignalCurrentRedpackList_RedpackDisplayStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CommonStateSignalCurrentRedpackList_RedpackDisplayStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CommonStateSignalCurrentRedpackList_RedpackDisplayStatus_descriptor(), enum_t_value);
}
inline bool CommonStateSignalCurrentRedpackList_RedpackDisplayStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CommonStateSignalCurrentRedpackList_RedpackDisplayStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CommonStateSignalCurrentRedpackList_RedpackDisplayStatus>(
    CommonStateSignalCurrentRedpackList_RedpackDisplayStatus_descriptor(), name, value);
}
// ===================================================================

class CommonStateSignalCurrentRedpackList_Redpack PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.CommonStateSignalCurrentRedpackList.Redpack) */ {
 public:
  inline CommonStateSignalCurrentRedpackList_Redpack() : CommonStateSignalCurrentRedpackList_Redpack(nullptr) {}
  virtual ~CommonStateSignalCurrentRedpackList_Redpack();

  CommonStateSignalCurrentRedpackList_Redpack(const CommonStateSignalCurrentRedpackList_Redpack& from);
  CommonStateSignalCurrentRedpackList_Redpack(CommonStateSignalCurrentRedpackList_Redpack&& from) noexcept
    : CommonStateSignalCurrentRedpackList_Redpack() {
    *this = ::std::move(from);
  }

  inline CommonStateSignalCurrentRedpackList_Redpack& operator=(const CommonStateSignalCurrentRedpackList_Redpack& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonStateSignalCurrentRedpackList_Redpack& operator=(CommonStateSignalCurrentRedpackList_Redpack&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommonStateSignalCurrentRedpackList_Redpack& default_instance();

  static inline const CommonStateSignalCurrentRedpackList_Redpack* internal_default_instance() {
    return reinterpret_cast<const CommonStateSignalCurrentRedpackList_Redpack*>(
               &_CommonStateSignalCurrentRedpackList_Redpack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CommonStateSignalCurrentRedpackList_Redpack& a, CommonStateSignalCurrentRedpackList_Redpack& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonStateSignalCurrentRedpackList_Redpack* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonStateSignalCurrentRedpackList_Redpack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommonStateSignalCurrentRedpackList_Redpack* New() const final {
    return CreateMaybeMessage<CommonStateSignalCurrentRedpackList_Redpack>(nullptr);
  }

  CommonStateSignalCurrentRedpackList_Redpack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommonStateSignalCurrentRedpackList_Redpack>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommonStateSignalCurrentRedpackList_Redpack& from);
  void MergeFrom(const CommonStateSignalCurrentRedpackList_Redpack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonStateSignalCurrentRedpackList_Redpack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.CommonStateSignalCurrentRedpackList.Redpack";
  }
  protected:
  explicit CommonStateSignalCurrentRedpackList_Redpack(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CommonStateSignalCurrentRedpackList_2eproto);
    return ::descriptor_table_CommonStateSignalCurrentRedpackList_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRedPackIdFieldNumber = 5,
    kRedpackBizUnitFieldNumber = 6,
    kSenderFieldNumber = 1,
    kGrabBeginTimeMsFieldNumber = 3,
    kGetTokenLatestTimeMsFieldNumber = 4,
    kRedpackAmountFieldNumber = 7,
    kSettleBeginTimeFieldNumber = 8,
    kDisplayStatusFieldNumber = 2,
  };
  // string redPackId = 5;
  void clear_redpackid();
  const std::string& redpackid() const;
  void set_redpackid(const std::string& value);
  void set_redpackid(std::string&& value);
  void set_redpackid(const char* value);
  void set_redpackid(const char* value, size_t size);
  std::string* mutable_redpackid();
  std::string* release_redpackid();
  void set_allocated_redpackid(std::string* redpackid);
  private:
  const std::string& _internal_redpackid() const;
  void _internal_set_redpackid(const std::string& value);
  std::string* _internal_mutable_redpackid();
  public:

  // string redpackBizUnit = 6;
  void clear_redpackbizunit();
  const std::string& redpackbizunit() const;
  void set_redpackbizunit(const std::string& value);
  void set_redpackbizunit(std::string&& value);
  void set_redpackbizunit(const char* value);
  void set_redpackbizunit(const char* value, size_t size);
  std::string* mutable_redpackbizunit();
  std::string* release_redpackbizunit();
  void set_allocated_redpackbizunit(std::string* redpackbizunit);
  private:
  const std::string& _internal_redpackbizunit() const;
  void _internal_set_redpackbizunit(const std::string& value);
  std::string* _internal_mutable_redpackbizunit();
  public:

  // .AcFunDanmu.ZtLiveUserInfo sender = 1;
  bool has_sender() const;
  private:
  bool _internal_has_sender() const;
  public:
  void clear_sender();
  const ::AcFunDanmu::ZtLiveUserInfo& sender() const;
  ::AcFunDanmu::ZtLiveUserInfo* release_sender();
  ::AcFunDanmu::ZtLiveUserInfo* mutable_sender();
  void set_allocated_sender(::AcFunDanmu::ZtLiveUserInfo* sender);
  private:
  const ::AcFunDanmu::ZtLiveUserInfo& _internal_sender() const;
  ::AcFunDanmu::ZtLiveUserInfo* _internal_mutable_sender();
  public:
  void unsafe_arena_set_allocated_sender(
      ::AcFunDanmu::ZtLiveUserInfo* sender);
  ::AcFunDanmu::ZtLiveUserInfo* unsafe_arena_release_sender();

  // int64 grabBeginTimeMs = 3;
  void clear_grabbegintimems();
  ::PROTOBUF_NAMESPACE_ID::int64 grabbegintimems() const;
  void set_grabbegintimems(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_grabbegintimems() const;
  void _internal_set_grabbegintimems(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 getTokenLatestTimeMs = 4;
  void clear_gettokenlatesttimems();
  ::PROTOBUF_NAMESPACE_ID::int64 gettokenlatesttimems() const;
  void set_gettokenlatesttimems(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_gettokenlatesttimems() const;
  void _internal_set_gettokenlatesttimems(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 redpackAmount = 7;
  void clear_redpackamount();
  ::PROTOBUF_NAMESPACE_ID::int64 redpackamount() const;
  void set_redpackamount(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_redpackamount() const;
  void _internal_set_redpackamount(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 settleBeginTime = 8;
  void clear_settlebegintime();
  ::PROTOBUF_NAMESPACE_ID::int64 settlebegintime() const;
  void set_settlebegintime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_settlebegintime() const;
  void _internal_set_settlebegintime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .AcFunDanmu.CommonStateSignalCurrentRedpackList.RedpackDisplayStatus displayStatus = 2;
  void clear_displaystatus();
  ::AcFunDanmu::CommonStateSignalCurrentRedpackList_RedpackDisplayStatus displaystatus() const;
  void set_displaystatus(::AcFunDanmu::CommonStateSignalCurrentRedpackList_RedpackDisplayStatus value);
  private:
  ::AcFunDanmu::CommonStateSignalCurrentRedpackList_RedpackDisplayStatus _internal_displaystatus() const;
  void _internal_set_displaystatus(::AcFunDanmu::CommonStateSignalCurrentRedpackList_RedpackDisplayStatus value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.CommonStateSignalCurrentRedpackList.Redpack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr redpackid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr redpackbizunit_;
  ::AcFunDanmu::ZtLiveUserInfo* sender_;
  ::PROTOBUF_NAMESPACE_ID::int64 grabbegintimems_;
  ::PROTOBUF_NAMESPACE_ID::int64 gettokenlatesttimems_;
  ::PROTOBUF_NAMESPACE_ID::int64 redpackamount_;
  ::PROTOBUF_NAMESPACE_ID::int64 settlebegintime_;
  int displaystatus_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CommonStateSignalCurrentRedpackList_2eproto;
};
// -------------------------------------------------------------------

class CommonStateSignalCurrentRedpackList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.CommonStateSignalCurrentRedpackList) */ {
 public:
  inline CommonStateSignalCurrentRedpackList() : CommonStateSignalCurrentRedpackList(nullptr) {}
  virtual ~CommonStateSignalCurrentRedpackList();

  CommonStateSignalCurrentRedpackList(const CommonStateSignalCurrentRedpackList& from);
  CommonStateSignalCurrentRedpackList(CommonStateSignalCurrentRedpackList&& from) noexcept
    : CommonStateSignalCurrentRedpackList() {
    *this = ::std::move(from);
  }

  inline CommonStateSignalCurrentRedpackList& operator=(const CommonStateSignalCurrentRedpackList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonStateSignalCurrentRedpackList& operator=(CommonStateSignalCurrentRedpackList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommonStateSignalCurrentRedpackList& default_instance();

  static inline const CommonStateSignalCurrentRedpackList* internal_default_instance() {
    return reinterpret_cast<const CommonStateSignalCurrentRedpackList*>(
               &_CommonStateSignalCurrentRedpackList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CommonStateSignalCurrentRedpackList& a, CommonStateSignalCurrentRedpackList& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonStateSignalCurrentRedpackList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonStateSignalCurrentRedpackList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommonStateSignalCurrentRedpackList* New() const final {
    return CreateMaybeMessage<CommonStateSignalCurrentRedpackList>(nullptr);
  }

  CommonStateSignalCurrentRedpackList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommonStateSignalCurrentRedpackList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommonStateSignalCurrentRedpackList& from);
  void MergeFrom(const CommonStateSignalCurrentRedpackList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonStateSignalCurrentRedpackList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.CommonStateSignalCurrentRedpackList";
  }
  protected:
  explicit CommonStateSignalCurrentRedpackList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CommonStateSignalCurrentRedpackList_2eproto);
    return ::descriptor_table_CommonStateSignalCurrentRedpackList_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CommonStateSignalCurrentRedpackList_Redpack Redpack;

  typedef CommonStateSignalCurrentRedpackList_RedpackDisplayStatus RedpackDisplayStatus;
  static constexpr RedpackDisplayStatus SHOW =
    CommonStateSignalCurrentRedpackList_RedpackDisplayStatus_SHOW;
  static constexpr RedpackDisplayStatus GET_TOKEN =
    CommonStateSignalCurrentRedpackList_RedpackDisplayStatus_GET_TOKEN;
  static constexpr RedpackDisplayStatus GRAB =
    CommonStateSignalCurrentRedpackList_RedpackDisplayStatus_GRAB;
  static inline bool RedpackDisplayStatus_IsValid(int value) {
    return CommonStateSignalCurrentRedpackList_RedpackDisplayStatus_IsValid(value);
  }
  static constexpr RedpackDisplayStatus RedpackDisplayStatus_MIN =
    CommonStateSignalCurrentRedpackList_RedpackDisplayStatus_RedpackDisplayStatus_MIN;
  static constexpr RedpackDisplayStatus RedpackDisplayStatus_MAX =
    CommonStateSignalCurrentRedpackList_RedpackDisplayStatus_RedpackDisplayStatus_MAX;
  static constexpr int RedpackDisplayStatus_ARRAYSIZE =
    CommonStateSignalCurrentRedpackList_RedpackDisplayStatus_RedpackDisplayStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RedpackDisplayStatus_descriptor() {
    return CommonStateSignalCurrentRedpackList_RedpackDisplayStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& RedpackDisplayStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RedpackDisplayStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RedpackDisplayStatus_Name.");
    return CommonStateSignalCurrentRedpackList_RedpackDisplayStatus_Name(enum_t_value);
  }
  static inline bool RedpackDisplayStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RedpackDisplayStatus* value) {
    return CommonStateSignalCurrentRedpackList_RedpackDisplayStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRedpacksFieldNumber = 1,
  };
  // repeated .AcFunDanmu.CommonStateSignalCurrentRedpackList.Redpack redpacks = 1;
  int redpacks_size() const;
  private:
  int _internal_redpacks_size() const;
  public:
  void clear_redpacks();
  ::AcFunDanmu::CommonStateSignalCurrentRedpackList_Redpack* mutable_redpacks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::CommonStateSignalCurrentRedpackList_Redpack >*
      mutable_redpacks();
  private:
  const ::AcFunDanmu::CommonStateSignalCurrentRedpackList_Redpack& _internal_redpacks(int index) const;
  ::AcFunDanmu::CommonStateSignalCurrentRedpackList_Redpack* _internal_add_redpacks();
  public:
  const ::AcFunDanmu::CommonStateSignalCurrentRedpackList_Redpack& redpacks(int index) const;
  ::AcFunDanmu::CommonStateSignalCurrentRedpackList_Redpack* add_redpacks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::CommonStateSignalCurrentRedpackList_Redpack >&
      redpacks() const;

  // @@protoc_insertion_point(class_scope:AcFunDanmu.CommonStateSignalCurrentRedpackList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::CommonStateSignalCurrentRedpackList_Redpack > redpacks_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CommonStateSignalCurrentRedpackList_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CommonStateSignalCurrentRedpackList_Redpack

// .AcFunDanmu.ZtLiveUserInfo sender = 1;
inline bool CommonStateSignalCurrentRedpackList_Redpack::_internal_has_sender() const {
  return this != internal_default_instance() && sender_ != nullptr;
}
inline bool CommonStateSignalCurrentRedpackList_Redpack::has_sender() const {
  return _internal_has_sender();
}
inline const ::AcFunDanmu::ZtLiveUserInfo& CommonStateSignalCurrentRedpackList_Redpack::_internal_sender() const {
  const ::AcFunDanmu::ZtLiveUserInfo* p = sender_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::ZtLiveUserInfo&>(
      ::AcFunDanmu::_ZtLiveUserInfo_default_instance_);
}
inline const ::AcFunDanmu::ZtLiveUserInfo& CommonStateSignalCurrentRedpackList_Redpack::sender() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonStateSignalCurrentRedpackList.Redpack.sender)
  return _internal_sender();
}
inline void CommonStateSignalCurrentRedpackList_Redpack::unsafe_arena_set_allocated_sender(
    ::AcFunDanmu::ZtLiveUserInfo* sender) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sender_);
  }
  sender_ = sender;
  if (sender) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.CommonStateSignalCurrentRedpackList.Redpack.sender)
}
inline ::AcFunDanmu::ZtLiveUserInfo* CommonStateSignalCurrentRedpackList_Redpack::release_sender() {
  
  ::AcFunDanmu::ZtLiveUserInfo* temp = sender_;
  sender_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::ZtLiveUserInfo* CommonStateSignalCurrentRedpackList_Redpack::unsafe_arena_release_sender() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.CommonStateSignalCurrentRedpackList.Redpack.sender)
  
  ::AcFunDanmu::ZtLiveUserInfo* temp = sender_;
  sender_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::ZtLiveUserInfo* CommonStateSignalCurrentRedpackList_Redpack::_internal_mutable_sender() {
  
  if (sender_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::ZtLiveUserInfo>(GetArena());
    sender_ = p;
  }
  return sender_;
}
inline ::AcFunDanmu::ZtLiveUserInfo* CommonStateSignalCurrentRedpackList_Redpack::mutable_sender() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.CommonStateSignalCurrentRedpackList.Redpack.sender)
  return _internal_mutable_sender();
}
inline void CommonStateSignalCurrentRedpackList_Redpack::set_allocated_sender(::AcFunDanmu::ZtLiveUserInfo* sender) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sender_);
  }
  if (sender) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sender)->GetArena();
    if (message_arena != submessage_arena) {
      sender = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sender, submessage_arena);
    }
    
  } else {
    
  }
  sender_ = sender;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.CommonStateSignalCurrentRedpackList.Redpack.sender)
}

// .AcFunDanmu.CommonStateSignalCurrentRedpackList.RedpackDisplayStatus displayStatus = 2;
inline void CommonStateSignalCurrentRedpackList_Redpack::clear_displaystatus() {
  displaystatus_ = 0;
}
inline ::AcFunDanmu::CommonStateSignalCurrentRedpackList_RedpackDisplayStatus CommonStateSignalCurrentRedpackList_Redpack::_internal_displaystatus() const {
  return static_cast< ::AcFunDanmu::CommonStateSignalCurrentRedpackList_RedpackDisplayStatus >(displaystatus_);
}
inline ::AcFunDanmu::CommonStateSignalCurrentRedpackList_RedpackDisplayStatus CommonStateSignalCurrentRedpackList_Redpack::displaystatus() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonStateSignalCurrentRedpackList.Redpack.displayStatus)
  return _internal_displaystatus();
}
inline void CommonStateSignalCurrentRedpackList_Redpack::_internal_set_displaystatus(::AcFunDanmu::CommonStateSignalCurrentRedpackList_RedpackDisplayStatus value) {
  
  displaystatus_ = value;
}
inline void CommonStateSignalCurrentRedpackList_Redpack::set_displaystatus(::AcFunDanmu::CommonStateSignalCurrentRedpackList_RedpackDisplayStatus value) {
  _internal_set_displaystatus(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommonStateSignalCurrentRedpackList.Redpack.displayStatus)
}

// int64 grabBeginTimeMs = 3;
inline void CommonStateSignalCurrentRedpackList_Redpack::clear_grabbegintimems() {
  grabbegintimems_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CommonStateSignalCurrentRedpackList_Redpack::_internal_grabbegintimems() const {
  return grabbegintimems_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CommonStateSignalCurrentRedpackList_Redpack::grabbegintimems() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonStateSignalCurrentRedpackList.Redpack.grabBeginTimeMs)
  return _internal_grabbegintimems();
}
inline void CommonStateSignalCurrentRedpackList_Redpack::_internal_set_grabbegintimems(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  grabbegintimems_ = value;
}
inline void CommonStateSignalCurrentRedpackList_Redpack::set_grabbegintimems(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_grabbegintimems(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommonStateSignalCurrentRedpackList.Redpack.grabBeginTimeMs)
}

// int64 getTokenLatestTimeMs = 4;
inline void CommonStateSignalCurrentRedpackList_Redpack::clear_gettokenlatesttimems() {
  gettokenlatesttimems_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CommonStateSignalCurrentRedpackList_Redpack::_internal_gettokenlatesttimems() const {
  return gettokenlatesttimems_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CommonStateSignalCurrentRedpackList_Redpack::gettokenlatesttimems() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonStateSignalCurrentRedpackList.Redpack.getTokenLatestTimeMs)
  return _internal_gettokenlatesttimems();
}
inline void CommonStateSignalCurrentRedpackList_Redpack::_internal_set_gettokenlatesttimems(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  gettokenlatesttimems_ = value;
}
inline void CommonStateSignalCurrentRedpackList_Redpack::set_gettokenlatesttimems(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_gettokenlatesttimems(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommonStateSignalCurrentRedpackList.Redpack.getTokenLatestTimeMs)
}

// string redPackId = 5;
inline void CommonStateSignalCurrentRedpackList_Redpack::clear_redpackid() {
  redpackid_.ClearToEmpty();
}
inline const std::string& CommonStateSignalCurrentRedpackList_Redpack::redpackid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonStateSignalCurrentRedpackList.Redpack.redPackId)
  return _internal_redpackid();
}
inline void CommonStateSignalCurrentRedpackList_Redpack::set_redpackid(const std::string& value) {
  _internal_set_redpackid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommonStateSignalCurrentRedpackList.Redpack.redPackId)
}
inline std::string* CommonStateSignalCurrentRedpackList_Redpack::mutable_redpackid() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.CommonStateSignalCurrentRedpackList.Redpack.redPackId)
  return _internal_mutable_redpackid();
}
inline const std::string& CommonStateSignalCurrentRedpackList_Redpack::_internal_redpackid() const {
  return redpackid_.Get();
}
inline void CommonStateSignalCurrentRedpackList_Redpack::_internal_set_redpackid(const std::string& value) {
  
  redpackid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CommonStateSignalCurrentRedpackList_Redpack::set_redpackid(std::string&& value) {
  
  redpackid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.CommonStateSignalCurrentRedpackList.Redpack.redPackId)
}
inline void CommonStateSignalCurrentRedpackList_Redpack::set_redpackid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  redpackid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.CommonStateSignalCurrentRedpackList.Redpack.redPackId)
}
inline void CommonStateSignalCurrentRedpackList_Redpack::set_redpackid(const char* value,
    size_t size) {
  
  redpackid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.CommonStateSignalCurrentRedpackList.Redpack.redPackId)
}
inline std::string* CommonStateSignalCurrentRedpackList_Redpack::_internal_mutable_redpackid() {
  
  return redpackid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CommonStateSignalCurrentRedpackList_Redpack::release_redpackid() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.CommonStateSignalCurrentRedpackList.Redpack.redPackId)
  return redpackid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommonStateSignalCurrentRedpackList_Redpack::set_allocated_redpackid(std::string* redpackid) {
  if (redpackid != nullptr) {
    
  } else {
    
  }
  redpackid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), redpackid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.CommonStateSignalCurrentRedpackList.Redpack.redPackId)
}

// string redpackBizUnit = 6;
inline void CommonStateSignalCurrentRedpackList_Redpack::clear_redpackbizunit() {
  redpackbizunit_.ClearToEmpty();
}
inline const std::string& CommonStateSignalCurrentRedpackList_Redpack::redpackbizunit() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonStateSignalCurrentRedpackList.Redpack.redpackBizUnit)
  return _internal_redpackbizunit();
}
inline void CommonStateSignalCurrentRedpackList_Redpack::set_redpackbizunit(const std::string& value) {
  _internal_set_redpackbizunit(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommonStateSignalCurrentRedpackList.Redpack.redpackBizUnit)
}
inline std::string* CommonStateSignalCurrentRedpackList_Redpack::mutable_redpackbizunit() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.CommonStateSignalCurrentRedpackList.Redpack.redpackBizUnit)
  return _internal_mutable_redpackbizunit();
}
inline const std::string& CommonStateSignalCurrentRedpackList_Redpack::_internal_redpackbizunit() const {
  return redpackbizunit_.Get();
}
inline void CommonStateSignalCurrentRedpackList_Redpack::_internal_set_redpackbizunit(const std::string& value) {
  
  redpackbizunit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CommonStateSignalCurrentRedpackList_Redpack::set_redpackbizunit(std::string&& value) {
  
  redpackbizunit_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.CommonStateSignalCurrentRedpackList.Redpack.redpackBizUnit)
}
inline void CommonStateSignalCurrentRedpackList_Redpack::set_redpackbizunit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  redpackbizunit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.CommonStateSignalCurrentRedpackList.Redpack.redpackBizUnit)
}
inline void CommonStateSignalCurrentRedpackList_Redpack::set_redpackbizunit(const char* value,
    size_t size) {
  
  redpackbizunit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.CommonStateSignalCurrentRedpackList.Redpack.redpackBizUnit)
}
inline std::string* CommonStateSignalCurrentRedpackList_Redpack::_internal_mutable_redpackbizunit() {
  
  return redpackbizunit_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CommonStateSignalCurrentRedpackList_Redpack::release_redpackbizunit() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.CommonStateSignalCurrentRedpackList.Redpack.redpackBizUnit)
  return redpackbizunit_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommonStateSignalCurrentRedpackList_Redpack::set_allocated_redpackbizunit(std::string* redpackbizunit) {
  if (redpackbizunit != nullptr) {
    
  } else {
    
  }
  redpackbizunit_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), redpackbizunit,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.CommonStateSignalCurrentRedpackList.Redpack.redpackBizUnit)
}

// int64 redpackAmount = 7;
inline void CommonStateSignalCurrentRedpackList_Redpack::clear_redpackamount() {
  redpackamount_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CommonStateSignalCurrentRedpackList_Redpack::_internal_redpackamount() const {
  return redpackamount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CommonStateSignalCurrentRedpackList_Redpack::redpackamount() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonStateSignalCurrentRedpackList.Redpack.redpackAmount)
  return _internal_redpackamount();
}
inline void CommonStateSignalCurrentRedpackList_Redpack::_internal_set_redpackamount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  redpackamount_ = value;
}
inline void CommonStateSignalCurrentRedpackList_Redpack::set_redpackamount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_redpackamount(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommonStateSignalCurrentRedpackList.Redpack.redpackAmount)
}

// int64 settleBeginTime = 8;
inline void CommonStateSignalCurrentRedpackList_Redpack::clear_settlebegintime() {
  settlebegintime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CommonStateSignalCurrentRedpackList_Redpack::_internal_settlebegintime() const {
  return settlebegintime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CommonStateSignalCurrentRedpackList_Redpack::settlebegintime() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonStateSignalCurrentRedpackList.Redpack.settleBeginTime)
  return _internal_settlebegintime();
}
inline void CommonStateSignalCurrentRedpackList_Redpack::_internal_set_settlebegintime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  settlebegintime_ = value;
}
inline void CommonStateSignalCurrentRedpackList_Redpack::set_settlebegintime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_settlebegintime(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommonStateSignalCurrentRedpackList.Redpack.settleBeginTime)
}

// -------------------------------------------------------------------

// CommonStateSignalCurrentRedpackList

// repeated .AcFunDanmu.CommonStateSignalCurrentRedpackList.Redpack redpacks = 1;
inline int CommonStateSignalCurrentRedpackList::_internal_redpacks_size() const {
  return redpacks_.size();
}
inline int CommonStateSignalCurrentRedpackList::redpacks_size() const {
  return _internal_redpacks_size();
}
inline void CommonStateSignalCurrentRedpackList::clear_redpacks() {
  redpacks_.Clear();
}
inline ::AcFunDanmu::CommonStateSignalCurrentRedpackList_Redpack* CommonStateSignalCurrentRedpackList::mutable_redpacks(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.CommonStateSignalCurrentRedpackList.redpacks)
  return redpacks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::CommonStateSignalCurrentRedpackList_Redpack >*
CommonStateSignalCurrentRedpackList::mutable_redpacks() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.CommonStateSignalCurrentRedpackList.redpacks)
  return &redpacks_;
}
inline const ::AcFunDanmu::CommonStateSignalCurrentRedpackList_Redpack& CommonStateSignalCurrentRedpackList::_internal_redpacks(int index) const {
  return redpacks_.Get(index);
}
inline const ::AcFunDanmu::CommonStateSignalCurrentRedpackList_Redpack& CommonStateSignalCurrentRedpackList::redpacks(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonStateSignalCurrentRedpackList.redpacks)
  return _internal_redpacks(index);
}
inline ::AcFunDanmu::CommonStateSignalCurrentRedpackList_Redpack* CommonStateSignalCurrentRedpackList::_internal_add_redpacks() {
  return redpacks_.Add();
}
inline ::AcFunDanmu::CommonStateSignalCurrentRedpackList_Redpack* CommonStateSignalCurrentRedpackList::add_redpacks() {
  // @@protoc_insertion_point(field_add:AcFunDanmu.CommonStateSignalCurrentRedpackList.redpacks)
  return _internal_add_redpacks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::CommonStateSignalCurrentRedpackList_Redpack >&
CommonStateSignalCurrentRedpackList::redpacks() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.CommonStateSignalCurrentRedpackList.redpacks)
  return redpacks_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace AcFunDanmu

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::AcFunDanmu::CommonStateSignalCurrentRedpackList_RedpackDisplayStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::CommonStateSignalCurrentRedpackList_RedpackDisplayStatus>() {
  return ::AcFunDanmu::CommonStateSignalCurrentRedpackList_RedpackDisplayStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_CommonStateSignalCurrentRedpackList_2eproto
