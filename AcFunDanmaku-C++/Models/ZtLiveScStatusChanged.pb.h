// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ZtLiveScStatusChanged.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ZtLiveScStatusChanged_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ZtLiveScStatusChanged_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ZtLiveScStatusChanged_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ZtLiveScStatusChanged_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ZtLiveScStatusChanged_2eproto;
namespace AcFunDanmu {
class ZtLiveScStatusChanged;
class ZtLiveScStatusChangedDefaultTypeInternal;
extern ZtLiveScStatusChangedDefaultTypeInternal _ZtLiveScStatusChanged_default_instance_;
class ZtLiveScStatusChanged_BannedInfo;
class ZtLiveScStatusChanged_BannedInfoDefaultTypeInternal;
extern ZtLiveScStatusChanged_BannedInfoDefaultTypeInternal _ZtLiveScStatusChanged_BannedInfo_default_instance_;
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::ZtLiveScStatusChanged* Arena::CreateMaybeMessage<::AcFunDanmu::ZtLiveScStatusChanged>(Arena*);
template<> ::AcFunDanmu::ZtLiveScStatusChanged_BannedInfo* Arena::CreateMaybeMessage<::AcFunDanmu::ZtLiveScStatusChanged_BannedInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {

enum ZtLiveScStatusChanged_Type : int {
  ZtLiveScStatusChanged_Type_UNKNOWN = 0,
  ZtLiveScStatusChanged_Type_LIVE_CLOSED = 1,
  ZtLiveScStatusChanged_Type_NEW_LIVE_OPENED = 2,
  ZtLiveScStatusChanged_Type_LIVE_URL_CHANGED = 3,
  ZtLiveScStatusChanged_Type_LIVE_BANNED = 4,
  ZtLiveScStatusChanged_Type_ZtLiveScStatusChanged_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ZtLiveScStatusChanged_Type_ZtLiveScStatusChanged_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ZtLiveScStatusChanged_Type_IsValid(int value);
constexpr ZtLiveScStatusChanged_Type ZtLiveScStatusChanged_Type_Type_MIN = ZtLiveScStatusChanged_Type_UNKNOWN;
constexpr ZtLiveScStatusChanged_Type ZtLiveScStatusChanged_Type_Type_MAX = ZtLiveScStatusChanged_Type_LIVE_BANNED;
constexpr int ZtLiveScStatusChanged_Type_Type_ARRAYSIZE = ZtLiveScStatusChanged_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ZtLiveScStatusChanged_Type_descriptor();
template<typename T>
inline const std::string& ZtLiveScStatusChanged_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ZtLiveScStatusChanged_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ZtLiveScStatusChanged_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ZtLiveScStatusChanged_Type_descriptor(), enum_t_value);
}
inline bool ZtLiveScStatusChanged_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ZtLiveScStatusChanged_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ZtLiveScStatusChanged_Type>(
    ZtLiveScStatusChanged_Type_descriptor(), name, value);
}
// ===================================================================

class ZtLiveScStatusChanged_BannedInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.ZtLiveScStatusChanged.BannedInfo) */ {
 public:
  inline ZtLiveScStatusChanged_BannedInfo() : ZtLiveScStatusChanged_BannedInfo(nullptr) {}
  virtual ~ZtLiveScStatusChanged_BannedInfo();

  ZtLiveScStatusChanged_BannedInfo(const ZtLiveScStatusChanged_BannedInfo& from);
  ZtLiveScStatusChanged_BannedInfo(ZtLiveScStatusChanged_BannedInfo&& from) noexcept
    : ZtLiveScStatusChanged_BannedInfo() {
    *this = ::std::move(from);
  }

  inline ZtLiveScStatusChanged_BannedInfo& operator=(const ZtLiveScStatusChanged_BannedInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZtLiveScStatusChanged_BannedInfo& operator=(ZtLiveScStatusChanged_BannedInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ZtLiveScStatusChanged_BannedInfo& default_instance();

  static inline const ZtLiveScStatusChanged_BannedInfo* internal_default_instance() {
    return reinterpret_cast<const ZtLiveScStatusChanged_BannedInfo*>(
               &_ZtLiveScStatusChanged_BannedInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ZtLiveScStatusChanged_BannedInfo& a, ZtLiveScStatusChanged_BannedInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ZtLiveScStatusChanged_BannedInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZtLiveScStatusChanged_BannedInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ZtLiveScStatusChanged_BannedInfo* New() const final {
    return CreateMaybeMessage<ZtLiveScStatusChanged_BannedInfo>(nullptr);
  }

  ZtLiveScStatusChanged_BannedInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ZtLiveScStatusChanged_BannedInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ZtLiveScStatusChanged_BannedInfo& from);
  void MergeFrom(const ZtLiveScStatusChanged_BannedInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZtLiveScStatusChanged_BannedInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.ZtLiveScStatusChanged.BannedInfo";
  }
  protected:
  explicit ZtLiveScStatusChanged_BannedInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ZtLiveScStatusChanged_2eproto);
    return ::descriptor_table_ZtLiveScStatusChanged_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBanReasonFieldNumber = 1,
  };
  // string banReason = 1;
  void clear_banreason();
  const std::string& banreason() const;
  void set_banreason(const std::string& value);
  void set_banreason(std::string&& value);
  void set_banreason(const char* value);
  void set_banreason(const char* value, size_t size);
  std::string* mutable_banreason();
  std::string* release_banreason();
  void set_allocated_banreason(std::string* banreason);
  private:
  const std::string& _internal_banreason() const;
  void _internal_set_banreason(const std::string& value);
  std::string* _internal_mutable_banreason();
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.ZtLiveScStatusChanged.BannedInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr banreason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ZtLiveScStatusChanged_2eproto;
};
// -------------------------------------------------------------------

class ZtLiveScStatusChanged PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.ZtLiveScStatusChanged) */ {
 public:
  inline ZtLiveScStatusChanged() : ZtLiveScStatusChanged(nullptr) {}
  virtual ~ZtLiveScStatusChanged();

  ZtLiveScStatusChanged(const ZtLiveScStatusChanged& from);
  ZtLiveScStatusChanged(ZtLiveScStatusChanged&& from) noexcept
    : ZtLiveScStatusChanged() {
    *this = ::std::move(from);
  }

  inline ZtLiveScStatusChanged& operator=(const ZtLiveScStatusChanged& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZtLiveScStatusChanged& operator=(ZtLiveScStatusChanged&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ZtLiveScStatusChanged& default_instance();

  static inline const ZtLiveScStatusChanged* internal_default_instance() {
    return reinterpret_cast<const ZtLiveScStatusChanged*>(
               &_ZtLiveScStatusChanged_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ZtLiveScStatusChanged& a, ZtLiveScStatusChanged& b) {
    a.Swap(&b);
  }
  inline void Swap(ZtLiveScStatusChanged* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZtLiveScStatusChanged* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ZtLiveScStatusChanged* New() const final {
    return CreateMaybeMessage<ZtLiveScStatusChanged>(nullptr);
  }

  ZtLiveScStatusChanged* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ZtLiveScStatusChanged>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ZtLiveScStatusChanged& from);
  void MergeFrom(const ZtLiveScStatusChanged& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZtLiveScStatusChanged* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.ZtLiveScStatusChanged";
  }
  protected:
  explicit ZtLiveScStatusChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ZtLiveScStatusChanged_2eproto);
    return ::descriptor_table_ZtLiveScStatusChanged_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ZtLiveScStatusChanged_BannedInfo BannedInfo;

  typedef ZtLiveScStatusChanged_Type Type;
  static constexpr Type UNKNOWN =
    ZtLiveScStatusChanged_Type_UNKNOWN;
  static constexpr Type LIVE_CLOSED =
    ZtLiveScStatusChanged_Type_LIVE_CLOSED;
  static constexpr Type NEW_LIVE_OPENED =
    ZtLiveScStatusChanged_Type_NEW_LIVE_OPENED;
  static constexpr Type LIVE_URL_CHANGED =
    ZtLiveScStatusChanged_Type_LIVE_URL_CHANGED;
  static constexpr Type LIVE_BANNED =
    ZtLiveScStatusChanged_Type_LIVE_BANNED;
  static inline bool Type_IsValid(int value) {
    return ZtLiveScStatusChanged_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    ZtLiveScStatusChanged_Type_Type_MIN;
  static constexpr Type Type_MAX =
    ZtLiveScStatusChanged_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    ZtLiveScStatusChanged_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return ZtLiveScStatusChanged_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return ZtLiveScStatusChanged_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return ZtLiveScStatusChanged_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBannedInfoFieldNumber = 3,
    kMaxRandomDelayMsFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // .AcFunDanmu.ZtLiveScStatusChanged.BannedInfo bannedInfo = 3;
  bool has_bannedinfo() const;
  private:
  bool _internal_has_bannedinfo() const;
  public:
  void clear_bannedinfo();
  const ::AcFunDanmu::ZtLiveScStatusChanged_BannedInfo& bannedinfo() const;
  ::AcFunDanmu::ZtLiveScStatusChanged_BannedInfo* release_bannedinfo();
  ::AcFunDanmu::ZtLiveScStatusChanged_BannedInfo* mutable_bannedinfo();
  void set_allocated_bannedinfo(::AcFunDanmu::ZtLiveScStatusChanged_BannedInfo* bannedinfo);
  private:
  const ::AcFunDanmu::ZtLiveScStatusChanged_BannedInfo& _internal_bannedinfo() const;
  ::AcFunDanmu::ZtLiveScStatusChanged_BannedInfo* _internal_mutable_bannedinfo();
  public:
  void unsafe_arena_set_allocated_bannedinfo(
      ::AcFunDanmu::ZtLiveScStatusChanged_BannedInfo* bannedinfo);
  ::AcFunDanmu::ZtLiveScStatusChanged_BannedInfo* unsafe_arena_release_bannedinfo();

  // int64 maxRandomDelayMs = 2;
  void clear_maxrandomdelayms();
  ::PROTOBUF_NAMESPACE_ID::int64 maxrandomdelayms() const;
  void set_maxrandomdelayms(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_maxrandomdelayms() const;
  void _internal_set_maxrandomdelayms(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .AcFunDanmu.ZtLiveScStatusChanged.Type type = 1;
  void clear_type();
  ::AcFunDanmu::ZtLiveScStatusChanged_Type type() const;
  void set_type(::AcFunDanmu::ZtLiveScStatusChanged_Type value);
  private:
  ::AcFunDanmu::ZtLiveScStatusChanged_Type _internal_type() const;
  void _internal_set_type(::AcFunDanmu::ZtLiveScStatusChanged_Type value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.ZtLiveScStatusChanged)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::AcFunDanmu::ZtLiveScStatusChanged_BannedInfo* bannedinfo_;
  ::PROTOBUF_NAMESPACE_ID::int64 maxrandomdelayms_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ZtLiveScStatusChanged_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ZtLiveScStatusChanged_BannedInfo

// string banReason = 1;
inline void ZtLiveScStatusChanged_BannedInfo::clear_banreason() {
  banreason_.ClearToEmpty();
}
inline const std::string& ZtLiveScStatusChanged_BannedInfo::banreason() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.ZtLiveScStatusChanged.BannedInfo.banReason)
  return _internal_banreason();
}
inline void ZtLiveScStatusChanged_BannedInfo::set_banreason(const std::string& value) {
  _internal_set_banreason(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.ZtLiveScStatusChanged.BannedInfo.banReason)
}
inline std::string* ZtLiveScStatusChanged_BannedInfo::mutable_banreason() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.ZtLiveScStatusChanged.BannedInfo.banReason)
  return _internal_mutable_banreason();
}
inline const std::string& ZtLiveScStatusChanged_BannedInfo::_internal_banreason() const {
  return banreason_.Get();
}
inline void ZtLiveScStatusChanged_BannedInfo::_internal_set_banreason(const std::string& value) {
  
  banreason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ZtLiveScStatusChanged_BannedInfo::set_banreason(std::string&& value) {
  
  banreason_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.ZtLiveScStatusChanged.BannedInfo.banReason)
}
inline void ZtLiveScStatusChanged_BannedInfo::set_banreason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  banreason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.ZtLiveScStatusChanged.BannedInfo.banReason)
}
inline void ZtLiveScStatusChanged_BannedInfo::set_banreason(const char* value,
    size_t size) {
  
  banreason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.ZtLiveScStatusChanged.BannedInfo.banReason)
}
inline std::string* ZtLiveScStatusChanged_BannedInfo::_internal_mutable_banreason() {
  
  return banreason_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ZtLiveScStatusChanged_BannedInfo::release_banreason() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.ZtLiveScStatusChanged.BannedInfo.banReason)
  return banreason_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ZtLiveScStatusChanged_BannedInfo::set_allocated_banreason(std::string* banreason) {
  if (banreason != nullptr) {
    
  } else {
    
  }
  banreason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), banreason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.ZtLiveScStatusChanged.BannedInfo.banReason)
}

// -------------------------------------------------------------------

// ZtLiveScStatusChanged

// .AcFunDanmu.ZtLiveScStatusChanged.Type type = 1;
inline void ZtLiveScStatusChanged::clear_type() {
  type_ = 0;
}
inline ::AcFunDanmu::ZtLiveScStatusChanged_Type ZtLiveScStatusChanged::_internal_type() const {
  return static_cast< ::AcFunDanmu::ZtLiveScStatusChanged_Type >(type_);
}
inline ::AcFunDanmu::ZtLiveScStatusChanged_Type ZtLiveScStatusChanged::type() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.ZtLiveScStatusChanged.type)
  return _internal_type();
}
inline void ZtLiveScStatusChanged::_internal_set_type(::AcFunDanmu::ZtLiveScStatusChanged_Type value) {
  
  type_ = value;
}
inline void ZtLiveScStatusChanged::set_type(::AcFunDanmu::ZtLiveScStatusChanged_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.ZtLiveScStatusChanged.type)
}

// int64 maxRandomDelayMs = 2;
inline void ZtLiveScStatusChanged::clear_maxrandomdelayms() {
  maxrandomdelayms_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ZtLiveScStatusChanged::_internal_maxrandomdelayms() const {
  return maxrandomdelayms_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ZtLiveScStatusChanged::maxrandomdelayms() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.ZtLiveScStatusChanged.maxRandomDelayMs)
  return _internal_maxrandomdelayms();
}
inline void ZtLiveScStatusChanged::_internal_set_maxrandomdelayms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  maxrandomdelayms_ = value;
}
inline void ZtLiveScStatusChanged::set_maxrandomdelayms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_maxrandomdelayms(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.ZtLiveScStatusChanged.maxRandomDelayMs)
}

// .AcFunDanmu.ZtLiveScStatusChanged.BannedInfo bannedInfo = 3;
inline bool ZtLiveScStatusChanged::_internal_has_bannedinfo() const {
  return this != internal_default_instance() && bannedinfo_ != nullptr;
}
inline bool ZtLiveScStatusChanged::has_bannedinfo() const {
  return _internal_has_bannedinfo();
}
inline void ZtLiveScStatusChanged::clear_bannedinfo() {
  if (GetArena() == nullptr && bannedinfo_ != nullptr) {
    delete bannedinfo_;
  }
  bannedinfo_ = nullptr;
}
inline const ::AcFunDanmu::ZtLiveScStatusChanged_BannedInfo& ZtLiveScStatusChanged::_internal_bannedinfo() const {
  const ::AcFunDanmu::ZtLiveScStatusChanged_BannedInfo* p = bannedinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::AcFunDanmu::ZtLiveScStatusChanged_BannedInfo&>(
      ::AcFunDanmu::_ZtLiveScStatusChanged_BannedInfo_default_instance_);
}
inline const ::AcFunDanmu::ZtLiveScStatusChanged_BannedInfo& ZtLiveScStatusChanged::bannedinfo() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.ZtLiveScStatusChanged.bannedInfo)
  return _internal_bannedinfo();
}
inline void ZtLiveScStatusChanged::unsafe_arena_set_allocated_bannedinfo(
    ::AcFunDanmu::ZtLiveScStatusChanged_BannedInfo* bannedinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bannedinfo_);
  }
  bannedinfo_ = bannedinfo;
  if (bannedinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.ZtLiveScStatusChanged.bannedInfo)
}
inline ::AcFunDanmu::ZtLiveScStatusChanged_BannedInfo* ZtLiveScStatusChanged::release_bannedinfo() {
  
  ::AcFunDanmu::ZtLiveScStatusChanged_BannedInfo* temp = bannedinfo_;
  bannedinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::ZtLiveScStatusChanged_BannedInfo* ZtLiveScStatusChanged::unsafe_arena_release_bannedinfo() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.ZtLiveScStatusChanged.bannedInfo)
  
  ::AcFunDanmu::ZtLiveScStatusChanged_BannedInfo* temp = bannedinfo_;
  bannedinfo_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::ZtLiveScStatusChanged_BannedInfo* ZtLiveScStatusChanged::_internal_mutable_bannedinfo() {
  
  if (bannedinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::ZtLiveScStatusChanged_BannedInfo>(GetArena());
    bannedinfo_ = p;
  }
  return bannedinfo_;
}
inline ::AcFunDanmu::ZtLiveScStatusChanged_BannedInfo* ZtLiveScStatusChanged::mutable_bannedinfo() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.ZtLiveScStatusChanged.bannedInfo)
  return _internal_mutable_bannedinfo();
}
inline void ZtLiveScStatusChanged::set_allocated_bannedinfo(::AcFunDanmu::ZtLiveScStatusChanged_BannedInfo* bannedinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bannedinfo_;
  }
  if (bannedinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bannedinfo);
    if (message_arena != submessage_arena) {
      bannedinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bannedinfo, submessage_arena);
    }
    
  } else {
    
  }
  bannedinfo_ = bannedinfo;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.ZtLiveScStatusChanged.bannedInfo)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace AcFunDanmu

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::AcFunDanmu::ZtLiveScStatusChanged_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::ZtLiveScStatusChanged_Type>() {
  return ::AcFunDanmu::ZtLiveScStatusChanged_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ZtLiveScStatusChanged_2eproto
