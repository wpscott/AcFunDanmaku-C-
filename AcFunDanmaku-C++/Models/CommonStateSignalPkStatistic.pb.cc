// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommonStateSignalPkStatistic.proto

#include "CommonStateSignalPkStatistic.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_PkAudienceContributionInfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PkAudienceContributionInfo_PkAudienceContributionInfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PkPlayerStatistic_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PkPlayerStatistic_PkPlayerStatistic_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PkRoundInfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PkRoundInfo_PkRoundInfo_2eproto;
namespace AcFunDanmu {
class CommonStateSignalPkStatisticDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommonStateSignalPkStatistic> _instance;
} _CommonStateSignalPkStatistic_default_instance_;
}  // namespace AcFunDanmu
static void InitDefaultsscc_info_CommonStateSignalPkStatistic_CommonStateSignalPkStatistic_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AcFunDanmu::_CommonStateSignalPkStatistic_default_instance_;
    new (ptr) ::AcFunDanmu::CommonStateSignalPkStatistic();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CommonStateSignalPkStatistic_CommonStateSignalPkStatistic_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_CommonStateSignalPkStatistic_CommonStateSignalPkStatistic_2eproto}, {
      &scc_info_PkAudienceContributionInfo_PkAudienceContributionInfo_2eproto.base,
      &scc_info_PkPlayerStatistic_PkPlayerStatistic_2eproto.base,
      &scc_info_PkRoundInfo_PkRoundInfo_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_CommonStateSignalPkStatistic_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_CommonStateSignalPkStatistic_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_CommonStateSignalPkStatistic_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_CommonStateSignalPkStatistic_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonStateSignalPkStatistic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonStateSignalPkStatistic, a_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonStateSignalPkStatistic, b_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonStateSignalPkStatistic, c_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonStateSignalPkStatistic, d_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonStateSignalPkStatistic, e_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonStateSignalPkStatistic, f_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonStateSignalPkStatistic, g_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonStateSignalPkStatistic, h_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonStateSignalPkStatistic, i_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonStateSignalPkStatistic, j_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonStateSignalPkStatistic, k_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::CommonStateSignalPkStatistic, l_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::AcFunDanmu::CommonStateSignalPkStatistic)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AcFunDanmu::_CommonStateSignalPkStatistic_default_instance_),
};

const char descriptor_table_protodef_CommonStateSignalPkStatistic_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"CommonStateSignalPkStatistic.proto\022\nAc"
  "FunDanmu\032 PkAudienceContributionInfo.pro"
  "to\032\027PkPlayerStatistic.proto\032\021PkRoundInfo"
  ".proto\"\202\002\n\034CommonStateSignalPkStatistic\022"
  "\t\n\001a\030\001 \001(\t\022\t\n\001b\030\002 \001(\003\022\t\n\001c\030\003 \001(\003\022\t\n\001d\030\004 "
  "\001(\003\022\t\n\001e\030\005 \001(\010\022\t\n\001f\030\006 \001(\003\022\t\n\001g\030\007 \001(\003\022\t\n\001"
  "h\030\010 \001(\003\0221\n\001i\030\t \003(\0132&.AcFunDanmu.PkAudien"
  "ceContributionInfo\022(\n\001j\030\n \003(\0132\035.AcFunDan"
  "mu.PkPlayerStatistic\022\"\n\001k\030\013 \001(\0132\027.AcFunD"
  "anmu.PkRoundInfo\022\t\n\001l\030\014 \001(\003b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_CommonStateSignalPkStatistic_2eproto_deps[3] = {
  &::descriptor_table_PkAudienceContributionInfo_2eproto,
  &::descriptor_table_PkPlayerStatistic_2eproto,
  &::descriptor_table_PkRoundInfo_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_CommonStateSignalPkStatistic_2eproto_sccs[1] = {
  &scc_info_CommonStateSignalPkStatistic_CommonStateSignalPkStatistic_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_CommonStateSignalPkStatistic_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_CommonStateSignalPkStatistic_2eproto = {
  false, false, descriptor_table_protodef_CommonStateSignalPkStatistic_2eproto, "CommonStateSignalPkStatistic.proto", 395,
  &descriptor_table_CommonStateSignalPkStatistic_2eproto_once, descriptor_table_CommonStateSignalPkStatistic_2eproto_sccs, descriptor_table_CommonStateSignalPkStatistic_2eproto_deps, 1, 3,
  schemas, file_default_instances, TableStruct_CommonStateSignalPkStatistic_2eproto::offsets,
  file_level_metadata_CommonStateSignalPkStatistic_2eproto, 1, file_level_enum_descriptors_CommonStateSignalPkStatistic_2eproto, file_level_service_descriptors_CommonStateSignalPkStatistic_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_CommonStateSignalPkStatistic_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_CommonStateSignalPkStatistic_2eproto)), true);
namespace AcFunDanmu {

// ===================================================================

class CommonStateSignalPkStatistic::_Internal {
 public:
  static const ::AcFunDanmu::PkRoundInfo& k(const CommonStateSignalPkStatistic* msg);
};

const ::AcFunDanmu::PkRoundInfo&
CommonStateSignalPkStatistic::_Internal::k(const CommonStateSignalPkStatistic* msg) {
  return *msg->k_;
}
void CommonStateSignalPkStatistic::clear_i() {
  i_.Clear();
}
void CommonStateSignalPkStatistic::clear_j() {
  j_.Clear();
}
void CommonStateSignalPkStatistic::clear_k() {
  if (GetArena() == nullptr && k_ != nullptr) {
    delete k_;
  }
  k_ = nullptr;
}
CommonStateSignalPkStatistic::CommonStateSignalPkStatistic(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  i_(arena),
  j_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.CommonStateSignalPkStatistic)
}
CommonStateSignalPkStatistic::CommonStateSignalPkStatistic(const CommonStateSignalPkStatistic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      i_(from.i_),
      j_(from.j_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  a_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_a().empty()) {
    a_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_a(), 
      GetArena());
  }
  if (from._internal_has_k()) {
    k_ = new ::AcFunDanmu::PkRoundInfo(*from.k_);
  } else {
    k_ = nullptr;
  }
  ::memcpy(&b_, &from.b_,
    static_cast<size_t>(reinterpret_cast<char*>(&e_) -
    reinterpret_cast<char*>(&b_)) + sizeof(e_));
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.CommonStateSignalPkStatistic)
}

void CommonStateSignalPkStatistic::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommonStateSignalPkStatistic_CommonStateSignalPkStatistic_2eproto.base);
  a_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&k_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&e_) -
      reinterpret_cast<char*>(&k_)) + sizeof(e_));
}

CommonStateSignalPkStatistic::~CommonStateSignalPkStatistic() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.CommonStateSignalPkStatistic)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommonStateSignalPkStatistic::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  a_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete k_;
}

void CommonStateSignalPkStatistic::ArenaDtor(void* object) {
  CommonStateSignalPkStatistic* _this = reinterpret_cast< CommonStateSignalPkStatistic* >(object);
  (void)_this;
}
void CommonStateSignalPkStatistic::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommonStateSignalPkStatistic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommonStateSignalPkStatistic& CommonStateSignalPkStatistic::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommonStateSignalPkStatistic_CommonStateSignalPkStatistic_2eproto.base);
  return *internal_default_instance();
}


void CommonStateSignalPkStatistic::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.CommonStateSignalPkStatistic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  i_.Clear();
  j_.Clear();
  a_.ClearToEmpty();
  if (GetArena() == nullptr && k_ != nullptr) {
    delete k_;
  }
  k_ = nullptr;
  ::memset(&b_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&e_) -
      reinterpret_cast<char*>(&b_)) + sizeof(e_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommonStateSignalPkStatistic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string a = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_a();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AcFunDanmu.CommonStateSignalPkStatistic.a"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 b = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 c = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          c_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 d = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          d_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool e = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          e_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 f = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          f_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 g = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          g_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 h = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .AcFunDanmu.PkAudienceContributionInfo i = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_i(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .AcFunDanmu.PkPlayerStatistic j = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_j(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // .AcFunDanmu.PkRoundInfo k = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_k(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 l = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          l_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommonStateSignalPkStatistic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.CommonStateSignalPkStatistic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string a = 1;
  if (this->a().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_a().data(), static_cast<int>(this->_internal_a().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.CommonStateSignalPkStatistic.a");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_a(), target);
  }

  // int64 b = 2;
  if (this->b() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_b(), target);
  }

  // int64 c = 3;
  if (this->c() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_c(), target);
  }

  // int64 d = 4;
  if (this->d() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_d(), target);
  }

  // bool e = 5;
  if (this->e() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_e(), target);
  }

  // int64 f = 6;
  if (this->f() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_f(), target);
  }

  // int64 g = 7;
  if (this->g() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_g(), target);
  }

  // int64 h = 8;
  if (this->h() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_h(), target);
  }

  // repeated .AcFunDanmu.PkAudienceContributionInfo i = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_i_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_i(i), target, stream);
  }

  // repeated .AcFunDanmu.PkPlayerStatistic j = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_j_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_j(i), target, stream);
  }

  // .AcFunDanmu.PkRoundInfo k = 11;
  if (this->has_k()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::k(this), target, stream);
  }

  // int64 l = 12;
  if (this->l() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->_internal_l(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.CommonStateSignalPkStatistic)
  return target;
}

size_t CommonStateSignalPkStatistic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.CommonStateSignalPkStatistic)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .AcFunDanmu.PkAudienceContributionInfo i = 9;
  total_size += 1UL * this->_internal_i_size();
  for (const auto& msg : this->i_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .AcFunDanmu.PkPlayerStatistic j = 10;
  total_size += 1UL * this->_internal_j_size();
  for (const auto& msg : this->j_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string a = 1;
  if (this->a().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_a());
  }

  // .AcFunDanmu.PkRoundInfo k = 11;
  if (this->has_k()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *k_);
  }

  // int64 b = 2;
  if (this->b() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_b());
  }

  // int64 c = 3;
  if (this->c() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_c());
  }

  // int64 d = 4;
  if (this->d() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_d());
  }

  // int64 f = 6;
  if (this->f() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_f());
  }

  // int64 g = 7;
  if (this->g() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_g());
  }

  // int64 h = 8;
  if (this->h() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_h());
  }

  // int64 l = 12;
  if (this->l() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_l());
  }

  // bool e = 5;
  if (this->e() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommonStateSignalPkStatistic::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AcFunDanmu.CommonStateSignalPkStatistic)
  GOOGLE_DCHECK_NE(&from, this);
  const CommonStateSignalPkStatistic* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommonStateSignalPkStatistic>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AcFunDanmu.CommonStateSignalPkStatistic)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AcFunDanmu.CommonStateSignalPkStatistic)
    MergeFrom(*source);
  }
}

void CommonStateSignalPkStatistic::MergeFrom(const CommonStateSignalPkStatistic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.CommonStateSignalPkStatistic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  i_.MergeFrom(from.i_);
  j_.MergeFrom(from.j_);
  if (from.a().size() > 0) {
    _internal_set_a(from._internal_a());
  }
  if (from.has_k()) {
    _internal_mutable_k()->::AcFunDanmu::PkRoundInfo::MergeFrom(from._internal_k());
  }
  if (from.b() != 0) {
    _internal_set_b(from._internal_b());
  }
  if (from.c() != 0) {
    _internal_set_c(from._internal_c());
  }
  if (from.d() != 0) {
    _internal_set_d(from._internal_d());
  }
  if (from.f() != 0) {
    _internal_set_f(from._internal_f());
  }
  if (from.g() != 0) {
    _internal_set_g(from._internal_g());
  }
  if (from.h() != 0) {
    _internal_set_h(from._internal_h());
  }
  if (from.l() != 0) {
    _internal_set_l(from._internal_l());
  }
  if (from.e() != 0) {
    _internal_set_e(from._internal_e());
  }
}

void CommonStateSignalPkStatistic::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AcFunDanmu.CommonStateSignalPkStatistic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonStateSignalPkStatistic::CopyFrom(const CommonStateSignalPkStatistic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.CommonStateSignalPkStatistic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonStateSignalPkStatistic::IsInitialized() const {
  return true;
}

void CommonStateSignalPkStatistic::InternalSwap(CommonStateSignalPkStatistic* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  i_.InternalSwap(&other->i_);
  j_.InternalSwap(&other->j_);
  a_.Swap(&other->a_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommonStateSignalPkStatistic, e_)
      + sizeof(CommonStateSignalPkStatistic::e_)
      - PROTOBUF_FIELD_OFFSET(CommonStateSignalPkStatistic, k_)>(
          reinterpret_cast<char*>(&k_),
          reinterpret_cast<char*>(&other->k_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommonStateSignalPkStatistic::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AcFunDanmu::CommonStateSignalPkStatistic* Arena::CreateMaybeMessage< ::AcFunDanmu::CommonStateSignalPkStatistic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::CommonStateSignalPkStatistic >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
