// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PacketHeader.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_PacketHeader_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_PacketHeader_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "TokenInfo.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_PacketHeader_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_PacketHeader_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_PacketHeader_2eproto;
namespace AcFunDanmu {
class PacketHeader;
class PacketHeaderDefaultTypeInternal;
extern PacketHeaderDefaultTypeInternal _PacketHeader_default_instance_;
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::PacketHeader* Arena::CreateMaybeMessage<::AcFunDanmu::PacketHeader>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {

enum PacketHeader_Flags : int {
  PacketHeader_Flags_kDirUpstream = 0,
  PacketHeader_Flags_kDirDownstream = 1,
  PacketHeader_Flags_kDirMask = 1,
  PacketHeader_Flags_PacketHeader_Flags_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PacketHeader_Flags_PacketHeader_Flags_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PacketHeader_Flags_IsValid(int value);
constexpr PacketHeader_Flags PacketHeader_Flags_Flags_MIN = PacketHeader_Flags_kDirUpstream;
constexpr PacketHeader_Flags PacketHeader_Flags_Flags_MAX = PacketHeader_Flags_kDirDownstream;
constexpr int PacketHeader_Flags_Flags_ARRAYSIZE = PacketHeader_Flags_Flags_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PacketHeader_Flags_descriptor();
template<typename T>
inline const std::string& PacketHeader_Flags_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PacketHeader_Flags>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PacketHeader_Flags_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PacketHeader_Flags_descriptor(), enum_t_value);
}
inline bool PacketHeader_Flags_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PacketHeader_Flags* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PacketHeader_Flags>(
    PacketHeader_Flags_descriptor(), name, value);
}
enum PacketHeader_EncodingType : int {
  PacketHeader_EncodingType_kEncodingNone = 0,
  PacketHeader_EncodingType_kEncodingLz4 = 1,
  PacketHeader_EncodingType_PacketHeader_EncodingType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PacketHeader_EncodingType_PacketHeader_EncodingType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PacketHeader_EncodingType_IsValid(int value);
constexpr PacketHeader_EncodingType PacketHeader_EncodingType_EncodingType_MIN = PacketHeader_EncodingType_kEncodingNone;
constexpr PacketHeader_EncodingType PacketHeader_EncodingType_EncodingType_MAX = PacketHeader_EncodingType_kEncodingLz4;
constexpr int PacketHeader_EncodingType_EncodingType_ARRAYSIZE = PacketHeader_EncodingType_EncodingType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PacketHeader_EncodingType_descriptor();
template<typename T>
inline const std::string& PacketHeader_EncodingType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PacketHeader_EncodingType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PacketHeader_EncodingType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PacketHeader_EncodingType_descriptor(), enum_t_value);
}
inline bool PacketHeader_EncodingType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PacketHeader_EncodingType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PacketHeader_EncodingType>(
    PacketHeader_EncodingType_descriptor(), name, value);
}
enum PacketHeader_EncryptionMode : int {
  PacketHeader_EncryptionMode_kEncryptionNone = 0,
  PacketHeader_EncryptionMode_kEncryptionServiceToken = 1,
  PacketHeader_EncryptionMode_kEncryptionSessionKey = 2,
  PacketHeader_EncryptionMode_PacketHeader_EncryptionMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PacketHeader_EncryptionMode_PacketHeader_EncryptionMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PacketHeader_EncryptionMode_IsValid(int value);
constexpr PacketHeader_EncryptionMode PacketHeader_EncryptionMode_EncryptionMode_MIN = PacketHeader_EncryptionMode_kEncryptionNone;
constexpr PacketHeader_EncryptionMode PacketHeader_EncryptionMode_EncryptionMode_MAX = PacketHeader_EncryptionMode_kEncryptionSessionKey;
constexpr int PacketHeader_EncryptionMode_EncryptionMode_ARRAYSIZE = PacketHeader_EncryptionMode_EncryptionMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PacketHeader_EncryptionMode_descriptor();
template<typename T>
inline const std::string& PacketHeader_EncryptionMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PacketHeader_EncryptionMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PacketHeader_EncryptionMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PacketHeader_EncryptionMode_descriptor(), enum_t_value);
}
inline bool PacketHeader_EncryptionMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PacketHeader_EncryptionMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PacketHeader_EncryptionMode>(
    PacketHeader_EncryptionMode_descriptor(), name, value);
}
enum PacketHeader_Feature : int {
  PacketHeader_Feature_kReserve = 0,
  PacketHeader_Feature_kCompressLz4 = 1,
  PacketHeader_Feature_PacketHeader_Feature_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PacketHeader_Feature_PacketHeader_Feature_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PacketHeader_Feature_IsValid(int value);
constexpr PacketHeader_Feature PacketHeader_Feature_Feature_MIN = PacketHeader_Feature_kReserve;
constexpr PacketHeader_Feature PacketHeader_Feature_Feature_MAX = PacketHeader_Feature_kCompressLz4;
constexpr int PacketHeader_Feature_Feature_ARRAYSIZE = PacketHeader_Feature_Feature_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PacketHeader_Feature_descriptor();
template<typename T>
inline const std::string& PacketHeader_Feature_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PacketHeader_Feature>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PacketHeader_Feature_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PacketHeader_Feature_descriptor(), enum_t_value);
}
inline bool PacketHeader_Feature_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PacketHeader_Feature* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PacketHeader_Feature>(
    PacketHeader_Feature_descriptor(), name, value);
}
// ===================================================================

class PacketHeader PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.PacketHeader) */ {
 public:
  inline PacketHeader() : PacketHeader(nullptr) {}
  virtual ~PacketHeader();

  PacketHeader(const PacketHeader& from);
  PacketHeader(PacketHeader&& from) noexcept
    : PacketHeader() {
    *this = ::std::move(from);
  }

  inline PacketHeader& operator=(const PacketHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline PacketHeader& operator=(PacketHeader&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PacketHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PacketHeader* internal_default_instance() {
    return reinterpret_cast<const PacketHeader*>(
               &_PacketHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PacketHeader& a, PacketHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(PacketHeader* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PacketHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PacketHeader* New() const final {
    return CreateMaybeMessage<PacketHeader>(nullptr);
  }

  PacketHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PacketHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PacketHeader& from);
  void MergeFrom(const PacketHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PacketHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.PacketHeader";
  }
  protected:
  explicit PacketHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PacketHeader_2eproto);
    return ::descriptor_table_PacketHeader_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PacketHeader_Flags Flags;
  static constexpr Flags kDirUpstream =
    PacketHeader_Flags_kDirUpstream;
  static constexpr Flags kDirDownstream =
    PacketHeader_Flags_kDirDownstream;
  static constexpr Flags kDirMask =
    PacketHeader_Flags_kDirMask;
  static inline bool Flags_IsValid(int value) {
    return PacketHeader_Flags_IsValid(value);
  }
  static constexpr Flags Flags_MIN =
    PacketHeader_Flags_Flags_MIN;
  static constexpr Flags Flags_MAX =
    PacketHeader_Flags_Flags_MAX;
  static constexpr int Flags_ARRAYSIZE =
    PacketHeader_Flags_Flags_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Flags_descriptor() {
    return PacketHeader_Flags_descriptor();
  }
  template<typename T>
  static inline const std::string& Flags_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Flags>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Flags_Name.");
    return PacketHeader_Flags_Name(enum_t_value);
  }
  static inline bool Flags_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Flags* value) {
    return PacketHeader_Flags_Parse(name, value);
  }

  typedef PacketHeader_EncodingType EncodingType;
  static constexpr EncodingType kEncodingNone =
    PacketHeader_EncodingType_kEncodingNone;
  static constexpr EncodingType kEncodingLz4 =
    PacketHeader_EncodingType_kEncodingLz4;
  static inline bool EncodingType_IsValid(int value) {
    return PacketHeader_EncodingType_IsValid(value);
  }
  static constexpr EncodingType EncodingType_MIN =
    PacketHeader_EncodingType_EncodingType_MIN;
  static constexpr EncodingType EncodingType_MAX =
    PacketHeader_EncodingType_EncodingType_MAX;
  static constexpr int EncodingType_ARRAYSIZE =
    PacketHeader_EncodingType_EncodingType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EncodingType_descriptor() {
    return PacketHeader_EncodingType_descriptor();
  }
  template<typename T>
  static inline const std::string& EncodingType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EncodingType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EncodingType_Name.");
    return PacketHeader_EncodingType_Name(enum_t_value);
  }
  static inline bool EncodingType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EncodingType* value) {
    return PacketHeader_EncodingType_Parse(name, value);
  }

  typedef PacketHeader_EncryptionMode EncryptionMode;
  static constexpr EncryptionMode kEncryptionNone =
    PacketHeader_EncryptionMode_kEncryptionNone;
  static constexpr EncryptionMode kEncryptionServiceToken =
    PacketHeader_EncryptionMode_kEncryptionServiceToken;
  static constexpr EncryptionMode kEncryptionSessionKey =
    PacketHeader_EncryptionMode_kEncryptionSessionKey;
  static inline bool EncryptionMode_IsValid(int value) {
    return PacketHeader_EncryptionMode_IsValid(value);
  }
  static constexpr EncryptionMode EncryptionMode_MIN =
    PacketHeader_EncryptionMode_EncryptionMode_MIN;
  static constexpr EncryptionMode EncryptionMode_MAX =
    PacketHeader_EncryptionMode_EncryptionMode_MAX;
  static constexpr int EncryptionMode_ARRAYSIZE =
    PacketHeader_EncryptionMode_EncryptionMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EncryptionMode_descriptor() {
    return PacketHeader_EncryptionMode_descriptor();
  }
  template<typename T>
  static inline const std::string& EncryptionMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EncryptionMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EncryptionMode_Name.");
    return PacketHeader_EncryptionMode_Name(enum_t_value);
  }
  static inline bool EncryptionMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EncryptionMode* value) {
    return PacketHeader_EncryptionMode_Parse(name, value);
  }

  typedef PacketHeader_Feature Feature;
  static constexpr Feature kReserve =
    PacketHeader_Feature_kReserve;
  static constexpr Feature kCompressLz4 =
    PacketHeader_Feature_kCompressLz4;
  static inline bool Feature_IsValid(int value) {
    return PacketHeader_Feature_IsValid(value);
  }
  static constexpr Feature Feature_MIN =
    PacketHeader_Feature_Feature_MIN;
  static constexpr Feature Feature_MAX =
    PacketHeader_Feature_Feature_MAX;
  static constexpr int Feature_ARRAYSIZE =
    PacketHeader_Feature_Feature_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Feature_descriptor() {
    return PacketHeader_Feature_descriptor();
  }
  template<typename T>
  static inline const std::string& Feature_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Feature>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Feature_Name.");
    return PacketHeader_Feature_Name(enum_t_value);
  }
  static inline bool Feature_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Feature* value) {
    return PacketHeader_Feature_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFeaturesFieldNumber = 11,
    kKpnFieldNumber = 12,
    kTokenInfoFieldNumber = 9,
    kUidFieldNumber = 2,
    kInstanceIdFieldNumber = 3,
    kAppIdFieldNumber = 1,
    kFlagsFieldNumber = 5,
    kEncodingTypeFieldNumber = 6,
    kDecodedPayloadLenFieldNumber = 7,
    kSeqIdFieldNumber = 10,
    kEncryptionModeFieldNumber = 8,
  };
  // repeated .AcFunDanmu.PacketHeader.Feature features = 11;
  int features_size() const;
  private:
  int _internal_features_size() const;
  public:
  void clear_features();
  private:
  ::AcFunDanmu::PacketHeader_Feature _internal_features(int index) const;
  void _internal_add_features(::AcFunDanmu::PacketHeader_Feature value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_features();
  public:
  ::AcFunDanmu::PacketHeader_Feature features(int index) const;
  void set_features(int index, ::AcFunDanmu::PacketHeader_Feature value);
  void add_features(::AcFunDanmu::PacketHeader_Feature value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& features() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_features();

  // string kpn = 12;
  void clear_kpn();
  const std::string& kpn() const;
  void set_kpn(const std::string& value);
  void set_kpn(std::string&& value);
  void set_kpn(const char* value);
  void set_kpn(const char* value, size_t size);
  std::string* mutable_kpn();
  std::string* release_kpn();
  void set_allocated_kpn(std::string* kpn);
  private:
  const std::string& _internal_kpn() const;
  void _internal_set_kpn(const std::string& value);
  std::string* _internal_mutable_kpn();
  public:

  // .AcFunDanmu.TokenInfo tokenInfo = 9;
  bool has_tokeninfo() const;
  private:
  bool _internal_has_tokeninfo() const;
  public:
  void clear_tokeninfo();
  const ::AcFunDanmu::TokenInfo& tokeninfo() const;
  ::AcFunDanmu::TokenInfo* release_tokeninfo();
  ::AcFunDanmu::TokenInfo* mutable_tokeninfo();
  void set_allocated_tokeninfo(::AcFunDanmu::TokenInfo* tokeninfo);
  private:
  const ::AcFunDanmu::TokenInfo& _internal_tokeninfo() const;
  ::AcFunDanmu::TokenInfo* _internal_mutable_tokeninfo();
  public:
  void unsafe_arena_set_allocated_tokeninfo(
      ::AcFunDanmu::TokenInfo* tokeninfo);
  ::AcFunDanmu::TokenInfo* unsafe_arena_release_tokeninfo();

  // int64 uid = 2;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int64 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 instanceId = 3;
  void clear_instanceid();
  ::PROTOBUF_NAMESPACE_ID::int64 instanceid() const;
  void set_instanceid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_instanceid() const;
  void _internal_set_instanceid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 appId = 1;
  void clear_appid();
  ::PROTOBUF_NAMESPACE_ID::int32 appid() const;
  void set_appid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_appid() const;
  void _internal_set_appid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 flags = 5;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .AcFunDanmu.PacketHeader.EncodingType encodingType = 6;
  void clear_encodingtype();
  ::AcFunDanmu::PacketHeader_EncodingType encodingtype() const;
  void set_encodingtype(::AcFunDanmu::PacketHeader_EncodingType value);
  private:
  ::AcFunDanmu::PacketHeader_EncodingType _internal_encodingtype() const;
  void _internal_set_encodingtype(::AcFunDanmu::PacketHeader_EncodingType value);
  public:

  // uint32 decodedPayloadLen = 7;
  void clear_decodedpayloadlen();
  ::PROTOBUF_NAMESPACE_ID::uint32 decodedpayloadlen() const;
  void set_decodedpayloadlen(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_decodedpayloadlen() const;
  void _internal_set_decodedpayloadlen(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int64 seqId = 10;
  void clear_seqid();
  ::PROTOBUF_NAMESPACE_ID::int64 seqid() const;
  void set_seqid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_seqid() const;
  void _internal_set_seqid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .AcFunDanmu.PacketHeader.EncryptionMode encryptionMode = 8;
  void clear_encryptionmode();
  ::AcFunDanmu::PacketHeader_EncryptionMode encryptionmode() const;
  void set_encryptionmode(::AcFunDanmu::PacketHeader_EncryptionMode value);
  private:
  ::AcFunDanmu::PacketHeader_EncryptionMode _internal_encryptionmode() const;
  void _internal_set_encryptionmode(::AcFunDanmu::PacketHeader_EncryptionMode value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.PacketHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> features_;
  mutable std::atomic<int> _features_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kpn_;
  ::AcFunDanmu::TokenInfo* tokeninfo_;
  ::PROTOBUF_NAMESPACE_ID::int64 uid_;
  ::PROTOBUF_NAMESPACE_ID::int64 instanceid_;
  ::PROTOBUF_NAMESPACE_ID::int32 appid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  int encodingtype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 decodedpayloadlen_;
  ::PROTOBUF_NAMESPACE_ID::int64 seqid_;
  int encryptionmode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PacketHeader_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PacketHeader

// int32 appId = 1;
inline void PacketHeader::clear_appid() {
  appid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PacketHeader::_internal_appid() const {
  return appid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PacketHeader::appid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.PacketHeader.appId)
  return _internal_appid();
}
inline void PacketHeader::_internal_set_appid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  appid_ = value;
}
inline void PacketHeader::set_appid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.PacketHeader.appId)
}

// int64 uid = 2;
inline void PacketHeader::clear_uid() {
  uid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PacketHeader::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PacketHeader::uid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.PacketHeader.uid)
  return _internal_uid();
}
inline void PacketHeader::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  uid_ = value;
}
inline void PacketHeader::set_uid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.PacketHeader.uid)
}

// int64 instanceId = 3;
inline void PacketHeader::clear_instanceid() {
  instanceid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PacketHeader::_internal_instanceid() const {
  return instanceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PacketHeader::instanceid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.PacketHeader.instanceId)
  return _internal_instanceid();
}
inline void PacketHeader::_internal_set_instanceid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  instanceid_ = value;
}
inline void PacketHeader::set_instanceid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_instanceid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.PacketHeader.instanceId)
}

// uint32 flags = 5;
inline void PacketHeader::clear_flags() {
  flags_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PacketHeader::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PacketHeader::flags() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.PacketHeader.flags)
  return _internal_flags();
}
inline void PacketHeader::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  flags_ = value;
}
inline void PacketHeader::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.PacketHeader.flags)
}

// .AcFunDanmu.PacketHeader.EncodingType encodingType = 6;
inline void PacketHeader::clear_encodingtype() {
  encodingtype_ = 0;
}
inline ::AcFunDanmu::PacketHeader_EncodingType PacketHeader::_internal_encodingtype() const {
  return static_cast< ::AcFunDanmu::PacketHeader_EncodingType >(encodingtype_);
}
inline ::AcFunDanmu::PacketHeader_EncodingType PacketHeader::encodingtype() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.PacketHeader.encodingType)
  return _internal_encodingtype();
}
inline void PacketHeader::_internal_set_encodingtype(::AcFunDanmu::PacketHeader_EncodingType value) {
  
  encodingtype_ = value;
}
inline void PacketHeader::set_encodingtype(::AcFunDanmu::PacketHeader_EncodingType value) {
  _internal_set_encodingtype(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.PacketHeader.encodingType)
}

// uint32 decodedPayloadLen = 7;
inline void PacketHeader::clear_decodedpayloadlen() {
  decodedpayloadlen_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PacketHeader::_internal_decodedpayloadlen() const {
  return decodedpayloadlen_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PacketHeader::decodedpayloadlen() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.PacketHeader.decodedPayloadLen)
  return _internal_decodedpayloadlen();
}
inline void PacketHeader::_internal_set_decodedpayloadlen(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  decodedpayloadlen_ = value;
}
inline void PacketHeader::set_decodedpayloadlen(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_decodedpayloadlen(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.PacketHeader.decodedPayloadLen)
}

// .AcFunDanmu.PacketHeader.EncryptionMode encryptionMode = 8;
inline void PacketHeader::clear_encryptionmode() {
  encryptionmode_ = 0;
}
inline ::AcFunDanmu::PacketHeader_EncryptionMode PacketHeader::_internal_encryptionmode() const {
  return static_cast< ::AcFunDanmu::PacketHeader_EncryptionMode >(encryptionmode_);
}
inline ::AcFunDanmu::PacketHeader_EncryptionMode PacketHeader::encryptionmode() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.PacketHeader.encryptionMode)
  return _internal_encryptionmode();
}
inline void PacketHeader::_internal_set_encryptionmode(::AcFunDanmu::PacketHeader_EncryptionMode value) {
  
  encryptionmode_ = value;
}
inline void PacketHeader::set_encryptionmode(::AcFunDanmu::PacketHeader_EncryptionMode value) {
  _internal_set_encryptionmode(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.PacketHeader.encryptionMode)
}

// .AcFunDanmu.TokenInfo tokenInfo = 9;
inline bool PacketHeader::_internal_has_tokeninfo() const {
  return this != internal_default_instance() && tokeninfo_ != nullptr;
}
inline bool PacketHeader::has_tokeninfo() const {
  return _internal_has_tokeninfo();
}
inline const ::AcFunDanmu::TokenInfo& PacketHeader::_internal_tokeninfo() const {
  const ::AcFunDanmu::TokenInfo* p = tokeninfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::AcFunDanmu::TokenInfo*>(
      &::AcFunDanmu::_TokenInfo_default_instance_);
}
inline const ::AcFunDanmu::TokenInfo& PacketHeader::tokeninfo() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.PacketHeader.tokenInfo)
  return _internal_tokeninfo();
}
inline void PacketHeader::unsafe_arena_set_allocated_tokeninfo(
    ::AcFunDanmu::TokenInfo* tokeninfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tokeninfo_);
  }
  tokeninfo_ = tokeninfo;
  if (tokeninfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.PacketHeader.tokenInfo)
}
inline ::AcFunDanmu::TokenInfo* PacketHeader::release_tokeninfo() {
  
  ::AcFunDanmu::TokenInfo* temp = tokeninfo_;
  tokeninfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::TokenInfo* PacketHeader::unsafe_arena_release_tokeninfo() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.PacketHeader.tokenInfo)
  
  ::AcFunDanmu::TokenInfo* temp = tokeninfo_;
  tokeninfo_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::TokenInfo* PacketHeader::_internal_mutable_tokeninfo() {
  
  if (tokeninfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::TokenInfo>(GetArena());
    tokeninfo_ = p;
  }
  return tokeninfo_;
}
inline ::AcFunDanmu::TokenInfo* PacketHeader::mutable_tokeninfo() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.PacketHeader.tokenInfo)
  return _internal_mutable_tokeninfo();
}
inline void PacketHeader::set_allocated_tokeninfo(::AcFunDanmu::TokenInfo* tokeninfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tokeninfo_);
  }
  if (tokeninfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tokeninfo)->GetArena();
    if (message_arena != submessage_arena) {
      tokeninfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tokeninfo, submessage_arena);
    }
    
  } else {
    
  }
  tokeninfo_ = tokeninfo;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.PacketHeader.tokenInfo)
}

// int64 seqId = 10;
inline void PacketHeader::clear_seqid() {
  seqid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PacketHeader::_internal_seqid() const {
  return seqid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PacketHeader::seqid() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.PacketHeader.seqId)
  return _internal_seqid();
}
inline void PacketHeader::_internal_set_seqid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  seqid_ = value;
}
inline void PacketHeader::set_seqid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_seqid(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.PacketHeader.seqId)
}

// repeated .AcFunDanmu.PacketHeader.Feature features = 11;
inline int PacketHeader::_internal_features_size() const {
  return features_.size();
}
inline int PacketHeader::features_size() const {
  return _internal_features_size();
}
inline void PacketHeader::clear_features() {
  features_.Clear();
}
inline ::AcFunDanmu::PacketHeader_Feature PacketHeader::_internal_features(int index) const {
  return static_cast< ::AcFunDanmu::PacketHeader_Feature >(features_.Get(index));
}
inline ::AcFunDanmu::PacketHeader_Feature PacketHeader::features(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.PacketHeader.features)
  return _internal_features(index);
}
inline void PacketHeader::set_features(int index, ::AcFunDanmu::PacketHeader_Feature value) {
  features_.Set(index, value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.PacketHeader.features)
}
inline void PacketHeader::_internal_add_features(::AcFunDanmu::PacketHeader_Feature value) {
  features_.Add(value);
}
inline void PacketHeader::add_features(::AcFunDanmu::PacketHeader_Feature value) {
  // @@protoc_insertion_point(field_add:AcFunDanmu.PacketHeader.features)
  _internal_add_features(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
PacketHeader::features() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.PacketHeader.features)
  return features_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
PacketHeader::_internal_mutable_features() {
  return &features_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
PacketHeader::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.PacketHeader.features)
  return _internal_mutable_features();
}

// string kpn = 12;
inline void PacketHeader::clear_kpn() {
  kpn_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PacketHeader::kpn() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.PacketHeader.kpn)
  return _internal_kpn();
}
inline void PacketHeader::set_kpn(const std::string& value) {
  _internal_set_kpn(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.PacketHeader.kpn)
}
inline std::string* PacketHeader::mutable_kpn() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.PacketHeader.kpn)
  return _internal_mutable_kpn();
}
inline const std::string& PacketHeader::_internal_kpn() const {
  return kpn_.Get();
}
inline void PacketHeader::_internal_set_kpn(const std::string& value) {
  
  kpn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PacketHeader::set_kpn(std::string&& value) {
  
  kpn_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.PacketHeader.kpn)
}
inline void PacketHeader::set_kpn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  kpn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.PacketHeader.kpn)
}
inline void PacketHeader::set_kpn(const char* value,
    size_t size) {
  
  kpn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.PacketHeader.kpn)
}
inline std::string* PacketHeader::_internal_mutable_kpn() {
  
  return kpn_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PacketHeader::release_kpn() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.PacketHeader.kpn)
  return kpn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PacketHeader::set_allocated_kpn(std::string* kpn) {
  if (kpn != nullptr) {
    
  } else {
    
  }
  kpn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), kpn,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.PacketHeader.kpn)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace AcFunDanmu

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::AcFunDanmu::PacketHeader_Flags> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::PacketHeader_Flags>() {
  return ::AcFunDanmu::PacketHeader_Flags_descriptor();
}
template <> struct is_proto_enum< ::AcFunDanmu::PacketHeader_EncodingType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::PacketHeader_EncodingType>() {
  return ::AcFunDanmu::PacketHeader_EncodingType_descriptor();
}
template <> struct is_proto_enum< ::AcFunDanmu::PacketHeader_EncryptionMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::PacketHeader_EncryptionMode>() {
  return ::AcFunDanmu::PacketHeader_EncryptionMode_descriptor();
}
template <> struct is_proto_enum< ::AcFunDanmu::PacketHeader_Feature> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::PacketHeader_Feature>() {
  return ::AcFunDanmu::PacketHeader_Feature_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_PacketHeader_2eproto
