// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommonStateSignalAuthorChatChangeSoundConfig.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_CommonStateSignalAuthorChatChangeSoundConfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_CommonStateSignalAuthorChatChangeSoundConfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_CommonStateSignalAuthorChatChangeSoundConfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_CommonStateSignalAuthorChatChangeSoundConfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_CommonStateSignalAuthorChatChangeSoundConfig_2eproto;
namespace AcFunDanmu {
class CommonStateSignalAuthorChatChangesSoundConfig;
class CommonStateSignalAuthorChatChangesSoundConfigDefaultTypeInternal;
extern CommonStateSignalAuthorChatChangesSoundConfigDefaultTypeInternal _CommonStateSignalAuthorChatChangesSoundConfig_default_instance_;
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::CommonStateSignalAuthorChatChangesSoundConfig* Arena::CreateMaybeMessage<::AcFunDanmu::CommonStateSignalAuthorChatChangesSoundConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {

enum CommonStateSignalAuthorChatChangesSoundConfig_Unknown : int {
  CommonStateSignalAuthorChatChangesSoundConfig_Unknown_c = 0,
  CommonStateSignalAuthorChatChangesSoundConfig_Unknown_d = 1,
  CommonStateSignalAuthorChatChangesSoundConfig_Unknown_e = 2,
  CommonStateSignalAuthorChatChangesSoundConfig_Unknown_CommonStateSignalAuthorChatChangesSoundConfig_Unknown_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CommonStateSignalAuthorChatChangesSoundConfig_Unknown_CommonStateSignalAuthorChatChangesSoundConfig_Unknown_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CommonStateSignalAuthorChatChangesSoundConfig_Unknown_IsValid(int value);
constexpr CommonStateSignalAuthorChatChangesSoundConfig_Unknown CommonStateSignalAuthorChatChangesSoundConfig_Unknown_Unknown_MIN = CommonStateSignalAuthorChatChangesSoundConfig_Unknown_c;
constexpr CommonStateSignalAuthorChatChangesSoundConfig_Unknown CommonStateSignalAuthorChatChangesSoundConfig_Unknown_Unknown_MAX = CommonStateSignalAuthorChatChangesSoundConfig_Unknown_e;
constexpr int CommonStateSignalAuthorChatChangesSoundConfig_Unknown_Unknown_ARRAYSIZE = CommonStateSignalAuthorChatChangesSoundConfig_Unknown_Unknown_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommonStateSignalAuthorChatChangesSoundConfig_Unknown_descriptor();
template<typename T>
inline const std::string& CommonStateSignalAuthorChatChangesSoundConfig_Unknown_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CommonStateSignalAuthorChatChangesSoundConfig_Unknown>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CommonStateSignalAuthorChatChangesSoundConfig_Unknown_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CommonStateSignalAuthorChatChangesSoundConfig_Unknown_descriptor(), enum_t_value);
}
inline bool CommonStateSignalAuthorChatChangesSoundConfig_Unknown_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CommonStateSignalAuthorChatChangesSoundConfig_Unknown* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CommonStateSignalAuthorChatChangesSoundConfig_Unknown>(
    CommonStateSignalAuthorChatChangesSoundConfig_Unknown_descriptor(), name, value);
}
// ===================================================================

class CommonStateSignalAuthorChatChangesSoundConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.CommonStateSignalAuthorChatChangesSoundConfig) */ {
 public:
  inline CommonStateSignalAuthorChatChangesSoundConfig() : CommonStateSignalAuthorChatChangesSoundConfig(nullptr) {}
  virtual ~CommonStateSignalAuthorChatChangesSoundConfig();

  CommonStateSignalAuthorChatChangesSoundConfig(const CommonStateSignalAuthorChatChangesSoundConfig& from);
  CommonStateSignalAuthorChatChangesSoundConfig(CommonStateSignalAuthorChatChangesSoundConfig&& from) noexcept
    : CommonStateSignalAuthorChatChangesSoundConfig() {
    *this = ::std::move(from);
  }

  inline CommonStateSignalAuthorChatChangesSoundConfig& operator=(const CommonStateSignalAuthorChatChangesSoundConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonStateSignalAuthorChatChangesSoundConfig& operator=(CommonStateSignalAuthorChatChangesSoundConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommonStateSignalAuthorChatChangesSoundConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommonStateSignalAuthorChatChangesSoundConfig* internal_default_instance() {
    return reinterpret_cast<const CommonStateSignalAuthorChatChangesSoundConfig*>(
               &_CommonStateSignalAuthorChatChangesSoundConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CommonStateSignalAuthorChatChangesSoundConfig& a, CommonStateSignalAuthorChatChangesSoundConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonStateSignalAuthorChatChangesSoundConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonStateSignalAuthorChatChangesSoundConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommonStateSignalAuthorChatChangesSoundConfig* New() const final {
    return CreateMaybeMessage<CommonStateSignalAuthorChatChangesSoundConfig>(nullptr);
  }

  CommonStateSignalAuthorChatChangesSoundConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommonStateSignalAuthorChatChangesSoundConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommonStateSignalAuthorChatChangesSoundConfig& from);
  void MergeFrom(const CommonStateSignalAuthorChatChangesSoundConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonStateSignalAuthorChatChangesSoundConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.CommonStateSignalAuthorChatChangesSoundConfig";
  }
  protected:
  explicit CommonStateSignalAuthorChatChangesSoundConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CommonStateSignalAuthorChatChangeSoundConfig_2eproto);
    return ::descriptor_table_CommonStateSignalAuthorChatChangeSoundConfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CommonStateSignalAuthorChatChangesSoundConfig_Unknown Unknown;
  static constexpr Unknown c =
    CommonStateSignalAuthorChatChangesSoundConfig_Unknown_c;
  static constexpr Unknown d =
    CommonStateSignalAuthorChatChangesSoundConfig_Unknown_d;
  static constexpr Unknown e =
    CommonStateSignalAuthorChatChangesSoundConfig_Unknown_e;
  static inline bool Unknown_IsValid(int value) {
    return CommonStateSignalAuthorChatChangesSoundConfig_Unknown_IsValid(value);
  }
  static constexpr Unknown Unknown_MIN =
    CommonStateSignalAuthorChatChangesSoundConfig_Unknown_Unknown_MIN;
  static constexpr Unknown Unknown_MAX =
    CommonStateSignalAuthorChatChangesSoundConfig_Unknown_Unknown_MAX;
  static constexpr int Unknown_ARRAYSIZE =
    CommonStateSignalAuthorChatChangesSoundConfig_Unknown_Unknown_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Unknown_descriptor() {
    return CommonStateSignalAuthorChatChangesSoundConfig_Unknown_descriptor();
  }
  template<typename T>
  static inline const std::string& Unknown_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Unknown>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Unknown_Name.");
    return CommonStateSignalAuthorChatChangesSoundConfig_Unknown_Name(enum_t_value);
  }
  static inline bool Unknown_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Unknown* value) {
    return CommonStateSignalAuthorChatChangesSoundConfig_Unknown_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAFieldNumber = 1,
    kBFieldNumber = 2,
  };
  // string a = 1;
  void clear_a();
  const std::string& a() const;
  void set_a(const std::string& value);
  void set_a(std::string&& value);
  void set_a(const char* value);
  void set_a(const char* value, size_t size);
  std::string* mutable_a();
  std::string* release_a();
  void set_allocated_a(std::string* a);
  private:
  const std::string& _internal_a() const;
  void _internal_set_a(const std::string& value);
  std::string* _internal_mutable_a();
  public:

  // .AcFunDanmu.CommonStateSignalAuthorChatChangesSoundConfig.Unknown b = 2;
  void clear_b();
  ::AcFunDanmu::CommonStateSignalAuthorChatChangesSoundConfig_Unknown b() const;
  void set_b(::AcFunDanmu::CommonStateSignalAuthorChatChangesSoundConfig_Unknown value);
  private:
  ::AcFunDanmu::CommonStateSignalAuthorChatChangesSoundConfig_Unknown _internal_b() const;
  void _internal_set_b(::AcFunDanmu::CommonStateSignalAuthorChatChangesSoundConfig_Unknown value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.CommonStateSignalAuthorChatChangesSoundConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr a_;
  int b_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CommonStateSignalAuthorChatChangeSoundConfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CommonStateSignalAuthorChatChangesSoundConfig

// string a = 1;
inline void CommonStateSignalAuthorChatChangesSoundConfig::clear_a() {
  a_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CommonStateSignalAuthorChatChangesSoundConfig::a() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonStateSignalAuthorChatChangesSoundConfig.a)
  return _internal_a();
}
inline void CommonStateSignalAuthorChatChangesSoundConfig::set_a(const std::string& value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommonStateSignalAuthorChatChangesSoundConfig.a)
}
inline std::string* CommonStateSignalAuthorChatChangesSoundConfig::mutable_a() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.CommonStateSignalAuthorChatChangesSoundConfig.a)
  return _internal_mutable_a();
}
inline const std::string& CommonStateSignalAuthorChatChangesSoundConfig::_internal_a() const {
  return a_.Get();
}
inline void CommonStateSignalAuthorChatChangesSoundConfig::_internal_set_a(const std::string& value) {
  
  a_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CommonStateSignalAuthorChatChangesSoundConfig::set_a(std::string&& value) {
  
  a_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.CommonStateSignalAuthorChatChangesSoundConfig.a)
}
inline void CommonStateSignalAuthorChatChangesSoundConfig::set_a(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  a_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.CommonStateSignalAuthorChatChangesSoundConfig.a)
}
inline void CommonStateSignalAuthorChatChangesSoundConfig::set_a(const char* value,
    size_t size) {
  
  a_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.CommonStateSignalAuthorChatChangesSoundConfig.a)
}
inline std::string* CommonStateSignalAuthorChatChangesSoundConfig::_internal_mutable_a() {
  
  return a_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CommonStateSignalAuthorChatChangesSoundConfig::release_a() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.CommonStateSignalAuthorChatChangesSoundConfig.a)
  return a_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommonStateSignalAuthorChatChangesSoundConfig::set_allocated_a(std::string* a) {
  if (a != nullptr) {
    
  } else {
    
  }
  a_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), a,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.CommonStateSignalAuthorChatChangesSoundConfig.a)
}

// .AcFunDanmu.CommonStateSignalAuthorChatChangesSoundConfig.Unknown b = 2;
inline void CommonStateSignalAuthorChatChangesSoundConfig::clear_b() {
  b_ = 0;
}
inline ::AcFunDanmu::CommonStateSignalAuthorChatChangesSoundConfig_Unknown CommonStateSignalAuthorChatChangesSoundConfig::_internal_b() const {
  return static_cast< ::AcFunDanmu::CommonStateSignalAuthorChatChangesSoundConfig_Unknown >(b_);
}
inline ::AcFunDanmu::CommonStateSignalAuthorChatChangesSoundConfig_Unknown CommonStateSignalAuthorChatChangesSoundConfig::b() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonStateSignalAuthorChatChangesSoundConfig.b)
  return _internal_b();
}
inline void CommonStateSignalAuthorChatChangesSoundConfig::_internal_set_b(::AcFunDanmu::CommonStateSignalAuthorChatChangesSoundConfig_Unknown value) {
  
  b_ = value;
}
inline void CommonStateSignalAuthorChatChangesSoundConfig::set_b(::AcFunDanmu::CommonStateSignalAuthorChatChangesSoundConfig_Unknown value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommonStateSignalAuthorChatChangesSoundConfig.b)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace AcFunDanmu

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::AcFunDanmu::CommonStateSignalAuthorChatChangesSoundConfig_Unknown> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::CommonStateSignalAuthorChatChangesSoundConfig_Unknown>() {
  return ::AcFunDanmu::CommonStateSignalAuthorChatChangesSoundConfig_Unknown_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_CommonStateSignalAuthorChatChangeSoundConfig_2eproto
