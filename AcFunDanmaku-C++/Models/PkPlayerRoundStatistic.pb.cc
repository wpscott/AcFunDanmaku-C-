// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PkPlayerRoundStatistic.proto

#include "PkPlayerRoundStatistic.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace AcFunDanmu {
class PkPlayerRoundStatisticDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PkPlayerRoundStatistic> _instance;
} _PkPlayerRoundStatistic_default_instance_;
}  // namespace AcFunDanmu
static void InitDefaultsscc_info_PkPlayerRoundStatistic_PkPlayerRoundStatistic_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AcFunDanmu::_PkPlayerRoundStatistic_default_instance_;
    new (ptr) ::AcFunDanmu::PkPlayerRoundStatistic();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PkPlayerRoundStatistic_PkPlayerRoundStatistic_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PkPlayerRoundStatistic_PkPlayerRoundStatistic_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_PkPlayerRoundStatistic_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_PkPlayerRoundStatistic_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_PkPlayerRoundStatistic_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_PkPlayerRoundStatistic_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::PkPlayerRoundStatistic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::PkPlayerRoundStatistic, a_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::PkPlayerRoundStatistic, b_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::AcFunDanmu::PkPlayerRoundStatistic)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AcFunDanmu::_PkPlayerRoundStatistic_default_instance_),
};

const char descriptor_table_protodef_PkPlayerRoundStatistic_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034PkPlayerRoundStatistic.proto\022\nAcFunDan"
  "mu\".\n\026PkPlayerRoundStatistic\022\t\n\001a\030\001 \001(\003\022"
  "\t\n\001b\030\002 \001(\005b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_PkPlayerRoundStatistic_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_PkPlayerRoundStatistic_2eproto_sccs[1] = {
  &scc_info_PkPlayerRoundStatistic_PkPlayerRoundStatistic_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_PkPlayerRoundStatistic_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_PkPlayerRoundStatistic_2eproto = {
  false, false, descriptor_table_protodef_PkPlayerRoundStatistic_2eproto, "PkPlayerRoundStatistic.proto", 98,
  &descriptor_table_PkPlayerRoundStatistic_2eproto_once, descriptor_table_PkPlayerRoundStatistic_2eproto_sccs, descriptor_table_PkPlayerRoundStatistic_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_PkPlayerRoundStatistic_2eproto::offsets,
  file_level_metadata_PkPlayerRoundStatistic_2eproto, 1, file_level_enum_descriptors_PkPlayerRoundStatistic_2eproto, file_level_service_descriptors_PkPlayerRoundStatistic_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_PkPlayerRoundStatistic_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_PkPlayerRoundStatistic_2eproto)), true);
namespace AcFunDanmu {

// ===================================================================

class PkPlayerRoundStatistic::_Internal {
 public:
};

PkPlayerRoundStatistic::PkPlayerRoundStatistic(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.PkPlayerRoundStatistic)
}
PkPlayerRoundStatistic::PkPlayerRoundStatistic(const PkPlayerRoundStatistic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&a_, &from.a_,
    static_cast<size_t>(reinterpret_cast<char*>(&b_) -
    reinterpret_cast<char*>(&a_)) + sizeof(b_));
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.PkPlayerRoundStatistic)
}

void PkPlayerRoundStatistic::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&a_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&b_) -
      reinterpret_cast<char*>(&a_)) + sizeof(b_));
}

PkPlayerRoundStatistic::~PkPlayerRoundStatistic() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.PkPlayerRoundStatistic)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PkPlayerRoundStatistic::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PkPlayerRoundStatistic::ArenaDtor(void* object) {
  PkPlayerRoundStatistic* _this = reinterpret_cast< PkPlayerRoundStatistic* >(object);
  (void)_this;
}
void PkPlayerRoundStatistic::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PkPlayerRoundStatistic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PkPlayerRoundStatistic& PkPlayerRoundStatistic::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PkPlayerRoundStatistic_PkPlayerRoundStatistic_2eproto.base);
  return *internal_default_instance();
}


void PkPlayerRoundStatistic::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.PkPlayerRoundStatistic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&a_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&b_) -
      reinterpret_cast<char*>(&a_)) + sizeof(b_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PkPlayerRoundStatistic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 a = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 b = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PkPlayerRoundStatistic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.PkPlayerRoundStatistic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 a = 1;
  if (this->a() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_a(), target);
  }

  // int32 b = 2;
  if (this->b() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_b(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.PkPlayerRoundStatistic)
  return target;
}

size_t PkPlayerRoundStatistic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.PkPlayerRoundStatistic)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 a = 1;
  if (this->a() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_a());
  }

  // int32 b = 2;
  if (this->b() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_b());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PkPlayerRoundStatistic::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AcFunDanmu.PkPlayerRoundStatistic)
  GOOGLE_DCHECK_NE(&from, this);
  const PkPlayerRoundStatistic* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PkPlayerRoundStatistic>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AcFunDanmu.PkPlayerRoundStatistic)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AcFunDanmu.PkPlayerRoundStatistic)
    MergeFrom(*source);
  }
}

void PkPlayerRoundStatistic::MergeFrom(const PkPlayerRoundStatistic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.PkPlayerRoundStatistic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.a() != 0) {
    _internal_set_a(from._internal_a());
  }
  if (from.b() != 0) {
    _internal_set_b(from._internal_b());
  }
}

void PkPlayerRoundStatistic::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AcFunDanmu.PkPlayerRoundStatistic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PkPlayerRoundStatistic::CopyFrom(const PkPlayerRoundStatistic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.PkPlayerRoundStatistic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PkPlayerRoundStatistic::IsInitialized() const {
  return true;
}

void PkPlayerRoundStatistic::InternalSwap(PkPlayerRoundStatistic* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PkPlayerRoundStatistic, b_)
      + sizeof(PkPlayerRoundStatistic::b_)
      - PROTOBUF_FIELD_OFFSET(PkPlayerRoundStatistic, a_)>(
          reinterpret_cast<char*>(&a_),
          reinterpret_cast<char*>(&other->a_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PkPlayerRoundStatistic::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AcFunDanmu::PkPlayerRoundStatistic* Arena::CreateMaybeMessage< ::AcFunDanmu::PkPlayerRoundStatistic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::PkPlayerRoundStatistic >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
