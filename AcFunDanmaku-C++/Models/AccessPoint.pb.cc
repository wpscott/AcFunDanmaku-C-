// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AccessPoint.proto

#include "AccessPoint.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace AcFunDanmu {
class AccessPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccessPoint> _instance;
} _AccessPoint_default_instance_;
}  // namespace AcFunDanmu
static void InitDefaultsscc_info_AccessPoint_AccessPoint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AcFunDanmu::_AccessPoint_default_instance_;
    new (ptr) ::AcFunDanmu::AccessPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AcFunDanmu::AccessPoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccessPoint_AccessPoint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AccessPoint_AccessPoint_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_AccessPoint_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_AccessPoint_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_AccessPoint_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_AccessPoint_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::AccessPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::AccessPoint, addresstype_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::AccessPoint, port_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::AccessPoint, ipv4_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::AccessPoint, ipv6_),
  PROTOBUF_FIELD_OFFSET(::AcFunDanmu::AccessPoint, domain_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::AcFunDanmu::AccessPoint)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AcFunDanmu::_AccessPoint_default_instance_),
};

const char descriptor_table_protodef_AccessPoint_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021AccessPoint.proto\022\nAcFunDanmu\"\263\001\n\013Acce"
  "ssPoint\0228\n\013addressType\030\001 \001(\0162#.AcFunDanm"
  "u.AccessPoint.AddressType\022\014\n\004port\030\002 \001(\r\022"
  "\014\n\004ipV4\030\003 \001(\007\022\014\n\004ipV6\030\004 \001(\014\022\016\n\006domain\030\005 "
  "\001(\t\"0\n\013AddressType\022\t\n\005kIPV4\020\000\022\t\n\005kIPV6\020\001"
  "\022\013\n\007kDomain\020\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_AccessPoint_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_AccessPoint_2eproto_sccs[1] = {
  &scc_info_AccessPoint_AccessPoint_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_AccessPoint_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_AccessPoint_2eproto = {
  false, false, descriptor_table_protodef_AccessPoint_2eproto, "AccessPoint.proto", 221,
  &descriptor_table_AccessPoint_2eproto_once, descriptor_table_AccessPoint_2eproto_sccs, descriptor_table_AccessPoint_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_AccessPoint_2eproto::offsets,
  file_level_metadata_AccessPoint_2eproto, 1, file_level_enum_descriptors_AccessPoint_2eproto, file_level_service_descriptors_AccessPoint_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_AccessPoint_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_AccessPoint_2eproto)), true);
namespace AcFunDanmu {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AccessPoint_AddressType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_AccessPoint_2eproto);
  return file_level_enum_descriptors_AccessPoint_2eproto[0];
}
bool AccessPoint_AddressType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AccessPoint_AddressType AccessPoint::kIPV4;
constexpr AccessPoint_AddressType AccessPoint::kIPV6;
constexpr AccessPoint_AddressType AccessPoint::kDomain;
constexpr AccessPoint_AddressType AccessPoint::AddressType_MIN;
constexpr AccessPoint_AddressType AccessPoint::AddressType_MAX;
constexpr int AccessPoint::AddressType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void AccessPoint::InitAsDefaultInstance() {
}
class AccessPoint::_Internal {
 public:
};

AccessPoint::AccessPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AcFunDanmu.AccessPoint)
}
AccessPoint::AccessPoint(const AccessPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ipv6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ipv6().empty()) {
    ipv6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ipv6(),
      GetArena());
  }
  domain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_domain().empty()) {
    domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_domain(),
      GetArena());
  }
  ::memcpy(&addresstype_, &from.addresstype_,
    static_cast<size_t>(reinterpret_cast<char*>(&ipv4_) -
    reinterpret_cast<char*>(&addresstype_)) + sizeof(ipv4_));
  // @@protoc_insertion_point(copy_constructor:AcFunDanmu.AccessPoint)
}

void AccessPoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AccessPoint_AccessPoint_2eproto.base);
  ipv6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  domain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&addresstype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ipv4_) -
      reinterpret_cast<char*>(&addresstype_)) + sizeof(ipv4_));
}

AccessPoint::~AccessPoint() {
  // @@protoc_insertion_point(destructor:AcFunDanmu.AccessPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AccessPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ipv6_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  domain_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AccessPoint::ArenaDtor(void* object) {
  AccessPoint* _this = reinterpret_cast< AccessPoint* >(object);
  (void)_this;
}
void AccessPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccessPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccessPoint& AccessPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccessPoint_AccessPoint_2eproto.base);
  return *internal_default_instance();
}


void AccessPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:AcFunDanmu.AccessPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ipv6_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  domain_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&addresstype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ipv4_) -
      reinterpret_cast<char*>(&addresstype_)) + sizeof(ipv4_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccessPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .AcFunDanmu.AccessPoint.AddressType addressType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_addresstype(static_cast<::AcFunDanmu::AccessPoint_AddressType>(val));
        } else goto handle_unusual;
        continue;
      // uint32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // fixed32 ipV4 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          ipv4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // bytes ipV6 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_ipv6();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string domain = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_domain();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AcFunDanmu.AccessPoint.domain"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccessPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcFunDanmu.AccessPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AcFunDanmu.AccessPoint.AddressType addressType = 1;
  if (this->addresstype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_addresstype(), target);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_port(), target);
  }

  // fixed32 ipV4 = 3;
  if (this->ipv4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(3, this->_internal_ipv4(), target);
  }

  // bytes ipV6 = 4;
  if (this->ipv6().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_ipv6(), target);
  }

  // string domain = 5;
  if (this->domain().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_domain().data(), static_cast<int>(this->_internal_domain().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AcFunDanmu.AccessPoint.domain");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_domain(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcFunDanmu.AccessPoint)
  return target;
}

size_t AccessPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcFunDanmu.AccessPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes ipV6 = 4;
  if (this->ipv6().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ipv6());
  }

  // string domain = 5;
  if (this->domain().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_domain());
  }

  // .AcFunDanmu.AccessPoint.AddressType addressType = 1;
  if (this->addresstype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_addresstype());
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());
  }

  // fixed32 ipV4 = 3;
  if (this->ipv4() != 0) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccessPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AcFunDanmu.AccessPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const AccessPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccessPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AcFunDanmu.AccessPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AcFunDanmu.AccessPoint)
    MergeFrom(*source);
  }
}

void AccessPoint::MergeFrom(const AccessPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AcFunDanmu.AccessPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ipv6().size() > 0) {
    _internal_set_ipv6(from._internal_ipv6());
  }
  if (from.domain().size() > 0) {
    _internal_set_domain(from._internal_domain());
  }
  if (from.addresstype() != 0) {
    _internal_set_addresstype(from._internal_addresstype());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
  if (from.ipv4() != 0) {
    _internal_set_ipv4(from._internal_ipv4());
  }
}

void AccessPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AcFunDanmu.AccessPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccessPoint::CopyFrom(const AccessPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcFunDanmu.AccessPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccessPoint::IsInitialized() const {
  return true;
}

void AccessPoint::InternalSwap(AccessPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ipv6_.Swap(&other->ipv6_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  domain_.Swap(&other->domain_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccessPoint, ipv4_)
      + sizeof(AccessPoint::ipv4_)
      - PROTOBUF_FIELD_OFFSET(AccessPoint, addresstype_)>(
          reinterpret_cast<char*>(&addresstype_),
          reinterpret_cast<char*>(&other->addresstype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AccessPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AcFunDanmu::AccessPoint* Arena::CreateMaybeMessage< ::AcFunDanmu::AccessPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AcFunDanmu::AccessPoint >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
