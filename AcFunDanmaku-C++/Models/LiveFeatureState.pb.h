// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LiveFeatureState.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_LiveFeatureState_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_LiveFeatureState_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_LiveFeatureState_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_LiveFeatureState_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_LiveFeatureState_2eproto;
namespace AcFunDanmu {
class LiveFeatureState;
class LiveFeatureStateDefaultTypeInternal;
extern LiveFeatureStateDefaultTypeInternal _LiveFeatureState_default_instance_;
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::LiveFeatureState* Arena::CreateMaybeMessage<::AcFunDanmu::LiveFeatureState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {

enum LiveFeatureState_FeatureType : int {
  LiveFeatureState_FeatureType_FEATURE_UNKNOWN = 0,
  LiveFeatureState_FeatureType_LANDSCAPE_COMMENT = 1,
  LiveFeatureState_FeatureType_LiveFeatureState_FeatureType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LiveFeatureState_FeatureType_LiveFeatureState_FeatureType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LiveFeatureState_FeatureType_IsValid(int value);
constexpr LiveFeatureState_FeatureType LiveFeatureState_FeatureType_FeatureType_MIN = LiveFeatureState_FeatureType_FEATURE_UNKNOWN;
constexpr LiveFeatureState_FeatureType LiveFeatureState_FeatureType_FeatureType_MAX = LiveFeatureState_FeatureType_LANDSCAPE_COMMENT;
constexpr int LiveFeatureState_FeatureType_FeatureType_ARRAYSIZE = LiveFeatureState_FeatureType_FeatureType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LiveFeatureState_FeatureType_descriptor();
template<typename T>
inline const std::string& LiveFeatureState_FeatureType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LiveFeatureState_FeatureType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LiveFeatureState_FeatureType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LiveFeatureState_FeatureType_descriptor(), enum_t_value);
}
inline bool LiveFeatureState_FeatureType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LiveFeatureState_FeatureType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LiveFeatureState_FeatureType>(
    LiveFeatureState_FeatureType_descriptor(), name, value);
}
enum LiveFeatureState_FeatureState : int {
  LiveFeatureState_FeatureState_FEATURE_STATE_UNKNOWN = 0,
  LiveFeatureState_FeatureState_FEATURE_STATE_OPEND = 1,
  LiveFeatureState_FeatureState_FEATURE_STATE_CLOSED = 2,
  LiveFeatureState_FeatureState_LiveFeatureState_FeatureState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LiveFeatureState_FeatureState_LiveFeatureState_FeatureState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LiveFeatureState_FeatureState_IsValid(int value);
constexpr LiveFeatureState_FeatureState LiveFeatureState_FeatureState_FeatureState_MIN = LiveFeatureState_FeatureState_FEATURE_STATE_UNKNOWN;
constexpr LiveFeatureState_FeatureState LiveFeatureState_FeatureState_FeatureState_MAX = LiveFeatureState_FeatureState_FEATURE_STATE_CLOSED;
constexpr int LiveFeatureState_FeatureState_FeatureState_ARRAYSIZE = LiveFeatureState_FeatureState_FeatureState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LiveFeatureState_FeatureState_descriptor();
template<typename T>
inline const std::string& LiveFeatureState_FeatureState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LiveFeatureState_FeatureState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LiveFeatureState_FeatureState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LiveFeatureState_FeatureState_descriptor(), enum_t_value);
}
inline bool LiveFeatureState_FeatureState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LiveFeatureState_FeatureState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LiveFeatureState_FeatureState>(
    LiveFeatureState_FeatureState_descriptor(), name, value);
}
// ===================================================================

class LiveFeatureState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.LiveFeatureState) */ {
 public:
  inline LiveFeatureState() : LiveFeatureState(nullptr) {}
  virtual ~LiveFeatureState();

  LiveFeatureState(const LiveFeatureState& from);
  LiveFeatureState(LiveFeatureState&& from) noexcept
    : LiveFeatureState() {
    *this = ::std::move(from);
  }

  inline LiveFeatureState& operator=(const LiveFeatureState& from) {
    CopyFrom(from);
    return *this;
  }
  inline LiveFeatureState& operator=(LiveFeatureState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LiveFeatureState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LiveFeatureState* internal_default_instance() {
    return reinterpret_cast<const LiveFeatureState*>(
               &_LiveFeatureState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LiveFeatureState& a, LiveFeatureState& b) {
    a.Swap(&b);
  }
  inline void Swap(LiveFeatureState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LiveFeatureState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LiveFeatureState* New() const final {
    return CreateMaybeMessage<LiveFeatureState>(nullptr);
  }

  LiveFeatureState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LiveFeatureState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LiveFeatureState& from);
  void MergeFrom(const LiveFeatureState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LiveFeatureState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.LiveFeatureState";
  }
  protected:
  explicit LiveFeatureState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LiveFeatureState_2eproto);
    return ::descriptor_table_LiveFeatureState_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef LiveFeatureState_FeatureType FeatureType;
  static constexpr FeatureType FEATURE_UNKNOWN =
    LiveFeatureState_FeatureType_FEATURE_UNKNOWN;
  static constexpr FeatureType LANDSCAPE_COMMENT =
    LiveFeatureState_FeatureType_LANDSCAPE_COMMENT;
  static inline bool FeatureType_IsValid(int value) {
    return LiveFeatureState_FeatureType_IsValid(value);
  }
  static constexpr FeatureType FeatureType_MIN =
    LiveFeatureState_FeatureType_FeatureType_MIN;
  static constexpr FeatureType FeatureType_MAX =
    LiveFeatureState_FeatureType_FeatureType_MAX;
  static constexpr int FeatureType_ARRAYSIZE =
    LiveFeatureState_FeatureType_FeatureType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FeatureType_descriptor() {
    return LiveFeatureState_FeatureType_descriptor();
  }
  template<typename T>
  static inline const std::string& FeatureType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FeatureType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FeatureType_Name.");
    return LiveFeatureState_FeatureType_Name(enum_t_value);
  }
  static inline bool FeatureType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FeatureType* value) {
    return LiveFeatureState_FeatureType_Parse(name, value);
  }

  typedef LiveFeatureState_FeatureState FeatureState;
  static constexpr FeatureState FEATURE_STATE_UNKNOWN =
    LiveFeatureState_FeatureState_FEATURE_STATE_UNKNOWN;
  static constexpr FeatureState FEATURE_STATE_OPEND =
    LiveFeatureState_FeatureState_FEATURE_STATE_OPEND;
  static constexpr FeatureState FEATURE_STATE_CLOSED =
    LiveFeatureState_FeatureState_FEATURE_STATE_CLOSED;
  static inline bool FeatureState_IsValid(int value) {
    return LiveFeatureState_FeatureState_IsValid(value);
  }
  static constexpr FeatureState FeatureState_MIN =
    LiveFeatureState_FeatureState_FeatureState_MIN;
  static constexpr FeatureState FeatureState_MAX =
    LiveFeatureState_FeatureState_FeatureState_MAX;
  static constexpr int FeatureState_ARRAYSIZE =
    LiveFeatureState_FeatureState_FeatureState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FeatureState_descriptor() {
    return LiveFeatureState_FeatureState_descriptor();
  }
  template<typename T>
  static inline const std::string& FeatureState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FeatureState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FeatureState_Name.");
    return LiveFeatureState_FeatureState_Name(enum_t_value);
  }
  static inline bool FeatureState_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FeatureState* value) {
    return LiveFeatureState_FeatureState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // .AcFunDanmu.LiveFeatureState.FeatureType type = 1;
  void clear_type();
  ::AcFunDanmu::LiveFeatureState_FeatureType type() const;
  void set_type(::AcFunDanmu::LiveFeatureState_FeatureType value);
  private:
  ::AcFunDanmu::LiveFeatureState_FeatureType _internal_type() const;
  void _internal_set_type(::AcFunDanmu::LiveFeatureState_FeatureType value);
  public:

  // .AcFunDanmu.LiveFeatureState.FeatureState state = 2;
  void clear_state();
  ::AcFunDanmu::LiveFeatureState_FeatureState state() const;
  void set_state(::AcFunDanmu::LiveFeatureState_FeatureState value);
  private:
  ::AcFunDanmu::LiveFeatureState_FeatureState _internal_state() const;
  void _internal_set_state(::AcFunDanmu::LiveFeatureState_FeatureState value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.LiveFeatureState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LiveFeatureState_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LiveFeatureState

// .AcFunDanmu.LiveFeatureState.FeatureType type = 1;
inline void LiveFeatureState::clear_type() {
  type_ = 0;
}
inline ::AcFunDanmu::LiveFeatureState_FeatureType LiveFeatureState::_internal_type() const {
  return static_cast< ::AcFunDanmu::LiveFeatureState_FeatureType >(type_);
}
inline ::AcFunDanmu::LiveFeatureState_FeatureType LiveFeatureState::type() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.LiveFeatureState.type)
  return _internal_type();
}
inline void LiveFeatureState::_internal_set_type(::AcFunDanmu::LiveFeatureState_FeatureType value) {
  
  type_ = value;
}
inline void LiveFeatureState::set_type(::AcFunDanmu::LiveFeatureState_FeatureType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.LiveFeatureState.type)
}

// .AcFunDanmu.LiveFeatureState.FeatureState state = 2;
inline void LiveFeatureState::clear_state() {
  state_ = 0;
}
inline ::AcFunDanmu::LiveFeatureState_FeatureState LiveFeatureState::_internal_state() const {
  return static_cast< ::AcFunDanmu::LiveFeatureState_FeatureState >(state_);
}
inline ::AcFunDanmu::LiveFeatureState_FeatureState LiveFeatureState::state() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.LiveFeatureState.state)
  return _internal_state();
}
inline void LiveFeatureState::_internal_set_state(::AcFunDanmu::LiveFeatureState_FeatureState value) {
  
  state_ = value;
}
inline void LiveFeatureState::set_state(::AcFunDanmu::LiveFeatureState_FeatureState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.LiveFeatureState.state)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace AcFunDanmu

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::AcFunDanmu::LiveFeatureState_FeatureType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::LiveFeatureState_FeatureType>() {
  return ::AcFunDanmu::LiveFeatureState_FeatureType_descriptor();
}
template <> struct is_proto_enum< ::AcFunDanmu::LiveFeatureState_FeatureState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AcFunDanmu::LiveFeatureState_FeatureState>() {
  return ::AcFunDanmu::LiveFeatureState_FeatureState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_LiveFeatureState_2eproto
