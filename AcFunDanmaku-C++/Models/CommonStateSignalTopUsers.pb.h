// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommonStateSignalTopUsers.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_CommonStateSignalTopUsers_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_CommonStateSignalTopUsers_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ZtLiveUserInfo.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_CommonStateSignalTopUsers_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_CommonStateSignalTopUsers_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_CommonStateSignalTopUsers_2eproto;
namespace AcFunDanmu {
class CommonStateSignalTopUsers;
class CommonStateSignalTopUsersDefaultTypeInternal;
extern CommonStateSignalTopUsersDefaultTypeInternal _CommonStateSignalTopUsers_default_instance_;
class CommonStateSignalTopUsers_TopUser;
class CommonStateSignalTopUsers_TopUserDefaultTypeInternal;
extern CommonStateSignalTopUsers_TopUserDefaultTypeInternal _CommonStateSignalTopUsers_TopUser_default_instance_;
}  // namespace AcFunDanmu
PROTOBUF_NAMESPACE_OPEN
template<> ::AcFunDanmu::CommonStateSignalTopUsers* Arena::CreateMaybeMessage<::AcFunDanmu::CommonStateSignalTopUsers>(Arena*);
template<> ::AcFunDanmu::CommonStateSignalTopUsers_TopUser* Arena::CreateMaybeMessage<::AcFunDanmu::CommonStateSignalTopUsers_TopUser>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AcFunDanmu {

// ===================================================================

class CommonStateSignalTopUsers_TopUser PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.CommonStateSignalTopUsers.TopUser) */ {
 public:
  inline CommonStateSignalTopUsers_TopUser() : CommonStateSignalTopUsers_TopUser(nullptr) {}
  virtual ~CommonStateSignalTopUsers_TopUser();

  CommonStateSignalTopUsers_TopUser(const CommonStateSignalTopUsers_TopUser& from);
  CommonStateSignalTopUsers_TopUser(CommonStateSignalTopUsers_TopUser&& from) noexcept
    : CommonStateSignalTopUsers_TopUser() {
    *this = ::std::move(from);
  }

  inline CommonStateSignalTopUsers_TopUser& operator=(const CommonStateSignalTopUsers_TopUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonStateSignalTopUsers_TopUser& operator=(CommonStateSignalTopUsers_TopUser&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommonStateSignalTopUsers_TopUser& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommonStateSignalTopUsers_TopUser* internal_default_instance() {
    return reinterpret_cast<const CommonStateSignalTopUsers_TopUser*>(
               &_CommonStateSignalTopUsers_TopUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CommonStateSignalTopUsers_TopUser& a, CommonStateSignalTopUsers_TopUser& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonStateSignalTopUsers_TopUser* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonStateSignalTopUsers_TopUser* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommonStateSignalTopUsers_TopUser* New() const final {
    return CreateMaybeMessage<CommonStateSignalTopUsers_TopUser>(nullptr);
  }

  CommonStateSignalTopUsers_TopUser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommonStateSignalTopUsers_TopUser>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommonStateSignalTopUsers_TopUser& from);
  void MergeFrom(const CommonStateSignalTopUsers_TopUser& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonStateSignalTopUsers_TopUser* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.CommonStateSignalTopUsers.TopUser";
  }
  protected:
  explicit CommonStateSignalTopUsers_TopUser(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CommonStateSignalTopUsers_2eproto);
    return ::descriptor_table_CommonStateSignalTopUsers_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomWatchingListDataFieldNumber = 3,
    kDisplaySendAmountFieldNumber = 4,
    kUserInfoFieldNumber = 1,
    kAnonymousUserFieldNumber = 5,
  };
  // string customWatchingListData = 3;
  void clear_customwatchinglistdata();
  const std::string& customwatchinglistdata() const;
  void set_customwatchinglistdata(const std::string& value);
  void set_customwatchinglistdata(std::string&& value);
  void set_customwatchinglistdata(const char* value);
  void set_customwatchinglistdata(const char* value, size_t size);
  std::string* mutable_customwatchinglistdata();
  std::string* release_customwatchinglistdata();
  void set_allocated_customwatchinglistdata(std::string* customwatchinglistdata);
  private:
  const std::string& _internal_customwatchinglistdata() const;
  void _internal_set_customwatchinglistdata(const std::string& value);
  std::string* _internal_mutable_customwatchinglistdata();
  public:

  // string displaySendAmount = 4;
  void clear_displaysendamount();
  const std::string& displaysendamount() const;
  void set_displaysendamount(const std::string& value);
  void set_displaysendamount(std::string&& value);
  void set_displaysendamount(const char* value);
  void set_displaysendamount(const char* value, size_t size);
  std::string* mutable_displaysendamount();
  std::string* release_displaysendamount();
  void set_allocated_displaysendamount(std::string* displaysendamount);
  private:
  const std::string& _internal_displaysendamount() const;
  void _internal_set_displaysendamount(const std::string& value);
  std::string* _internal_mutable_displaysendamount();
  public:

  // .AcFunDanmu.ZtLiveUserInfo userInfo = 1;
  bool has_userinfo() const;
  private:
  bool _internal_has_userinfo() const;
  public:
  void clear_userinfo();
  const ::AcFunDanmu::ZtLiveUserInfo& userinfo() const;
  ::AcFunDanmu::ZtLiveUserInfo* release_userinfo();
  ::AcFunDanmu::ZtLiveUserInfo* mutable_userinfo();
  void set_allocated_userinfo(::AcFunDanmu::ZtLiveUserInfo* userinfo);
  private:
  const ::AcFunDanmu::ZtLiveUserInfo& _internal_userinfo() const;
  ::AcFunDanmu::ZtLiveUserInfo* _internal_mutable_userinfo();
  public:
  void unsafe_arena_set_allocated_userinfo(
      ::AcFunDanmu::ZtLiveUserInfo* userinfo);
  ::AcFunDanmu::ZtLiveUserInfo* unsafe_arena_release_userinfo();

  // bool anonymousUser = 5;
  void clear_anonymoususer();
  bool anonymoususer() const;
  void set_anonymoususer(bool value);
  private:
  bool _internal_anonymoususer() const;
  void _internal_set_anonymoususer(bool value);
  public:

  // @@protoc_insertion_point(class_scope:AcFunDanmu.CommonStateSignalTopUsers.TopUser)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customwatchinglistdata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr displaysendamount_;
  ::AcFunDanmu::ZtLiveUserInfo* userinfo_;
  bool anonymoususer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CommonStateSignalTopUsers_2eproto;
};
// -------------------------------------------------------------------

class CommonStateSignalTopUsers PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcFunDanmu.CommonStateSignalTopUsers) */ {
 public:
  inline CommonStateSignalTopUsers() : CommonStateSignalTopUsers(nullptr) {}
  virtual ~CommonStateSignalTopUsers();

  CommonStateSignalTopUsers(const CommonStateSignalTopUsers& from);
  CommonStateSignalTopUsers(CommonStateSignalTopUsers&& from) noexcept
    : CommonStateSignalTopUsers() {
    *this = ::std::move(from);
  }

  inline CommonStateSignalTopUsers& operator=(const CommonStateSignalTopUsers& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonStateSignalTopUsers& operator=(CommonStateSignalTopUsers&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommonStateSignalTopUsers& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommonStateSignalTopUsers* internal_default_instance() {
    return reinterpret_cast<const CommonStateSignalTopUsers*>(
               &_CommonStateSignalTopUsers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CommonStateSignalTopUsers& a, CommonStateSignalTopUsers& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonStateSignalTopUsers* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonStateSignalTopUsers* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommonStateSignalTopUsers* New() const final {
    return CreateMaybeMessage<CommonStateSignalTopUsers>(nullptr);
  }

  CommonStateSignalTopUsers* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommonStateSignalTopUsers>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommonStateSignalTopUsers& from);
  void MergeFrom(const CommonStateSignalTopUsers& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonStateSignalTopUsers* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcFunDanmu.CommonStateSignalTopUsers";
  }
  protected:
  explicit CommonStateSignalTopUsers(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CommonStateSignalTopUsers_2eproto);
    return ::descriptor_table_CommonStateSignalTopUsers_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CommonStateSignalTopUsers_TopUser TopUser;

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
  };
  // repeated .AcFunDanmu.CommonStateSignalTopUsers.TopUser user = 1;
  int user_size() const;
  private:
  int _internal_user_size() const;
  public:
  void clear_user();
  ::AcFunDanmu::CommonStateSignalTopUsers_TopUser* mutable_user(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::CommonStateSignalTopUsers_TopUser >*
      mutable_user();
  private:
  const ::AcFunDanmu::CommonStateSignalTopUsers_TopUser& _internal_user(int index) const;
  ::AcFunDanmu::CommonStateSignalTopUsers_TopUser* _internal_add_user();
  public:
  const ::AcFunDanmu::CommonStateSignalTopUsers_TopUser& user(int index) const;
  ::AcFunDanmu::CommonStateSignalTopUsers_TopUser* add_user();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::CommonStateSignalTopUsers_TopUser >&
      user() const;

  // @@protoc_insertion_point(class_scope:AcFunDanmu.CommonStateSignalTopUsers)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::CommonStateSignalTopUsers_TopUser > user_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CommonStateSignalTopUsers_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CommonStateSignalTopUsers_TopUser

// .AcFunDanmu.ZtLiveUserInfo userInfo = 1;
inline bool CommonStateSignalTopUsers_TopUser::_internal_has_userinfo() const {
  return this != internal_default_instance() && userinfo_ != nullptr;
}
inline bool CommonStateSignalTopUsers_TopUser::has_userinfo() const {
  return _internal_has_userinfo();
}
inline const ::AcFunDanmu::ZtLiveUserInfo& CommonStateSignalTopUsers_TopUser::_internal_userinfo() const {
  const ::AcFunDanmu::ZtLiveUserInfo* p = userinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::AcFunDanmu::ZtLiveUserInfo*>(
      &::AcFunDanmu::_ZtLiveUserInfo_default_instance_);
}
inline const ::AcFunDanmu::ZtLiveUserInfo& CommonStateSignalTopUsers_TopUser::userinfo() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonStateSignalTopUsers.TopUser.userInfo)
  return _internal_userinfo();
}
inline void CommonStateSignalTopUsers_TopUser::unsafe_arena_set_allocated_userinfo(
    ::AcFunDanmu::ZtLiveUserInfo* userinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userinfo_);
  }
  userinfo_ = userinfo;
  if (userinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcFunDanmu.CommonStateSignalTopUsers.TopUser.userInfo)
}
inline ::AcFunDanmu::ZtLiveUserInfo* CommonStateSignalTopUsers_TopUser::release_userinfo() {
  
  ::AcFunDanmu::ZtLiveUserInfo* temp = userinfo_;
  userinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AcFunDanmu::ZtLiveUserInfo* CommonStateSignalTopUsers_TopUser::unsafe_arena_release_userinfo() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.CommonStateSignalTopUsers.TopUser.userInfo)
  
  ::AcFunDanmu::ZtLiveUserInfo* temp = userinfo_;
  userinfo_ = nullptr;
  return temp;
}
inline ::AcFunDanmu::ZtLiveUserInfo* CommonStateSignalTopUsers_TopUser::_internal_mutable_userinfo() {
  
  if (userinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::AcFunDanmu::ZtLiveUserInfo>(GetArena());
    userinfo_ = p;
  }
  return userinfo_;
}
inline ::AcFunDanmu::ZtLiveUserInfo* CommonStateSignalTopUsers_TopUser::mutable_userinfo() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.CommonStateSignalTopUsers.TopUser.userInfo)
  return _internal_mutable_userinfo();
}
inline void CommonStateSignalTopUsers_TopUser::set_allocated_userinfo(::AcFunDanmu::ZtLiveUserInfo* userinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(userinfo_);
  }
  if (userinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userinfo)->GetArena();
    if (message_arena != submessage_arena) {
      userinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userinfo, submessage_arena);
    }
    
  } else {
    
  }
  userinfo_ = userinfo;
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.CommonStateSignalTopUsers.TopUser.userInfo)
}

// string customWatchingListData = 3;
inline void CommonStateSignalTopUsers_TopUser::clear_customwatchinglistdata() {
  customwatchinglistdata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CommonStateSignalTopUsers_TopUser::customwatchinglistdata() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonStateSignalTopUsers.TopUser.customWatchingListData)
  return _internal_customwatchinglistdata();
}
inline void CommonStateSignalTopUsers_TopUser::set_customwatchinglistdata(const std::string& value) {
  _internal_set_customwatchinglistdata(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommonStateSignalTopUsers.TopUser.customWatchingListData)
}
inline std::string* CommonStateSignalTopUsers_TopUser::mutable_customwatchinglistdata() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.CommonStateSignalTopUsers.TopUser.customWatchingListData)
  return _internal_mutable_customwatchinglistdata();
}
inline const std::string& CommonStateSignalTopUsers_TopUser::_internal_customwatchinglistdata() const {
  return customwatchinglistdata_.Get();
}
inline void CommonStateSignalTopUsers_TopUser::_internal_set_customwatchinglistdata(const std::string& value) {
  
  customwatchinglistdata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CommonStateSignalTopUsers_TopUser::set_customwatchinglistdata(std::string&& value) {
  
  customwatchinglistdata_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.CommonStateSignalTopUsers.TopUser.customWatchingListData)
}
inline void CommonStateSignalTopUsers_TopUser::set_customwatchinglistdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  customwatchinglistdata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.CommonStateSignalTopUsers.TopUser.customWatchingListData)
}
inline void CommonStateSignalTopUsers_TopUser::set_customwatchinglistdata(const char* value,
    size_t size) {
  
  customwatchinglistdata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.CommonStateSignalTopUsers.TopUser.customWatchingListData)
}
inline std::string* CommonStateSignalTopUsers_TopUser::_internal_mutable_customwatchinglistdata() {
  
  return customwatchinglistdata_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CommonStateSignalTopUsers_TopUser::release_customwatchinglistdata() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.CommonStateSignalTopUsers.TopUser.customWatchingListData)
  return customwatchinglistdata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommonStateSignalTopUsers_TopUser::set_allocated_customwatchinglistdata(std::string* customwatchinglistdata) {
  if (customwatchinglistdata != nullptr) {
    
  } else {
    
  }
  customwatchinglistdata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customwatchinglistdata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.CommonStateSignalTopUsers.TopUser.customWatchingListData)
}

// string displaySendAmount = 4;
inline void CommonStateSignalTopUsers_TopUser::clear_displaysendamount() {
  displaysendamount_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CommonStateSignalTopUsers_TopUser::displaysendamount() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonStateSignalTopUsers.TopUser.displaySendAmount)
  return _internal_displaysendamount();
}
inline void CommonStateSignalTopUsers_TopUser::set_displaysendamount(const std::string& value) {
  _internal_set_displaysendamount(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommonStateSignalTopUsers.TopUser.displaySendAmount)
}
inline std::string* CommonStateSignalTopUsers_TopUser::mutable_displaysendamount() {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.CommonStateSignalTopUsers.TopUser.displaySendAmount)
  return _internal_mutable_displaysendamount();
}
inline const std::string& CommonStateSignalTopUsers_TopUser::_internal_displaysendamount() const {
  return displaysendamount_.Get();
}
inline void CommonStateSignalTopUsers_TopUser::_internal_set_displaysendamount(const std::string& value) {
  
  displaysendamount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CommonStateSignalTopUsers_TopUser::set_displaysendamount(std::string&& value) {
  
  displaysendamount_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcFunDanmu.CommonStateSignalTopUsers.TopUser.displaySendAmount)
}
inline void CommonStateSignalTopUsers_TopUser::set_displaysendamount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  displaysendamount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:AcFunDanmu.CommonStateSignalTopUsers.TopUser.displaySendAmount)
}
inline void CommonStateSignalTopUsers_TopUser::set_displaysendamount(const char* value,
    size_t size) {
  
  displaysendamount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcFunDanmu.CommonStateSignalTopUsers.TopUser.displaySendAmount)
}
inline std::string* CommonStateSignalTopUsers_TopUser::_internal_mutable_displaysendamount() {
  
  return displaysendamount_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CommonStateSignalTopUsers_TopUser::release_displaysendamount() {
  // @@protoc_insertion_point(field_release:AcFunDanmu.CommonStateSignalTopUsers.TopUser.displaySendAmount)
  return displaysendamount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommonStateSignalTopUsers_TopUser::set_allocated_displaysendamount(std::string* displaysendamount) {
  if (displaysendamount != nullptr) {
    
  } else {
    
  }
  displaysendamount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), displaysendamount,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcFunDanmu.CommonStateSignalTopUsers.TopUser.displaySendAmount)
}

// bool anonymousUser = 5;
inline void CommonStateSignalTopUsers_TopUser::clear_anonymoususer() {
  anonymoususer_ = false;
}
inline bool CommonStateSignalTopUsers_TopUser::_internal_anonymoususer() const {
  return anonymoususer_;
}
inline bool CommonStateSignalTopUsers_TopUser::anonymoususer() const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonStateSignalTopUsers.TopUser.anonymousUser)
  return _internal_anonymoususer();
}
inline void CommonStateSignalTopUsers_TopUser::_internal_set_anonymoususer(bool value) {
  
  anonymoususer_ = value;
}
inline void CommonStateSignalTopUsers_TopUser::set_anonymoususer(bool value) {
  _internal_set_anonymoususer(value);
  // @@protoc_insertion_point(field_set:AcFunDanmu.CommonStateSignalTopUsers.TopUser.anonymousUser)
}

// -------------------------------------------------------------------

// CommonStateSignalTopUsers

// repeated .AcFunDanmu.CommonStateSignalTopUsers.TopUser user = 1;
inline int CommonStateSignalTopUsers::_internal_user_size() const {
  return user_.size();
}
inline int CommonStateSignalTopUsers::user_size() const {
  return _internal_user_size();
}
inline void CommonStateSignalTopUsers::clear_user() {
  user_.Clear();
}
inline ::AcFunDanmu::CommonStateSignalTopUsers_TopUser* CommonStateSignalTopUsers::mutable_user(int index) {
  // @@protoc_insertion_point(field_mutable:AcFunDanmu.CommonStateSignalTopUsers.user)
  return user_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::CommonStateSignalTopUsers_TopUser >*
CommonStateSignalTopUsers::mutable_user() {
  // @@protoc_insertion_point(field_mutable_list:AcFunDanmu.CommonStateSignalTopUsers.user)
  return &user_;
}
inline const ::AcFunDanmu::CommonStateSignalTopUsers_TopUser& CommonStateSignalTopUsers::_internal_user(int index) const {
  return user_.Get(index);
}
inline const ::AcFunDanmu::CommonStateSignalTopUsers_TopUser& CommonStateSignalTopUsers::user(int index) const {
  // @@protoc_insertion_point(field_get:AcFunDanmu.CommonStateSignalTopUsers.user)
  return _internal_user(index);
}
inline ::AcFunDanmu::CommonStateSignalTopUsers_TopUser* CommonStateSignalTopUsers::_internal_add_user() {
  return user_.Add();
}
inline ::AcFunDanmu::CommonStateSignalTopUsers_TopUser* CommonStateSignalTopUsers::add_user() {
  // @@protoc_insertion_point(field_add:AcFunDanmu.CommonStateSignalTopUsers.user)
  return _internal_add_user();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AcFunDanmu::CommonStateSignalTopUsers_TopUser >&
CommonStateSignalTopUsers::user() const {
  // @@protoc_insertion_point(field_list:AcFunDanmu.CommonStateSignalTopUsers.user)
  return user_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace AcFunDanmu

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_CommonStateSignalTopUsers_2eproto
